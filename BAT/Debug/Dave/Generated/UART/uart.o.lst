   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "uart.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_USIC_CH_EnableEvent,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_USIC_CH_EnableEvent:
  25              	.LFB201:
  26              	 .file 1 "F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc/xmc_usic.h"
   1:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
   2:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @file xmc_usic.h
   3:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @date 2017-09-08
   4:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
   5:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @cond
   6:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  **************************************************************************************************
   7:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * XMClib v2.1.18 - XMC Peripheral Driver Library 
   8:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
   9:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * All rights reserved.                        
  11:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *                                             
  12:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * following conditions are met:   
  14:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *                                                                              
  15:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * disclaimer.                        
  17:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 
  18:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 
  21:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * products derived from this software without specific prior written permission.                  
  23:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *                                                                              
  24:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *                                                                              
  32:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  **************************************************************************************************
  35:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
  36:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Change History
  37:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * --------------
  38:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
  39:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-02-20:
  40:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Initial draft<br>
  41:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Documentation improved <br>
  42:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
  43:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-05-08:
  44:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_SetInputTriggerCombinationMode() and XMC_USIC_CH_SetTransmitBufferStatus
  45:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *      
  46:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-06-20:
  47:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  48:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 
  49:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-17:
  50:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Bug fixed in XMC_USIC_CH_SetTransmitBufferStatus API. OR operator removed.
  51:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
  52:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-24:
  53:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added APIs for enabling/disabling delay compensation XMC_USIC_CH_DisableDelayCompensation(
  54:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *       XMC_USIC_CH_DisableDelayCompensation()
  55:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
  56:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-25:
  57:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added APIs for defining if the data shift unit input is derived
  58:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *       from the input data path DXn or from the selected protocol pre-processors: XMC_USIC_CH_Con
  59:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *       and XMC_USIC_CH_ConnectInputDataShiftToDataInput()
  60:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
  61:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-27:
  62:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Fixed bug in XMC_USIC_CH_BRG_CLOCK_SOURCE_DX1T value.
  63:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added APIs for direct TBUF access: XMC_USIC_CH_WriteToTBUF() and XMC_USIC_CH_WriteToTBUFTC
  64:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added APIs for external input for BRG configuration:XMC_USIC_CH_ConfigExternalInputSignalT
  65:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
  66:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-28:
  67:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added API for enabling the transfer trigger unit to set bit TCSR.TE if the trigger signal 
  68:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *       Clear to Send (CTS) signal: XMC_USIC_CH_EnableTBUFDataValidTrigger() and XMC_USIC_CH_Disab
  69:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
  70:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 2016-03-09:
  71:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Optimization of write only registers
  72:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
  73:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 2016-04-10:
  74:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added an API to put the data into FIFO when hardware port control is enabled: XMC_USIC_CH_
  75:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
  76:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 2017-02-10:
  77:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_SetShiftDirection() to allow selection of shift direction of the data wo
  78:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_GetCaptureTimerValue() and XMC_USIC_CH_SetFractionalDivider()
  79:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
  80:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 2017-09-08:
  81:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Fixed value of macro XMC_USIC_CH_SHIFT_DIRECTION_MSB_FIRST used in XMC_USIC_CH_SetShiftDir
  82:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
  83:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @endcond
  84:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
  85:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
  86:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
  87:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** #ifndef XMC_USIC_H
  88:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC_H
  89:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
  90:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * HEADER FILES
  91:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *******************************************************************************/
  92:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
  93:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** #include "xmc_common.h"
  94:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
  95:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
  96:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @addtogroup XMClib XMC Peripheral Library
  97:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @{
  98:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
  99:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 100:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
 101:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @addtogroup USIC
 102:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @brief Universal Serial Interface Channel(USIC) driver for serial communication.
 103:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
 104:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * The Universal Serial Interface Channel(USIC) module is a flexible interface module
 105:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * covering several serial communication protocols. A USIC module contains two
 106:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * independent communication channels named USICx_CH0 and USICx_CH1, with x
 107:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * being the number of the USIC module. The user can program, during run-time, which protocol will 
 108:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * by each communication channel and which pins are used.
 109:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * The driver provides APIs, configuration structures and enumerations to configure common features
 110:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * communication protocols.
 111:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 
 112:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC driver features:
 113:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows configuration of FIFO for transmit and receive functions.
 114:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Provides a structure type XMC_USIC_CH_t to represent the USIC channel registers in a programm
 115:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  friendly format.
 116:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows configuration of automatic update for frame length, word length, slave select or slave
 117:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows transmission of data to FIFO using XMC_USIC_CH_TXFIFO_PutData() and XMC_USIC_CH_TXFIFO
 118:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows reading of received data in FIFO using XMC_USIC_CH_RXFIFO_GetData()
 119:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows configuration of baudrate using XMC_USIC_CH_SetBaudrate()
 120:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Provides API to trigger interrupts using XMC_USIC_CH_TriggerServiceRequest()
 121:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @{
 122:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
 123:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 124:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 125:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * MACROS
 126:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *******************************************************************************/
 127:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 128:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC0 ((XMC_USIC_t *)USIC0_BASE)			/**< USIC0 module base address */
 129:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC0_CH0 ((XMC_USIC_CH_t *)USIC0_CH0_BASE)	/**< USIC0 channel 0 base address */
 130:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC0_CH1 ((XMC_USIC_CH_t *)USIC0_CH1_BASE)	/**< USIC0 channel 1 base address */
 131:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 132:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(USIC1)
 133:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC1 ((XMC_USIC_t *)USIC1_BASE)			/**< USIC1 module base address */
 134:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC1_CH0 ((XMC_USIC_CH_t *)USIC1_CH0_BASE)	/**< USIC1 channel 0 base address */
 135:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC1_CH1 ((XMC_USIC_CH_t *)USIC1_CH1_BASE)	/**< USIC1 channel 1 base address */
 136:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 137:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 138:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(USIC2)
 139:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC2 ((XMC_USIC_t *)USIC2_BASE)			/**< USIC2 module base address */
 140:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC2_CH0 ((XMC_USIC_CH_t *)USIC2_CH0_BASE)	/**< USIC2 channel 0 base address */
 141:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC2_CH1 ((XMC_USIC_CH_t *)USIC2_CH1_BASE)	/**< USIC2 channel 1 base address */
 142:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 143:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 144:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DSEL_Msk  USIC_CH_DX0CR_DSEL_Msk   /**< Common mask for DSEL bitfield mask in 
 145:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DSEL_Pos  USIC_CH_DX0CR_DSEL_Pos   /**< Common mask for DSEL bitfield position
 146:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_SFSEL_Pos USIC_CH_DX0CR_SFSEL_Pos  /**< Common mask for SFSEL bitfield positio
 147:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_SFSEL_Msk USIC_CH_DX0CR_SFSEL_Msk  /**< Common mask for SFSEL bitfield mask in
 148:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DPOL_Msk  USIC_CH_DX0CR_DPOL_Msk   /**< Common mask for DPOL bitfield mask in 
 149:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DFEN_Msk  USIC_CH_DX0CR_DFEN_Msk   /**< Common mask for DFEN bitfield mask in 
 150:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DSEN_Msk  USIC_CH_DX0CR_DSEN_Msk   /**< Common mask for DSEN bitfield mask in 
 151:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_CM_Pos    USIC_CH_DX0CR_CM_Pos     /**< Common mask for CM bitfield position i
 152:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_CM_Msk    USIC_CH_DX0CR_CM_Msk     /**< Common mask for CM bitfield mask in DX
 153:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_INSW_Msk  USIC_CH_DX0CR_INSW_Msk   /**< Common mask for INSW bitfield mask in 
 154:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_INSW_pos  USIC_CH_DX0CR_INSW_Pos   /**< Common mask for INSW bitfield position
 155:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 156:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** #if UC_FAMILY == XMC1
 157:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  #include "xmc1_usic_map.h"
 158:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 159:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 160:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** #if UC_FAMILY == XMC4
 161:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  #include "xmc4_usic_map.h"
 162:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 163:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 164:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 165:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * ENUMS
 166:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *******************************************************************************/
 167:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 168:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
 169:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel driver status
 170:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
 171:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_STATUS
 172:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
 173:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_STATUS_OK,    /**< USIC driver status : OK */
 174:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_STATUS_ERROR, /**< USIC driver status : ERROR */
 175:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_STATUS_BUSY   /**< USIC driver status : BUSY */
 176:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_STATUS_t;
 177:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 178:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
 179:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel kernel mode
 180:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** */
 181:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_KERNEL_MODE
 182:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
 183:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_RUN_0  = 0x0UL,  /**< Run mode 0 (transmission and reception possible)*/
 184:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_RUN_1  = 0x1UL << USIC_CH_KSCFG_NOMCFG_Pos,  /**< Run mode 1 (transmissio
 185:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_STOP_0 = 0x2UL << USIC_CH_KSCFG_NOMCFG_Pos,  /**< Stop mode 0 (no transmi
 186:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_STOP_1 = 0x3UL << USIC_CH_KSCFG_NOMCFG_Pos   /**< Stop mode 1 (both trans
 187:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_KERNEL_MODE_t;
 188:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 189:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
 190:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel operating mode
 191:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
 192:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_OPERATING_MODE
 193:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
 194:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_IDLE = 0x0UL, /**< USIC channel idle */
 195:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_SPI  = 0x1UL << USIC_CH_CCR_MODE_Pos, /**< SPI mode */
 196:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_UART = 0x2UL << USIC_CH_CCR_MODE_Pos, /**< UART mode */
 197:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_I2S  = 0x3UL << USIC_CH_CCR_MODE_Pos, /**< I2S mode */
 198:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_I2C  = 0x4UL << USIC_CH_CCR_MODE_Pos  /**< I2C mode */
 199:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_OPERATING_MODE_t;
 200:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 201:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
 202:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel inputs
 203:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
 204:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT
 205:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
 206:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX0, /**< DX0 input */
 207:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX1, /**< DX1 input */
 208:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX2, /**< DX2 input */
 209:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX3, /**< DX3 input */
 210:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX4, /**< DX4 input */
 211:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX5  /**< DX5 input */
 212:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_INPUT_t;
 213:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 214:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
 215:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel input source sampling frequency
 216:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
 217:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT_SAMPLING_FREQ
 218:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
 219:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_SAMPLING_FREQ_FPERIPH            = 0x0UL, /**< Use fperiph frequency for input 
 220:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_SAMPLING_FREQ_FRACTIONAL_DIVIDER = 0x1UL << USIC_CH_DXCR_SFSEL_Pos  /**< Use fF
 221:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_INPUT_SAMPLING_FREQ_t;
 222:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 223:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
 224:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel input combination mode
 225:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
 226:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT_COMBINATION_MODE
 227:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
 228:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_TRIGGER_DISABLED = 0x0UL, /**< The trigger activation is disab
 229:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_RISING_EDGE      = 0x1UL, /**< A rising edge activates DXnT*/
 230:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_FALLING_EDGE     = 0x2UL, /**< A falling edge activates DXnT*/
 231:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_BOTH_EDGES       = 0x3UL, /**< Both edges activate DXnT*/
 232:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_INPUT_COMBINATION_MODE_t;
 233:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 234:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
 235:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel data transmission start modes.
 236:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Data shifted out of the transmit pin depends on the value configured for the
 237:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * TDEN bitfield of the TCSR register. Following enum values are used for configuring
 238:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * the TCSR->TDEN bitfield.
 239:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
 240:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_START_TRANSMISION_MODE
 241:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
 242:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_DISABLED      = 0x0U, /**< Passive data level is sent out on transm
 243:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV        = 0x1UL << USIC_CH_TCSR_TDEN_Pos, /**< Transmission o
 244:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_0 = 0x2UL << USIC_CH_TCSR_TDEN_Pos, /**< Transmission o
 245:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_1 = 0x3UL << USIC_CH_TCSR_TDEN_Pos  /**< Transmission o
 246:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_START_TRANSMISION_MODE_t;
 247:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 248:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
 249:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel interrupt node pointers
 250:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
 251:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INTERRUPT_NODE_POINTER
 252:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
 253:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT      = USIC_CH_INPR_TSINP_Pos, /**< Node pointe
 254:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER     = USIC_CH_INPR_TBINP_Pos, /**< Node pointe
 255:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEIVE             = USIC_CH_INPR_RINP_Pos,  /**< Node pointe
 256:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE   = USIC_CH_INPR_AINP_Pos,  /**< Node pointe
 257:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL            = USIC_CH_INPR_PINP_Pos   /**< Node pointe
 258:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_INTERRUPT_NODE_POINTER_t;
 259:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 260:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
 261:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel events
 262:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
 263:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_EVENT
 264:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
 265:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_RECEIVE_START       = USIC_CH_CCR_RSIEN_Msk, /**< Receive start event */
 266:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_DATA_LOST           = USIC_CH_CCR_DLIEN_Msk, /**< Data lost event */
 267:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_TRANSMIT_SHIFT      = USIC_CH_CCR_TSIEN_Msk, /**< Transmit shift event */
 268:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_TRANSMIT_BUFFER     = USIC_CH_CCR_TBIEN_Msk, /**< Transmit buffer event */
 269:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_STANDARD_RECEIVE    = USIC_CH_CCR_RIEN_Msk,  /**< Receive event */
 270:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE = USIC_CH_CCR_AIEN_Msk,  /**< Alternate receive event */
 271:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_BAUD_RATE_GENERATOR = USIC_CH_CCR_BRGIEN_Msk /**< Baudrate generator event */
 272:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_EVENT_t;
 273:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 274:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
 275:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel parity mode
 276:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** */
 277:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_PARITY_MODE
 278:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
 279:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_NONE     = 0x0UL,  /**< Disable parity mode */
 280:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_EVEN     = 0x2UL << USIC_CH_CCR_PM_Pos,  /**< Enable even parity mode */
 281:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_ODD      = 0x3UL << USIC_CH_CCR_PM_Pos   /**< Enable odd parity mode */
 282:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_PARITY_MODE_t;
 283:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 284:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
 285:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel data output mode
 286:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** */
 287:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_DATA_OUTPUT_MODE
 288:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
 289:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_DATA_OUTPUT_MODE_NORMAL   = 0x0UL,  /**< Data output normal mode */
 290:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_DATA_OUTPUT_MODE_INVERTED = 0x1UL << USIC_CH_SCTR_DOCFG_Pos   /**< Data output invert
 291:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_DATA_OUTPUT_MODE_t;
 292:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 293:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
 294:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel data transmit buffer status
 295:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** */
 296:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TBUF_STATUS
 297:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
 298:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_IDLE = 0x0UL,                 /**< Transfer buffer is currently idle*/
 299:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_BUSY = USIC_CH_TCSR_TDV_Msk   /**< Transfer buffer is currently busy*/
 300:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TBUF_STATUS_t;
 301:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 302:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 303:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 304:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
 305:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel data transmit buffer status modification
 306:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** */
 307:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TBUF_STATUS_SET
 308:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
 309:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_SET_BUSY   = 0x1UL, /**< Set Transfer buffer status to busy*/
 310:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_SET_IDLE   = 0x2UL  /**< Set Transfer buffer status to idle*/
 311:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TBUF_STATUS_SET_t;
 312:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 313:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
 314:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive buffer status
 315:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** */
 316:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RBUF_STATUS
 317:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
 318:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RBUF_STATUS_DATA_VALID0 = USIC_CH_RBUFSR_RDV0_Msk, /**< RBUF0 data has not yet been r
 319:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RBUF_STATUS_DATA_VALID1 = USIC_CH_RBUFSR_RDV1_Msk  /**< RBUF1 data has not yet been r
 320:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_RBUF_STATUS_t;
 321:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 322:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
 323:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel output signal passive data level
 324:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** */
 325:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USCI_CH_PASSIVE_DATA_LEVEL
 326:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
 327:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PASSIVE_DATA_LEVEL0 = 0x0UL, /**< Passive level(idle mode signal level) 0 */
 328:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PASSIVE_DATA_LEVEL1 = 0x1UL << USIC_CH_SCTR_PDL_Pos  /**< Passive level(idle mode sig
 329:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_PASSIVE_DATA_LEVEL_t;
 330:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 331:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
 332:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive FIFO size
 333:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** */
 334:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_FIFO_SIZE
 335:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
 336:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_DISABLED     = 0x0U,  /**< FIFO Disabled */
 337:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_2WORDS  = 0x1U,  /**< FIFO size: 2 words */
 338:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_4WORDS  = 0x2U,  /**< FIFO size: 4 words */
 339:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_8WORDS  = 0x3U,  /**< FIFO size: 8 words */
 340:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_16WORDS = 0x4U,  /**< FIFO size: 16 words */
 341:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_32WORDS = 0x5U,  /**< FIFO size: 32 words */
 342:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_64WORDS = 0x6U   /**< FIFO size: 64 words */
 343:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_FIFO_SIZE_t;
 344:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 345:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
 346:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel transmit FIFO interrupt node pointers
 347:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** */
 348:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER
 349:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
 350:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD  = USIC_CH_TBCTR_STBINP_Pos,  /**< Node pointe
 351:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE = USIC_CH_TBCTR_ATBINP_Pos   /**< Node pointe
 352:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t;
 353:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 354:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
 355:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel transmit FIFO event configuration
 356:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** */
 357:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_EVENT_CONF
 358:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
 359:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD  = USIC_CH_TBCTR_STBIEN_Msk,   /**< Enable FIFO standard t
 360:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_CONF_ERROR     = (int32_t)USIC_CH_TBCTR_TBERIEN_Msk  /**< Enable transmi
 361:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TXFIFO_EVENT_CONF_t;
 362:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 363:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
 364:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel transmit FIFO status
 365:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** */
 366:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_EVENT
 367:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
 368:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_STANDARD = USIC_CH_TRBSR_STBI_Msk,    /**< Transmit FIFO status: Standar
 369:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_ERROR    = USIC_CH_TRBSR_TBERI_Msk    /**< Transmit FIFO status: Error e
 370:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TXFIFO_EVENT_t;
 371:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 372:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
 373:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive FIFO interrupt node pointers
 374:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** */
 375:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER
 376:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
 377:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD  = USIC_CH_RBCTR_SRBINP_Pos, /**< Node pointer
 378:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE = USIC_CH_RBCTR_ARBINP_Pos  /**< Node pointer
 379:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t;
 380:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 381:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
 382:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive FIFO event configuration
 383:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** */
 384:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_EVENT_CONF
 385:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
 386:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD  = USIC_CH_RBCTR_SRBIEN_Msk,   /**< Enable FIFO standard r
 387:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_ERROR     = (int32_t)USIC_CH_RBCTR_RBERIEN_Msk,  /**< Enable receiv
 388:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE = USIC_CH_RBCTR_ARBIEN_Msk   /**< Enable FIFO alternative
 389:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_RXFIFO_EVENT_CONF_t;
 390:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 391:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
 392:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive FIFO status
 393:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** */
 394:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_EVENT
 395:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
 396:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_STANDARD  = USIC_CH_TRBSR_SRBI_Msk,   /**< Receive FIFO status: Standard
 397:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_ERROR     = USIC_CH_TRBSR_RBERI_Msk,  /**< Receive FIFO status: Error ev
 398:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_ALTERNATE = USIC_CH_TRBSR_ARBI_Msk    /**< Receive FIFO status: Alternat
 399:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_RXFIFO_EVENT_t;
 400:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 401:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
 402:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator clock source
 403:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** */
 404:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_CLOCK_SOURCE
 405:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
 406:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_SOURCE_DIVIDER = 0x0UL, /**< Baudrate generator clock source : Source divid
 407:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_SOURCE_DX1T    = 0x2UL << USIC_CH_BRG_CLKSEL_Pos  /**< Baudrate generator c
 408:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_CLOCK_SOURCE_t;
 409:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 410:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
 411:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator divider mode
 412:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** */
 413:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE
 414:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
 415:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_DISABLED   = 0x0UL, /**< Baudrate generator clock divider: Dis
 416:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL     = 0x1UL << USIC_CH_FDR_DM_Pos, /**< Baudrate genera
 417:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL = 0x2UL << USIC_CH_FDR_DM_Pos  /**< Baudrate genera
 418:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_t;
 419:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 420:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
 421:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator master clock passive level
 422:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** */
 423:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL
 424:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
 425:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_0 = 0x0UL, /**< Baudrate generator master clock passiv
 426:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_1 = 0x1UL << USIC_CH_BRG_MCLKCFG_Pos  /**< Baudrate ge
 427:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_t;
 428:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 429:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
 430:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator shift clock passive level
 431:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** */
 432:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL
 433:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
 434:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED = 0x0UL, /**< Shift clock passive leve
 435:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_DISABLED = 0x1UL << USIC_CH_BRG_SCLKCFG_Pos, /*
 436:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_ENABLED  = (int32_t)(0x2UL << USIC_CH_BRG_SCLKC
 437:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_ENABLED  = (int32_t)(0x3UL << USIC_CH_BRG_SCLKC
 438:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t;
 439:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 440:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
 441:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator shift clock output
 442:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** */
 443:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT
 444:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
 445:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK = 0x0UL, /**< Baudrate generator shift clock output: SCL.
 446:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_DX1 = 0x1UL << USIC_CH_BRG_SCLKOSEL_Pos   /**< Baudrate genera
 447:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t;
 448:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 449:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
 450:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel shift direction.
 451:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** * Defines the shift direction of the data words for transmission and reception
 452:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** */
 453:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_SHIFT_DIRECTION
 454:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
 455:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_SHIFT_DIRECTION_LSB_FIRST = 0x0UL, /**< Shift LSB first. The first data bit of a data
 456:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_SHIFT_DIRECTION_MSB_FIRST = 0x1UL << USIC_CH_SCTR_SDIR_Pos /**< Shift MSB first. The 
 457:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_SHIFT_DIRECTION_t;
 458:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 459:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 460:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 461:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * DATA STRUCTURES
 462:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *******************************************************************************/
 463:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 464:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /*Anonymous structure/union guard start*/
 465:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(__CC_ARM)
 466:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   #pragma push
 467:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   #pragma anon_unions
 468:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** #elif defined(__TASKING__)
 469:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   #pragma warning 586
 470:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 471:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 472:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
 473:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC module structure
 474:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
 475:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** typedef USIC_GLOBAL_TypeDef XMC_USIC_t;
 476:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 477:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
 478:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel structure.<br> The members of the structure are same as in the device header file, 
 479:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * except for some registers.
 480:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * DX0CR, DX1CR, DX2CR, DX3CR, DX4CR and DX5CR are replaced with the array DXCR[6].
 481:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * TBUF0 to TBUF31 are replaced with TBUF[32].
 482:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * IN0 to IN31 are replaced with IN[32].
 483:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
 484:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** typedef struct XMC_USIC_CH
 485:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
 486:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RESERVED0;
 487:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  CCFG;			/**< Channel configuration register*/
 488:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RESERVED1;
 489:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  KSCFG;			/**< Kernel state configuration register*/
 490:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  FDR;			/**< Fractional divider configuration register*/
 491:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  BRG;			/**< Baud rate generator register*/
 492:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  INPR;			/**< Interrupt node pointer register*/
 493:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  DXCR[6];		/**< Input control registers DX0 to DX5.*/
 494:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  SCTR;			/**< Shift control register*/
 495:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  TCSR;
 496:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 497:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   union {
 498:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR_IICMode;	/**< I2C protocol configuration register*/
 499:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR_IISMode; /**< I2S protocol configuration register*/
 500:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR_SSCMode;	/**< SPI protocol configuration register*/
 501:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR;			/**< Protocol configuration register*/
 502:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR_ASCMode;	/**< UART protocol configuration register*/
 503:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   };
 504:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  CCR;			/**< Channel control register*/
 505:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  CMTR;			/**< Capture mode timer register*/
 506:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 507:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   union {
 508:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR_IICMode;	/**< I2C protocol status register*/
 509:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR_IISMode;	/**< I2S protocol status register*/
 510:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR_SSCMode;	/**< SPI protocol status register*/
 511:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR;			/**< Protocol status register*/
 512:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR_ASCMode;	/**< UART protocol status register*/
 513:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   };
 514:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   __O  uint32_t  PSCR;			/**< Protocol status clear register*/
 515:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUFSR;		/**< Receive buffer status register*/
 516:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUF;			/**< Receive buffer register*/
 517:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUFD;			/**< Debug mode receive buffer register*/
 518:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUF0;			/**< Receive buffer 0*/
 519:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUF1;			/**< Receive buffer 1*/
 520:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUF01SR;		/**< Receive buffer status register*/
 521:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   __O  uint32_t  FMR;			/**< Flag modification register*/
 522:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RESERVED2[5];
 523:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  TBUF[32];		/**< Tranmsit buffer registers*/
 524:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  BYP;			/**< FIFO bypass register*/
 525:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  BYPCR;			/**< FIFO bypass control register*/
 526:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  TBCTR;			/**< Transmit FIFO control register*/
 527:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  RBCTR;			/**< Receive FIFO control register*/
 528:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  TRBPTR;		/**< Transmit/recive buffer pointer register*/
 529:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  TRBSR;			/**< Transmit/receive buffer status register*/
 530:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   __O  uint32_t  TRBSCR;		/**< Transmit/receive buffer status clear register*/
 531:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  OUTR;			/**< Receive FIFO output register*/
 532:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  OUTDR;			/**< Receive FIFO debug output register*/
 533:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RESERVED3[23];
 534:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   __O  uint32_t  IN[32];		/**< Transmit FIFO input register*/
 535:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_t;
 536:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 537:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 538:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /*Anonymous structure/union guard end*/
 539:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(__CC_ARM)
 540:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   #pragma pop
 541:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** #elif defined(__TASKING__)
 542:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   #pragma warning restore
 543:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 544:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 545:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 546:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * API PROTOTYPES
 547:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  ******************************************************************************/
 548:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 549:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** #ifdef __cplusplus
 550:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** extern "C" {
 551:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 552:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 553:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_IsModuleValid(const XMC_USIC_t *const module)
 554:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
 555:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   bool tmp;
 556:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 557:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = (module == XMC_USIC0);
 558:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(XMC_USIC1)  
 559:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = tmp || (module == XMC_USIC1);
 560:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 561:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(XMC_USIC2)  
 562:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = tmp || (module == XMC_USIC2);
 563:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 564:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 565:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   return tmp;
 566:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** }
 567:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 568:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_IsChannelValid(const XMC_USIC_CH_t *const channel)
 569:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
 570:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   bool tmp;
 571:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 572:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1));
 573:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(XMC_USIC1)  
 574:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = tmp || ((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1));
 575:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 576:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(XMC_USIC2)  
 577:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = tmp || ((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1));
 578:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 579:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 580:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   return tmp;
 581:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** }
 582:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 583:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /* Common APIs */
 584:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 585:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
 586:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  usic Pointer to USIC module handler of type @ref XMC_USIC_t.\n
 587:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC0 to @ref XMC_USIC2 based on device support.
 588:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 589:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 
 590:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 591:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the USIC module.\n\n
 592:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the clock for the USIC module by following the
 593:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * clock enabling sequence for the selected device.
 594:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
 595:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 596:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_Enable(), XMC_USIC_Disable() \n\n\n
 597:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
 598:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_Enable(XMC_USIC_t *const usic);
 599:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
 600:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  usic Pointer to USIC module handler of type @ref XMC_USIC_t.\n
 601:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC0 to @ref XMC_USIC2 based on device support.
 602:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 603:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
 604:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 605:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the USIC module.\n\n
 606:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the clock for the USIC module by following the clock
 607:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * disabling sequence for the selected device.
 608:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
 609:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 610:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_Disable(), XMC_USIC_Enable() \n\n\n
 611:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
 612:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_Disable(XMC_USIC_t *const usic);
 613:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
 614:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 615:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 616:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 617:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
 618:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 619:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the USIC channel. \n\n
 620:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel is enabled by setting the module enable bit in KSCFG register bitfield MODEN.
 621:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * On enabling, the channel is set to idle mode.
 622:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
 623:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 624:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_Disable(), XMC_USIC_Enable() \n\n\n
 625:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
 626:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel);
 627:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
 628:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 629:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 630:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 631:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
 632:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 633:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the USIC channel.\n\n
 634:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel is disabled by setting the module enable bit(MDEN) to 0 in the register KSCFG.
 635:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
 636:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 637:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_Enable(), XMC_USIC_Disable() \n\n\n
 638:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
 639:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_Disable(XMC_USIC_CH_t *const channel);
 640:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 641:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
 642:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 643:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 644:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  rate Desired baudrate. \b Range: minimum value = 100, maximum value depends on the perip
 645:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				and \a oversampling. Maximum baudrate can be derived using the formula: (fperiph * 1023)/(10
 646:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  oversampling Required oversampling. The value indicates the number of time quanta for on
 647:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 						This can be related to the number of samples for each logic state of the data signal. \n
 648:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 						\b Range: 1 to 32. Value should be chosen based on the protocol used.
 649:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status indicating the baudrate configuration.\n
 650:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_STATUS_OK if baudrate is successfully configured,
 651:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 					  @ref XMC_USIC_CH_STATUS_ERROR if desired baudrate or oversampling is invalid.
 652:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
 653:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 654:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Configures the baudrate of the USIC channel. \n\n
 655:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Baudrate is configured by considering the peripheral frequency and the desired baudrate.
 656:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Optimum values of FDR->STEP and BRG->PDIV are calulated and used for generating the desired
 657:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * baudrate.
 658:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
 659:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 660:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetStartTransmisionMode(), XMC_USIC_CH_SetInputSource() \n\n\n
 661:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
 662:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t 
 663:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 664:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
 665:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 666:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 667:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  pdiv Desired divider for the external frequency input. \b Range: minimum value = 1, maxi
 668:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  oversampling Required oversampling. The value indicates the number of time quanta for on
 669:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 						This can be related to the number of samples for each logic state of the data signal. \n
 670:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 						\b Range: 1 to 32. Value should be chosen based on the protocol used.
 671:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  combination_mode Selects which edge of the synchronized(and optionally filtered) signal 
 672:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *                          output DXnT of the input stage.
 673:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
 674:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 675:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
 676:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 677:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the external frequency input for the Baudrate Generator and configures the divider, over
 678:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * the combination mode of the USIC channel. \n\n
 679:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
 680:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 681:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetBRGInputClockSource(), XMC_USIC_CH_SetInputTriggerCombinationMode() \n\n\n
 682:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
 683:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_ConfigExternalInputSignalToBRG(XMC_USIC_CH_t *const channel,
 684:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 		                                         const uint16_t pdiv,
 685:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 												 const uint32_t oversampling,
 686:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 												 const XMC_USIC_CH_INPUT_COMBINATION_MODE_t combination_mode);
 687:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 688:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
 689:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 690:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 691:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 692:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 693:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  source Input source select for the input stage. The table below maps the enum value with
 694:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * <table><tr><td>0</td><td>DXnA</td></tr><tr><td>1</td><td>DXnB</td></tr><tr><td>2</td><td>DXnC</t
 695:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * <tr><td>4</td><td>DXnE</td></tr><tr><td>5</td><td>DXnF</td></tr><tr><td>6</td><td>DXnG</td></tr>
 696:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * </tr></table>
 697:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 698:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
 699:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 700:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Selects the data source for USIC input stage.\n\n
 701:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Selects the input data signal source among DXnA, DXnB.. DXnG for the input stage. The API can be
 702:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * like DX0CR, DX1CR etc. 
 703:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *  
 704:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 705:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableIn
 706:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 707:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
 708:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INP
 709:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
 710:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 711:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****                          ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 712:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** }
 713:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
 714:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 715:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 716:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 717:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 718:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 719:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
 720:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 721:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * The input of the data shift unit is controlled by the
 722:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * protocol pre-processor. \n\n
 723:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
 724:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 725:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_ConnectInputDataShiftToDataInput()\n\n\n
 726:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
 727:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_ConnectInputDataShiftToPPP(XMC_USIC_CH_t *const channel, const XMC
 728:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
 729:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_INSW_Msk;
 730:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** }
 731:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 732:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
 733:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 734:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 735:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 736:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 737:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 738:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
 739:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 740:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * The input of the data shift unit is connected to
 741:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * the selected data input line. \n\n
 742:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
 743:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * This setting is used
 744:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * if the signals are directly derived from an input
 745:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * pin without treatment by the protocol preprocessor.
 746:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 747:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_ConnectInputDataShiftToPPP()\n\n\n
 748:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
 749:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_ConnectInputDataShiftToDataInput(XMC_USIC_CH_t *const channel, con
 750:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
 751:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] |= USIC_CH_DXCR_INSW_Msk;
 752:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** }
 753:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 754:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
 755:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 756:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 757:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 758:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 759:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 760:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
 761:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 762:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables input inversion for USIC channel input data signal. \n\n
 763:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
 764:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Polarity of the input source can be changed to provide inverted data input.
 765:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 766:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableInputInversion()\n\n\n
 767:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
 768:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputInversion(XMC_USIC_CH_t *const channel, const XMC_USIC_
 769:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
 770:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] |= USIC_CH_DXCR_DPOL_Msk;
 771:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** }
 772:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 773:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
 774:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 775:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 776:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 777:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 778:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 779:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
 780:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 781:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables input inversion for USIC channel. \n\n
 782:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
 783:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Resets the input data polarity for the USIC channel input data signal.
 784:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 785:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputInversion()\n\n\n
 786:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
 787:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputInversion(XMC_USIC_CH_t *const channel, const XMC_USIC
 788:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
 789:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_DPOL_Msk;
 790:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** }
 791:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 792:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
 793:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 794:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 795:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 796:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
 797:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 798:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables delay compensation. \n\n
 799:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
 800:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Delay compensation can be applied to the receive path.
 801:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 802:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableDelayCompensation()\n\n\n
 803:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
 804:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableDelayCompensation(XMC_USIC_CH_t *const channel)
 805:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
 806:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[1U] |= USIC_CH_DX1CR_DCEN_Msk;
 807:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** }
 808:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 809:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
 810:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 811:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 812:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 813:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
 814:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 815:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables delay compensation.. \n\n
 816:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
 817:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 818:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableDelayCompensation()\n\n\n
 819:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
 820:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableDelayCompensation(XMC_USIC_CH_t *const channel)
 821:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
 822:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[1U] &=(uint32_t)~USIC_CH_DX1CR_DCEN_Msk;
 823:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** }
 824:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 825:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
 826:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 827:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 828:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 829:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 830:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 831:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
 832:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 833:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the input digital filter for USIC channel input data signal. \n\n
 834:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will be digitally filtered.
 835:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
 836:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 837:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableInputDigitalFilter()\n\n\n
 838:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
 839:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputDigitalFilter(XMC_USIC_CH_t *const channel, const XMC_U
 840:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
 841:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] |= (uint32_t)USIC_CH_DXCR_DFEN_Msk;
 842:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** }
 843:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
 844:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 845:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 846:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 847:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 848:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 849:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
 850:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 851:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the input digital filter for USIC channel input data signal. \n\n
 852:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will not be digitally filtered.
 853:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
 854:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 855:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputDigitalFilter()\n\n\n
 856:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
 857:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputDigitalFilter(XMC_USIC_CH_t *const channel, const XMC_
 858:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
 859:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_DFEN_Msk;
 860:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** }
 861:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
 862:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 863:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 864:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 865:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 866:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 867:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
 868:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 869:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables input synchronization for the USIC channel input data signal. \n\n
 870:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will be synchronized with fPERIPH.
 871:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * A noisy signal can be synchronized and filtered by enabling the digital filter.
 872:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
 873:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 874:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableInputSync(), XMC_USIC_CH_EnableInputDigitalFilter()\n\n\n
 875:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
 876:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputSync(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_IN
 877:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
 878:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] |=(uint32_t)USIC_CH_DXCR_DSEN_Msk;
 879:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** }
 880:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
 881:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 882:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 883:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 884:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 885:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 886:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
 887:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 888:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables input synchronization for the USIC channel input data signal. \n\n
 889:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will not be synchronized.
 890:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
 891:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 892:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_DisableInputDigitalFilter() \n\n\n
 893:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
 894:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputSync(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_I
 895:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
 896:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_DSEN_Msk;
 897:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** }
 898:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
 899:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 900:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 901:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 902:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 903:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  sampling_freq Sampling frequency value of type \a XMC_USIC_CH_INPUT_SAMPLING_FREQ_t.
 904:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 905:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
 906:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 907:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets sampling frequency for USIC channel input data signal. \n\n
 908:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
 909:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 910:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputSource(), XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_EnableInputDigitalFilte
 911:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
 912:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputSamplingFreq(XMC_USIC_CH_t *const channel,
 913:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 		                                              const XMC_USIC_CH_INPUT_t input,
 914:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 		                                              const XMC_USIC_CH_INPUT_SAMPLING_FREQ_t sampling_fr
 915:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
 916:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DXCR_SFSEL_Msk)) |
 917:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****                          ((uint32_t)sampling_freq);
 918:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** }
 919:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 920:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
 921:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 922:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 923:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 924:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 925:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  combination_mode Combination mode value of type \a XMC_USIC_CH_INPUT_COMBINATION_MODE_t.
 926:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 927:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
 928:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 929:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Selects which edge of the synchronized signal DXnS activates the trigger output DXnT of the inpu
 930:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
 931:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 932:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputSource(), XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_EnableInputDigitalFilte
 933:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
 934:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputTriggerCombinationMode(XMC_USIC_CH_t *const channel,
 935:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 		                                                        const XMC_USIC_CH_INPUT_t input,
 936:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 		                                                        const XMC_USIC_CH_INPUT_COMBINATION_MODE_
 937:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
 938:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DXCR_CM_Msk)) |
 939:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****                          ((uint32_t)combination_mode << USIC_CH_DXCR_CM_Pos);
 940:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** }
 941:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 942:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
 943:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 944:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 945:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  clock_source clock source for the BRG.
 946:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 947:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
 948:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 949:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the clock source for the BRG. \n\n
 950:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
 951:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 952:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputTriggerCombinationMode(), XMC_USIC_CH_SetExternalClockBRGDivider()\n\n\n
 953:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
 954:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetBRGInputClockSource(XMC_USIC_CH_t *const channel, const XMC_USI
 955:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
 956:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   channel->BRG = (uint32_t)(channel->BRG & (~USIC_CH_BRG_CLKSEL_Msk)) | (uint32_t)(clock_source);
 957:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** }
 958:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 959:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
 960:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 961:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 962:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted. \n
 963:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: 16bit unsigned data. minimum= 0, maximum= 65535
 964:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 965:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
 966:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 967:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Writes data into the transmit buffer. \n\n
 968:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * The data provided is placed in TBUF[0U].
 969:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
 970:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
 971:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 972:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_WriteToTBUFTCI() \n\n\n
 973:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
 974:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_WriteToTBUF(XMC_USIC_CH_t *const channel, const uint16_t data)
 975:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
 976:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TBUF[0U] = data;
 977:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** }
 978:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
 979:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
 980:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 981:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 982:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted.
 983:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param transmit_control_information transmit control information to be configured while transmit
 984:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: minimum= 0, maximum= 31.
 985:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 986:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
 987:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 988:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Writes data to the transmit buffer in a control mode. \n\n
 989:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * When the respective control mode is enabled , this API can be used.
 990:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
 991:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
 992:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 993:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_WriteToTBUF() \n\n\n
 994:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
 995:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_WriteToTBUFTCI(XMC_USIC_CH_t *const channel,
 996:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****                                              const uint16_t data,
 997:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****                                              const uint32_t transmit_control_information)
 998:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
 999:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TBUF[transmit_control_information] = data;
1000:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** }
1001:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
1002:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
1003:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1004:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1005:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  word_length Number of bits to be configured for a data word. \n
1006:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 					   \b Range: minimum= 1, maximum= 16. \n
1007:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 					   e.g: For word length of 8, \a word_length should be provided as 8.
1008:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1009:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1010:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1011:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the data word length in number of bits. \n\n
1012:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the number of bits to represent a data word. Frame length should be a multiple of word leng
1013:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1014:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1015:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetFrameLength()\n\n\n
1016:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
1017:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_len
1018:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
1019:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
1020:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****                   (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
1021:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** }
1022:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
1023:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
1024:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1025:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1026:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  word_length Number of bits to be configured for a data word. \n
1027:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *             \b Range: minimum= 1, maximum= 16. \n
1028:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *             e.g: For word length of 8, \a word_length should be provided as 8.
1029:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1030:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1031:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1032:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the data word length in number of bits. \n\n
1033:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the number of bits to represent a data word. Frame length should be a multiple of word leng
1034:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1035:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1036:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetFrameLength()\n\n\n
1037:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
1038:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetShiftDirection(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_
1039:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
1040:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_SDIR_Msk)) | (uint32_t)shift_direction;
1041:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** }
1042:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
1043:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
1044:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
1045:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1046:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1047:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Captured counter value 
1048:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1049:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1050:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1051:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * The value of the counter is captured if one of the trigger signals DX0T or DX1T are activated by
1052:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
1053:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_GetCaptureTimerValue(const XMC_USIC_CH_t *const channel)
1054:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
1055:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   return channel->CMTR;
1056:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** }
1057:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
1058:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
1059:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1060:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1061:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  mode divider mode ::XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_t \n
1062:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  step divider \n
1063:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *             \b XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL resulting divider = 1023 - step \n
1064:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *             \b XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL resulting divider = 1023 / step \n
1065:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1066:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1067:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1068:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1069:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * The fractional divider generates its output frequency fFD by either dividing the input frequency
1070:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1071:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
1072:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetFractionalDivider(XMC_USIC_CH_t *const channel, const XMC_USIC_
1073:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
1074:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   channel->FDR = mode | step;
1075:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** }
1076:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
1077:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
1078:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1079:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1080:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  frame_length Number of bits in a frame. \n
1081:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 						\b Range: minimum= 1, maximum= 0x3f. The maximum value for fixed frame size is 0x3f. \n
1082:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 						e.g: For a frame length of 16, \a frame_length should be provided as 16.
1083:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1084:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1085:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1086:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Define the data frame length.\n\n
1087:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Set the number of bits to be serially transmitted in a frame.
1088:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * The frame length should be multiples of word length. If the value is set to 0x40, the frame leng
1089:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * has to be controlled explicitly. 
1090:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1091:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1092:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1093:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
1094:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_l
1095:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
1096:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
1097:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****                   (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
1098:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** }
1099:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
1100:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
1101:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1102:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1103:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Bit mask of the channel events to be enabled. Use @ref XMC_USIC_CH_EVENT_t for the 
1104:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC_CH_EVENT_RECEIVE_START, @ref XMC_USIC_CH_EVENT_DATA_LOST etc. Multip
1105:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				can be combined using \a OR operation.
1106:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1107:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1108:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1109:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Enable the channel interrupt events.\n\n
1110:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Common channel events related to serial communication can be configured using this API.
1111:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Multiple events can be combined using the bitwise OR operation and configured in one function ca
1112:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EVENT_t enumerates multiple protocol event bitmasks. These enumerations can be used 
1113:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1114:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1115:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
1116:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
1117:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
1118:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
  27              	 .loc 1 1118 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
  43 0008 3960     	 str r1,[r7]
1119:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   channel->CCR |= event;
  44              	 .loc 1 1119 0
  45 000a 7B68     	 ldr r3,[r7,#4]
  46 000c 1A6C     	 ldr r2,[r3,#64]
  47 000e 3B68     	 ldr r3,[r7]
  48 0010 1A43     	 orrs r2,r2,r3
  49 0012 7B68     	 ldr r3,[r7,#4]
  50 0014 1A64     	 str r2,[r3,#64]
1120:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** }
  51              	 .loc 1 1120 0
  52 0016 0C37     	 adds r7,r7,#12
  53              	.LCFI3:
  54              	 .cfi_def_cfa_offset 4
  55 0018 BD46     	 mov sp,r7
  56              	.LCFI4:
  57              	 .cfi_def_cfa_register 13
  58              	 
  59 001a 5DF8047B 	 ldr r7,[sp],#4
  60              	.LCFI5:
  61              	 .cfi_restore 7
  62              	 .cfi_def_cfa_offset 0
  63 001e 7047     	 bx lr
  64              	 .cfi_endproc
  65              	.LFE201:
  67              	 .section .text.XMC_USIC_CH_DisableEvent,"ax",%progbits
  68              	 .align 2
  69              	 .thumb
  70              	 .thumb_func
  72              	XMC_USIC_CH_DisableEvent:
  73              	.LFB202:
1121:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
1122:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
1123:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1124:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				  \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device sup
1125:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Bit mask of the channel events to be disabled. Use @ref XMC_USIC_CH_EVENT_t for the
1126:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC_CH_EVENT_RECEIVE_START, @ref XMC_USIC_CH_EVENT_DATA_LOST etc. Multip
1127:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				can be combined using \a OR operation.
1128:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1129:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1130:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1131:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Disable the channel interrupt events. \n\n
1132:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Multiple events can be combined using the bitwise OR operation and configured in one function ca
1133:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EVENT_t enumerates multiple protocol event bitmasks. These enumerations can be used 
1134:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1135:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1136:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
1137:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** */
1138:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
1139:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
  74              	 .loc 1 1139 0
  75              	 .cfi_startproc
  76              	 
  77              	 
  78              	 
  79 0000 80B4     	 push {r7}
  80              	.LCFI6:
  81              	 .cfi_def_cfa_offset 4
  82              	 .cfi_offset 7,-4
  83 0002 83B0     	 sub sp,sp,#12
  84              	.LCFI7:
  85              	 .cfi_def_cfa_offset 16
  86 0004 00AF     	 add r7,sp,#0
  87              	.LCFI8:
  88              	 .cfi_def_cfa_register 7
  89 0006 7860     	 str r0,[r7,#4]
  90 0008 3960     	 str r1,[r7]
1140:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   channel->CCR &= (uint32_t)~event;
  91              	 .loc 1 1140 0
  92 000a 7B68     	 ldr r3,[r7,#4]
  93 000c 1A6C     	 ldr r2,[r3,#64]
  94 000e 3B68     	 ldr r3,[r7]
  95 0010 DB43     	 mvns r3,r3
  96 0012 1A40     	 ands r2,r2,r3
  97 0014 7B68     	 ldr r3,[r7,#4]
  98 0016 1A64     	 str r2,[r3,#64]
1141:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** }
  99              	 .loc 1 1141 0
 100 0018 0C37     	 adds r7,r7,#12
 101              	.LCFI9:
 102              	 .cfi_def_cfa_offset 4
 103 001a BD46     	 mov sp,r7
 104              	.LCFI10:
 105              	 .cfi_def_cfa_register 13
 106              	 
 107 001c 5DF8047B 	 ldr r7,[sp],#4
 108              	.LCFI11:
 109              	 .cfi_restore 7
 110              	 .cfi_def_cfa_offset 0
 111 0020 7047     	 bx lr
 112              	 .cfi_endproc
 113              	.LFE202:
 115 0022 00BF     	 .section .text.XMC_USIC_CH_GetTransmitBufferStatus,"ax",%progbits
 116              	 .align 2
 117              	 .thumb
 118              	 .thumb_func
 120              	XMC_USIC_CH_GetTransmitBufferStatus:
 121              	.LFB203:
1142:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
1143:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
1144:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1145:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				  \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device sup
1146:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  interrupt_node Interrupt node pointer to be configured. \n
1147:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  \b Range: @ref XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT,
1148:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  			@ref XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER etc.
1149:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param service_request Service request number.\n
1150:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  \b Range: 0 to 5.
1151:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1152:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1153:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1154:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the interrupt node for USIC channel events. \n\n
1155:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * For an event to generate interrupt, node pointer should be configured with service request(SR0, 
1156:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * The NVIC node gets linked to the interrupt event by doing so.<br>
1157:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: NVIC node should be separately enabled to generate the interrupt.
1158:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1159:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1160:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableEvent() \n\n\n
1161:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
1162:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
1163:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****                                          const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
1164:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****                                          const uint32_t service_request);
1165:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
1166:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
1167:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1168:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1169:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Stataus @ref XMC_USIC_CH_TBUF_STATUS_IDLE if transmit buffer is free,
1170:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *                 @ref XMC_USIC_CH_TBUF_STATUS_BUSY if transmit buffer is busy.
1171:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1172:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1173:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Gets transmit buffer status. \n\n
1174:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Status indicates whether the transmit buffer is free, or busy transmitting data.
1175:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * The status depends on the value of TDV flag in TCSR register.
1176:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * This status can be used while transmitting data. Transmit data when the transmit buffer
1177:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * status is @ref XMC_USIC_CH_TBUF_STATUS_IDLE.
1178:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1179:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1180:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetDataOutputMode() \n\n\n
1181:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
1182:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const 
1183:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
 122              	 .loc 1 1183 0
 123              	 .cfi_startproc
 124              	 
 125              	 
 126              	 
 127 0000 80B4     	 push {r7}
 128              	.LCFI12:
 129              	 .cfi_def_cfa_offset 4
 130              	 .cfi_offset 7,-4
 131 0002 83B0     	 sub sp,sp,#12
 132              	.LCFI13:
 133              	 .cfi_def_cfa_offset 16
 134 0004 00AF     	 add r7,sp,#0
 135              	.LCFI14:
 136              	 .cfi_def_cfa_register 7
 137 0006 7860     	 str r0,[r7,#4]
1184:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 138              	 .loc 1 1184 0
 139 0008 7B68     	 ldr r3,[r7,#4]
 140 000a 9B6B     	 ldr r3,[r3,#56]
 141 000c DBB2     	 uxtb r3,r3
 142 000e 23F07F03 	 bic r3,r3,#127
 143 0012 DBB2     	 uxtb r3,r3
1185:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** }
 144              	 .loc 1 1185 0
 145 0014 1846     	 mov r0,r3
 146 0016 0C37     	 adds r7,r7,#12
 147              	.LCFI15:
 148              	 .cfi_def_cfa_offset 4
 149 0018 BD46     	 mov sp,r7
 150              	.LCFI16:
 151              	 .cfi_def_cfa_register 13
 152              	 
 153 001a 5DF8047B 	 ldr r7,[sp],#4
 154              	.LCFI17:
 155              	 .cfi_restore 7
 156              	 .cfi_def_cfa_offset 0
 157 001e 7047     	 bx lr
 158              	 .cfi_endproc
 159              	.LFE203:
 161              	 .section .text.XMC_USIC_CH_TriggerServiceRequest,"ax",%progbits
 162              	 .align 2
 163              	 .thumb
 164              	 .thumb_func
 166              	XMC_USIC_CH_TriggerServiceRequest:
 167              	.LFB211:
1186:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
1187:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
1188:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @brief API to get receive buffer status
1189:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1190:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1191:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status of data validity check for RBUF0 and RBUF1. \n
1192:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 		   Returned value should be masked with RDV0 and RDV1 bits to know the status. \n
1193:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 		   \b Range: @ref XMC_USIC_CH_RBUF_STATUS_DATA_VALID0, @ref XMC_USIC_CH_RBUF_STATUS_DATA_VALID
1194:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1195:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1196:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Checks if RBUF0 and RBUF1 have valid unread data. \n\n
1197:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * It checks the bits RDV0 and RDV1 of the RBUFSR register.
1198:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Returns the value of RBUFSR masked with bitmasks of RDV0 and RDV1.
1199:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * It can be used to decide whether 2bytes has to be read from RBUF or 1 byte. 
1200:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * If both bitmasks XMC_USIC_CH_RBUF_STATUS_DATA_VALID0 and XMC_USIC_CH_RBUF_STATUS_DATA_VALID1
1201:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * are set, then 2 bytes can be read from RBUF. If only either of them is set, then only one byte
1202:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * can be read from RBUF.
1203:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1204:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
1205:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
1206:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_GetReceiveBufferStatus(XMC_USIC_CH_t *const channel)
1207:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
1208:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   return ((uint32_t) (channel->RBUFSR & (USIC_CH_RBUFSR_RDV0_Msk | USIC_CH_RBUFSR_RDV1_Msk)));
1209:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** }
1210:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
1211:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
1212:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
1213:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1214:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1215:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  start_transmision_mode Transmission mode to be enabled. \n
1216:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 								\b Range: @ref XMC_USIC_CH_START_TRANSMISION_DISABLED,
1217:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 								@ref XMC_USIC_CH_START_TRANSMISION_ON_TDV, @ref XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2
1218:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 								@ref XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_1
1219:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *                              
1220:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1221:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1222:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1223:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Configures data transmission. \n\n
1224:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * The configuration affects the data shifted on the DOUT0 pin.
1225:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1226:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1227:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus(), XMC_USIC_CH_SetDataOutputMode() \n\n\n
1228:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
1229:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetStartTransmisionMode(XMC_USIC_CH_t *const channel,
1230:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****                                                          const XMC_USIC_CH_START_TRANSMISION_MODE_t
1231:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
1232:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR = (uint32_t)(channel->TCSR & (~USIC_CH_TCSR_TDEN_Msk)) | (uint32_t)start_transmisio
1233:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** }
1234:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
1235:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
1236:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
1237:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1238:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1239:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  data_output_mode  Data output mode. \n
1240:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_DATA_OUTPUT_MODE_NORMAL, @ref XMC_USIC_CH_DATA_OUTPUT_MODE_INVERTE
1241:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1242:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1243:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1244:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Configures the mode for data output. \n\n
1245:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel can be configured to shift inverted data or direct data based on the input to the A
1246:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1247:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1248:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetStartTransmisionMode() \n\n\n
1249:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
1250:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetDataOutputMode(XMC_USIC_CH_t *const channel,
1251:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****                                                    const XMC_USIC_CH_DATA_OUTPUT_MODE_t data_output
1252:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
1253:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_DOCFG_Msk)) | (uint32_t)data_output_mod
1254:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** }
1255:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
1256:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
1257:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1258:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1259:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1260:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1261:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1262:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables automatic update of frame length. \n\n
1263:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * When the automatic update of frame length is enabled, frame length is configured based on the 
1264:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * index of the TBUF[]/IN[] register array. When the data is written to TBUF[x], frame length is co
1265:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * with the mask value of \a x at the last 5 bit positions. Same logic is applicable if data is wri
1266:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * IN[x] register.
1267:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1268:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1269:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableFrameLengthControl(), XMC_USIC_CH_TXFIFO_PutDataFLEMode() \n\n\n
1270:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
1271:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableFrameLengthControl(XMC_USIC_CH_t *const channel)
1272:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
1273:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR = (uint32_t)(channel->TCSR & (~(USIC_CH_TCSR_WLEMD_Msk |
1274:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****                                          USIC_CH_TCSR_SELMD_Msk |
1275:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****                                          USIC_CH_TCSR_WAMD_Msk |
1276:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****                                          USIC_CH_TCSR_HPCMD_Msk))) |
1277:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****                                          (uint32_t)USIC_CH_TCSR_FLEMD_Msk;
1278:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** }
1279:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
1280:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
1281:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1282:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1283:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1284:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1285:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1286:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables automatic update of frame length. \n\n
1287:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * When automatic update of frame length is disabled, frame length has to configured explicitly.
1288:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Frame length remains fixed until it is changed again.
1289:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1290:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1291:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableFrameLengthControl(), XMC_USIC_CH_SetFrameLength() \n\n\n
1292:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
1293:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableFrameLengthControl(XMC_USIC_CH_t *const channel)
1294:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
1295:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR &= (uint32_t)~USIC_CH_TCSR_FLEMD_Msk;
1296:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** }
1297:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
1298:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
1299:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1300:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1301:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1302:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1303:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1304:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Bit TCSR.TE is set if DX2T becomes active while TDV = 1. \n\n
1305:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the transfer trigger unit to set bit TCSR.TE if the trigger signal DX2T becomes active
1306:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * for event driven transfer starts.
1307:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1308:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1309:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableTBUFDataValidTrigger()\n\n\n
1310:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
1311:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableTBUFDataValidTrigger(XMC_USIC_CH_t *const channel)
1312:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
1313:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR |= (uint32_t)USIC_CH_TCSR_TDVTR_Msk;
1314:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** }
1315:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
1316:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
1317:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1318:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1319:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1320:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1321:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1322:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the trigger of TDV depending on DX2T signal. \n\n
1323:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Bit TCSR.TE is permanently set.
1324:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1325:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1326:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableTBUFDataValidTrigger() \n\n\n
1327:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
1328:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableTBUFDataValidTrigger(XMC_USIC_CH_t *const channel)
1329:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
1330:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR &= (uint32_t)~USIC_CH_TCSR_TDVTR_Msk;
1331:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** }
1332:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
1333:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
1334:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1335:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1336:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  service_request_line service request number of the event to be triggered. \n
1337:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: 0 to 5.
1338:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1339:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1340:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1341:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Trigger a USIC interrupt service request.\n\n
1342:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * When the USIC service request is triggered, the NVIC interrupt associated with it will be 
1343:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * generated if enabled. 
1344:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1345:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1346:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
1347:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
1348:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t
1349:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
 168              	 .loc 1 1349 0
 169              	 .cfi_startproc
 170              	 
 171              	 
 172              	 
 173 0000 80B4     	 push {r7}
 174              	.LCFI18:
 175              	 .cfi_def_cfa_offset 4
 176              	 .cfi_offset 7,-4
 177 0002 83B0     	 sub sp,sp,#12
 178              	.LCFI19:
 179              	 .cfi_def_cfa_offset 16
 180 0004 00AF     	 add r7,sp,#0
 181              	.LCFI20:
 182              	 .cfi_def_cfa_register 7
 183 0006 7860     	 str r0,[r7,#4]
 184 0008 3960     	 str r1,[r7]
1350:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   channel->FMR = (uint32_t)(USIC_CH_FMR_SIO0_Msk << service_request_line);
 185              	 .loc 1 1350 0
 186 000a 3B68     	 ldr r3,[r7]
 187 000c 4FF48032 	 mov r2,#65536
 188 0010 9A40     	 lsls r2,r2,r3
 189 0012 7B68     	 ldr r3,[r7,#4]
 190 0014 9A66     	 str r2,[r3,#104]
1351:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** }
 191              	 .loc 1 1351 0
 192 0016 0C37     	 adds r7,r7,#12
 193              	.LCFI21:
 194              	 .cfi_def_cfa_offset 4
 195 0018 BD46     	 mov sp,r7
 196              	.LCFI22:
 197              	 .cfi_def_cfa_register 13
 198              	 
 199 001a 5DF8047B 	 ldr r7,[sp],#4
 200              	.LCFI23:
 201              	 .cfi_restore 7
 202              	 .cfi_def_cfa_offset 0
 203 001e 7047     	 bx lr
 204              	 .cfi_endproc
 205              	.LFE211:
 207              	 .section .text.XMC_USIC_CH_SetTransmitBufferStatus,"ax",%progbits
 208              	 .align 2
 209              	 .thumb
 210              	 .thumb_func
 212              	XMC_USIC_CH_SetTransmitBufferStatus:
 213              	.LFB212:
1352:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
1353:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
1354:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1355:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1356:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  transmit_buffer_status clearing or setting the TDV flag. \n
1357:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1358:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1359:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1360:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1361:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Modify TCSR.TDV and TCSR.TE to control the start of a data word transmission by software.
1362:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1363:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1364:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
1365:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
1366:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetTransmitBufferStatus(XMC_USIC_CH_t *const channel,
1367:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 		                                                 const XMC_USIC_CH_TBUF_STATUS_SET_t transmit_buf
1368:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
 214              	 .loc 1 1368 0
 215              	 .cfi_startproc
 216              	 
 217              	 
 218              	 
 219 0000 80B4     	 push {r7}
 220              	.LCFI24:
 221              	 .cfi_def_cfa_offset 4
 222              	 .cfi_offset 7,-4
 223 0002 83B0     	 sub sp,sp,#12
 224              	.LCFI25:
 225              	 .cfi_def_cfa_offset 16
 226 0004 00AF     	 add r7,sp,#0
 227              	.LCFI26:
 228              	 .cfi_def_cfa_register 7
 229 0006 7860     	 str r0,[r7,#4]
 230 0008 0B46     	 mov r3,r1
 231 000a FB70     	 strb r3,[r7,#3]
1369:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   channel->FMR = (uint32_t)transmit_buffer_status;
 232              	 .loc 1 1369 0
 233 000c FA78     	 ldrb r2,[r7,#3]
 234 000e 7B68     	 ldr r3,[r7,#4]
 235 0010 9A66     	 str r2,[r3,#104]
1370:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** }
 236              	 .loc 1 1370 0
 237 0012 0C37     	 adds r7,r7,#12
 238              	.LCFI27:
 239              	 .cfi_def_cfa_offset 4
 240 0014 BD46     	 mov sp,r7
 241              	.LCFI28:
 242              	 .cfi_def_cfa_register 13
 243              	 
 244 0016 5DF8047B 	 ldr r7,[sp],#4
 245              	.LCFI29:
 246              	 .cfi_restore 7
 247              	 .cfi_def_cfa_offset 0
 248 001a 7047     	 bx lr
 249              	 .cfi_endproc
 250              	.LFE212:
 252              	 .section .text.XMC_USIC_CH_TXFIFO_EnableEvent,"ax",%progbits
 253              	 .align 2
 254              	 .thumb
 255              	 .thumb_func
 257              	XMC_USIC_CH_TXFIFO_EnableEvent:
 258              	.LFB214:
1371:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
1372:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
1373:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1374:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1375:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  passive_level Value of passive level for the channel. \n
1376:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_PASSIVE_DATA_LEVEL0, @ref XMC_USIC_CH_PASSIVE_DATA_LEVEL1
1377:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1378:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1379:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1380:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Set the passive data level of the output signal. \n\n
1381:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * When the USIC channel transmit stage is idle, the output signal level stays at the 
1382:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * configured passive level.
1383:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1384:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1385:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus(), XMC_USIC_CH_SetStartTransmisionMode() \n\n\n
1386:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
1387:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetPassiveDataLevel(XMC_USIC_CH_t *const channel,
1388:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****                                                      const XMC_USIC_CH_PASSIVE_DATA_LEVEL_t passive
1389:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
1390:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR &= (~USIC_CH_SCTR_PDL_Msk);
1391:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR |= (uint32_t)passive_level;
1392:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** }
1393:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
1394:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /* TX FIFO APIs */
1395:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
1396:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1397:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1398:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data_pointer Start position inside the FIFO buffer. \n
1399:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to 63.
1400:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param size Required size of the transmit FIFO. \n
1401:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1402:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold of transmit FIFO filling level to be considered for generating events. \n
1403:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1404:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1405:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1406:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1407:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Initializes the transmit FIFO. \n\n
1408:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Transmit FIFO is a subset of a common FIFO sized 64 words. This FIFO is shared between 2 channel
1409:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Each channel can share the FIFO for transmission and reception. \a data_pointer represents the s
1410:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * from where transmit data can be put, for the selected USIC channel. \a size represents the size 
1411:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 2. Since the FIFO is shared between 2 USIC channels, FIFO size should be carefully selected. A F
1412:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * event is generated when the FIFO filling level falls below the \a limit value.
1413:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1414:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1415:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EnableEvent(), XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
1416:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
1417:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
1418:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****                                   const uint32_t data_pointer,
1419:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****                                   const XMC_USIC_CH_FIFO_SIZE_t size,
1420:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****                                   const uint32_t limit);
1421:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
1422:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
1423:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1424:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1425:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param size Required size of the transmit FIFO. \n
1426:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1427:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold for transmit FIFO filling level to be considered for generating events. \
1428:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1429:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1430:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1431:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1432:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the size and trigger limit for the transmit FIFO. \n\n
1433:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * The API is not to be called for initializing the transmit FIFO. The API shall be used for the 
1434:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * runtime change of transmit FIFO trigger limit. FIFO start position will not be affected on execu
1435:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1436:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1437:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit() \n\n\n
1438:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
1439:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
1440:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****                                             const XMC_USIC_CH_FIFO_SIZE_t size,
1441:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****                                             const uint32_t limit);
1442:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
1443:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
1444:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
1445:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1446:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1447:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Events to be enabled. Multiple events can be bitwise OR combined. @ref XMC_USIC_CH_
1448:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1449:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1450:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1451:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the interrupt events related to transmit FIFO. \n\n
1452:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration @ref XMC_USIC_CH_TXFIFO_EVENT_CONF_t.
1453:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Multiple events can be enabled by providing multiple events in a single call. For providing 
1454:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation. Events are configured in the TBC
1455:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1456:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: API only enables the events. For interrupt generation, interrupt node must be configured a
1457:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * must be enabled.
1458:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1459:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1460:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
1461:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
1462:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t ev
1463:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
 259              	 .loc 1 1463 0
 260              	 .cfi_startproc
 261              	 
 262              	 
 263              	 
 264 0000 80B4     	 push {r7}
 265              	.LCFI30:
 266              	 .cfi_def_cfa_offset 4
 267              	 .cfi_offset 7,-4
 268 0002 83B0     	 sub sp,sp,#12
 269              	.LCFI31:
 270              	 .cfi_def_cfa_offset 16
 271 0004 00AF     	 add r7,sp,#0
 272              	.LCFI32:
 273              	 .cfi_def_cfa_register 7
 274 0006 7860     	 str r0,[r7,#4]
 275 0008 3960     	 str r1,[r7]
1464:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TBCTR |= event;
 276              	 .loc 1 1464 0
 277 000a 7B68     	 ldr r3,[r7,#4]
 278 000c D3F80821 	 ldr r2,[r3,#264]
 279 0010 3B68     	 ldr r3,[r7]
 280 0012 1A43     	 orrs r2,r2,r3
 281 0014 7B68     	 ldr r3,[r7,#4]
 282 0016 C3F80821 	 str r2,[r3,#264]
1465:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** }
 283              	 .loc 1 1465 0
 284 001a 0C37     	 adds r7,r7,#12
 285              	.LCFI33:
 286              	 .cfi_def_cfa_offset 4
 287 001c BD46     	 mov sp,r7
 288              	.LCFI34:
 289              	 .cfi_def_cfa_register 13
 290              	 
 291 001e 5DF8047B 	 ldr r7,[sp],#4
 292              	.LCFI35:
 293              	 .cfi_restore 7
 294              	 .cfi_def_cfa_offset 0
 295 0022 7047     	 bx lr
 296              	 .cfi_endproc
 297              	.LFE214:
 299              	 .section .text.XMC_USIC_CH_TXFIFO_DisableEvent,"ax",%progbits
 300              	 .align 2
 301              	 .thumb
 302              	 .thumb_func
 304              	XMC_USIC_CH_TXFIFO_DisableEvent:
 305              	.LFB215:
1466:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
1467:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
1468:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
1469:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1470:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1471:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Events to be disabled. @ref XMC_USIC_CH_TXFIFO_EVENT_CONF_t \n
1472:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1473:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1474:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1475:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the interrupt events related to transmit FIFO. \n\n
1476:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * By disabling the interrupt events, generation of interrupt is stopped. User can poll the event 
1477:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * flags from the status register using the API XMC_USIC_CH_TXFIFO_GetEvent(). 
1478:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration @ref XMC_USIC_CH_TXFIFO_EVENT_CONF_t. Fo
1479:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation.
1480:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1481:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1482:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
1483:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
1484:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t e
1485:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
 306              	 .loc 1 1485 0
 307              	 .cfi_startproc
 308              	 
 309              	 
 310              	 
 311 0000 80B4     	 push {r7}
 312              	.LCFI36:
 313              	 .cfi_def_cfa_offset 4
 314              	 .cfi_offset 7,-4
 315 0002 83B0     	 sub sp,sp,#12
 316              	.LCFI37:
 317              	 .cfi_def_cfa_offset 16
 318 0004 00AF     	 add r7,sp,#0
 319              	.LCFI38:
 320              	 .cfi_def_cfa_register 7
 321 0006 7860     	 str r0,[r7,#4]
 322 0008 3960     	 str r1,[r7]
1486:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TBCTR &= (uint32_t)~event;
 323              	 .loc 1 1486 0
 324 000a 7B68     	 ldr r3,[r7,#4]
 325 000c D3F80821 	 ldr r2,[r3,#264]
 326 0010 3B68     	 ldr r3,[r7]
 327 0012 DB43     	 mvns r3,r3
 328 0014 1A40     	 ands r2,r2,r3
 329 0016 7B68     	 ldr r3,[r7,#4]
 330 0018 C3F80821 	 str r2,[r3,#264]
1487:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** }
 331              	 .loc 1 1487 0
 332 001c 0C37     	 adds r7,r7,#12
 333              	.LCFI39:
 334              	 .cfi_def_cfa_offset 4
 335 001e BD46     	 mov sp,r7
 336              	.LCFI40:
 337              	 .cfi_def_cfa_register 13
 338              	 
 339 0020 5DF8047B 	 ldr r7,[sp],#4
 340              	.LCFI41:
 341              	 .cfi_restore 7
 342              	 .cfi_def_cfa_offset 0
 343 0024 7047     	 bx lr
 344              	 .cfi_endproc
 345              	.LFE215:
 347 0026 00BF     	 .section .text.XMC_USIC_CH_TXFIFO_Flush,"ax",%progbits
 348              	 .align 2
 349              	 .thumb
 350              	 .thumb_func
 352              	XMC_USIC_CH_TXFIFO_Flush:
 353              	.LFB219:
1488:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
1489:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
1490:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1491:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				      \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1492:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param interrupt_node Node pointer representing the transmit FIFO events. \n
1493:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  \b Range: @ref XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
1494:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  			@ref XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE
1495:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param service_request The service request to be used for interrupt generation. \n
1496:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  \b Range: 0 to 5.
1497:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1498:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1499:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1500:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets an interrupt node for the transmit FIFO events.\n\n
1501:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * A node pointer represents one or more interrupt events. Service request represents the interrupt
1502:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * among the 6 interrupt nodes available for USIC module.
1503:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * API configures the service request to be used for interrupt generation for the events selected.
1504:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * A transmit FIFO event can generate an interrupt only if the interrupt node is configured for the
1505:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * the interrupt generation is enabled for the event. For example, transmit FIFO standard transmit 
1506:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * interrupt is generated if the interrupt node for the same is set and interrupt is enabled.<br>
1507:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1508:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: NVIC node should be explicitly enabled for the interrupt generation.
1509:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1510:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1511:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
1512:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
1513:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
1514:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****                                                 const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t i
1515:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****                                                 const uint32_t service_request);
1516:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
1517:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
1518:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1519:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1520:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted. \n
1521:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: 16bit unsigned data. minimum= 0, maximum= 65535
1522:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1523:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1524:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1525:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Writes data into the transmit FIFO. \n\n
1526:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * The data provided is placed in the transmit FIFO.
1527:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * The transmit FIFO should be configured before calling this API.
1528:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1529:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1530:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
1531:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
1532:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutData(XMC_USIC_CH_t *const channel, const uint16_t data)
1533:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
1534:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   channel->IN[0] = data;
1535:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** }
1536:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
1537:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
1538:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1539:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1540:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted.
1541:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param frame_length Frame length to be configured while transmitting the data. \n
1542:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: minimum= 0, maximum= 31. e.g: For a frame length of 16, set \a frame_length as 15.
1543:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1544:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1545:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1546:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Writes data to the transmit FIFO in frame length control mode. \n\n
1547:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * When frame length control is enabled for dynamic update of frame length, this API can be used.
1548:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \a frame_length represents the frame length to be updated by the peripheral. 
1549:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \a frame_length is used as index for the IN[] register array.
1550:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1551:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1552:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1553:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
1554:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutDataFLEMode(XMC_USIC_CH_t *const channel,
1555:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****                                                        const uint16_t data,
1556:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****                                                        const uint32_t frame_length)
1557:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
1558:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   channel->IN[frame_length] = data;
1559:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** }
1560:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
1561:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
1562:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1563:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1564:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted.
1565:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param frame_length Frame length to be configured while transmitting the data. \n
1566:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: minimum= 0, maximum= 31. e.g: For a frame length of 16, set \a frame_length as 15.
1567:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1568:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1569:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1570:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Writes data to the transmit FIFO in hardware port control mode. \n\n
1571:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * When hardware port control is enabled for dynamic update of frame length, this API can be used.
1572:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \a frame_length represents the frame length to be updated by the peripheral. 
1573:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \a frame_length is used as index for the IN[] register array.
1574:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1575:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1576:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1577:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
1578:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutDataHPCMode(XMC_USIC_CH_t *const channel,
1579:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****                                                        const uint16_t data,
1580:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****                                                        const uint32_t frame_length)
1581:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
1582:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   channel->IN[frame_length] = data;
1583:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** }
1584:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
1585:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
1586:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1587:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1588:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1589:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1590:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1591:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Clears the contents of transmit FIFO. \n\n
1592:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Transmit FIFO contents will be cleared and the filling level will be reset to 0.
1593:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1594:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1595:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
1596:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
1597:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
1598:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
 354              	 .loc 1 1598 0
 355              	 .cfi_startproc
 356              	 
 357              	 
 358              	 
 359 0000 80B4     	 push {r7}
 360              	.LCFI42:
 361              	 .cfi_def_cfa_offset 4
 362              	 .cfi_offset 7,-4
 363 0002 83B0     	 sub sp,sp,#12
 364              	.LCFI43:
 365              	 .cfi_def_cfa_offset 16
 366 0004 00AF     	 add r7,sp,#0
 367              	.LCFI44:
 368              	 .cfi_def_cfa_register 7
 369 0006 7860     	 str r0,[r7,#4]
1599:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
 370              	 .loc 1 1599 0
 371 0008 7B68     	 ldr r3,[r7,#4]
 372 000a 4FF40042 	 mov r2,#32768
 373 000e C3F81821 	 str r2,[r3,#280]
1600:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** }
 374              	 .loc 1 1600 0
 375 0012 0C37     	 adds r7,r7,#12
 376              	.LCFI45:
 377              	 .cfi_def_cfa_offset 4
 378 0014 BD46     	 mov sp,r7
 379              	.LCFI46:
 380              	 .cfi_def_cfa_register 13
 381              	 
 382 0016 5DF8047B 	 ldr r7,[sp],#4
 383              	.LCFI47:
 384              	 .cfi_restore 7
 385              	 .cfi_def_cfa_offset 0
 386 001a 7047     	 bx lr
 387              	 .cfi_endproc
 388              	.LFE219:
 390              	 .section .text.XMC_USIC_CH_TXFIFO_IsFull,"ax",%progbits
 391              	 .align 2
 392              	 .thumb
 393              	 .thumb_func
 395              	XMC_USIC_CH_TXFIFO_IsFull:
 396              	.LFB220:
1601:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
1602:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
1603:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1604:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1605:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status \a true if transmit FIFO is full
1606:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *              \a false if transmit FIFO is not full.
1607:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1608:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1609:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Checks if transmit FIFO is full. \n\n
1610:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * When the transmit FIFO filling level reaches the configured size, FIFO full flag is set.
1611:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * User should not write to the FIFO when the transmit FIFO is full.
1612:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1613:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1614:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
1615:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
1616:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
1617:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
 397              	 .loc 1 1617 0
 398              	 .cfi_startproc
 399              	 
 400              	 
 401              	 
 402 0000 80B4     	 push {r7}
 403              	.LCFI48:
 404              	 .cfi_def_cfa_offset 4
 405              	 .cfi_offset 7,-4
 406 0002 83B0     	 sub sp,sp,#12
 407              	.LCFI49:
 408              	 .cfi_def_cfa_offset 16
 409 0004 00AF     	 add r7,sp,#0
 410              	.LCFI50:
 411              	 .cfi_def_cfa_register 7
 412 0006 7860     	 str r0,[r7,#4]
1618:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 413              	 .loc 1 1618 0
 414 0008 7B68     	 ldr r3,[r7,#4]
 415 000a D3F81431 	 ldr r3,[r3,#276]
 416 000e 03F48053 	 and r3,r3,#4096
 417 0012 002B     	 cmp r3,#0
 418 0014 14BF     	 ite ne
 419 0016 0123     	 movne r3,#1
 420 0018 0023     	 moveq r3,#0
 421 001a DBB2     	 uxtb r3,r3
1619:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** }
 422              	 .loc 1 1619 0
 423 001c 1846     	 mov r0,r3
 424 001e 0C37     	 adds r7,r7,#12
 425              	.LCFI51:
 426              	 .cfi_def_cfa_offset 4
 427 0020 BD46     	 mov sp,r7
 428              	.LCFI52:
 429              	 .cfi_def_cfa_register 13
 430              	 
 431 0022 5DF8047B 	 ldr r7,[sp],#4
 432              	.LCFI53:
 433              	 .cfi_restore 7
 434              	 .cfi_def_cfa_offset 0
 435 0026 7047     	 bx lr
 436              	 .cfi_endproc
 437              	.LFE220:
 439              	 .section .text.XMC_USIC_CH_TXFIFO_IsEmpty,"ax",%progbits
 440              	 .align 2
 441              	 .thumb
 442              	 .thumb_func
 444              	XMC_USIC_CH_TXFIFO_IsEmpty:
 445              	.LFB221:
1620:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
1621:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
1622:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1623:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1624:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status \a true if transmit FIFO is empty
1625:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *              \a false if transmit FIFO has some data.
1626:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1627:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1628:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Checks if transmit FIFO is empty. \n\n
1629:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * When the transmit FIFO is empty, data can be written to FIFO.
1630:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * When the last written word to the transmit FIFO is transmitted out of the FIFO, 
1631:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * FIFO empty flag is set.
1632:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1633:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1634:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
1635:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
1636:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
1637:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
 446              	 .loc 1 1637 0
 447              	 .cfi_startproc
 448              	 
 449              	 
 450              	 
 451 0000 80B4     	 push {r7}
 452              	.LCFI54:
 453              	 .cfi_def_cfa_offset 4
 454              	 .cfi_offset 7,-4
 455 0002 83B0     	 sub sp,sp,#12
 456              	.LCFI55:
 457              	 .cfi_def_cfa_offset 16
 458 0004 00AF     	 add r7,sp,#0
 459              	.LCFI56:
 460              	 .cfi_def_cfa_register 7
 461 0006 7860     	 str r0,[r7,#4]
1638:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
 462              	 .loc 1 1638 0
 463 0008 7B68     	 ldr r3,[r7,#4]
 464 000a D3F81431 	 ldr r3,[r3,#276]
 465 000e 03F40063 	 and r3,r3,#2048
 466 0012 002B     	 cmp r3,#0
 467 0014 14BF     	 ite ne
 468 0016 0123     	 movne r3,#1
 469 0018 0023     	 moveq r3,#0
 470 001a DBB2     	 uxtb r3,r3
1639:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** }
 471              	 .loc 1 1639 0
 472 001c 1846     	 mov r0,r3
 473 001e 0C37     	 adds r7,r7,#12
 474              	.LCFI57:
 475              	 .cfi_def_cfa_offset 4
 476 0020 BD46     	 mov sp,r7
 477              	.LCFI58:
 478              	 .cfi_def_cfa_register 13
 479              	 
 480 0022 5DF8047B 	 ldr r7,[sp],#4
 481              	.LCFI59:
 482              	 .cfi_restore 7
 483              	 .cfi_def_cfa_offset 0
 484 0026 7047     	 bx lr
 485              	 .cfi_endproc
 486              	.LFE221:
 488              	 .section .text.XMC_USIC_CH_RXFIFO_EnableEvent,"ax",%progbits
 489              	 .align 2
 490              	 .thumb
 491              	 .thumb_func
 493              	XMC_USIC_CH_RXFIFO_EnableEvent:
 494              	.LFB225:
1640:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
1641:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
1642:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1643:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1644:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Transmit FIFO filling level. \n 
1645:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: minimum= 0(FIFO empty), maximum= transmit FIFO size.
1646:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1647:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1648:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Gets the transmit FIFO filling level. \n\n
1649:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * For every word written to the FIFO, filling level is updated. The API gives the value
1650:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * of this filling level.
1651:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1652:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1653:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
1654:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
1655:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_TXFIFO_GetLevel(XMC_USIC_CH_t *const channel)
1656:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
1657:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   return ((uint32_t)(channel->TRBSR & USIC_CH_TRBSR_TBFLVL_Msk) >> USIC_CH_TRBSR_TBFLVL_Pos);
1658:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** }
1659:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
1660:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
1661:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1662:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1663:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status of standard transmit and transmit buffer error events. @ref XMC_USIC_CH_TXFIFO_EV
1664:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1665:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1666:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Gets the transmit FIFO event status. \n\n
1667:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Gives the status of transmit FIFO standard transmit buffer event and transmit buffer error event
1668:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * The status bits are located at their bit positions in the TRBSR register in the returned value.
1669:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * User can make use of the @ref XMC_USIC_CH_TXFIFO_EVENT_t enumeration for checking the status of 
1670:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * The status can be found by using the bitwise AND operation on the returned value with the enumer
1671:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1672:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: Event status flags should be cleared by the user explicitly.
1673:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1674:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1675:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_ClearEvent() \n\n\n
1676:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
1677:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_TXFIFO_GetEvent(XMC_USIC_CH_t *const channel)
1678:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
1679:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   return (uint32_t)((channel->TRBSR) & (USIC_CH_TRBSR_STBI_Msk |
1680:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****                               USIC_CH_TRBSR_TBERI_Msk));
1681:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** }
1682:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
1683:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
1684:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1685:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1686:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  event Transmit FIFO events to be cleared. \n
1687:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 			     \b Range: @ref XMC_USIC_CH_TXFIFO_EVENT_STANDARD, @ref XMC_USIC_CH_TXFIFO_EVENT_ERROR.
1688:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1689:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1690:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1691:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Clears the transmit FIFO event flags in the status register. \n\n
1692:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel peripheral does not clear the event flags after they are read.
1693:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * This API clears the events provided in the \a mask value. 
1694:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EVENT enumeration can be used as input. Multiple events
1695:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * can be cleared by providing a mask value obtained by bitwise OR operation of 
1696:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * multiple event enumerations.
1697:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1698:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1699:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_GetEvent() \n\n\n
1700:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
1701:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_ClearEvent(XMC_USIC_CH_t *const channel,
1702:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****                                                    const uint32_t event)
1703:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
1704:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TRBSCR = event;
1705:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** }
1706:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
1707:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
1708:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1709:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1710:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data_pointer Start position inside the FIFO buffer. \n
1711:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to 63.
1712:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param size Required size of the receive FIFO. \n
1713:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1714:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold of receive FIFO filling level to be considered for generating events. \n
1715:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1716:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1717:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1718:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1719:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Configures the receive FIFO. \n\n
1720:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Receive FIFO is the subset of a common FIFO sized 64 words. This FIFO is shared between 2 channe
1721:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Each channel can share the FIFO for transmission and reception. \a data_pointer represents the s
1722:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * from where received data can be put. \a size represents the size of receive FIFO as a multiple o
1723:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Since the FIFO is shared between 2 USIC channels, FIFO size should be carefully selected. A FIFO
1724:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * event or alternative receive buffer event is generated when the FIFO filling level exceeds the \
1725:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1726:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1727:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_EnableEvent(), XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
1728:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** */
1729:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
1730:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****                                   const uint32_t data_pointer,
1731:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****                                   const XMC_USIC_CH_FIFO_SIZE_t size,
1732:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****                                   const uint32_t limit);
1733:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
1734:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
1735:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1736:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1737:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param size Required size of the receive FIFO. \n
1738:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1739:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold for receive FIFO filling level to be considered for generating events. \n
1740:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1741:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1742:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1743:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1744:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the size and trigger limit for the receive FIFO. \n\n
1745:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * The API is not to be called for initializing the receive FIFO. The API shall be used for the 
1746:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * runtime change of receive FIFO trigger limit. FIFO start position will not be affected on execut
1747:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1748:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1749:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit()\ n\n\n
1750:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
1751:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
1752:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****                                             const XMC_USIC_CH_FIFO_SIZE_t size,
1753:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****                                             const uint32_t limit);
1754:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
1755:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
1756:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1757:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1758:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Events to be enabled. Multiple events can be bitwise OR combined. @ref XMC_USIC_CH_
1759:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1760:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1761:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1762:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the interrupt events related to transmit FIFO. \n\n
1763:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration @ref XMC_USIC_CH_RXFIFO_EVENT_CONF_t.
1764:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Multiple events can be enabled by providing multiple events in a single call. For providing 
1765:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation.<br>
1766:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1767:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: API only enables the events. For interrupt generation, interrupt node must be configured a
1768:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * must be enabled.
1769:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1770:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1771:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
1772:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
1773:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t ev
1774:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
 495              	 .loc 1 1774 0
 496              	 .cfi_startproc
 497              	 
 498              	 
 499              	 
 500 0000 80B4     	 push {r7}
 501              	.LCFI60:
 502              	 .cfi_def_cfa_offset 4
 503              	 .cfi_offset 7,-4
 504 0002 83B0     	 sub sp,sp,#12
 505              	.LCFI61:
 506              	 .cfi_def_cfa_offset 16
 507 0004 00AF     	 add r7,sp,#0
 508              	.LCFI62:
 509              	 .cfi_def_cfa_register 7
 510 0006 7860     	 str r0,[r7,#4]
 511 0008 3960     	 str r1,[r7]
1775:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   channel->RBCTR |= event;
 512              	 .loc 1 1775 0
 513 000a 7B68     	 ldr r3,[r7,#4]
 514 000c D3F80C21 	 ldr r2,[r3,#268]
 515 0010 3B68     	 ldr r3,[r7]
 516 0012 1A43     	 orrs r2,r2,r3
 517 0014 7B68     	 ldr r3,[r7,#4]
 518 0016 C3F80C21 	 str r2,[r3,#268]
1776:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** }
 519              	 .loc 1 1776 0
 520 001a 0C37     	 adds r7,r7,#12
 521              	.LCFI63:
 522              	 .cfi_def_cfa_offset 4
 523 001c BD46     	 mov sp,r7
 524              	.LCFI64:
 525              	 .cfi_def_cfa_register 13
 526              	 
 527 001e 5DF8047B 	 ldr r7,[sp],#4
 528              	.LCFI65:
 529              	 .cfi_restore 7
 530              	 .cfi_def_cfa_offset 0
 531 0022 7047     	 bx lr
 532              	 .cfi_endproc
 533              	.LFE225:
 535              	 .section .text.XMC_USIC_CH_RXFIFO_DisableEvent,"ax",%progbits
 536              	 .align 2
 537              	 .thumb
 538              	 .thumb_func
 540              	XMC_USIC_CH_RXFIFO_DisableEvent:
 541              	.LFB226:
1777:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
1778:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
1779:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
1780:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1781:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1782:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Events to be disabled. \n
1783:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD, @ref XMC_USIC_CH_RXFIFO_EVENT_CONF_ERR
1784:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 			@ref XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE.
1785:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1786:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1787:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1788:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the selected interrupt events related to receive FIFO. \n\n
1789:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * By disabling the interrupt events, generation of interrupt is stopped. User can poll the event 
1790:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * flags from the status register using the API XMC_USIC_CH_RXFIFO_GetEvent(). 
1791:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration \a XMC_USIC_CH_RXFIFO_EVENT_CONF. For pr
1792:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation.
1793:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1794:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1795:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
1796:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
1797:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t e
1798:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
 542              	 .loc 1 1798 0
 543              	 .cfi_startproc
 544              	 
 545              	 
 546              	 
 547 0000 80B4     	 push {r7}
 548              	.LCFI66:
 549              	 .cfi_def_cfa_offset 4
 550              	 .cfi_offset 7,-4
 551 0002 83B0     	 sub sp,sp,#12
 552              	.LCFI67:
 553              	 .cfi_def_cfa_offset 16
 554 0004 00AF     	 add r7,sp,#0
 555              	.LCFI68:
 556              	 .cfi_def_cfa_register 7
 557 0006 7860     	 str r0,[r7,#4]
 558 0008 3960     	 str r1,[r7]
1799:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   channel->RBCTR &= (uint32_t)~event;
 559              	 .loc 1 1799 0
 560 000a 7B68     	 ldr r3,[r7,#4]
 561 000c D3F80C21 	 ldr r2,[r3,#268]
 562 0010 3B68     	 ldr r3,[r7]
 563 0012 DB43     	 mvns r3,r3
 564 0014 1A40     	 ands r2,r2,r3
 565 0016 7B68     	 ldr r3,[r7,#4]
 566 0018 C3F80C21 	 str r2,[r3,#268]
1800:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** }
 567              	 .loc 1 1800 0
 568 001c 0C37     	 adds r7,r7,#12
 569              	.LCFI69:
 570              	 .cfi_def_cfa_offset 4
 571 001e BD46     	 mov sp,r7
 572              	.LCFI70:
 573              	 .cfi_def_cfa_register 13
 574              	 
 575 0020 5DF8047B 	 ldr r7,[sp],#4
 576              	.LCFI71:
 577              	 .cfi_restore 7
 578              	 .cfi_def_cfa_offset 0
 579 0024 7047     	 bx lr
 580              	 .cfi_endproc
 581              	.LFE226:
 583 0026 00BF     	 .section .text.XMC_USIC_CH_RXFIFO_Flush,"ax",%progbits
 584              	 .align 2
 585              	 .thumb
 586              	 .thumb_func
 588              	XMC_USIC_CH_RXFIFO_Flush:
 589              	.LFB228:
1801:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
1802:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
1803:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1804:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1805:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param interrupt_node Node pointer representing the receive FIFO events. \n
1806:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 					\b Range: @ref XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
1807:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 					@ref XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE
1808:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param service_request The service request to be used for interrupt generation.\n
1809:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 					\b Range: 0 to 5.
1810:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1811:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1812:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1813:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets an interrupt node for the receive FIFO events. \n\n
1814:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * A node pointer represents one or more interrupt events. Service request represents the interrupt
1815:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * among the 6 interrupt nodes available for USIC module.
1816:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * API configures the service request to be used for interrupt generation for the events selected.
1817:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * A receive FIFO event can generate an interrupt only if the interrupt node is configured for the 
1818:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * the interrupt generation is enabled for the event. For example, transmit FIFO standard transmit 
1819:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * interrupt is generated if the interrupt node for the same is set and interrupt is enabled.<br>
1820:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1821:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: NVIC node should be explicitly enabled for the interrupt generation.
1822:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1823:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1824:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
1825:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
1826:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
1827:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****                                                 const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t i
1828:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****                                                 const uint32_t service_request);
1829:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
1830:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
1831:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1832:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1833:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Value read from the receive FIFO. \n
1834:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: 16bit data. Length of data depends on the word length configuration.
1835:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1836:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1837:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Gets data from the receive FIFO. \n\n
1838:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Receive FIFO should be read only if data is availble in the FIFO. This can be checked using
1839:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * the API XMC_USIC_CH_RXFIFO_IsEmpty(). Receive FIFO error flag will be set if an attempt is made
1840:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * to read from an empty receive FIFO. To read all the received data, user should keep reading data
1841:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * until receive FIFO is empty.
1842:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1843:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1844:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_ClearEvent() \n\n\n
1845:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
1846:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint16_t XMC_USIC_CH_RXFIFO_GetData(XMC_USIC_CH_t *const channel)
1847:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
1848:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   return (uint16_t)(channel->OUTR);
1849:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** }
1850:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
1851:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
1852:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1853:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1854:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1855:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1856:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1857:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Clears the contents of receive FIFO. \n\n
1858:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Receive FIFO contents will be cleared and the filling level will be reset to 0.
1859:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1860:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1861:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
1862:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
1863:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
1864:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
 590              	 .loc 1 1864 0
 591              	 .cfi_startproc
 592              	 
 593              	 
 594              	 
 595 0000 80B4     	 push {r7}
 596              	.LCFI72:
 597              	 .cfi_def_cfa_offset 4
 598              	 .cfi_offset 7,-4
 599 0002 83B0     	 sub sp,sp,#12
 600              	.LCFI73:
 601              	 .cfi_def_cfa_offset 16
 602 0004 00AF     	 add r7,sp,#0
 603              	.LCFI74:
 604              	 .cfi_def_cfa_register 7
 605 0006 7860     	 str r0,[r7,#4]
1865:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
 606              	 .loc 1 1865 0
 607 0008 7B68     	 ldr r3,[r7,#4]
 608 000a 4FF48042 	 mov r2,#16384
 609 000e C3F81821 	 str r2,[r3,#280]
1866:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** }
 610              	 .loc 1 1866 0
 611 0012 0C37     	 adds r7,r7,#12
 612              	.LCFI75:
 613              	 .cfi_def_cfa_offset 4
 614 0014 BD46     	 mov sp,r7
 615              	.LCFI76:
 616              	 .cfi_def_cfa_register 13
 617              	 
 618 0016 5DF8047B 	 ldr r7,[sp],#4
 619              	.LCFI77:
 620              	 .cfi_restore 7
 621              	 .cfi_def_cfa_offset 0
 622 001a 7047     	 bx lr
 623              	 .cfi_endproc
 624              	.LFE228:
 626              	 .section .text.XMC_USIC_CH_RXFIFO_IsEmpty,"ax",%progbits
 627              	 .align 2
 628              	 .thumb
 629              	 .thumb_func
 631              	XMC_USIC_CH_RXFIFO_IsEmpty:
 632              	.LFB230:
1867:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
1868:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
1869:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1870:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1871:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status \a true if receive FIFO is full
1872:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *              \a false if receive FIFO is not full.
1873:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1874:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1875:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Checks if receive FIFO is full. \n\n
1876:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * When the receive FIFO filling level reaches the configured size, FIFO full flag is set.
1877:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Any data received when the receive FIFO is full, is lost.
1878:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1879:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1880:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_IsEmpty(), XMC_USIC_CH_RXFIFO_Flush() \n\n\n
1881:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
1882:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsFull(XMC_USIC_CH_t *const channel)
1883:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
1884:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_RFULL_Msk);
1885:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** }
1886:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** 
1887:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** /**
1888:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1889:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1890:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status \a true if receive FIFO is empty,
1891:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *              \a false if receive FIFO has some data.
1892:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  *
1893:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1894:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * Checks if receive FIFO is empty. \n\n
1895:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * When the receive FIFO is empty, received data will be put in receive FIFO.
1896:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * When the last received word in the FIFO is read, FIFO empty flag is set. Any attempt
1897:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * to read from an empty receive FIFO will set the receive FIFO error flag.
1898:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1899:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1900:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
1901:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****  */
1902:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
1903:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** {
 633              	 .loc 1 1903 0
 634              	 .cfi_startproc
 635              	 
 636              	 
 637              	 
 638 0000 80B4     	 push {r7}
 639              	.LCFI78:
 640              	 .cfi_def_cfa_offset 4
 641              	 .cfi_offset 7,-4
 642 0002 83B0     	 sub sp,sp,#12
 643              	.LCFI79:
 644              	 .cfi_def_cfa_offset 16
 645 0004 00AF     	 add r7,sp,#0
 646              	.LCFI80:
 647              	 .cfi_def_cfa_register 7
 648 0006 7860     	 str r0,[r7,#4]
1904:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 649              	 .loc 1 1904 0
 650 0008 7B68     	 ldr r3,[r7,#4]
 651 000a D3F81431 	 ldr r3,[r3,#276]
 652 000e 03F00803 	 and r3,r3,#8
 653 0012 002B     	 cmp r3,#0
 654 0014 14BF     	 ite ne
 655 0016 0123     	 movne r3,#1
 656 0018 0023     	 moveq r3,#0
 657 001a DBB2     	 uxtb r3,r3
1905:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_usic.h **** }
 658              	 .loc 1 1905 0
 659 001c 1846     	 mov r0,r3
 660 001e 0C37     	 adds r7,r7,#12
 661              	.LCFI81:
 662              	 .cfi_def_cfa_offset 4
 663 0020 BD46     	 mov sp,r7
 664              	.LCFI82:
 665              	 .cfi_def_cfa_register 13
 666              	 
 667 0022 5DF8047B 	 ldr r7,[sp],#4
 668              	.LCFI83:
 669              	 .cfi_restore 7
 670              	 .cfi_def_cfa_offset 0
 671 0026 7047     	 bx lr
 672              	 .cfi_endproc
 673              	.LFE230:
 675              	 .section .text.XMC_UART_CH_Start,"ax",%progbits
 676              	 .align 2
 677              	 .thumb
 678              	 .thumb_func
 680              	XMC_UART_CH_Start:
 681              	.LFB239:
 682              	 .file 2 "F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc/xmc_uart.h"
   1:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  /**
   2:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * @file xmc_uart.h
   3:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * @date 2017-10-25
   4:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *
   5:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * @cond
   6:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  **************************************************************************************************
   7:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * XMClib v2.1.18 - XMC Peripheral Driver Library 
   8:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *
   9:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * All rights reserved.                        
  11:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *                                             
  12:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * following conditions are met:   
  14:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *                                                                              
  15:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * disclaimer.                        
  17:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * 
  18:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * 
  21:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * products derived from this software without specific prior written permission.                  
  23:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *                                                                              
  24:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *                                                                              
  32:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  **************************************************************************************************
  35:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *
  36:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * Change History
  37:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * --------------
  38:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *
  39:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * 2015-02-20:
  40:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *     - Initial
  41:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *      
  42:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * 2015-05-20:
  43:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *     - Description updated <br>
  44:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *     - Added XMC_UART_CH_TriggerServiceRequest() and XMC_UART_CH_SelectInterruptNodePointer <br>
  45:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *
  46:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * 2015-06-20:
  47:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *     - Removed version macros and declaration of GetDriverVersion API <br>
  48:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *
  49:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * 2015-09-01:
  50:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *     - Modified XMC_UART_CH_SetInputSource() for avoiding complete DXCR register overwriting. <br
  51:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *     - Modified XMC_UART_CH_EVENT_t enum for supporting XMC_UART_CH_EnableEvent() and XMC_UART_CH
  52:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *       for supporting multiple events configuration <br>
  53:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * 
  54:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * 2016-05-20:
  55:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *     - Added XMC_UART_CH_EnableDataTransmission() and XMC_UART_CH_DisableDataTransmission()
  56:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *
  57:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * 2017-10-25:
  58:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *     - Added XMC_UART_CH_EnableMasterClock() and XMC_UART_CH_DisableMasterClock()
  59:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *
  60:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * @endcond 
  61:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *
  62:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  */
  63:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** 
  64:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** #ifndef XMC_UART_H
  65:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** #define XMC_UART_H
  66:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** 
  67:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** /**************************************************************************************************
  68:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * HEADER FILES
  69:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  **************************************************************************************************
  70:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** 
  71:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** #include "xmc_usic.h"
  72:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** 
  73:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** /**
  74:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * @addtogroup XMClib XMC Peripheral Library
  75:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * @{
  76:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  */
  77:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** 
  78:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** /**
  79:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * @addtogroup UART
  80:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * @brief Universal Asynchronous Receiver/Transmitter (UART) driver for XMC microcontroller family.
  81:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *
  82:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * The UART driver uses Universal Serial Interface Channel(USIC) module to implement UART protocol.
  83:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * It provides APIs to configure USIC channel for UART communication. The driver enables the user
  84:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * in getting the status of UART protocol events, configuring interrupt service requests, protocol
  85:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * related parameter configuration etc.
  86:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * 
  87:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * UART driver features:
  88:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * -# Configuration structure XMC_UART_CH_CONFIG_t and initialization function XMC_UART_CH_Init()
  89:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * -# Enumeration of events with their bit masks @ref XMC_UART_CH_EVENT_t, @ref XMC_UART_CH_STATUS_
  90:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * -# Allows the selection of input source for the DX0 input stage using the API XMC_UART_CH_SetInp
  91:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * -# Allows configuration of baudrate using XMC_UART_CH_SetBaudrate() and configuration of data le
  92:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  XMC_UART_CH_SetWordLength() and XMC_UART_CH_SetFrameLength()
  93:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * -# Provides the status of UART protocol events, XMC_UART_CH_GetStatusFlag()
  94:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * -# Allows transmission of data using XMC_UART_CH_Transmit() and gets received data using XMC_UAR
  95:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * 
  96:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * @{
  97:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  */
  98:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** 
  99:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** /**************************************************************************************************
 100:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * MACROS
 101:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  **************************************************************************************************
 102:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** 
 103:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** #if defined(USIC0)
 104:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** #define XMC_UART0_CH0 XMC_USIC0_CH0 /**< USIC0 channel 0 base address */
 105:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** #define XMC_UART0_CH1 XMC_USIC0_CH1 /**< USIC0 channel 1 base address */
 106:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** #endif
 107:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** 
 108:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** #if defined(USIC1)
 109:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** #define XMC_UART1_CH0 XMC_USIC1_CH0 /**< USIC1 channel 0 base address */
 110:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** #define XMC_UART1_CH1 XMC_USIC1_CH1 /**< USIC1 channel 1 base address */
 111:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** #endif
 112:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** 
 113:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** #if defined(USIC2)
 114:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** #define XMC_UART2_CH0 XMC_USIC2_CH0 /**< USIC2 channel 0 base address */
 115:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** #define XMC_UART2_CH1 XMC_USIC2_CH1 /**< USIC2 channel 1 base address */
 116:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** #endif
 117:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** 
 118:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** /**************************************************************************************************
 119:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * ENUMS
 120:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  **************************************************************************************************
 121:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** 
 122:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** /**
 123:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * UART driver status
 124:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  */
 125:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** typedef enum XMC_UART_CH_STATUS
 126:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** {
 127:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_STATUS_OK,     /**< UART driver status : OK*/
 128:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_STATUS_ERROR,  /**< UART driver status : ERROR */
 129:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_STATUS_BUSY    /**< UART driver status : BUSY */
 130:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** } XMC_UART_CH_STATUS_t;
 131:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** 
 132:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** /**
 133:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** * UART portocol status. The enum values can be used for getting the status of UART channel.
 134:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** *
 135:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** */
 136:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** typedef enum XMC_UART_CH_STATUS_FLAG
 137:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** {
 138:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_TRANSMISSION_IDLE = USIC_CH_PSR_ASCMode_TXIDLE_Msk,                 /**< 
 139:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_RECEPTION_IDLE = USIC_CH_PSR_ASCMode_RXIDLE_Msk,                    /**< 
 140:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_SYNCHRONIZATION_BREAK_DETECTED = USIC_CH_PSR_ASCMode_SBD_Msk,       /**< 
 141:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_COLLISION_DETECTED = USIC_CH_PSR_ASCMode_COL_Msk,                   /**< 
 142:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_RECEIVER_NOISE_DETECTED = USIC_CH_PSR_ASCMode_RNS_Msk,              /**< 
 143:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_FORMAT_ERROR_IN_STOP_BIT_0 = USIC_CH_PSR_ASCMode_FER0_Msk,          /**< 
 144:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_FORMAT_ERROR_IN_STOP_BIT_1 = USIC_CH_PSR_ASCMode_FER1_Msk,          /**< 
 145:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_RECEIVE_FRAME_FINISHED = USIC_CH_PSR_ASCMode_RFF_Msk,               /**< 
 146:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_TRANSMITTER_FRAME_FINISHED = USIC_CH_PSR_ASCMode_TFF_Msk,           /**< 
 147:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_TRANSFER_STATUS_BUSY = USIC_CH_PSR_ASCMode_BUSY_Msk,                /**< 
 148:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_RECEIVER_START_INDICATION = USIC_CH_PSR_ASCMode_RSIF_Msk,           /**< 
 149:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_DATA_LOST_INDICATION = USIC_CH_PSR_ASCMode_DLIF_Msk,                /**< 
 150:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_TRANSMIT_SHIFT_INDICATION = USIC_CH_PSR_ASCMode_TSIF_Msk,           /**< 
 151:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION = USIC_CH_PSR_ASCMode_TBIF_Msk,          /**< 
 152:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_RECEIVE_INDICATION = USIC_CH_PSR_ASCMode_RIF_Msk,                   /**< 
 153:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION = USIC_CH_PSR_ASCMode_AIF_Msk,       /**< 
 154:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_BAUD_RATE_GENERATOR_INDICATION = USIC_CH_PSR_ASCMode_BRGIF_Msk      /**< 
 155:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** } XMC_UART_CH_STATUS_FLAG_t;
 156:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** 
 157:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** /**
 158:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** * UART configuration events. The enums can be used for configuring events using the CCR register.
 159:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** */
 160:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** typedef enum XMC_CH_UART_EVENT
 161:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** {
 162:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_EVENT_RECEIVE_START       = USIC_CH_CCR_RSIEN_Msk,  /**< Receive start event */
 163:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_EVENT_DATA_LOST           = USIC_CH_CCR_DLIEN_Msk,  /**< Data lost event */
 164:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_EVENT_TRANSMIT_SHIFT      = USIC_CH_CCR_TSIEN_Msk,  /**< Transmit shift event */
 165:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_EVENT_TRANSMIT_BUFFER     = USIC_CH_CCR_TBIEN_Msk,  /**< Transmit buffer event */
 166:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_EVENT_STANDARD_RECEIVE    = USIC_CH_CCR_RIEN_Msk,   /**< Receive event */
 167:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_EVENT_ALTERNATIVE_RECEIVE = USIC_CH_CCR_AIEN_Msk,   /**< Alternate receive event */
 168:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_EVENT_BAUD_RATE_GENERATOR = USIC_CH_CCR_BRGIEN_Msk, /**< Baudrate generator event */
 169:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****   
 170:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_EVENT_SYNCHRONIZATION_BREAK = USIC_CH_PCR_ASCMode_SBIEN_Msk, /**< Event synchronizati
 171:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_EVENT_COLLISION = USIC_CH_PCR_ASCMode_CDEN_Msk,              /**< Event collision */
 172:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_EVENT_RECEIVER_NOISE = USIC_CH_PCR_ASCMode_RNIEN_Msk,        /**< Event receiver nois
 173:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_EVENT_FORMAT_ERROR = USIC_CH_PCR_ASCMode_FEIEN_Msk,          /**< Event format error 
 174:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_EVENT_FRAME_FINISHED = USIC_CH_PCR_ASCMode_FFIEN_Msk         /**< Event frame finishe
 175:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** } XMC_UART_CH_EVENT_t;
 176:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** 
 177:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** /**
 178:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * UART Input sampling frequency options
 179:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  */
 180:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** typedef enum XMC_UART_CH_INPUT_SAMPLING_FREQ
 181:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** {
 182:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_INPUT_SAMPLING_FREQ_FPERIPH            = XMC_USIC_CH_INPUT_SAMPLING_FREQ_FPERIPH,    
 183:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_INPUT_SAMPLING_FREQ_FRACTIONAL_DIVIDER = XMC_USIC_CH_INPUT_SAMPLING_FREQ_FRACTIONAL_D
 184:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** } XMC_UART_CH_INPUT_SAMPLING_FREQ_t;
 185:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** 
 186:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** /**
 187:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * UART input stages
 188:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  */
 189:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** typedef enum XMC_UART_CH_INPUT
 190:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** {
 191:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_INPUT_RXD = 0UL   /**< UART input stage DX0*/
 192:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** #if UC_FAMILY == XMC1
 193:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****   ,
 194:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_INPUT_RXD1 = 3UL, /**< UART input stage DX3*/
 195:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_INPUT_RXD2 = 5UL  /**< UART input stage DX5*/
 196:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** #endif
 197:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** } XMC_UART_CH_INPUT_t;
 198:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** 
 199:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** 
 200:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** /**
 201:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * UART channel interrupt node pointers
 202:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  */
 203:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** typedef enum XMC_UART_CH_INTERRUPT_NODE_POINTER
 204:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** {
 205:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT      = XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANS
 206:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER     = XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANS
 207:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_INTERRUPT_NODE_POINTER_RECEIVE             = XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEI
 208:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE   = XMC_USIC_CH_INTERRUPT_NODE_POINTER_ALTER
 209:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_INTERRUPT_NODE_POINTER_PROTOCOL            = XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTO
 210:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** } XMC_UART_CH_INTERRUPT_NODE_POINTER_t;
 211:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** 
 212:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** /**************************************************************************************************
 213:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * DATA STRUCTURES
 214:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  **************************************************************************************************
 215:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** 
 216:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** /**
 217:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * UART initialization structure
 218:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** */
 219:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** typedef struct XMC_UART_CH_CONFIG
 220:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** {
 221:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****   uint32_t baudrate;                         /**< Desired baudrate. \b Range: minimum= 100, maximum
 222:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****   uint8_t data_bits;                         /**< Number of bits for the data field. Value configur
 223:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****                                                   \b Range: minimum= 1, maximum= 16*/
 224:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****   uint8_t frame_length;                      /**< Indicates nmber of bits in a frame. Configured as
 225:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****                                                   \b Range: minimum= 1, maximum= 63*/
 226:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****   uint8_t stop_bits;                         /**< Number of stop bits. \b Range: minimum= 1, maximu
 227:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****   uint8_t oversampling;						           /**< Number of samples for a symbol(DCTQ).\b Range: minimum
 228:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_USIC_CH_PARITY_MODE_t parity_mode;     /**< Parity mode. \b Range: @ref XMC_USIC_CH_PARITY_MO
 229:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****                                                   @ref XMC_USIC_CH_PARITY_MODE_ODD*/
 230:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** } XMC_UART_CH_CONFIG_t;
 231:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** 
 232:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** /**************************************************************************************************
 233:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * API PROTOTYPES
 234:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  **************************************************************************************************
 235:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** 
 236:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** #ifdef __cplusplus
 237:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** extern "C" {
 238:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** #endif
 239:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** 
 240:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** /**
 241:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * @param channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 242:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, XMC_UART0_CH1,XMC_UART1_CH0, XMC_UART1_CH1,XMC_UART2_CH0, XM
 243:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * @param config Constant pointer to UART configuration structure of type @ref XMC_UART_CH_CONFIG_t
 244:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * @return XMC_UART_CH_STATUS_t Status of initializing the USIC channel for UART protocol.\n
 245:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *          \b Range: @ref XMC_UART_CH_STATUS_OK if initialization is successful.\n
 246:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *                    @ref XMC_UART_CH_STATUS_ERROR if configuration of baudrate failed.
 247:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *
 248:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Description</b><br>
 249:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * Initializes the USIC channel for UART protocol.\n\n
 250:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * During the initialization, USIC channel is enabled, baudrate is configured with the defined over
 251:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * in the intialization structure. If the oversampling value is set to 0 in the structure, the defa
 252:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * is considered. Sampling point for each symbol is configured at the half of sampling period. Symb
 253:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * majority decision among 3 samples. 
 254:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * Word length is configured with the number of data bits. If the value of \a frame_length is 0, th
 255:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * is set to the same value as word length. If \a frame_length is greater than 0, it is set as the 
 256:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * Parity mode is set to the value configured for \a parity_mode.
 257:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * The USIC channel should be set to UART mode by calling the XMC_UART_CH_Start() API after the ini
 258:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *
 259:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 260:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * XMC_UART_CH_Start(), XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 261:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  */
 262:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** void XMC_UART_CH_Init(XMC_USIC_CH_t *const channel, const XMC_UART_CH_CONFIG_t *const config);
 263:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** 
 264:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** /**
 265:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * @param channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 266:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@re
 267:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * @return None
 268:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *
 269:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Description</b><br>
 270:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * Sets the USIC channel operation mode to UART mode.\n\n
 271:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * CCR register bitfield \a Mode is set to 2(UART mode). This API should be called after configurin
 272:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * the USIC channel. Transmission and reception can happen only when the UART mode is set. 
 273:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * This is an inline function.
 274:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *
 275:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 276:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 277:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  */
 278:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** __STATIC_INLINE void XMC_UART_CH_Start(XMC_USIC_CH_t *const channel)
 279:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** {
 683              	 .loc 2 279 0
 684              	 .cfi_startproc
 685              	 
 686              	 
 687              	 
 688 0000 80B4     	 push {r7}
 689              	.LCFI84:
 690              	 .cfi_def_cfa_offset 4
 691              	 .cfi_offset 7,-4
 692 0002 83B0     	 sub sp,sp,#12
 693              	.LCFI85:
 694              	 .cfi_def_cfa_offset 16
 695 0004 00AF     	 add r7,sp,#0
 696              	.LCFI86:
 697              	 .cfi_def_cfa_register 7
 698 0006 7860     	 str r0,[r7,#4]
 280:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****   channel->CCR = (uint32_t)(((channel->CCR) & (~USIC_CH_CCR_MODE_Msk)) | (uint32_t)XMC_USIC_CH_OPER
 699              	 .loc 2 280 0
 700 0008 7B68     	 ldr r3,[r7,#4]
 701 000a 1B6C     	 ldr r3,[r3,#64]
 702 000c 23F00F03 	 bic r3,r3,#15
 703 0010 43F00202 	 orr r2,r3,#2
 704 0014 7B68     	 ldr r3,[r7,#4]
 705 0016 1A64     	 str r2,[r3,#64]
 281:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** }
 706              	 .loc 2 281 0
 707 0018 0C37     	 adds r7,r7,#12
 708              	.LCFI87:
 709              	 .cfi_def_cfa_offset 4
 710 001a BD46     	 mov sp,r7
 711              	.LCFI88:
 712              	 .cfi_def_cfa_register 13
 713              	 
 714 001c 5DF8047B 	 ldr r7,[sp],#4
 715              	.LCFI89:
 716              	 .cfi_restore 7
 717              	 .cfi_def_cfa_offset 0
 718 0020 7047     	 bx lr
 719              	 .cfi_endproc
 720              	.LFE239:
 722 0022 00BF     	 .section .text.XMC_UART_CH_SetSamplePoint,"ax",%progbits
 723              	 .align 2
 724              	 .thumb
 725              	 .thumb_func
 727              	XMC_UART_CH_SetSamplePoint:
 728              	.LFB251:
 282:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** 
 283:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** /**
 284:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * @param channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 285:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@re
 286:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * @return XMC_UART_CH_STATUS_t Status to indicate if the communication channel is stopped successf
 287:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *                              @ref XMC_UART_CH_STATUS_OK if the communication channel is stopped.
 288:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *                              @ref XMC_UART_CH_STATUS_BUSY if the communication channel is busy.
 289:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *
 290:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Description</b><br>
 291:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * Stops the UART communication.\n\n
 292:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * CCR register bitfield \a Mode is reset. This disables the communication.
 293:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * Before starting the communication again, the channel has to be reconfigured.
 294:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *
 295:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 296:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * XMC_UART_CH_Init() \n\n\n
 297:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  */
 298:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** XMC_UART_CH_STATUS_t XMC_UART_CH_Stop(XMC_USIC_CH_t *const channel);
 299:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** 
 300:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** /**
 301:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * @param channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 302:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * 				   \b Range: @ref XMC_UART0_CH0, XMC_UART0_CH1 ,XMC_UART1_CH0, XMC_UART1_CH1, XMC_UART2_CH0,
 303:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * @param rate Desired baudrate. \n
 304:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *           \b Range: minimum value = 100, maximum value depends on the peripheral clock frequency
 305:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * 				   and \a oversampling. Maximum baudrate can be derived using the formula: (fperiph * 1023)/
 306:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * @param  oversampling Required oversampling. The value indicates the number of time quanta for on
 307:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * 					 This can be related to the number of samples for each logic state of the data signal.\n
 308:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * 					 \b Range: 4 to 32. Value should be chosen based on the protocol used.
 309:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * @return XMC_UART_CH_STATUS_t Status indicating the baudrate configuration.\n
 310:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * 			     \b Range: @ref XMC_USIC_CH_STATUS_OK if baudrate is successfully configured,
 311:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * 					 @ref XMC_USIC_CH_STATUS_ERROR if desired baudrate or oversampling is invalid.
 312:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *
 313:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Description:</b><br>
 314:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * Sets the bus speed in bits per second.\n\n
 315:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * Derives the values of \a STEP and PDIV to arrive at the optimum realistic speed possible.
 316:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * \a oversampling is the number of samples to be taken for each symbol of UART protocol.
 317:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * Default \a oversampling of 16 is considered if the input \a oversampling is less than 4. It is r
 318:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * a minimum oversampling of 4 for UART.
 319:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *
 320:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 321:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * XMC_UART_CH_Init(), XMC_UART_CH_Stop()
 322:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  */
 323:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** XMC_UART_CH_STATUS_t XMC_UART_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t 
 324:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** 
 325:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** /**
 326:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * @param channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 327:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@re
 328:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * @param  data Data to be transmitted. \n 
 329:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *          \b Range: 16 bit unsigned data within the range 0 to 65535. Actual size of
 330:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *          data transmitted depends on the configured number of bits for the UART protocol in the 
 331:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * @return None
 332:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *
 333:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Description</b><br>
 334:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * Transmits data over serial communication channel using UART protocol.\n\n
 335:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * Based on the channel configuration, data is either put to the transmit FIFO or to TBUF register.
 336:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * Before putting data to TBUF, the API waits for TBUF to finish shifting its contents to shift reg
 337:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * So user can continuously execute the API without checking for TBUF busy status. Based on the num
 338:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * data bits configured, the lower significant bits will be extracted for transmission.
 339:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *
 340:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * Note: When FIFO is not configured, the API waits for the TBUF to be available. 
 341:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * This makes the execution a blocking call.
 342:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *
 343:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 344:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * XMC_UART_CH_GetReceivedData() \n\n\n
 345:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  */
 346:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** void XMC_UART_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data);
 347:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** 
 348:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** /**
 349:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * @param channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 350:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@re
 351:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * @return uint16_t Received data over UART communication channel.
 352:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Description</b><br>
 353:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * Provides one word of data received over UART communication channel.\n\n
 354:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * Based on the channel configuration, data is either read from the receive FIFO or RBUF register.
 355:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * Before returning the value, there is no check for data validity. User should check the appropria
 356:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * data receive flags(standard receive/alternative receive/FIFO standard receive/FIFO alternative r
 357:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * before executing the API. Reading from an empty receive FIFO can generate a receive error event.
 358:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *
 359:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 360:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * XMC_UART_CH_GetStatusFlag(), XMC_UART_CH_Transmit() \n\n\n
 361:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  */
 362:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** uint16_t XMC_UART_CH_GetReceivedData(XMC_USIC_CH_t *const channel);
 363:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** 
 364:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** /**
 365:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * @param  channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 366:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@re
 367:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * @param  word_length Data word length. \n
 368:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *          \b Range: minimum= 1, maximum= 16.
 369:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * @return None
 370:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *
 371:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Description</b><br>
 372:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * Sets the data word length in number of bits.\n\n
 373:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * Word length can range from 1 to 16. It indicates the number of data bits in a data word.
 374:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * The value of \a word_length will be decremented by 1 before setting the value to \a SCTR registe
 375:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * If the UART data bits is more than 16, then the frame length should be set to the actual number 
 376:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * word length should be configured with the number of bits expected in each transaction. For examp
 377:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * for UART communication is 20 bits, then the frame length should be set as 20. Word length can be
 378:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * transmit and receive handling. If data is stored as 8bit array, then the word length can be set 
 379:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * a full message of UART data should be transmitted/ received as 3 data words.
 380:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *
 381:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 382:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * XMC_UART_CH_SetFrameLength() \n\n\n
 383:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  */
 384:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** __STATIC_INLINE void XMC_UART_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_len
 385:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** {
 386:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_USIC_CH_SetWordLength(channel, word_length);
 387:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** }
 388:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** 
 389:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** /**
 390:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * @param  channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 391:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@re
 392:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * @param  frame_length Number of data bits in each UART frame. \n
 393:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *          \b Range: minimum= 1, maximum= 64.
 394:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * @return None
 395:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *
 396:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Description</b><br>
 397:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * Sets the number of data bits for UART communication.\n\n
 398:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * The frame length is configured by setting the input value to \a SCTR register.
 399:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * The value of \a frame_length will be decremented by 1, before setting it to the register.
 400:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * Frame length should not be set to 64 for UART communication.
 401:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *
 402:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 403:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * XMC_UART_CH_SetWordLength() \n\n\n
 404:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  */
 405:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** __STATIC_INLINE void XMC_UART_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_l
 406:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** {
 407:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_USIC_CH_SetFrameLength(channel, frame_length);
 408:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** }
 409:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** 
 410:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** /**
 411:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * @param channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 412:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@re
 413:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * @param  event Event bitmasks to enable. Use the type @ref XMC_UART_CH_EVENT_t for naming events.
 414:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * 				  \b Range: @ref XMC_UART_CH_EVENT_RECEIVE_START, @ref XMC_UART_CH_EVENT_DATA_LOST,
 415:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * 				  @ref XMC_UART_CH_EVENT_TRANSMIT_SHIFT, @ref XMC_UART_CH_EVENT_TRANSMIT_BUFFER,
 416:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * 				  etc.
 417:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * @return None
 418:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *
 419:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Description</b><br>
 420:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * Enables interrupt events for UART communication.\n\n
 421:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * Multiple events can be combined using the bitwise OR operation and configured in one function ca
 422:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * @ref XMC_UART_CH_EVENT_t enumerates multiple event bitmasks. These enumerations can be used as i
 423:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * Events are configured by setting bits in the CCR register.
 424:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 425:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * XMC_UART_CH_DisableEvent(), XMC_UART_CH_SetInterruptNodePointer(), XMC_UART_CH_GetStatusFlag() \
 426:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  */
 427:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** void XMC_UART_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event);
 428:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** 
 429:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** /**
 430:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * @param channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 431:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@re
 432:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * @param  event Bitmask of events to disable. Use the type @ref XMC_UART_CH_EVENT_t for naming eve
 433:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * 				  \b Range: @ref XMC_UART_CH_EVENT_RECEIVE_START, @ref XMC_UART_CH_EVENT_DATA_LOST,
 434:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * 				  @ref XMC_UART_CH_EVENT_TRANSMIT_SHIFT, @ref XMC_UART_CH_EVENT_TRANSMIT_BUFFER,
 435:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * 				  etc.
 436:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * @return None
 437:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *
 438:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Description</b><br>
 439:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * Disables the interrupt events by clearing the bits in CCR register.\n\n
 440:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * Multiple events can be combined using the bitwise OR operation and configured in one function ca
 441:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * XMC_UART_CH_EVENT_FLAG_t enumerates multiple event bitmasks. These enumerations can be used as i
 442:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *
 443:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 444:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * XMC_UART_CH_ClearStatusFlag(), XMC_UART_CH_EnableEvent() \n\n\n
 445:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  */
 446:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** void XMC_UART_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event);
 447:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** 
 448:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** /**
 449:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * @param channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 450:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@re
 451:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * @param service_request Service request number for generating protocol interrupts.\n
 452:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * 				  \b Range: 0 to 5.
 453:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * @return None
 454:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *
 455:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Description</b><br>
 456:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * Sets the interrupt node for UART channel protocol events.\n\n
 457:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * For all the protocol events enlisted in the enumeration XMC_UART_CH_EVENT_t, one common
 458:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * interrupt gets generated. The service request connects the interrupt node to the UART 
 459:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * protocol events.
 460:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * Note: NVIC node should be separately enabled to generate the interrupt.
 461:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *
 462:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 463:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * XMC_UART_CH_EnableEvent() \n\n\n
 464:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  */
 465:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** __STATIC_INLINE void XMC_UART_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
 466:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****                                                          const uint8_t service_request)
 467:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** {
 468:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_USIC_CH_SetInterruptNodePointer(channel, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL, 
 469:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****                                               (uint32_t)service_request);
 470:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** }
 471:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** 
 472:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** /**
 473:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 474:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@re
 475:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * @param  interrupt_node Interrupt node pointer to be configured. \n
 476:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * 						  \b Range: @ref XMC_UART_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT,
 477:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * 						  			@ref XMC_UART_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER etc.
 478:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * @param service_request Service request number.\n
 479:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * 						  \b Range: 0 to 5.
 480:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * @return None
 481:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *
 482:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Description</b><br>
 483:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * Sets the interrupt node for USIC channel events. \n\n
 484:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * For an event to generate interrupt, node pointer should be configured with service request(SR0, 
 485:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * The NVIC node gets linked to the interrupt event by doing so.<br>
 486:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * Note: NVIC node should be separately enabled to generate the interrupt.
 487:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *
 488:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 489:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * XMC_UART_CH_EnableEvent() \n\n\n
 490:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  */
 491:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** __STATIC_INLINE void XMC_UART_CH_SelectInterruptNodePointer(XMC_USIC_CH_t *const channel,
 492:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****                                                             const XMC_UART_CH_INTERRUPT_NODE_POINTE
 493:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****                                                             const uint32_t service_request)
 494:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** {
 495:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_USIC_CH_SetInterruptNodePointer(channel, (XMC_USIC_CH_INTERRUPT_NODE_POINTER_t)interrupt_node
 496:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** 		                                       (uint32_t)service_request);
 497:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** }
 498:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** 
 499:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** /**
 500:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 501:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * 				   \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@r
 502:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * @param  service_request_line service request number of the event to be triggered. \n
 503:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * 			\b Range: 0 to 5.
 504:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * @return None
 505:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *
 506:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Description</b><br>
 507:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * Trigger a UART interrupt service request.\n\n
 508:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * When the UART service request is triggered, the NVIC interrupt associated with it will be
 509:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * generated if enabled.
 510:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *
 511:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 512:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * XMC_UART_CH_SelectInterruptNodePointer() \n\n\n
 513:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  */
 514:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** __STATIC_INLINE void XMC_UART_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t
 515:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** {
 516:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_USIC_CH_TriggerServiceRequest(channel, (uint32_t)service_request_line);
 517:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** }
 518:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** 
 519:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** /**
 520:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * @param channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 521:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@re
 522:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * @return Status of UART channel events. \n 
 523:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *          \b Range: Use @ref XMC_UART_CH_STATUS_FLAG_t enumerations for
 524:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * 					event bitmasks. @ref XMC_UART_CH_STATUS_FLAG_TRANSMISSION_IDLE, @ref XMC_UART_CH_STATUS_FLA
 525:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * 					@ref XMC_UART_CH_STATUS_FLAG_SYNCHRONIZATION_BREAK_DETECTED etc.
 526:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *
 527:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Description</b><br>
 528:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * Provides the status of UART channel events.\n\n
 529:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * Status provided by the API represents the status of multiple events at their bit positions. The 
 530:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * obtained using the enumeration XMC_UART_CH_STATUS_FLAG_t. Event status is obtained by reading
 531:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * the register PSR_ASCMode.
 532:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *
 533:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 534:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * XMC_UART_CH_EnableEvent(),  XMC_UART_CH_ClearStatusFlag()\n\n\n
 535:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  */
 536:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** __STATIC_INLINE uint32_t XMC_UART_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
 537:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** {
 538:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****   return channel->PSR_ASCMode;
 539:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** }
 540:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** 
 541:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** /**
 542:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * @param channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 543:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@re
 544:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * @param flag UART events to be cleared. \n
 545:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *          \b Range: Use @ref XMC_UART_CH_STATUS_FLAG_t enumerations for
 546:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * 					event bitmasks. @ref XMC_UART_CH_STATUS_FLAG_TRANSMISSION_IDLE, @ref XMC_UART_CH_STATUS_FLA
 547:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * 					@ref XMC_UART_CH_STATUS_FLAG_SYNCHRONIZATION_BREAK_DETECTED etc.
 548:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * @return None
 549:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *
 550:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Description</b><br>
 551:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * Clears the status of UART channel events.\n\n
 552:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * Multiple events can be combined using the bitwise OR operation and configured in one function ca
 553:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * XMC_UART_CH_STATUS_FLAG_t enumerates multiple event bitmasks. These enumerations can be used as 
 554:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * Events are cleared by setting the bitmask to the PSCR register.
 555:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *
 556:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 557:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 558:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  */
 559:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** __STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
 560:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** {
 561:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****   channel->PSCR = flag;
 562:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** }
 563:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** 
 564:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** /**
 565:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * @param channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 566:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@re
 567:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * @param input UART channel input stage of type @ref XMC_UART_CH_INPUT_t. \n 
 568:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *          \b Range: @ref XMC_UART_CH_INPUT_RXD (for DX0),
 569:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * 					@ref XMC_UART_CH_INPUT_RXD1 (for DX3), @ref XMC_UART_CH_INPUT_RXD2 (for DX5).
 570:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * @param source Input source select for the input stage. The table provided below maps the decimal
 571:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * <table><tr><td>0</td><td>DXnA</td></tr><tr><td>1</td><td>DXnB</td></tr><tr><td>2</td><td>DXnC</t
 572:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * <tr><td>4</td><td>DXnE</td></tr><tr><td>5</td><td>DXnF</td></tr><tr><td>6</td><td>DXnG</td></tr>
 573:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * </tr></table>
 574:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * @return None
 575:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *
 576:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Description</b><br>
 577:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * Sets input soource for the UART communication.\n\n
 578:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * It is used for configuring the input stage for data reception.
 579:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * Selects the input data signal source among DXnA, DXnB.. DXnG for the input stage. 
 580:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * The API can be used for the input stages DX0, DX3 and DX5. 
 581:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *
 582:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 583:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * XMC_UART_CH_EnableInputInversion() \n\n\n
 584:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  */
 585:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** __STATIC_INLINE void XMC_UART_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_UART_CH_INP
 586:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** {
 587:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****   channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~(USIC_CH_DX0CR_INSW_Msk|USIC_CH_DX0CR_
 588:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
 589:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** }
 590:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** 
 591:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** /**
 592:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * @param channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 593:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@re
 594:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * @param pulse_length Length of the zero pulse in number of time quanta. \n 
 595:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *          \b Range: 0 to 7.
 596:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * @return None
 597:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *
 598:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Description</b><br>
 599:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * Sets the length of zero pulse in number of time quanta. Value 0 indicates one time quanta.\n\n
 600:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * Maximum possible is 8 time quanta with the value configured as 7.\n
 601:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * The value is set to PCR_ASCMode register.
 602:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 603:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * XMC_UART_CH_EnableInputInversion(), XMC_UART_CH_SetSamplePoint() \n\n\n
 604:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *
 605:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** */
 606:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** __STATIC_INLINE void XMC_UART_CH_SetPulseLength(XMC_USIC_CH_t *const channel, const uint8_t pulse_l
 607:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** {
 608:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****   channel->PCR_ASCMode = (uint32_t)(channel->PCR_ASCMode & (~USIC_CH_PCR_ASCMode_PL_Msk)) |
 609:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****                          ((uint32_t)pulse_length << USIC_CH_PCR_ASCMode_PL_Pos);
 610:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** }
 611:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** 
 612:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** 
 613:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** /**
 614:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * @param channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 615:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@re
 616:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * @return None
 617:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *
 618:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Description</b><br>
 619:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * Enables the generation of the master clock MCLK.\n\n
 620:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 621:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * XMC_USIC_CH_SetMclkOutputPassiveLevel()\n\n\n
 622:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *
 623:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** */
 624:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** __STATIC_INLINE void XMC_UART_CH_EnableMasterClock(XMC_USIC_CH_t *const channel)
 625:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** {
 626:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****   channel->PCR_ASCMode |= USIC_CH_PCR_ASCMode_MCLK_Msk;
 627:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** }
 628:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** 
 629:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** /**
 630:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * @param channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 631:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@re
 632:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * @return None
 633:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *
 634:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Description</b><br>
 635:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * Disables the generation of the master clock MCLK.\n\n
 636:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 637:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * XMC_USIC_CH_SetMclkOutputPassiveLevel()\n\n\n
 638:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *
 639:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** */
 640:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** __STATIC_INLINE void XMC_UART_CH_DisableMasterClock(XMC_USIC_CH_t *const channel)
 641:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** {
 642:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****   channel->PCR_ASCMode &= (uint32_t)~USIC_CH_PCR_ASCMode_MCLK_Msk;
 643:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** }
 644:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** 
 645:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** /**
 646:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * @param channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 647:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@re
 648:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * @param sample_point Sample point among the number of samples. \n
 649:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * 				  \b Range: minimum= 0, maximum= \a oversampling (DCTQ).
 650:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * @return None
 651:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  *
 652:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Description</b><br>
 653:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * Sets the sample point among the multiple samples for each UART symbol.\n\n
 654:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * The sample point is the one sample among number of samples set as oversampling. The value should
 655:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * the oversampling value. XMC_UART_CH_Init() sets the sample point to the sample at the centre. Fo
 656:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * example if the oversampling is 16, then the sample point is set to 9.
 657:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 658:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  * XMC_UART_CH_EnableInputInversion(), XMC_UART_CH_SetSamplePoint() \n\n\n
 659:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****  */
 660:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** __STATIC_INLINE void XMC_UART_CH_SetSamplePoint(XMC_USIC_CH_t *const channel, const uint32_t sample
 661:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** {
 729              	 .loc 2 661 0
 730              	 .cfi_startproc
 731              	 
 732              	 
 733              	 
 734 0000 80B4     	 push {r7}
 735              	.LCFI90:
 736              	 .cfi_def_cfa_offset 4
 737              	 .cfi_offset 7,-4
 738 0002 83B0     	 sub sp,sp,#12
 739              	.LCFI91:
 740              	 .cfi_def_cfa_offset 16
 741 0004 00AF     	 add r7,sp,#0
 742              	.LCFI92:
 743              	 .cfi_def_cfa_register 7
 744 0006 7860     	 str r0,[r7,#4]
 745 0008 3960     	 str r1,[r7]
 662:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****   channel->PCR_ASCMode = (uint32_t)((channel->PCR_ASCMode & (uint32_t)(~USIC_CH_PCR_ASCMode_SP_Msk)
 746              	 .loc 2 662 0
 747 000a 7B68     	 ldr r3,[r7,#4]
 748 000c DB6B     	 ldr r3,[r3,#60]
 749 000e 23F4F852 	 bic r2,r3,#7936
 663:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****                          (sample_point << USIC_CH_PCR_ASCMode_SP_Pos));
 750              	 .loc 2 663 0
 751 0012 3B68     	 ldr r3,[r7]
 752 0014 1B02     	 lsls r3,r3,#8
 662:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h ****   channel->PCR_ASCMode = (uint32_t)((channel->PCR_ASCMode & (uint32_t)(~USIC_CH_PCR_ASCMode_SP_Msk)
 753              	 .loc 2 662 0
 754 0016 1A43     	 orrs r2,r2,r3
 755 0018 7B68     	 ldr r3,[r7,#4]
 756 001a DA63     	 str r2,[r3,#60]
 664:F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc\xmc_uart.h **** }
 757              	 .loc 2 664 0
 758 001c 0C37     	 adds r7,r7,#12
 759              	.LCFI93:
 760              	 .cfi_def_cfa_offset 4
 761 001e BD46     	 mov sp,r7
 762              	.LCFI94:
 763              	 .cfi_def_cfa_register 13
 764              	 
 765 0020 5DF8047B 	 ldr r7,[sp],#4
 766              	.LCFI95:
 767              	 .cfi_restore 7
 768              	 .cfi_def_cfa_offset 0
 769 0024 7047     	 bx lr
 770              	 .cfi_endproc
 771              	.LFE251:
 773              	 .global uart_event_status_flags
 774 0026 00BF     	 .section .rodata.uart_event_status_flags,"a",%progbits
 775              	 .align 2
 778              	uart_event_status_flags:
 779 0000 04000000 	 .word 4
 780 0004 10000000 	 .word 16
 781 0008 20000000 	 .word 32
 782 000c 40000000 	 .word 64
 783 0010 08000000 	 .word 8
 784              	 .global uart_event_conf_flags
 785              	 .section .rodata.uart_event_conf_flags,"a",%progbits
 786              	 .align 2
 789              	uart_event_conf_flags:
 790 0000 08000000 	 .word 8
 791 0004 20000000 	 .word 32
 792 0008 40000000 	 .word 64
 793 000c 40000000 	 .word 64
 794 0010 10000000 	 .word 16
 795              	 .section .text.UART_GetAppVersion,"ax",%progbits
 796              	 .align 2
 797              	 .global UART_GetAppVersion
 798              	 .thumb
 799              	 .thumb_func
 801              	UART_GetAppVersion:
 802              	.LFB277:
 803              	 .file 3 "../Dave/Generated/UART/uart.c"
   1:../Dave/Generated/UART/uart.c **** /**
   2:../Dave/Generated/UART/uart.c ****  * @file uart.c
   3:../Dave/Generated/UART/uart.c ****  * @date 2015-12-17
   4:../Dave/Generated/UART/uart.c ****  *
   5:../Dave/Generated/UART/uart.c ****  * NOTE:
   6:../Dave/Generated/UART/uart.c ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   7:../Dave/Generated/UART/uart.c ****  *
   8:../Dave/Generated/UART/uart.c ****  * @cond
   9:../Dave/Generated/UART/uart.c ****  **************************************************************************************************
  10:../Dave/Generated/UART/uart.c ****  * UART v4.1.12 - Configures a USIC channel to perform transmit & receive operations using UART pro
  11:../Dave/Generated/UART/uart.c ****  *
  12:../Dave/Generated/UART/uart.c ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  13:../Dave/Generated/UART/uart.c ****  * All rights reserved.
  14:../Dave/Generated/UART/uart.c ****  *
  15:../Dave/Generated/UART/uart.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  16:../Dave/Generated/UART/uart.c ****  * following conditions are met:
  17:../Dave/Generated/UART/uart.c ****  *
  18:../Dave/Generated/UART/uart.c ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  19:../Dave/Generated/UART/uart.c ****  *   disclaimer.
  20:../Dave/Generated/UART/uart.c ****  *
  21:../Dave/Generated/UART/uart.c ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  22:../Dave/Generated/UART/uart.c ****  *   following disclaimer in the documentation and/or other materials provided with the distributio
  23:../Dave/Generated/UART/uart.c ****  *
  24:../Dave/Generated/UART/uart.c ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  25:../Dave/Generated/UART/uart.c ****  *   products derived from this software without specific prior written permission.
  26:../Dave/Generated/UART/uart.c ****  *
  27:../Dave/Generated/UART/uart.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  28:../Dave/Generated/UART/uart.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  29:../Dave/Generated/UART/uart.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  30:../Dave/Generated/UART/uart.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  31:../Dave/Generated/UART/uart.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  32:../Dave/Generated/UART/uart.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  33:../Dave/Generated/UART/uart.c ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  34:../Dave/Generated/UART/uart.c ****  *
  35:../Dave/Generated/UART/uart.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  36:../Dave/Generated/UART/uart.c ****  * with Infineon Technologies AG (dave@infineon.com).
  37:../Dave/Generated/UART/uart.c ****  **************************************************************************************************
  38:../Dave/Generated/UART/uart.c ****  *
  39:../Dave/Generated/UART/uart.c ****  * Change History
  40:../Dave/Generated/UART/uart.c ****  * --------------
  41:../Dave/Generated/UART/uart.c ****  *
  42:../Dave/Generated/UART/uart.c ****  * 2015-02-16:
  43:../Dave/Generated/UART/uart.c ****  *     - Initial version for DAVEv4
  44:../Dave/Generated/UART/uart.c ****  *
  45:../Dave/Generated/UART/uart.c ****  * 2015-06-20:
  46:../Dave/Generated/UART/uart.c ****  *     - Changed the abort API name from UART_Abort_Receive to UART_AbortReceive and added return t
  47:../Dave/Generated/UART/uart.c ****  *
  48:../Dave/Generated/UART/uart.c ****  * 2015-06-25:
  49:../Dave/Generated/UART/uart.c ****  *     - Changed protocol event handling to check event configuration
  50:../Dave/Generated/UART/uart.c ****  *
  51:../Dave/Generated/UART/uart.c ****  * 2015-07-06:
  52:../Dave/Generated/UART/uart.c ****  *     - Changed structure name from UART_DYNAMIC_t to UART_RUNTIME_t
  53:../Dave/Generated/UART/uart.c ****  *
  54:../Dave/Generated/UART/uart.c ****  * 2015-07-30:
  55:../Dave/Generated/UART/uart.c ****  *     - Added code for DMA and Direct mode handling
  56:../Dave/Generated/UART/uart.c ****  *
  57:../Dave/Generated/UART/uart.c ****  * @endcond
  58:../Dave/Generated/UART/uart.c ****  *
  59:../Dave/Generated/UART/uart.c ****  */
  60:../Dave/Generated/UART/uart.c **** 
  61:../Dave/Generated/UART/uart.c **** /**************************************************************************************************
  62:../Dave/Generated/UART/uart.c ****  * HEADER FILES
  63:../Dave/Generated/UART/uart.c ****  **************************************************************************************************
  64:../Dave/Generated/UART/uart.c **** #include "uart.h"
  65:../Dave/Generated/UART/uart.c **** 
  66:../Dave/Generated/UART/uart.c **** /**************************************************************************************************
  67:../Dave/Generated/UART/uart.c ****  * MACROS
  68:../Dave/Generated/UART/uart.c ****  **************************************************************************************************
  69:../Dave/Generated/UART/uart.c **** 
  70:../Dave/Generated/UART/uart.c **** /**************************************************************************************************
  71:../Dave/Generated/UART/uart.c ****  * LOCAL DATA
  72:../Dave/Generated/UART/uart.c ****  **************************************************************************************************
  73:../Dave/Generated/UART/uart.c **** const XMC_UART_CH_STATUS_FLAG_t uart_event_status_flags[UART_EVENT_MAX] = {
  74:../Dave/Generated/UART/uart.c ****   XMC_UART_CH_STATUS_FLAG_SYNCHRONIZATION_BREAK_DETECTED,
  75:../Dave/Generated/UART/uart.c ****   XMC_UART_CH_STATUS_FLAG_RECEIVER_NOISE_DETECTED,
  76:../Dave/Generated/UART/uart.c ****   XMC_UART_CH_STATUS_FLAG_FORMAT_ERROR_IN_STOP_BIT_0,
  77:../Dave/Generated/UART/uart.c ****   XMC_UART_CH_STATUS_FLAG_FORMAT_ERROR_IN_STOP_BIT_1,
  78:../Dave/Generated/UART/uart.c ****   XMC_UART_CH_STATUS_FLAG_COLLISION_DETECTED
  79:../Dave/Generated/UART/uart.c **** };
  80:../Dave/Generated/UART/uart.c **** const XMC_UART_CH_EVENT_t uart_event_conf_flags[UART_EVENT_MAX] = {
  81:../Dave/Generated/UART/uart.c ****   XMC_UART_CH_EVENT_SYNCHRONIZATION_BREAK,
  82:../Dave/Generated/UART/uart.c ****   XMC_UART_CH_EVENT_RECEIVER_NOISE,
  83:../Dave/Generated/UART/uart.c ****   XMC_UART_CH_EVENT_FORMAT_ERROR,
  84:../Dave/Generated/UART/uart.c ****   XMC_UART_CH_EVENT_FORMAT_ERROR,
  85:../Dave/Generated/UART/uart.c ****   XMC_UART_CH_EVENT_COLLISION
  86:../Dave/Generated/UART/uart.c **** };
  87:../Dave/Generated/UART/uart.c **** /**************************************************************************************************
  88:../Dave/Generated/UART/uart.c ****  * LOCAL ROUTINES
  89:../Dave/Generated/UART/uart.c ****  **************************************************************************************************
  90:../Dave/Generated/UART/uart.c **** #ifdef UART_TX_INTERRUPT_USED
  91:../Dave/Generated/UART/uart.c **** /*Function used for handling transmit interrupt.*/
  92:../Dave/Generated/UART/uart.c **** void UART_lTransmitHandler(const UART_t * const handle);
  93:../Dave/Generated/UART/uart.c **** #endif
  94:../Dave/Generated/UART/uart.c **** #ifdef UART_RX_INTERRUPT_USED
  95:../Dave/Generated/UART/uart.c **** /*Function used for handling data reception interrupts.*/
  96:../Dave/Generated/UART/uart.c **** void UART_lReceiveHandler(const UART_t * const handle);
  97:../Dave/Generated/UART/uart.c **** /*Function used for reconfiguring rx FIFO while receiving data.*/
  98:../Dave/Generated/UART/uart.c **** static void UART_lReconfigureRxFIFO(const UART_t * const handle, uint32_t data_size);
  99:../Dave/Generated/UART/uart.c **** #endif
 100:../Dave/Generated/UART/uart.c **** #ifdef UART_TX_DIRECT_USED
 101:../Dave/Generated/UART/uart.c **** /*Function for transmitting data using polling.*/
 102:../Dave/Generated/UART/uart.c **** static UART_STATUS_t UART_lStartTransmitPolling (const UART_t *const handle, uint8_t* data_ptr, uin
 103:../Dave/Generated/UART/uart.c **** #endif
 104:../Dave/Generated/UART/uart.c **** #ifdef UART_RX_DIRECT_USED
 105:../Dave/Generated/UART/uart.c **** /*Function for receiving data using polling.*/
 106:../Dave/Generated/UART/uart.c **** static UART_STATUS_t UART_lStartReceivePolling (const UART_t *const handle, uint8_t* data_ptr, uint
 107:../Dave/Generated/UART/uart.c **** #endif
 108:../Dave/Generated/UART/uart.c **** /*Function used for handling protocol related interrupt.*/
 109:../Dave/Generated/UART/uart.c **** void UART_lProtocolHandler(const UART_t * const handle);
 110:../Dave/Generated/UART/uart.c **** 
 111:../Dave/Generated/UART/uart.c **** 
 112:../Dave/Generated/UART/uart.c **** /**************************************************************************************************
 113:../Dave/Generated/UART/uart.c ****  * API IMPLEMENTATION
 114:../Dave/Generated/UART/uart.c ****  **************************************************************************************************
 115:../Dave/Generated/UART/uart.c **** 
 116:../Dave/Generated/UART/uart.c **** /*
 117:../Dave/Generated/UART/uart.c ****  * @brief API to retrieve the version of the UART APP.
 118:../Dave/Generated/UART/uart.c ****  *
 119:../Dave/Generated/UART/uart.c ****  * @return DAVE_APP_VERSION_t Structure containing major version, minor version
 120:../Dave/Generated/UART/uart.c ****  *         and patch version.
 121:../Dave/Generated/UART/uart.c ****  */
 122:../Dave/Generated/UART/uart.c **** DAVE_APP_VERSION_t UART_GetAppVersion()
 123:../Dave/Generated/UART/uart.c **** {
 804              	 .loc 3 123 0
 805              	 .cfi_startproc
 806              	 
 807              	 
 808              	 
 809 0000 80B4     	 push {r7}
 810              	.LCFI96:
 811              	 .cfi_def_cfa_offset 4
 812              	 .cfi_offset 7,-4
 813 0002 83B0     	 sub sp,sp,#12
 814              	.LCFI97:
 815              	 .cfi_def_cfa_offset 16
 816 0004 00AF     	 add r7,sp,#0
 817              	.LCFI98:
 818              	 .cfi_def_cfa_register 7
 124:../Dave/Generated/UART/uart.c ****   DAVE_APP_VERSION_t version;
 125:../Dave/Generated/UART/uart.c **** 
 126:../Dave/Generated/UART/uart.c ****   version.major = UART_MAJOR_VERSION;
 819              	 .loc 3 126 0
 820 0006 0423     	 movs r3,#4
 821 0008 3B70     	 strb r3,[r7]
 127:../Dave/Generated/UART/uart.c ****   version.minor = UART_MINOR_VERSION;
 822              	 .loc 3 127 0
 823 000a 0123     	 movs r3,#1
 824 000c 7B70     	 strb r3,[r7,#1]
 128:../Dave/Generated/UART/uart.c ****   version.patch = UART_PATCH_VERSION;
 825              	 .loc 3 128 0
 826 000e 0C23     	 movs r3,#12
 827 0010 BB70     	 strb r3,[r7,#2]
 129:../Dave/Generated/UART/uart.c **** 
 130:../Dave/Generated/UART/uart.c ****   return version;
 828              	 .loc 3 130 0
 829 0012 3B1D     	 adds r3,r7,#4
 830 0014 3A46     	 mov r2,r7
 831 0016 1268     	 ldr r2,[r2]
 832 0018 1146     	 mov r1,r2
 833 001a 1980     	 strh r1,[r3]
 834 001c 0233     	 adds r3,r3,#2
 835 001e 120C     	 lsrs r2,r2,#16
 836 0020 1A70     	 strb r2,[r3]
 837 0022 0023     	 movs r3,#0
 838 0024 3A79     	 ldrb r2,[r7,#4]
 839 0026 62F30703 	 bfi r3,r2,#0,#8
 840 002a 7A79     	 ldrb r2,[r7,#5]
 841 002c 62F30F23 	 bfi r3,r2,#8,#8
 842 0030 BA79     	 ldrb r2,[r7,#6]
 843 0032 62F31743 	 bfi r3,r2,#16,#8
 131:../Dave/Generated/UART/uart.c **** }
 844              	 .loc 3 131 0
 845 0036 1846     	 mov r0,r3
 846 0038 0C37     	 adds r7,r7,#12
 847              	.LCFI99:
 848              	 .cfi_def_cfa_offset 4
 849 003a BD46     	 mov sp,r7
 850              	.LCFI100:
 851              	 .cfi_def_cfa_register 13
 852              	 
 853 003c 5DF8047B 	 ldr r7,[sp],#4
 854              	.LCFI101:
 855              	 .cfi_restore 7
 856              	 .cfi_def_cfa_offset 0
 857 0040 7047     	 bx lr
 858              	 .cfi_endproc
 859              	.LFE277:
 861 0042 00BF     	 .section .text.UART_Init,"ax",%progbits
 862              	 .align 2
 863              	 .global UART_Init
 864              	 .thumb
 865              	 .thumb_func
 867              	UART_Init:
 868              	.LFB278:
 132:../Dave/Generated/UART/uart.c **** 
 133:../Dave/Generated/UART/uart.c **** /*
 134:../Dave/Generated/UART/uart.c ****  * @brief Function to initialize the USIC Channel with GUI configured values.
 135:../Dave/Generated/UART/uart.c ****  *
 136:../Dave/Generated/UART/uart.c ****  * @param[in]  handle UART APP handle pointer of type UART_t*
 137:../Dave/Generated/UART/uart.c ****  *
 138:../Dave/Generated/UART/uart.c ****  * @return  UART_STATUS_t
 139:../Dave/Generated/UART/uart.c ****  *          UART_SUCCESS: for successful UART initialization.<BR>
 140:../Dave/Generated/UART/uart.c ****  *          UART_STATUS_FAILURE  : If UART initialization fails.<BR>
 141:../Dave/Generated/UART/uart.c ****  *
 142:../Dave/Generated/UART/uart.c ****  */
 143:../Dave/Generated/UART/uart.c **** UART_STATUS_t UART_Init(const UART_t *const handle)
 144:../Dave/Generated/UART/uart.c **** {
 869              	 .loc 3 144 0
 870              	 .cfi_startproc
 871              	 
 872              	 
 873 0000 80B5     	 push {r7,lr}
 874              	.LCFI102:
 875              	 .cfi_def_cfa_offset 8
 876              	 .cfi_offset 7,-8
 877              	 .cfi_offset 14,-4
 878 0002 84B0     	 sub sp,sp,#16
 879              	.LCFI103:
 880              	 .cfi_def_cfa_offset 24
 881 0004 00AF     	 add r7,sp,#0
 882              	.LCFI104:
 883              	 .cfi_def_cfa_register 7
 884 0006 7860     	 str r0,[r7,#4]
 145:../Dave/Generated/UART/uart.c ****   UART_STATUS_t status = UART_STATUS_SUCCESS;
 885              	 .loc 3 145 0
 886 0008 0023     	 movs r3,#0
 887 000a FB73     	 strb r3,[r7,#15]
 146:../Dave/Generated/UART/uart.c ****   XMC_ASSERT("UART_Init : UART APP handle invalid", (((handle != NULL)&&
 147:../Dave/Generated/UART/uart.c ****       (handle->config != NULL)) &&((handle->config->fptr_uart_config != NULL)&&
 148:../Dave/Generated/UART/uart.c ****       (handle->runtime != NULL))))
 149:../Dave/Generated/UART/uart.c **** 
 150:../Dave/Generated/UART/uart.c ****   /*Initialize the multiplexers required for UART configuration*/
 151:../Dave/Generated/UART/uart.c ****   status = handle->config->fptr_uart_config();
 888              	 .loc 3 151 0
 889 000c 7B68     	 ldr r3,[r7,#4]
 890 000e 5B68     	 ldr r3,[r3,#4]
 891 0010 5B68     	 ldr r3,[r3,#4]
 892 0012 9847     	 blx r3
 893 0014 0346     	 mov r3,r0
 894 0016 FB73     	 strb r3,[r7,#15]
 152:../Dave/Generated/UART/uart.c **** 
 153:../Dave/Generated/UART/uart.c ****   return status;
 895              	 .loc 3 153 0
 896 0018 FB7B     	 ldrb r3,[r7,#15]
 154:../Dave/Generated/UART/uart.c **** }
 897              	 .loc 3 154 0
 898 001a 1846     	 mov r0,r3
 899 001c 1037     	 adds r7,r7,#16
 900              	.LCFI105:
 901              	 .cfi_def_cfa_offset 8
 902 001e BD46     	 mov sp,r7
 903              	.LCFI106:
 904              	 .cfi_def_cfa_register 13
 905              	 
 906 0020 80BD     	 pop {r7,pc}
 907              	 .cfi_endproc
 908              	.LFE278:
 910 0022 00BF     	 .section .text.UART_Transmit,"ax",%progbits
 911              	 .align 2
 912              	 .global UART_Transmit
 913              	 .thumb
 914              	 .thumb_func
 916              	UART_Transmit:
 917              	.LFB279:
 155:../Dave/Generated/UART/uart.c **** 
 156:../Dave/Generated/UART/uart.c **** /*
 157:../Dave/Generated/UART/uart.c ****  * @brief Common function to transmit data.
 158:../Dave/Generated/UART/uart.c ****  *
 159:../Dave/Generated/UART/uart.c ****  * @param[in]  handle UART APP handle pointer of type UART_t*
 160:../Dave/Generated/UART/uart.c ****  * @param[in]  data_ptr Pointer to data of type uint8_t
 161:../Dave/Generated/UART/uart.c ****  * @param[in]  count Number of uint8_t type bytes to be transmitted
 162:../Dave/Generated/UART/uart.c ****  *
 163:../Dave/Generated/UART/uart.c ****  * @return  UART_STATUS_t
 164:../Dave/Generated/UART/uart.c ****  *          UART_SUCCESS: If the data is put to transmit.<BR>
 165:../Dave/Generated/UART/uart.c ****  *          UART_STATUS_BUSY  : If the channel is busy.<BR>
 166:../Dave/Generated/UART/uart.c ****  *          UART_STATUS_BUFFER_INVALID: Either if buffer is NULL or count is 0.<BR>
 167:../Dave/Generated/UART/uart.c ****  *          UART_STATUS_MODE_MISMATCH: If the configured mode is invalid.<BR>
 168:../Dave/Generated/UART/uart.c ****  *
 169:../Dave/Generated/UART/uart.c ****  */
 170:../Dave/Generated/UART/uart.c **** UART_STATUS_t UART_Transmit(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
 171:../Dave/Generated/UART/uart.c **** {
 918              	 .loc 3 171 0
 919              	 .cfi_startproc
 920              	 
 921              	 
 922 0000 80B5     	 push {r7,lr}
 923              	.LCFI107:
 924              	 .cfi_def_cfa_offset 8
 925              	 .cfi_offset 7,-8
 926              	 .cfi_offset 14,-4
 927 0002 86B0     	 sub sp,sp,#24
 928              	.LCFI108:
 929              	 .cfi_def_cfa_offset 32
 930 0004 00AF     	 add r7,sp,#0
 931              	.LCFI109:
 932              	 .cfi_def_cfa_register 7
 933 0006 F860     	 str r0,[r7,#12]
 934 0008 B960     	 str r1,[r7,#8]
 935 000a 7A60     	 str r2,[r7,#4]
 172:../Dave/Generated/UART/uart.c ****   UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
 936              	 .loc 3 172 0
 937 000c 0423     	 movs r3,#4
 938 000e FB75     	 strb r3,[r7,#23]
 173:../Dave/Generated/UART/uart.c **** 
 174:../Dave/Generated/UART/uart.c ****   switch(handle->config->transmit_mode)
 939              	 .loc 3 174 0
 940 0010 FB68     	 ldr r3,[r7,#12]
 941 0012 5B68     	 ldr r3,[r3,#4]
 942 0014 93F82930 	 ldrb r3,[r3,#41]
 943 0018 002B     	 cmp r3,#0
 944 001a 00D0     	 beq .L27
 175:../Dave/Generated/UART/uart.c ****   {
 176:../Dave/Generated/UART/uart.c **** #ifdef UART_TX_INTERRUPT_USED
 177:../Dave/Generated/UART/uart.c ****   case UART_TRANSFER_MODE_INTERRUPT:
 178:../Dave/Generated/UART/uart.c ****     ret_stat = UART_StartTransmitIRQ(handle, data_ptr, count);
 179:../Dave/Generated/UART/uart.c ****     break;
 180:../Dave/Generated/UART/uart.c **** #endif
 181:../Dave/Generated/UART/uart.c **** #ifdef UART_TX_DMA_USED
 182:../Dave/Generated/UART/uart.c ****   case UART_TRANSFER_MODE_DMA:
 183:../Dave/Generated/UART/uart.c ****     ret_stat = UART_StartTransmitDMA(handle, data_ptr, count);
 184:../Dave/Generated/UART/uart.c ****     break;
 185:../Dave/Generated/UART/uart.c **** #endif
 186:../Dave/Generated/UART/uart.c **** #ifdef UART_TX_DIRECT_USED
 187:../Dave/Generated/UART/uart.c ****   case UART_TRANSFER_MODE_DIRECT:
 188:../Dave/Generated/UART/uart.c ****     ret_stat = UART_lStartTransmitPolling(handle, data_ptr, count);
 189:../Dave/Generated/UART/uart.c ****     break;
 190:../Dave/Generated/UART/uart.c **** #endif
 191:../Dave/Generated/UART/uart.c ****   default:
 192:../Dave/Generated/UART/uart.c ****     break;
 945              	 .loc 3 192 0
 946 001c 07E0     	 b .L28
 947              	.L27:
 178:../Dave/Generated/UART/uart.c ****     break;
 948              	 .loc 3 178 0
 949 001e F868     	 ldr r0,[r7,#12]
 950 0020 B968     	 ldr r1,[r7,#8]
 951 0022 7A68     	 ldr r2,[r7,#4]
 952 0024 FFF7FEFF 	 bl UART_StartTransmitIRQ
 953 0028 0346     	 mov r3,r0
 954 002a FB75     	 strb r3,[r7,#23]
 179:../Dave/Generated/UART/uart.c **** #endif
 955              	 .loc 3 179 0
 956 002c 00BF     	 nop
 957              	.L28:
 193:../Dave/Generated/UART/uart.c ****   }
 194:../Dave/Generated/UART/uart.c ****   return ret_stat;
 958              	 .loc 3 194 0
 959 002e FB7D     	 ldrb r3,[r7,#23]
 195:../Dave/Generated/UART/uart.c **** }
 960              	 .loc 3 195 0
 961 0030 1846     	 mov r0,r3
 962 0032 1837     	 adds r7,r7,#24
 963              	.LCFI110:
 964              	 .cfi_def_cfa_offset 8
 965 0034 BD46     	 mov sp,r7
 966              	.LCFI111:
 967              	 .cfi_def_cfa_register 13
 968              	 
 969 0036 80BD     	 pop {r7,pc}
 970              	 .cfi_endproc
 971              	.LFE279:
 973              	 .section .text.UART_Receive,"ax",%progbits
 974              	 .align 2
 975              	 .global UART_Receive
 976              	 .thumb
 977              	 .thumb_func
 979              	UART_Receive:
 980              	.LFB280:
 196:../Dave/Generated/UART/uart.c **** 
 197:../Dave/Generated/UART/uart.c **** /*
 198:../Dave/Generated/UART/uart.c ****  * @brief Common function to receive data.
 199:../Dave/Generated/UART/uart.c ****  *
 200:../Dave/Generated/UART/uart.c ****  * @param[in]  handle UART APP handle pointer of type UART_t*
 201:../Dave/Generated/UART/uart.c ****  * @param[in]  data_ptr Pointer to data of type uint8_t
 202:../Dave/Generated/UART/uart.c ****  * @param[in]  count Number of uint8_t type bytes to be received
 203:../Dave/Generated/UART/uart.c ****  *
 204:../Dave/Generated/UART/uart.c ****  * @return  UART_STATUS_t
 205:../Dave/Generated/UART/uart.c ****  *          UART_SUCCESS: If the data is put to transmit.<BR>
 206:../Dave/Generated/UART/uart.c ****  *          UART_STATUS_BUSY  : If the channel is busy.<BR>
 207:../Dave/Generated/UART/uart.c ****  *          UART_STATUS_BUFFER_INVALID: Either if buffer is NULL or count is 0.<BR>
 208:../Dave/Generated/UART/uart.c ****  *          UART_STATUS_MODE_MISMATCH: If the configured mode is invalid.<BR>
 209:../Dave/Generated/UART/uart.c ****  *
 210:../Dave/Generated/UART/uart.c ****  */
 211:../Dave/Generated/UART/uart.c **** UART_STATUS_t UART_Receive(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
 212:../Dave/Generated/UART/uart.c **** {
 981              	 .loc 3 212 0
 982              	 .cfi_startproc
 983              	 
 984              	 
 985 0000 80B5     	 push {r7,lr}
 986              	.LCFI112:
 987              	 .cfi_def_cfa_offset 8
 988              	 .cfi_offset 7,-8
 989              	 .cfi_offset 14,-4
 990 0002 86B0     	 sub sp,sp,#24
 991              	.LCFI113:
 992              	 .cfi_def_cfa_offset 32
 993 0004 00AF     	 add r7,sp,#0
 994              	.LCFI114:
 995              	 .cfi_def_cfa_register 7
 996 0006 F860     	 str r0,[r7,#12]
 997 0008 B960     	 str r1,[r7,#8]
 998 000a 7A60     	 str r2,[r7,#4]
 213:../Dave/Generated/UART/uart.c ****   UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
 999              	 .loc 3 213 0
 1000 000c 0423     	 movs r3,#4
 1001 000e FB75     	 strb r3,[r7,#23]
 214:../Dave/Generated/UART/uart.c **** 
 215:../Dave/Generated/UART/uart.c ****   switch(handle->config->receive_mode)
 1002              	 .loc 3 215 0
 1003 0010 FB68     	 ldr r3,[r7,#12]
 1004 0012 5B68     	 ldr r3,[r3,#4]
 1005 0014 93F82A30 	 ldrb r3,[r3,#42]
 1006 0018 002B     	 cmp r3,#0
 1007 001a 00D0     	 beq .L32
 216:../Dave/Generated/UART/uart.c ****   {
 217:../Dave/Generated/UART/uart.c **** #ifdef UART_RX_INTERRUPT_USED
 218:../Dave/Generated/UART/uart.c ****   case UART_TRANSFER_MODE_INTERRUPT:
 219:../Dave/Generated/UART/uart.c ****     ret_stat = UART_StartReceiveIRQ(handle, data_ptr, count);
 220:../Dave/Generated/UART/uart.c ****     break;
 221:../Dave/Generated/UART/uart.c **** #endif
 222:../Dave/Generated/UART/uart.c **** #ifdef UART_RX_DMA_USED
 223:../Dave/Generated/UART/uart.c ****   case UART_TRANSFER_MODE_DMA:
 224:../Dave/Generated/UART/uart.c ****     ret_stat = UART_StartReceiveDMA(handle, data_ptr, count);
 225:../Dave/Generated/UART/uart.c ****     break;
 226:../Dave/Generated/UART/uart.c **** #endif
 227:../Dave/Generated/UART/uart.c **** #ifdef UART_RX_DIRECT_USED
 228:../Dave/Generated/UART/uart.c ****   case UART_TRANSFER_MODE_DIRECT:
 229:../Dave/Generated/UART/uart.c ****     ret_stat = UART_lStartReceivePolling(handle, data_ptr, count);
 230:../Dave/Generated/UART/uart.c ****     break;
 231:../Dave/Generated/UART/uart.c **** #endif
 232:../Dave/Generated/UART/uart.c ****   default:
 233:../Dave/Generated/UART/uart.c ****     break;
 1008              	 .loc 3 233 0
 1009 001c 07E0     	 b .L33
 1010              	.L32:
 219:../Dave/Generated/UART/uart.c ****     break;
 1011              	 .loc 3 219 0
 1012 001e F868     	 ldr r0,[r7,#12]
 1013 0020 B968     	 ldr r1,[r7,#8]
 1014 0022 7A68     	 ldr r2,[r7,#4]
 1015 0024 FFF7FEFF 	 bl UART_StartReceiveIRQ
 1016 0028 0346     	 mov r3,r0
 1017 002a FB75     	 strb r3,[r7,#23]
 220:../Dave/Generated/UART/uart.c **** #endif
 1018              	 .loc 3 220 0
 1019 002c 00BF     	 nop
 1020              	.L33:
 234:../Dave/Generated/UART/uart.c ****   }
 235:../Dave/Generated/UART/uart.c ****   return ret_stat;
 1021              	 .loc 3 235 0
 1022 002e FB7D     	 ldrb r3,[r7,#23]
 236:../Dave/Generated/UART/uart.c **** }
 1023              	 .loc 3 236 0
 1024 0030 1846     	 mov r0,r3
 1025 0032 1837     	 adds r7,r7,#24
 1026              	.LCFI115:
 1027              	 .cfi_def_cfa_offset 8
 1028 0034 BD46     	 mov sp,r7
 1029              	.LCFI116:
 1030              	 .cfi_def_cfa_register 13
 1031              	 
 1032 0036 80BD     	 pop {r7,pc}
 1033              	 .cfi_endproc
 1034              	.LFE280:
 1036              	 .section .text.UART_AbortTransmit,"ax",%progbits
 1037              	 .align 2
 1038              	 .global UART_AbortTransmit
 1039              	 .thumb
 1040              	 .thumb_func
 1042              	UART_AbortTransmit:
 1043              	.LFB281:
 237:../Dave/Generated/UART/uart.c **** 
 238:../Dave/Generated/UART/uart.c **** #if (defined UART_TX_INTERRUPT_USED || defined UART_TX_DMA_USED)
 239:../Dave/Generated/UART/uart.c **** /*
 240:../Dave/Generated/UART/uart.c ****  * @brief Common function to abort ongoing transmission.
 241:../Dave/Generated/UART/uart.c ****  *
 242:../Dave/Generated/UART/uart.c ****  * @param[in]  handle UART APP handle pointer of type UART_t*
 243:../Dave/Generated/UART/uart.c ****  *
 244:../Dave/Generated/UART/uart.c ****  * @return  UART_STATUS_t
 245:../Dave/Generated/UART/uart.c ****  *          UART_SUCCESS: If the transmission is aborted.<BR>
 246:../Dave/Generated/UART/uart.c ****  *          UART_STATUS_FAILURE: If the channel is not transmitting.<BR>
 247:../Dave/Generated/UART/uart.c ****  *          UART_STATUS_MODE_MISMATCH: If the configured mode is Direct.<BR>
 248:../Dave/Generated/UART/uart.c ****  *
 249:../Dave/Generated/UART/uart.c ****  */
 250:../Dave/Generated/UART/uart.c **** UART_STATUS_t UART_AbortTransmit(const UART_t *const handle)
 251:../Dave/Generated/UART/uart.c **** {
 1044              	 .loc 3 251 0
 1045              	 .cfi_startproc
 1046              	 
 1047              	 
 1048 0000 80B5     	 push {r7,lr}
 1049              	.LCFI117:
 1050              	 .cfi_def_cfa_offset 8
 1051              	 .cfi_offset 7,-8
 1052              	 .cfi_offset 14,-4
 1053 0002 84B0     	 sub sp,sp,#16
 1054              	.LCFI118:
 1055              	 .cfi_def_cfa_offset 24
 1056 0004 00AF     	 add r7,sp,#0
 1057              	.LCFI119:
 1058              	 .cfi_def_cfa_register 7
 1059 0006 7860     	 str r0,[r7,#4]
 252:../Dave/Generated/UART/uart.c ****   UART_STATUS_t ret_stat = UART_STATUS_SUCCESS;
 1060              	 .loc 3 252 0
 1061 0008 0023     	 movs r3,#0
 1062 000a FB73     	 strb r3,[r7,#15]
 253:../Dave/Generated/UART/uart.c **** #ifdef UART_TX_DMA_USED
 254:../Dave/Generated/UART/uart.c ****   const UART_DMA_CONFIG_t * ptr_dma_config = handle->config->transmit_dma_config;
 255:../Dave/Generated/UART/uart.c ****   XMC_DMA_t * ptr_gpdma = handle->config->global_dma->dma;
 256:../Dave/Generated/UART/uart.c **** #endif
 257:../Dave/Generated/UART/uart.c **** 
 258:../Dave/Generated/UART/uart.c ****   XMC_ASSERT("UART_AbortTransmit: UART APP handle invalid", ((handle != NULL)&&
 259:../Dave/Generated/UART/uart.c ****             (handle->runtime != NULL)))
 260:../Dave/Generated/UART/uart.c **** 
 261:../Dave/Generated/UART/uart.c ****   /*Reset the user buffer pointer to null*/
 262:../Dave/Generated/UART/uart.c ****   handle->runtime->tx_busy = false;
 1063              	 .loc 3 262 0
 1064 000c 7B68     	 ldr r3,[r7,#4]
 1065 000e 9B68     	 ldr r3,[r3,#8]
 1066 0010 0022     	 movs r2,#0
 1067 0012 1A76     	 strb r2,[r3,#24]
 263:../Dave/Generated/UART/uart.c ****   handle->runtime->tx_data = NULL;
 1068              	 .loc 3 263 0
 1069 0014 7B68     	 ldr r3,[r7,#4]
 1070 0016 9B68     	 ldr r3,[r3,#8]
 1071 0018 0022     	 movs r2,#0
 1072 001a 1A60     	 str r2,[r3]
 264:../Dave/Generated/UART/uart.c **** 
 265:../Dave/Generated/UART/uart.c ****   switch(handle->config->transmit_mode)
 1073              	 .loc 3 265 0
 1074 001c 7B68     	 ldr r3,[r7,#4]
 1075 001e 5B68     	 ldr r3,[r3,#4]
 1076 0020 93F82930 	 ldrb r3,[r3,#41]
 1077 0024 002B     	 cmp r3,#0
 1078 0026 20D1     	 bne .L42
 266:../Dave/Generated/UART/uart.c ****   {
 267:../Dave/Generated/UART/uart.c **** #ifdef UART_TX_INTERRUPT_USED
 268:../Dave/Generated/UART/uart.c ****   case UART_TRANSFER_MODE_INTERRUPT:
 269:../Dave/Generated/UART/uart.c ****     /*Disable the transmit interrupts*/
 270:../Dave/Generated/UART/uart.c ****     if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 1079              	 .loc 3 270 0
 1080 0028 7B68     	 ldr r3,[r7,#4]
 1081 002a 5B68     	 ldr r3,[r3,#4]
 1082 002c 93F82B30 	 ldrb r3,[r3,#43]
 1083 0030 002B     	 cmp r3,#0
 1084 0032 0CD0     	 beq .L38
 271:../Dave/Generated/UART/uart.c ****     {
 272:../Dave/Generated/UART/uart.c ****       /*Disable the transmit FIFO event*/
 273:../Dave/Generated/UART/uart.c ****       XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STAND
 1085              	 .loc 3 273 0
 1086 0034 7B68     	 ldr r3,[r7,#4]
 1087 0036 1B68     	 ldr r3,[r3]
 1088 0038 1846     	 mov r0,r3
 1089 003a 4FF08041 	 mov r1,#1073741824
 1090 003e FFF7FEFF 	 bl XMC_USIC_CH_TXFIFO_DisableEvent
 274:../Dave/Generated/UART/uart.c ****       XMC_USIC_CH_TXFIFO_Flush(handle->channel);
 1091              	 .loc 3 274 0
 1092 0042 7B68     	 ldr r3,[r7,#4]
 1093 0044 1B68     	 ldr r3,[r3]
 1094 0046 1846     	 mov r0,r3
 1095 0048 FFF7FEFF 	 bl XMC_USIC_CH_TXFIFO_Flush
 1096 004c 06E0     	 b .L39
 1097              	.L38:
 275:../Dave/Generated/UART/uart.c ****     }
 276:../Dave/Generated/UART/uart.c ****     else
 277:../Dave/Generated/UART/uart.c ****     {
 278:../Dave/Generated/UART/uart.c ****       /*Disable the standard transmit event*/
 279:../Dave/Generated/UART/uart.c ****       XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
 1098              	 .loc 3 279 0
 1099 004e 7B68     	 ldr r3,[r7,#4]
 1100 0050 1B68     	 ldr r3,[r3]
 1101 0052 1846     	 mov r0,r3
 1102 0054 4FF40051 	 mov r1,#8192
 1103 0058 FFF7FEFF 	 bl XMC_USIC_CH_DisableEvent
 1104              	.L39:
 280:../Dave/Generated/UART/uart.c ****     }
 281:../Dave/Generated/UART/uart.c ****     XMC_USIC_CH_SetTransmitBufferStatus(handle->channel, XMC_USIC_CH_TBUF_STATUS_SET_IDLE);
 1105              	 .loc 3 281 0
 1106 005c 7B68     	 ldr r3,[r7,#4]
 1107 005e 1B68     	 ldr r3,[r3]
 1108 0060 1846     	 mov r0,r3
 1109 0062 0221     	 movs r1,#2
 1110 0064 FFF7FEFF 	 bl XMC_USIC_CH_SetTransmitBufferStatus
 282:../Dave/Generated/UART/uart.c ****     break;
 1111              	 .loc 3 282 0
 1112 0068 02E0     	 b .L40
 1113              	.L42:
 283:../Dave/Generated/UART/uart.c **** #endif
 284:../Dave/Generated/UART/uart.c **** #ifdef UART_TX_DMA_USED
 285:../Dave/Generated/UART/uart.c ****   case UART_TRANSFER_MODE_DMA:
 286:../Dave/Generated/UART/uart.c ****     /*Disable the standard transmit event*/
 287:../Dave/Generated/UART/uart.c ****     if (XMC_DMA_CH_IsEnabled(ptr_gpdma, ptr_dma_config->dma_channel))
 288:../Dave/Generated/UART/uart.c ****     {
 289:../Dave/Generated/UART/uart.c ****       XMC_DMA_CH_Disable(ptr_gpdma, ptr_dma_config->dma_channel);
 290:../Dave/Generated/UART/uart.c ****       while(XMC_DMA_CH_IsEnabled(ptr_gpdma, ptr_dma_config->dma_channel)==true)
 291:../Dave/Generated/UART/uart.c ****       {
 292:../Dave/Generated/UART/uart.c ****       }
 293:../Dave/Generated/UART/uart.c ****       XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
 294:../Dave/Generated/UART/uart.c ****     }
 295:../Dave/Generated/UART/uart.c ****     XMC_USIC_CH_SetTransmitBufferStatus(handle->channel, XMC_USIC_CH_TBUF_STATUS_SET_IDLE);
 296:../Dave/Generated/UART/uart.c ****     break;
 297:../Dave/Generated/UART/uart.c **** #endif
 298:../Dave/Generated/UART/uart.c ****   default:
 299:../Dave/Generated/UART/uart.c ****     ret_stat = UART_STATUS_MODE_MISMATCH;
 1114              	 .loc 3 299 0
 1115 006a 0423     	 movs r3,#4
 1116 006c FB73     	 strb r3,[r7,#15]
 300:../Dave/Generated/UART/uart.c ****     break;
 1117              	 .loc 3 300 0
 1118 006e 00BF     	 nop
 1119              	.L40:
 301:../Dave/Generated/UART/uart.c ****   }
 302:../Dave/Generated/UART/uart.c ****   return ret_stat;
 1120              	 .loc 3 302 0
 1121 0070 FB7B     	 ldrb r3,[r7,#15]
 303:../Dave/Generated/UART/uart.c **** }
 1122              	 .loc 3 303 0
 1123 0072 1846     	 mov r0,r3
 1124 0074 1037     	 adds r7,r7,#16
 1125              	.LCFI120:
 1126              	 .cfi_def_cfa_offset 8
 1127 0076 BD46     	 mov sp,r7
 1128              	.LCFI121:
 1129              	 .cfi_def_cfa_register 13
 1130              	 
 1131 0078 80BD     	 pop {r7,pc}
 1132              	 .cfi_endproc
 1133              	.LFE281:
 1135 007a 00BF     	 .section .text.UART_AbortReceive,"ax",%progbits
 1136              	 .align 2
 1137              	 .global UART_AbortReceive
 1138              	 .thumb
 1139              	 .thumb_func
 1141              	UART_AbortReceive:
 1142              	.LFB282:
 304:../Dave/Generated/UART/uart.c **** #endif
 305:../Dave/Generated/UART/uart.c **** 
 306:../Dave/Generated/UART/uart.c **** #if (defined UART_RX_INTERRUPT_USED || defined UART_RX_DMA_USED)
 307:../Dave/Generated/UART/uart.c **** /*
 308:../Dave/Generated/UART/uart.c ****  * @brief Common function to abort ongoing reception.
 309:../Dave/Generated/UART/uart.c ****  *
 310:../Dave/Generated/UART/uart.c ****  * @param[in]  handle UART APP handle pointer of type UART_t*
 311:../Dave/Generated/UART/uart.c ****  *
 312:../Dave/Generated/UART/uart.c ****  * @return  UART_STATUS_t
 313:../Dave/Generated/UART/uart.c ****  *          UART_SUCCESS: If the reception is aborted.<BR>
 314:../Dave/Generated/UART/uart.c ****  *          UART_STATUS_FAILURE  : If the channel is not busy.<BR>
 315:../Dave/Generated/UART/uart.c ****  *          UART_STATUS_MODE_MISMATCH: If the configured mode is Direct.<BR>
 316:../Dave/Generated/UART/uart.c ****  *
 317:../Dave/Generated/UART/uart.c ****  */
 318:../Dave/Generated/UART/uart.c **** UART_STATUS_t UART_AbortReceive(const UART_t *const handle)
 319:../Dave/Generated/UART/uart.c **** {
 1143              	 .loc 3 319 0
 1144              	 .cfi_startproc
 1145              	 
 1146              	 
 1147 0000 80B5     	 push {r7,lr}
 1148              	.LCFI122:
 1149              	 .cfi_def_cfa_offset 8
 1150              	 .cfi_offset 7,-8
 1151              	 .cfi_offset 14,-4
 1152 0002 84B0     	 sub sp,sp,#16
 1153              	.LCFI123:
 1154              	 .cfi_def_cfa_offset 24
 1155 0004 00AF     	 add r7,sp,#0
 1156              	.LCFI124:
 1157              	 .cfi_def_cfa_register 7
 1158 0006 7860     	 str r0,[r7,#4]
 320:../Dave/Generated/UART/uart.c ****   UART_STATUS_t ret_stat = UART_STATUS_SUCCESS;
 1159              	 .loc 3 320 0
 1160 0008 0023     	 movs r3,#0
 1161 000a FB73     	 strb r3,[r7,#15]
 321:../Dave/Generated/UART/uart.c **** #ifdef UART_RX_DMA_USED
 322:../Dave/Generated/UART/uart.c ****   const UART_DMA_CONFIG_t * ptr_dma_config = handle->config->receive_dma_config;
 323:../Dave/Generated/UART/uart.c ****   XMC_DMA_t * ptr_gpdma = handle->config->global_dma->dma;
 324:../Dave/Generated/UART/uart.c **** #endif
 325:../Dave/Generated/UART/uart.c ****   XMC_ASSERT("UART_AbortReceive: UART APP handle invalid", ((handle != NULL)&&
 326:../Dave/Generated/UART/uart.c ****             (handle->runtime != NULL)))
 327:../Dave/Generated/UART/uart.c **** 
 328:../Dave/Generated/UART/uart.c ****   /*Reset the user buffer pointer to null*/
 329:../Dave/Generated/UART/uart.c ****   handle->runtime->rx_busy = false;
 1162              	 .loc 3 329 0
 1163 000c 7B68     	 ldr r3,[r7,#4]
 1164 000e 9B68     	 ldr r3,[r3,#8]
 1165 0010 0022     	 movs r2,#0
 1166 0012 5A76     	 strb r2,[r3,#25]
 330:../Dave/Generated/UART/uart.c ****   handle->runtime->rx_data = NULL;
 1167              	 .loc 3 330 0
 1168 0014 7B68     	 ldr r3,[r7,#4]
 1169 0016 9B68     	 ldr r3,[r3,#8]
 1170 0018 0022     	 movs r2,#0
 1171 001a 5A60     	 str r2,[r3,#4]
 331:../Dave/Generated/UART/uart.c ****   switch(handle->config->receive_mode)
 1172              	 .loc 3 331 0
 1173 001c 7B68     	 ldr r3,[r7,#4]
 1174 001e 5B68     	 ldr r3,[r3,#4]
 1175 0020 93F82A30 	 ldrb r3,[r3,#42]
 1176 0024 002B     	 cmp r3,#0
 1177 0026 15D1     	 bne .L50
 332:../Dave/Generated/UART/uart.c ****   {
 333:../Dave/Generated/UART/uart.c **** #ifdef UART_RX_INTERRUPT_USED
 334:../Dave/Generated/UART/uart.c ****   case UART_TRANSFER_MODE_INTERRUPT:
 335:../Dave/Generated/UART/uart.c ****     /*Disable the receive interrupts*/
 336:../Dave/Generated/UART/uart.c ****     if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 1178              	 .loc 3 336 0
 1179 0028 7B68     	 ldr r3,[r7,#4]
 1180 002a 5B68     	 ldr r3,[r3,#4]
 1181 002c 93F82C30 	 ldrb r3,[r3,#44]
 1182 0030 002B     	 cmp r3,#0
 1183 0032 07D0     	 beq .L46
 337:../Dave/Generated/UART/uart.c ****     {
 338:../Dave/Generated/UART/uart.c ****       XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,
 1184              	 .loc 3 338 0
 1185 0034 7B68     	 ldr r3,[r7,#4]
 1186 0036 1B68     	 ldr r3,[r3]
 1187 0038 1846     	 mov r0,r3
 1188 003a 4FF0C041 	 mov r1,#1610612736
 1189 003e FFF7FEFF 	 bl XMC_USIC_CH_RXFIFO_DisableEvent
 339:../Dave/Generated/UART/uart.c ****             ((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
 340:../Dave/Generated/UART/uart.c ****             (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));
 341:../Dave/Generated/UART/uart.c ****     }
 342:../Dave/Generated/UART/uart.c ****     else
 343:../Dave/Generated/UART/uart.c ****     {
 344:../Dave/Generated/UART/uart.c ****       XMC_UART_CH_DisableEvent(handle->channel,
 345:../Dave/Generated/UART/uart.c ****             ((uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE |
 346:../Dave/Generated/UART/uart.c ****             (uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE));
 347:../Dave/Generated/UART/uart.c ****     }
 348:../Dave/Generated/UART/uart.c ****     break;
 1190              	 .loc 3 348 0
 1191 0042 0AE0     	 b .L48
 1192              	.L46:
 344:../Dave/Generated/UART/uart.c ****             ((uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE |
 1193              	 .loc 3 344 0
 1194 0044 7B68     	 ldr r3,[r7,#4]
 1195 0046 1B68     	 ldr r3,[r3]
 1196 0048 1846     	 mov r0,r3
 1197 004a 4FF44041 	 mov r1,#49152
 1198 004e FFF7FEFF 	 bl XMC_UART_CH_DisableEvent
 1199              	 .loc 3 348 0
 1200 0052 02E0     	 b .L48
 1201              	.L50:
 349:../Dave/Generated/UART/uart.c **** #endif
 350:../Dave/Generated/UART/uart.c **** #ifdef UART_RX_DMA_USED
 351:../Dave/Generated/UART/uart.c ****   case UART_TRANSFER_MODE_DMA:
 352:../Dave/Generated/UART/uart.c ****     /*Disable the receive interrupts*/
 353:../Dave/Generated/UART/uart.c ****     if (XMC_DMA_CH_IsEnabled(ptr_gpdma, ptr_dma_config->dma_channel))
 354:../Dave/Generated/UART/uart.c ****     {
 355:../Dave/Generated/UART/uart.c ****       XMC_DMA_CH_Disable(ptr_gpdma, ptr_dma_config->dma_channel);
 356:../Dave/Generated/UART/uart.c ****       while(XMC_DMA_CH_IsEnabled(ptr_gpdma, ptr_dma_config->dma_channel)==true)
 357:../Dave/Generated/UART/uart.c ****       {
 358:../Dave/Generated/UART/uart.c ****       }
 359:../Dave/Generated/UART/uart.c ****       XMC_UART_CH_DisableEvent(handle->channel,
 360:../Dave/Generated/UART/uart.c ****             ((uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE |
 361:../Dave/Generated/UART/uart.c ****             (uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE));
 362:../Dave/Generated/UART/uart.c ****     }
 363:../Dave/Generated/UART/uart.c ****     break;
 364:../Dave/Generated/UART/uart.c **** #endif
 365:../Dave/Generated/UART/uart.c ****   default:
 366:../Dave/Generated/UART/uart.c ****     ret_stat = UART_STATUS_MODE_MISMATCH;
 1202              	 .loc 3 366 0
 1203 0054 0423     	 movs r3,#4
 1204 0056 FB73     	 strb r3,[r7,#15]
 367:../Dave/Generated/UART/uart.c ****     break;
 1205              	 .loc 3 367 0
 1206 0058 00BF     	 nop
 1207              	.L48:
 368:../Dave/Generated/UART/uart.c ****   }
 369:../Dave/Generated/UART/uart.c ****   return ret_stat;
 1208              	 .loc 3 369 0
 1209 005a FB7B     	 ldrb r3,[r7,#15]
 370:../Dave/Generated/UART/uart.c **** }
 1210              	 .loc 3 370 0
 1211 005c 1846     	 mov r0,r3
 1212 005e 1037     	 adds r7,r7,#16
 1213              	.LCFI125:
 1214              	 .cfi_def_cfa_offset 8
 1215 0060 BD46     	 mov sp,r7
 1216              	.LCFI126:
 1217              	 .cfi_def_cfa_register 13
 1218              	 
 1219 0062 80BD     	 pop {r7,pc}
 1220              	 .cfi_endproc
 1221              	.LFE282:
 1223              	 .section .text.UART_SetBaudrate,"ax",%progbits
 1224              	 .align 2
 1225              	 .global UART_SetBaudrate
 1226              	 .thumb
 1227              	 .thumb_func
 1229              	UART_SetBaudrate:
 1230              	.LFB283:
 371:../Dave/Generated/UART/uart.c **** #endif
 372:../Dave/Generated/UART/uart.c **** 
 373:../Dave/Generated/UART/uart.c **** /*
 374:../Dave/Generated/UART/uart.c ****  * @brief Changes the baudrate of UART channel.
 375:../Dave/Generated/UART/uart.c ****  *
 376:../Dave/Generated/UART/uart.c ****  * @param UART_t * Pointer to the UART APP handle.
 377:../Dave/Generated/UART/uart.c ****  * @param baud Value of new baudrate.
 378:../Dave/Generated/UART/uart.c ****  * @param oversampling Number of samples to be considered for each symbol. 16 is the standard value
 379:../Dave/Generated/UART/uart.c ****  *
 380:../Dave/Generated/UART/uart.c ****  * @return UART_STATUS_t UART_STATUS_SUCCESS if baudrate changed successfully.
 381:../Dave/Generated/UART/uart.c ****  *                       UART_STATUS_BUSY if the UART channel is busy.
 382:../Dave/Generated/UART/uart.c ****  *
 383:../Dave/Generated/UART/uart.c ****  * \par<b>Description:</b><br>
 384:../Dave/Generated/UART/uart.c ****  * The function stops the channel, calculates the clock divider values to achieve the desired baudr
 385:../Dave/Generated/UART/uart.c ****  * Sets the divider values and reconfigures the channel as per the configuration in the UI. The cha
 386:../Dave/Generated/UART/uart.c ****  * enabled at the end of configuration.
 387:../Dave/Generated/UART/uart.c ****  */
 388:../Dave/Generated/UART/uart.c **** UART_STATUS_t UART_SetBaudrate(const UART_t * handle, uint32_t baud, uint32_t oversampling)
 389:../Dave/Generated/UART/uart.c **** {
 1231              	 .loc 3 389 0
 1232              	 .cfi_startproc
 1233              	 
 1234              	 
 1235 0000 80B5     	 push {r7,lr}
 1236              	.LCFI127:
 1237              	 .cfi_def_cfa_offset 8
 1238              	 .cfi_offset 7,-8
 1239              	 .cfi_offset 14,-4
 1240 0002 86B0     	 sub sp,sp,#24
 1241              	.LCFI128:
 1242              	 .cfi_def_cfa_offset 32
 1243 0004 00AF     	 add r7,sp,#0
 1244              	.LCFI129:
 1245              	 .cfi_def_cfa_register 7
 1246 0006 F860     	 str r0,[r7,#12]
 1247 0008 B960     	 str r1,[r7,#8]
 1248 000a 7A60     	 str r2,[r7,#4]
 390:../Dave/Generated/UART/uart.c ****   UART_STATUS_t ret_stat = UART_STATUS_BUSY;
 1249              	 .loc 3 390 0
 1250 000c 0223     	 movs r3,#2
 1251 000e FB75     	 strb r3,[r7,#23]
 391:../Dave/Generated/UART/uart.c ****   const UART_TX_CONFIG_t * ptr_tx_conf = handle->config->tx_pin_config;
 1252              	 .loc 3 391 0
 1253 0010 FB68     	 ldr r3,[r7,#12]
 1254 0012 5B68     	 ldr r3,[r3,#4]
 1255 0014 5B6A     	 ldr r3,[r3,#36]
 1256 0016 3B61     	 str r3,[r7,#16]
 392:../Dave/Generated/UART/uart.c **** 
 393:../Dave/Generated/UART/uart.c ****   XMC_ASSERT("UART_SetBaudrate: UART APP handle invalid", ((handle != NULL)&&
 394:../Dave/Generated/UART/uart.c ****             ((handle->config != NULL) && (handle->runtime != NULL))))
 395:../Dave/Generated/UART/uart.c **** 
 396:../Dave/Generated/UART/uart.c ****   if ((handle->runtime->tx_busy == false) && (handle->runtime->rx_busy == false))
 1257              	 .loc 3 396 0
 1258 0018 FB68     	 ldr r3,[r7,#12]
 1259 001a 9B68     	 ldr r3,[r3,#8]
 1260 001c 1B7E     	 ldrb r3,[r3,#24]
 1261 001e DBB2     	 uxtb r3,r3
 1262 0020 83F00103 	 eor r3,r3,#1
 1263 0024 DBB2     	 uxtb r3,r3
 1264 0026 002B     	 cmp r3,#0
 1265 0028 4DD0     	 beq .L52
 1266              	 .loc 3 396 0 is_stmt 0 discriminator 1
 1267 002a FB68     	 ldr r3,[r7,#12]
 1268 002c 9B68     	 ldr r3,[r3,#8]
 1269 002e 5B7E     	 ldrb r3,[r3,#25]
 1270 0030 DBB2     	 uxtb r3,r3
 1271 0032 83F00103 	 eor r3,r3,#1
 1272 0036 DBB2     	 uxtb r3,r3
 1273 0038 002B     	 cmp r3,#0
 1274 003a 44D0     	 beq .L52
 397:../Dave/Generated/UART/uart.c ****   {
 398:../Dave/Generated/UART/uart.c ****     /* Set UART TX pin as input pin to avoid spikes on the pin.*/
 399:../Dave/Generated/UART/uart.c ****     if (handle->config->mode != UART_MODE_LOOPBACK)
 1275              	 .loc 3 399 0 is_stmt 1
 1276 003c FB68     	 ldr r3,[r7,#12]
 1277 003e 5B68     	 ldr r3,[r3,#4]
 1278 0040 93F82830 	 ldrb r3,[r3,#40]
 1279 0044 022B     	 cmp r3,#2
 1280 0046 08D0     	 beq .L53
 400:../Dave/Generated/UART/uart.c ****     {
 401:../Dave/Generated/UART/uart.c ****       XMC_GPIO_SetMode(ptr_tx_conf->port, ptr_tx_conf->pin, XMC_GPIO_MODE_INPUT_TRISTATE);
 1281              	 .loc 3 401 0
 1282 0048 3B69     	 ldr r3,[r7,#16]
 1283 004a 1A68     	 ldr r2,[r3]
 1284 004c 3B69     	 ldr r3,[r7,#16]
 1285 004e 1B79     	 ldrb r3,[r3,#4]
 1286 0050 1046     	 mov r0,r2
 1287 0052 1946     	 mov r1,r3
 1288 0054 0022     	 movs r2,#0
 1289 0056 FFF7FEFF 	 bl XMC_GPIO_SetMode
 1290              	.L53:
 402:../Dave/Generated/UART/uart.c ****     }
 403:../Dave/Generated/UART/uart.c ****     /* Stop the UART channel before changing the baudrate.*/
 404:../Dave/Generated/UART/uart.c ****     if (XMC_UART_CH_Stop(handle->channel) == XMC_UART_CH_STATUS_OK)
 1291              	 .loc 3 404 0
 1292 005a FB68     	 ldr r3,[r7,#12]
 1293 005c 1B68     	 ldr r3,[r3]
 1294 005e 1846     	 mov r0,r3
 1295 0060 FFF7FEFF 	 bl XMC_UART_CH_Stop
 1296 0064 0346     	 mov r3,r0
 1297 0066 002B     	 cmp r3,#0
 1298 0068 2BD1     	 bne .L54
 405:../Dave/Generated/UART/uart.c ****     {
 406:../Dave/Generated/UART/uart.c ****       /*Change the baudrate*/
 407:../Dave/Generated/UART/uart.c ****       ret_stat = (UART_STATUS_t)XMC_UART_CH_SetBaudrate(handle->channel, baud, oversampling);
 1299              	 .loc 3 407 0
 1300 006a FB68     	 ldr r3,[r7,#12]
 1301 006c 1B68     	 ldr r3,[r3]
 1302 006e 1846     	 mov r0,r3
 1303 0070 B968     	 ldr r1,[r7,#8]
 1304 0072 7A68     	 ldr r2,[r7,#4]
 1305 0074 FFF7FEFF 	 bl XMC_UART_CH_SetBaudrate
 1306 0078 0346     	 mov r3,r0
 1307 007a FB75     	 strb r3,[r7,#23]
 408:../Dave/Generated/UART/uart.c ****       /*Set the sample point if the baudrate is modified*/
 409:../Dave/Generated/UART/uart.c ****       if (ret_stat == UART_STATUS_SUCCESS)
 1308              	 .loc 3 409 0
 1309 007c FB7D     	 ldrb r3,[r7,#23]
 1310 007e 002B     	 cmp r3,#0
 1311 0080 08D1     	 bne .L55
 410:../Dave/Generated/UART/uart.c ****       {
 411:../Dave/Generated/UART/uart.c ****         XMC_UART_CH_SetSamplePoint(handle->channel, (uint32_t)(oversampling >> 1U)+1U);
 1312              	 .loc 3 411 0
 1313 0082 FB68     	 ldr r3,[r7,#12]
 1314 0084 1A68     	 ldr r2,[r3]
 1315 0086 7B68     	 ldr r3,[r7,#4]
 1316 0088 5B08     	 lsrs r3,r3,#1
 1317 008a 0133     	 adds r3,r3,#1
 1318 008c 1046     	 mov r0,r2
 1319 008e 1946     	 mov r1,r3
 1320 0090 FFF7FEFF 	 bl XMC_UART_CH_SetSamplePoint
 1321              	.L55:
 412:../Dave/Generated/UART/uart.c ****       }
 413:../Dave/Generated/UART/uart.c ****       /*Enable UART*/
 414:../Dave/Generated/UART/uart.c ****       XMC_UART_CH_Start(handle->channel);
 1322              	 .loc 3 414 0
 1323 0094 FB68     	 ldr r3,[r7,#12]
 1324 0096 1B68     	 ldr r3,[r3]
 1325 0098 1846     	 mov r0,r3
 1326 009a FFF7FEFF 	 bl XMC_UART_CH_Start
 415:../Dave/Generated/UART/uart.c ****       /* Initialize UART TX pin */
 416:../Dave/Generated/UART/uart.c ****       if (handle->config->mode != UART_MODE_LOOPBACK)
 1327              	 .loc 3 416 0
 1328 009e FB68     	 ldr r3,[r7,#12]
 1329 00a0 5B68     	 ldr r3,[r3,#4]
 1330 00a2 93F82830 	 ldrb r3,[r3,#40]
 1331 00a6 022B     	 cmp r3,#2
 1332 00a8 0DD0     	 beq .L52
 417:../Dave/Generated/UART/uart.c ****       {
 418:../Dave/Generated/UART/uart.c ****         XMC_GPIO_Init(ptr_tx_conf->port, ptr_tx_conf->pin, ptr_tx_conf->config);
 1333              	 .loc 3 418 0
 1334 00aa 3B69     	 ldr r3,[r7,#16]
 1335 00ac 1968     	 ldr r1,[r3]
 1336 00ae 3B69     	 ldr r3,[r7,#16]
 1337 00b0 1A79     	 ldrb r2,[r3,#4]
 1338 00b2 3B69     	 ldr r3,[r7,#16]
 1339 00b4 9B68     	 ldr r3,[r3,#8]
 1340 00b6 0846     	 mov r0,r1
 1341 00b8 1146     	 mov r1,r2
 1342 00ba 1A46     	 mov r2,r3
 1343 00bc FFF7FEFF 	 bl XMC_GPIO_Init
 1344 00c0 01E0     	 b .L52
 1345              	.L54:
 419:../Dave/Generated/UART/uart.c ****       }
 420:../Dave/Generated/UART/uart.c ****     }
 421:../Dave/Generated/UART/uart.c ****     else
 422:../Dave/Generated/UART/uart.c ****     {
 423:../Dave/Generated/UART/uart.c ****       ret_stat = UART_STATUS_BUSY;
 1346              	 .loc 3 423 0
 1347 00c2 0223     	 movs r3,#2
 1348 00c4 FB75     	 strb r3,[r7,#23]
 1349              	.L52:
 424:../Dave/Generated/UART/uart.c ****     }
 425:../Dave/Generated/UART/uart.c ****   }
 426:../Dave/Generated/UART/uart.c ****   return ret_stat;
 1350              	 .loc 3 426 0
 1351 00c6 FB7D     	 ldrb r3,[r7,#23]
 427:../Dave/Generated/UART/uart.c **** }
 1352              	 .loc 3 427 0
 1353 00c8 1846     	 mov r0,r3
 1354 00ca 1837     	 adds r7,r7,#24
 1355              	.LCFI130:
 1356              	 .cfi_def_cfa_offset 8
 1357 00cc BD46     	 mov sp,r7
 1358              	.LCFI131:
 1359              	 .cfi_def_cfa_register 13
 1360              	 
 1361 00ce 80BD     	 pop {r7,pc}
 1362              	 .cfi_endproc
 1363              	.LFE283:
 1365              	 .section .text.UART_StartTransmitIRQ,"ax",%progbits
 1366              	 .align 2
 1367              	 .global UART_StartTransmitIRQ
 1368              	 .thumb
 1369              	 .thumb_func
 1371              	UART_StartTransmitIRQ:
 1372              	.LFB284:
 428:../Dave/Generated/UART/uart.c **** 
 429:../Dave/Generated/UART/uart.c **** #ifdef UART_TX_INTERRUPT_USED
 430:../Dave/Generated/UART/uart.c **** /*
 431:../Dave/Generated/UART/uart.c ****  * @brief Registers a request for transmitting data over UART channel.
 432:../Dave/Generated/UART/uart.c ****  *
 433:../Dave/Generated/UART/uart.c ****  * @param[in]  UART_t*  UART APP handle pointer of type UART_t
 434:../Dave/Generated/UART/uart.c ****  * @param[in]  uint8_t* Pointer to data
 435:../Dave/Generated/UART/uart.c ****  * @param[in]  uint32_t Total no of words to be transmitted.
 436:../Dave/Generated/UART/uart.c ****  *
 437:../Dave/Generated/UART/uart.c ****  * @return  UART_STATUS_t UART_STATUS_SUCCESS if the request is accepted.
 438:../Dave/Generated/UART/uart.c ****  *                        UART_STATUS_BUSY if a transmission is in progress.
 439:../Dave/Generated/UART/uart.c ****  * Details of function:
 440:../Dave/Generated/UART/uart.c ****  * The data transmission is accomplished using transmit interrupt. User can configure
 441:../Dave/Generated/UART/uart.c ****  * a callback function in the APP UI. When the data is fully transmitted, the callback
 442:../Dave/Generated/UART/uart.c ****  * function will be executed. If transmit FIFO is enabled, the trigger limit is set to 0.
 443:../Dave/Generated/UART/uart.c ****  * So the transmit interrupt will be generated when all the data in FIFO is moved from FIFO.
 444:../Dave/Generated/UART/uart.c ****  *
 445:../Dave/Generated/UART/uart.c ****  * <i>Imp Note:</i> Return value should be validated by user to ensure that the
 446:../Dave/Generated/UART/uart.c ****  * request is registered.
 447:../Dave/Generated/UART/uart.c ****  *
 448:../Dave/Generated/UART/uart.c ****  *
 449:../Dave/Generated/UART/uart.c ****  */
 450:../Dave/Generated/UART/uart.c **** UART_STATUS_t UART_StartTransmitIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
 451:../Dave/Generated/UART/uart.c **** {
 1373              	 .loc 3 451 0
 1374              	 .cfi_startproc
 1375              	 
 1376              	 
 1377 0000 80B5     	 push {r7,lr}
 1378              	.LCFI132:
 1379              	 .cfi_def_cfa_offset 8
 1380              	 .cfi_offset 7,-8
 1381              	 .cfi_offset 14,-4
 1382 0002 86B0     	 sub sp,sp,#24
 1383              	.LCFI133:
 1384              	 .cfi_def_cfa_offset 32
 1385 0004 00AF     	 add r7,sp,#0
 1386              	.LCFI134:
 1387              	 .cfi_def_cfa_register 7
 1388 0006 F860     	 str r0,[r7,#12]
 1389 0008 B960     	 str r1,[r7,#8]
 1390 000a 7A60     	 str r2,[r7,#4]
 452:../Dave/Generated/UART/uart.c ****   UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
 1391              	 .loc 3 452 0
 1392 000c 0423     	 movs r3,#4
 1393 000e FB75     	 strb r3,[r7,#23]
 453:../Dave/Generated/UART/uart.c ****   UART_RUNTIME_t * ptr_runtime = handle->runtime;
 1394              	 .loc 3 453 0
 1395 0010 FB68     	 ldr r3,[r7,#12]
 1396 0012 9B68     	 ldr r3,[r3,#8]
 1397 0014 3B61     	 str r3,[r7,#16]
 454:../Dave/Generated/UART/uart.c **** 
 455:../Dave/Generated/UART/uart.c ****   XMC_ASSERT("UART_StartTransmitIRQ: UART APP handle invalid", ((handle != NULL)&&
 456:../Dave/Generated/UART/uart.c ****             (handle->runtime != NULL)))
 457:../Dave/Generated/UART/uart.c **** 
 458:../Dave/Generated/UART/uart.c ****   if (handle->config->transmit_mode == UART_TRANSFER_MODE_INTERRUPT)
 1398              	 .loc 3 458 0
 1399 0016 FB68     	 ldr r3,[r7,#12]
 1400 0018 5B68     	 ldr r3,[r3,#4]
 1401 001a 93F82930 	 ldrb r3,[r3,#41]
 1402 001e 002B     	 cmp r3,#0
 1403 0020 44D1     	 bne .L59
 459:../Dave/Generated/UART/uart.c ****   {
 460:../Dave/Generated/UART/uart.c ****     ret_stat = UART_STATUS_BUSY;
 1404              	 .loc 3 460 0
 1405 0022 0223     	 movs r3,#2
 1406 0024 FB75     	 strb r3,[r7,#23]
 461:../Dave/Generated/UART/uart.c ****     if (ptr_runtime->tx_busy == false)
 1407              	 .loc 3 461 0
 1408 0026 3B69     	 ldr r3,[r7,#16]
 1409 0028 1B7E     	 ldrb r3,[r3,#24]
 1410 002a DBB2     	 uxtb r3,r3
 1411 002c 83F00103 	 eor r3,r3,#1
 1412 0030 DBB2     	 uxtb r3,r3
 1413 0032 002B     	 cmp r3,#0
 1414 0034 3AD0     	 beq .L59
 462:../Dave/Generated/UART/uart.c ****     {
 463:../Dave/Generated/UART/uart.c ****       /*If there is no transmission in progress*/
 464:../Dave/Generated/UART/uart.c ****       if ((data_ptr != NULL) && (count > 0U))
 1415              	 .loc 3 464 0
 1416 0036 BB68     	 ldr r3,[r7,#8]
 1417 0038 002B     	 cmp r3,#0
 1418 003a 35D0     	 beq .L60
 1419              	 .loc 3 464 0 is_stmt 0 discriminator 1
 1420 003c 7B68     	 ldr r3,[r7,#4]
 1421 003e 002B     	 cmp r3,#0
 1422 0040 32D0     	 beq .L60
 465:../Dave/Generated/UART/uart.c ****       {
 466:../Dave/Generated/UART/uart.c ****         /*Obtain the address of data, size of data*/
 467:../Dave/Generated/UART/uart.c ****         ptr_runtime->tx_data = data_ptr;
 1423              	 .loc 3 467 0 is_stmt 1
 1424 0042 3B69     	 ldr r3,[r7,#16]
 1425 0044 BA68     	 ldr r2,[r7,#8]
 1426 0046 1A60     	 str r2,[r3]
 468:../Dave/Generated/UART/uart.c ****         ptr_runtime->tx_data_count = count;
 1427              	 .loc 3 468 0
 1428 0048 3B69     	 ldr r3,[r7,#16]
 1429 004a 7A68     	 ldr r2,[r7,#4]
 1430 004c 9A60     	 str r2,[r3,#8]
 469:../Dave/Generated/UART/uart.c ****         /*Initialize to first index and set the busy flag*/
 470:../Dave/Generated/UART/uart.c ****         ptr_runtime->tx_data_index = 0U;
 1431              	 .loc 3 470 0
 1432 004e 3B69     	 ldr r3,[r7,#16]
 1433 0050 0022     	 movs r2,#0
 1434 0052 DA60     	 str r2,[r3,#12]
 471:../Dave/Generated/UART/uart.c ****         ptr_runtime->tx_busy = true;
 1435              	 .loc 3 471 0
 1436 0054 3B69     	 ldr r3,[r7,#16]
 1437 0056 0122     	 movs r2,#1
 1438 0058 1A76     	 strb r2,[r3,#24]
 472:../Dave/Generated/UART/uart.c **** 
 473:../Dave/Generated/UART/uart.c ****         /*Enable the transmit buffer event*/
 474:../Dave/Generated/UART/uart.c ****         if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 1439              	 .loc 3 474 0
 1440 005a FB68     	 ldr r3,[r7,#12]
 1441 005c 5B68     	 ldr r3,[r3,#4]
 1442 005e 93F82B30 	 ldrb r3,[r3,#43]
 1443 0062 002B     	 cmp r3,#0
 1444 0064 0CD0     	 beq .L61
 475:../Dave/Generated/UART/uart.c ****         {
 476:../Dave/Generated/UART/uart.c ****           /*Clear the transmit FIFO*/
 477:../Dave/Generated/UART/uart.c ****           XMC_USIC_CH_TXFIFO_Flush(handle->channel);
 1445              	 .loc 3 477 0
 1446 0066 FB68     	 ldr r3,[r7,#12]
 1447 0068 1B68     	 ldr r3,[r3]
 1448 006a 1846     	 mov r0,r3
 1449 006c FFF7FEFF 	 bl XMC_USIC_CH_TXFIFO_Flush
 478:../Dave/Generated/UART/uart.c ****           /*Enable transmit buffer interrupt*/
 479:../Dave/Generated/UART/uart.c ****           XMC_USIC_CH_TXFIFO_EnableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_ST
 1450              	 .loc 3 479 0
 1451 0070 FB68     	 ldr r3,[r7,#12]
 1452 0072 1B68     	 ldr r3,[r3]
 1453 0074 1846     	 mov r0,r3
 1454 0076 4FF08041 	 mov r1,#1073741824
 1455 007a FFF7FEFF 	 bl XMC_USIC_CH_TXFIFO_EnableEvent
 1456 007e 06E0     	 b .L62
 1457              	.L61:
 480:../Dave/Generated/UART/uart.c ****         }
 481:../Dave/Generated/UART/uart.c ****         else
 482:../Dave/Generated/UART/uart.c ****         {
 483:../Dave/Generated/UART/uart.c ****           XMC_USIC_CH_EnableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
 1458              	 .loc 3 483 0
 1459 0080 FB68     	 ldr r3,[r7,#12]
 1460 0082 1B68     	 ldr r3,[r3]
 1461 0084 1846     	 mov r0,r3
 1462 0086 4FF40051 	 mov r1,#8192
 1463 008a FFF7FEFF 	 bl XMC_USIC_CH_EnableEvent
 1464              	.L62:
 484:../Dave/Generated/UART/uart.c ****         }
 485:../Dave/Generated/UART/uart.c ****         ret_stat = UART_STATUS_SUCCESS;
 1465              	 .loc 3 485 0
 1466 008e 0023     	 movs r3,#0
 1467 0090 FB75     	 strb r3,[r7,#23]
 486:../Dave/Generated/UART/uart.c ****         /*Trigger the transmit buffer interrupt*/
 487:../Dave/Generated/UART/uart.c ****         XMC_USIC_CH_TriggerServiceRequest(handle->channel, (uint32_t)handle->config->tx_sr);
 1468              	 .loc 3 487 0
 1469 0092 FB68     	 ldr r3,[r7,#12]
 1470 0094 1A68     	 ldr r2,[r3]
 1471 0096 FB68     	 ldr r3,[r7,#12]
 1472 0098 5B68     	 ldr r3,[r3,#4]
 1473 009a 93F82D30 	 ldrb r3,[r3,#45]
 1474 009e 1046     	 mov r0,r2
 1475 00a0 1946     	 mov r1,r3
 1476 00a2 FFF7FEFF 	 bl XMC_USIC_CH_TriggerServiceRequest
 1477 00a6 01E0     	 b .L59
 1478              	.L60:
 488:../Dave/Generated/UART/uart.c ****       }
 489:../Dave/Generated/UART/uart.c ****       else
 490:../Dave/Generated/UART/uart.c ****       {
 491:../Dave/Generated/UART/uart.c ****         ret_stat = UART_STATUS_BUFFER_INVALID;
 1479              	 .loc 3 491 0
 1480 00a8 0323     	 movs r3,#3
 1481 00aa FB75     	 strb r3,[r7,#23]
 1482              	.L59:
 492:../Dave/Generated/UART/uart.c ****       }
 493:../Dave/Generated/UART/uart.c ****     }
 494:../Dave/Generated/UART/uart.c ****   }
 495:../Dave/Generated/UART/uart.c ****   return ret_stat;
 1483              	 .loc 3 495 0
 1484 00ac FB7D     	 ldrb r3,[r7,#23]
 496:../Dave/Generated/UART/uart.c **** }
 1485              	 .loc 3 496 0
 1486 00ae 1846     	 mov r0,r3
 1487 00b0 1837     	 adds r7,r7,#24
 1488              	.LCFI135:
 1489              	 .cfi_def_cfa_offset 8
 1490 00b2 BD46     	 mov sp,r7
 1491              	.LCFI136:
 1492              	 .cfi_def_cfa_register 13
 1493              	 
 1494 00b4 80BD     	 pop {r7,pc}
 1495              	 .cfi_endproc
 1496              	.LFE284:
 1498 00b6 00BF     	 .section .text.UART_StartReceiveIRQ,"ax",%progbits
 1499              	 .align 2
 1500              	 .global UART_StartReceiveIRQ
 1501              	 .thumb
 1502              	 .thumb_func
 1504              	UART_StartReceiveIRQ:
 1505              	.LFB285:
 497:../Dave/Generated/UART/uart.c **** #endif
 498:../Dave/Generated/UART/uart.c **** 
 499:../Dave/Generated/UART/uart.c **** #ifdef UART_RX_INTERRUPT_USED
 500:../Dave/Generated/UART/uart.c **** /*
 501:../Dave/Generated/UART/uart.c ****  * @brief Registers a request to receive data over UART channel.
 502:../Dave/Generated/UART/uart.c ****  *
 503:../Dave/Generated/UART/uart.c ****  * @param[in]  UART_t* UART APP handle pointer of type UART_t
 504:../Dave/Generated/UART/uart.c ****  * @param[in]  uint8_t*  Pointer to data array
 505:../Dave/Generated/UART/uart.c ****  * @param[in]  uint32_t  Total no of bytes to be read.
 506:../Dave/Generated/UART/uart.c ****  *
 507:../Dave/Generated/UART/uart.c ****  * @return  UART_STATUS_t UART_STATUS_SUCCESS if the request is accepted.
 508:../Dave/Generated/UART/uart.c ****  *                        UART_STATUS_BUSY if a reception is in progress.
 509:../Dave/Generated/UART/uart.c ****  * Details of function:
 510:../Dave/Generated/UART/uart.c ****  * This function registers the receive request by configuring the UART
 511:../Dave/Generated/UART/uart.c ****  * receive FIFO/Standard buffer (depending on the user configuration). The data
 512:../Dave/Generated/UART/uart.c ****  * is received asynchronously. When the requested number of data bytes are received,
 513:../Dave/Generated/UART/uart.c ****  * optionally, the user configured callback function will be executed. If a callback
 514:../Dave/Generated/UART/uart.c ****  * function is not configured on the APP UI, the user has to poll for the status of
 515:../Dave/Generated/UART/uart.c ****  * rx_busy variable of the APP handle structure.
 516:../Dave/Generated/UART/uart.c ****  *
 517:../Dave/Generated/UART/uart.c ****  * <i>Imp Note:</i> Return value should be validated by user to ensure that the
 518:../Dave/Generated/UART/uart.c ****  * request is registered.
 519:../Dave/Generated/UART/uart.c ****  *
 520:../Dave/Generated/UART/uart.c ****  *
 521:../Dave/Generated/UART/uart.c ****  */
 522:../Dave/Generated/UART/uart.c **** UART_STATUS_t UART_StartReceiveIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
 523:../Dave/Generated/UART/uart.c **** {
 1506              	 .loc 3 523 0
 1507              	 .cfi_startproc
 1508              	 
 1509              	 
 1510 0000 80B5     	 push {r7,lr}
 1511              	.LCFI137:
 1512              	 .cfi_def_cfa_offset 8
 1513              	 .cfi_offset 7,-8
 1514              	 .cfi_offset 14,-4
 1515 0002 86B0     	 sub sp,sp,#24
 1516              	.LCFI138:
 1517              	 .cfi_def_cfa_offset 32
 1518 0004 00AF     	 add r7,sp,#0
 1519              	.LCFI139:
 1520              	 .cfi_def_cfa_register 7
 1521 0006 F860     	 str r0,[r7,#12]
 1522 0008 B960     	 str r1,[r7,#8]
 1523 000a 7A60     	 str r2,[r7,#4]
 524:../Dave/Generated/UART/uart.c ****   UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
 1524              	 .loc 3 524 0
 1525 000c 0423     	 movs r3,#4
 1526 000e FB75     	 strb r3,[r7,#23]
 525:../Dave/Generated/UART/uart.c ****   UART_RUNTIME_t * ptr_runtime = handle->runtime;
 1527              	 .loc 3 525 0
 1528 0010 FB68     	 ldr r3,[r7,#12]
 1529 0012 9B68     	 ldr r3,[r3,#8]
 1530 0014 3B61     	 str r3,[r7,#16]
 526:../Dave/Generated/UART/uart.c **** 
 527:../Dave/Generated/UART/uart.c ****   XMC_ASSERT("UART_StartReceiveIRQ: UART APP handle invalid", ((handle != NULL)&&
 528:../Dave/Generated/UART/uart.c ****             (handle->runtime != NULL)))
 529:../Dave/Generated/UART/uart.c **** 
 530:../Dave/Generated/UART/uart.c ****   if (handle->config->receive_mode == UART_TRANSFER_MODE_INTERRUPT)
 1531              	 .loc 3 530 0
 1532 0016 FB68     	 ldr r3,[r7,#12]
 1533 0018 5B68     	 ldr r3,[r3,#4]
 1534 001a 93F82A30 	 ldrb r3,[r3,#42]
 1535 001e 002B     	 cmp r3,#0
 1536 0020 3ED1     	 bne .L65
 531:../Dave/Generated/UART/uart.c ****   {
 532:../Dave/Generated/UART/uart.c ****     ret_stat = UART_STATUS_BUSY;
 1537              	 .loc 3 532 0
 1538 0022 0223     	 movs r3,#2
 1539 0024 FB75     	 strb r3,[r7,#23]
 533:../Dave/Generated/UART/uart.c ****     if (ptr_runtime->rx_busy == false)
 1540              	 .loc 3 533 0
 1541 0026 3B69     	 ldr r3,[r7,#16]
 1542 0028 5B7E     	 ldrb r3,[r3,#25]
 1543 002a DBB2     	 uxtb r3,r3
 1544 002c 83F00103 	 eor r3,r3,#1
 1545 0030 DBB2     	 uxtb r3,r3
 1546 0032 002B     	 cmp r3,#0
 1547 0034 34D0     	 beq .L65
 534:../Dave/Generated/UART/uart.c ****     {
 535:../Dave/Generated/UART/uart.c ****       /*If no active reception in progress*/
 536:../Dave/Generated/UART/uart.c ****       if ((data_ptr != NULL) && (count > 0U))
 1548              	 .loc 3 536 0
 1549 0036 BB68     	 ldr r3,[r7,#8]
 1550 0038 002B     	 cmp r3,#0
 1551 003a 2FD0     	 beq .L66
 1552              	 .loc 3 536 0 is_stmt 0 discriminator 1
 1553 003c 7B68     	 ldr r3,[r7,#4]
 1554 003e 002B     	 cmp r3,#0
 1555 0040 2CD0     	 beq .L66
 537:../Dave/Generated/UART/uart.c ****       {
 538:../Dave/Generated/UART/uart.c ****         /*Obtain the address of data buffer and
 539:../Dave/Generated/UART/uart.c ****          * number of data bytes to be received*/
 540:../Dave/Generated/UART/uart.c ****         ptr_runtime->rx_data = data_ptr;
 1556              	 .loc 3 540 0 is_stmt 1
 1557 0042 3B69     	 ldr r3,[r7,#16]
 1558 0044 BA68     	 ldr r2,[r7,#8]
 1559 0046 5A60     	 str r2,[r3,#4]
 541:../Dave/Generated/UART/uart.c ****         ptr_runtime->rx_data_count = count;
 1560              	 .loc 3 541 0
 1561 0048 3B69     	 ldr r3,[r7,#16]
 1562 004a 7A68     	 ldr r2,[r7,#4]
 1563 004c 1A61     	 str r2,[r3,#16]
 542:../Dave/Generated/UART/uart.c ****         ptr_runtime->rx_busy = true;
 1564              	 .loc 3 542 0
 1565 004e 3B69     	 ldr r3,[r7,#16]
 1566 0050 0122     	 movs r2,#1
 1567 0052 5A76     	 strb r2,[r3,#25]
 543:../Dave/Generated/UART/uart.c ****         ptr_runtime->rx_data_index = 0U;
 1568              	 .loc 3 543 0
 1569 0054 3B69     	 ldr r3,[r7,#16]
 1570 0056 0022     	 movs r2,#0
 1571 0058 5A61     	 str r2,[r3,#20]
 544:../Dave/Generated/UART/uart.c **** 
 545:../Dave/Generated/UART/uart.c ****         if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 1572              	 .loc 3 545 0
 1573 005a FB68     	 ldr r3,[r7,#12]
 1574 005c 5B68     	 ldr r3,[r3,#4]
 1575 005e 93F82C30 	 ldrb r3,[r3,#44]
 1576 0062 002B     	 cmp r3,#0
 1577 0064 10D0     	 beq .L67
 546:../Dave/Generated/UART/uart.c ****         {
 547:../Dave/Generated/UART/uart.c ****           /*Clear the receive FIFO, configure the trigger lime
 548:../Dave/Generated/UART/uart.c ****            * and enable the receive events*/
 549:../Dave/Generated/UART/uart.c ****           XMC_USIC_CH_RXFIFO_Flush(handle->channel);
 1578              	 .loc 3 549 0
 1579 0066 FB68     	 ldr r3,[r7,#12]
 1580 0068 1B68     	 ldr r3,[r3]
 1581 006a 1846     	 mov r0,r3
 1582 006c FFF7FEFF 	 bl XMC_USIC_CH_RXFIFO_Flush
 550:../Dave/Generated/UART/uart.c **** 
 551:../Dave/Generated/UART/uart.c ****           /*Configure the FIFO trigger limit based on the required data size*/
 552:../Dave/Generated/UART/uart.c ****           UART_lReconfigureRxFIFO(handle, count);
 1583              	 .loc 3 552 0
 1584 0070 F868     	 ldr r0,[r7,#12]
 1585 0072 7968     	 ldr r1,[r7,#4]
 1586 0074 FFF7FEFF 	 bl UART_lReconfigureRxFIFO
 553:../Dave/Generated/UART/uart.c **** 
 554:../Dave/Generated/UART/uart.c ****           XMC_USIC_CH_RXFIFO_EnableEvent(handle->channel,
 1587              	 .loc 3 554 0
 1588 0078 FB68     	 ldr r3,[r7,#12]
 1589 007a 1B68     	 ldr r3,[r3]
 1590 007c 1846     	 mov r0,r3
 1591 007e 4FF0C041 	 mov r1,#1610612736
 1592 0082 FFF7FEFF 	 bl XMC_USIC_CH_RXFIFO_EnableEvent
 1593 0086 06E0     	 b .L68
 1594              	.L67:
 555:../Dave/Generated/UART/uart.c ****             (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
 556:../Dave/Generated/UART/uart.c ****             (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));
 557:../Dave/Generated/UART/uart.c ****         }
 558:../Dave/Generated/UART/uart.c ****         else
 559:../Dave/Generated/UART/uart.c ****         {
 560:../Dave/Generated/UART/uart.c ****           XMC_USIC_CH_EnableEvent(handle->channel,
 1595              	 .loc 3 560 0
 1596 0088 FB68     	 ldr r3,[r7,#12]
 1597 008a 1B68     	 ldr r3,[r3]
 1598 008c 1846     	 mov r0,r3
 1599 008e 4FF44041 	 mov r1,#49152
 1600 0092 FFF7FEFF 	 bl XMC_USIC_CH_EnableEvent
 1601              	.L68:
 561:../Dave/Generated/UART/uart.c ****           (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE | (uint32_t)XMC_USIC_CH_EVENT_ALT
 562:../Dave/Generated/UART/uart.c ****         }
 563:../Dave/Generated/UART/uart.c ****         ret_stat = UART_STATUS_SUCCESS;
 1602              	 .loc 3 563 0
 1603 0096 0023     	 movs r3,#0
 1604 0098 FB75     	 strb r3,[r7,#23]
 1605 009a 01E0     	 b .L65
 1606              	.L66:
 564:../Dave/Generated/UART/uart.c ****       }
 565:../Dave/Generated/UART/uart.c ****       else
 566:../Dave/Generated/UART/uart.c ****       {
 567:../Dave/Generated/UART/uart.c ****         ret_stat = UART_STATUS_BUFFER_INVALID;
 1607              	 .loc 3 567 0
 1608 009c 0323     	 movs r3,#3
 1609 009e FB75     	 strb r3,[r7,#23]
 1610              	.L65:
 568:../Dave/Generated/UART/uart.c ****       }
 569:../Dave/Generated/UART/uart.c ****     }
 570:../Dave/Generated/UART/uart.c ****   }
 571:../Dave/Generated/UART/uart.c ****   return ret_stat;
 1611              	 .loc 3 571 0
 1612 00a0 FB7D     	 ldrb r3,[r7,#23]
 572:../Dave/Generated/UART/uart.c **** }
 1613              	 .loc 3 572 0
 1614 00a2 1846     	 mov r0,r3
 1615 00a4 1837     	 adds r7,r7,#24
 1616              	.LCFI140:
 1617              	 .cfi_def_cfa_offset 8
 1618 00a6 BD46     	 mov sp,r7
 1619              	.LCFI141:
 1620              	 .cfi_def_cfa_register 13
 1621              	 
 1622 00a8 80BD     	 pop {r7,pc}
 1623              	 .cfi_endproc
 1624              	.LFE285:
 1626 00aa 00BF     	 .section .text.UART_lTransmitHandler,"ax",%progbits
 1627              	 .align 2
 1628              	 .global UART_lTransmitHandler
 1629              	 .thumb
 1630              	 .thumb_func
 1632              	UART_lTransmitHandler:
 1633              	.LFB286:
 573:../Dave/Generated/UART/uart.c **** #endif
 574:../Dave/Generated/UART/uart.c **** 
 575:../Dave/Generated/UART/uart.c **** #ifdef UART_TX_DMA_USED
 576:../Dave/Generated/UART/uart.c **** /*
 577:../Dave/Generated/UART/uart.c ****  * @brief Registers a request for transmitting data over UART channel using DMA.
 578:../Dave/Generated/UART/uart.c ****  *
 579:../Dave/Generated/UART/uart.c ****  * @param[in]  UART_t*  UART APP handle pointer of type UART_t
 580:../Dave/Generated/UART/uart.c ****  * @param[in]  uint8_t* Pointer to data
 581:../Dave/Generated/UART/uart.c ****  * @param[in]  uint32_t Total no of words to be transmitted.
 582:../Dave/Generated/UART/uart.c ****  *
 583:../Dave/Generated/UART/uart.c ****  * @return  UART_STATUS_t UART_STATUS_SUCCESS if the request is accepted.
 584:../Dave/Generated/UART/uart.c ****  *                        UART_STATUS_BUSY if a transmission is in progress.
 585:../Dave/Generated/UART/uart.c ****  * Details of function:
 586:../Dave/Generated/UART/uart.c ****  * The data transmission is accomplished using a DMA channel. User can configure
 587:../Dave/Generated/UART/uart.c ****  * a callback function in the APP UI. When the data is fully transmitted, the callback
 588:../Dave/Generated/UART/uart.c ****  * function will be executed.
 589:../Dave/Generated/UART/uart.c ****  * <i>Imp Note:</i> Return value should be validated by user to ensure that the
 590:../Dave/Generated/UART/uart.c ****  * request is registered.
 591:../Dave/Generated/UART/uart.c ****  *
 592:../Dave/Generated/UART/uart.c ****  *
 593:../Dave/Generated/UART/uart.c ****  */
 594:../Dave/Generated/UART/uart.c **** UART_STATUS_t UART_StartTransmitDMA(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
 595:../Dave/Generated/UART/uart.c **** {
 596:../Dave/Generated/UART/uart.c ****   UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
 597:../Dave/Generated/UART/uart.c ****   UART_RUNTIME_t * ptr_runtime = handle->runtime;
 598:../Dave/Generated/UART/uart.c ****   const UART_DMA_CONFIG_t * ptr_dma_config = handle->config->transmit_dma_config;
 599:../Dave/Generated/UART/uart.c ****   XMC_DMA_t * ptr_gpdma = handle->config->global_dma->dma;
 600:../Dave/Generated/UART/uart.c **** 
 601:../Dave/Generated/UART/uart.c ****   XMC_ASSERT("UART_StartTransmitDMA: UART APP handle invalid", (((handle != NULL)&&
 602:../Dave/Generated/UART/uart.c ****             (handle->runtime != NULL))&&(handle->config != NULL)))
 603:../Dave/Generated/UART/uart.c **** 
 604:../Dave/Generated/UART/uart.c ****   if (handle->config->transmit_mode == UART_TRANSFER_MODE_DMA)
 605:../Dave/Generated/UART/uart.c ****   {
 606:../Dave/Generated/UART/uart.c ****     ret_stat = UART_STATUS_BUSY;
 607:../Dave/Generated/UART/uart.c ****     if (ptr_runtime->tx_busy == false)
 608:../Dave/Generated/UART/uart.c ****     {
 609:../Dave/Generated/UART/uart.c ****       /*If there is no transmission in progress*/
 610:../Dave/Generated/UART/uart.c ****       if ((data_ptr != NULL) && ((count > 0U) &&(count <= UART_DMA_MAXCOUNT)))
 611:../Dave/Generated/UART/uart.c ****       {
 612:../Dave/Generated/UART/uart.c ****         /*Obtain the address of data, size of data*/
 613:../Dave/Generated/UART/uart.c ****         ptr_runtime->tx_data = data_ptr;
 614:../Dave/Generated/UART/uart.c ****         ptr_runtime->tx_data_count = count;
 615:../Dave/Generated/UART/uart.c ****         /*Initialize to first index and set the busy flag*/
 616:../Dave/Generated/UART/uart.c ****         ptr_runtime->tx_data_index = 0U;
 617:../Dave/Generated/UART/uart.c ****         ptr_runtime->tx_busy = true;
 618:../Dave/Generated/UART/uart.c **** 
 619:../Dave/Generated/UART/uart.c ****         /*Enable transmit event generation*/
 620:../Dave/Generated/UART/uart.c ****         XMC_UART_CH_EnableEvent(handle->channel, (uint32_t)XMC_UART_CH_EVENT_TRANSMIT_BUFFER);
 621:../Dave/Generated/UART/uart.c ****         ret_stat = UART_STATUS_SUCCESS;
 622:../Dave/Generated/UART/uart.c **** 
 623:../Dave/Generated/UART/uart.c ****         /*Enable DMA channel*/
 624:../Dave/Generated/UART/uart.c ****         XMC_DMA_CH_SetBlockSize(ptr_gpdma, ptr_dma_config->dma_channel, count);
 625:../Dave/Generated/UART/uart.c ****         XMC_DMA_CH_SetSourceAddress(ptr_gpdma, ptr_dma_config->dma_channel, (uint32_t)data_ptr);
 626:../Dave/Generated/UART/uart.c ****         XMC_DMA_CH_SetDestinationAddress(ptr_gpdma, ptr_dma_config->dma_channel,
 627:../Dave/Generated/UART/uart.c ****                                          (uint32_t)&(handle->channel->TBUF[0]));
 628:../Dave/Generated/UART/uart.c ****         XMC_DMA_CH_Enable(ptr_gpdma, ptr_dma_config->dma_channel);
 629:../Dave/Generated/UART/uart.c ****       }
 630:../Dave/Generated/UART/uart.c ****       else
 631:../Dave/Generated/UART/uart.c ****       {
 632:../Dave/Generated/UART/uart.c ****         ret_stat = UART_STATUS_BUFFER_INVALID;
 633:../Dave/Generated/UART/uart.c ****       }
 634:../Dave/Generated/UART/uart.c ****     }
 635:../Dave/Generated/UART/uart.c ****   }
 636:../Dave/Generated/UART/uart.c ****   return ret_stat;
 637:../Dave/Generated/UART/uart.c **** }
 638:../Dave/Generated/UART/uart.c **** #endif
 639:../Dave/Generated/UART/uart.c **** 
 640:../Dave/Generated/UART/uart.c **** #ifdef UART_RX_DMA_USED
 641:../Dave/Generated/UART/uart.c **** /*
 642:../Dave/Generated/UART/uart.c ****  * @brief Registers a request to receive data over UART channel using DMA.
 643:../Dave/Generated/UART/uart.c ****  *
 644:../Dave/Generated/UART/uart.c ****  * @param[in]  UART_t* UART APP handle pointer of type UART_t
 645:../Dave/Generated/UART/uart.c ****  * @param[in]  uint8_t*  Pointer to data array
 646:../Dave/Generated/UART/uart.c ****  * @param[in]  uint32_t  Total no of bytes to be read.
 647:../Dave/Generated/UART/uart.c ****  *
 648:../Dave/Generated/UART/uart.c ****  * @return  UART_STATUS_t UART_STATUS_SUCCESS if the request is accepted.
 649:../Dave/Generated/UART/uart.c ****  *                        UART_STATUS_BUSY if a reception is in progress.
 650:../Dave/Generated/UART/uart.c ****  * Details of function:
 651:../Dave/Generated/UART/uart.c ****  * This function registers the receive request by configuring the UART
 652:../Dave/Generated/UART/uart.c ****  * receive Standard buffer and the DMA channel. The data
 653:../Dave/Generated/UART/uart.c ****  * is received asynchronously. When the requested number of data bytes are received,
 654:../Dave/Generated/UART/uart.c ****  * optionally, the user configured callback function will be executed.
 655:../Dave/Generated/UART/uart.c ****  *
 656:../Dave/Generated/UART/uart.c ****  * <i>Imp Note:</i> Return value should be validated by user to ensure that the
 657:../Dave/Generated/UART/uart.c ****  * request is registered.
 658:../Dave/Generated/UART/uart.c ****  *
 659:../Dave/Generated/UART/uart.c ****  *
 660:../Dave/Generated/UART/uart.c ****  */
 661:../Dave/Generated/UART/uart.c **** UART_STATUS_t UART_StartReceiveDMA(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
 662:../Dave/Generated/UART/uart.c **** {
 663:../Dave/Generated/UART/uart.c ****   UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
 664:../Dave/Generated/UART/uart.c ****   UART_RUNTIME_t * ptr_runtime = handle->runtime;
 665:../Dave/Generated/UART/uart.c ****   const UART_DMA_CONFIG_t * ptr_dma_config = handle->config->receive_dma_config;
 666:../Dave/Generated/UART/uart.c ****   XMC_DMA_t * ptr_gpdma = handle->config->global_dma->dma;
 667:../Dave/Generated/UART/uart.c **** 
 668:../Dave/Generated/UART/uart.c ****   XMC_ASSERT("UART_StartReceiveDMA: UART APP handle invalid", (((handle != NULL)&&
 669:../Dave/Generated/UART/uart.c ****             (handle->runtime != NULL)) && (handle->config != NULL)))
 670:../Dave/Generated/UART/uart.c **** 
 671:../Dave/Generated/UART/uart.c ****   if (handle->config->receive_mode == UART_TRANSFER_MODE_DMA)
 672:../Dave/Generated/UART/uart.c ****   {
 673:../Dave/Generated/UART/uart.c ****     ret_stat = UART_STATUS_BUSY;
 674:../Dave/Generated/UART/uart.c ****     if (ptr_runtime->rx_busy == false)
 675:../Dave/Generated/UART/uart.c ****     {
 676:../Dave/Generated/UART/uart.c ****       /*If no active reception in progress*/
 677:../Dave/Generated/UART/uart.c ****       if ((data_ptr != NULL) && ((count > 0U) && (count <= UART_DMA_MAXCOUNT)))
 678:../Dave/Generated/UART/uart.c ****       {
 679:../Dave/Generated/UART/uart.c ****         /*Obtain the address of data buffer and
 680:../Dave/Generated/UART/uart.c ****          * number of data bytes to be received*/
 681:../Dave/Generated/UART/uart.c ****         ptr_runtime->rx_data = data_ptr;
 682:../Dave/Generated/UART/uart.c ****         ptr_runtime->rx_data_count = count;
 683:../Dave/Generated/UART/uart.c ****         ptr_runtime->rx_busy = true;
 684:../Dave/Generated/UART/uart.c ****         ptr_runtime->rx_data_index = 0U;
 685:../Dave/Generated/UART/uart.c **** 
 686:../Dave/Generated/UART/uart.c ****         XMC_USIC_CH_EnableEvent(handle->channel,
 687:../Dave/Generated/UART/uart.c ****           (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE | (uint32_t)XMC_USIC_CH_EVENT_ALT
 688:../Dave/Generated/UART/uart.c ****         ret_stat = UART_STATUS_SUCCESS;
 689:../Dave/Generated/UART/uart.c **** 
 690:../Dave/Generated/UART/uart.c ****         /*Enable DMA channel*/
 691:../Dave/Generated/UART/uart.c ****         XMC_DMA_CH_SetBlockSize(ptr_gpdma, ptr_dma_config->dma_channel, count);
 692:../Dave/Generated/UART/uart.c ****         XMC_DMA_CH_SetSourceAddress(ptr_gpdma, ptr_dma_config->dma_channel, (uint32_t)&(handle->cha
 693:../Dave/Generated/UART/uart.c ****         XMC_DMA_CH_SetDestinationAddress(ptr_gpdma, ptr_dma_config->dma_channel, (uint32_t)data_ptr
 694:../Dave/Generated/UART/uart.c ****         XMC_DMA_CH_Enable(ptr_gpdma, ptr_dma_config->dma_channel);
 695:../Dave/Generated/UART/uart.c ****       }
 696:../Dave/Generated/UART/uart.c ****       else
 697:../Dave/Generated/UART/uart.c ****       {
 698:../Dave/Generated/UART/uart.c ****         ret_stat = UART_STATUS_BUFFER_INVALID;
 699:../Dave/Generated/UART/uart.c ****       }
 700:../Dave/Generated/UART/uart.c ****     }
 701:../Dave/Generated/UART/uart.c ****   }
 702:../Dave/Generated/UART/uart.c ****   return ret_stat;
 703:../Dave/Generated/UART/uart.c **** }
 704:../Dave/Generated/UART/uart.c **** #endif
 705:../Dave/Generated/UART/uart.c **** 
 706:../Dave/Generated/UART/uart.c **** #ifdef UART_TX_DIRECT_USED
 707:../Dave/Generated/UART/uart.c **** /*
 708:../Dave/Generated/UART/uart.c ****  * Polling method to transmit data.
 709:../Dave/Generated/UART/uart.c ****  * @param[in] UART_t* handle UART APP handle pointer
 710:../Dave/Generated/UART/uart.c ****  * @param[in] uint8_t*  Pointer to data array
 711:../Dave/Generated/UART/uart.c ****  * @param[in] uint32_t number of bytes to be transmitted.
 712:../Dave/Generated/UART/uart.c ****  *
 713:../Dave/Generated/UART/uart.c ****  * @return UART_STATUS_t Status of transmit request handling.
 714:../Dave/Generated/UART/uart.c ****  *
 715:../Dave/Generated/UART/uart.c ****  * Description:
 716:../Dave/Generated/UART/uart.c ****  * Transmits data by blocking the CPU until all data is sent. Transmission
 717:../Dave/Generated/UART/uart.c ****  * cannot be aborted since it is blocking implementation. Based on FIFO selection,
 718:../Dave/Generated/UART/uart.c ****  * either TBUF or IN register is updated with the data.
 719:../Dave/Generated/UART/uart.c ****  *
 720:../Dave/Generated/UART/uart.c ****  */
 721:../Dave/Generated/UART/uart.c **** static UART_STATUS_t UART_lStartTransmitPolling(const UART_t *const handle, uint8_t* data_ptr, uint
 722:../Dave/Generated/UART/uart.c **** {
 723:../Dave/Generated/UART/uart.c ****   UART_STATUS_t ret_stat = UART_STATUS_BUFFER_INVALID;
 724:../Dave/Generated/UART/uart.c ****   uint32_t loc_index;
 725:../Dave/Generated/UART/uart.c **** 
 726:../Dave/Generated/UART/uart.c ****   XMC_ASSERT("UART_Transmit: UART APP handle invalid", (((handle != NULL)&&
 727:../Dave/Generated/UART/uart.c ****             (handle->runtime != NULL))&&(handle->config != NULL)))
 728:../Dave/Generated/UART/uart.c **** 
 729:../Dave/Generated/UART/uart.c ****   if ((data_ptr != NULL) && (count > 0U))
 730:../Dave/Generated/UART/uart.c ****   {
 731:../Dave/Generated/UART/uart.c ****     ret_stat = UART_STATUS_BUSY;
 732:../Dave/Generated/UART/uart.c ****     if (handle->runtime->tx_busy == false)
 733:../Dave/Generated/UART/uart.c ****     {
 734:../Dave/Generated/UART/uart.c ****       handle->runtime->tx_busy = true;
 735:../Dave/Generated/UART/uart.c ****       if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 736:../Dave/Generated/UART/uart.c ****       {
 737:../Dave/Generated/UART/uart.c ****         /*Clear the transmit FIFO*/
 738:../Dave/Generated/UART/uart.c ****         XMC_USIC_CH_TXFIFO_Flush(handle->channel);
 739:../Dave/Generated/UART/uart.c ****       }
 740:../Dave/Generated/UART/uart.c ****       /*Loop through each byte*/
 741:../Dave/Generated/UART/uart.c ****       for (loc_index = 0U; loc_index < count; loc_index++)
 742:../Dave/Generated/UART/uart.c ****       {
 743:../Dave/Generated/UART/uart.c ****         /*If FIFO is enabled, FIFO filling status should be checked
 744:../Dave/Generated/UART/uart.c ****          * to avoid overflow error*/
 745:../Dave/Generated/UART/uart.c ****         if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 746:../Dave/Generated/UART/uart.c ****         {
 747:../Dave/Generated/UART/uart.c ****           /*Wait if transmit FIFO is full*/
 748:../Dave/Generated/UART/uart.c ****           while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == true)
 749:../Dave/Generated/UART/uart.c ****           {
 750:../Dave/Generated/UART/uart.c ****           }
 751:../Dave/Generated/UART/uart.c ****         }
 752:../Dave/Generated/UART/uart.c ****         XMC_UART_CH_Transmit(handle->channel, (uint16_t)data_ptr[loc_index]);
 753:../Dave/Generated/UART/uart.c ****       }
 754:../Dave/Generated/UART/uart.c **** 
 755:../Dave/Generated/UART/uart.c ****       if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 756:../Dave/Generated/UART/uart.c ****       {
 757:../Dave/Generated/UART/uart.c ****         /*Wait till FIFO is empty*/
 758:../Dave/Generated/UART/uart.c ****         while (XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel) == false)
 759:../Dave/Generated/UART/uart.c ****         {
 760:../Dave/Generated/UART/uart.c ****         }
 761:../Dave/Generated/UART/uart.c ****       }
 762:../Dave/Generated/UART/uart.c ****       ret_stat = UART_STATUS_SUCCESS;
 763:../Dave/Generated/UART/uart.c ****       handle->runtime->tx_busy = false;
 764:../Dave/Generated/UART/uart.c ****     }
 765:../Dave/Generated/UART/uart.c ****   }
 766:../Dave/Generated/UART/uart.c ****   return ret_stat;
 767:../Dave/Generated/UART/uart.c **** }
 768:../Dave/Generated/UART/uart.c **** #endif
 769:../Dave/Generated/UART/uart.c **** 
 770:../Dave/Generated/UART/uart.c **** #ifdef UART_RX_DIRECT_USED
 771:../Dave/Generated/UART/uart.c **** /*
 772:../Dave/Generated/UART/uart.c ****  * Polling method to receive data.
 773:../Dave/Generated/UART/uart.c ****  * @param[in] UART_t* handle UART APP handle pointer
 774:../Dave/Generated/UART/uart.c ****  * @param[in] uint8_t*  Pointer to data array
 775:../Dave/Generated/UART/uart.c ****  * @param[in] uint32_t number of bytes to be received.
 776:../Dave/Generated/UART/uart.c ****  *
 777:../Dave/Generated/UART/uart.c ****  * @return UART_STATUS_t Status of receive request handling.
 778:../Dave/Generated/UART/uart.c ****  *
 779:../Dave/Generated/UART/uart.c ****  * Description:
 780:../Dave/Generated/UART/uart.c ****  * Receives data by blocking the CPU until all data is received. Reception
 781:../Dave/Generated/UART/uart.c ****  * cannot be aborted since it is blocking implementation. Based on FIFO selection,
 782:../Dave/Generated/UART/uart.c ****  * either RBUF or OUT register will be read.
 783:../Dave/Generated/UART/uart.c ****  *
 784:../Dave/Generated/UART/uart.c ****  */
 785:../Dave/Generated/UART/uart.c **** static UART_STATUS_t UART_lStartReceivePolling(const UART_t *const handle, uint8_t* data_ptr, uint3
 786:../Dave/Generated/UART/uart.c **** {
 787:../Dave/Generated/UART/uart.c ****   UART_STATUS_t ret_stat = UART_STATUS_BUFFER_INVALID;
 788:../Dave/Generated/UART/uart.c ****   uint32_t loc_index;
 789:../Dave/Generated/UART/uart.c ****   uint32_t loc_status;
 790:../Dave/Generated/UART/uart.c **** 
 791:../Dave/Generated/UART/uart.c ****   XMC_ASSERT("UART_Receive: UART APP handle invalid", ((handle != NULL)&&
 792:../Dave/Generated/UART/uart.c ****             (handle->runtime != NULL)))
 793:../Dave/Generated/UART/uart.c **** 
 794:../Dave/Generated/UART/uart.c ****   if ((data_ptr != NULL) && (count > 0U))
 795:../Dave/Generated/UART/uart.c ****   {
 796:../Dave/Generated/UART/uart.c ****     ret_stat = UART_STATUS_BUSY;
 797:../Dave/Generated/UART/uart.c ****     if (handle->runtime->rx_busy == false)
 798:../Dave/Generated/UART/uart.c ****     {
 799:../Dave/Generated/UART/uart.c ****       handle->runtime->rx_busy = true;
 800:../Dave/Generated/UART/uart.c ****       if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 801:../Dave/Generated/UART/uart.c ****       {
 802:../Dave/Generated/UART/uart.c ****         /*Clear the receive FIFO, configure the trigger lime
 803:../Dave/Generated/UART/uart.c ****          * and enable the receive events*/
 804:../Dave/Generated/UART/uart.c ****         XMC_USIC_CH_RXFIFO_Flush(handle->channel);
 805:../Dave/Generated/UART/uart.c ****       }
 806:../Dave/Generated/UART/uart.c ****       for (loc_index = 0U; loc_index < count; loc_index++)
 807:../Dave/Generated/UART/uart.c ****       {
 808:../Dave/Generated/UART/uart.c ****         /*If receive FIFO is configured, wait for FIFO to get data.*/
 809:../Dave/Generated/UART/uart.c ****         if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 810:../Dave/Generated/UART/uart.c ****         {
 811:../Dave/Generated/UART/uart.c ****           /*Wait if FIFO empty*/
 812:../Dave/Generated/UART/uart.c ****           while(XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == true)
 813:../Dave/Generated/UART/uart.c ****           {
 814:../Dave/Generated/UART/uart.c ****           }
 815:../Dave/Generated/UART/uart.c ****         }
 816:../Dave/Generated/UART/uart.c ****         else
 817:../Dave/Generated/UART/uart.c ****         {
 818:../Dave/Generated/UART/uart.c ****           /*Wait for RIF or AIF flag update*/
 819:../Dave/Generated/UART/uart.c ****           loc_status = XMC_UART_CH_GetStatusFlag(handle->channel);
 820:../Dave/Generated/UART/uart.c ****           while (!(loc_status & ((uint32_t)XMC_UART_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION |
 821:../Dave/Generated/UART/uart.c ****                 (uint32_t)XMC_UART_CH_STATUS_FLAG_RECEIVE_INDICATION)))
 822:../Dave/Generated/UART/uart.c ****           {
 823:../Dave/Generated/UART/uart.c ****             loc_status = XMC_UART_CH_GetStatusFlag(handle->channel);
 824:../Dave/Generated/UART/uart.c ****           }
 825:../Dave/Generated/UART/uart.c ****           /*Clear the detected event.
 826:../Dave/Generated/UART/uart.c ****            * Both events should not be cleared at once, otherwise if 2 bytes are received, only
 827:../Dave/Generated/UART/uart.c ****            * one byte will be read.*/
 828:../Dave/Generated/UART/uart.c ****           XMC_UART_CH_ClearStatusFlag(handle->channel,
 829:../Dave/Generated/UART/uart.c ****               ((uint32_t)XMC_UART_CH_STATUS_FLAG_RECEIVE_INDICATION | (uint32_t)XMC_UART_CH_STATUS_
 830:../Dave/Generated/UART/uart.c ****         }
 831:../Dave/Generated/UART/uart.c ****         data_ptr[loc_index] = (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
 832:../Dave/Generated/UART/uart.c ****       }
 833:../Dave/Generated/UART/uart.c ****       ret_stat = UART_STATUS_SUCCESS;
 834:../Dave/Generated/UART/uart.c ****       handle->runtime->rx_busy = false;
 835:../Dave/Generated/UART/uart.c ****     }
 836:../Dave/Generated/UART/uart.c ****   }
 837:../Dave/Generated/UART/uart.c ****   return ret_stat;
 838:../Dave/Generated/UART/uart.c **** }
 839:../Dave/Generated/UART/uart.c **** #endif
 840:../Dave/Generated/UART/uart.c **** 
 841:../Dave/Generated/UART/uart.c **** #ifdef UART_TX_INTERRUPT_USED
 842:../Dave/Generated/UART/uart.c **** /*
 843:../Dave/Generated/UART/uart.c ****  * Transmit interrupt handler for the APP.
 844:../Dave/Generated/UART/uart.c ****  * This is a common interrupt handling function called for different instances of the APP.
 845:../Dave/Generated/UART/uart.c ****  *
 846:../Dave/Generated/UART/uart.c ****  *  * param[in]  handle UART APP handle pointer of type UART_t*
 847:../Dave/Generated/UART/uart.c ****  *
 848:../Dave/Generated/UART/uart.c ****  *  * return void
 849:../Dave/Generated/UART/uart.c ****  */
 850:../Dave/Generated/UART/uart.c **** void UART_lTransmitHandler(const UART_t * const handle)
 851:../Dave/Generated/UART/uart.c **** {
 1634              	 .loc 3 851 0
 1635              	 .cfi_startproc
 1636              	 
 1637              	 
 1638 0000 80B5     	 push {r7,lr}
 1639              	.LCFI142:
 1640              	 .cfi_def_cfa_offset 8
 1641              	 .cfi_offset 7,-8
 1642              	 .cfi_offset 14,-4
 1643 0002 84B0     	 sub sp,sp,#16
 1644              	.LCFI143:
 1645              	 .cfi_def_cfa_offset 24
 1646 0004 00AF     	 add r7,sp,#0
 1647              	.LCFI144:
 1648              	 .cfi_def_cfa_register 7
 1649 0006 7860     	 str r0,[r7,#4]
 852:../Dave/Generated/UART/uart.c ****   UART_RUNTIME_t * ptr_runtime = handle->runtime;
 1650              	 .loc 3 852 0
 1651 0008 7B68     	 ldr r3,[r7,#4]
 1652 000a 9B68     	 ldr r3,[r3,#8]
 1653 000c FB60     	 str r3,[r7,#12]
 853:../Dave/Generated/UART/uart.c **** 
 854:../Dave/Generated/UART/uart.c ****   if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 1654              	 .loc 3 854 0
 1655 000e FB68     	 ldr r3,[r7,#12]
 1656 0010 DA68     	 ldr r2,[r3,#12]
 1657 0012 FB68     	 ldr r3,[r7,#12]
 1658 0014 9B68     	 ldr r3,[r3,#8]
 1659 0016 9A42     	 cmp r2,r3
 1660 0018 40D2     	 bcs .L71
 855:../Dave/Generated/UART/uart.c ****   {
 856:../Dave/Generated/UART/uart.c ****     if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 1661              	 .loc 3 856 0
 1662 001a 7B68     	 ldr r3,[r7,#4]
 1663 001c 5B68     	 ldr r3,[r3,#4]
 1664 001e 93F82B30 	 ldrb r3,[r3,#43]
 1665 0022 002B     	 cmp r3,#0
 1666 0024 27D0     	 beq .L72
 857:../Dave/Generated/UART/uart.c ****     {
 858:../Dave/Generated/UART/uart.c ****       /*When Transmit FIFO is enabled*/
 859:../Dave/Generated/UART/uart.c ****       /*Fill the transmit FIFO */
 860:../Dave/Generated/UART/uart.c ****       while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
 1667              	 .loc 3 860 0
 1668 0026 1AE0     	 b .L73
 1669              	.L76:
 861:../Dave/Generated/UART/uart.c ****       {
 862:../Dave/Generated/UART/uart.c ****         if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 1670              	 .loc 3 862 0
 1671 0028 FB68     	 ldr r3,[r7,#12]
 1672 002a DA68     	 ldr r2,[r3,#12]
 1673 002c FB68     	 ldr r3,[r7,#12]
 1674 002e 9B68     	 ldr r3,[r3,#8]
 1675 0030 9A42     	 cmp r2,r3
 1676 0032 12D2     	 bcs .L74
 863:../Dave/Generated/UART/uart.c ****         {
 864:../Dave/Generated/UART/uart.c ****           /*Load the FIFO byte by byte till either FIFO is full or all data is loaded*/
 865:../Dave/Generated/UART/uart.c ****           XMC_UART_CH_Transmit(handle->channel,(uint16_t)ptr_runtime->tx_data[ptr_runtime->tx_data_
 1677              	 .loc 3 865 0
 1678 0034 7B68     	 ldr r3,[r7,#4]
 1679 0036 1968     	 ldr r1,[r3]
 1680 0038 FB68     	 ldr r3,[r7,#12]
 1681 003a 1A68     	 ldr r2,[r3]
 1682 003c FB68     	 ldr r3,[r7,#12]
 1683 003e DB68     	 ldr r3,[r3,#12]
 1684 0040 1344     	 add r3,r3,r2
 1685 0042 1B78     	 ldrb r3,[r3]
 1686 0044 9BB2     	 uxth r3,r3
 1687 0046 0846     	 mov r0,r1
 1688 0048 1946     	 mov r1,r3
 1689 004a FFF7FEFF 	 bl XMC_UART_CH_Transmit
 866:../Dave/Generated/UART/uart.c ****           (ptr_runtime->tx_data_index)++;
 1690              	 .loc 3 866 0
 1691 004e FB68     	 ldr r3,[r7,#12]
 1692 0050 DB68     	 ldr r3,[r3,#12]
 1693 0052 5A1C     	 adds r2,r3,#1
 1694 0054 FB68     	 ldr r3,[r7,#12]
 1695 0056 DA60     	 str r2,[r3,#12]
 1696 0058 01E0     	 b .L73
 1697              	.L74:
 867:../Dave/Generated/UART/uart.c ****         }
 868:../Dave/Generated/UART/uart.c ****         else
 869:../Dave/Generated/UART/uart.c ****         {
 870:../Dave/Generated/UART/uart.c ****           break;
 1698              	 .loc 3 870 0
 1699 005a 00BF     	 nop
 1700 005c 53E0     	 b .L70
 1701              	.L73:
 860:../Dave/Generated/UART/uart.c ****       {
 1702              	 .loc 3 860 0
 1703 005e 7B68     	 ldr r3,[r7,#4]
 1704 0060 1B68     	 ldr r3,[r3]
 1705 0062 1846     	 mov r0,r3
 1706 0064 FFF7FEFF 	 bl XMC_USIC_CH_TXFIFO_IsFull
 1707 0068 0346     	 mov r3,r0
 1708 006a 83F00103 	 eor r3,r3,#1
 1709 006e DBB2     	 uxtb r3,r3
 1710 0070 002B     	 cmp r3,#0
 1711 0072 D9D1     	 bne .L76
 1712 0074 47E0     	 b .L70
 1713              	.L72:
 871:../Dave/Generated/UART/uart.c ****         }
 872:../Dave/Generated/UART/uart.c ****       }
 873:../Dave/Generated/UART/uart.c ****     }
 874:../Dave/Generated/UART/uart.c ****     else
 875:../Dave/Generated/UART/uart.c ****     {
 876:../Dave/Generated/UART/uart.c ****       /*When Transmit FIFO is disabled*/
 877:../Dave/Generated/UART/uart.c ****       XMC_UART_CH_Transmit(handle->channel,(uint16_t)ptr_runtime->tx_data[ptr_runtime->tx_data_inde
 1714              	 .loc 3 877 0
 1715 0076 7B68     	 ldr r3,[r7,#4]
 1716 0078 1968     	 ldr r1,[r3]
 1717 007a FB68     	 ldr r3,[r7,#12]
 1718 007c 1A68     	 ldr r2,[r3]
 1719 007e FB68     	 ldr r3,[r7,#12]
 1720 0080 DB68     	 ldr r3,[r3,#12]
 1721 0082 1344     	 add r3,r3,r2
 1722 0084 1B78     	 ldrb r3,[r3]
 1723 0086 9BB2     	 uxth r3,r3
 1724 0088 0846     	 mov r0,r1
 1725 008a 1946     	 mov r1,r3
 1726 008c FFF7FEFF 	 bl XMC_UART_CH_Transmit
 878:../Dave/Generated/UART/uart.c ****       (ptr_runtime->tx_data_index)++;
 1727              	 .loc 3 878 0
 1728 0090 FB68     	 ldr r3,[r7,#12]
 1729 0092 DB68     	 ldr r3,[r3,#12]
 1730 0094 5A1C     	 adds r2,r3,#1
 1731 0096 FB68     	 ldr r3,[r7,#12]
 1732 0098 DA60     	 str r2,[r3,#12]
 1733 009a 34E0     	 b .L70
 1734              	.L71:
 879:../Dave/Generated/UART/uart.c ****     }
 880:../Dave/Generated/UART/uart.c ****   }
 881:../Dave/Generated/UART/uart.c ****   else
 882:../Dave/Generated/UART/uart.c ****   {
 883:../Dave/Generated/UART/uart.c ****     if (XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel) == true)
 1735              	 .loc 3 883 0
 1736 009c 7B68     	 ldr r3,[r7,#4]
 1737 009e 1B68     	 ldr r3,[r3]
 1738 00a0 1846     	 mov r0,r3
 1739 00a2 FFF7FEFF 	 bl XMC_USIC_CH_TXFIFO_IsEmpty
 1740 00a6 0346     	 mov r3,r0
 1741 00a8 002B     	 cmp r3,#0
 1742 00aa 2CD0     	 beq .L70
 884:../Dave/Generated/UART/uart.c ****     {
 885:../Dave/Generated/UART/uart.c ****       if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 1743              	 .loc 3 885 0
 1744 00ac 7B68     	 ldr r3,[r7,#4]
 1745 00ae 5B68     	 ldr r3,[r3,#4]
 1746 00b0 93F82B30 	 ldrb r3,[r3,#43]
 1747 00b4 002B     	 cmp r3,#0
 1748 00b6 07D0     	 beq .L79
 886:../Dave/Generated/UART/uart.c ****       {
 887:../Dave/Generated/UART/uart.c ****         /*Disable the transmit FIFO event*/
 888:../Dave/Generated/UART/uart.c ****         XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STA
 1749              	 .loc 3 888 0
 1750 00b8 7B68     	 ldr r3,[r7,#4]
 1751 00ba 1B68     	 ldr r3,[r3]
 1752 00bc 1846     	 mov r0,r3
 1753 00be 4FF08041 	 mov r1,#1073741824
 1754 00c2 FFF7FEFF 	 bl XMC_USIC_CH_TXFIFO_DisableEvent
 1755 00c6 06E0     	 b .L80
 1756              	.L79:
 889:../Dave/Generated/UART/uart.c ****       }
 890:../Dave/Generated/UART/uart.c ****       else
 891:../Dave/Generated/UART/uart.c ****       {
 892:../Dave/Generated/UART/uart.c ****         /*Disable the standard transmit event*/
 893:../Dave/Generated/UART/uart.c ****         XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
 1757              	 .loc 3 893 0
 1758 00c8 7B68     	 ldr r3,[r7,#4]
 1759 00ca 1B68     	 ldr r3,[r3]
 1760 00cc 1846     	 mov r0,r3
 1761 00ce 4FF40051 	 mov r1,#8192
 1762 00d2 FFF7FEFF 	 bl XMC_USIC_CH_DisableEvent
 1763              	.L80:
 894:../Dave/Generated/UART/uart.c ****       }
 895:../Dave/Generated/UART/uart.c **** 
 896:../Dave/Generated/UART/uart.c ****       /*Wait for the transmit buffer to be free to ensure that all data is transmitted*/
 897:../Dave/Generated/UART/uart.c ****       while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 1764              	 .loc 3 897 0
 1765 00d6 00BF     	 nop
 1766              	.L81:
 1767              	 .loc 3 897 0 is_stmt 0 discriminator 1
 1768 00d8 7B68     	 ldr r3,[r7,#4]
 1769 00da 1B68     	 ldr r3,[r3]
 1770 00dc 1846     	 mov r0,r3
 1771 00de FFF7FEFF 	 bl XMC_USIC_CH_GetTransmitBufferStatus
 1772 00e2 0346     	 mov r3,r0
 1773 00e4 802B     	 cmp r3,#128
 1774 00e6 F7D0     	 beq .L81
 898:../Dave/Generated/UART/uart.c ****       {
 899:../Dave/Generated/UART/uart.c **** 
 900:../Dave/Generated/UART/uart.c ****       }
 901:../Dave/Generated/UART/uart.c ****       /*All data is transmitted*/
 902:../Dave/Generated/UART/uart.c ****       ptr_runtime->tx_busy = false;
 1775              	 .loc 3 902 0 is_stmt 1
 1776 00e8 FB68     	 ldr r3,[r7,#12]
 1777 00ea 0022     	 movs r2,#0
 1778 00ec 1A76     	 strb r2,[r3,#24]
 903:../Dave/Generated/UART/uart.c ****       ptr_runtime->tx_data = NULL;
 1779              	 .loc 3 903 0
 1780 00ee FB68     	 ldr r3,[r7,#12]
 1781 00f0 0022     	 movs r2,#0
 1782 00f2 1A60     	 str r2,[r3]
 904:../Dave/Generated/UART/uart.c **** 
 905:../Dave/Generated/UART/uart.c ****       if (handle->config->tx_cbhandler != NULL)
 1783              	 .loc 3 905 0
 1784 00f4 7B68     	 ldr r3,[r7,#4]
 1785 00f6 5B68     	 ldr r3,[r3,#4]
 1786 00f8 9B68     	 ldr r3,[r3,#8]
 1787 00fa 002B     	 cmp r3,#0
 1788 00fc 03D0     	 beq .L70
 906:../Dave/Generated/UART/uart.c ****       {
 907:../Dave/Generated/UART/uart.c ****         /*Execute the callback function provided in the UART APP UI*/
 908:../Dave/Generated/UART/uart.c ****         handle->config->tx_cbhandler();
 1789              	 .loc 3 908 0
 1790 00fe 7B68     	 ldr r3,[r7,#4]
 1791 0100 5B68     	 ldr r3,[r3,#4]
 1792 0102 9B68     	 ldr r3,[r3,#8]
 1793 0104 9847     	 blx r3
 1794              	.L70:
 909:../Dave/Generated/UART/uart.c ****       }
 910:../Dave/Generated/UART/uart.c ****     }
 911:../Dave/Generated/UART/uart.c ****   }
 912:../Dave/Generated/UART/uart.c **** }
 1795              	 .loc 3 912 0
 1796 0106 1037     	 adds r7,r7,#16
 1797              	.LCFI145:
 1798              	 .cfi_def_cfa_offset 8
 1799 0108 BD46     	 mov sp,r7
 1800              	.LCFI146:
 1801              	 .cfi_def_cfa_register 13
 1802              	 
 1803 010a 80BD     	 pop {r7,pc}
 1804              	 .cfi_endproc
 1805              	.LFE286:
 1807              	 .section .text.UART_lReceiveHandler,"ax",%progbits
 1808              	 .align 2
 1809              	 .global UART_lReceiveHandler
 1810              	 .thumb
 1811              	 .thumb_func
 1813              	UART_lReceiveHandler:
 1814              	.LFB287:
 913:../Dave/Generated/UART/uart.c **** #endif
 914:../Dave/Generated/UART/uart.c **** 
 915:../Dave/Generated/UART/uart.c **** #ifdef UART_RX_INTERRUPT_USED
 916:../Dave/Generated/UART/uart.c **** /*
 917:../Dave/Generated/UART/uart.c ****  * Receive interrupt handler for the APP.
 918:../Dave/Generated/UART/uart.c ****  * This is a common interrupt handling function for different instances of the UART APP.
 919:../Dave/Generated/UART/uart.c ****  *
 920:../Dave/Generated/UART/uart.c ****  * param[in]  handle UART APP handle pointer of type UART_t*
 921:../Dave/Generated/UART/uart.c ****  *
 922:../Dave/Generated/UART/uart.c ****  * return void
 923:../Dave/Generated/UART/uart.c ****  */
 924:../Dave/Generated/UART/uart.c **** void UART_lReceiveHandler(const UART_t * const handle)
 925:../Dave/Generated/UART/uart.c **** {
 1815              	 .loc 3 925 0
 1816              	 .cfi_startproc
 1817              	 
 1818              	 
 1819 0000 90B5     	 push {r4,r7,lr}
 1820              	.LCFI147:
 1821              	 .cfi_def_cfa_offset 12
 1822              	 .cfi_offset 4,-12
 1823              	 .cfi_offset 7,-8
 1824              	 .cfi_offset 14,-4
 1825 0002 85B0     	 sub sp,sp,#20
 1826              	.LCFI148:
 1827              	 .cfi_def_cfa_offset 32
 1828 0004 00AF     	 add r7,sp,#0
 1829              	.LCFI149:
 1830              	 .cfi_def_cfa_register 7
 1831 0006 7860     	 str r0,[r7,#4]
 926:../Dave/Generated/UART/uart.c ****   UART_RUNTIME_t * ptr_runtime = handle->runtime;
 1832              	 .loc 3 926 0
 1833 0008 7B68     	 ldr r3,[r7,#4]
 1834 000a 9B68     	 ldr r3,[r3,#8]
 1835 000c FB60     	 str r3,[r7,#12]
 927:../Dave/Generated/UART/uart.c **** 
 928:../Dave/Generated/UART/uart.c ****   if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 1836              	 .loc 3 928 0
 1837 000e 7B68     	 ldr r3,[r7,#4]
 1838 0010 5B68     	 ldr r3,[r3,#4]
 1839 0012 93F82C30 	 ldrb r3,[r3,#44]
 1840 0016 002B     	 cmp r3,#0
 1841 0018 4ED0     	 beq .L83
 929:../Dave/Generated/UART/uart.c ****   {
 930:../Dave/Generated/UART/uart.c ****     /*When Receive FIFO is enabled*/
 931:../Dave/Generated/UART/uart.c ****     while (XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == false)
 1842              	 .loc 3 931 0
 1843 001a 32E0     	 b .L84
 1844              	.L88:
 932:../Dave/Generated/UART/uart.c ****     {
 933:../Dave/Generated/UART/uart.c ****       if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 1845              	 .loc 3 933 0
 1846 001c FB68     	 ldr r3,[r7,#12]
 1847 001e 5A69     	 ldr r2,[r3,#20]
 1848 0020 FB68     	 ldr r3,[r7,#12]
 1849 0022 1B69     	 ldr r3,[r3,#16]
 1850 0024 9A42     	 cmp r2,r3
 1851 0026 11D2     	 bcs .L85
 934:../Dave/Generated/UART/uart.c ****       {
 935:../Dave/Generated/UART/uart.c ****         /*Read all the content of Receive FIFO */
 936:../Dave/Generated/UART/uart.c ****         ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)XMC_UART_CH_GetReceivedData(han
 1852              	 .loc 3 936 0
 1853 0028 FB68     	 ldr r3,[r7,#12]
 1854 002a 5A68     	 ldr r2,[r3,#4]
 1855 002c FB68     	 ldr r3,[r7,#12]
 1856 002e 5B69     	 ldr r3,[r3,#20]
 1857 0030 D418     	 adds r4,r2,r3
 1858 0032 7B68     	 ldr r3,[r7,#4]
 1859 0034 1B68     	 ldr r3,[r3]
 1860 0036 1846     	 mov r0,r3
 1861 0038 FFF7FEFF 	 bl XMC_UART_CH_GetReceivedData
 1862 003c 0346     	 mov r3,r0
 1863 003e DBB2     	 uxtb r3,r3
 1864 0040 2370     	 strb r3,[r4]
 937:../Dave/Generated/UART/uart.c ****         (ptr_runtime->rx_data_index)++;
 1865              	 .loc 3 937 0
 1866 0042 FB68     	 ldr r3,[r7,#12]
 1867 0044 5B69     	 ldr r3,[r3,#20]
 1868 0046 5A1C     	 adds r2,r3,#1
 1869 0048 FB68     	 ldr r3,[r7,#12]
 1870 004a 5A61     	 str r2,[r3,#20]
 1871              	.L85:
 938:../Dave/Generated/UART/uart.c ****       }
 939:../Dave/Generated/UART/uart.c **** 
 940:../Dave/Generated/UART/uart.c ****       if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 1872              	 .loc 3 940 0
 1873 004c FB68     	 ldr r3,[r7,#12]
 1874 004e 5A69     	 ldr r2,[r3,#20]
 1875 0050 FB68     	 ldr r3,[r7,#12]
 1876 0052 1B69     	 ldr r3,[r3,#16]
 1877 0054 9A42     	 cmp r2,r3
 1878 0056 14D1     	 bne .L84
 941:../Dave/Generated/UART/uart.c ****       {
 942:../Dave/Generated/UART/uart.c ****         /*Reception complete*/
 943:../Dave/Generated/UART/uart.c ****         ptr_runtime->rx_busy = false;
 1879              	 .loc 3 943 0
 1880 0058 FB68     	 ldr r3,[r7,#12]
 1881 005a 0022     	 movs r2,#0
 1882 005c 5A76     	 strb r2,[r3,#25]
 944:../Dave/Generated/UART/uart.c ****         /*Disable both standard receive and alternative receive FIFO events*/
 945:../Dave/Generated/UART/uart.c ****         XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,
 1883              	 .loc 3 945 0
 1884 005e 7B68     	 ldr r3,[r7,#4]
 1885 0060 1B68     	 ldr r3,[r3]
 1886 0062 1846     	 mov r0,r3
 1887 0064 4FF0C041 	 mov r1,#1610612736
 1888 0068 FFF7FEFF 	 bl XMC_USIC_CH_RXFIFO_DisableEvent
 946:../Dave/Generated/UART/uart.c ****             (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
 947:../Dave/Generated/UART/uart.c ****             (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));
 948:../Dave/Generated/UART/uart.c ****         if (handle->config->rx_cbhandler != NULL)
 1889              	 .loc 3 948 0
 1890 006c 7B68     	 ldr r3,[r7,#4]
 1891 006e 5B68     	 ldr r3,[r3,#4]
 1892 0070 DB68     	 ldr r3,[r3,#12]
 1893 0072 002B     	 cmp r3,#0
 1894 0074 04D0     	 beq .L86
 949:../Dave/Generated/UART/uart.c ****         {
 950:../Dave/Generated/UART/uart.c ****           /*Execute the 'End of reception' callback function*/
 951:../Dave/Generated/UART/uart.c ****           handle->config->rx_cbhandler();
 1895              	 .loc 3 951 0
 1896 0076 7B68     	 ldr r3,[r7,#4]
 1897 0078 5B68     	 ldr r3,[r3,#4]
 1898 007a DB68     	 ldr r3,[r3,#12]
 1899 007c 9847     	 blx r3
 952:../Dave/Generated/UART/uart.c ****         }
 953:../Dave/Generated/UART/uart.c ****         break;
 1900              	 .loc 3 953 0
 1901 007e 0BE0     	 b .L87
 1902              	.L86:
 1903 0080 0AE0     	 b .L87
 1904              	.L84:
 931:../Dave/Generated/UART/uart.c ****     {
 1905              	 .loc 3 931 0
 1906 0082 7B68     	 ldr r3,[r7,#4]
 1907 0084 1B68     	 ldr r3,[r3]
 1908 0086 1846     	 mov r0,r3
 1909 0088 FFF7FEFF 	 bl XMC_USIC_CH_RXFIFO_IsEmpty
 1910 008c 0346     	 mov r3,r0
 1911 008e 83F00103 	 eor r3,r3,#1
 1912 0092 DBB2     	 uxtb r3,r3
 1913 0094 002B     	 cmp r3,#0
 1914 0096 C1D1     	 bne .L88
 1915              	.L87:
 954:../Dave/Generated/UART/uart.c ****       }
 955:../Dave/Generated/UART/uart.c ****     }
 956:../Dave/Generated/UART/uart.c ****     /*Set the trigger limit if data still to be received*/
 957:../Dave/Generated/UART/uart.c ****     if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 1916              	 .loc 3 957 0
 1917 0098 FB68     	 ldr r3,[r7,#12]
 1918 009a 5A69     	 ldr r2,[r3,#20]
 1919 009c FB68     	 ldr r3,[r7,#12]
 1920 009e 1B69     	 ldr r3,[r3,#16]
 1921 00a0 9A42     	 cmp r2,r3
 1922 00a2 3AD2     	 bcs .L82
 958:../Dave/Generated/UART/uart.c ****     {
 959:../Dave/Generated/UART/uart.c ****       UART_lReconfigureRxFIFO(handle,
 960:../Dave/Generated/UART/uart.c ****           (uint32_t)(ptr_runtime->rx_data_count - ptr_runtime->rx_data_index));
 1923              	 .loc 3 960 0
 1924 00a4 FB68     	 ldr r3,[r7,#12]
 1925 00a6 1A69     	 ldr r2,[r3,#16]
 1926 00a8 FB68     	 ldr r3,[r7,#12]
 1927 00aa 5B69     	 ldr r3,[r3,#20]
 959:../Dave/Generated/UART/uart.c ****           (uint32_t)(ptr_runtime->rx_data_count - ptr_runtime->rx_data_index));
 1928              	 .loc 3 959 0
 1929 00ac D31A     	 subs r3,r2,r3
 1930 00ae 7868     	 ldr r0,[r7,#4]
 1931 00b0 1946     	 mov r1,r3
 1932 00b2 FFF7FEFF 	 bl UART_lReconfigureRxFIFO
 1933 00b6 30E0     	 b .L82
 1934              	.L83:
 961:../Dave/Generated/UART/uart.c ****     }
 962:../Dave/Generated/UART/uart.c ****   }
 963:../Dave/Generated/UART/uart.c ****   else
 964:../Dave/Generated/UART/uart.c ****   {
 965:../Dave/Generated/UART/uart.c ****     /*When RxFIFO is disabled*/
 966:../Dave/Generated/UART/uart.c ****     if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 1935              	 .loc 3 966 0
 1936 00b8 FB68     	 ldr r3,[r7,#12]
 1937 00ba 5A69     	 ldr r2,[r3,#20]
 1938 00bc FB68     	 ldr r3,[r7,#12]
 1939 00be 1B69     	 ldr r3,[r3,#16]
 1940 00c0 9A42     	 cmp r2,r3
 1941 00c2 11D2     	 bcs .L91
 967:../Dave/Generated/UART/uart.c ****     {
 968:../Dave/Generated/UART/uart.c ****       ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)XMC_UART_CH_GetReceivedData(handl
 1942              	 .loc 3 968 0
 1943 00c4 FB68     	 ldr r3,[r7,#12]
 1944 00c6 5A68     	 ldr r2,[r3,#4]
 1945 00c8 FB68     	 ldr r3,[r7,#12]
 1946 00ca 5B69     	 ldr r3,[r3,#20]
 1947 00cc D418     	 adds r4,r2,r3
 1948 00ce 7B68     	 ldr r3,[r7,#4]
 1949 00d0 1B68     	 ldr r3,[r3]
 1950 00d2 1846     	 mov r0,r3
 1951 00d4 FFF7FEFF 	 bl XMC_UART_CH_GetReceivedData
 1952 00d8 0346     	 mov r3,r0
 1953 00da DBB2     	 uxtb r3,r3
 1954 00dc 2370     	 strb r3,[r4]
 969:../Dave/Generated/UART/uart.c ****       (ptr_runtime->rx_data_index)++;
 1955              	 .loc 3 969 0
 1956 00de FB68     	 ldr r3,[r7,#12]
 1957 00e0 5B69     	 ldr r3,[r3,#20]
 1958 00e2 5A1C     	 adds r2,r3,#1
 1959 00e4 FB68     	 ldr r3,[r7,#12]
 1960 00e6 5A61     	 str r2,[r3,#20]
 1961              	.L91:
 970:../Dave/Generated/UART/uart.c ****     }
 971:../Dave/Generated/UART/uart.c **** 
 972:../Dave/Generated/UART/uart.c ****     if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 1962              	 .loc 3 972 0
 1963 00e8 FB68     	 ldr r3,[r7,#12]
 1964 00ea 5A69     	 ldr r2,[r3,#20]
 1965 00ec FB68     	 ldr r3,[r7,#12]
 1966 00ee 1B69     	 ldr r3,[r3,#16]
 1967 00f0 9A42     	 cmp r2,r3
 1968 00f2 12D1     	 bne .L82
 973:../Dave/Generated/UART/uart.c ****     {
 974:../Dave/Generated/UART/uart.c ****       /*Reception complete*/
 975:../Dave/Generated/UART/uart.c ****       ptr_runtime->rx_busy = false;
 1969              	 .loc 3 975 0
 1970 00f4 FB68     	 ldr r3,[r7,#12]
 1971 00f6 0022     	 movs r2,#0
 1972 00f8 5A76     	 strb r2,[r3,#25]
 976:../Dave/Generated/UART/uart.c ****       /*Disable both standard receive and alternative receive FIFO events*/
 977:../Dave/Generated/UART/uart.c ****       XMC_USIC_CH_DisableEvent(handle->channel,
 1973              	 .loc 3 977 0
 1974 00fa 7B68     	 ldr r3,[r7,#4]
 1975 00fc 1B68     	 ldr r3,[r3]
 1976 00fe 1846     	 mov r0,r3
 1977 0100 4FF44041 	 mov r1,#49152
 1978 0104 FFF7FEFF 	 bl XMC_USIC_CH_DisableEvent
 978:../Dave/Generated/UART/uart.c ****           (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE | (uint32_t)XMC_USIC_CH_EVENT_
 979:../Dave/Generated/UART/uart.c **** 
 980:../Dave/Generated/UART/uart.c ****       if (handle->config->rx_cbhandler != NULL)
 1979              	 .loc 3 980 0
 1980 0108 7B68     	 ldr r3,[r7,#4]
 1981 010a 5B68     	 ldr r3,[r3,#4]
 1982 010c DB68     	 ldr r3,[r3,#12]
 1983 010e 002B     	 cmp r3,#0
 1984 0110 03D0     	 beq .L82
 981:../Dave/Generated/UART/uart.c ****       {
 982:../Dave/Generated/UART/uart.c ****         /*Execute the 'End of reception' callback function*/
 983:../Dave/Generated/UART/uart.c ****         handle->config->rx_cbhandler();
 1985              	 .loc 3 983 0
 1986 0112 7B68     	 ldr r3,[r7,#4]
 1987 0114 5B68     	 ldr r3,[r3,#4]
 1988 0116 DB68     	 ldr r3,[r3,#12]
 1989 0118 9847     	 blx r3
 1990              	.L82:
 984:../Dave/Generated/UART/uart.c ****       }
 985:../Dave/Generated/UART/uart.c ****     }
 986:../Dave/Generated/UART/uart.c ****   }
 987:../Dave/Generated/UART/uart.c **** }
 1991              	 .loc 3 987 0
 1992 011a 1437     	 adds r7,r7,#20
 1993              	.LCFI150:
 1994              	 .cfi_def_cfa_offset 12
 1995 011c BD46     	 mov sp,r7
 1996              	.LCFI151:
 1997              	 .cfi_def_cfa_register 13
 1998              	 
 1999 011e 90BD     	 pop {r4,r7,pc}
 2000              	 .cfi_endproc
 2001              	.LFE287:
 2003              	 .section .text.UART_lReconfigureRxFIFO,"ax",%progbits
 2004              	 .align 2
 2005              	 .thumb
 2006              	 .thumb_func
 2008              	UART_lReconfigureRxFIFO:
 2009              	.LFB288:
 988:../Dave/Generated/UART/uart.c **** 
 989:../Dave/Generated/UART/uart.c **** /*
 990:../Dave/Generated/UART/uart.c ****  * A local function to reconfigure Receive FIFO with the given size and trigger limit.
 991:../Dave/Generated/UART/uart.c ****  * Size is needed because the FIFO should be disabled before changing the trigger limit by
 992:../Dave/Generated/UART/uart.c ****  * clearing the FIFO size.
 993:../Dave/Generated/UART/uart.c ****  *
 994:../Dave/Generated/UART/uart.c ****  * param[in] UART_t * pointer to the UART APP handle
 995:../Dave/Generated/UART/uart.c ****  * param[in] uint8_t  number of bytes to be received.
 996:../Dave/Generated/UART/uart.c ****  *
 997:../Dave/Generated/UART/uart.c ****  * return void.
 998:../Dave/Generated/UART/uart.c ****  */
 999:../Dave/Generated/UART/uart.c **** static void UART_lReconfigureRxFIFO(const UART_t * const handle, uint32_t data_size)
1000:../Dave/Generated/UART/uart.c **** {
 2010              	 .loc 3 1000 0
 2011              	 .cfi_startproc
 2012              	 
 2013              	 
 2014 0000 80B5     	 push {r7,lr}
 2015              	.LCFI152:
 2016              	 .cfi_def_cfa_offset 8
 2017              	 .cfi_offset 7,-8
 2018              	 .cfi_offset 14,-4
 2019 0002 84B0     	 sub sp,sp,#16
 2020              	.LCFI153:
 2021              	 .cfi_def_cfa_offset 24
 2022 0004 00AF     	 add r7,sp,#0
 2023              	.LCFI154:
 2024              	 .cfi_def_cfa_register 7
 2025 0006 7860     	 str r0,[r7,#4]
 2026 0008 3960     	 str r1,[r7]
1001:../Dave/Generated/UART/uart.c ****   uint32_t fifo_size;
1002:../Dave/Generated/UART/uart.c ****   uint32_t ret_limit_val = 0U;
 2027              	 .loc 3 1002 0
 2028 000a 0023     	 movs r3,#0
 2029 000c FB60     	 str r3,[r7,#12]
1003:../Dave/Generated/UART/uart.c **** 
1004:../Dave/Generated/UART/uart.c ****   /*Get FIFO size in bytes*/
1005:../Dave/Generated/UART/uart.c ****   fifo_size = (uint32_t)(0x01UL << (uint8_t)(handle->config->rx_fifo_size));
 2030              	 .loc 3 1005 0
 2031 000e 7B68     	 ldr r3,[r7,#4]
 2032 0010 5B68     	 ldr r3,[r3,#4]
 2033 0012 93F82C30 	 ldrb r3,[r3,#44]
 2034 0016 1A46     	 mov r2,r3
 2035 0018 0123     	 movs r3,#1
 2036 001a 9340     	 lsls r3,r3,r2
 2037 001c BB60     	 str r3,[r7,#8]
1006:../Dave/Generated/UART/uart.c ****   /*If data size is more than FIFO size, configure the limit to the FIFO size*/
1007:../Dave/Generated/UART/uart.c ****   if (data_size < fifo_size)
 2038              	 .loc 3 1007 0
 2039 001e 3A68     	 ldr r2,[r7]
 2040 0020 BB68     	 ldr r3,[r7,#8]
 2041 0022 9A42     	 cmp r2,r3
 2042 0024 03D2     	 bcs .L93
1008:../Dave/Generated/UART/uart.c ****   {
1009:../Dave/Generated/UART/uart.c ****     ret_limit_val = (uint32_t)(data_size - 1U);
 2043              	 .loc 3 1009 0
 2044 0026 3B68     	 ldr r3,[r7]
 2045 0028 013B     	 subs r3,r3,#1
 2046 002a FB60     	 str r3,[r7,#12]
 2047 002c 02E0     	 b .L94
 2048              	.L93:
1010:../Dave/Generated/UART/uart.c ****   }
1011:../Dave/Generated/UART/uart.c ****   else
1012:../Dave/Generated/UART/uart.c ****   {
1013:../Dave/Generated/UART/uart.c ****     ret_limit_val = (uint32_t)(fifo_size - 1U);
 2049              	 .loc 3 1013 0
 2050 002e BB68     	 ldr r3,[r7,#8]
 2051 0030 013B     	 subs r3,r3,#1
 2052 0032 FB60     	 str r3,[r7,#12]
 2053              	.L94:
1014:../Dave/Generated/UART/uart.c ****   }
1015:../Dave/Generated/UART/uart.c ****   /*Set the limit value*/
1016:../Dave/Generated/UART/uart.c ****   XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel,
 2054              	 .loc 3 1016 0
 2055 0034 7B68     	 ldr r3,[r7,#4]
 2056 0036 1A68     	 ldr r2,[r3]
1017:../Dave/Generated/UART/uart.c ****         handle->config->rx_fifo_size, ret_limit_val);
 2057              	 .loc 3 1017 0
 2058 0038 7B68     	 ldr r3,[r7,#4]
 2059 003a 5B68     	 ldr r3,[r3,#4]
1016:../Dave/Generated/UART/uart.c ****         handle->config->rx_fifo_size, ret_limit_val);
 2060              	 .loc 3 1016 0
 2061 003c 93F82C30 	 ldrb r3,[r3,#44]
 2062 0040 1046     	 mov r0,r2
 2063 0042 1946     	 mov r1,r3
 2064 0044 FA68     	 ldr r2,[r7,#12]
 2065 0046 FFF7FEFF 	 bl XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit
1018:../Dave/Generated/UART/uart.c **** }
 2066              	 .loc 3 1018 0
 2067 004a 1037     	 adds r7,r7,#16
 2068              	.LCFI155:
 2069              	 .cfi_def_cfa_offset 8
 2070 004c BD46     	 mov sp,r7
 2071              	.LCFI156:
 2072              	 .cfi_def_cfa_register 13
 2073              	 
 2074 004e 80BD     	 pop {r7,pc}
 2075              	 .cfi_endproc
 2076              	.LFE288:
 2078              	 .text
 2079              	.Letext0:
 2080              	 .file 4 "c:\\users\\pescatore\\switchdrive\\private\\konzept\\mcu for gate driver\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 2081              	 .file 5 "c:\\users\\pescatore\\switchdrive\\private\\konzept\\mcu for gate driver\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 2082              	 .file 6 "F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc/xmc_gpio.h"
 2083              	 .file 7 "F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/XMCLib/inc/xmc4_gpio.h"
 2084              	 .file 8 "F:/GitHub Projects/FH Luzern/BAT/BAT/Dave/Generated/DAVE_common.h"
 2085              	 .file 9 "../Dave/Generated/UART/uart.h"
 2086              	 .file 10 "F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/CMSIS/Include/core_cm4.h"
 2087              	 .file 11 "F:/GitHub Projects/FH Luzern/BAT/BAT/Libraries/CMSIS/Infineon/XMC4400_series/Include/system_XMC4400.h"
DEFINED SYMBOLS
                            *ABS*:00000000 uart.c
    {standard input}:20     .text.XMC_USIC_CH_EnableEvent:00000000 $t
    {standard input}:24     .text.XMC_USIC_CH_EnableEvent:00000000 XMC_USIC_CH_EnableEvent
    {standard input}:68     .text.XMC_USIC_CH_DisableEvent:00000000 $t
    {standard input}:72     .text.XMC_USIC_CH_DisableEvent:00000000 XMC_USIC_CH_DisableEvent
    {standard input}:116    .text.XMC_USIC_CH_GetTransmitBufferStatus:00000000 $t
    {standard input}:120    .text.XMC_USIC_CH_GetTransmitBufferStatus:00000000 XMC_USIC_CH_GetTransmitBufferStatus
    {standard input}:162    .text.XMC_USIC_CH_TriggerServiceRequest:00000000 $t
    {standard input}:166    .text.XMC_USIC_CH_TriggerServiceRequest:00000000 XMC_USIC_CH_TriggerServiceRequest
    {standard input}:208    .text.XMC_USIC_CH_SetTransmitBufferStatus:00000000 $t
    {standard input}:212    .text.XMC_USIC_CH_SetTransmitBufferStatus:00000000 XMC_USIC_CH_SetTransmitBufferStatus
    {standard input}:253    .text.XMC_USIC_CH_TXFIFO_EnableEvent:00000000 $t
    {standard input}:257    .text.XMC_USIC_CH_TXFIFO_EnableEvent:00000000 XMC_USIC_CH_TXFIFO_EnableEvent
    {standard input}:300    .text.XMC_USIC_CH_TXFIFO_DisableEvent:00000000 $t
    {standard input}:304    .text.XMC_USIC_CH_TXFIFO_DisableEvent:00000000 XMC_USIC_CH_TXFIFO_DisableEvent
    {standard input}:348    .text.XMC_USIC_CH_TXFIFO_Flush:00000000 $t
    {standard input}:352    .text.XMC_USIC_CH_TXFIFO_Flush:00000000 XMC_USIC_CH_TXFIFO_Flush
    {standard input}:391    .text.XMC_USIC_CH_TXFIFO_IsFull:00000000 $t
    {standard input}:395    .text.XMC_USIC_CH_TXFIFO_IsFull:00000000 XMC_USIC_CH_TXFIFO_IsFull
    {standard input}:440    .text.XMC_USIC_CH_TXFIFO_IsEmpty:00000000 $t
    {standard input}:444    .text.XMC_USIC_CH_TXFIFO_IsEmpty:00000000 XMC_USIC_CH_TXFIFO_IsEmpty
    {standard input}:489    .text.XMC_USIC_CH_RXFIFO_EnableEvent:00000000 $t
    {standard input}:493    .text.XMC_USIC_CH_RXFIFO_EnableEvent:00000000 XMC_USIC_CH_RXFIFO_EnableEvent
    {standard input}:536    .text.XMC_USIC_CH_RXFIFO_DisableEvent:00000000 $t
    {standard input}:540    .text.XMC_USIC_CH_RXFIFO_DisableEvent:00000000 XMC_USIC_CH_RXFIFO_DisableEvent
    {standard input}:584    .text.XMC_USIC_CH_RXFIFO_Flush:00000000 $t
    {standard input}:588    .text.XMC_USIC_CH_RXFIFO_Flush:00000000 XMC_USIC_CH_RXFIFO_Flush
    {standard input}:627    .text.XMC_USIC_CH_RXFIFO_IsEmpty:00000000 $t
    {standard input}:631    .text.XMC_USIC_CH_RXFIFO_IsEmpty:00000000 XMC_USIC_CH_RXFIFO_IsEmpty
    {standard input}:676    .text.XMC_UART_CH_Start:00000000 $t
    {standard input}:680    .text.XMC_UART_CH_Start:00000000 XMC_UART_CH_Start
    {standard input}:723    .text.XMC_UART_CH_SetSamplePoint:00000000 $t
    {standard input}:727    .text.XMC_UART_CH_SetSamplePoint:00000000 XMC_UART_CH_SetSamplePoint
    {standard input}:778    .rodata.uart_event_status_flags:00000000 uart_event_status_flags
    {standard input}:775    .rodata.uart_event_status_flags:00000000 $d
    {standard input}:789    .rodata.uart_event_conf_flags:00000000 uart_event_conf_flags
    {standard input}:786    .rodata.uart_event_conf_flags:00000000 $d
    {standard input}:796    .text.UART_GetAppVersion:00000000 $t
    {standard input}:801    .text.UART_GetAppVersion:00000000 UART_GetAppVersion
    {standard input}:862    .text.UART_Init:00000000 $t
    {standard input}:867    .text.UART_Init:00000000 UART_Init
    {standard input}:911    .text.UART_Transmit:00000000 $t
    {standard input}:916    .text.UART_Transmit:00000000 UART_Transmit
    {standard input}:1371   .text.UART_StartTransmitIRQ:00000000 UART_StartTransmitIRQ
    {standard input}:974    .text.UART_Receive:00000000 $t
    {standard input}:979    .text.UART_Receive:00000000 UART_Receive
    {standard input}:1504   .text.UART_StartReceiveIRQ:00000000 UART_StartReceiveIRQ
    {standard input}:1037   .text.UART_AbortTransmit:00000000 $t
    {standard input}:1042   .text.UART_AbortTransmit:00000000 UART_AbortTransmit
    {standard input}:1136   .text.UART_AbortReceive:00000000 $t
    {standard input}:1141   .text.UART_AbortReceive:00000000 UART_AbortReceive
    {standard input}:1224   .text.UART_SetBaudrate:00000000 $t
    {standard input}:1229   .text.UART_SetBaudrate:00000000 UART_SetBaudrate
    {standard input}:1366   .text.UART_StartTransmitIRQ:00000000 $t
    {standard input}:1499   .text.UART_StartReceiveIRQ:00000000 $t
    {standard input}:2008   .text.UART_lReconfigureRxFIFO:00000000 UART_lReconfigureRxFIFO
    {standard input}:1627   .text.UART_lTransmitHandler:00000000 $t
    {standard input}:1632   .text.UART_lTransmitHandler:00000000 UART_lTransmitHandler
    {standard input}:1808   .text.UART_lReceiveHandler:00000000 $t
    {standard input}:1813   .text.UART_lReceiveHandler:00000000 UART_lReceiveHandler
    {standard input}:2004   .text.UART_lReconfigureRxFIFO:00000000 $t
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_UART_CH_DisableEvent
XMC_GPIO_SetMode
XMC_UART_CH_Stop
XMC_UART_CH_SetBaudrate
XMC_GPIO_Init
XMC_UART_CH_Transmit
XMC_UART_CH_GetReceivedData
XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit
