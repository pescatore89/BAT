
BAT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000ad40  08000000  0c000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0800ad40  0c00ad40  00012d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 Stack         00000800  1fffc000  1fffc000  00024000  2**0
                  ALLOC
  3 .ram_code     00000448  1fffc800  0c00ad48  00014800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .data         0000c674  1fffcc48  0c00b190  00014c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000051c  200092bc  0c017804  000212bc  2**2
                  ALLOC
  6 .no_init      00000020  2000ffc0  2000ffc0  00027fc0  2**2
                  ALLOC
  7 .debug_aranges 00001cf0  00000000  00000000  000212c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00037122  00000000  00000000  00022fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00005728  00000000  00000000  0005a0d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000eb98  00000000  00000000  0005f7fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00007c48  00000000  00000000  0006e394  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000140b5  00000000  00000000  00075fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0001004e  00000000  00000000  0008a091  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001950  00000000  00000000  0009a0df  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .build_attributes 00000e07  00000000  00000000  0009ba2f  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 c8 ff 1f 01 02 00 08 99 02 00 08 99 02 00 08     ................
 8000010:	99 02 00 08 99 02 00 08 99 02 00 08 00 00 00 00     ................
	...
 800002c:	99 02 00 08 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800003c:	a1 33 00 08 99 02 00 08 99 02 00 08 99 02 00 08     .3..............
 800004c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800005c:	99 02 00 08 99 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800007c:	99 02 00 08 e9 83 00 08 99 02 00 08 99 02 00 08     ................
 800008c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800009c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000dc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ec:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000fc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800010c:	99 02 00 08 11 83 00 08 99 02 00 08 99 02 00 08     ................
 800011c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800012c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800013c:	79 7b 00 08 81 7c 00 08 99 02 00 08 99 02 00 08     y{...|..........
 800014c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800015c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800016c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800017c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800018c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800019c:	35 53 00 08 99 02 00 08 45 53 00 08 29 2f 00 08     5S......ES..)/..
 80001ac:	19 2f 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ./..............
 80001bc:	99 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
 80001d8:	99 02 00 08 00 00 00 00 99 02 00 08 99 02 00 08     ................
 80001e8:	00 00 00 00 99 02 00 08 99 02 00 08 00 00 00 00     ................
	...

08000200 <Reset_Handler>:
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */
 8000200:	f8df d074 	ldr.w	sp, [pc, #116]	; 8000278 <__zero_table_end__>

	.align	1
    .thumb
 8000204:	481d      	ldr	r0, [pc, #116]	; (800027c <__zero_table_end__+0x4>)

 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c1d      	ldr	r4, [pc, #116]	; (8000280 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d1e      	ldr	r5, [pc, #120]	; (8000284 <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b18      	ldr	r3, [pc, #96]	; (8000288 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c19      	ldr	r4, [pc, #100]	; (800028c <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	4814      	ldr	r0, [pc, #80]	; (8000290 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	4814      	ldr	r0, [pc, #80]	; (8000294 <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c00b190 	.word	0x0c00b190
 800024c:	1fffcc48 	.word	0x1fffcc48
 8000250:	0000c674 	.word	0x0000c674
 8000254:	0c00ad48 	.word	0x0c00ad48
 8000258:	1fffc800 	.word	0x1fffc800
 800025c:	00000448 	.word	0x00000448

08000260 <__copy_table_end__>:
 8000260:	200092bc 	.word	0x200092bc
 8000264:	0000051c 	.word	0x0000051c
 8000268:	200097d8 	.word	0x200097d8
 800026c:	00000000 	.word	0x00000000
 8000270:	200097d8 	.word	0x200097d8
 8000274:	00000000 	.word	0x00000000

08000278 <__zero_table_end__>:
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */
 8000278:	1fffc800 	.word	0x1fffc800

	.align	1
    .thumb
 800027c:	0800029d 	.word	0x0800029d
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000280:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 8000284:	08000260 	.word	0x08000260
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000288:	08000260 	.word	0x08000260
	ldr	r4, =__zero_table_end__
 800028c:	08000278 	.word	0x08000278
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 8000290:	08009ab5 	.word	0x08009ab5
    blx  r0
#endif

    ldr  r0, =main
 8000294:	08008591 	.word	0x08008591

08000298 <BusFault_Handler>:
 	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 8000298:	e7fe      	b.n	8000298 <BusFault_Handler>
	...

0800029c <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 800029c:	b598      	push	{r3, r4, r7, lr}
 800029e:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80002a0:	4a08      	ldr	r2, [pc, #32]	; (80002c4 <SystemInit+0x28>)
 80002a2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002a6:	4614      	mov	r4, r2
 80002a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  memcpy(g_hrpwm_char_data, HRPWM_CHARDATA_LOC, 12);
 80002ae:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <SystemInit+0x2c>)
 80002b0:	4a06      	ldr	r2, [pc, #24]	; (80002cc <SystemInit+0x30>)
 80002b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80002b4:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  SystemCoreSetup();
 80002b8:	f005 f95e 	bl	8005578 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 80002bc:	f005 f9c6 	bl	800564c <SystemCoreClockSetup>
}
 80002c0:	bd98      	pop	{r3, r4, r7, pc}
 80002c2:	bf00      	nop
 80002c4:	2000ffc4 	.word	0x2000ffc4
 80002c8:	2000ffd4 	.word	0x2000ffd4
 80002cc:	20000084 	.word	0x20000084

080002d0 <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b084      	sub	sp, #16
 80002d4:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80002d6:	4b2f      	ldr	r3, [pc, #188]	; (8000394 <SystemCoreClockUpdate+0xc4>)
 80002d8:	68db      	ldr	r3, [r3, #12]
 80002da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d03e      	beq.n	8000360 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80002e2:	4b2d      	ldr	r3, [pc, #180]	; (8000398 <SystemCoreClockUpdate+0xc8>)
 80002e4:	68db      	ldr	r3, [r3, #12]
 80002e6:	f003 0301 	and.w	r3, r3, #1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d002      	beq.n	80002f4 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80002ee:	4b2b      	ldr	r3, [pc, #172]	; (800039c <SystemCoreClockUpdate+0xcc>)
 80002f0:	60fb      	str	r3, [r7, #12]
 80002f2:	e002      	b.n	80002fa <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80002f4:	f005 f9a0 	bl	8005638 <OSCHP_GetFrequency>
 80002f8:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80002fa:	4b27      	ldr	r3, [pc, #156]	; (8000398 <SystemCoreClockUpdate+0xc8>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	f003 0304 	and.w	r3, r3, #4
 8000302:	2b00      	cmp	r3, #0
 8000304:	d020      	beq.n	8000348 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 8000306:	4b24      	ldr	r3, [pc, #144]	; (8000398 <SystemCoreClockUpdate+0xc8>)
 8000308:	689b      	ldr	r3, [r3, #8]
 800030a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800030e:	0e1b      	lsrs	r3, r3, #24
 8000310:	3301      	adds	r3, #1
 8000312:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000314:	4b20      	ldr	r3, [pc, #128]	; (8000398 <SystemCoreClockUpdate+0xc8>)
 8000316:	689b      	ldr	r3, [r3, #8]
 8000318:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 800031c:	0a1b      	lsrs	r3, r3, #8
 800031e:	3301      	adds	r3, #1
 8000320:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8000322:	4b1d      	ldr	r3, [pc, #116]	; (8000398 <SystemCoreClockUpdate+0xc8>)
 8000324:	689b      	ldr	r3, [r3, #8]
 8000326:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800032a:	0c1b      	lsrs	r3, r3, #16
 800032c:	3301      	adds	r3, #1
 800032e:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8000330:	68bb      	ldr	r3, [r7, #8]
 8000332:	683a      	ldr	r2, [r7, #0]
 8000334:	fb02 f303 	mul.w	r3, r2, r3
 8000338:	68fa      	ldr	r2, [r7, #12]
 800033a:	fbb2 f3f3 	udiv	r3, r2, r3
 800033e:	687a      	ldr	r2, [r7, #4]
 8000340:	fb02 f303 	mul.w	r3, r2, r3
 8000344:	60fb      	str	r3, [r7, #12]
 8000346:	e00d      	b.n	8000364 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8000348:	4b13      	ldr	r3, [pc, #76]	; (8000398 <SystemCoreClockUpdate+0xc8>)
 800034a:	689b      	ldr	r3, [r3, #8]
 800034c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000350:	3301      	adds	r3, #1
 8000352:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 8000354:	68fa      	ldr	r2, [r7, #12]
 8000356:	683b      	ldr	r3, [r7, #0]
 8000358:	fbb2 f3f3 	udiv	r3, r2, r3
 800035c:	60fb      	str	r3, [r7, #12]
 800035e:	e001      	b.n	8000364 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8000360:	4b0e      	ldr	r3, [pc, #56]	; (800039c <SystemCoreClockUpdate+0xcc>)
 8000362:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8000364:	4b0b      	ldr	r3, [pc, #44]	; (8000394 <SystemCoreClockUpdate+0xc4>)
 8000366:	68db      	ldr	r3, [r3, #12]
 8000368:	b2db      	uxtb	r3, r3
 800036a:	3301      	adds	r3, #1
 800036c:	68fa      	ldr	r2, [r7, #12]
 800036e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000372:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000374:	4b07      	ldr	r3, [pc, #28]	; (8000394 <SystemCoreClockUpdate+0xc4>)
 8000376:	691b      	ldr	r3, [r3, #16]
 8000378:	f003 0301 	and.w	r3, r3, #1
 800037c:	3301      	adds	r3, #1
 800037e:	68fa      	ldr	r2, [r7, #12]
 8000380:	fbb2 f3f3 	udiv	r3, r2, r3
 8000384:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 8000386:	4a06      	ldr	r2, [pc, #24]	; (80003a0 <SystemCoreClockUpdate+0xd0>)
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	6013      	str	r3, [r2, #0]
}
 800038c:	3710      	adds	r7, #16
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	50004600 	.word	0x50004600
 8000398:	50004710 	.word	0x50004710
 800039c:	016e3600 	.word	0x016e3600
 80003a0:	2000ffc0 	.word	0x2000ffc0

080003a4 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 80003a4:	b480      	push	{r7}
 80003a6:	b085      	sub	sp, #20
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	60f8      	str	r0, [r7, #12]
 80003ac:	460b      	mov	r3, r1
 80003ae:	607a      	str	r2, [r7, #4]
 80003b0:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));

  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 80003b2:	7afb      	ldrb	r3, [r7, #11]
 80003b4:	089b      	lsrs	r3, r3, #2
 80003b6:	b2db      	uxtb	r3, r3
 80003b8:	4618      	mov	r0, r3
 80003ba:	7afb      	ldrb	r3, [r7, #11]
 80003bc:	089b      	lsrs	r3, r3, #2
 80003be:	b2db      	uxtb	r3, r3
 80003c0:	461a      	mov	r2, r3
 80003c2:	68fb      	ldr	r3, [r7, #12]
 80003c4:	3204      	adds	r2, #4
 80003c6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003ca:	7afb      	ldrb	r3, [r7, #11]
 80003cc:	f003 0303 	and.w	r3, r3, #3
 80003d0:	00db      	lsls	r3, r3, #3
 80003d2:	4619      	mov	r1, r3
 80003d4:	23f8      	movs	r3, #248	; 0xf8
 80003d6:	408b      	lsls	r3, r1
 80003d8:	43db      	mvns	r3, r3
 80003da:	ea02 0103 	and.w	r1, r2, r3
 80003de:	68fb      	ldr	r3, [r7, #12]
 80003e0:	1d02      	adds	r2, r0, #4
 80003e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80003ea:	7afb      	ldrb	r3, [r7, #11]
 80003ec:	005b      	lsls	r3, r3, #1
 80003ee:	4619      	mov	r1, r3
 80003f0:	2303      	movs	r3, #3
 80003f2:	408b      	lsls	r3, r1
 80003f4:	43db      	mvns	r3, r3
 80003f6:	401a      	ands	r2, r3
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	4a3a      	ldr	r2, [pc, #232]	; (80004e8 <XMC_GPIO_Init+0x144>)
 8000400:	4293      	cmp	r3, r2
 8000402:	d003      	beq.n	800040c <XMC_GPIO_Init+0x68>
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	4a39      	ldr	r2, [pc, #228]	; (80004ec <XMC_GPIO_Init+0x148>)
 8000408:	4293      	cmp	r3, r2
 800040a:	d10a      	bne.n	8000422 <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000410:	7afb      	ldrb	r3, [r7, #11]
 8000412:	2101      	movs	r1, #1
 8000414:	fa01 f303 	lsl.w	r3, r1, r3
 8000418:	43db      	mvns	r3, r3
 800041a:	401a      	ands	r2, r3
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	661a      	str	r2, [r3, #96]	; 0x60
 8000420:	e042      	b.n	80004a8 <XMC_GPIO_Init+0x104>
  }
  else
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	781b      	ldrb	r3, [r3, #0]
 8000426:	b2db      	uxtb	r3, r3
 8000428:	b25b      	sxtb	r3, r3
 800042a:	2b00      	cmp	r3, #0
 800042c:	da3c      	bge.n	80004a8 <XMC_GPIO_Init+0x104>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	685a      	ldr	r2, [r3, #4]
 8000432:	7afb      	ldrb	r3, [r7, #11]
 8000434:	409a      	lsls	r2, r3
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	605a      	str	r2, [r3, #4]

      /* Set output driver strength */
      port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 800043a:	7afb      	ldrb	r3, [r7, #11]
 800043c:	08db      	lsrs	r3, r3, #3
 800043e:	b2db      	uxtb	r3, r3
 8000440:	4618      	mov	r0, r3
 8000442:	7afb      	ldrb	r3, [r7, #11]
 8000444:	08db      	lsrs	r3, r3, #3
 8000446:	b2db      	uxtb	r3, r3
 8000448:	461a      	mov	r2, r3
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	3210      	adds	r2, #16
 800044e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000452:	7afb      	ldrb	r3, [r7, #11]
 8000454:	f003 0307 	and.w	r3, r3, #7
 8000458:	009b      	lsls	r3, r3, #2
 800045a:	4619      	mov	r1, r3
 800045c:	2307      	movs	r3, #7
 800045e:	408b      	lsls	r3, r1
 8000460:	43db      	mvns	r3, r3
 8000462:	ea02 0103 	and.w	r1, r2, r3
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	f100 0210 	add.w	r2, r0, #16
 800046c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8000470:	7afb      	ldrb	r3, [r7, #11]
 8000472:	08db      	lsrs	r3, r3, #3
 8000474:	b2db      	uxtb	r3, r3
 8000476:	4618      	mov	r0, r3
 8000478:	7afb      	ldrb	r3, [r7, #11]
 800047a:	08db      	lsrs	r3, r3, #3
 800047c:	b2db      	uxtb	r3, r3
 800047e:	461a      	mov	r2, r3
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	3210      	adds	r2, #16
 8000484:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	7a1b      	ldrb	r3, [r3, #8]
 800048c:	4619      	mov	r1, r3
 800048e:	7afb      	ldrb	r3, [r7, #11]
 8000490:	f003 0307 	and.w	r3, r3, #7
 8000494:	009b      	lsls	r3, r3, #2
 8000496:	fa01 f303 	lsl.w	r3, r1, r3
 800049a:	ea42 0103 	orr.w	r1, r2, r3
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	f100 0210 	add.w	r2, r0, #16
 80004a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 80004a8:	7afb      	ldrb	r3, [r7, #11]
 80004aa:	089b      	lsrs	r3, r3, #2
 80004ac:	b2db      	uxtb	r3, r3
 80004ae:	4618      	mov	r0, r3
 80004b0:	7afb      	ldrb	r3, [r7, #11]
 80004b2:	089b      	lsrs	r3, r3, #2
 80004b4:	b2db      	uxtb	r3, r3
 80004b6:	461a      	mov	r2, r3
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	3204      	adds	r2, #4
 80004bc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	4619      	mov	r1, r3
 80004c6:	7afb      	ldrb	r3, [r7, #11]
 80004c8:	f003 0303 	and.w	r3, r3, #3
 80004cc:	00db      	lsls	r3, r3, #3
 80004ce:	fa01 f303 	lsl.w	r3, r1, r3
 80004d2:	ea42 0103 	orr.w	r1, r2, r3
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	1d02      	adds	r2, r0, #4
 80004da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80004de:	3714      	adds	r7, #20
 80004e0:	46bd      	mov	sp, r7
 80004e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e6:	4770      	bx	lr
 80004e8:	48028e00 	.word	0x48028e00
 80004ec:	48028f00 	.word	0x48028f00

080004f0 <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80004f4:	4b03      	ldr	r3, [pc, #12]	; (8000504 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 80004f6:	681b      	ldr	r3, [r3, #0]
}
 80004f8:	4618      	mov	r0, r3
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	2000ffc0 	.word	0x2000ffc0

08000508 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  return(SCU_GENERAL->MIRRSTS);
 800050c:	4b03      	ldr	r3, [pc, #12]	; (800051c <XMC_SCU_GetMirrorStatus+0x14>)
 800050e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 8000512:	4618      	mov	r0, r3
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr
 800051c:	50004000 	.word	0x50004000

08000520 <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b084      	sub	sp, #16
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 8000528:	f7ff fed2 	bl	80002d0 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 800052c:	4b0b      	ldr	r3, [pc, #44]	; (800055c <XMC_SCU_lDelay+0x3c>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a0b      	ldr	r2, [pc, #44]	; (8000560 <XMC_SCU_lDelay+0x40>)
 8000532:	fba2 2303 	umull	r2, r3, r2, r3
 8000536:	0c9a      	lsrs	r2, r3, #18
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	fb02 f303 	mul.w	r3, r2, r3
 800053e:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 8000540:	2300      	movs	r3, #0
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	e003      	b.n	800054e <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 8000546:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	3301      	adds	r3, #1
 800054c:	60fb      	str	r3, [r7, #12]
 800054e:	68fa      	ldr	r2, [r7, #12]
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	429a      	cmp	r2, r3
 8000554:	d3f7      	bcc.n	8000546 <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 8000556:	3710      	adds	r7, #16
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	2000ffc0 	.word	0x2000ffc0
 8000560:	431bde83 	.word	0x431bde83

08000564 <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 8000564:	b5b0      	push	{r4, r5, r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af02      	add	r7, sp, #8
 800056a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
                 (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                 (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 800056c:	2000      	movs	r0, #0
 800056e:	f000 f89b 	bl	80006a8 <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 8000572:	f000 fa35 	bl	80009e0 <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	79db      	ldrb	r3, [r3, #7]
 800057a:	2b00      	cmp	r3, #0
 800057c:	d00a      	beq.n	8000594 <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 800057e:	f000 fa63 	bl	8000a48 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 8000582:	bf00      	nop
 8000584:	f000 fa58 	bl	8000a38 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 8000588:	4603      	mov	r3, r0
 800058a:	f083 0301 	eor.w	r3, r3, #1
 800058e:	b2db      	uxtb	r3, r3
 8000590:	2b00      	cmp	r3, #0
 8000592:	d1f7      	bne.n	8000584 <XMC_SCU_CLOCK_Init+0x20>
  }
  
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);  
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	7a5b      	ldrb	r3, [r3, #9]
 8000598:	4618      	mov	r0, r3
 800059a:	f000 f8ff 	bl	800079c <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 800059e:	bf00      	nop
 80005a0:	f7ff ffb2 	bl	8000508 <XMC_SCU_GetMirrorStatus>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d1fa      	bne.n	80005a0 <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	7a1b      	ldrb	r3, [r3, #8]
 80005ae:	4618      	mov	r0, r3
 80005b0:	f000 f9f0 	bl	8000994 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	7c1b      	ldrb	r3, [r3, #16]
 80005b8:	4618      	mov	r0, r3
 80005ba:	f000 f90d 	bl	80007d8 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	7c5b      	ldrb	r3, [r3, #17]
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 f930 	bl	8000828 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	7c9b      	ldrb	r3, [r3, #18]
 80005cc:	4618      	mov	r0, r3
 80005ce:	f000 f917 	bl	8000800 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	7cdb      	ldrb	r3, [r3, #19]
 80005d6:	4618      	mov	r0, r3
 80005d8:	f000 f93a 	bl	8000850 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	799b      	ldrb	r3, [r3, #6]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d00a      	beq.n	80005fa <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 80005e4:	f000 fa64 	bl	8000ab0 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 80005e8:	bf00      	nop
 80005ea:	f000 fa89 	bl	8000b00 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 80005ee:	4603      	mov	r3, r0
 80005f0:	f083 0301 	eor.w	r3, r3, #1
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d1f7      	bne.n	80005ea <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	78db      	ldrb	r3, [r3, #3]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d102      	bne.n	8000608 <XMC_SCU_CLOCK_Init+0xa4>
  {
    XMC_SCU_CLOCK_DisableSystemPll();
 8000602:	f000 faa1 	bl	8000b48 <XMC_SCU_CLOCK_DisableSystemPll>
 8000606:	e014      	b.n	8000632 <XMC_SCU_CLOCK_Init+0xce>
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 8000608:	f000 fa8e 	bl	8000b28 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	8899      	ldrh	r1, [r3, #4]
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000618:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800061e:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000624:	9300      	str	r3, [sp, #0]
 8000626:	4608      	mov	r0, r1
 8000628:	4611      	mov	r1, r2
 800062a:	462a      	mov	r2, r5
 800062c:	4623      	mov	r3, r4
 800062e:	f000 fa9b 	bl	8000b68 <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	68db      	ldr	r3, [r3, #12]
 8000636:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800063a:	d103      	bne.n	8000644 <XMC_SCU_CLOCK_Init+0xe0>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 800063c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000640:	f000 f832 	bl	80006a8 <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 8000644:	f7ff fe44 	bl	80002d0 <SystemCoreClockUpdate>
}
 8000648:	3708      	adds	r7, #8
 800064a:	46bd      	mov	sp, r7
 800064c:	bdb0      	pop	{r4, r5, r7, pc}
 800064e:	bf00      	nop

08000650 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8000650:	b480      	push	{r7}
 8000652:	b085      	sub	sp, #20
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	0f1b      	lsrs	r3, r3, #28
 800065c:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000664:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 8000666:	68fa      	ldr	r2, [r7, #12]
 8000668:	4613      	mov	r3, r2
 800066a:	005b      	lsls	r3, r3, #1
 800066c:	4413      	add	r3, r2
 800066e:	009b      	lsls	r3, r3, #2
 8000670:	461a      	mov	r2, r3
 8000672:	4b04      	ldr	r3, [pc, #16]	; (8000684 <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 8000674:	4413      	add	r3, r2
 8000676:	68ba      	ldr	r2, [r7, #8]
 8000678:	601a      	str	r2, [r3, #0]
}
 800067a:	3714      	adds	r7, #20
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	50004414 	.word	0x50004414

08000688 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 800068c:	f7ff ff30 	bl	80004f0 <XMC_SCU_CLOCK_GetCpuClockFrequency>
 8000690:	4602      	mov	r2, r0
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 8000692:	4b04      	ldr	r3, [pc, #16]	; (80006a4 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 8000694:	695b      	ldr	r3, [r3, #20]
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	fa22 f303 	lsr.w	r3, r2, r3
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}
 800069e:	4618      	mov	r0, r3
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	50004600 	.word	0x50004600

080006a8 <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 80006b0:	4906      	ldr	r1, [pc, #24]	; (80006cc <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80006b2:	4b06      	ldr	r3, [pc, #24]	; (80006cc <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80006b4:	68db      	ldr	r3, [r3, #12]
 80006b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	4313      	orrs	r3, r2
 80006be:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	50004600 	.word	0x50004600

080006d0 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 80006d8:	4906      	ldr	r1, [pc, #24]	; (80006f4 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 80006dc:	699b      	ldr	r3, [r3, #24]
 80006de:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	4313      	orrs	r3, r2
 80006e6:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	50004600 	.word	0x50004600

080006f8 <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 8000700:	4906      	ldr	r1, [pc, #24]	; (800071c <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8000702:	4b06      	ldr	r3, [pc, #24]	; (800071c <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8000704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000706:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4313      	orrs	r3, r2
 800070e:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 8000710:	370c      	adds	r7, #12
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	50004600 	.word	0x50004600

08000720 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 800072a:	88fb      	ldrh	r3, [r7, #6]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d108      	bne.n	8000742 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000730:	4a0a      	ldr	r2, [pc, #40]	; (800075c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000732:	4b0a      	ldr	r3, [pc, #40]	; (800075c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000734:	68db      	ldr	r3, [r3, #12]
 8000736:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800073a:	f023 0301 	bic.w	r3, r3, #1
 800073e:	60d3      	str	r3, [r2, #12]
 8000740:	e007      	b.n	8000752 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000742:	4a06      	ldr	r2, [pc, #24]	; (800075c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000744:	4b05      	ldr	r3, [pc, #20]	; (800075c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000746:	68db      	ldr	r3, [r3, #12]
 8000748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	60d3      	str	r3, [r2, #12]
  }
}
 8000752:	370c      	adds	r7, #12
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr
 800075c:	50004710 	.word	0x50004710

08000760 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800076a:	bf00      	nop
 800076c:	4b09      	ldr	r3, [pc, #36]	; (8000794 <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 800076e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000772:	f003 0308 	and.w	r3, r3, #8
 8000776:	2b00      	cmp	r3, #0
 8000778:	d1f8      	bne.n	800076c <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 800077a:	4907      	ldr	r1, [pc, #28]	; (8000798 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 800077e:	68db      	ldr	r3, [r3, #12]
 8000780:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 8000784:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 8000786:	4313      	orrs	r3, r2
 8000788:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 800078a:	370c      	adds	r7, #12
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr
 8000794:	50004000 	.word	0x50004000
 8000798:	50004300 	.word	0x50004300

0800079c <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80007a6:	bf00      	nop
 80007a8:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 80007aa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80007ae:	f003 0308 	and.w	r3, r3, #8
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d1f8      	bne.n	80007a8 <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80007b6:	4907      	ldr	r1, [pc, #28]	; (80007d4 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80007b8:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80007ba:	68db      	ldr	r3, [r3, #12]
 80007bc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 80007c0:	79fb      	ldrb	r3, [r7, #7]
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80007c2:	4313      	orrs	r3, r2
 80007c4:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	50004000 	.word	0x50004000
 80007d4:	50004300 	.word	0x50004300

080007d8 <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 80007e0:	4906      	ldr	r1, [pc, #24]	; (80007fc <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 80007e2:	4b06      	ldr	r3, [pc, #24]	; (80007fc <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 80007e4:	68db      	ldr	r3, [r3, #12]
 80007e6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 80007ee:	4313      	orrs	r3, r2
 80007f0:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 80007f2:	370c      	adds	r7, #12
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr
 80007fc:	50004600 	.word	0x50004600

08000800 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8000808:	4906      	ldr	r1, [pc, #24]	; (8000824 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 800080a:	4b06      	ldr	r3, [pc, #24]	; (8000824 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 800080c:	6a1b      	ldr	r3, [r3, #32]
 800080e:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8000816:	4313      	orrs	r3, r2
 8000818:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	50004600 	.word	0x50004600

08000828 <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000830:	4906      	ldr	r1, [pc, #24]	; (800084c <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8000832:	4b06      	ldr	r3, [pc, #24]	; (800084c <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8000834:	691b      	ldr	r3, [r3, #16]
 8000836:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 800083e:	4313      	orrs	r3, r2
 8000840:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 8000842:	370c      	adds	r7, #12
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr
 800084c:	50004600 	.word	0x50004600

08000850 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8000858:	4906      	ldr	r1, [pc, #24]	; (8000874 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 800085a:	4b06      	ldr	r3, [pc, #24]	; (8000874 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 800085c:	695b      	ldr	r3, [r3, #20]
 800085e:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8000866:	4313      	orrs	r3, r2
 8000868:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 800086a:	370c      	adds	r7, #12
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr
 8000874:	50004600 	.word	0x50004600

08000878 <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8000880:	4906      	ldr	r1, [pc, #24]	; (800089c <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8000882:	4b06      	ldr	r3, [pc, #24]	; (800089c <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8000884:	699b      	ldr	r3, [r3, #24]
 8000886:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 800088e:	4313      	orrs	r3, r2
 8000890:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
}
 8000892:	370c      	adds	r7, #12
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr
 800089c:	50004600 	.word	0x50004600

080008a0 <XMC_SCU_CLOCK_SetWdtClockDivider>:
}
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80008a8:	4906      	ldr	r1, [pc, #24]	; (80008c4 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 80008ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008ae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80008b6:	4313      	orrs	r3, r2
 80008b8:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr
 80008c4:	50004600 	.word	0x50004600

080008c8 <XMC_SCU_CLOCK_EnableClock>:
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 80008d2:	4a04      	ldr	r2, [pc, #16]	; (80008e4 <XMC_SCU_CLOCK_EnableClock+0x1c>)
 80008d4:	79fb      	ldrb	r3, [r7, #7]
 80008d6:	6053      	str	r3, [r2, #4]
}
 80008d8:	370c      	adds	r7, #12
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	50004600 	.word	0x50004600

080008e8 <XMC_SCU_CLOCK_UngatePeripheralClock>:
  *(uint32_t *)((&(SCU_CLK->CGATSET0)) + (index * 3U)) = (uint32_t)mask;
}

/* API to ungate a given module clock */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((peripheral & 0xf0000000UL) >> 28UL);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	0f1b      	lsrs	r3, r3, #28
 80008f4:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80008fc:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_CLK->CGATCLR0) + (index * 3U)) = (uint32_t)mask;
 80008fe:	68fa      	ldr	r2, [r7, #12]
 8000900:	4613      	mov	r3, r2
 8000902:	005b      	lsls	r3, r3, #1
 8000904:	4413      	add	r3, r2
 8000906:	009b      	lsls	r3, r3, #2
 8000908:	461a      	mov	r2, r3
 800090a:	4b04      	ldr	r3, [pc, #16]	; (800091c <XMC_SCU_CLOCK_UngatePeripheralClock+0x34>)
 800090c:	4413      	add	r3, r2
 800090e:	68ba      	ldr	r2, [r7, #8]
 8000910:	601a      	str	r2, [r3, #0]
}
 8000912:	3714      	adds	r7, #20
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr
 800091c:	50004648 	.word	0x50004648

08000920 <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 800092a:	4a19      	ldr	r2, [pc, #100]	; (8000990 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800092c:	4b18      	ldr	r3, [pc, #96]	; (8000990 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800092e:	695b      	ldr	r3, [r3, #20]
 8000930:	f043 0301 	orr.w	r3, r3, #1
 8000934:	6153      	str	r3, [r2, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000936:	4a16      	ldr	r2, [pc, #88]	; (8000990 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000938:	4b15      	ldr	r3, [pc, #84]	; (8000990 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800093a:	695b      	ldr	r3, [r3, #20]
 800093c:	f043 0310 	orr.w	r3, r3, #16
 8000940:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000942:	4913      	ldr	r1, [pc, #76]	; (8000990 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	3b01      	subs	r3, #1
 8000948:	021a      	lsls	r2, r3, #8
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	3b01      	subs	r3, #1
 800094e:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000950:	4313      	orrs	r3, r2
 8000952:	614b      	str	r3, [r1, #20]
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8000954:	4a0e      	ldr	r2, [pc, #56]	; (8000990 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000956:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000958:	695b      	ldr	r3, [r3, #20]
 800095a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800095e:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000960:	4a0b      	ldr	r2, [pc, #44]	; (8000990 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000962:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000964:	695b      	ldr	r3, [r3, #20]
 8000966:	f023 0310 	bic.w	r3, r3, #16
 800096a:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 800096c:	4a08      	ldr	r2, [pc, #32]	; (8000990 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800096e:	4b08      	ldr	r3, [pc, #32]	; (8000990 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000970:	695b      	ldr	r3, [r3, #20]
 8000972:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000976:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 8000978:	bf00      	nop
 800097a:	4b05      	ldr	r3, [pc, #20]	; (8000990 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800097c:	691b      	ldr	r3, [r3, #16]
 800097e:	f003 0304 	and.w	r3, r3, #4
 8000982:	2b00      	cmp	r3, #0
 8000984:	d0f9      	beq.n	800097a <XMC_SCU_CLOCK_StartUsbPll+0x5a>
  {
    /* wait for PLL Lock */
  }

}
 8000986:	370c      	adds	r7, #12
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr
 8000990:	50004710 	.word	0x50004710

08000994 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 800099e:	4a0f      	ldr	r2, [pc, #60]	; (80009dc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009a0:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80009a8:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 80009aa:	79fb      	ldrb	r3, [r7, #7]
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d10e      	bne.n	80009ce <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 80009b0:	4a0a      	ldr	r2, [pc, #40]	; (80009dc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009b2:	4b0a      	ldr	r3, [pc, #40]	; (80009dc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80009ba:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 80009bc:	2064      	movs	r0, #100	; 0x64
 80009be:	f7ff fdaf 	bl	8000520 <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 80009c2:	4a06      	ldr	r2, [pc, #24]	; (80009dc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009c4:	4b05      	ldr	r3, [pc, #20]	; (80009dc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80009cc:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 80009ce:	2064      	movs	r0, #100	; 0x64
 80009d0:	f7ff fda6 	bl	8000520 <XMC_SCU_lDelay>
}
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	50004710 	.word	0x50004710

080009e0 <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 80009e4:	4b12      	ldr	r3, [pc, #72]	; (8000a30 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f003 0301 	and.w	r3, r3, #1
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d109      	bne.n	8000a04 <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 80009f0:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80009f2:	2201      	movs	r2, #1
 80009f4:	605a      	str	r2, [r3, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 80009f6:	bf00      	nop
 80009f8:	4b0d      	ldr	r3, [pc, #52]	; (8000a30 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f003 0301 	and.w	r3, r3, #1
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d0f9      	beq.n	80009f8 <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8000a04:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d00a      	beq.n	8000a26 <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8000a10:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000a12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a16:	609a      	str	r2, [r3, #8]
    while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8000a18:	bf00      	nop
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d1f9      	bne.n	8000a1a <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	50004200 	.word	0x50004200
 8000a34:	50004400 	.word	0x50004400

08000a38 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  //return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
  return 1;
 8000a3c:	2301      	movs	r3, #1
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr

08000a48 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8000a4c:	bf00      	nop
 8000a4e:	4b16      	ldr	r3, [pc, #88]	; (8000aa8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 8000a50:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d1f8      	bne.n	8000a4e <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6>
  {
    /* Wait until no pending update to OSCULCTRL register in hibernate domain */
  }
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8000a5c:	4a13      	ldr	r2, [pc, #76]	; (8000aac <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8000a5e:	4b13      	ldr	r3, [pc, #76]	; (8000aac <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8000a60:	69db      	ldr	r3, [r3, #28]
 8000a62:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000a66:	61d3      	str	r3, [r2, #28]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8000a68:	bf00      	nop
 8000a6a:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 8000a6c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000a70:	f003 0308 	and.w	r3, r3, #8
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d1f8      	bne.n	8000a6a <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x22>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8000a78:	4a0c      	ldr	r2, [pc, #48]	; (8000aac <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8000a7a:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8000a7c:	68db      	ldr	r3, [r3, #12]
 8000a7e:	f043 0308 	orr.w	r3, r3, #8
 8000a82:	60d3      	str	r3, [r2, #12]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDSET_Msk)
 8000a84:	bf00      	nop
 8000a86:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 8000a88:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000a8c:	f003 0304 	and.w	r3, r3, #4
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d1f8      	bne.n	8000a86 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x3e>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDSET = (uint32_t)SCU_HIBERNATE_HDSET_ULPWDG_Msk;
 8000a94:	4b05      	ldr	r3, [pc, #20]	; (8000aac <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8000a96:	2208      	movs	r2, #8
 8000a98:	609a      	str	r2, [r3, #8]

  while (XMC_SCU_GetMirrorStatus() != 0)
 8000a9a:	bf00      	nop
 8000a9c:	f7ff fd34 	bl	8000508 <XMC_SCU_GetMirrorStatus>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d1fa      	bne.n	8000a9c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x54>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }
}
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	50004000 	.word	0x50004000
 8000aac:	50004300 	.word	0x50004300

08000ab0 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8000ab0:	b5b0      	push	{r4, r5, r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8000ab4:	4a0f      	ldr	r2, [pc, #60]	; (8000af4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000ab6:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000abe:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000ac0:	4d0d      	ldr	r5, [pc, #52]	; (8000af8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000ac2:	4b0d      	ldr	r3, [pc, #52]	; (8000af8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8000aca:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8000ace:	f004 fdb3 	bl	8005638 <OSCHP_GetFrequency>
 8000ad2:	4602      	mov	r2, r0
 8000ad4:	4b09      	ldr	r3, [pc, #36]	; (8000afc <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8000ad6:	fba3 2302 	umull	r2, r3, r3, r2
 8000ada:	0d1b      	lsrs	r3, r3, #20
 8000adc:	3b01      	subs	r3, #1
 8000ade:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000ae0:	4323      	orrs	r3, r4
 8000ae2:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000ae4:	4a03      	ldr	r2, [pc, #12]	; (8000af4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000ae6:	4b03      	ldr	r3, [pc, #12]	; (8000af4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000aee:	6053      	str	r3, [r2, #4]
}
 8000af0:	bdb0      	pop	{r4, r5, r7, pc}
 8000af2:	bf00      	nop
 8000af4:	50004710 	.word	0x50004710
 8000af8:	50004700 	.word	0x50004700
 8000afc:	6b5fca6b 	.word	0x6b5fca6b

08000b00 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8000b04:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000b0c:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000b10:	bf0c      	ite	eq
 8000b12:	2301      	moveq	r3, #1
 8000b14:	2300      	movne	r3, #0
 8000b16:	b2db      	uxtb	r3, r3
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	50004710 	.word	0x50004710

08000b28 <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000b2c:	4a05      	ldr	r2, [pc, #20]	; (8000b44 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000b2e:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b36:	f023 0302 	bic.w	r3, r3, #2
 8000b3a:	6053      	str	r3, [r2, #4]
}
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	50004710 	.word	0x50004710

08000b48 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000b4c:	4a05      	ldr	r2, [pc, #20]	; (8000b64 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000b4e:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b56:	f043 0302 	orr.w	r3, r3, #2
 8000b5a:	6053      	str	r3, [r2, #4]
}
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	50004710 	.word	0x50004710

08000b68 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60ba      	str	r2, [r7, #8]
 8000b70:	607b      	str	r3, [r7, #4]
 8000b72:	4603      	mov	r3, r0
 8000b74:	81fb      	strh	r3, [r7, #14]
 8000b76:	460b      	mov	r3, r1
 8000b78:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8000b7a:	89fb      	ldrh	r3, [r7, #14]
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff fdcf 	bl	8000720 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8000b82:	7b7b      	ldrb	r3, [r7, #13]
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	f040 8084 	bne.w	8000c92 <XMC_SCU_CLOCK_StartSystemPll+0x12a>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8000b8a:	89fb      	ldrh	r3, [r7, #14]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d109      	bne.n	8000ba4 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8000b90:	f004 fd52 	bl	8005638 <OSCHP_GetFrequency>
 8000b94:	4602      	mov	r2, r0
 8000b96:	4b4b      	ldr	r3, [pc, #300]	; (8000cc4 <XMC_SCU_CLOCK_StartSystemPll+0x15c>)
 8000b98:	fba3 2302 	umull	r2, r3, r3, r2
 8000b9c:	0c9b      	lsrs	r3, r3, #18
 8000b9e:	059b      	lsls	r3, r3, #22
 8000ba0:	617b      	str	r3, [r7, #20]
 8000ba2:	e002      	b.n	8000baa <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8000ba4:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000ba8:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	687a      	ldr	r2, [r7, #4]
 8000bae:	fb02 f203 	mul.w	r2, r2, r3
 8000bb2:	68bb      	ldr	r3, [r7, #8]
 8000bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bb8:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	4a42      	ldr	r2, [pc, #264]	; (8000cc8 <XMC_SCU_CLOCK_StartSystemPll+0x160>)
 8000bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8000bc2:	091b      	lsrs	r3, r3, #4
 8000bc4:	0d9b      	lsrs	r3, r3, #22
 8000bc6:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000bc8:	4a40      	ldr	r2, [pc, #256]	; (8000ccc <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000bca:	4b40      	ldr	r3, [pc, #256]	; (8000ccc <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	f043 0301 	orr.w	r3, r3, #1
 8000bd2:	6053      	str	r3, [r2, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8000bd4:	4a3d      	ldr	r2, [pc, #244]	; (8000ccc <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000bd6:	4b3d      	ldr	r3, [pc, #244]	; (8000ccc <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	f043 0310 	orr.w	r3, r3, #16
 8000bde:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000be0:	493a      	ldr	r1, [pc, #232]	; (8000ccc <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000be2:	4b3a      	ldr	r3, [pc, #232]	; (8000ccc <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000be4:	689a      	ldr	r2, [r3, #8]
 8000be6:	4b3a      	ldr	r3, [pc, #232]	; (8000cd0 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8000be8:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000bea:	687a      	ldr	r2, [r7, #4]
 8000bec:	3a01      	subs	r2, #1
 8000bee:	0212      	lsls	r2, r2, #8
 8000bf0:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	3b01      	subs	r3, #1
 8000bf6:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000bf8:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	3b01      	subs	r3, #1
 8000bfe:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000c00:	4313      	orrs	r3, r2
 8000c02:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000c04:	4a31      	ldr	r2, [pc, #196]	; (8000ccc <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c06:	4b31      	ldr	r3, [pc, #196]	; (8000ccc <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c0e:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000c10:	4a2e      	ldr	r2, [pc, #184]	; (8000ccc <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c12:	4b2e      	ldr	r3, [pc, #184]	; (8000ccc <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	f023 0310 	bic.w	r3, r3, #16
 8000c1a:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8000c1c:	4a2b      	ldr	r2, [pc, #172]	; (8000ccc <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c1e:	4b2b      	ldr	r3, [pc, #172]	; (8000ccc <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c26:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000c28:	bf00      	nop
 8000c2a:	4b28      	ldr	r3, [pc, #160]	; (8000ccc <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f003 0304 	and.w	r3, r3, #4
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d0f9      	beq.n	8000c2a <XMC_SCU_CLOCK_StartSystemPll+0xc2>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000c36:	4a25      	ldr	r2, [pc, #148]	; (8000ccc <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c38:	4b24      	ldr	r3, [pc, #144]	; (8000ccc <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	f023 0301 	bic.w	r3, r3, #1
 8000c40:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000c42:	bf00      	nop
 8000c44:	4b21      	ldr	r3, [pc, #132]	; (8000ccc <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f003 0301 	and.w	r3, r3, #1
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d1f9      	bne.n	8000c44 <XMC_SCU_CLOCK_StartSystemPll+0xdc>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	4a20      	ldr	r2, [pc, #128]	; (8000cd4 <XMC_SCU_CLOCK_StartSystemPll+0x16c>)
 8000c54:	fba2 2303 	umull	r2, r3, r2, r3
 8000c58:	095b      	lsrs	r3, r3, #5
 8000c5a:	0d9b      	lsrs	r3, r3, #22
 8000c5c:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000c5e:	6a3a      	ldr	r2, [r7, #32]
 8000c60:	693b      	ldr	r3, [r7, #16]
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d202      	bcs.n	8000c6c <XMC_SCU_CLOCK_StartSystemPll+0x104>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000c66:	6938      	ldr	r0, [r7, #16]
 8000c68:	f000 f838 	bl	8000cdc <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	085b      	lsrs	r3, r3, #1
 8000c70:	4a19      	ldr	r2, [pc, #100]	; (8000cd8 <XMC_SCU_CLOCK_StartSystemPll+0x170>)
 8000c72:	fba2 2303 	umull	r2, r3, r2, r3
 8000c76:	095b      	lsrs	r3, r3, #5
 8000c78:	0d9b      	lsrs	r3, r3, #22
 8000c7a:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000c7c:	6a3a      	ldr	r2, [r7, #32]
 8000c7e:	693b      	ldr	r3, [r7, #16]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d202      	bcs.n	8000c8a <XMC_SCU_CLOCK_StartSystemPll+0x122>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000c84:	6938      	ldr	r0, [r7, #16]
 8000c86:	f000 f829 	bl	8000cdc <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8000c8a:	6a38      	ldr	r0, [r7, #32]
 8000c8c:	f000 f826 	bl	8000cdc <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8000c90:	e015      	b.n	8000cbe <XMC_SCU_CLOCK_StartSystemPll+0x156>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000c92:	490e      	ldr	r1, [pc, #56]	; (8000ccc <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c94:	4b0d      	ldr	r3, [pc, #52]	; (8000ccc <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c96:	689b      	ldr	r3, [r3, #8]
 8000c98:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8000c9c:	6a3b      	ldr	r3, [r7, #32]
 8000c9e:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	608b      	str	r3, [r1, #8]
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000ca4:	4a09      	ldr	r2, [pc, #36]	; (8000ccc <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000ca6:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	f043 0301 	orr.w	r3, r3, #1
 8000cae:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000cb0:	bf00      	nop
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d0f9      	beq.n	8000cb2 <XMC_SCU_CLOCK_StartSystemPll+0x14a>
    {
      /* wait for prescaler mode */
    }
  }
}
 8000cbe:	3718      	adds	r7, #24
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	431bde83 	.word	0x431bde83
 8000cc8:	aaaaaaab 	.word	0xaaaaaaab
 8000ccc:	50004710 	.word	0x50004710
 8000cd0:	f08080ff 	.word	0xf08080ff
 8000cd4:	88888889 	.word	0x88888889
 8000cd8:	b60b60b7 	.word	0xb60b60b7

08000cdc <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000ce4:	4907      	ldr	r1, [pc, #28]	; (8000d04 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8000ce6:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8000ce8:	689b      	ldr	r3, [r3, #8]
 8000cea:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	3b01      	subs	r3, #1
 8000cf2:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	608b      	str	r3, [r1, #8]
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  XMC_SCU_lDelay(50U);
 8000cf8:	2032      	movs	r0, #50	; 0x32
 8000cfa:	f7ff fc11 	bl	8000520 <XMC_SCU_lDelay>
}
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	50004710 	.word	0x50004710

08000d08 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	60da      	str	r2, [r3, #12]
}
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop

08000d28 <XMC_CCU4_lDeassertReset>:
    XMC_ASSERT("XMC_CCU4_lAssertReset:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4a10      	ldr	r2, [pc, #64]	; (8000d74 <XMC_CCU4_lDeassertReset+0x4c>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d103      	bne.n	8000d40 <XMC_CCU4_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 8000d38:	2004      	movs	r0, #4
 8000d3a:	f7ff fc89 	bl	8000650 <XMC_SCU_RESET_DeassertPeripheralReset>
 8000d3e:	e016      	b.n	8000d6e <XMC_CCU4_lDeassertReset+0x46>
  }
#if defined(CCU41)
  else if (module == CCU41)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	4a0d      	ldr	r2, [pc, #52]	; (8000d78 <XMC_CCU4_lDeassertReset+0x50>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d103      	bne.n	8000d50 <XMC_CCU4_lDeassertReset+0x28>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 8000d48:	2008      	movs	r0, #8
 8000d4a:	f7ff fc81 	bl	8000650 <XMC_SCU_RESET_DeassertPeripheralReset>
 8000d4e:	e00e      	b.n	8000d6e <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	4a0a      	ldr	r2, [pc, #40]	; (8000d7c <XMC_CCU4_lDeassertReset+0x54>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d103      	bne.n	8000d60 <XMC_CCU4_lDeassertReset+0x38>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 8000d58:	2010      	movs	r0, #16
 8000d5a:	f7ff fc79 	bl	8000650 <XMC_SCU_RESET_DeassertPeripheralReset>
 8000d5e:	e006      	b.n	8000d6e <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4a07      	ldr	r2, [pc, #28]	; (8000d80 <XMC_CCU4_lDeassertReset+0x58>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d102      	bne.n	8000d6e <XMC_CCU4_lDeassertReset+0x46>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 8000d68:	4806      	ldr	r0, [pc, #24]	; (8000d84 <XMC_CCU4_lDeassertReset+0x5c>)
 8000d6a:	f7ff fc71 	bl	8000650 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	4000c000 	.word	0x4000c000
 8000d78:	40010000 	.word	0x40010000
 8000d7c:	40014000 	.word	0x40014000
 8000d80:	48004000 	.word	0x48004000
 8000d84:	10000001 	.word	0x10000001

08000d88 <XMC_CCU4_lUngateClock>:
    XMC_ASSERT("XMC_CCU4_lGateClock:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4a10      	ldr	r2, [pc, #64]	; (8000dd4 <XMC_CCU4_lUngateClock+0x4c>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d103      	bne.n	8000da0 <XMC_CCU4_lUngateClock+0x18>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
 8000d98:	2004      	movs	r0, #4
 8000d9a:	f7ff fda5 	bl	80008e8 <XMC_SCU_CLOCK_UngatePeripheralClock>
 8000d9e:	e016      	b.n	8000dce <XMC_CCU4_lUngateClock+0x46>
  }
#if defined(CCU41)
  else if (module == CCU41)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4a0d      	ldr	r2, [pc, #52]	; (8000dd8 <XMC_CCU4_lUngateClock+0x50>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d103      	bne.n	8000db0 <XMC_CCU4_lUngateClock+0x28>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU41);
 8000da8:	2008      	movs	r0, #8
 8000daa:	f7ff fd9d 	bl	80008e8 <XMC_SCU_CLOCK_UngatePeripheralClock>
 8000dae:	e00e      	b.n	8000dce <XMC_CCU4_lUngateClock+0x46>
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4a0a      	ldr	r2, [pc, #40]	; (8000ddc <XMC_CCU4_lUngateClock+0x54>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d103      	bne.n	8000dc0 <XMC_CCU4_lUngateClock+0x38>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU42);
 8000db8:	2010      	movs	r0, #16
 8000dba:	f7ff fd95 	bl	80008e8 <XMC_SCU_CLOCK_UngatePeripheralClock>
 8000dbe:	e006      	b.n	8000dce <XMC_CCU4_lUngateClock+0x46>
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	4a07      	ldr	r2, [pc, #28]	; (8000de0 <XMC_CCU4_lUngateClock+0x58>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d102      	bne.n	8000dce <XMC_CCU4_lUngateClock+0x46>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU43);
 8000dc8:	4806      	ldr	r0, [pc, #24]	; (8000de4 <XMC_CCU4_lUngateClock+0x5c>)
 8000dca:	f7ff fd8d 	bl	80008e8 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lUngateClock:Invalid Module Pointer", 0);
  }
}
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	4000c000 	.word	0x4000c000
 8000dd8:	40010000 	.word	0x40010000
 8000ddc:	40014000 	.word	0x40014000
 8000de0:	48004000 	.word	0x48004000
 8000de4:	10000001 	.word	0x10000001

08000de8 <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8000df0:	2010      	movs	r0, #16
 8000df2:	f7ff fd69 	bl	80008c8 <XMC_SCU_CLOCK_EnableClock>
#endif
  
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f7ff ffc6 	bl	8000d88 <XMC_CCU4_lUngateClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f7ff ff93 	bl	8000d28 <XMC_CCU4_lDeassertReset>
#endif
}
 8000e02:	3708      	adds	r7, #8
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	460b      	mov	r3, r1
 8000e12:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 8000e14:	6878      	ldr	r0, [r7, #4]
 8000e16:	f7ff ffe7 	bl	8000de8 <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f7ff ff74 	bl	8000d08 <XMC_CCU4_StartPrescaler>
  
  gctrl = module->GCTRL;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e2c:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 8000e2e:	78fb      	ldrb	r3, [r7, #3]
 8000e30:	039b      	lsls	r3, r3, #14
 8000e32:	68fa      	ldr	r2, [r7, #12]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	68fa      	ldr	r2, [r7, #12]
 8000e3c:	601a      	str	r2, [r3, #0]
}
 8000e3e:	3710      	adds	r7, #16
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <XMC_CCU4_SetMultiChannelShadowTransferMode>:
  module->GCTRL = gctrl;
}

/* API to configure the multichannel shadow transfer request via SW and via the CCU4x.MCSS input. */
void XMC_CCU4_SetMultiChannelShadowTransferMode(XMC_CCU4_MODULE_t *const module, const uint32_t slice_mode_msk)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6039      	str	r1, [r7, #0]
  uint32_t gctrl;

  XMC_ASSERT("XMC_CCU4_SetMultiChannelShadowTransferMode:Invalid module Pointer", XMC_CCU4_IsValidModule(module));
  
  gctrl = module->GCTRL;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t)slice_mode_msk >> 16U);
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	0c1b      	lsrs	r3, r3, #16
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	68fa      	ldr	r2, [r7, #12]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t)slice_mode_msk & 0xFFFFU);
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	68fa      	ldr	r2, [r7, #12]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	60fb      	str	r3, [r7, #12]
  module->GCTRL = gctrl;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	68fa      	ldr	r2, [r7, #12]
 8000e6e:	601a      	str	r2, [r3, #0]
}
 8000e70:	3714      	adds	r7, #20
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop

08000e7c <XMC_CCU4_SLICE_CompareInit>:

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	795b      	ldrb	r3, [r3, #5]
 8000e92:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	051a      	lsls	r2, r3, #20
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	791b      	ldrb	r3, [r3, #4]
 8000ea2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	795b      	ldrb	r3, [r3, #5]
 8000eb2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	461a      	mov	r2, r3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	795b      	ldrb	r3, [r3, #5]
 8000ec2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	461a      	mov	r2, r3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	791b      	ldrb	r3, [r3, #4]
 8000ed2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	461a      	mov	r2, r3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <XMC_CCU4_SLICE_StartConfig>:

/* API to configure the Start trigger function of a slice */
void XMC_CCU4_SLICE_StartConfig(XMC_CCU4_SLICE_t *const slice,
                            const XMC_CCU4_SLICE_EVENT_t event,
                                const XMC_CCU4_SLICE_START_MODE_t start_mode)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	70fb      	strb	r3, [r7, #3]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_StartConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_StartConfig:Invalid Start Mode", 
             ((start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR) ||\
              (start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START)));
  /* First, Bind the event with the stop function */
  cmc = slice->CMC;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	60bb      	str	r3, [r7, #8]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_STRTS_Msk);
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	f023 0303 	bic.w	r3, r3, #3
 8000f04:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_STRTS_Pos;
 8000f06:	78fb      	ldrb	r3, [r7, #3]
 8000f08:	68ba      	ldr	r2, [r7, #8]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	60bb      	str	r3, [r7, #8]

  slice->CMC = cmc;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	68ba      	ldr	r2, [r7, #8]
 8000f12:	605a      	str	r2, [r3, #4]
  
  tc  = slice->TC;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	695b      	ldr	r3, [r3, #20]
 8000f18:	60fb      	str	r3, [r7, #12]
  /* Next, Configure the start mode */
  if (start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR)
 8000f1a:	78bb      	ldrb	r3, [r7, #2]
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d104      	bne.n	8000f2a <XMC_CCU4_SLICE_StartConfig+0x42>
  {
    tc |= (uint32_t)CCU4_CC4_TC_STRM_Msk;
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	e003      	b.n	8000f32 <XMC_CCU4_SLICE_StartConfig+0x4a>
  }
  else
  {
    tc &= ~((uint32_t)CCU4_CC4_TC_STRM_Msk);
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000f30:	60fb      	str	r3, [r7, #12]
  }
  
  slice->TC = tc;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	68fa      	ldr	r2, [r7, #12]
 8000f36:	615a      	str	r2, [r3, #20]
}
 8000f38:	3714      	adds	r7, #20
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <XMC_CCU4_SLICE_StopConfig>:

/* API to configure the Stop trigger function of a slice */
void XMC_CCU4_SLICE_StopConfig(XMC_CCU4_SLICE_t *const slice,
                           const XMC_CCU4_SLICE_EVENT_t event,
                               const XMC_CCU4_SLICE_END_MODE_t end_mode)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	70fb      	strb	r3, [r7, #3]
 8000f50:	4613      	mov	r3, r2
 8000f52:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Start Mode", XMC_CCU4_CHECK_END_MODE(end_mode));
  
  /* First, Bind the event with the stop function */
  cmc = slice->CMC;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_ENDS_Msk);
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	f023 030c 	bic.w	r3, r3, #12
 8000f60:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_ENDS_Pos;
 8000f62:	78fb      	ldrb	r3, [r7, #3]
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	68fa      	ldr	r2, [r7, #12]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	68fa      	ldr	r2, [r7, #12]
 8000f70:	605a      	str	r2, [r3, #4]
  
  /* Next, Configure the stop mode */
  tc = slice->TC;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	695b      	ldr	r3, [r3, #20]
 8000f76:	60bb      	str	r3, [r7, #8]
  tc &= ~((uint32_t) CCU4_CC4_TC_ENDM_Msk);
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000f7e:	60bb      	str	r3, [r7, #8]
  tc |= ((uint32_t) end_mode) << CCU4_CC4_TC_ENDM_Pos;
 8000f80:	78bb      	ldrb	r3, [r7, #2]
 8000f82:	021b      	lsls	r3, r3, #8
 8000f84:	68ba      	ldr	r2, [r7, #8]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	60bb      	str	r3, [r7, #8]

  slice->TC = tc;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	68ba      	ldr	r2, [r7, #8]
 8000f8e:	615a      	str	r2, [r3, #20]
}
 8000f90:	3714      	adds	r7, #20
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <XMC_CCU4_SLICE_LoadConfig>:

/* API to configure the Load trigger function of a slice */
void XMC_CCU4_SLICE_LoadConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_SLICE_LoadConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_LoadConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the load function */
  cmc = slice->CMC;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_LDS_Msk);
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000fb4:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_LDS_Pos;
 8000fb6:	78fb      	ldrb	r3, [r7, #3]
 8000fb8:	031b      	lsls	r3, r3, #12
 8000fba:	68fa      	ldr	r2, [r7, #12]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	605a      	str	r2, [r3, #4]
}
 8000fc6:	3714      	adds	r7, #20
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <XMC_CCU4_SLICE_ModulationConfig>:
/* API to configure the slice modulation function */
void XMC_CCU4_SLICE_ModulationConfig(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_EVENT_t event,
                                     const XMC_CCU4_SLICE_MODULATION_MODE_t mod_mode,
                                     const bool synch_with_pwm)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	4608      	mov	r0, r1
 8000fda:	4611      	mov	r1, r2
 8000fdc:	461a      	mov	r2, r3
 8000fde:	4603      	mov	r3, r0
 8000fe0:	70fb      	strb	r3, [r7, #3]
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	70bb      	strb	r3, [r7, #2]
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	707b      	strb	r3, [r7, #1]
  XMC_ASSERT("XMC_CCU4_SLICE_ModulationConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_ModulationConfig:Invalid Modulation Mode",
             ((mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_OUT) ||\
              (mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_ST_OUT)));
  
  tc  = slice->TC;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	695b      	ldr	r3, [r3, #20]
 8000fee:	60fb      	str	r3, [r7, #12]
  cmc = slice->CMC;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	60bb      	str	r3, [r7, #8]
  
  /* First, Bind the event with the modulation function */
  cmc &= ~((uint32_t) CCU4_CC4_CMC_MOS_Msk);
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000ffc:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_MOS_Pos;
 8000ffe:	78fb      	ldrb	r3, [r7, #3]
 8001000:	049b      	lsls	r3, r3, #18
 8001002:	68ba      	ldr	r2, [r7, #8]
 8001004:	4313      	orrs	r3, r2
 8001006:	60bb      	str	r3, [r7, #8]
  slice->CMC = cmc;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	68ba      	ldr	r2, [r7, #8]
 800100c:	605a      	str	r2, [r3, #4]
  
  /* Next, Modulation mode */
  if (mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_OUT)
 800100e:	78bb      	ldrb	r3, [r7, #2]
 8001010:	2b01      	cmp	r3, #1
 8001012:	d104      	bne.n	800101e <XMC_CCU4_SLICE_ModulationConfig+0x4e>
  {
    tc |= (uint32_t) CCU4_CC4_TC_EMT_Msk;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	e003      	b.n	8001026 <XMC_CCU4_SLICE_ModulationConfig+0x56>
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_EMT_Msk);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001024:	60fb      	str	r3, [r7, #12]
  }

  /* Synchronization of modulation effect with PWM cycle */
  if (synch_with_pwm == (bool) true)
 8001026:	787b      	ldrb	r3, [r7, #1]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d004      	beq.n	8001036 <XMC_CCU4_SLICE_ModulationConfig+0x66>
  {
    tc |= (uint32_t) CCU4_CC4_TC_EMS_Msk;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	e003      	b.n	800103e <XMC_CCU4_SLICE_ModulationConfig+0x6e>
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_EMS_Msk);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800103c:	60fb      	str	r3, [r7, #12]
  }
  
  slice->TC = tc;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	68fa      	ldr	r2, [r7, #12]
 8001042:	615a      	str	r2, [r3, #20]
}
 8001044:	3714      	adds	r7, #20
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop

08001050 <XMC_CCU4_SLICE_CountConfig>:

/* API to configure the slice count function */
void XMC_CCU4_SLICE_CountConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	460b      	mov	r3, r1
 800105a:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_SLICE_CountConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CountConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));

  /* Bind the event with the count function */
  cmc = slice->CMC;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_CNTS_Msk);
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001068:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_CNTS_Pos;
 800106a:	78fb      	ldrb	r3, [r7, #3]
 800106c:	039b      	lsls	r3, r3, #14
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	4313      	orrs	r3, r2
 8001072:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	68fa      	ldr	r2, [r7, #12]
 8001078:	605a      	str	r2, [r3, #4]
}
 800107a:	3714      	adds	r7, #20
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <XMC_CCU4_SLICE_GateConfig>:

/* API to configure slice gate function */
void XMC_CCU4_SLICE_GateConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	460b      	mov	r3, r1
 800108e:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_SLICE_GateConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_GateConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the gate function */
  cmc = slice->CMC;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_GATES_Msk);
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800109c:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_GATES_Pos;
 800109e:	78fb      	ldrb	r3, [r7, #3]
 80010a0:	021b      	lsls	r3, r3, #8
 80010a2:	68fa      	ldr	r2, [r7, #12]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	68fa      	ldr	r2, [r7, #12]
 80010ac:	605a      	str	r2, [r3, #4]
}
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <XMC_CCU4_SLICE_DirectionConfig>:
  slice->CMC = cmc;
}

/* API to configure direction function */
void XMC_CCU4_SLICE_DirectionConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	460b      	mov	r3, r1
 80010c2:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_SLICE_DirectionConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_DirectionConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the direction function */
  cmc = slice->CMC;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_UDS_Msk);
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80010d0:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_UDS_Pos;
 80010d2:	78fb      	ldrb	r3, [r7, #3]
 80010d4:	029b      	lsls	r3, r3, #10
 80010d6:	68fa      	ldr	r2, [r7, #12]
 80010d8:	4313      	orrs	r3, r2
 80010da:	60fb      	str	r3, [r7, #12]
  
  slice->CMC = cmc;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	68fa      	ldr	r2, [r7, #12]
 80010e0:	605a      	str	r2, [r3, #4]
}
 80010e2:	3714      	adds	r7, #20
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <XMC_CCU4_SLICE_StatusBitOverrideConfig>:

/* API to configure slice status bit override function */
void XMC_CCU4_SLICE_StatusBitOverrideConfig(XMC_CCU4_SLICE_t *const slice)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  uint32_t cmc;
  
  XMC_ASSERT("XMC_CCU4_SLICE_StatusBitOverrideConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  
  /* Bind the event with the override function */
  cmc = slice->CMC;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	60fb      	str	r3, [r7, #12]
  /* Map status bit trigger override to Event 1 & 
         status bit value override to Event 2 */
  cmc &= ~((uint32_t) CCU4_CC4_CMC_OFS_Msk);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001100:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) 1) << CCU4_CC4_CMC_OFS_Pos;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001108:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	68fa      	ldr	r2, [r7, #12]
 800110e:	605a      	str	r2, [r3, #4]
}
 8001110:	3714      	adds	r7, #20
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop

0800111c <XMC_CCU4_SLICE_TrapConfig>:

/* API to configure trap function */
void XMC_CCU4_SLICE_TrapConfig(XMC_CCU4_SLICE_t *const slice,
                               const XMC_CCU4_SLICE_TRAP_EXIT_MODE_t exit_mode,
                               const bool synch_with_pwm)
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	460b      	mov	r3, r1
 8001126:	70fb      	strb	r3, [r7, #3]
 8001128:	4613      	mov	r3, r2
 800112a:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_TrapConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_TrapConfig:Invalid Exit Mode", ((exit_mode == XMC_CCU4_SLICE_TRAP_EXIT_MODE_AUTOMATIC) ||\
                                                             (exit_mode == XMC_CCU4_SLICE_TRAP_EXIT_MODE_SW)));
    
  /* First, Map trap function to Event 2 */
  cmc = slice->CMC;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	60bb      	str	r3, [r7, #8]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_TS_Msk);
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001138:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) 1) << CCU4_CC4_CMC_TS_Pos;
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001140:	60bb      	str	r3, [r7, #8]
  slice->CMC = cmc;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	68ba      	ldr	r2, [r7, #8]
 8001146:	605a      	str	r2, [r3, #4]
  
  /* Next, Configure synchronization option */
  tc = slice->TC;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	695b      	ldr	r3, [r3, #20]
 800114c:	60fb      	str	r3, [r7, #12]

  if (synch_with_pwm == (bool) true)
 800114e:	78bb      	ldrb	r3, [r7, #2]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d004      	beq.n	800115e <XMC_CCU4_SLICE_TrapConfig+0x42>
  {
    tc |= (uint32_t) CCU4_CC4_TC_TRPSE_Msk;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	e003      	b.n	8001166 <XMC_CCU4_SLICE_TrapConfig+0x4a>
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_TRPSE_Msk);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001164:	60fb      	str	r3, [r7, #12]
  }
  
  /* Configure exit mode */
  if (exit_mode == XMC_CCU4_SLICE_TRAP_EXIT_MODE_SW)
 8001166:	78fb      	ldrb	r3, [r7, #3]
 8001168:	2b01      	cmp	r3, #1
 800116a:	d104      	bne.n	8001176 <XMC_CCU4_SLICE_TrapConfig+0x5a>
  {
    tc |= (uint32_t) CCU4_CC4_TC_TRPSW_Msk;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	e003      	b.n	800117e <XMC_CCU4_SLICE_TrapConfig+0x62>
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_TRPSW_Msk);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800117c:	60fb      	str	r3, [r7, #12]
  }
  
  slice->TC = tc;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	68fa      	ldr	r2, [r7, #12]
 8001182:	615a      	str	r2, [r3, #20]
}
 8001184:	3714      	adds	r7, #20
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop

08001190 <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent>:

/* API to configure a slice Status Bit Override event */
void XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent(XMC_CCU4_SLICE_t *const slice,
                                                    const XMC_CCU4_SLICE_EVENT_CONFIG_t *const ev1_config,
                                                    const XMC_CCU4_SLICE_EVENT_CONFIG_t *const ev2_config)
{
 8001190:	b480      	push	{r7}
 8001192:	b087      	sub	sp, #28
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS1_EV2IS_Pos);
  ins |= ((uint32_t) ev2_config->mapped_input) << CCU4_CC4_INS1_EV2IS_Pos;
  
  slice->INS1 = ins;
#else
  ins = slice->INS;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	617b      	str	r3, [r7, #20]

  /* Configure the edge sensitivity for event 1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU4_CC4_INS_EV1EM_Pos);
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80011a8:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->edge) << CCU4_CC4_INS_EV1EM_Pos;
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	785b      	ldrb	r3, [r3, #1]
 80011ae:	049b      	lsls	r3, r3, #18
 80011b0:	697a      	ldr	r2, [r7, #20]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	617b      	str	r3, [r7, #20]
  
  /* Configure the edge sensitivity for event 2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU4_CC4_INS_EV2EM_Pos);
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80011bc:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->edge) << CCU4_CC4_INS_EV2EM_Pos;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	785b      	ldrb	r3, [r3, #1]
 80011c2:	051b      	lsls	r3, r3, #20
 80011c4:	697a      	ldr	r2, [r7, #20]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	617b      	str	r3, [r7, #20]
  
  /* Configure the level sensitivity for event 1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU4_CC4_INS_EV1LM_Pos);
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80011d0:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->level) << CCU4_CC4_INS_EV1LM_Pos;
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	789b      	ldrb	r3, [r3, #2]
 80011d6:	05db      	lsls	r3, r3, #23
 80011d8:	697a      	ldr	r2, [r7, #20]
 80011da:	4313      	orrs	r3, r2
 80011dc:	617b      	str	r3, [r7, #20]
  
  /* Configure the level sensitivity for event 2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU4_CC4_INS_EV2LM_Pos);
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80011e4:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->level) << CCU4_CC4_INS_EV2LM_Pos;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	789b      	ldrb	r3, [r3, #2]
 80011ea:	061b      	lsls	r3, r3, #24
 80011ec:	697a      	ldr	r2, [r7, #20]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	617b      	str	r3, [r7, #20]
  
  /* Configure the debounce filter for event 1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU4_CC4_INS_LPF1M_Pos);
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	f023 53c0 	bic.w	r3, r3, #402653184	; 0x18000000
 80011f8:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->duration) << CCU4_CC4_INS_LPF1M_Pos;
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	78db      	ldrb	r3, [r3, #3]
 80011fe:	06db      	lsls	r3, r3, #27
 8001200:	697a      	ldr	r2, [r7, #20]
 8001202:	4313      	orrs	r3, r2
 8001204:	617b      	str	r3, [r7, #20]

  /* Configure the debounce filter for event 2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU4_CC4_INS_LPF2M_Pos);
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800120c:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->duration) << CCU4_CC4_INS_LPF2M_Pos;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	78db      	ldrb	r3, [r3, #3]
 8001212:	075b      	lsls	r3, r3, #29
 8001214:	697a      	ldr	r2, [r7, #20]
 8001216:	4313      	orrs	r3, r2
 8001218:	617b      	str	r3, [r7, #20]
  
  /* Next, the input for Event1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS_EV1IS_Pos);
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001220:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->mapped_input) << CCU4_CC4_INS_EV1IS_Pos;
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	011b      	lsls	r3, r3, #4
 8001228:	697a      	ldr	r2, [r7, #20]
 800122a:	4313      	orrs	r3, r2
 800122c:	617b      	str	r3, [r7, #20]

  /* Finally, the input for Event2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS_EV2IS_Pos);
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001234:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->mapped_input) << CCU4_CC4_INS_EV2IS_Pos;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	021b      	lsls	r3, r3, #8
 800123c:	697a      	ldr	r2, [r7, #20]
 800123e:	4313      	orrs	r3, r2
 8001240:	617b      	str	r3, [r7, #20]
  
  slice->INS = ins;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	697a      	ldr	r2, [r7, #20]
 8001246:	601a      	str	r2, [r3, #0]
#endif
}
 8001248:	371c      	adds	r7, #28
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop

08001254 <XMC_CCU4_SLICE_ConfigureEvent>:

/* API to configure a slice trigger event */
void XMC_CCU4_SLICE_ConfigureEvent(XMC_CCU4_SLICE_t *const slice,
                                   const XMC_CCU4_SLICE_EVENT_t event,
                                   const XMC_CCU4_SLICE_EVENT_CONFIG_t *const config)
{
 8001254:	b480      	push	{r7}
 8001256:	b089      	sub	sp, #36	; 0x24
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	460b      	mov	r3, r1
 800125e:	607a      	str	r2, [r7, #4]
 8001260:	72fb      	strb	r3, [r7, #11]
             ((config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH) ||\
              (config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
  XMC_ASSERT("XMC_CCU4_SLICE_ConfigureEvent:Invalid Debounce Period", 
             XMC_CCU4_SLICE_CHECK_EVENT_FILTER(config->duration));
  /* Calculate offset with reference to event */
  offset = ((uint8_t) event) - 1U;
 8001262:	7afb      	ldrb	r3, [r7, #11]
 8001264:	3b01      	subs	r3, #1
 8001266:	77fb      	strb	r3, [r7, #31]
  ins |= ((uint32_t) config->mapped_input) << pos;

  slice->INS1 = ins;

#else
  ins = slice->INS;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	61bb      	str	r3, [r7, #24]
  
  /* First, configure the edge sensitivity */
  pos = ((uint8_t) CCU4_CC4_INS_EV0EM_Pos) + (uint8_t)(offset << 1U);
 800126e:	7ffb      	ldrb	r3, [r7, #31]
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	b2db      	uxtb	r3, r3
 8001274:	3310      	adds	r3, #16
 8001276:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
 8001278:	7dfb      	ldrb	r3, [r7, #23]
 800127a:	2203      	movs	r2, #3
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	43db      	mvns	r3, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4013      	ands	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->edge) << pos;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	785b      	ldrb	r3, [r3, #1]
 800128c:	461a      	mov	r2, r3
 800128e:	7dfb      	ldrb	r3, [r7, #23]
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4313      	orrs	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
  
  /* Next, the level */
  pos = ((uint8_t) CCU4_CC4_INS_EV0LM_Pos) + offset;
 800129a:	7ffb      	ldrb	r3, [r7, #31]
 800129c:	3316      	adds	r3, #22
 800129e:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
 80012a0:	7dfb      	ldrb	r3, [r7, #23]
 80012a2:	2201      	movs	r2, #1
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->level) << pos;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	789b      	ldrb	r3, [r3, #2]
 80012b4:	461a      	mov	r2, r3
 80012b6:	7dfb      	ldrb	r3, [r7, #23]
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4313      	orrs	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
  
  /* Next, the debounce filter */
  pos = ((uint8_t) CCU4_CC4_INS_LPF0M_Pos) + (uint8_t)(offset << 1U);
 80012c2:	7ffb      	ldrb	r3, [r7, #31]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	3319      	adds	r3, #25
 80012ca:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
 80012cc:	7dfb      	ldrb	r3, [r7, #23]
 80012ce:	2203      	movs	r2, #3
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	43db      	mvns	r3, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4013      	ands	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->duration) << pos;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	78db      	ldrb	r3, [r3, #3]
 80012e0:	461a      	mov	r2, r3
 80012e2:	7dfb      	ldrb	r3, [r7, #23]
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]

  /* Finally the input */
  pos = ((uint8_t) CCU4_CC4_INS_EV0IS_Pos) + (uint8_t)(offset << 2U);
 80012ee:	7ffb      	ldrb	r3, [r7, #31]
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 80012f4:	7dfb      	ldrb	r3, [r7, #23]
 80012f6:	220f      	movs	r2, #15
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4013      	ands	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->mapped_input) << pos;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	461a      	mov	r2, r3
 800130a:	7dfb      	ldrb	r3, [r7, #23]
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4313      	orrs	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]

  slice->INS = ins;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	601a      	str	r2, [r3, #0]
#endif
}
 800131c:	3724      	adds	r7, #36	; 0x24
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop

08001328 <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
 8001328:	b480      	push	{r7}
 800132a:	b087      	sub	sp, #28
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	460b      	mov	r3, r1
 8001332:	70fb      	strb	r3, [r7, #3]
 8001334:	4613      	mov	r3, r2
 8001336:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800133e:	60fb      	str	r3, [r7, #12]
  
  switch(event)
 8001340:	78fb      	ldrb	r3, [r7, #3]
 8001342:	2b09      	cmp	r3, #9
 8001344:	d82c      	bhi.n	80013a0 <XMC_CCU4_SLICE_SetInterruptNode+0x78>
 8001346:	a201      	add	r2, pc, #4	; (adr r2, 800134c <XMC_CCU4_SLICE_SetInterruptNode+0x24>)
 8001348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800134c:	08001375 	.word	0x08001375
 8001350:	08001375 	.word	0x08001375
 8001354:	0800137f 	.word	0x0800137f
 8001358:	0800137f 	.word	0x0800137f
 800135c:	080013a1 	.word	0x080013a1
 8001360:	080013a1 	.word	0x080013a1
 8001364:	080013a1 	.word	0x080013a1
 8001368:	080013a1 	.word	0x080013a1
 800136c:	08001389 	.word	0x08001389
 8001370:	08001395 	.word	0x08001395
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
 8001374:	2303      	movs	r3, #3
 8001376:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]
      break;
 800137c:	e016      	b.n	80013ac <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
 800137e:	230c      	movs	r3, #12
 8001380:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
 8001382:	2302      	movs	r3, #2
 8001384:	617b      	str	r3, [r7, #20]
      break;
 8001386:	e011      	b.n	80013ac <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
 8001388:	f44f 7340 	mov.w	r3, #768	; 0x300
 800138c:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
 800138e:	2308      	movs	r3, #8
 8001390:	617b      	str	r3, [r7, #20]
      break;
 8001392:	e00b      	b.n	80013ac <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
 8001394:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001398:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
 800139a:	230a      	movs	r3, #10
 800139c:	617b      	str	r3, [r7, #20]
      break;
 800139e:	e005      	b.n	80013ac <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    default:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
 80013a0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80013a4:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
 80013a6:	230c      	movs	r3, #12
 80013a8:	617b      	str	r3, [r7, #20]
      break;
 80013aa:	bf00      	nop
  }
  
  srs &= ~mask; 
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	43db      	mvns	r3, r3
 80013b0:	68fa      	ldr	r2, [r7, #12]
 80013b2:	4013      	ands	r3, r2
 80013b4:	60fb      	str	r3, [r7, #12]
  srs |= (uint32_t)sr << pos;
 80013b6:	78ba      	ldrb	r2, [r7, #2]
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	60fb      	str	r3, [r7, #12]
  slice->SRS = srs;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	68fa      	ldr	r2, [r7, #12]
 80013c8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 80013cc:	371c      	adds	r7, #28
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop

080013d8 <XMC_CCU8_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_Init()<BR>  XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPrescaler()<BR> 
 *  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU8_GIDLC_SPRB_Msk;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	60da      	str	r2, [r3, #12]
}
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop

080013f8 <XMC_CCU8_SLICE_StopTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StopTimer(XMC_CCU8_SLICE_t *const slice)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU8_CC8_TCCLR_TRBC_Msk;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2201      	movs	r2, #1
 8001404:	611a      	str	r2, [r3, #16]
}
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <XMC_CCU8_lDeassertReset>:
    XMC_ASSERT("XMC_CCU8_lAssertReset:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU8_lDeassertReset(const XMC_CCU8_MODULE_t *const module)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  if (module == CCU80)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4a09      	ldr	r2, [pc, #36]	; (8001440 <XMC_CCU8_lDeassertReset+0x30>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d103      	bne.n	8001428 <XMC_CCU8_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU80);
 8001420:	2080      	movs	r0, #128	; 0x80
 8001422:	f7ff f915 	bl	8000650 <XMC_SCU_RESET_DeassertPeripheralReset>
 8001426:	e007      	b.n	8001438 <XMC_CCU8_lDeassertReset+0x28>
  }
#if defined(CCU81)
  else if (module == CCU81)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4a06      	ldr	r2, [pc, #24]	; (8001444 <XMC_CCU8_lDeassertReset+0x34>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d103      	bne.n	8001438 <XMC_CCU8_lDeassertReset+0x28>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU81);
 8001430:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001434:	f7ff f90c 	bl	8000650 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU8_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40020000 	.word	0x40020000
 8001444:	40024000 	.word	0x40024000

08001448 <XMC_CCU8_lUngateClock>:
    XMC_ASSERT("XMC_CCU8_lGateClock:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU8_lUngateClock(XMC_CCU8_MODULE_t *const module)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  if (module == CCU80)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4a09      	ldr	r2, [pc, #36]	; (8001478 <XMC_CCU8_lUngateClock+0x30>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d103      	bne.n	8001460 <XMC_CCU8_lUngateClock+0x18>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU80);
 8001458:	2080      	movs	r0, #128	; 0x80
 800145a:	f7ff fa45 	bl	80008e8 <XMC_SCU_CLOCK_UngatePeripheralClock>
 800145e:	e007      	b.n	8001470 <XMC_CCU8_lUngateClock+0x28>
  }
#if defined(CCU81)
  else if (module == CCU81)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	4a06      	ldr	r2, [pc, #24]	; (800147c <XMC_CCU8_lUngateClock+0x34>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d103      	bne.n	8001470 <XMC_CCU8_lUngateClock+0x28>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU81);
 8001468:	f44f 7080 	mov.w	r0, #256	; 0x100
 800146c:	f7ff fa3c 	bl	80008e8 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU8_lUngateClock:Invalid Module Pointer", 0);
  }
}
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40020000 	.word	0x40020000
 800147c:	40024000 	.word	0x40024000

08001480 <XMC_CCU8_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/* API to set the CCU8 module as active and enable the clock  */
void XMC_CCU8_EnableModule(XMC_CCU8_MODULE_t *const module)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_EnableModule:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));

#if (UC_FAMILY == XMC4)
  /* Enable CCU8 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8001488:	2010      	movs	r0, #16
 800148a:	f7ff fa1d 	bl	80008c8 <XMC_SCU_CLOCK_EnableClock>
#endif

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU8_lUngateClock(module);
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7ff ffda 	bl	8001448 <XMC_CCU8_lUngateClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU8_lDeassertReset(module);
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f7ff ffbb 	bl	8001410 <XMC_CCU8_lDeassertReset>
#endif
}
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <XMC_CCU8_Init>:
#endif
}

/* API to initialize CCU8 global resources  */
void XMC_CCU8_Init(XMC_CCU8_MODULE_t *const module, const XMC_CCU8_SLICE_MCMS_ACTION_t mcs_action)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	460b      	mov	r3, r1
 80014aa:	70fb      	strb	r3, [r7, #3]

  XMC_ASSERT("XMC_CCU8_Init:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  XMC_ASSERT("XMC_CCU8_Init:Invalid mcs action", XMC_CCU8_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU8 module */
  XMC_CCU8_EnableModule(module);
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f7ff ffe7 	bl	8001480 <XMC_CCU8_EnableModule>
  /* Start the prescaler */
  XMC_CCU8_StartPrescaler(module);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff ff90 	bl	80013d8 <XMC_CCU8_StartPrescaler>
  
  gctrl = module->GCTRL;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU8_GCTRL_MSDE_Msk);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80014c4:	60fb      	str	r3, [r7, #12]
  gctrl |= (uint32_t)mcs_action << CCU8_GCTRL_MSDE_Pos;
 80014c6:	78fb      	ldrb	r3, [r7, #3]
 80014c8:	039b      	lsls	r3, r3, #14
 80014ca:	68fa      	ldr	r2, [r7, #12]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	68fa      	ldr	r2, [r7, #12]
 80014d4:	601a      	str	r2, [r3, #0]
}
 80014d6:	3710      	adds	r7, #16
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <XMC_CCU8_SLICE_CompareInit>:
}

/* API to configure CC8 Slice in Compare mode */
void XMC_CCU8_SLICE_CompareInit(XMC_CCU8_SLICE_t *const slice,
                                const XMC_CCU8_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Timer Init Pointer is NULL",
             (XMC_CCU8_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);
  /* Stops the timer */
  XMC_CCU8_SLICE_StopTimer(slice);
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f7ff ff86 	bl	80013f8 <XMC_CCU8_SLICE_StopTimer>
  /* Program the timer mode */
  slice->TC = compare_init->tc;
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC =  (uint32_t)compare_init->timer_concatenation << CCU8_CC8_CMC_TCE_Pos;
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	7b5b      	ldrb	r3, [r3, #13]
 80014f8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	051a      	lsls	r2, r3, #20
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	7b1b      	ldrb	r3, [r3, #12]
 8001508:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800150c:	b2db      	uxtb	r3, r3
 800150e:	461a      	mov	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	7b1b      	ldrb	r3, [r3, #12]
 8001518:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800151c:	b2db      	uxtb	r3, r3
 800151e:	461a      	mov	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	7b5b      	ldrb	r3, [r3, #13]
 8001528:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800152c:	b2db      	uxtb	r3, r3
 800152e:	461a      	mov	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->psl;
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685a      	ldr	r2, [r3, #4]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	619a      	str	r2, [r3, #24]
  /* Asymmetric PWM and Slice output routing configuration */
#if defined(CCU8V3) /* Defined for XMC1400 devices only */
  slice->CHC = (uint32_t) compare_init->chc;
#else
  slice->CHC = (uint32_t)((uint32_t)compare_init->chc ^ XMC_CCU8_SLICE_CHC_CONFIG_MASK);
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	f083 0214 	eor.w	r2, r3, #20
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	649a      	str	r2, [r3, #72]	; 0x48
#endif
}
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop

08001550 <XMC_CCU8_SLICE_SetOutPath>:
  slice->PSC = (uint32_t) capture_init->prescaler_initval;
}

/* API to configure the each output of the slice with either STx or inverted STx. */
void XMC_CCU8_SLICE_SetOutPath(XMC_CCU8_SLICE_t *const slice, const uint32_t out_path_msk)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
  uint32_t chc;
  XMC_ASSERT("XMC_CCU8_SLICE_SetOutPath:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  chc = slice->CHC;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800155e:	60fb      	str	r3, [r7, #12]
#if !defined(CCU8V3) /* Defined for all devices except XMC1400 */
  chc &= ~((uint32_t)out_path_msk >> 16U);
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	0c1b      	lsrs	r3, r3, #16
 8001564:	43db      	mvns	r3, r3
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	4013      	ands	r3, r2
 800156a:	60fb      	str	r3, [r7, #12]
  chc |= ((uint32_t)out_path_msk & 0xFFFFU);
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	b29b      	uxth	r3, r3
 8001570:	68fa      	ldr	r2, [r7, #12]
 8001572:	4313      	orrs	r3, r2
 8001574:	60fb      	str	r3, [r7, #12]
#else
  chc &= ~((uint32_t)((uint32_t)(out_path_msk & 0xCCCC0U) >> 2U));
  chc |= ((uint32_t)out_path_msk & 0x33330U);
#endif
  slice->CHC = chc;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	68fa      	ldr	r2, [r7, #12]
 800157a:	649a      	str	r2, [r3, #72]	; 0x48
}
 800157c:	3714      	adds	r7, #20
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop

08001588 <XMC_CCU8_SetMultiChannelShadowTransferMode>:

/* API to configure the multichannel shadow transfer request via SW and via the CCU8x.MCSS input. */
void XMC_CCU8_SetMultiChannelShadowTransferMode(XMC_CCU8_MODULE_t *const module, const uint32_t slice_mode_msk)
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
  uint32_t gctrl;

  XMC_ASSERT("XMC_CCU8_SetMultiChannelShadowTransferMode:Invalid module Pointer", XMC_CCU8_IsValidModule(module));
  
  gctrl = module->GCTRL;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t)slice_mode_msk >> 16U);
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	0c1b      	lsrs	r3, r3, #16
 800159c:	43db      	mvns	r3, r3
 800159e:	68fa      	ldr	r2, [r7, #12]
 80015a0:	4013      	ands	r3, r2
 80015a2:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t)slice_mode_msk & 0xFFFFU);
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	68fa      	ldr	r2, [r7, #12]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	60fb      	str	r3, [r7, #12]
  module->GCTRL = gctrl;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	68fa      	ldr	r2, [r7, #12]
 80015b2:	601a      	str	r2, [r3, #0]
}
 80015b4:	3714      	adds	r7, #20
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop

080015c0 <XMC_CCU8_SLICE_StartConfig>:

/* API to configure the Start trigger function of a slice*/
void XMC_CCU8_SLICE_StartConfig(XMC_CCU8_SLICE_t *const slice,
                                const XMC_CCU8_SLICE_EVENT_t event,
                                const XMC_CCU8_SLICE_START_MODE_t start_mode)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	460b      	mov	r3, r1
 80015ca:	70fb      	strb	r3, [r7, #3]
 80015cc:	4613      	mov	r3, r2
 80015ce:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Start Mode", 
             ((start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START) ||\
              (start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR)));
  cmc = slice->CMC;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	60bb      	str	r3, [r7, #8]

  cmc &= ~((uint32_t) CCU8_CC8_CMC_STRTS_Msk);
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	f023 0303 	bic.w	r3, r3, #3
 80015dc:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_STRTS_Pos;
 80015de:	78fb      	ldrb	r3, [r7, #3]
 80015e0:	68ba      	ldr	r2, [r7, #8]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	60bb      	str	r3, [r7, #8]

  slice->CMC = cmc;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	68ba      	ldr	r2, [r7, #8]
 80015ea:	605a      	str	r2, [r3, #4]

  tc  = slice->TC;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	695b      	ldr	r3, [r3, #20]
 80015f0:	60fb      	str	r3, [r7, #12]

  if(start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR)
 80015f2:	78bb      	ldrb	r3, [r7, #2]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d104      	bne.n	8001602 <XMC_CCU8_SLICE_StartConfig+0x42>
  {
    tc |= (uint32_t) CCU8_CC8_TC_STRM_Msk;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	e003      	b.n	800160a <XMC_CCU8_SLICE_StartConfig+0x4a>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_STRM_Msk);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001608:	60fb      	str	r3, [r7, #12]
  }

  slice->TC = tc;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	68fa      	ldr	r2, [r7, #12]
 800160e:	615a      	str	r2, [r3, #20]
}
 8001610:	3714      	adds	r7, #20
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop

0800161c <XMC_CCU8_SLICE_DirectionConfig>:
  slice->CMC = cmc;
}

/* API to configure direction function */
void XMC_CCU8_SLICE_DirectionConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	460b      	mov	r3, r1
 8001626:	70fb      	strb	r3, [r7, #3]
  uint32_t cmc;

  XMC_ASSERT("XMC_CCU8_SLICE_DirectionConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_DirectionConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));

  cmc = slice->CMC;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	60fb      	str	r3, [r7, #12]

  /* First, Bind the event with the direction function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_UDS_Msk);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001634:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_UDS_Pos;
 8001636:	78fb      	ldrb	r3, [r7, #3]
 8001638:	029b      	lsls	r3, r3, #10
 800163a:	68fa      	ldr	r2, [r7, #12]
 800163c:	4313      	orrs	r3, r2
 800163e:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	68fa      	ldr	r2, [r7, #12]
 8001644:	605a      	str	r2, [r3, #4]
}
 8001646:	3714      	adds	r7, #20
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <XMC_CCU8_SLICE_TrapConfig>:

/* API to configure trap function*/
void XMC_CCU8_SLICE_TrapConfig(XMC_CCU8_SLICE_t *const slice,
                               const XMC_CCU8_SLICE_TRAP_EXIT_MODE_t exit_mode,
                               const bool synch_with_pwm)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	460b      	mov	r3, r1
 800165a:	70fb      	strb	r3, [r7, #3]
 800165c:	4613      	mov	r3, r2
 800165e:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU8_SLICE_TrapConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_TrapConfig:Invalid Exit Mode", ((exit_mode == XMC_CCU8_SLICE_TRAP_EXIT_MODE_AUTOMATIC) ||\
                                                             (exit_mode == XMC_CCU8_SLICE_TRAP_EXIT_MODE_SW)));

  cmc = slice->CMC;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	60bb      	str	r3, [r7, #8]

  /* Map trap function to Event 2 */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_TS_Msk);
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800166c:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) 1) << CCU8_CC8_CMC_TS_Pos;
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001674:	60bb      	str	r3, [r7, #8]

  slice->CMC = cmc;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	68ba      	ldr	r2, [r7, #8]
 800167a:	605a      	str	r2, [r3, #4]

  tc = slice->TC;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	695b      	ldr	r3, [r3, #20]
 8001680:	60fb      	str	r3, [r7, #12]

  /* Configure synchronization option */
  if(synch_with_pwm == true)
 8001682:	78bb      	ldrb	r3, [r7, #2]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d004      	beq.n	8001692 <XMC_CCU8_SLICE_TrapConfig+0x42>
  {
    tc |= (uint32_t) CCU8_CC8_TC_TRPSE_Msk;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	e003      	b.n	800169a <XMC_CCU8_SLICE_TrapConfig+0x4a>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_TRPSE_Msk);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001698:	60fb      	str	r3, [r7, #12]
  }

  /* Configure exit mode */
  if(exit_mode == XMC_CCU8_SLICE_TRAP_EXIT_MODE_SW)
 800169a:	78fb      	ldrb	r3, [r7, #3]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d104      	bne.n	80016aa <XMC_CCU8_SLICE_TrapConfig+0x5a>
  {
    tc |= (uint32_t) CCU8_CC8_TC_TRPSW_Msk;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	e003      	b.n	80016b2 <XMC_CCU8_SLICE_TrapConfig+0x62>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_TRPSW_Msk);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80016b0:	60fb      	str	r3, [r7, #12]
  }

  slice->TC = tc;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	68fa      	ldr	r2, [r7, #12]
 80016b6:	615a      	str	r2, [r3, #20]
}
 80016b8:	3714      	adds	r7, #20
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop

080016c4 <XMC_CCU8_SLICE_ConfigureEvent>:

/* API to configure a slice trigger event */
void XMC_CCU8_SLICE_ConfigureEvent(XMC_CCU8_SLICE_t *const slice,
                                   const XMC_CCU8_SLICE_EVENT_t event,
                                   const XMC_CCU8_SLICE_EVENT_CONFIG_t *const config)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b089      	sub	sp, #36	; 0x24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	460b      	mov	r3, r1
 80016ce:	607a      	str	r2, [r7, #4]
 80016d0:	72fb      	strb	r3, [r7, #11]
              (config->level == XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
  XMC_ASSERT("XMC_CCU8_SLICE_ConfigureEvent:Invalid Debounce Period",
             XMC_CCU8_SLICE_CHECK_EVENT_FILTER(config->duration));

  /* Calculate offset with reference to event */
  offset = ((uint8_t) event) - 1U;
 80016d2:	7afb      	ldrb	r3, [r7, #11]
 80016d4:	3b01      	subs	r3, #1
 80016d6:	77fb      	strb	r3, [r7, #31]
  ins |= ((uint32_t) config->mapped_input) << pos;

  slice->INS1 = ins;

#else
  ins = slice->INS;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	61bb      	str	r3, [r7, #24]

  /* First, configure the edge sensitivity */
  pos = ((uint8_t) CCU8_CC8_INS_EV0EM_Pos) + (uint8_t)(offset << 1U);
 80016de:	7ffb      	ldrb	r3, [r7, #31]
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	3310      	adds	r3, #16
 80016e6:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
 80016e8:	7dfb      	ldrb	r3, [r7, #23]
 80016ea:	2203      	movs	r2, #3
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	43db      	mvns	r3, r3
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	4013      	ands	r3, r2
 80016f6:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->edge) << pos;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	785b      	ldrb	r3, [r3, #1]
 80016fc:	461a      	mov	r2, r3
 80016fe:	7dfb      	ldrb	r3, [r7, #23]
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	4313      	orrs	r3, r2
 8001708:	61bb      	str	r3, [r7, #24]

  /* Next, the level */
  pos = ((uint8_t) CCU8_CC8_INS_EV0LM_Pos) + offset;
 800170a:	7ffb      	ldrb	r3, [r7, #31]
 800170c:	3316      	adds	r3, #22
 800170e:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
 8001710:	7dfb      	ldrb	r3, [r7, #23]
 8001712:	2201      	movs	r2, #1
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	43db      	mvns	r3, r3
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	4013      	ands	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) (config->level)) << pos;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	789b      	ldrb	r3, [r3, #2]
 8001724:	461a      	mov	r2, r3
 8001726:	7dfb      	ldrb	r3, [r7, #23]
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	4313      	orrs	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]

  /* Next, the debounce filter */
  pos = ((uint8_t) CCU8_CC8_INS_LPF0M_Pos) + (uint8_t)(offset << 1U);
 8001732:	7ffb      	ldrb	r3, [r7, #31]
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	b2db      	uxtb	r3, r3
 8001738:	3319      	adds	r3, #25
 800173a:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
 800173c:	7dfb      	ldrb	r3, [r7, #23]
 800173e:	2203      	movs	r2, #3
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	43db      	mvns	r3, r3
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	4013      	ands	r3, r2
 800174a:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->duration) << pos;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	78db      	ldrb	r3, [r3, #3]
 8001750:	461a      	mov	r2, r3
 8001752:	7dfb      	ldrb	r3, [r7, #23]
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	4313      	orrs	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]

  /* Finally the input */
  pos = ((uint8_t) CCU8_CC8_INS_EV0IS_Pos) + (uint8_t)(offset << 2U);
 800175e:	7ffb      	ldrb	r3, [r7, #31]
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 8001764:	7dfb      	ldrb	r3, [r7, #23]
 8001766:	220f      	movs	r2, #15
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	43db      	mvns	r3, r3
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	4013      	ands	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->mapped_input) << pos;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	461a      	mov	r2, r3
 800177a:	7dfb      	ldrb	r3, [r7, #23]
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	4313      	orrs	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]

  slice->INS = ins;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	601a      	str	r2, [r3, #0]
#endif
}
 800178c:	3724      	adds	r7, #36	; 0x24
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop

08001798 <XMC_CCU8_SLICE_SetTimerPeriodMatch>:
  slice->TC = tc;
}

/* Programs period match value of the timer  */
void XMC_CCU8_SLICE_SetTimerPeriodMatch(XMC_CCU8_SLICE_t *const slice, const uint16_t period_val)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	460b      	mov	r3, r1
 80017a2:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 80017a4:	887a      	ldrh	r2, [r7, #2]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <XMC_CCU8_SLICE_SetTimerCompareMatch>:

/* Programs timer compare match value for channel 1 or 2 */
void XMC_CCU8_SLICE_SetTimerCompareMatch(XMC_CCU8_SLICE_t *const slice,
                                         const XMC_CCU8_SLICE_COMPARE_CHANNEL_t channel,
                                         const uint16_t compare_val)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	460b      	mov	r3, r1
 80017be:	70fb      	strb	r3, [r7, #3]
 80017c0:	4613      	mov	r3, r2
 80017c2:	803b      	strh	r3, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid channel", XMC_CCU8_SLICE_CHECK_COMP_CHANNEL(channel));

  if (XMC_CCU8_SLICE_COMPARE_CHANNEL_1 == channel)
 80017c4:	78fb      	ldrb	r3, [r7, #3]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d103      	bne.n	80017d2 <XMC_CCU8_SLICE_SetTimerCompareMatch+0x1e>
  {
    slice->CR1S = (uint32_t) compare_val;
 80017ca:	883a      	ldrh	r2, [r7, #0]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	63da      	str	r2, [r3, #60]	; 0x3c
 80017d0:	e002      	b.n	80017d8 <XMC_CCU8_SLICE_SetTimerCompareMatch+0x24>
  }
  else
  {
    slice->CR2S = (uint32_t) compare_val;
 80017d2:	883a      	ldrh	r2, [r7, #0]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop

080017e4 <XMC_CCU8_SLICE_DeadTimeInit>:
}

/* Initializes Dead time configuration for the slice outputs */
void XMC_CCU8_SLICE_DeadTimeInit(XMC_CCU8_SLICE_t *const slice,
                                 const XMC_CCU8_SLICE_DEAD_TIME_CONFIG_t *const config)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_ConfigureDeadTime:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));

  /* Program dead time value for channel 1 */
  slice->DC1R = config->dc1r;
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685a      	ldr	r2, [r3, #4]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	651a      	str	r2, [r3, #80]	; 0x50
  /* Program dead time value for channel 2 */
  slice->DC2R = config->dc2r;
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	689a      	ldr	r2, [r3, #8]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	655a      	str	r2, [r3, #84]	; 0x54
  /* Program dead time control configuration */
  slice->DTC = config->dtc;
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <XMC_CCU8_SLICE_ConfigureStatusBitOutput>:
  slice->DTC |= ((uint32_t) div_val) << CCU8_CC8_DTC_DTCC_Pos;
}

/* Configures status ST1, ST2 mapping to STy */
void XMC_CCU8_SLICE_ConfigureStatusBitOutput(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_STATUS_t channel)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	460b      	mov	r3, r1
 800181a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_SLICE_ConfigureStatusBitOutput:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_ConfigureStatusBitOutput:Invalid Channel", XMC_CCU8_SLICE_CHECK_SLICE_STATUS(channel));

  slice->TC &= ~((uint32_t) CCU8_CC8_TC_STOS_Msk);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	695b      	ldr	r3, [r3, #20]
 8001820:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	615a      	str	r2, [r3, #20]
  slice->TC |= ((uint32_t) channel) << CCU8_CC8_TC_STOS_Pos;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	695a      	ldr	r2, [r3, #20]
 800182c:	78fb      	ldrb	r3, [r7, #3]
 800182e:	075b      	lsls	r3, r3, #29
 8001830:	431a      	orrs	r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	615a      	str	r2, [r3, #20]
}
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <XMC_GPIO_SetMode>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	460b      	mov	r3, r1
 800184a:	70fb      	strb	r3, [r7, #3]
 800184c:	4613      	mov	r3, r2
 800184e:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
 8001850:	78fb      	ldrb	r3, [r7, #3]
 8001852:	089b      	lsrs	r3, r3, #2
 8001854:	b2db      	uxtb	r3, r3
 8001856:	4618      	mov	r0, r3
 8001858:	78fb      	ldrb	r3, [r7, #3]
 800185a:	089b      	lsrs	r3, r3, #2
 800185c:	b2db      	uxtb	r3, r3
 800185e:	461a      	mov	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3204      	adds	r2, #4
 8001864:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001868:	78fb      	ldrb	r3, [r7, #3]
 800186a:	f003 0303 	and.w	r3, r3, #3
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	4619      	mov	r1, r3
 8001872:	23f8      	movs	r3, #248	; 0xf8
 8001874:	408b      	lsls	r3, r1
 8001876:	43db      	mvns	r3, r3
 8001878:	ea02 0103 	and.w	r1, r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	1d02      	adds	r2, r0, #4
 8001880:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8001884:	78fb      	ldrb	r3, [r7, #3]
 8001886:	089b      	lsrs	r3, r3, #2
 8001888:	b2db      	uxtb	r3, r3
 800188a:	4618      	mov	r0, r3
 800188c:	78fb      	ldrb	r3, [r7, #3]
 800188e:	089b      	lsrs	r3, r3, #2
 8001890:	b2db      	uxtb	r3, r3
 8001892:	461a      	mov	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3204      	adds	r2, #4
 8001898:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800189c:	78bb      	ldrb	r3, [r7, #2]
 800189e:	78f9      	ldrb	r1, [r7, #3]
 80018a0:	f001 0103 	and.w	r1, r1, #3
 80018a4:	00c9      	lsls	r1, r1, #3
 80018a6:	408b      	lsls	r3, r1
 80018a8:	ea42 0103 	orr.w	r1, r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	1d02      	adds	r2, r0, #4
 80018b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop

080018c0 <XMC_GPIO_SetHardwareControl>:

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	460b      	mov	r3, r1
 80018ca:	70fb      	strb	r3, [r7, #3]
 80018cc:	4613      	mov	r3, r2
 80018ce:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80018d4:	78fb      	ldrb	r3, [r7, #3]
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	4619      	mov	r1, r3
 80018da:	2303      	movs	r3, #3
 80018dc:	408b      	lsls	r3, r1
 80018de:	43db      	mvns	r3, r3
 80018e0:	401a      	ands	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80018ea:	78bb      	ldrb	r3, [r7, #2]
 80018ec:	78f9      	ldrb	r1, [r7, #3]
 80018ee:	0049      	lsls	r1, r1, #1
 80018f0:	408b      	lsls	r3, r1
 80018f2:	431a      	orrs	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	675a      	str	r2, [r3, #116]	; 0x74
}
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop

08001904 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001910:	b2db      	uxtb	r3, r3
 8001912:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001916:	b2db      	uxtb	r3, r3
}
 8001918:	4618      	mov	r0, r3
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	431a      	orrs	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <XMC_I2C_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/
/* Initializes the USIC channel by setting the data format, slave address, baudrate, transfer buffer */
void XMC_I2C_CH_Init(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const config)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
  XMC_USIC_CH_Enable(channel);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f000 fa00 	bl	8001d54 <XMC_USIC_CH_Enable>
  
  /* Data format configuration */
  channel->SCTR = ((uint32_t)TRANSMISSION_MODE << (uint32_t)USIC_CH_SCTR_TRM_Pos) | /* Transmision mode */
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4a0e      	ldr	r2, [pc, #56]	; (8001990 <XMC_I2C_CH_Init+0x4c>)
 8001958:	635a      	str	r2, [r3, #52]	; 0x34
                  ((uint32_t)WORDLENGTH << (uint32_t)USIC_CH_SCTR_WLE_Pos) | /* 8 data bits */
                  USIC_CH_SCTR_FLE_Msk |           /* unlimited data flow */
                  USIC_CH_SCTR_SDIR_Msk |          /* MSB shifted first */
                  USIC_CH_SCTR_PDL_Msk;            /* Passive Data Level */

  XMC_I2C_CH_SetSlaveAddress(channel, config->address);
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	889b      	ldrh	r3, [r3, #4]
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	4619      	mov	r1, r3
 8001962:	f000 f817 	bl	8001994 <XMC_I2C_CH_SetSlaveAddress>
  (void)XMC_I2C_CH_SetBaudrate(channel, config->baudrate);
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	4619      	mov	r1, r3
 800196e:	f000 f831 	bl	80019d4 <XMC_I2C_CH_SetBaudrate>
    
  /* Enable transfer buffer */
  channel->TCSR = ((uint32_t)SET_TDV << (uint32_t)USIC_CH_TCSR_TDEN_Pos) | USIC_CH_TCSR_TDSSM_Msk;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8001978:	639a      	str	r2, [r3, #56]	; 0x38

  /* Clear status flags */
  channel->PSCR = 0xFFFFFFFFU;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f04f 32ff 	mov.w	r2, #4294967295
 8001980:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Disable parity generation */
  channel->CCR = 0x0U;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	073f0303 	.word	0x073f0303

08001994 <XMC_I2C_CH_SetSlaveAddress>:
/* Sets the slave address */
void XMC_I2C_CH_SetSlaveAddress(XMC_USIC_CH_t *const channel, const uint16_t address)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	460b      	mov	r3, r1
 800199e:	807b      	strh	r3, [r7, #2]
  if ((address & XMC_I2C_10BIT_ADDR_MASK) == XMC_I2C_10BIT_ADDR_GROUP)
 80019a0:	887b      	ldrh	r3, [r7, #2]
 80019a2:	f403 43f8 	and.w	r3, r3, #31744	; 0x7c00
 80019a6:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 80019aa:	d109      	bne.n	80019c0 <XMC_I2C_CH_SetSlaveAddress+0x2c>
  {
    channel->PCR_IICMode = (address & 0xffU) | ((address << 1) & 0xfe00U);
 80019ac:	887b      	ldrh	r3, [r7, #2]
 80019ae:	b2da      	uxtb	r2, r3
 80019b0:	887b      	ldrh	r3, [r7, #2]
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	f403 437e 	and.w	r3, r3, #65024	; 0xfe00
 80019b8:	431a      	orrs	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	63da      	str	r2, [r3, #60]	; 0x3c
 80019be:	e003      	b.n	80019c8 <XMC_I2C_CH_SetSlaveAddress+0x34>
  }
  else
  {
    channel->PCR_IICMode = ((uint32_t)address) << XMC_I2C_7BIT_ADDR_Pos;
 80019c0:	887b      	ldrh	r3, [r7, #2]
 80019c2:	021a      	lsls	r2, r3, #8
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	63da      	str	r2, [r3, #60]	; 0x3c
  }
}
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop

080019d4 <XMC_I2C_CH_SetBaudrate>:
  
  return (uint16_t)address;
}
/* Sets the baudrate and oversampling based on standard speed or fast speed */
XMC_I2C_CH_STATUS_t XMC_I2C_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  XMC_I2C_CH_STATUS_t status;
  
  status = XMC_I2C_CH_STATUS_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	73fb      	strb	r3, [r7, #15]
  
  if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_STANDARD)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	4a17      	ldr	r2, [pc, #92]	; (8001a44 <XMC_I2C_CH_SetBaudrate+0x70>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d810      	bhi.n	8001a0c <XMC_I2C_CH_SetBaudrate+0x38>
  {
		channel->PCR_IICMode &= (uint32_t)~USIC_CH_PCR_IICMode_STIM_Msk;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	63da      	str	r2, [r3, #60]	; 0x3c
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD) == XMC_USIC_CH_STATUS_OK)
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	6839      	ldr	r1, [r7, #0]
 80019fa:	220a      	movs	r2, #10
 80019fc:	f000 f9e4 	bl	8001dc8 <XMC_USIC_CH_SetBaudrate>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d119      	bne.n	8001a3a <XMC_I2C_CH_SetBaudrate+0x66>
    {
      status = XMC_I2C_CH_STATUS_OK;
 8001a06:	2300      	movs	r3, #0
 8001a08:	73fb      	strb	r3, [r7, #15]
 8001a0a:	e016      	b.n	8001a3a <XMC_I2C_CH_SetBaudrate+0x66>
    }
  }
  else if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_FAST)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	4a0e      	ldr	r2, [pc, #56]	; (8001a48 <XMC_I2C_CH_SetBaudrate+0x74>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d810      	bhi.n	8001a36 <XMC_I2C_CH_SetBaudrate+0x62>
  {
    channel->PCR_IICMode |= (uint32_t)USIC_CH_PCR_IICMode_STIM_Msk;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a18:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	63da      	str	r2, [r3, #60]	; 0x3c
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST) == XMC_USIC_CH_STATUS_OK)
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	6839      	ldr	r1, [r7, #0]
 8001a24:	2219      	movs	r2, #25
 8001a26:	f000 f9cf 	bl	8001dc8 <XMC_USIC_CH_SetBaudrate>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d104      	bne.n	8001a3a <XMC_I2C_CH_SetBaudrate+0x66>
    {
      status = XMC_I2C_CH_STATUS_OK;
 8001a30:	2300      	movs	r3, #0
 8001a32:	73fb      	strb	r3, [r7, #15]
 8001a34:	e001      	b.n	8001a3a <XMC_I2C_CH_SetBaudrate+0x66>
    }
  }
  else 
  {
    status = XMC_I2C_CH_STATUS_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8001a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3710      	adds	r7, #16
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	000186a0 	.word	0x000186a0
 8001a48:	00061a80 	.word	0x00061a80

08001a4c <XMC_I2C_CH_MasterStop>:
  }
}

/* Sends master stop command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStop(XMC_USIC_CH_t *const channel)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001a5a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d111      	bne.n	8001a86 <XMC_I2C_CH_MasterStop+0x3a>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8001a62:	bf00      	nop
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f7ff ff4d 	bl	8001904 <XMC_USIC_CH_GetTransmitBufferStatus>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b80      	cmp	r3, #128	; 0x80
 8001a6e:	d0f9      	beq.n	8001a64 <XMC_I2C_CH_MasterStop+0x18>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a76:	f7ff ff55 	bl	8001924 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001a80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001a84:	e004      	b.n	8001a90 <XMC_I2C_CH_MasterStop+0x44>
  }
  else
  {
    channel->IN[0U] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001a8c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop

08001a98 <XMC_I2C_CH_MasterTransmit>:

/* Sends master send command along with data to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterTransmit(XMC_USIC_CH_t *const channel, const uint8_t data)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	70fb      	strb	r3, [r7, #3]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001aaa:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d110      	bne.n	8001ad4 <XMC_I2C_CH_MasterTransmit+0x3c>
  {    
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8001ab2:	bf00      	nop
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f7ff ff25 	bl	8001904 <XMC_USIC_CH_GetTransmitBufferStatus>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b80      	cmp	r3, #128	; 0x80
 8001abe:	d0f9      	beq.n	8001ab4 <XMC_I2C_CH_MasterTransmit+0x1c>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ac6:	f7ff ff2d 	bl	8001924 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 8001aca:	78fa      	ldrb	r2, [r7, #3]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001ad2:	e003      	b.n	8001adc <XMC_I2C_CH_MasterTransmit+0x44>
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 8001ad4:	78fa      	ldrb	r2, [r7, #3]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop

08001ae4 <XMC_I2C_CH_MasterReceiveAck>:
  }
}

/* Sends master receive ack command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterReceiveAck(XMC_USIC_CH_t *const channel)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
/* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001af2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d111      	bne.n	8001b1e <XMC_I2C_CH_MasterReceiveAck+0x3a>
  {    
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8001afa:	bf00      	nop
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f7ff ff01 	bl	8001904 <XMC_USIC_CH_GetTransmitBufferStatus>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b80      	cmp	r3, #128	; 0x80
 8001b06:	d0f9      	beq.n	8001afc <XMC_I2C_CH_MasterReceiveAck+0x18>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b0e:	f7ff ff09 	bl	8001924 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001b1c:	e004      	b.n	8001b28 <XMC_I2C_CH_MasterReceiveAck+0x44>
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b24:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop

08001b30 <XMC_I2C_CH_MasterReceiveNack>:

/* Sends master receive nack command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterReceiveNack(XMC_USIC_CH_t *const channel)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001b3e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d111      	bne.n	8001b6a <XMC_I2C_CH_MasterReceiveNack+0x3a>
  {    
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8001b46:	bf00      	nop
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f7ff fedb 	bl	8001904 <XMC_USIC_CH_GetTransmitBufferStatus>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b80      	cmp	r3, #128	; 0x80
 8001b52:	d0f9      	beq.n	8001b48 <XMC_I2C_CH_MasterReceiveNack+0x18>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b5a:	f7ff fee3 	bl	8001924 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001b64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001b68:	e004      	b.n	8001b74 <XMC_I2C_CH_MasterReceiveNack+0x44>
  }
  else 
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001b70:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop

08001b7c <XMC_I2C_CH_GetReceivedData>:

/* Reads the data from RBUF if FIFO size is 0 otherwise from OUTR. */
uint8_t XMC_I2C_CH_GetReceivedData(const XMC_USIC_CH_t *const channel)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint8_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001b8a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d103      	bne.n	8001b9a <XMC_I2C_CH_GetReceivedData+0x1e>
  {
    retval = (uint8_t)channel->RBUF;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b96:	73fb      	strb	r3, [r7, #15]
 8001b98:	e003      	b.n	8001ba2 <XMC_I2C_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint8_t)channel->OUTR;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8001ba0:	73fb      	strb	r3, [r7, #15]
  }

  return retval;
 8001ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3714      	adds	r7, #20
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <XMC_I2C_CH_DisableEvent>:
  channel->CCR |= (event&0x1fc00U);
  channel->PCR_IICMode |= ((event) & 0x41fc0000U);
}

void XMC_I2C_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
  channel->CCR &= (uint32_t)~(event&0x1fc00U);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	f403 33fe 	and.w	r3, r3, #130048	; 0x1fc00
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	401a      	ands	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	641a      	str	r2, [r3, #64]	; 0x40
  channel->PCR_IICMode &= (uint32_t)~((event) & 0x41fc0000U);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001bd0:	6839      	ldr	r1, [r7, #0]
 8001bd2:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <XMC_I2C_CH_DisableEvent+0x38>)
 8001bd4:	400b      	ands	r3, r1
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	401a      	ands	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	41fc0000 	.word	0x41fc0000

08001bec <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001bfe:	b2db      	uxtb	r3, r3
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <XMC_UART_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  channel->PSCR = flag;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop

08001c28 <XMC_UART_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/

void XMC_UART_CH_Init(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;
 8001c32:	2310      	movs	r3, #16
 8001c34:	60fb      	str	r3, [r7, #12]

  /* USIC channel switched on*/
  XMC_USIC_CH_Enable(channel);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 f88c 	bl	8001d54 <XMC_USIC_CH_Enable>
  
  if(config->oversampling != 0U)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	79db      	ldrb	r3, [r3, #7]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d002      	beq.n	8001c4a <XMC_UART_CH_Init+0x22>
  {
    oversampling = (uint32_t)config->oversampling;
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	79db      	ldrb	r3, [r3, #7]
 8001c48:	60fb      	str	r3, [r7, #12]
  }
  
  /* Configure baud rate */
  (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, oversampling);
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	4619      	mov	r1, r3
 8001c52:	68fa      	ldr	r2, [r7, #12]
 8001c54:	f000 f8b8 	bl	8001dc8 <XMC_USIC_CH_SetBaudrate>
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	799b      	ldrb	r3, [r3, #6]
 8001c5c:	3b01      	subs	r3, #1
 8001c5e:	005a      	lsls	r2, r3, #1
                                    (((oversampling >> 1UL) + 1UL) << USIC_CH_PCR_ASCMode_SP_Pos) |
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	085b      	lsrs	r3, r3, #1
 8001c64:	3301      	adds	r3, #1
 8001c66:	021b      	lsls	r3, r3, #8
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8001c6e:	f043 0301 	orr.w	r3, r3, #1
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	63d3      	str	r3, [r2, #60]	; 0x3c
  /* Set passive data level, high
     Set word length. Data bits - 1
     If frame length is > 0, frame_lemgth-1; else, FLE = WLE (Data bits - 1)
     Transmission Mode: The shift control signal is considered active if it
     is at 1-level. This is the setting to be programmed to allow data transfers */
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	791b      	ldrb	r3, [r3, #4]
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	061b      	lsls	r3, r3, #24
 8001c7e:	f443 7281 	orr.w	r2, r3, #258	; 0x102
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	635a      	str	r2, [r3, #52]	; 0x34
                             ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));

  if (config->frame_length != 0U)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	795b      	ldrb	r3, [r3, #5]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d009      	beq.n	8001ca2 <XMC_UART_CH_Init+0x7a>
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	795b      	ldrb	r3, [r3, #5]
 8001c96:	3b01      	subs	r3, #1
 8001c98:	041b      	lsls	r3, r3, #16
 8001c9a:	431a      	orrs	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	635a      	str	r2, [r3, #52]	; 0x34
 8001ca0:	e008      	b.n	8001cb4 <XMC_UART_CH_Init+0x8c>
  }
  else
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_FLE_Pos);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	791b      	ldrb	r3, [r3, #4]
 8001caa:	3b01      	subs	r3, #1
 8001cac:	041b      	lsls	r3, r3, #16
 8001cae:	431a      	orrs	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Enable transfer buffer */
  channel->TCSR = (0x1UL << USIC_CH_TCSR_TDEN_Pos) |
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8001cba:	639a      	str	r2, [r3, #56]	; 0x38
                  USIC_CH_TCSR_TDSSM_Msk;

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f04f 32ff 	mov.w	r2, #4294967295
 8001cc2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	891b      	ldrh	r3, [r3, #8]
 8001cc8:	461a      	mov	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001cce:	3710      	adds	r7, #16
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <XMC_UART_CH_Transmit>:
  } 
  return status;
}

void XMC_UART_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	460b      	mov	r3, r1
 8001cde:	807b      	strh	r3, [r7, #2]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0UL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001ce6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d110      	bne.n	8001d10 <XMC_UART_CH_Transmit+0x3c>
  {
    /* Wait till the Transmit Buffer is free for transmission */
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8001cee:	bf00      	nop
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f7ff ff7b 	bl	8001bec <XMC_USIC_CH_GetTransmitBufferStatus>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b80      	cmp	r3, #128	; 0x80
 8001cfa:	d0f9      	beq.n	8001cf0 <XMC_UART_CH_Transmit+0x1c>
    {
    }
  
    /* Clear the Transmit Buffer indication flag */
    XMC_UART_CH_ClearStatusFlag(channel, (uint32_t)XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d02:	f7ff ff83 	bl	8001c0c <XMC_UART_CH_ClearStatusFlag>
  
    /*Transmit data */
    channel->TBUF[0U] = data;
 8001d06:	887a      	ldrh	r2, [r7, #2]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001d0e:	e003      	b.n	8001d18 <XMC_UART_CH_Transmit+0x44>
  }
  else
  {
    channel->IN[0U] = data;
 8001d10:	887a      	ldrh	r2, [r7, #2]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop

08001d20 <XMC_UART_CH_GetReceivedData>:

uint16_t XMC_UART_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001d2e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d103      	bne.n	8001d3e <XMC_UART_CH_GetReceivedData+0x1e>
  {
    retval = (uint16_t)channel->RBUF;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d3a:	81fb      	strh	r3, [r7, #14]
 8001d3c:	e003      	b.n	8001d46 <XMC_UART_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8001d44:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 8001d46:	89fb      	ldrh	r3, [r7, #14]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3714      	adds	r7, #20
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	4a14      	ldr	r2, [pc, #80]	; (8001db0 <XMC_USIC_CH_Enable+0x5c>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d003      	beq.n	8001d6c <XMC_USIC_CH_Enable+0x18>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a13      	ldr	r2, [pc, #76]	; (8001db4 <XMC_USIC_CH_Enable+0x60>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d103      	bne.n	8001d74 <XMC_USIC_CH_Enable+0x20>
  {
    XMC_USIC_Enable(XMC_USIC0);
 8001d6c:	4812      	ldr	r0, [pc, #72]	; (8001db8 <XMC_USIC_CH_Enable+0x64>)
 8001d6e:	f000 f967 	bl	8002040 <XMC_USIC_Enable>
 8001d72:	e00a      	b.n	8001d8a <XMC_USIC_CH_Enable+0x36>
  }
#if defined(USIC1)
  else if((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a11      	ldr	r2, [pc, #68]	; (8001dbc <XMC_USIC_CH_Enable+0x68>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d003      	beq.n	8001d84 <XMC_USIC_CH_Enable+0x30>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	4a10      	ldr	r2, [pc, #64]	; (8001dc0 <XMC_USIC_CH_Enable+0x6c>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d102      	bne.n	8001d8a <XMC_USIC_CH_Enable+0x36>
  {
    XMC_USIC_Enable(XMC_USIC1);
 8001d84:	480f      	ldr	r0, [pc, #60]	; (8001dc4 <XMC_USIC_CH_Enable+0x70>)
 8001d86:	f000 f95b 	bl	8002040 <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2203      	movs	r2, #3
 8001d8e:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 8001d90:	bf00      	nop
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d0f9      	beq.n	8001d92 <XMC_USIC_CH_Enable+0x3e>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	f023 020f 	bic.w	r2, r3, #15
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40030000 	.word	0x40030000
 8001db4:	40030200 	.word	0x40030200
 8001db8:	40030008 	.word	0x40030008
 8001dbc:	48020000 	.word	0x48020000
 8001dc0:	48020200 	.word	0x48020200
 8001dc4:	48020008 	.word	0x48020008

08001dc8 <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b08e      	sub	sp, #56	; 0x38
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
  
  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	2b63      	cmp	r3, #99	; 0x63
 8001dd8:	d958      	bls.n	8001e8c <XMC_USIC_CH_SetBaudrate+0xc4>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d055      	beq.n	8001e8c <XMC_USIC_CH_SetBaudrate+0xc4>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 8001de0:	f7fe fc52 	bl	8000688 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8001de4:	4602      	mov	r2, r0
 8001de6:	4b2e      	ldr	r3, [pc, #184]	; (8001ea0 <XMC_USIC_CH_SetBaudrate+0xd8>)
 8001de8:	fba3 2302 	umull	r2, r3, r3, r2
 8001dec:	095b      	lsrs	r3, r3, #5
 8001dee:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	4a2b      	ldr	r2, [pc, #172]	; (8001ea0 <XMC_USIC_CH_SetBaudrate+0xd8>)
 8001df4:	fba2 2303 	umull	r2, r3, r2, r3
 8001df8:	095b      	lsrs	r3, r3, #5
 8001dfa:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1U;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
 8001e00:	2301      	movs	r3, #1
 8001e02:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
 8001e04:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8001e08:	627b      	str	r3, [r7, #36]	; 0x24

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 8001e0a:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8001e0e:	633b      	str	r3, [r7, #48]	; 0x30
 8001e10:	e022      	b.n	8001e58 <XMC_USIC_CH_SetBaudrate+0x90>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 8001e12:	6a3b      	ldr	r3, [r7, #32]
 8001e14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e16:	fb02 f203 	mul.w	r2, r2, r3
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	6879      	ldr	r1, [r7, #4]
 8001e1e:	fb01 f303 	mul.w	r3, r1, r3
 8001e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e26:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	0a9b      	lsrs	r3, r3, #10
 8001e2c:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e34:	617b      	str	r3, [r7, #20]

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e3c:	d209      	bcs.n	8001e52 <XMC_USIC_CH_SetBaudrate+0x8a>
 8001e3e:	697a      	ldr	r2, [r7, #20]
 8001e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d205      	bcs.n	8001e52 <XMC_USIC_CH_SetBaudrate+0x8a>
      {
        pdiv_frac_min = pdiv_frac;
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
 8001e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e50:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 8001e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e54:	3b01      	subs	r3, #1
 8001e56:	633b      	str	r3, [r7, #48]	; 0x30
 8001e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1d9      	bne.n	8001e12 <XMC_USIC_CH_SetBaudrate+0x4a>
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 8001e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e60:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	611a      	str	r2, [r3, #16]
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	695a      	ldr	r2, [r3, #20]
 8001e6c:	4b0d      	ldr	r3, [pc, #52]	; (8001ea4 <XMC_USIC_CH_SetBaudrate+0xdc>)
 8001e6e:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	3a01      	subs	r2, #1
 8001e74:	0292      	lsls	r2, r2, #10
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 8001e76:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
 8001e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8001e7e:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
                    
    status = XMC_USIC_CH_STATUS_OK;
 8001e84:	2300      	movs	r3, #0
 8001e86:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001e8a:	e002      	b.n	8001e92 <XMC_USIC_CH_SetBaudrate+0xca>
  }
  else 
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  return status;
 8001e92:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3738      	adds	r7, #56	; 0x38
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	51eb851f 	.word	0x51eb851f
 8001ea4:	fc0080ef 	.word	0xfc0080ef

08001ea8 <XMC_USIC_CH_TXFIFO_Configure>:

void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	603b      	str	r3, [r7, #0]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001ebe:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001ece:	4b09      	ldr	r3, [pc, #36]	; (8001ef4 <XMC_USIC_CH_TXFIFO_Configure+0x4c>)
 8001ed0:	4013      	ands	r3, r2
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 8001ed2:	683a      	ldr	r2, [r7, #0]
 8001ed4:	0211      	lsls	r1, r2, #8
 8001ed6:	68ba      	ldr	r2, [r7, #8]
 8001ed8:	4311      	orrs	r1, r2
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
 8001eda:	79fa      	ldrb	r2, [r7, #7]
 8001edc:	0612      	lsls	r2, r2, #24
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 8001ede:	430a      	orrs	r2, r1
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
 8001ee0:	431a      	orrs	r2, r3
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
}
 8001ee8:	3714      	adds	r7, #20
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	f8ffc0c0 	.word	0xf8ffc0c0

08001ef8 <XMC_USIC_CH_RXFIFO_Configure>:

void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	603b      	str	r3, [r7, #0]
 8001f04:	4613      	mov	r3, r2
 8001f06:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001f0e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8001f1e:	4b0a      	ldr	r3, [pc, #40]	; (8001f48 <XMC_USIC_CH_RXFIFO_Configure+0x50>)
 8001f20:	4013      	ands	r3, r2
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
 8001f22:	683a      	ldr	r2, [r7, #0]
 8001f24:	0211      	lsls	r1, r2, #8
 8001f26:	68ba      	ldr	r2, [r7, #8]
 8001f28:	4311      	orrs	r1, r2
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
 8001f2a:	79fa      	ldrb	r2, [r7, #7]
 8001f2c:	0612      	lsls	r2, r2, #24
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
 8001f2e:	430a      	orrs	r2, r1
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8001f30:	4313      	orrs	r3, r2
 8001f32:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
                   (uint32_t)USIC_CH_RBCTR_LOF_Msk));
}
 8001f3c:	3714      	adds	r7, #20
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	efffc0c0 	.word	0xefffc0c0

08001f4c <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>:
}

void XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
                                            const XMC_USIC_CH_FIFO_SIZE_t size,
                                            const uint32_t limit)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	460b      	mov	r3, r1
 8001f56:	607a      	str	r2, [r7, #4]
 8001f58:	72fb      	strb	r3, [r7, #11]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001f60:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001f70:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	021b      	lsls	r3, r3, #8
                                            const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 8001f78:	431a      	orrs	r2, r3
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos));
 8001f7a:	7afb      	ldrb	r3, [r7, #11]
 8001f7c:	061b      	lsls	r3, r3, #24
                                            const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos));
}
 8001f86:	3714      	adds	r7, #20
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <XMC_USIC_CH_SetInterruptNodePointer>:

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	460b      	mov	r3, r1
 8001f9a:	607a      	str	r2, [r7, #4]
 8001f9c:	72fb      	strb	r3, [r7, #11]
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	699a      	ldr	r2, [r3, #24]
 8001fa2:	7afb      	ldrb	r3, [r7, #11]
 8001fa4:	2107      	movs	r1, #7
 8001fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8001faa:	43db      	mvns	r3, r3
 8001fac:	401a      	ands	r2, r3
                  (service_request << (uint32_t)interrupt_node));
 8001fae:	7afb      	ldrb	r3, [r7, #11]
 8001fb0:	6879      	ldr	r1, [r7, #4]
 8001fb2:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001fb6:	431a      	orrs	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	619a      	str	r2, [r3, #24]
                  (service_request << (uint32_t)interrupt_node));
}
 8001fbc:	3714      	adds	r7, #20
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop

08001fc8 <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>:

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	607a      	str	r2, [r7, #4]
 8001fd4:	72fb      	strb	r3, [r7, #11]
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001fdc:	7afb      	ldrb	r3, [r7, #11]
 8001fde:	2107      	movs	r1, #7
 8001fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	401a      	ands	r2, r3
                   (service_request << (uint32_t)interrupt_node));
 8001fe8:	7afb      	ldrb	r3, [r7, #11]
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001ff0:	431a      	orrs	r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (service_request << (uint32_t)interrupt_node));
}
 8001ff8:	3714      	adds	r7, #20
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop

08002004 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>:

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	460b      	mov	r3, r1
 800200e:	607a      	str	r2, [r7, #4]
 8002010:	72fb      	strb	r3, [r7, #11]
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8002018:	7afb      	ldrb	r3, [r7, #11]
 800201a:	2107      	movs	r1, #7
 800201c:	fa01 f303 	lsl.w	r3, r1, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	401a      	ands	r2, r3
                   (service_request << (uint32_t)interrupt_node));
 8002024:	7afb      	ldrb	r3, [r7, #11]
 8002026:	6879      	ldr	r1, [r7, #4]
 8002028:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 800202c:	431a      	orrs	r2, r3
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                   (service_request << (uint32_t)interrupt_node));
}
 8002034:	3714      	adds	r7, #20
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop

08002040 <XMC_USIC_Enable>:

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a0c      	ldr	r2, [pc, #48]	; (800207c <XMC_USIC_Enable+0x3c>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d108      	bne.n	8002062 <XMC_USIC_Enable+0x22>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
 8002050:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002054:	f7fe fc48 	bl	80008e8 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 8002058:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800205c:	f7fe faf8 	bl	8000650 <XMC_SCU_RESET_DeassertPeripheralReset>
 8002060:	e009      	b.n	8002076 <XMC_USIC_Enable+0x36>
#endif	
  }
#if defined(USIC1)  
  else if (usic == USIC1)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a06      	ldr	r2, [pc, #24]	; (8002080 <XMC_USIC_Enable+0x40>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d105      	bne.n	8002076 <XMC_USIC_Enable+0x36>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
 800206a:	4806      	ldr	r0, [pc, #24]	; (8002084 <XMC_USIC_Enable+0x44>)
 800206c:	f7fe fc3c 	bl	80008e8 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif	
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 8002070:	4804      	ldr	r0, [pc, #16]	; (8002084 <XMC_USIC_Enable+0x44>)
 8002072:	f7fe faed 	bl	8000650 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40030008 	.word	0x40030008
 8002080:	48020008 	.word	0x48020008
 8002084:	10000080 	.word	0x10000080

08002088 <XMC_VADC_GROUP_ExternalMuxControlInit>:
 * \par<b>Related APIs:</b><BR>
 * None
 */
__STATIC_INLINE void XMC_VADC_GROUP_ExternalMuxControlInit(XMC_VADC_GROUP_t *const group_ptr,
                                                           const XMC_VADC_GROUP_EMUXCFG_t emux_cfg)
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
 8002092:	783b      	ldrb	r3, [r7, #0]
 8002094:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8002098:	b2db      	uxtb	r3, r3
 800209a:	461a      	mov	r2, r3
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
 800209c:	887b      	ldrh	r3, [r7, #2]
 800209e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	041b      	lsls	r3, r3, #16
{
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
 80020a6:	4313      	orrs	r3, r2
 80020a8:	60fb      	str	r3, [r7, #12]
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 80020b2:	78fb      	ldrb	r3, [r7, #3]
 80020b4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	071a      	lsls	r2, r3, #28
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
 80020bc:	78fb      	ldrb	r3, [r7, #3]
 80020be:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	069b      	lsls	r3, r3, #26

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 80020c6:	431a      	orrs	r2, r3
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);
 80020c8:	78fb      	ldrb	r3, [r7, #3]
 80020ca:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	075b      	lsls	r3, r3, #29

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 80020d2:	4313      	orrs	r3, r2
 80020d4:	60fb      	str	r3, [r7, #12]
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);

#if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
  emux_config |= ((uint32_t)emux_cfg.emux_channel_select_style << (uint32_t)VADC_G_EMUXCTR_EMXCSS_Pos);
 80020d6:	78fb      	ldrb	r3, [r7, #3]
 80020d8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	079b      	lsls	r3, r3, #30
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	60fb      	str	r3, [r7, #12]
#endif
  group_ptr->EMUXCTR  |= (emux_config | ((uint32_t)VADC_G_EMUXCTR_EMXWC_Msk)) ;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f8d3 21f0 	ldr.w	r2, [r3, #496]	; 0x1f0
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
}
 80020fa:	3714      	adds	r7, #20
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <XMC_VADC_GROUP_BackgroundEnableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_BackgroundDisableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_BackgroundEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR |= (uint32_t)VADC_G_ARBPR_ASEN2_Msk;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002112:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop

08002128 <XMC_VADC_GROUP_BackgroundDisableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_BackgroundEnableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_BackgroundDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN2_Msk);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002136:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop

0800214c <XMC_VADC_GLOBAL_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/*API to enable the VADC Module*/
void XMC_VADC_GLOBAL_EnableModule(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
#if defined (COMPARATOR)
  COMPARATOR->ORCCTRL = (uint32_t)0xFF;
#endif

#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
 8002150:	2001      	movs	r0, #1
 8002152:	f7fe fbc9 	bl	80008e8 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  /* Reset the Hardware */
  XMC_SCU_RESET_DeassertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC );
 8002156:	2001      	movs	r0, #1
 8002158:	f7fe fa7a 	bl	8000650 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
}
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop

08002160 <XMC_VADC_GLOBAL_Init>:
}


/* API to initialize global resources */
void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *config)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  uint32_t reg;
#endif
  XMC_ASSERT("XMC_VADC_GLOBAL_Init:Wrong Module Pointer", (global_ptr == VADC))

  /* Enable the VADC module*/
  XMC_VADC_GLOBAL_EnableModule();
 800216a:	f7ff ffef 	bl	800214c <XMC_VADC_GLOBAL_EnableModule>

  global_ptr->CLC = (uint32_t)(config->clc);
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	695a      	ldr	r2, [r3, #20]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	601a      	str	r2, [r3, #0]

  /* Clock configuration */

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  global_ptr->GLOBCFG  = (uint32_t)(config->clock_config.globcfg | (uint32_t)(VADC_GLOBCFG_DIVWC_Msk));
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif

  /* ICLASS-0 configuration */
  global_ptr->GLOBICLASS[0] = (uint32_t)(config->class0.globiclass);
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* ICLASS-1 configuration */
  global_ptr->GLOBICLASS[1] = (uint32_t)(config->class1.globiclass);
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	68da      	ldr	r2, [r3, #12]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4


  /*Result generation related configuration */
  global_ptr->GLOBRCR = (uint32_t)(config->globrcr);
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	691a      	ldr	r2, [r3, #16]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280

#if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)

  /* Boundaries */
  global_ptr->GLOBBOUND = (uint32_t)(config->globbound);
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  /* From the Errata sheet of XMC1100 V1.7*/
  XMC_VADC_CONV_ENABLE_FOR_XMC11 = 1U;
#endif

}
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop

080021b4 <XMC_VADC_GLOBAL_InputClassInit>:

/* API to Set the Global IClass registers*/
void XMC_VADC_GLOBAL_InputClassInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CLASS_t config,
                                          const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	603b      	str	r3, [r7, #0]
 80021c0:	4613      	mov	r3, r2
 80021c2:	71fb      	strb	r3, [r7, #7]
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Conversion Type", ((conv_type) <= XMC_VADC_GROUP_CONV_EMUX))
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong ICLASS set number", (set_num < XMC_VADC_MAX_ICLASS_SET))

#if(XMC_VADC_EMUX_AVAILABLE == 1U)
  if (conv_type == XMC_VADC_GROUP_CONV_STD )
 80021c4:	79fb      	ldrb	r3, [r7, #7]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d109      	bne.n	80021de <XMC_VADC_GLOBAL_InputClassInit+0x2a>
  {
#endif
    global_ptr->GLOBICLASS[set_num] = config.globiclass &
 80021ca:	68ba      	ldr	r2, [r7, #8]
 80021cc:	f240 731f 	movw	r3, #1823	; 0x71f
 80021d0:	4013      	ands	r3, r2
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	6839      	ldr	r1, [r7, #0]
 80021d6:	3128      	adds	r1, #40	; 0x28
 80021d8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80021dc:	e007      	b.n	80021ee <XMC_VADC_GLOBAL_InputClassInit+0x3a>
                                      (uint32_t)(VADC_GLOBICLASS_CMS_Msk | VADC_GLOBICLASS_STCS_Msk);
#if(XMC_VADC_EMUX_AVAILABLE == 1U)
  }
  else
  {
    global_ptr->GLOBICLASS[set_num] = config.globiclass & (uint32_t)(VADC_GLOBICLASS_CME_Msk | VADC_GLOBICLASS_STCE_Msk);
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	4b05      	ldr	r3, [pc, #20]	; (80021f8 <XMC_VADC_GLOBAL_InputClassInit+0x44>)
 80021e2:	4013      	ands	r3, r2
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	6839      	ldr	r1, [r7, #0]
 80021e8:	3128      	adds	r1, #40	; 0x28
 80021ea:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  }
#endif
}
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	071f0000 	.word	0x071f0000

080021fc <XMC_VADC_GLOBAL_StartupCalibration>:

/* API to enable startup calibration feature */
void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  VADC_G_TypeDef *group_ptr;
#endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_StartupCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800220a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8002214:	2300      	movs	r3, #0
 8002216:	73fb      	strb	r3, [r7, #15]
 8002218:	e016      	b.n	8002248 <XMC_VADC_GLOBAL_StartupCalibration+0x4c>
  {
    group_ptr = g_xmc_vadc_group_array[i];
 800221a:	7bfb      	ldrb	r3, [r7, #15]
 800221c:	4a0e      	ldr	r2, [pc, #56]	; (8002258 <XMC_VADC_GLOBAL_StartupCalibration+0x5c>)
 800221e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002222:	60bb      	str	r3, [r7, #8]
    if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800222a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d007      	beq.n	8002242 <XMC_VADC_GLOBAL_StartupCalibration+0x46>
    {
      /* This group is active. Loop until it finishes calibration */
      while((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
 8002232:	bf00      	nop
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800223a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1f8      	bne.n	8002234 <XMC_VADC_GLOBAL_StartupCalibration+0x38>

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8002242:	7bfb      	ldrb	r3, [r7, #15]
 8002244:	3301      	adds	r3, #1
 8002246:	73fb      	strb	r3, [r7, #15]
 8002248:	7bfb      	ldrb	r3, [r7, #15]
 800224a:	2b03      	cmp	r3, #3
 800224c:	d9e5      	bls.n	800221a <XMC_VADC_GLOBAL_StartupCalibration+0x1e>
         XMC_VADC_SHS_START_UP_CAL_ACTIVE )
  {
    /* NOP */
  }
#endif
}
 800224e:	3714      	adds	r7, #20
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	08009b10 	.word	0x08009b10

0800225c <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode>:
  global_ptr->GLOBEVNP |= (uint32_t)(node << VADC_GLOBEVNP_REV0NP_Pos);
}

/* API to bind request source event with a service request line */
void XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC_VADC_SR_t sr)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	460b      	mov	r3, r1
 8002266:	70fb      	strb	r3, [r7, #3]
  uint32_t node;
  
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:Wrong Module Pointer", (global_ptr == VADC))

  if (sr >= XMC_VADC_SR_SHARED_SR0)
 8002268:	78fb      	ldrb	r3, [r7, #3]
 800226a:	2b03      	cmp	r3, #3
 800226c:	d903      	bls.n	8002276 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode+0x1a>
  {
    node = (uint32_t)sr - (uint32_t)XMC_VADC_SR_SHARED_SR0;
 800226e:	78fb      	ldrb	r3, [r7, #3]
 8002270:	3b04      	subs	r3, #4
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	e001      	b.n	800227a <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode+0x1e>
  }
  else
  {
    node = (uint32_t)sr;
 8002276:	78fb      	ldrb	r3, [r7, #3]
 8002278:	60fb      	str	r3, [r7, #12]
  }

  global_ptr->GLOBEVNP &= ~((uint32_t)VADC_GLOBEVNP_SEV0NP_Msk);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002280:	f023 020f 	bic.w	r2, r3, #15
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
  global_ptr->GLOBEVNP |= (uint32_t) (node << VADC_GLOBEVNP_SEV0NP_Pos);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	431a      	orrs	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 800229a:	3714      	adds	r7, #20
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <XMC_VADC_GROUP_Init>:

/* API to initialize an instance of group of VADC hardware */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)  
void XMC_VADC_GROUP_Init( XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_Init:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  /* Program the input classes */
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_STD, 0U);
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	6859      	ldr	r1, [r3, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	2300      	movs	r3, #0
 80022b8:	f000 f828 	bl	800230c <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_EMUX, 0U);
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	6859      	ldr	r1, [r3, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	2300      	movs	r3, #0
 80022c6:	f000 f821 	bl	800230c <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_STD, 1U);
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	6899      	ldr	r1, [r3, #8]
 80022d0:	2200      	movs	r2, #0
 80022d2:	2301      	movs	r3, #1
 80022d4:	f000 f81a 	bl	800230c <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_EMUX, 1U);
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	6899      	ldr	r1, [r3, #8]
 80022de:	2201      	movs	r2, #1
 80022e0:	2301      	movs	r3, #1
 80022e2:	f000 f813 	bl	800230c <XMC_VADC_GROUP_InputClassInit>

  group_ptr->ARBCFG = config->g_arbcfg;
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	691a      	ldr	r2, [r3, #16]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  group_ptr->BOUND = config->g_bound;
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	68da      	ldr	r2, [r3, #12]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  /* External mux configuration */
  XMC_VADC_GROUP_ExternalMuxControlInit(group_ptr,config->emux_config);
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	6819      	ldr	r1, [r3, #0]
 8002300:	f7ff fec2 	bl	8002088 <XMC_VADC_GROUP_ExternalMuxControlInit>

}
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop

0800230c <XMC_VADC_GROUP_InputClassInit>:

/* API to program conversion characteristics */
void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t config,
                                          const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
 800230c:	b480      	push	{r7}
 800230e:	b08d      	sub	sp, #52	; 0x34
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	603b      	str	r3, [r7, #0]
 8002318:	4613      	mov	r3, r2
 800231a:	71fb      	strb	r3, [r7, #7]

  /* 
   * Obtain the mask and position macros of the parameters based on what is being requested - Standard channels vs
   * external mux channels.
   */
  if (XMC_VADC_GROUP_CONV_STD == conv_type)
 800231c:	79fb      	ldrb	r3, [r7, #7]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d113      	bne.n	800234a <XMC_VADC_GROUP_InputClassInit+0x3e>
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CMS_Pos;
 8002322:	2308      	movs	r3, #8
 8002324:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CMS_Msk;
 8002326:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800232a:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCS_Pos;
 800232c:	2300      	movs	r3, #0
 800232e:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCS_Msk;
 8002330:	231f      	movs	r3, #31
 8002332:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sample_time_std_conv;
 8002334:	7a3b      	ldrb	r3, [r7, #8]
 8002336:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800233a:	b2db      	uxtb	r3, r3
 800233c:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_standard;
 800233e:	7a7b      	ldrb	r3, [r7, #9]
 8002340:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8002344:	b2db      	uxtb	r3, r3
 8002346:	76fb      	strb	r3, [r7, #27]
 8002348:	e013      	b.n	8002372 <XMC_VADC_GROUP_InputClassInit+0x66>
  }
  else
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CME_Pos;
 800234a:	2318      	movs	r3, #24
 800234c:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CME_Msk;
 800234e:	f04f 63e0 	mov.w	r3, #117440512	; 0x7000000
 8002352:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCE_Pos;
 8002354:	2310      	movs	r3, #16
 8002356:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCE_Msk;
 8002358:	f44f 13f8 	mov.w	r3, #2031616	; 0x1f0000
 800235c:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sampling_phase_emux_channel;
 800235e:	7abb      	ldrb	r3, [r7, #10]
 8002360:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8002364:	b2db      	uxtb	r3, r3
 8002366:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
 8002368:	7afb      	ldrb	r3, [r7, #11]
 800236a:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800236e:	b2db      	uxtb	r3, r3
 8002370:	76fb      	strb	r3, [r7, #27]
  }

  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	3228      	adds	r2, #40	; 0x28
 8002378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800237c:	617b      	str	r3, [r7, #20]

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
 800237e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002380:	43db      	mvns	r3, r3
 8002382:	697a      	ldr	r2, [r7, #20]
 8002384:	4013      	ands	r3, r2
 8002386:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
 8002388:	7efa      	ldrb	r2, [r7, #27]
 800238a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	4313      	orrs	r3, r2
 8002394:	617b      	str	r3, [r7, #20]
  conv_class &= ~(sample_time_mask);
 8002396:	6a3b      	ldr	r3, [r7, #32]
 8002398:	43db      	mvns	r3, r3
 800239a:	697a      	ldr	r2, [r7, #20]
 800239c:	4013      	ands	r3, r2
 800239e:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
 80023a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a2:	69fa      	ldr	r2, [r7, #28]
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	697a      	ldr	r2, [r7, #20]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	617b      	str	r3, [r7, #20]
  group_ptr->ICLASS[set_num] = conv_class;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	3228      	adds	r2, #40	; 0x28
 80023b4:	6979      	ldr	r1, [r7, #20]
 80023b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80023ba:	3734      	adds	r7, #52	; 0x34
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <XMC_VADC_GROUP_SetPowerMode>:

/* API which sets the power mode of analog converter of a VADC group */
void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_t power_mode)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	460b      	mov	r3, r1
 80023ce:	70fb      	strb	r3, [r7, #3]
  uint32_t arbcfg;

  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Power Mode", (power_mode <= XMC_VADC_GROUP_POWERMODE_NORMAL))

  arbcfg = group_ptr->ARBCFG;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023d6:	60fb      	str	r3, [r7, #12]

  arbcfg &= ~((uint32_t)VADC_G_ARBCFG_ANONC_Msk);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f023 0303 	bic.w	r3, r3, #3
 80023de:	60fb      	str	r3, [r7, #12]
  arbcfg |= (uint32_t)power_mode;
 80023e0:	78fb      	ldrb	r3, [r7, #3]
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	60fb      	str	r3, [r7, #12]

  group_ptr->ARBCFG = arbcfg;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 80023f0:	3714      	adds	r7, #20
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop

080023fc <XMC_VADC_GLOBAL_BackgroundInit>:
}
#endif

/* API to initialize background scan request source hardware */
void XMC_VADC_GLOBAL_BackgroundInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_BACKGROUND_CONFIG_t *config)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  #endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundInit:Wrong Module Pointer", (global_ptr == VADC))

  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8002406:	2300      	movs	r3, #0
 8002408:	75fb      	strb	r3, [r7, #23]
 800240a:	e009      	b.n	8002420 <XMC_VADC_GLOBAL_BackgroundInit+0x24>
  {
    XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 800240c:	7dfb      	ldrb	r3, [r7, #23]
 800240e:	4a39      	ldr	r2, [pc, #228]	; (80024f4 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8002410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff fe87 	bl	8002128 <XMC_VADC_GROUP_BackgroundDisableArbitrationSlot>
  #endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundInit:Wrong Module Pointer", (global_ptr == VADC))

  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 800241a:	7dfb      	ldrb	r3, [r7, #23]
 800241c:	3301      	adds	r3, #1
 800241e:	75fb      	strb	r3, [r7, #23]
 8002420:	7dfb      	ldrb	r3, [r7, #23]
 8002422:	2b03      	cmp	r3, #3
 8002424:	d9f2      	bls.n	800240c <XMC_VADC_GLOBAL_BackgroundInit+0x10>
  {
    XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }
  
  conv_start_mask = (uint32_t) 0;
 8002426:	2300      	movs	r3, #0
 8002428:	613b      	str	r3, [r7, #16]
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	f003 0303 	and.w	r3, r3, #3
 8002432:	b2db      	uxtb	r3, r3
 8002434:	2b00      	cmp	r3, #0
 8002436:	d002      	beq.n	800243e <XMC_VADC_GLOBAL_BackgroundInit+0x42>
  {
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
 8002438:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800243c:	613b      	str	r3, [r7, #16]
  }
  
  for(i=0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 800243e:	2300      	movs	r3, #0
 8002440:	75fb      	strb	r3, [r7, #23]
 8002442:	e021      	b.n	8002488 <XMC_VADC_GLOBAL_BackgroundInit+0x8c>
  {
    reg = g_xmc_vadc_group_array[i]->ARBPR;
 8002444:	7dfb      	ldrb	r3, [r7, #23]
 8002446:	4a2b      	ldr	r2, [pc, #172]	; (80024f4 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8002448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800244c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002450:	60fb      	str	r3, [r7, #12]

    reg &= ~(uint32_t)(VADC_G_ARBPR_PRIO2_Msk);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002458:	60fb      	str	r3, [r7, #12]

    /* Program the priority of the request source */
    reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO2_Pos);
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002462:	b2db      	uxtb	r3, r3
 8002464:	021b      	lsls	r3, r3, #8
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	4313      	orrs	r3, r2
 800246a:	60fb      	str	r3, [r7, #12]
  
    /* Program the start mode */
    reg |= conv_start_mask;
 800246c:	68fa      	ldr	r2, [r7, #12]
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	4313      	orrs	r3, r2
 8002472:	60fb      	str	r3, [r7, #12]

    g_xmc_vadc_group_array[i]->ARBPR = reg;
 8002474:	7dfb      	ldrb	r3, [r7, #23]
 8002476:	4a1f      	ldr	r2, [pc, #124]	; (80024f4 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8002478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800247c:	68fa      	ldr	r2, [r7, #12]
 800247e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
  {
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
  }
  
  for(i=0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8002482:	7dfb      	ldrb	r3, [r7, #23]
 8002484:	3301      	adds	r3, #1
 8002486:	75fb      	strb	r3, [r7, #23]
 8002488:	7dfb      	ldrb	r3, [r7, #23]
 800248a:	2b03      	cmp	r3, #3
 800248c:	d9da      	bls.n	8002444 <XMC_VADC_GLOBAL_BackgroundInit+0x48>
  
  }
  #endif

  /* program BRSCTRL register */
  global_ptr->BRSCTRL = (uint32_t)(config->asctrl | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VADC_BRSCTRL_GTWC_Msk);
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002496:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  /* program BRSMR register */
  global_ptr->BRSMR = (uint32_t)((config->asmr)| (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VADC_BRSMR_ENGT_Pos));
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f043 0201 	orr.w	r2, r3, #1
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  
#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	f003 0303 	and.w	r3, r3, #3
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d107      	bne.n	80024cc <XMC_VADC_GLOBAL_BackgroundInit+0xd0>
  {
    global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80024c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  }
#endif
  
  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 80024cc:	2300      	movs	r3, #0
 80024ce:	75fb      	strb	r3, [r7, #23]
 80024d0:	e009      	b.n	80024e6 <XMC_VADC_GLOBAL_BackgroundInit+0xea>
  {
    XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 80024d2:	7dfb      	ldrb	r3, [r7, #23]
 80024d4:	4a07      	ldr	r2, [pc, #28]	; (80024f4 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 80024d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024da:	4618      	mov	r0, r3
 80024dc:	f7ff fe12 	bl	8002104 <XMC_VADC_GROUP_BackgroundEnableArbitrationSlot>
    global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
  }
#endif
  
  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 80024e0:	7dfb      	ldrb	r3, [r7, #23]
 80024e2:	3301      	adds	r3, #1
 80024e4:	75fb      	strb	r3, [r7, #23]
 80024e6:	7dfb      	ldrb	r3, [r7, #23]
 80024e8:	2b03      	cmp	r3, #3
 80024ea:	d9f2      	bls.n	80024d2 <XMC_VADC_GLOBAL_BackgroundInit+0xd6>
  {
    XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }
  #endif
  
}
 80024ec:	3718      	adds	r7, #24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	08009b10 	.word	0x08009b10

080024f8 <XMC_VADC_GROUP_ChannelInit>:

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
/* API to initialize a channel unit */
void XMC_VADC_GROUP_ChannelInit(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num,
                                        const XMC_VADC_CHANNEL_CONFIG_t *config)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b089      	sub	sp, #36	; 0x24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]


  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
  
  prio  = (uint32_t)config->channel_priority;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	7b1b      	ldrb	r3, [r3, #12]
 8002508:	61bb      	str	r3, [r7, #24]

  /* Priority channel */
  ch_assign  = group_ptr->CHASS;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002510:	617b      	str	r3, [r7, #20]
  ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	2201      	movs	r2, #1
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	43db      	mvns	r3, r3
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	4013      	ands	r3, r2
 8002520:	617b      	str	r3, [r7, #20]
  ch_assign |= (uint32_t)(prio << ch_num);
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	697a      	ldr	r2, [r7, #20]
 800252c:	4313      	orrs	r3, r2
 800252e:	617b      	str	r3, [r7, #20]
  group_ptr->CHASS = ch_assign;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Alias channel */
  if (config->alias_channel >= (int32_t)0)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	7b5b      	ldrb	r3, [r3, #13]
 800253c:	b25b      	sxtb	r3, r3
 800253e:	2b00      	cmp	r3, #0
 8002540:	db29      	blt.n	8002596 <XMC_VADC_GROUP_ChannelInit+0x9e>
  {
    mask = (uint32_t)0;
 8002542:	2300      	movs	r3, #0
 8002544:	61fb      	str	r3, [r7, #28]
    if ((uint32_t)1 == ch_num)
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d10a      	bne.n	8002562 <XMC_VADC_GROUP_ChannelInit+0x6a>
    {
      mask = VADC_G_ALIAS_ALIAS1_Pos;
 800254c:	2308      	movs	r3, #8
 800254e:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS1_Msk);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002556:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002560:	e00c      	b.n	800257c <XMC_VADC_GROUP_ChannelInit+0x84>
    }
    else if ((uint32_t)0 == ch_num)
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d109      	bne.n	800257c <XMC_VADC_GROUP_ChannelInit+0x84>
    {
      mask = VADC_G_ALIAS_ALIAS0_Pos;
 8002568:	2300      	movs	r3, #0
 800256a:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS0_Msk);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002572:	f023 021f 	bic.w	r2, r3, #31
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }

    group_ptr->ALIAS |= (uint32_t)(config->alias_channel << mask);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	7b52      	ldrb	r2, [r2, #13]
 8002586:	b251      	sxtb	r1, r2
 8002588:	69fa      	ldr	r2, [r7, #28]
 800258a:	fa01 f202 	lsl.w	r2, r1, r2
 800258e:	431a      	orrs	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  }

  group_ptr->BFL |= config->bfl;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	431a      	orrs	r2, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

#if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
  group_ptr->BFLC |= config->bflc;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	431a      	orrs	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
#endif
  /* Program the CHCTR register */
  group_ptr->CHCTR[ch_num] = config->chctr;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6819      	ldr	r1, [r3, #0]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	68ba      	ldr	r2, [r7, #8]
 80025c2:	3280      	adds	r2, #128	; 0x80
 80025c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 80025c8:	3724      	adds	r7, #36	; 0x24
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop

080025d4 <_init>:
  }
}

/* Init */
void _init(void)
{}
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <UART_CONFIG_Init>:
 * @return UART_CONFIG_STATUS_t: Status of UART driver initialization.\n
 * @ref UART_CONFIG_STATUS_SUCCESS - on successful initialization.\n
 * @ref UART_CONFIG_STATUS_FAILURE - if initialization fails.\n
 */
UART_CONFIG_STATUS_t UART_CONFIG_Init(const UART_CH_CONFIG_t *const handle)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  UART_CONFIG_STATUS_t status;
  XMC_ASSERT("UART_CONFIG APP handle function pointer uninitialized", (((handle != NULL) &&
      (handle->config != NULL)) && ((handle->config->uart_config_init != NULL))))

  /* Initialize the multiplexers required for UART configuration */
  handle->config->uart_config_init();
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	4798      	blx	r3
  status = UART_CONFIG_STATUS_SUCCESS;
 80025f0:	2300      	movs	r3, #0
 80025f2:	73fb      	strb	r3, [r7, #15]

  return status;
 80025f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop

08002600 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	460b      	mov	r3, r1
 800260a:	70fb      	strb	r3, [r7, #3]
 800260c:	4613      	mov	r3, r2
 800260e:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8002610:	78f8      	ldrb	r0, [r7, #3]
 8002612:	78fb      	ldrb	r3, [r7, #3]
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	3306      	adds	r3, #6
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4413      	add	r3, r2
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f023 0207 	bic.w	r2, r3, #7
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 8002622:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8002624:	431a      	orrs	r2, r3
 8002626:	6879      	ldr	r1, [r7, #4]
 8002628:	1d83      	adds	r3, r0, #6
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	440b      	add	r3, r1
 800262e:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop

0800263c <XMC_UART_CH_SetSamplePoint>:
 * example if the oversampling is 16, then the sample point is set to 9.
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_EnableInputInversion(), XMC_UART_CH_SetSamplePoint() \n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_SetSamplePoint(XMC_USIC_CH_t *const channel, const uint32_t sample_point)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  channel->PCR_ASCMode = (uint32_t)((channel->PCR_ASCMode & (uint32_t)(~USIC_CH_PCR_ASCMode_SP_Msk)) |
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800264a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
                         (sample_point << USIC_CH_PCR_ASCMode_SP_Pos));
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	021b      	lsls	r3, r3, #8
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_EnableInputInversion(), XMC_UART_CH_SetSamplePoint() \n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_SetSamplePoint(XMC_USIC_CH_t *const channel, const uint32_t sample_point)
{
  channel->PCR_ASCMode = (uint32_t)((channel->PCR_ASCMode & (uint32_t)(~USIC_CH_PCR_ASCMode_SP_Msk)) |
 8002652:	431a      	orrs	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	63da      	str	r2, [r3, #60]	; 0x3c
                         (sample_point << USIC_CH_PCR_ASCMode_SP_Pos));
}
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop

08002664 <UART_CONFIG_0_lInit>:
/***********************************************************************************************************************
 * API IMPLEMENTATION
 **********************************************************************************************************************/
/* Channel initialization function */
void UART_CONFIG_0_lInit()
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* Initialize USIC channel in UART mode */
  XMC_UART_CH_Init(XMC_UART1_CH0, &UART_CONFIG_0_channel_config);
 8002668:	4809      	ldr	r0, [pc, #36]	; (8002690 <UART_CONFIG_0_lInit+0x2c>)
 800266a:	490a      	ldr	r1, [pc, #40]	; (8002694 <UART_CONFIG_0_lInit+0x30>)
 800266c:	f7ff fadc 	bl	8001c28 <XMC_UART_CH_Init>
  /* Set the Sample Point */
  XMC_UART_CH_SetSamplePoint(XMC_UART1_CH0, 8U);
 8002670:	4807      	ldr	r0, [pc, #28]	; (8002690 <UART_CONFIG_0_lInit+0x2c>)
 8002672:	2108      	movs	r1, #8
 8002674:	f7ff ffe2 	bl	800263c <XMC_UART_CH_SetSamplePoint>
  /* Set input source for input stage dx0 (receive pin) */
  XMC_USIC_CH_SetInputSource(XMC_UART1_CH0, (XMC_USIC_CH_INPUT_t)XMC_UART_CH_INPUT_RXD, 0U);
 8002678:	4805      	ldr	r0, [pc, #20]	; (8002690 <UART_CONFIG_0_lInit+0x2c>)
 800267a:	2100      	movs	r1, #0
 800267c:	2200      	movs	r2, #0
 800267e:	f7ff ffbf 	bl	8002600 <XMC_USIC_CH_SetInputSource>
  /* Set the service request line for the Data Lost, Baud Rate Generator and UART protocol events */
  XMC_USIC_CH_SetInterruptNodePointer(XMC_UART1_CH0, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL, 2U);
 8002682:	4803      	ldr	r0, [pc, #12]	; (8002690 <UART_CONFIG_0_lInit+0x2c>)
 8002684:	2110      	movs	r1, #16
 8002686:	2202      	movs	r2, #2
 8002688:	f7ff fc82 	bl	8001f90 <XMC_USIC_CH_SetInterruptNodePointer>
}
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	48020000 	.word	0x48020000
 8002694:	08009b20 	.word	0x08009b20

08002698 <XMC_USIC_CH_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  channel->CCR |= event;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	431a      	orrs	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	641a      	str	r2, [r3, #64]	; 0x40
}
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <XMC_USIC_CH_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  channel->CCR &= (uint32_t)~event;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	43db      	mvns	r3, r3
 80026ca:	401a      	ands	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	641a      	str	r2, [r3, #64]	; 0x40
}
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop

080026dc <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80026ee:	b2db      	uxtb	r3, r3
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <XMC_USIC_CH_TriggerServiceRequest>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t service_request_line)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  channel->FMR = (uint32_t)(USIC_CH_FMR_SIO0_Msk << service_request_line);
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800270c:	409a      	lsls	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <XMC_USIC_CH_TXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  channel->TBCTR |= event;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	431a      	orrs	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <XMC_USIC_CH_TXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  channel->TBCTR &= (uint32_t)~event;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	43db      	mvns	r3, r3
 8002754:	401a      	ands	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop

08002768 <XMC_USIC_CH_TXFIFO_Flush>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002776:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <XMC_USIC_CH_TXFIFO_IsFull>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8002792:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002796:	2b00      	cmp	r3, #0
 8002798:	bf14      	ite	ne
 800279a:	2301      	movne	r3, #1
 800279c:	2300      	moveq	r3, #0
 800279e:	b2db      	uxtb	r3, r3
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <XMC_USIC_CH_TXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80027ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027be:	2b00      	cmp	r3, #0
 80027c0:	bf14      	ite	ne
 80027c2:	2301      	movne	r3, #1
 80027c4:	2300      	moveq	r3, #0
 80027c6:	b2db      	uxtb	r3, r3
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <XMC_USIC_CH_RXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  channel->RBCTR |= event;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	431a      	orrs	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <XMC_USIC_CH_RXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  channel->RBCTR &= (uint32_t)~event;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	43db      	mvns	r3, r3
 800280c:	401a      	ands	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop

08002820 <XMC_USIC_CH_RXFIFO_Flush>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800282e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <XMC_USIC_CH_RXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800284a:	f003 0308 	and.w	r3, r3, #8
 800284e:	2b00      	cmp	r3, #0
 8002850:	bf14      	ite	ne
 8002852:	2301      	movne	r3, #1
 8002854:	2300      	moveq	r3, #0
 8002856:	b2db      	uxtb	r3, r3
}
 8002858:	4618      	mov	r0, r3
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <UART_Init>:
 *          UART_SUCCESS: for successful UART initialization.<BR>
 *          UART_STATUS_FAILURE  : If UART initialization fails.<BR>
 *
 */
UART_STATUS_t UART_Init(const UART_t *const handle)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  UART_STATUS_t status = UART_STATUS_SUCCESS;
 800286c:	2300      	movs	r3, #0
 800286e:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("UART_Init : UART APP handle invalid", (((handle != NULL)&&
      (handle->config != NULL)) &&((handle->config->fptr_uart_config != NULL)&&
      (handle->runtime != NULL))))

  /*Initialize the multiplexers required for UART configuration*/
  status = handle->config->fptr_uart_config();
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	4798      	blx	r3
 8002878:	4603      	mov	r3, r0
 800287a:	73fb      	strb	r3, [r7, #15]

  return status;
 800287c:	7bfb      	ldrb	r3, [r7, #15]
}
 800287e:	4618      	mov	r0, r3
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop

08002888 <UART_Transmit>:
 *          UART_STATUS_BUFFER_INVALID: Either if buffer is NULL or count is 0.<BR>
 *          UART_STATUS_MODE_MISMATCH: If the configured mode is invalid.<BR>
 *
 */
UART_STATUS_t UART_Transmit(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
 8002894:	2304      	movs	r3, #4
 8002896:	75fb      	strb	r3, [r7, #23]

  switch(handle->config->transmit_mode)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d000      	beq.n	80028a6 <UART_Transmit+0x1e>
  case UART_TRANSFER_MODE_DIRECT:
    ret_stat = UART_lStartTransmitPolling(handle, data_ptr, count);
    break;
#endif
  default:
    break;
 80028a4:	e007      	b.n	80028b6 <UART_Transmit+0x2e>

  switch(handle->config->transmit_mode)
  {
#ifdef UART_TX_INTERRUPT_USED
  case UART_TRANSFER_MODE_INTERRUPT:
    ret_stat = UART_StartTransmitIRQ(handle, data_ptr, count);
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	68b9      	ldr	r1, [r7, #8]
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	f000 f824 	bl	80028f8 <UART_StartTransmitIRQ>
 80028b0:	4603      	mov	r3, r0
 80028b2:	75fb      	strb	r3, [r7, #23]
    break;
 80028b4:	bf00      	nop
    break;
#endif
  default:
    break;
  }
  return ret_stat;
 80028b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3718      	adds	r7, #24
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <UART_Receive>:
 *          UART_STATUS_BUFFER_INVALID: Either if buffer is NULL or count is 0.<BR>
 *          UART_STATUS_MODE_MISMATCH: If the configured mode is invalid.<BR>
 *
 */
UART_STATUS_t UART_Receive(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b086      	sub	sp, #24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
 80028cc:	2304      	movs	r3, #4
 80028ce:	75fb      	strb	r3, [r7, #23]

  switch(handle->config->receive_mode)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d000      	beq.n	80028de <UART_Receive+0x1e>
  case UART_TRANSFER_MODE_DIRECT:
    ret_stat = UART_lStartReceivePolling(handle, data_ptr, count);
    break;
#endif
  default:
    break;
 80028dc:	e007      	b.n	80028ee <UART_Receive+0x2e>

  switch(handle->config->receive_mode)
  {
#ifdef UART_RX_INTERRUPT_USED
  case UART_TRANSFER_MODE_INTERRUPT:
    ret_stat = UART_StartReceiveIRQ(handle, data_ptr, count);
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	68b9      	ldr	r1, [r7, #8]
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	f000 f864 	bl	80029b0 <UART_StartReceiveIRQ>
 80028e8:	4603      	mov	r3, r0
 80028ea:	75fb      	strb	r3, [r7, #23]
    break;
 80028ec:	bf00      	nop
    break;
#endif
  default:
    break;
  }
  return ret_stat;
 80028ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3718      	adds	r7, #24
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <UART_StartTransmitIRQ>:
 * request is registered.
 *
 *
 */
UART_STATUS_t UART_StartTransmitIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
 8002904:	2304      	movs	r3, #4
 8002906:	75fb      	strb	r3, [r7, #23]
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	613b      	str	r3, [r7, #16]

  XMC_ASSERT("UART_StartTransmitIRQ: UART APP handle invalid", ((handle != NULL)&&
            (handle->runtime != NULL)))

  if (handle->config->transmit_mode == UART_TRANSFER_MODE_INTERRUPT)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002916:	2b00      	cmp	r3, #0
 8002918:	d144      	bne.n	80029a4 <UART_StartTransmitIRQ+0xac>
  {
    ret_stat = UART_STATUS_BUSY;
 800291a:	2302      	movs	r3, #2
 800291c:	75fb      	strb	r3, [r7, #23]
    if (ptr_runtime->tx_busy == false)
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	7e1b      	ldrb	r3, [r3, #24]
 8002922:	b2db      	uxtb	r3, r3
 8002924:	f083 0301 	eor.w	r3, r3, #1
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d03a      	beq.n	80029a4 <UART_StartTransmitIRQ+0xac>
    {
      /*If there is no transmission in progress*/
      if ((data_ptr != NULL) && (count > 0U))
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d035      	beq.n	80029a0 <UART_StartTransmitIRQ+0xa8>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d032      	beq.n	80029a0 <UART_StartTransmitIRQ+0xa8>
      {
        /*Obtain the address of data, size of data*/
        ptr_runtime->tx_data = data_ptr;
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	68ba      	ldr	r2, [r7, #8]
 800293e:	601a      	str	r2, [r3, #0]
        ptr_runtime->tx_data_count = count;
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	609a      	str	r2, [r3, #8]
        /*Initialize to first index and set the busy flag*/
        ptr_runtime->tx_data_index = 0U;
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	2200      	movs	r2, #0
 800294a:	60da      	str	r2, [r3, #12]
        ptr_runtime->tx_busy = true;
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	2201      	movs	r2, #1
 8002950:	761a      	strb	r2, [r3, #24]

        /*Enable the transmit buffer event*/
        if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00c      	beq.n	8002978 <UART_StartTransmitIRQ+0x80>
        {
          /*Clear the transmit FIFO*/
          XMC_USIC_CH_TXFIFO_Flush(handle->channel);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4618      	mov	r0, r3
 8002964:	f7ff ff00 	bl	8002768 <XMC_USIC_CH_TXFIFO_Flush>
          /*Enable transmit buffer interrupt*/
          XMC_USIC_CH_TXFIFO_EnableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4618      	mov	r0, r3
 800296e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002972:	f7ff fed3 	bl	800271c <XMC_USIC_CH_TXFIFO_EnableEvent>
 8002976:	e006      	b.n	8002986 <UART_StartTransmitIRQ+0x8e>
        }
        else
        {
          XMC_USIC_CH_EnableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4618      	mov	r0, r3
 800297e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002982:	f7ff fe89 	bl	8002698 <XMC_USIC_CH_EnableEvent>
        }
        ret_stat = UART_STATUS_SUCCESS;
 8002986:	2300      	movs	r3, #0
 8002988:	75fb      	strb	r3, [r7, #23]
        /*Trigger the transmit buffer interrupt*/
        XMC_USIC_CH_TriggerServiceRequest(handle->channel, (uint32_t)handle->config->tx_sr);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8002996:	4610      	mov	r0, r2
 8002998:	4619      	mov	r1, r3
 800299a:	f7ff feaf 	bl	80026fc <XMC_USIC_CH_TriggerServiceRequest>
 800299e:	e001      	b.n	80029a4 <UART_StartTransmitIRQ+0xac>
      }
      else
      {
        ret_stat = UART_STATUS_BUFFER_INVALID;
 80029a0:	2303      	movs	r3, #3
 80029a2:	75fb      	strb	r3, [r7, #23]
      }
    }
  }
  return ret_stat;
 80029a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3718      	adds	r7, #24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop

080029b0 <UART_StartReceiveIRQ>:
 * request is registered.
 *
 *
 */
UART_STATUS_t UART_StartReceiveIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
 80029bc:	2304      	movs	r3, #4
 80029be:	75fb      	strb	r3, [r7, #23]
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	613b      	str	r3, [r7, #16]

  XMC_ASSERT("UART_StartReceiveIRQ: UART APP handle invalid", ((handle != NULL)&&
            (handle->runtime != NULL)))

  if (handle->config->receive_mode == UART_TRANSFER_MODE_INTERRUPT)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d13e      	bne.n	8002a50 <UART_StartReceiveIRQ+0xa0>
  {
    ret_stat = UART_STATUS_BUSY;
 80029d2:	2302      	movs	r3, #2
 80029d4:	75fb      	strb	r3, [r7, #23]
    if (ptr_runtime->rx_busy == false)
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	7e5b      	ldrb	r3, [r3, #25]
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	f083 0301 	eor.w	r3, r3, #1
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d034      	beq.n	8002a50 <UART_StartReceiveIRQ+0xa0>
    {
      /*If no active reception in progress*/
      if ((data_ptr != NULL) && (count > 0U))
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d02f      	beq.n	8002a4c <UART_StartReceiveIRQ+0x9c>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d02c      	beq.n	8002a4c <UART_StartReceiveIRQ+0x9c>
      {
        /*Obtain the address of data buffer and
         * number of data bytes to be received*/
        ptr_runtime->rx_data = data_ptr;
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	68ba      	ldr	r2, [r7, #8]
 80029f6:	605a      	str	r2, [r3, #4]
        ptr_runtime->rx_data_count = count;
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	611a      	str	r2, [r3, #16]
        ptr_runtime->rx_busy = true;
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	2201      	movs	r2, #1
 8002a02:	765a      	strb	r2, [r3, #25]
        ptr_runtime->rx_data_index = 0U;
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	2200      	movs	r2, #0
 8002a08:	615a      	str	r2, [r3, #20]

        if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d010      	beq.n	8002a38 <UART_StartReceiveIRQ+0x88>
        {
          /*Clear the receive FIFO, configure the trigger lime
           * and enable the receive events*/
          XMC_USIC_CH_RXFIFO_Flush(handle->channel);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff ff00 	bl	8002820 <XMC_USIC_CH_RXFIFO_Flush>

          /*Configure the FIFO trigger limit based on the required data size*/
          UART_lReconfigureRxFIFO(handle, count);
 8002a20:	68f8      	ldr	r0, [r7, #12]
 8002a22:	6879      	ldr	r1, [r7, #4]
 8002a24:	f000 f930 	bl	8002c88 <UART_lReconfigureRxFIFO>

          XMC_USIC_CH_RXFIFO_EnableEvent(handle->channel,
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8002a32:	f7ff fecf 	bl	80027d4 <XMC_USIC_CH_RXFIFO_EnableEvent>
 8002a36:	e006      	b.n	8002a46 <UART_StartReceiveIRQ+0x96>
            (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
            (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));
        }
        else
        {
          XMC_USIC_CH_EnableEvent(handle->channel,
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8002a42:	f7ff fe29 	bl	8002698 <XMC_USIC_CH_EnableEvent>
          (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE | (uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE));
        }
        ret_stat = UART_STATUS_SUCCESS;
 8002a46:	2300      	movs	r3, #0
 8002a48:	75fb      	strb	r3, [r7, #23]
 8002a4a:	e001      	b.n	8002a50 <UART_StartReceiveIRQ+0xa0>
      }
      else
      {
        ret_stat = UART_STATUS_BUFFER_INVALID;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	75fb      	strb	r3, [r7, #23]
      }
    }
  }
  return ret_stat;
 8002a50:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3718      	adds	r7, #24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop

08002a5c <UART_lTransmitHandler>:
 *  * param[in]  handle UART APP handle pointer of type UART_t*
 *
 *  * return void
 */
void UART_lTransmitHandler(const UART_t * const handle)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	60fb      	str	r3, [r7, #12]

  if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	68da      	ldr	r2, [r3, #12]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d240      	bcs.n	8002af8 <UART_lTransmitHandler+0x9c>
  {
    if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d027      	beq.n	8002ad2 <UART_lTransmitHandler+0x76>
    {
      /*When Transmit FIFO is enabled*/
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
 8002a82:	e01a      	b.n	8002aba <UART_lTransmitHandler+0x5e>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	68da      	ldr	r2, [r3, #12]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d212      	bcs.n	8002ab6 <UART_lTransmitHandler+0x5a>
        {
          /*Load the FIFO byte by byte till either FIFO is full or all data is loaded*/
          XMC_UART_CH_Transmit(handle->channel,(uint16_t)ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6819      	ldr	r1, [r3, #0]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	4413      	add	r3, r2
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	4608      	mov	r0, r1
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	f7ff f915 	bl	8001cd4 <XMC_UART_CH_Transmit>
          (ptr_runtime->tx_data_index)++;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	1c5a      	adds	r2, r3, #1
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	60da      	str	r2, [r3, #12]
 8002ab4:	e001      	b.n	8002aba <UART_lTransmitHandler+0x5e>
        }
        else
        {
          break;
 8002ab6:	bf00      	nop
 8002ab8:	e053      	b.n	8002b62 <UART_lTransmitHandler+0x106>
  {
    if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
    {
      /*When Transmit FIFO is enabled*/
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7ff fe60 	bl	8002784 <XMC_USIC_CH_TXFIFO_IsFull>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	f083 0301 	eor.w	r3, r3, #1
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1d9      	bne.n	8002a84 <UART_lTransmitHandler+0x28>
 8002ad0:	e047      	b.n	8002b62 <UART_lTransmitHandler+0x106>
      }
    }
    else
    {
      /*When Transmit FIFO is disabled*/
      XMC_UART_CH_Transmit(handle->channel,(uint16_t)ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6819      	ldr	r1, [r3, #0]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	4413      	add	r3, r2
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	4608      	mov	r0, r1
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	f7ff f8f4 	bl	8001cd4 <XMC_UART_CH_Transmit>
      (ptr_runtime->tx_data_index)++;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	1c5a      	adds	r2, r3, #1
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	60da      	str	r2, [r3, #12]
 8002af6:	e034      	b.n	8002b62 <UART_lTransmitHandler+0x106>
    }
  }
  else
  {
    if (XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel) == true)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7ff fe55 	bl	80027ac <XMC_USIC_CH_TXFIFO_IsEmpty>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d02c      	beq.n	8002b62 <UART_lTransmitHandler+0x106>
    {
      if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d007      	beq.n	8002b24 <UART_lTransmitHandler+0xc8>
      {
        /*Disable the transmit FIFO event*/
        XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002b1e:	f7ff fe0f 	bl	8002740 <XMC_USIC_CH_TXFIFO_DisableEvent>
 8002b22:	e006      	b.n	8002b32 <UART_lTransmitHandler+0xd6>
      }
      else
      {
        /*Disable the standard transmit event*/
        XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b2e:	f7ff fdc3 	bl	80026b8 <XMC_USIC_CH_DisableEvent>
      }

      /*Wait for the transmit buffer to be free to ensure that all data is transmitted*/
      while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8002b32:	bf00      	nop
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7ff fdcf 	bl	80026dc <XMC_USIC_CH_GetTransmitBufferStatus>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b80      	cmp	r3, #128	; 0x80
 8002b42:	d0f7      	beq.n	8002b34 <UART_lTransmitHandler+0xd8>
      {

      }
      /*All data is transmitted*/
      ptr_runtime->tx_busy = false;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2200      	movs	r2, #0
 8002b48:	761a      	strb	r2, [r3, #24]
      ptr_runtime->tx_data = NULL;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	601a      	str	r2, [r3, #0]

      if (handle->config->tx_cbhandler != NULL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d003      	beq.n	8002b62 <UART_lTransmitHandler+0x106>
      {
        /*Execute the callback function provided in the UART APP UI*/
        handle->config->tx_cbhandler();
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	4798      	blx	r3
      }
    }
  }
}
 8002b62:	3710      	adds	r7, #16
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <UART_lReceiveHandler>:
 * param[in]  handle UART APP handle pointer of type UART_t*
 *
 * return void
 */
void UART_lReceiveHandler(const UART_t * const handle)
{
 8002b68:	b590      	push	{r4, r7, lr}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	60fb      	str	r3, [r7, #12]

  if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d04e      	beq.n	8002c20 <UART_lReceiveHandler+0xb8>
  {
    /*When Receive FIFO is enabled*/
    while (XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == false)
 8002b82:	e032      	b.n	8002bea <UART_lReceiveHandler+0x82>
    {
      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	695a      	ldr	r2, [r3, #20]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d211      	bcs.n	8002bb4 <UART_lReceiveHandler+0x4c>
      {
        /*Read all the content of Receive FIFO */
        ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	685a      	ldr	r2, [r3, #4]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	18d4      	adds	r4, r2, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7ff f8be 	bl	8001d20 <XMC_UART_CH_GetReceivedData>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	7023      	strb	r3, [r4, #0]
        (ptr_runtime->rx_data_index)++;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	1c5a      	adds	r2, r3, #1
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	615a      	str	r2, [r3, #20]
      }

      if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	695a      	ldr	r2, [r3, #20]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d114      	bne.n	8002bea <UART_lReceiveHandler+0x82>
      {
        /*Reception complete*/
        ptr_runtime->rx_busy = false;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	765a      	strb	r2, [r3, #25]
        /*Disable both standard receive and alternative receive FIFO events*/
        XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8002bd0:	f7ff fe12 	bl	80027f8 <XMC_USIC_CH_RXFIFO_DisableEvent>
            (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
            (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));
        if (handle->config->rx_cbhandler != NULL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d004      	beq.n	8002be8 <UART_lReceiveHandler+0x80>
        {
          /*Execute the 'End of reception' callback function*/
          handle->config->rx_cbhandler();
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	4798      	blx	r3
        }
        break;
 8002be6:	e00b      	b.n	8002c00 <UART_lReceiveHandler+0x98>
 8002be8:	e00a      	b.n	8002c00 <UART_lReceiveHandler+0x98>
  UART_RUNTIME_t * ptr_runtime = handle->runtime;

  if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
  {
    /*When Receive FIFO is enabled*/
    while (XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == false)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7ff fe24 	bl	800283c <XMC_USIC_CH_RXFIFO_IsEmpty>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	f083 0301 	eor.w	r3, r3, #1
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d1c1      	bne.n	8002b84 <UART_lReceiveHandler+0x1c>
        }
        break;
      }
    }
    /*Set the trigger limit if data still to be received*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	695a      	ldr	r2, [r3, #20]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	691b      	ldr	r3, [r3, #16]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d23a      	bcs.n	8002c82 <UART_lReceiveHandler+0x11a>
    {
      UART_lReconfigureRxFIFO(handle,
          (uint32_t)(ptr_runtime->rx_data_count - ptr_runtime->rx_data_index));
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	691a      	ldr	r2, [r3, #16]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	695b      	ldr	r3, [r3, #20]
      }
    }
    /*Set the trigger limit if data still to be received*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
    {
      UART_lReconfigureRxFIFO(handle,
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	4619      	mov	r1, r3
 8002c1a:	f000 f835 	bl	8002c88 <UART_lReconfigureRxFIFO>
 8002c1e:	e030      	b.n	8002c82 <UART_lReceiveHandler+0x11a>
    }
  }
  else
  {
    /*When RxFIFO is disabled*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	695a      	ldr	r2, [r3, #20]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d211      	bcs.n	8002c50 <UART_lReceiveHandler+0xe8>
    {
      ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	685a      	ldr	r2, [r3, #4]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	695b      	ldr	r3, [r3, #20]
 8002c34:	18d4      	adds	r4, r2, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7ff f870 	bl	8001d20 <XMC_UART_CH_GetReceivedData>
 8002c40:	4603      	mov	r3, r0
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	7023      	strb	r3, [r4, #0]
      (ptr_runtime->rx_data_index)++;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	1c5a      	adds	r2, r3, #1
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	615a      	str	r2, [r3, #20]
    }

    if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	695a      	ldr	r2, [r3, #20]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d112      	bne.n	8002c82 <UART_lReceiveHandler+0x11a>
    {
      /*Reception complete*/
      ptr_runtime->rx_busy = false;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	765a      	strb	r2, [r3, #25]
      /*Disable both standard receive and alternative receive FIFO events*/
      XMC_USIC_CH_DisableEvent(handle->channel,
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8002c6c:	f7ff fd24 	bl	80026b8 <XMC_USIC_CH_DisableEvent>
          (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE | (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE));

      if (handle->config->rx_cbhandler != NULL)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d003      	beq.n	8002c82 <UART_lReceiveHandler+0x11a>
      {
        /*Execute the 'End of reception' callback function*/
        handle->config->rx_cbhandler();
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	4798      	blx	r3
      }
    }
  }
}
 8002c82:	3714      	adds	r7, #20
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd90      	pop	{r4, r7, pc}

08002c88 <UART_lReconfigureRxFIFO>:
 * param[in] uint8_t  number of bytes to be received.
 *
 * return void.
 */
static void UART_lReconfigureRxFIFO(const UART_t * const handle, uint32_t data_size)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  uint32_t fifo_size;
  uint32_t ret_limit_val = 0U;
 8002c92:	2300      	movs	r3, #0
 8002c94:	60fb      	str	r3, [r7, #12]

  /*Get FIFO size in bytes*/
  fifo_size = (uint32_t)(0x01UL << (uint8_t)(handle->config->rx_fifo_size));
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	4093      	lsls	r3, r2
 8002ca4:	60bb      	str	r3, [r7, #8]
  /*If data size is more than FIFO size, configure the limit to the FIFO size*/
  if (data_size < fifo_size)
 8002ca6:	683a      	ldr	r2, [r7, #0]
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d203      	bcs.n	8002cb6 <UART_lReconfigureRxFIFO+0x2e>
  {
    ret_limit_val = (uint32_t)(data_size - 1U);
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	60fb      	str	r3, [r7, #12]
 8002cb4:	e002      	b.n	8002cbc <UART_lReconfigureRxFIFO+0x34>
  }
  else
  {
    ret_limit_val = (uint32_t)(fifo_size - 1U);
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	3b01      	subs	r3, #1
 8002cba:	60fb      	str	r3, [r7, #12]
  }
  /*Set the limit value*/
  XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel,
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681a      	ldr	r2, [r3, #0]
        handle->config->rx_fifo_size, ret_limit_val);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
  else
  {
    ret_limit_val = (uint32_t)(fifo_size - 1U);
  }
  /*Set the limit value*/
  XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel,
 8002cc4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002cc8:	4610      	mov	r0, r2
 8002cca:	4619      	mov	r1, r3
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	f7ff f93d 	bl	8001f4c <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>
        handle->config->rx_fifo_size, ret_limit_val);
}
 8002cd2:	3710      	adds	r7, #16
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cdc:	4b04      	ldr	r3, [pc, #16]	; (8002cf0 <__NVIC_GetPriorityGrouping+0x18>)
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ce4:	0a1b      	lsrs	r3, r3, #8
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr
 8002cf0:	e000ed00 	.word	0xe000ed00

08002cf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	db0b      	blt.n	8002d1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002d06:	4908      	ldr	r1, [pc, #32]	; (8002d28 <__NVIC_EnableIRQ+0x34>)
 8002d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0c:	095b      	lsrs	r3, r3, #5
 8002d0e:	79fa      	ldrb	r2, [r7, #7]
 8002d10:	f002 021f 	and.w	r2, r2, #31
 8002d14:	2001      	movs	r0, #1
 8002d16:	fa00 f202 	lsl.w	r2, r0, r2
 8002d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr
 8002d28:	e000e100 	.word	0xe000e100

08002d2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	4603      	mov	r3, r0
 8002d34:	6039      	str	r1, [r7, #0]
 8002d36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	db0a      	blt.n	8002d56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d40:	490d      	ldr	r1, [pc, #52]	; (8002d78 <__NVIC_SetPriority+0x4c>)
 8002d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d46:	683a      	ldr	r2, [r7, #0]
 8002d48:	b2d2      	uxtb	r2, r2
 8002d4a:	0092      	lsls	r2, r2, #2
 8002d4c:	b2d2      	uxtb	r2, r2
 8002d4e:	440b      	add	r3, r1
 8002d50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8002d54:	e00a      	b.n	8002d6c <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d56:	4909      	ldr	r1, [pc, #36]	; (8002d7c <__NVIC_SetPriority+0x50>)
 8002d58:	79fb      	ldrb	r3, [r7, #7]
 8002d5a:	f003 030f 	and.w	r3, r3, #15
 8002d5e:	3b04      	subs	r3, #4
 8002d60:	683a      	ldr	r2, [r7, #0]
 8002d62:	b2d2      	uxtb	r2, r2
 8002d64:	0092      	lsls	r2, r2, #2
 8002d66:	b2d2      	uxtb	r2, r2
 8002d68:	440b      	add	r3, r1
 8002d6a:	761a      	strb	r2, [r3, #24]
  }
}
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	e000e100 	.word	0xe000e100
 8002d7c:	e000ed00 	.word	0xe000ed00

08002d80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b089      	sub	sp, #36	; 0x24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f003 0307 	and.w	r3, r3, #7
 8002d92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	f1c3 0307 	rsb	r3, r3, #7
 8002d9a:	2b06      	cmp	r3, #6
 8002d9c:	bf28      	it	cs
 8002d9e:	2306      	movcs	r3, #6
 8002da0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	3306      	adds	r3, #6
 8002da6:	2b06      	cmp	r3, #6
 8002da8:	d902      	bls.n	8002db0 <NVIC_EncodePriority+0x30>
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	3b01      	subs	r3, #1
 8002dae:	e000      	b.n	8002db2 <NVIC_EncodePriority+0x32>
 8002db0:	2300      	movs	r3, #0
 8002db2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	2201      	movs	r2, #1
 8002db8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbc:	1e5a      	subs	r2, r3, #1
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	401a      	ands	r2, r3
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	2101      	movs	r1, #1
 8002dca:	fa01 f303 	lsl.w	r3, r1, r3
 8002dce:	1e59      	subs	r1, r3, #1
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8002dd4:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3724      	adds	r7, #36	; 0x24
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop

08002de4 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	460b      	mov	r3, r1
 8002dee:	70fb      	strb	r3, [r7, #3]
 8002df0:	4613      	mov	r3, r2
 8002df2:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8002df4:	78f8      	ldrb	r0, [r7, #3]
 8002df6:	78fb      	ldrb	r3, [r7, #3]
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	3306      	adds	r3, #6
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4413      	add	r3, r2
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f023 0207 	bic.w	r2, r3, #7
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 8002e06:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8002e08:	431a      	orrs	r2, r3
 8002e0a:	6879      	ldr	r1, [r7, #4]
 8002e0c:	1d83      	adds	r3, r0, #6
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	440b      	add	r3, r1
 8002e12:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop

08002e20 <XMC_UART_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Start(XMC_USIC_CH_t *const channel)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  channel->CCR = (uint32_t)(((channel->CCR) & (~USIC_CH_CCR_MODE_Msk)) | (uint32_t)XMC_USIC_CH_OPERATING_MODE_UART);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2c:	f023 030f 	bic.w	r3, r3, #15
 8002e30:	f043 0202 	orr.w	r2, r3, #2
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop

08002e44 <UART_0_init>:
/**********************************************************************************************************************
 * API IMPLEMENTATION
 **********************************************************************************************************************/
/*Channel initialization function*/
UART_STATUS_t UART_0_init()
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
  UART_STATUS_t status = UART_STATUS_SUCCESS;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	71fb      	strb	r3, [r7, #7]
  /*Configure Receive pin*/
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT0_BASE, 0U, &UART_0_rx_pin_config);
 8002e4e:	482d      	ldr	r0, [pc, #180]	; (8002f04 <UART_0_init+0xc0>)
 8002e50:	2100      	movs	r1, #0
 8002e52:	4a2d      	ldr	r2, [pc, #180]	; (8002f08 <UART_0_init+0xc4>)
 8002e54:	f7fd faa6 	bl	80003a4 <XMC_GPIO_Init>
  /* Initialize USIC channel in UART mode*/
  XMC_UART_CH_Init(XMC_UART1_CH1, &UART_0_channel_config);
 8002e58:	482c      	ldr	r0, [pc, #176]	; (8002f0c <UART_0_init+0xc8>)
 8002e5a:	492d      	ldr	r1, [pc, #180]	; (8002f10 <UART_0_init+0xcc>)
 8002e5c:	f7fe fee4 	bl	8001c28 <XMC_UART_CH_Init>
  /*Set input source path*/
  XMC_USIC_CH_SetInputSource(XMC_UART1_CH1, XMC_USIC_CH_INPUT_DX0, 3U);
 8002e60:	482a      	ldr	r0, [pc, #168]	; (8002f0c <UART_0_init+0xc8>)
 8002e62:	2100      	movs	r1, #0
 8002e64:	2203      	movs	r2, #3
 8002e66:	f7ff ffbd 	bl	8002de4 <XMC_USIC_CH_SetInputSource>
  /*Configure transmit FIFO*/
  XMC_USIC_CH_TXFIFO_Configure(XMC_UART1_CH1,
 8002e6a:	4828      	ldr	r0, [pc, #160]	; (8002f0c <UART_0_init+0xc8>)
 8002e6c:	2120      	movs	r1, #32
 8002e6e:	2205      	movs	r2, #5
 8002e70:	2301      	movs	r3, #1
 8002e72:	f7ff f819 	bl	8001ea8 <XMC_USIC_CH_TXFIFO_Configure>
        32U,
        XMC_USIC_CH_FIFO_SIZE_32WORDS,
        1U);
  /*Configure receive FIFO*/
  XMC_USIC_CH_RXFIFO_Configure(XMC_UART1_CH1,
 8002e76:	4825      	ldr	r0, [pc, #148]	; (8002f0c <UART_0_init+0xc8>)
 8002e78:	2100      	movs	r1, #0
 8002e7a:	2205      	movs	r2, #5
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	f7ff f83b 	bl	8001ef8 <XMC_USIC_CH_RXFIFO_Configure>
        0U,
        XMC_USIC_CH_FIFO_SIZE_32WORDS,
        0U);
  /* Start UART */
  XMC_UART_CH_Start(XMC_UART1_CH1);
 8002e82:	4822      	ldr	r0, [pc, #136]	; (8002f0c <UART_0_init+0xc8>)
 8002e84:	f7ff ffcc 	bl	8002e20 <XMC_UART_CH_Start>

  /* Initialize UART TX pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT0_BASE, 1U, &UART_0_tx_pin_config);
 8002e88:	481e      	ldr	r0, [pc, #120]	; (8002f04 <UART_0_init+0xc0>)
 8002e8a:	2101      	movs	r1, #1
 8002e8c:	4a21      	ldr	r2, [pc, #132]	; (8002f14 <UART_0_init+0xd0>)
 8002e8e:	f7fd fa89 	bl	80003a4 <XMC_GPIO_Init>

  /*Set service request for UART protocol events*/
  XMC_USIC_CH_SetInterruptNodePointer(XMC_UART1_CH1, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
 8002e92:	481e      	ldr	r0, [pc, #120]	; (8002f0c <UART_0_init+0xc8>)
 8002e94:	2110      	movs	r1, #16
 8002e96:	2202      	movs	r2, #2
 8002e98:	f7ff f87a 	bl	8001f90 <XMC_USIC_CH_SetInterruptNodePointer>
     2U);
  /*Set service request for tx FIFO transmit interrupt*/
  XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_UART1_CH1, XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
 8002e9c:	481b      	ldr	r0, [pc, #108]	; (8002f0c <UART_0_init+0xc8>)
 8002e9e:	2110      	movs	r1, #16
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	f7ff f891 	bl	8001fc8 <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>
      1U);
  /*Set service request for rx FIFO receive interrupt*/
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_UART1_CH1, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
 8002ea6:	4819      	ldr	r0, [pc, #100]	; (8002f0c <UART_0_init+0xc8>)
 8002ea8:	2110      	movs	r1, #16
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f7ff f8aa 	bl	8002004 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
       0x0U);
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_UART1_CH1, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE,
 8002eb0:	4816      	ldr	r0, [pc, #88]	; (8002f0c <UART_0_init+0xc8>)
 8002eb2:	2113      	movs	r1, #19
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f7ff f8a5 	bl	8002004 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
       0x0U);
  /*Set priority and enable NVIC node for transmit interrupt*/
  NVIC_SetPriority((IRQn_Type)91, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 8002eba:	f7ff ff0d 	bl	8002cd8 <__NVIC_GetPriorityGrouping>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	213f      	movs	r1, #63	; 0x3f
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f7ff ff5b 	bl	8002d80 <NVIC_EncodePriority>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	205b      	movs	r0, #91	; 0x5b
 8002ece:	4619      	mov	r1, r3
 8002ed0:	f7ff ff2c 	bl	8002d2c <__NVIC_SetPriority>
                        63U, 0U));
  NVIC_EnableIRQ((IRQn_Type)91);
 8002ed4:	205b      	movs	r0, #91	; 0x5b
 8002ed6:	f7ff ff0d 	bl	8002cf4 <__NVIC_EnableIRQ>
  /*Set priority and enable NVIC node for receive interrupt*/
  NVIC_SetPriority((IRQn_Type)90, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 8002eda:	f7ff fefd 	bl	8002cd8 <__NVIC_GetPriorityGrouping>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	213f      	movs	r1, #63	; 0x3f
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f7ff ff4b 	bl	8002d80 <NVIC_EncodePriority>
 8002eea:	4603      	mov	r3, r0
 8002eec:	205a      	movs	r0, #90	; 0x5a
 8002eee:	4619      	mov	r1, r3
 8002ef0:	f7ff ff1c 	bl	8002d2c <__NVIC_SetPriority>
                      63U, 0U));
  NVIC_EnableIRQ((IRQn_Type)90);
 8002ef4:	205a      	movs	r0, #90	; 0x5a
 8002ef6:	f7ff fefd 	bl	8002cf4 <__NVIC_EnableIRQ>
  return status;
 8002efa:	79fb      	ldrb	r3, [r7, #7]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3708      	adds	r7, #8
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	48028000 	.word	0x48028000
 8002f08:	08009b94 	.word	0x08009b94
 8002f0c:	48020200 	.word	0x48020200
 8002f10:	08009b40 	.word	0x08009b40
 8002f14:	08009b4c 	.word	0x08009b4c

08002f18 <USIC1_1_IRQHandler>:
/*Interrupt handlers*/
/*Transmit ISR*/
void UART_0_TX_HANDLER()
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
  UART_lTransmitHandler(&UART_0);
 8002f1c:	4801      	ldr	r0, [pc, #4]	; (8002f24 <USIC1_1_IRQHandler+0xc>)
 8002f1e:	f7ff fd9d 	bl	8002a5c <UART_lTransmitHandler>
}
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	1fffcc50 	.word	0x1fffcc50

08002f28 <USIC1_0_IRQHandler>:

/*Receive ISR*/
void UART_0_RX_HANDLER()
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
  UART_lReceiveHandler(&UART_0);
 8002f2c:	4801      	ldr	r0, [pc, #4]	; (8002f34 <USIC1_0_IRQHandler+0xc>)
 8002f2e:	f7ff fe1b 	bl	8002b68 <UART_lReceiveHandler>
}
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	1fffcc50 	.word	0x1fffcc50

08002f38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f3c:	4b04      	ldr	r3, [pc, #16]	; (8002f50 <__NVIC_GetPriorityGrouping+0x18>)
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f44:	0a1b      	lsrs	r3, r3, #8
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr
 8002f50:	e000ed00 	.word	0xe000ed00

08002f54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	6039      	str	r1, [r7, #0]
 8002f5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	db0a      	blt.n	8002f7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f68:	490d      	ldr	r1, [pc, #52]	; (8002fa0 <__NVIC_SetPriority+0x4c>)
 8002f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	b2d2      	uxtb	r2, r2
 8002f72:	0092      	lsls	r2, r2, #2
 8002f74:	b2d2      	uxtb	r2, r2
 8002f76:	440b      	add	r3, r1
 8002f78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8002f7c:	e00a      	b.n	8002f94 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f7e:	4909      	ldr	r1, [pc, #36]	; (8002fa4 <__NVIC_SetPriority+0x50>)
 8002f80:	79fb      	ldrb	r3, [r7, #7]
 8002f82:	f003 030f 	and.w	r3, r3, #15
 8002f86:	3b04      	subs	r3, #4
 8002f88:	683a      	ldr	r2, [r7, #0]
 8002f8a:	b2d2      	uxtb	r2, r2
 8002f8c:	0092      	lsls	r2, r2, #2
 8002f8e:	b2d2      	uxtb	r2, r2
 8002f90:	440b      	add	r3, r1
 8002f92:	761a      	strb	r2, [r3, #24]
  }
}
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	e000e100 	.word	0xe000e100
 8002fa4:	e000ed00 	.word	0xe000ed00

08002fa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b089      	sub	sp, #36	; 0x24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f003 0307 	and.w	r3, r3, #7
 8002fba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	f1c3 0307 	rsb	r3, r3, #7
 8002fc2:	2b06      	cmp	r3, #6
 8002fc4:	bf28      	it	cs
 8002fc6:	2306      	movcs	r3, #6
 8002fc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	3306      	adds	r3, #6
 8002fce:	2b06      	cmp	r3, #6
 8002fd0:	d902      	bls.n	8002fd8 <NVIC_EncodePriority+0x30>
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	e000      	b.n	8002fda <NVIC_EncodePriority+0x32>
 8002fd8:	2300      	movs	r3, #0
 8002fda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	1e5a      	subs	r2, r3, #1
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	401a      	ands	r2, r3
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	2101      	movs	r1, #1
 8002ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff6:	1e59      	subs	r1, r3, #1
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8002ffc:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3724      	adds	r7, #36	; 0x24
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop

0800300c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	3b01      	subs	r3, #1
 8003018:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800301c:	d301      	bcc.n	8003022 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800301e:	2301      	movs	r3, #1
 8003020:	e00f      	b.n	8003042 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003022:	4a0a      	ldr	r2, [pc, #40]	; (800304c <SysTick_Config+0x40>)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3b01      	subs	r3, #1
 8003028:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800302a:	f04f 30ff 	mov.w	r0, #4294967295
 800302e:	213f      	movs	r1, #63	; 0x3f
 8003030:	f7ff ff90 	bl	8002f54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003034:	4b05      	ldr	r3, [pc, #20]	; (800304c <SysTick_Config+0x40>)
 8003036:	2200      	movs	r2, #0
 8003038:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800303a:	4b04      	ldr	r3, [pc, #16]	; (800304c <SysTick_Config+0x40>)
 800303c:	2207      	movs	r2, #7
 800303e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3708      	adds	r7, #8
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	e000e010 	.word	0xe000e010

08003050 <SYSTIMER_lInsertTimerList>:
**********************************************************************************************************************/
/*
 * This function is called to insert a timer into the timer list.
 */
static void SYSTIMER_lInsertTimerList(uint32_t tbl_index)
{
 8003050:	b490      	push	{r4, r7}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  SYSTIMER_OBJECT_t *object_ptr;
  int32_t delta_ticks;
  int32_t timer_count;
  bool found_flag = false;
 8003058:	2300      	movs	r3, #0
 800305a:	73fb      	strb	r3, [r7, #15]
   /* Get timer time */
  timer_count = (int32_t)g_timer_tbl[tbl_index].count;
 800305c:	496b      	ldr	r1, [pc, #428]	; (800320c <SYSTIMER_lInsertTimerList+0x1bc>)
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	4613      	mov	r3, r2
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	4413      	add	r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	440b      	add	r3, r1
 800306a:	3318      	adds	r3, #24
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	60bb      	str	r3, [r7, #8]
  /* Check if Timer list is NULL */
  if (NULL == g_timer_list)
 8003070:	4b67      	ldr	r3, [pc, #412]	; (8003210 <SYSTIMER_lInsertTimerList+0x1c0>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d109      	bne.n	800308c <SYSTIMER_lInsertTimerList+0x3c>
  {
    /* Set this as first Timer */
    g_timer_list = &g_timer_tbl[tbl_index];
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	4613      	mov	r3, r2
 800307c:	00db      	lsls	r3, r3, #3
 800307e:	4413      	add	r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	4a62      	ldr	r2, [pc, #392]	; (800320c <SYSTIMER_lInsertTimerList+0x1bc>)
 8003084:	4413      	add	r3, r2
 8003086:	4a62      	ldr	r2, [pc, #392]	; (8003210 <SYSTIMER_lInsertTimerList+0x1c0>)
 8003088:	6013      	str	r3, [r2, #0]
 800308a:	e0bb      	b.n	8003204 <SYSTIMER_lInsertTimerList+0x1b4>
  }
  /* If not, find the correct place, and insert the specified timer */
  else
  {
    object_ptr = g_timer_list;
 800308c:	4b60      	ldr	r3, [pc, #384]	; (8003210 <SYSTIMER_lInsertTimerList+0x1c0>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	617b      	str	r3, [r7, #20]
    /* Get timer tick */
    delta_ticks = timer_count;
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	613b      	str	r3, [r7, #16]
    /* Find correct place for inserting the timer */
    while ((NULL != object_ptr) && (false == found_flag))
 8003096:	e0ab      	b.n	80031f0 <SYSTIMER_lInsertTimerList+0x1a0>
    {
      /* Get timer Count Difference */
      delta_ticks -= (int32_t)object_ptr->count;
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	461a      	mov	r2, r3
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	1a9b      	subs	r3, r3, r2
 80030a2:	613b      	str	r3, [r7, #16]
      /* Check for delta ticks < 0 */
      if (delta_ticks <= 0)
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	dc7a      	bgt.n	80031a0 <SYSTIMER_lInsertTimerList+0x150>
      {
        /* Check If head item */
        if (NULL != object_ptr->prev)
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d026      	beq.n	8003100 <SYSTIMER_lInsertTimerList+0xb0>
        {
          /* If Insert to list */
          object_ptr->prev->next = &g_timer_tbl[tbl_index];
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	6859      	ldr	r1, [r3, #4]
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	4613      	mov	r3, r2
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	4413      	add	r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	4a52      	ldr	r2, [pc, #328]	; (800320c <SYSTIMER_lInsertTimerList+0x1bc>)
 80030c2:	4413      	add	r3, r2
 80030c4:	600b      	str	r3, [r1, #0]
          g_timer_tbl[tbl_index].prev = object_ptr->prev;
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	6859      	ldr	r1, [r3, #4]
 80030ca:	4850      	ldr	r0, [pc, #320]	; (800320c <SYSTIMER_lInsertTimerList+0x1bc>)
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	4613      	mov	r3, r2
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	4413      	add	r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	4403      	add	r3, r0
 80030d8:	6059      	str	r1, [r3, #4]
          g_timer_tbl[tbl_index].next = object_ptr;
 80030da:	494c      	ldr	r1, [pc, #304]	; (800320c <SYSTIMER_lInsertTimerList+0x1bc>)
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	4613      	mov	r3, r2
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	4413      	add	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	440b      	add	r3, r1
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	601a      	str	r2, [r3, #0]
          object_ptr->prev = &g_timer_tbl[tbl_index];
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	4613      	mov	r3, r2
 80030f0:	00db      	lsls	r3, r3, #3
 80030f2:	4413      	add	r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	4a45      	ldr	r2, [pc, #276]	; (800320c <SYSTIMER_lInsertTimerList+0x1bc>)
 80030f8:	441a      	add	r2, r3
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	605a      	str	r2, [r3, #4]
 80030fe:	e01c      	b.n	800313a <SYSTIMER_lInsertTimerList+0xea>
        }
        else
        {
          /* Set Timer as first item */
          g_timer_tbl[tbl_index].next = g_timer_list;
 8003100:	4b43      	ldr	r3, [pc, #268]	; (8003210 <SYSTIMER_lInsertTimerList+0x1c0>)
 8003102:	6819      	ldr	r1, [r3, #0]
 8003104:	4841      	ldr	r0, [pc, #260]	; (800320c <SYSTIMER_lInsertTimerList+0x1bc>)
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	4613      	mov	r3, r2
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	4413      	add	r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	4403      	add	r3, r0
 8003112:	6019      	str	r1, [r3, #0]
          g_timer_list->prev = &g_timer_tbl[tbl_index];
 8003114:	4b3e      	ldr	r3, [pc, #248]	; (8003210 <SYSTIMER_lInsertTimerList+0x1c0>)
 8003116:	6819      	ldr	r1, [r3, #0]
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	4613      	mov	r3, r2
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	4413      	add	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	4a3a      	ldr	r2, [pc, #232]	; (800320c <SYSTIMER_lInsertTimerList+0x1bc>)
 8003124:	4413      	add	r3, r2
 8003126:	604b      	str	r3, [r1, #4]
          g_timer_list = &g_timer_tbl[tbl_index];
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	4613      	mov	r3, r2
 800312c:	00db      	lsls	r3, r3, #3
 800312e:	4413      	add	r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4a36      	ldr	r2, [pc, #216]	; (800320c <SYSTIMER_lInsertTimerList+0x1bc>)
 8003134:	4413      	add	r3, r2
 8003136:	4a36      	ldr	r2, [pc, #216]	; (8003210 <SYSTIMER_lInsertTimerList+0x1c0>)
 8003138:	6013      	str	r3, [r2, #0]
        }
        g_timer_tbl[tbl_index].count = g_timer_tbl[tbl_index].next->count + (uint32_t)delta_ticks;
 800313a:	4934      	ldr	r1, [pc, #208]	; (800320c <SYSTIMER_lInsertTimerList+0x1bc>)
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	4613      	mov	r3, r2
 8003140:	00db      	lsls	r3, r3, #3
 8003142:	4413      	add	r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	440b      	add	r3, r1
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	699a      	ldr	r2, [r3, #24]
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	18d1      	adds	r1, r2, r3
 8003150:	482e      	ldr	r0, [pc, #184]	; (800320c <SYSTIMER_lInsertTimerList+0x1bc>)
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	4613      	mov	r3, r2
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	4413      	add	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4403      	add	r3, r0
 800315e:	3318      	adds	r3, #24
 8003160:	6019      	str	r1, [r3, #0]
        g_timer_tbl[tbl_index].next->count  -= g_timer_tbl[tbl_index].count;
 8003162:	492a      	ldr	r1, [pc, #168]	; (800320c <SYSTIMER_lInsertTimerList+0x1bc>)
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	4613      	mov	r3, r2
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	4413      	add	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	440b      	add	r3, r1
 8003170:	6819      	ldr	r1, [r3, #0]
 8003172:	4826      	ldr	r0, [pc, #152]	; (800320c <SYSTIMER_lInsertTimerList+0x1bc>)
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	4613      	mov	r3, r2
 8003178:	00db      	lsls	r3, r3, #3
 800317a:	4413      	add	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	4403      	add	r3, r0
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	6998      	ldr	r0, [r3, #24]
 8003184:	4c21      	ldr	r4, [pc, #132]	; (800320c <SYSTIMER_lInsertTimerList+0x1bc>)
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	4613      	mov	r3, r2
 800318a:	00db      	lsls	r3, r3, #3
 800318c:	4413      	add	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	4423      	add	r3, r4
 8003192:	3318      	adds	r3, #24
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	1ac3      	subs	r3, r0, r3
 8003198:	618b      	str	r3, [r1, #24]
        found_flag = true;
 800319a:	2301      	movs	r3, #1
 800319c:	73fb      	strb	r3, [r7, #15]
 800319e:	e024      	b.n	80031ea <SYSTIMER_lInsertTimerList+0x19a>
      }
      /* Check for last item in list */
      else
      {
        if ((delta_ticks > 0) && (NULL == object_ptr->next))
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	dd21      	ble.n	80031ea <SYSTIMER_lInsertTimerList+0x19a>
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d11d      	bne.n	80031ea <SYSTIMER_lInsertTimerList+0x19a>
        {
          /* Yes, insert into */
          g_timer_tbl[tbl_index].prev = object_ptr;
 80031ae:	4917      	ldr	r1, [pc, #92]	; (800320c <SYSTIMER_lInsertTimerList+0x1bc>)
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	4613      	mov	r3, r2
 80031b4:	00db      	lsls	r3, r3, #3
 80031b6:	4413      	add	r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	440b      	add	r3, r1
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	605a      	str	r2, [r3, #4]
          object_ptr->next = &g_timer_tbl[tbl_index];
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	4613      	mov	r3, r2
 80031c4:	00db      	lsls	r3, r3, #3
 80031c6:	4413      	add	r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	4a10      	ldr	r2, [pc, #64]	; (800320c <SYSTIMER_lInsertTimerList+0x1bc>)
 80031cc:	441a      	add	r2, r3
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	601a      	str	r2, [r3, #0]
          g_timer_tbl[tbl_index].count = (uint32_t)delta_ticks;
 80031d2:	6939      	ldr	r1, [r7, #16]
 80031d4:	480d      	ldr	r0, [pc, #52]	; (800320c <SYSTIMER_lInsertTimerList+0x1bc>)
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	4613      	mov	r3, r2
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	4413      	add	r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	4403      	add	r3, r0
 80031e2:	3318      	adds	r3, #24
 80031e4:	6019      	str	r1, [r3, #0]
          found_flag = true;
 80031e6:	2301      	movs	r3, #1
 80031e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      /* Get the next item in timer list */
      object_ptr = object_ptr->next;
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	617b      	str	r3, [r7, #20]
  {
    object_ptr = g_timer_list;
    /* Get timer tick */
    delta_ticks = timer_count;
    /* Find correct place for inserting the timer */
    while ((NULL != object_ptr) && (false == found_flag))
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d006      	beq.n	8003204 <SYSTIMER_lInsertTimerList+0x1b4>
 80031f6:	7bfb      	ldrb	r3, [r7, #15]
 80031f8:	f083 0301 	eor.w	r3, r3, #1
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f47f af4a 	bne.w	8003098 <SYSTIMER_lInsertTimerList+0x48>
      }
      /* Get the next item in timer list */
      object_ptr = object_ptr->next;
    }
  }
}
 8003204:	3718      	adds	r7, #24
 8003206:	46bd      	mov	sp, r7
 8003208:	bc90      	pop	{r4, r7}
 800320a:	4770      	bx	lr
 800320c:	2000930c 	.word	0x2000930c
 8003210:	200092d8 	.word	0x200092d8

08003214 <SYSTIMER_lRemoveTimerList>:

/*
 * This function is called to remove a timer from the timer list. 
 */
static void SYSTIMER_lRemoveTimerList(uint32_t tbl_index)
{
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  SYSTIMER_OBJECT_t *object_ptr;
  object_ptr = &g_timer_tbl[tbl_index];
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	4613      	mov	r3, r2
 8003220:	00db      	lsls	r3, r3, #3
 8003222:	4413      	add	r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	4a29      	ldr	r2, [pc, #164]	; (80032cc <SYSTIMER_lRemoveTimerList+0xb8>)
 8003228:	4413      	add	r3, r2
 800322a:	60fb      	str	r3, [r7, #12]
  /* Check whether only one timer available */
  if ((NULL == object_ptr->prev) && (NULL == object_ptr->next ))
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d107      	bne.n	8003244 <SYSTIMER_lRemoveTimerList+0x30>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d103      	bne.n	8003244 <SYSTIMER_lRemoveTimerList+0x30>
  {
    /* set timer list as NULL */ 
    g_timer_list = NULL;                  
 800323c:	4b24      	ldr	r3, [pc, #144]	; (80032d0 <SYSTIMER_lRemoveTimerList+0xbc>)
 800323e:	2200      	movs	r2, #0
 8003240:	601a      	str	r2, [r3, #0]
 8003242:	e03d      	b.n	80032c0 <SYSTIMER_lRemoveTimerList+0xac>
  }
  /* Check if the first item in timer list */
  else if (NULL == object_ptr->prev)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d114      	bne.n	8003276 <SYSTIMER_lRemoveTimerList+0x62>
  {
    /* Remove timer from list, and reset timer list */
    g_timer_list  = object_ptr->next;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a1f      	ldr	r2, [pc, #124]	; (80032d0 <SYSTIMER_lRemoveTimerList+0xbc>)
 8003252:	6013      	str	r3, [r2, #0]
    g_timer_list->prev = NULL;
 8003254:	4b1e      	ldr	r3, [pc, #120]	; (80032d0 <SYSTIMER_lRemoveTimerList+0xbc>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2200      	movs	r2, #0
 800325a:	605a      	str	r2, [r3, #4]
    g_timer_list->count += object_ptr->count;
 800325c:	4b1c      	ldr	r3, [pc, #112]	; (80032d0 <SYSTIMER_lRemoveTimerList+0xbc>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a1b      	ldr	r2, [pc, #108]	; (80032d0 <SYSTIMER_lRemoveTimerList+0xbc>)
 8003262:	6812      	ldr	r2, [r2, #0]
 8003264:	6991      	ldr	r1, [r2, #24]
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	6992      	ldr	r2, [r2, #24]
 800326a:	440a      	add	r2, r1
 800326c:	619a      	str	r2, [r3, #24]
    object_ptr->next    = NULL;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	601a      	str	r2, [r3, #0]
 8003274:	e024      	b.n	80032c0 <SYSTIMER_lRemoveTimerList+0xac>
  }
  /* Check if the last item in timer list */
  else if (NULL == object_ptr->next)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d107      	bne.n	800328e <SYSTIMER_lRemoveTimerList+0x7a>
  {
    /* Remove timer from list */
    object_ptr->prev->next = NULL;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	601a      	str	r2, [r3, #0]
    object_ptr->prev = NULL;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	605a      	str	r2, [r3, #4]
 800328c:	e018      	b.n	80032c0 <SYSTIMER_lRemoveTimerList+0xac>
  }
  else                       
  {
    /* Remove timer from list */
    object_ptr->prev->next  =  object_ptr->next;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	6812      	ldr	r2, [r2, #0]
 8003296:	601a      	str	r2, [r3, #0]
    object_ptr->next->prev  =  object_ptr->prev;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	6852      	ldr	r2, [r2, #4]
 80032a0:	605a      	str	r2, [r3, #4]
    object_ptr->next->count += object_ptr->count;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	6812      	ldr	r2, [r2, #0]
 80032aa:	6991      	ldr	r1, [r2, #24]
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	6992      	ldr	r2, [r2, #24]
 80032b0:	440a      	add	r2, r1
 80032b2:	619a      	str	r2, [r3, #24]
    object_ptr->next = NULL;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	601a      	str	r2, [r3, #0]
    object_ptr->prev = NULL;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	605a      	str	r2, [r3, #4]
  }
}
 80032c0:	3714      	adds	r7, #20
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	2000930c 	.word	0x2000930c
 80032d0:	200092d8 	.word	0x200092d8

080032d4 <SYSTIMER_lTimerHandler>:

/*
 * Handler function called from SysTick event handler.
 */
static void SYSTIMER_lTimerHandler(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
  SYSTIMER_OBJECT_t *object_ptr;
  /* Get first item of timer list */
  object_ptr = g_timer_list;
 80032da:	4b2f      	ldr	r3, [pc, #188]	; (8003398 <SYSTIMER_lTimerHandler+0xc4>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	607b      	str	r3, [r7, #4]
  while ((NULL != object_ptr) && (0U == object_ptr->count))
 80032e0:	e050      	b.n	8003384 <SYSTIMER_lTimerHandler+0xb0>
  {
    if (true == object_ptr->delete_swtmr)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d013      	beq.n	8003314 <SYSTIMER_lTimerHandler+0x40>
    {
      /* Yes, remove this timer from timer list */
      SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	695b      	ldr	r3, [r3, #20]
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7ff ff8f 	bl	8003214 <SYSTIMER_lRemoveTimerList>
      /* Set timer status as SYSTIMER_STATE_NOT_INITIALIZED */
      object_ptr->state = SYSTIMER_STATE_NOT_INITIALIZED;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	735a      	strb	r2, [r3, #13]
      /* Release resource which are hold by this timer */
      g_timer_tracker &= ~(1U << object_ptr->id);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	695b      	ldr	r3, [r3, #20]
 8003300:	461a      	mov	r2, r3
 8003302:	2301      	movs	r3, #1
 8003304:	4093      	lsls	r3, r2
 8003306:	43da      	mvns	r2, r3
 8003308:	4b24      	ldr	r3, [pc, #144]	; (800339c <SYSTIMER_lTimerHandler+0xc8>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4013      	ands	r3, r2
 800330e:	4a23      	ldr	r2, [pc, #140]	; (800339c <SYSTIMER_lTimerHandler+0xc8>)
 8003310:	6013      	str	r3, [r2, #0]
 8003312:	e034      	b.n	800337e <SYSTIMER_lTimerHandler+0xaa>
    }
    /* Check whether timer is a one shot timer */
    else if (SYSTIMER_MODE_ONE_SHOT == object_ptr->mode)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	7b1b      	ldrb	r3, [r3, #12]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d112      	bne.n	8003342 <SYSTIMER_lTimerHandler+0x6e>
    {
      if (SYSTIMER_STATE_RUNNING == object_ptr->state)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	7b5b      	ldrb	r3, [r3, #13]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d12c      	bne.n	800337e <SYSTIMER_lTimerHandler+0xaa>
      {
        /* Yes, remove this timer from timer list */
        SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	695b      	ldr	r3, [r3, #20]
 8003328:	4618      	mov	r0, r3
 800332a:	f7ff ff73 	bl	8003214 <SYSTIMER_lRemoveTimerList>
        /* Set timer status as SYSTIMER_STATE_STOPPED */
        object_ptr->state = SYSTIMER_STATE_STOPPED;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2202      	movs	r2, #2
 8003332:	735a      	strb	r2, [r3, #13]
        /* Call timer callback function */
        (object_ptr->callback)(object_ptr->args);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	6912      	ldr	r2, [r2, #16]
 800333c:	4610      	mov	r0, r2
 800333e:	4798      	blx	r3
 8003340:	e01d      	b.n	800337e <SYSTIMER_lTimerHandler+0xaa>
      }
    }
    /* Check whether timer is periodic timer */
    else if (SYSTIMER_MODE_PERIODIC == object_ptr->mode)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	7b1b      	ldrb	r3, [r3, #12]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d118      	bne.n	800337c <SYSTIMER_lTimerHandler+0xa8>
    {
      if (SYSTIMER_STATE_RUNNING == object_ptr->state)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	7b5b      	ldrb	r3, [r3, #13]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d115      	bne.n	800337e <SYSTIMER_lTimerHandler+0xaa>
      {
        /* Yes, remove this timer from timer list */
        SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	4618      	mov	r0, r3
 8003358:	f7ff ff5c 	bl	8003214 <SYSTIMER_lRemoveTimerList>
        /* Reset timer tick */
        object_ptr->count = object_ptr->reload;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	69da      	ldr	r2, [r3, #28]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	619a      	str	r2, [r3, #24]
        /* Insert timer into timer list */
        SYSTIMER_lInsertTimerList((uint32_t)object_ptr->id);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	695b      	ldr	r3, [r3, #20]
 8003368:	4618      	mov	r0, r3
 800336a:	f7ff fe71 	bl	8003050 <SYSTIMER_lInsertTimerList>
        /* Call timer callback function */
        (object_ptr->callback)(object_ptr->args);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	6912      	ldr	r2, [r2, #16]
 8003376:	4610      	mov	r0, r2
 8003378:	4798      	blx	r3
 800337a:	e000      	b.n	800337e <SYSTIMER_lTimerHandler+0xaa>
      }
    }
    else
    {
      break;
 800337c:	e009      	b.n	8003392 <SYSTIMER_lTimerHandler+0xbe>
    }
    /* Get first item of timer list */
    object_ptr = g_timer_list;
 800337e:	4b06      	ldr	r3, [pc, #24]	; (8003398 <SYSTIMER_lTimerHandler+0xc4>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	607b      	str	r3, [r7, #4]
static void SYSTIMER_lTimerHandler(void)
{
  SYSTIMER_OBJECT_t *object_ptr;
  /* Get first item of timer list */
  object_ptr = g_timer_list;
  while ((NULL != object_ptr) && (0U == object_ptr->count))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d003      	beq.n	8003392 <SYSTIMER_lTimerHandler+0xbe>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d0a7      	beq.n	80032e2 <SYSTIMER_lTimerHandler+0xe>
      break;
    }
    /* Get first item of timer list */
    object_ptr = g_timer_list;
  }
}
 8003392:	3708      	adds	r7, #8
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	200092d8 	.word	0x200092d8
 800339c:	200092dc 	.word	0x200092dc

080033a0 <SysTick_Handler>:

/*
 *  SysTick Event Handler.
 */
void SysTick_Handler(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
  SYSTIMER_OBJECT_t *object_ptr;
  object_ptr = g_timer_list;
 80033a6:	4b0e      	ldr	r3, [pc, #56]	; (80033e0 <SysTick_Handler+0x40>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	607b      	str	r3, [r7, #4]
  g_systick_count++;
 80033ac:	4b0d      	ldr	r3, [pc, #52]	; (80033e4 <SysTick_Handler+0x44>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	3301      	adds	r3, #1
 80033b2:	4a0c      	ldr	r2, [pc, #48]	; (80033e4 <SysTick_Handler+0x44>)
 80033b4:	6013      	str	r3, [r2, #0]

  if (NULL != object_ptr)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00e      	beq.n	80033da <SysTick_Handler+0x3a>
  {
    if (object_ptr->count > 1UL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d905      	bls.n	80033d0 <SysTick_Handler+0x30>
    {
      object_ptr->count--;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	1e5a      	subs	r2, r3, #1
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	619a      	str	r2, [r3, #24]
 80033ce:	e004      	b.n	80033da <SysTick_Handler+0x3a>
    }
    else
    {
      object_ptr->count = 0U;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	619a      	str	r2, [r3, #24]
      SYSTIMER_lTimerHandler();
 80033d6:	f7ff ff7d 	bl	80032d4 <SYSTIMER_lTimerHandler>
    }
  }
}
 80033da:	3708      	adds	r7, #8
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	200092d8 	.word	0x200092d8
 80033e4:	200092e0 	.word	0x200092e0

080033e8 <SYSTIMER_Init>:

/*
 * Initialization function which initializes the SYSTIMER APP, configures SysTick timer and SysTick exception.
 */
SYSTIMER_STATUS_t SYSTIMER_Init(SYSTIMER_t *handle)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  SYSTIMER_STATUS_t status = SYSTIMER_STATUS_SUCCESS;
 80033f0:	2300      	movs	r3, #0
 80033f2:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("SYSTIMER_Init: SYSTIMER APP handle pointer uninitialized", (handle != NULL));

  /* Check APP initialization status to ensure whether SYSTIMER_Init called or not, initialize SYSTIMER if
   * SYSTIMER_Init called first time.
   */
  if (false == handle->init_status)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	f083 0301 	eor.w	r3, r3, #1
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d020      	beq.n	8003444 <SYSTIMER_Init+0x5c>
  {
    /* Initialize the header of the list */
    g_timer_list = NULL;
 8003402:	4b13      	ldr	r3, [pc, #76]	; (8003450 <SYSTIMER_Init+0x68>)
 8003404:	2200      	movs	r2, #0
 8003406:	601a      	str	r2, [r3, #0]
    /* Initialize SysTick timer */
    status = (SYSTIMER_STATUS_t)SysTick_Config((uint32_t)(SYSTIMER_SYSTICK_CLOCK * SYSTIMER_TICK_PERIOD));
 8003408:	4812      	ldr	r0, [pc, #72]	; (8003454 <SYSTIMER_Init+0x6c>)
 800340a:	f7ff fdff 	bl	800300c <SysTick_Config>
 800340e:	4603      	mov	r3, r0
 8003410:	73fb      	strb	r3, [r7, #15]

    if (SYSTIMER_STATUS_FAILURE == status)
 8003412:	7bfb      	ldrb	r3, [r7, #15]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d015      	beq.n	8003444 <SYSTIMER_Init+0x5c>
    }
    else
    {
#if (UC_FAMILY == XMC4)
      /* setting of First SW Timer period is always and subpriority value for XMC4000 devices */
      NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(
 8003418:	f7ff fd8e 	bl	8002f38 <__NVIC_GetPriorityGrouping>
 800341c:	4603      	mov	r3, r0
 800341e:	4618      	mov	r0, r3
 8003420:	213f      	movs	r1, #63	; 0x3f
 8003422:	2200      	movs	r2, #0
 8003424:	f7ff fdc0 	bl	8002fa8 <NVIC_EncodePriority>
 8003428:	4603      	mov	r3, r0
 800342a:	f04f 30ff 	mov.w	r0, #4294967295
 800342e:	4619      	mov	r1, r3
 8003430:	f7ff fd90 	bl	8002f54 <__NVIC_SetPriority>
      NVIC_GetPriorityGrouping(), SYSTIMER_PRIORITY, SYSTIMER_SUBPRIORITY));
#elif (UC_FAMILY == XMC1)
      /* setting of priority value for XMC1000 devices */
      NVIC_SetPriority(SysTick_IRQn, SYSTIMER_PRIORITY);
#endif      
      g_timer_tracker = 0U;
 8003434:	4b08      	ldr	r3, [pc, #32]	; (8003458 <SYSTIMER_Init+0x70>)
 8003436:	2200      	movs	r2, #0
 8003438:	601a      	str	r2, [r3, #0]
      /* Update the Initialization status of the SYSTIMER APP instance */
      handle->init_status = true;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2201      	movs	r2, #1
 800343e:	701a      	strb	r2, [r3, #0]
      status = SYSTIMER_STATUS_SUCCESS;
 8003440:	2300      	movs	r3, #0
 8003442:	73fb      	strb	r3, [r7, #15]
    }
  }

  return (status);
 8003444:	7bfb      	ldrb	r3, [r7, #15]
}
 8003446:	4618      	mov	r0, r3
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	200092d8 	.word	0x200092d8
 8003454:	0001d4c0 	.word	0x0001d4c0
 8003458:	200092dc 	.word	0x200092dc

0800345c <SYSTIMER_CreateTimer>:
  uint32_t period,
  SYSTIMER_MODE_t mode,
  SYSTIMER_CALLBACK_t callback,
  void  *args
)
{
 800345c:	b480      	push	{r7}
 800345e:	b089      	sub	sp, #36	; 0x24
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	607a      	str	r2, [r7, #4]
 8003466:	603b      	str	r3, [r7, #0]
 8003468:	460b      	mov	r3, r1
 800346a:	72fb      	strb	r3, [r7, #11]
  uint32_t id = 0U;
 800346c:	2300      	movs	r3, #0
 800346e:	61fb      	str	r3, [r7, #28]
  uint32_t count = 0U;
 8003470:	2300      	movs	r3, #0
 8003472:	61bb      	str	r3, [r7, #24]
  uint32_t period_ratio = 0U;
 8003474:	2300      	movs	r3, #0
 8003476:	617b      	str	r3, [r7, #20]
            ((period >= SYSTIMER_TICK_PERIOD_US) && (period > 0U) && (period <= 0xFFFFFFFFU)));
  XMC_ASSERT("SYSTIMER_CreateTimer: Timer creation failure due to invalid timer mode",
            ((SYSTIMER_MODE_ONE_SHOT == mode) || (SYSTIMER_MODE_PERIODIC == mode)));
  XMC_ASSERT("SYSTIMER_CreateTimer: Can not create software without user callback", (NULL != callback));
  
  if (period < SYSTIMER_TICK_PERIOD_US)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800347e:	d202      	bcs.n	8003486 <SYSTIMER_CreateTimer+0x2a>
  {
    id = 0U;
 8003480:	2300      	movs	r3, #0
 8003482:	61fb      	str	r3, [r7, #28]
 8003484:	e07b      	b.n	800357e <SYSTIMER_CreateTimer+0x122>
  }
  else
  {
    for (count = 0U; count < SYSTIMER_CFG_MAX_TMR; count++)
 8003486:	2300      	movs	r3, #0
 8003488:	61bb      	str	r3, [r7, #24]
 800348a:	e075      	b.n	8003578 <SYSTIMER_CreateTimer+0x11c>
    {
      /* Check for free timer ID */
      if (0U == (g_timer_tracker & (1U << count)))
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	2201      	movs	r2, #1
 8003490:	409a      	lsls	r2, r3
 8003492:	4b3e      	ldr	r3, [pc, #248]	; (800358c <SYSTIMER_CreateTimer+0x130>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4013      	ands	r3, r2
 8003498:	2b00      	cmp	r3, #0
 800349a:	d16a      	bne.n	8003572 <SYSTIMER_CreateTimer+0x116>
      {
        /* If yes, assign ID to this timer */
        g_timer_tracker |= (1U << count);
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	2201      	movs	r2, #1
 80034a0:	409a      	lsls	r2, r3
 80034a2:	4b3a      	ldr	r3, [pc, #232]	; (800358c <SYSTIMER_CreateTimer+0x130>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	4a38      	ldr	r2, [pc, #224]	; (800358c <SYSTIMER_CreateTimer+0x130>)
 80034aa:	6013      	str	r3, [r2, #0]
        /* Initialize the timer as per input values */
        g_timer_tbl[count].id     = count;
 80034ac:	4938      	ldr	r1, [pc, #224]	; (8003590 <SYSTIMER_CreateTimer+0x134>)
 80034ae:	69ba      	ldr	r2, [r7, #24]
 80034b0:	4613      	mov	r3, r2
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	4413      	add	r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	440b      	add	r3, r1
 80034ba:	3310      	adds	r3, #16
 80034bc:	69ba      	ldr	r2, [r7, #24]
 80034be:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].mode   = mode;
 80034c0:	4933      	ldr	r1, [pc, #204]	; (8003590 <SYSTIMER_CreateTimer+0x134>)
 80034c2:	69ba      	ldr	r2, [r7, #24]
 80034c4:	4613      	mov	r3, r2
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	4413      	add	r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	440b      	add	r3, r1
 80034ce:	3308      	adds	r3, #8
 80034d0:	7afa      	ldrb	r2, [r7, #11]
 80034d2:	711a      	strb	r2, [r3, #4]
        g_timer_tbl[count].state  = SYSTIMER_STATE_STOPPED;
 80034d4:	492e      	ldr	r1, [pc, #184]	; (8003590 <SYSTIMER_CreateTimer+0x134>)
 80034d6:	69ba      	ldr	r2, [r7, #24]
 80034d8:	4613      	mov	r3, r2
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	4413      	add	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	440b      	add	r3, r1
 80034e2:	3308      	adds	r3, #8
 80034e4:	2202      	movs	r2, #2
 80034e6:	715a      	strb	r2, [r3, #5]
        period_ratio = (uint32_t)(period / SYSTIMER_TICK_PERIOD_US);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	4a2a      	ldr	r2, [pc, #168]	; (8003594 <SYSTIMER_CreateTimer+0x138>)
 80034ec:	fba2 2303 	umull	r2, r3, r2, r3
 80034f0:	099b      	lsrs	r3, r3, #6
 80034f2:	617b      	str	r3, [r7, #20]
        g_timer_tbl[count].count  = (period_ratio + HW_TIMER_ADDITIONAL_CNT);
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	1c59      	adds	r1, r3, #1
 80034f8:	4825      	ldr	r0, [pc, #148]	; (8003590 <SYSTIMER_CreateTimer+0x134>)
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	4613      	mov	r3, r2
 80034fe:	00db      	lsls	r3, r3, #3
 8003500:	4413      	add	r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	4403      	add	r3, r0
 8003506:	3318      	adds	r3, #24
 8003508:	6019      	str	r1, [r3, #0]
        g_timer_tbl[count].reload  = period_ratio;
 800350a:	4921      	ldr	r1, [pc, #132]	; (8003590 <SYSTIMER_CreateTimer+0x134>)
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	4613      	mov	r3, r2
 8003510:	00db      	lsls	r3, r3, #3
 8003512:	4413      	add	r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	440b      	add	r3, r1
 8003518:	3318      	adds	r3, #24
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].callback = callback;
 800351e:	491c      	ldr	r1, [pc, #112]	; (8003590 <SYSTIMER_CreateTimer+0x134>)
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	4613      	mov	r3, r2
 8003524:	00db      	lsls	r3, r3, #3
 8003526:	4413      	add	r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	440b      	add	r3, r1
 800352c:	3308      	adds	r3, #8
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	601a      	str	r2, [r3, #0]
        g_timer_tbl[count].args = args;
 8003532:	4917      	ldr	r1, [pc, #92]	; (8003590 <SYSTIMER_CreateTimer+0x134>)
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	4613      	mov	r3, r2
 8003538:	00db      	lsls	r3, r3, #3
 800353a:	4413      	add	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	440b      	add	r3, r1
 8003540:	3310      	adds	r3, #16
 8003542:	683a      	ldr	r2, [r7, #0]
 8003544:	601a      	str	r2, [r3, #0]
        g_timer_tbl[count].prev   = NULL;
 8003546:	4912      	ldr	r1, [pc, #72]	; (8003590 <SYSTIMER_CreateTimer+0x134>)
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	4613      	mov	r3, r2
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	4413      	add	r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	440b      	add	r3, r1
 8003554:	2200      	movs	r2, #0
 8003556:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].next   = NULL;
 8003558:	490d      	ldr	r1, [pc, #52]	; (8003590 <SYSTIMER_CreateTimer+0x134>)
 800355a:	69ba      	ldr	r2, [r7, #24]
 800355c:	4613      	mov	r3, r2
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	4413      	add	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	440b      	add	r3, r1
 8003566:	2200      	movs	r2, #0
 8003568:	601a      	str	r2, [r3, #0]
        id = count + 1U;
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	3301      	adds	r3, #1
 800356e:	61fb      	str	r3, [r7, #28]
        break;
 8003570:	e005      	b.n	800357e <SYSTIMER_CreateTimer+0x122>
  {
    id = 0U;
  }
  else
  {
    for (count = 0U; count < SYSTIMER_CFG_MAX_TMR; count++)
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	3301      	adds	r3, #1
 8003576:	61bb      	str	r3, [r7, #24]
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	2b07      	cmp	r3, #7
 800357c:	d986      	bls.n	800348c <SYSTIMER_CreateTimer+0x30>
      }
    }

  }

  return (id);
 800357e:	69fb      	ldr	r3, [r7, #28]
}  
 8003580:	4618      	mov	r0, r3
 8003582:	3724      	adds	r7, #36	; 0x24
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr
 800358c:	200092dc 	.word	0x200092dc
 8003590:	2000930c 	.word	0x2000930c
 8003594:	10624dd3 	.word	0x10624dd3

08003598 <SYSTIMER_StartTimer>:

/*
 *  API to start the software timer.
 */
SYSTIMER_STATUS_t SYSTIMER_StartTimer(uint32_t id)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  SYSTIMER_STATUS_t status;
  status = SYSTIMER_STATUS_FAILURE;
 80035a0:	2301      	movs	r3, #1
 80035a2:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("SYSTIMER_StartTimer: Failure in timer restart operation due to invalid timer ID",
            ((id <= SYSTIMER_CFG_MAX_TMR) && (id > 0U)));
  XMC_ASSERT("SYSTIMER_StartTimer: Error during start of software timer", (0U != (g_timer_tracker & (1U << (id - 1U)))));
  
  /* Check if timer is running */
  if (SYSTIMER_STATE_STOPPED == g_timer_tbl[id - 1U].state)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	1e5a      	subs	r2, r3, #1
 80035a8:	491a      	ldr	r1, [pc, #104]	; (8003614 <SYSTIMER_StartTimer+0x7c>)
 80035aa:	4613      	mov	r3, r2
 80035ac:	00db      	lsls	r3, r3, #3
 80035ae:	4413      	add	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	440b      	add	r3, r1
 80035b4:	3308      	adds	r3, #8
 80035b6:	795b      	ldrb	r3, [r3, #5]
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d126      	bne.n	800360a <SYSTIMER_StartTimer+0x72>
  {
    g_timer_tbl[id - 1U].count = (g_timer_tbl[id - 1U].reload + HW_TIMER_ADDITIONAL_CNT);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	1e5a      	subs	r2, r3, #1
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	1e59      	subs	r1, r3, #1
 80035c4:	4813      	ldr	r0, [pc, #76]	; (8003614 <SYSTIMER_StartTimer+0x7c>)
 80035c6:	460b      	mov	r3, r1
 80035c8:	00db      	lsls	r3, r3, #3
 80035ca:	440b      	add	r3, r1
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	4403      	add	r3, r0
 80035d0:	3318      	adds	r3, #24
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	1c59      	adds	r1, r3, #1
 80035d6:	480f      	ldr	r0, [pc, #60]	; (8003614 <SYSTIMER_StartTimer+0x7c>)
 80035d8:	4613      	mov	r3, r2
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	4413      	add	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	4403      	add	r3, r0
 80035e2:	3318      	adds	r3, #24
 80035e4:	6019      	str	r1, [r3, #0]
    /* set timer status as SYSTIMER_STATE_RUNNING */
    g_timer_tbl[id - 1U].state = SYSTIMER_STATE_RUNNING;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	1e5a      	subs	r2, r3, #1
 80035ea:	490a      	ldr	r1, [pc, #40]	; (8003614 <SYSTIMER_StartTimer+0x7c>)
 80035ec:	4613      	mov	r3, r2
 80035ee:	00db      	lsls	r3, r3, #3
 80035f0:	4413      	add	r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	440b      	add	r3, r1
 80035f6:	3308      	adds	r3, #8
 80035f8:	2201      	movs	r2, #1
 80035fa:	715a      	strb	r2, [r3, #5]
    /* Insert this timer into timer list */
    SYSTIMER_lInsertTimerList((id - 1U));
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	3b01      	subs	r3, #1
 8003600:	4618      	mov	r0, r3
 8003602:	f7ff fd25 	bl	8003050 <SYSTIMER_lInsertTimerList>
    status = SYSTIMER_STATUS_SUCCESS;
 8003606:	2300      	movs	r3, #0
 8003608:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 800360a:	7bfb      	ldrb	r3, [r7, #15]
}
 800360c:	4618      	mov	r0, r3
 800360e:	3710      	adds	r7, #16
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	2000930c 	.word	0x2000930c

08003618 <SYSTIMER_StopTimer>:

/*
 *  API to stop the software timer.
 */
SYSTIMER_STATUS_t SYSTIMER_StopTimer(uint32_t id)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  SYSTIMER_STATUS_t status;
  status = SYSTIMER_STATUS_SUCCESS;
 8003620:	2300      	movs	r3, #0
 8003622:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("SYSTIMER_StopTimer: Failure in timer restart operation due to invalid timer ID",
            ((id <= SYSTIMER_CFG_MAX_TMR) && (id > 0U)));
  XMC_ASSERT("SYSTIMER_StopTimer: Error during stop of software timer", (0U != (g_timer_tracker & (1U << (id - 1U)))));

  if (SYSTIMER_STATE_NOT_INITIALIZED == g_timer_tbl[id - 1U].state)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	1e5a      	subs	r2, r3, #1
 8003628:	4916      	ldr	r1, [pc, #88]	; (8003684 <SYSTIMER_StopTimer+0x6c>)
 800362a:	4613      	mov	r3, r2
 800362c:	00db      	lsls	r3, r3, #3
 800362e:	4413      	add	r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	440b      	add	r3, r1
 8003634:	3308      	adds	r3, #8
 8003636:	795b      	ldrb	r3, [r3, #5]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d102      	bne.n	8003642 <SYSTIMER_StopTimer+0x2a>
  {
    status = SYSTIMER_STATUS_FAILURE;
 800363c:	2301      	movs	r3, #1
 800363e:	73fb      	strb	r3, [r7, #15]
 8003640:	e01b      	b.n	800367a <SYSTIMER_StopTimer+0x62>
  }
  else
  {
    /* Check whether Timer is in Stop state */
    if (SYSTIMER_STATE_RUNNING == g_timer_tbl[id - 1U].state)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	1e5a      	subs	r2, r3, #1
 8003646:	490f      	ldr	r1, [pc, #60]	; (8003684 <SYSTIMER_StopTimer+0x6c>)
 8003648:	4613      	mov	r3, r2
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	4413      	add	r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	440b      	add	r3, r1
 8003652:	3308      	adds	r3, #8
 8003654:	795b      	ldrb	r3, [r3, #5]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d10f      	bne.n	800367a <SYSTIMER_StopTimer+0x62>
    {
        /* Set timer status as SYSTIMER_STATE_STOPPED */
        g_timer_tbl[id - 1U].state = SYSTIMER_STATE_STOPPED;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	1e5a      	subs	r2, r3, #1
 800365e:	4909      	ldr	r1, [pc, #36]	; (8003684 <SYSTIMER_StopTimer+0x6c>)
 8003660:	4613      	mov	r3, r2
 8003662:	00db      	lsls	r3, r3, #3
 8003664:	4413      	add	r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	440b      	add	r3, r1
 800366a:	3308      	adds	r3, #8
 800366c:	2202      	movs	r2, #2
 800366e:	715a      	strb	r2, [r3, #5]

        /* remove Timer from node list */
        SYSTIMER_lRemoveTimerList(id - 1U);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	3b01      	subs	r3, #1
 8003674:	4618      	mov	r0, r3
 8003676:	f7ff fdcd 	bl	8003214 <SYSTIMER_lRemoveTimerList>

    }
  }

  return (status);
 800367a:	7bfb      	ldrb	r3, [r7, #15]
}
 800367c:	4618      	mov	r0, r3
 800367e:	3710      	adds	r7, #16
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	2000930c 	.word	0x2000930c

08003688 <SYSTIMER_DeleteTimer>:

/*
 *  Function to delete the Timer instance.
 */
SYSTIMER_STATUS_t SYSTIMER_DeleteTimer(uint32_t id)
{
 8003688:	b480      	push	{r7}
 800368a:	b085      	sub	sp, #20
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  SYSTIMER_STATUS_t status;
  status = SYSTIMER_STATUS_SUCCESS;
 8003690:	2300      	movs	r3, #0
 8003692:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("SYSTIMER_DeleteTimer: Failure in timer restart operation due to invalid timer ID",
            ((id <= SYSTIMER_CFG_MAX_TMR) && (id > 0U)));
  XMC_ASSERT("SYSTIMER_DeleteTimer: Error during deletion of software timer", (0U != (g_timer_tracker & (1U << (id - 1U)))));

  /* Check whether Timer is in delete state */
  if (SYSTIMER_STATE_NOT_INITIALIZED == g_timer_tbl[id - 1U].state)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	1e5a      	subs	r2, r3, #1
 8003698:	4920      	ldr	r1, [pc, #128]	; (800371c <SYSTIMER_DeleteTimer+0x94>)
 800369a:	4613      	mov	r3, r2
 800369c:	00db      	lsls	r3, r3, #3
 800369e:	4413      	add	r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	440b      	add	r3, r1
 80036a4:	3308      	adds	r3, #8
 80036a6:	795b      	ldrb	r3, [r3, #5]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d102      	bne.n	80036b2 <SYSTIMER_DeleteTimer+0x2a>
  {
      status = SYSTIMER_STATUS_FAILURE;
 80036ac:	2301      	movs	r3, #1
 80036ae:	73fb      	strb	r3, [r7, #15]
 80036b0:	e02d      	b.n	800370e <SYSTIMER_DeleteTimer+0x86>
  }
  else
  {
    if (SYSTIMER_STATE_STOPPED == g_timer_tbl[id - 1U].state)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	1e5a      	subs	r2, r3, #1
 80036b6:	4919      	ldr	r1, [pc, #100]	; (800371c <SYSTIMER_DeleteTimer+0x94>)
 80036b8:	4613      	mov	r3, r2
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	4413      	add	r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	440b      	add	r3, r1
 80036c2:	3308      	adds	r3, #8
 80036c4:	795b      	ldrb	r3, [r3, #5]
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d116      	bne.n	80036f8 <SYSTIMER_DeleteTimer+0x70>
    {
      /* Set timer status as SYSTIMER_STATE_NOT_INITIALIZED */
      g_timer_tbl[id - 1U].state = SYSTIMER_STATE_NOT_INITIALIZED;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	1e5a      	subs	r2, r3, #1
 80036ce:	4913      	ldr	r1, [pc, #76]	; (800371c <SYSTIMER_DeleteTimer+0x94>)
 80036d0:	4613      	mov	r3, r2
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	4413      	add	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	440b      	add	r3, r1
 80036da:	3308      	adds	r3, #8
 80036dc:	2200      	movs	r2, #0
 80036de:	715a      	strb	r2, [r3, #5]
      /* Release resource which are hold by this timer */
      g_timer_tracker &= ~(1U << (id - 1U));
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	3b01      	subs	r3, #1
 80036e4:	461a      	mov	r2, r3
 80036e6:	2301      	movs	r3, #1
 80036e8:	4093      	lsls	r3, r2
 80036ea:	43da      	mvns	r2, r3
 80036ec:	4b0c      	ldr	r3, [pc, #48]	; (8003720 <SYSTIMER_DeleteTimer+0x98>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4013      	ands	r3, r2
 80036f2:	4a0b      	ldr	r2, [pc, #44]	; (8003720 <SYSTIMER_DeleteTimer+0x98>)
 80036f4:	6013      	str	r3, [r2, #0]
 80036f6:	e00a      	b.n	800370e <SYSTIMER_DeleteTimer+0x86>
    }
    else
    {
      /* Yes, remove this timer from timer list during ISR execution */
      g_timer_tbl[id - 1U].delete_swtmr = true;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	1e5a      	subs	r2, r3, #1
 80036fc:	4907      	ldr	r1, [pc, #28]	; (800371c <SYSTIMER_DeleteTimer+0x94>)
 80036fe:	4613      	mov	r3, r2
 8003700:	00db      	lsls	r3, r3, #3
 8003702:	4413      	add	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	440b      	add	r3, r1
 8003708:	3320      	adds	r3, #32
 800370a:	2201      	movs	r2, #1
 800370c:	701a      	strb	r2, [r3, #0]
    }
  }

  return (status);
 800370e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003710:	4618      	mov	r0, r3
 8003712:	3714      	adds	r7, #20
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr
 800371c:	2000930c 	.word	0x2000930c
 8003720:	200092dc 	.word	0x200092dc

08003724 <SYSTIMER_GetTime>:

/*
 *  API to get the current SysTick time in microsecond.
 */
uint32_t SYSTIMER_GetTime(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
  return (g_systick_count * SYSTIMER_TICK_PERIOD_US);
 8003728:	4b05      	ldr	r3, [pc, #20]	; (8003740 <SYSTIMER_GetTime+0x1c>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003730:	fb02 f303 	mul.w	r3, r2, r3
}
 8003734:	4618      	mov	r0, r3
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	200092e0 	.word	0x200092e0

08003744 <XMC_CCU8_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_DisableClock()<BR>  XMC_CCU8_EnableMultipleClocks()<BR>  XMC_CCU8_StartPrescaler()<BR>  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_EnableClock(XMC_CCU8_MODULE_t *const module, const uint8_t slice_number)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	460b      	mov	r3, r1
 800374e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1 << slice_number);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	68da      	ldr	r2, [r3, #12]
 8003754:	78fb      	ldrb	r3, [r7, #3]
 8003756:	2101      	movs	r1, #1
 8003758:	fa01 f303 	lsl.w	r3, r1, r3
 800375c:	431a      	orrs	r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	60da      	str	r2, [r3, #12]
}
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <XMC_CCU8_SLICE_EnableTrap>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_TrapConfig()<BR>  XMC_CCU8_SLICE_DisableTrap()<BR>  XMC_CCU8_SLICE_ConfigureEvent()<BR> 
 *  XMC_CCU8_SLICE_SetInput().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_EnableTrap(XMC_CCU8_SLICE_t *const slice, const uint32_t out_mask)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_EnableTrap:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TC |= (uint32_t)out_mask << CCU8_CC8_TC_TRAPE0_Pos;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	695a      	ldr	r2, [r3, #20]
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	045b      	lsls	r3, r3, #17
 800377e:	431a      	orrs	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	615a      	str	r2, [r3, #20]
}
 8003784:	370c      	adds	r7, #12
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop

08003790 <XMC_CCU8_SLICE_DisableTrap>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_EnableTrap().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_DisableTrap(XMC_CCU8_SLICE_t *const slice, const uint32_t out_mask)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_DisableTrap:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  
  slice->TC &= ~((uint32_t)out_mask << CCU8_CC8_TC_TRAPE0_Pos);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	695a      	ldr	r2, [r3, #20]
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	045b      	lsls	r3, r3, #17
 80037a2:	43db      	mvns	r3, r3
 80037a4:	401a      	ands	r2, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	615a      	str	r2, [r3, #20]
}
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <XMC_CCU8_SLICE_StopTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StopTimer(XMC_CCU8_SLICE_t *const slice)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU8_CC8_TCCLR_TRBC_Msk;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	611a      	str	r2, [r3, #16]
}
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <XMC_CCU8_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU8_EnableShadowTransfer(XMC_CCU8_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_EnableShadowTransfer:Invalid module Pointer", XMC_CCU8_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	683a      	ldr	r2, [r7, #0]
 80037da:	611a      	str	r2, [r3, #16]
}
 80037dc:	370c      	adds	r7, #12
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop

080037e8 <XMC_CCU8_SLICE_SetTimerValue>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_GetTimerValue().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_SetTimerValue(XMC_CCU8_SLICE_t *const slice, const uint16_t timer_val)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	460b      	mov	r3, r1
 80037f2:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerValue:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TIMER = (uint32_t) timer_val;
 80037f4:	887a      	ldrh	r2, [r7, #2]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	671a      	str	r2, [r3, #112]	; 0x70
}
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <XMC_CCU8_SLICE_EnableEvent>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_SetInterruptNode()<BR>  XMC_CCU8_SLICE_EnableMultipleEvents()<BR>  XMC_CCU8_SLICE_DisableEvent()<BR> 
 *  XMC_CCU8_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_EnableEvent(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_IRQ_ID_t event)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	460b      	mov	r3, r1
 800380e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_EnableEvent:Invalid SR event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));

  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003816:	78fb      	ldrb	r3, [r7, #3]
 8003818:	2101      	movs	r1, #1
 800381a:	fa01 f303 	lsl.w	r3, r1, r3
 800381e:	431a      	orrs	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <XMC_CCU8_SLICE_ClearEvent>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_EnableEvent()<BR>  XMC_CCU8_SLICE_SetEvent()<BR>  XMC_CCU8_SLICE_GetEvent().
 *
 */
__STATIC_INLINE void XMC_CCU8_SLICE_ClearEvent(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_IRQ_ID_t event)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	460b      	mov	r3, r1
 800383a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_SLICE_ClearEvent:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_ClearEvent:Invalid SR event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));
  slice->SWR |= ((uint32_t) 1) << ((uint32_t) event);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003842:	78fb      	ldrb	r3, [r7, #3]
 8003844:	2101      	movs	r1, #1
 8003846:	fa01 f303 	lsl.w	r3, r1, r3
 800384a:	431a      	orrs	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <XMC_SCU_SetCcuTriggerHigh>:
 * the timer using this API.<BR>
 * \par<b>Related APIs:</b><BR>
 * XMC_CCU4_SLICE_StartConfig(), XMC_CCU4_SLICE_SetInput(), XMC_SCU_SetCcuTriggerLow()\n\n\n
 */
__STATIC_INLINE void XMC_SCU_SetCcuTriggerHigh(const uint32_t trigger)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  SCU_GENERAL->CCUCON |= (uint32_t)trigger;
 8003864:	4905      	ldr	r1, [pc, #20]	; (800387c <XMC_SCU_SetCcuTriggerHigh+0x20>)
 8003866:	4b05      	ldr	r3, [pc, #20]	; (800387c <XMC_SCU_SetCcuTriggerHigh+0x20>)
 8003868:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4313      	orrs	r3, r2
 800386e:	64cb      	str	r3, [r1, #76]	; 0x4c
}
 8003870:	370c      	adds	r7, #12
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	50004000 	.word	0x50004000

08003880 <XMC_SCU_SetCcuTriggerLow>:
 * the timer using this API.<BR>
 * \par<b>Related APIs:</b><BR>
 * XMC_CCU4_SLICE_StartConfig(), XMC_CCU4_SLICE_SetInput(), XMC_SCU_SetCcuTriggerHigh()\n\n\n
 */
__STATIC_INLINE void XMC_SCU_SetCcuTriggerLow(const uint32_t trigger)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  SCU_GENERAL->CCUCON &= (uint32_t)~trigger;
 8003888:	4905      	ldr	r1, [pc, #20]	; (80038a0 <XMC_SCU_SetCcuTriggerLow+0x20>)
 800388a:	4b05      	ldr	r3, [pc, #20]	; (80038a0 <XMC_SCU_SetCcuTriggerLow+0x20>)
 800388c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	43db      	mvns	r3, r3
 8003892:	4013      	ands	r3, r2
 8003894:	64cb      	str	r3, [r1, #76]	; 0x4c
}
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr
 80038a0:	50004000 	.word	0x50004000

080038a4 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	460b      	mov	r3, r1
 80038ae:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 80038b0:	78fb      	ldrb	r3, [r7, #3]
 80038b2:	2201      	movs	r2, #1
 80038b4:	409a      	lsls	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	605a      	str	r2, [r3, #4]
}
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	460b      	mov	r3, r1
 80038ce:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 80038d0:	78fb      	ldrb	r3, [r7, #3]
 80038d2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80038d6:	409a      	lsls	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	605a      	str	r2, [r3, #4]
}
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop

080038e8 <PWM_SVM_lEnableEvent>:

/**********************************************************************************************************************
* API IMPLEMENTATION
**********************************************************************************************************************/
void PWM_SVM_lEnableEvent(PWM_SVM_t* const HandlePtr)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  /*Enable the slice 0 period match interrupt */
  if ((uint8_t) true == HandlePtr->confighandle_ptr->enable_periodmatch)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d106      	bne.n	800390a <PWM_SVM_lEnableEvent+0x22>
  {
    XMC_CCU8_SLICE_EnableEvent(HandlePtr->phase_ptr[0]->slice_ptr,
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4618      	mov	r0, r3
 8003904:	2100      	movs	r1, #0
 8003906:	f7ff ff7d 	bl	8003804 <XMC_CCU8_SLICE_EnableEvent>
        (XMC_CCU8_SLICE_IRQ_ID_t) XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH);
  }
  /*Enable the slice 0 trap interrupt */
  if ((uint8_t) true == HandlePtr->confighandle_ptr->enable_trapevent)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003912:	2b01      	cmp	r3, #1
 8003914:	d106      	bne.n	8003924 <PWM_SVM_lEnableEvent+0x3c>
  {
    XMC_CCU8_SLICE_EnableEvent(HandlePtr->phase_ptr[0]->slice_ptr,
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4618      	mov	r0, r3
 800391e:	210a      	movs	r1, #10
 8003920:	f7ff ff70 	bl	8003804 <XMC_CCU8_SLICE_EnableEvent>
        (XMC_CCU8_SLICE_IRQ_ID_t) XMC_CCU8_SLICE_IRQ_ID_EVENT2);
  }
}
 8003924:	3708      	adds	r7, #8
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop

0800392c <PWM_SVM_InverterDisable>:
/**
 * This function disables the inverter
 */
void PWM_SVM_InverterDisable(PWM_SVM_t* const HandlePtr)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("PWM_SVM_InverterDisable:NULL Handle Pointer", (HandlePtr != (PWM_SVM_t *) NULL));
  /*Inverter Enable pin settings.*/
  if ((PWM_SVM_INVERTERPINLEVEL_t) PWM_SVM_IPIN_HIGH == HandlePtr->confighandle_ptr->inverter_pin)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	7cdb      	ldrb	r3, [r3, #19]
 800393a:	2b01      	cmp	r3, #1
 800393c:	d109      	bne.n	8003952 <PWM_SVM_InverterDisable+0x26>
  {
    /*Set IO output to low*/
    XMC_GPIO_SetOutputLow(HandlePtr->inverterpin_ptr->port, HandlePtr->inverterpin_ptr->pin);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003948:	791b      	ldrb	r3, [r3, #4]
 800394a:	4610      	mov	r0, r2
 800394c:	4619      	mov	r1, r3
 800394e:	f7ff ffb9 	bl	80038c4 <XMC_GPIO_SetOutputLow>
  }
  if ((PWM_SVM_INVERTERPINLEVEL_t) PWM_SVM_IPIN_LOW == HandlePtr->confighandle_ptr->inverter_pin)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	7cdb      	ldrb	r3, [r3, #19]
 8003958:	2b02      	cmp	r3, #2
 800395a:	d109      	bne.n	8003970 <PWM_SVM_InverterDisable+0x44>
  {
    /*Set IO output to high*/
    XMC_GPIO_SetOutputHigh(HandlePtr->inverterpin_ptr->port, HandlePtr->inverterpin_ptr->pin);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003966:	791b      	ldrb	r3, [r3, #4]
 8003968:	4610      	mov	r0, r2
 800396a:	4619      	mov	r1, r3
 800396c:	f7ff ff9a 	bl	80038a4 <XMC_GPIO_SetOutputHigh>
  }
}
 8003970:	3708      	adds	r7, #8
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop

08003978 <PWM_SVM_InverterEnable>:
/**
 * This function Enables the inverter
 */
void PWM_SVM_InverterEnable(PWM_SVM_t* const HandlePtr)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("NULL Handle Pointer", (HandlePtr != (PWM_SVM_t *) NULL));
  /*Inverter Enable pin settings.*/
  if ((PWM_SVM_INVERTERPINLEVEL_t) PWM_SVM_IPIN_HIGH == HandlePtr->confighandle_ptr->inverter_pin)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	7cdb      	ldrb	r3, [r3, #19]
 8003986:	2b01      	cmp	r3, #1
 8003988:	d109      	bne.n	800399e <PWM_SVM_InverterEnable+0x26>
  {
    /*Set IO output to high*/
    XMC_GPIO_SetOutputHigh(HandlePtr->inverterpin_ptr->port, HandlePtr->inverterpin_ptr->pin);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003994:	791b      	ldrb	r3, [r3, #4]
 8003996:	4610      	mov	r0, r2
 8003998:	4619      	mov	r1, r3
 800399a:	f7ff ff83 	bl	80038a4 <XMC_GPIO_SetOutputHigh>
  }
  if ((PWM_SVM_INVERTERPINLEVEL_t) PWM_SVM_IPIN_LOW == HandlePtr->confighandle_ptr->inverter_pin)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	7cdb      	ldrb	r3, [r3, #19]
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d109      	bne.n	80039bc <PWM_SVM_InverterEnable+0x44>
  {
    /*Set IO output to low*/
    XMC_GPIO_SetOutputLow(HandlePtr->inverterpin_ptr->port, HandlePtr->inverterpin_ptr->pin);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b2:	791b      	ldrb	r3, [r3, #4]
 80039b4:	4610      	mov	r0, r2
 80039b6:	4619      	mov	r1, r3
 80039b8:	f7ff ff84 	bl	80038c4 <XMC_GPIO_SetOutputLow>
  }
}
 80039bc:	3708      	adds	r7, #8
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop

080039c4 <PWM_SVM_Init>:
/**
 * This function initializes the peripherals and SVM structure 
 * required for the SVM algorithm.
 */
PWM_SVM_STATUS_t PWM_SVM_Init(PWM_SVM_t* const HandlePtr)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b086      	sub	sp, #24
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80039cc:	2300      	movs	r3, #0
 80039ce:	617b      	str	r3, [r7, #20]
  uint32_t phase_count = 0U;
 80039d0:	2300      	movs	r3, #0
 80039d2:	613b      	str	r3, [r7, #16]
  PWM_SVM_STATUS_t status = (PWM_SVM_STATUS_t) PWM_SVM_STATUS_SUCCESS;
 80039d4:	2300      	movs	r3, #0
 80039d6:	73fb      	strb	r3, [r7, #15]
  const PWM_SVM_Config_t* const svmptr = HandlePtr->confighandle_ptr;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	60bb      	str	r3, [r7, #8]
  XMC_ASSERT("PWM_SVM_Init:NULL Handle Pointer", (HandlePtr != (PWM_SVM_t *) NULL));
  if ((PWM_SVM_STATE_t) PWM_SVM_UNINITIALIZED == HandlePtr->state)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	f040 8133 	bne.w	8003c50 <PWM_SVM_Init+0x28c>
  {
    status = (PWM_SVM_STATUS_t) GLOBAL_CCU8_Init(HandlePtr->globalccu8_handle_ptr);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039ee:	4618      	mov	r0, r3
 80039f0:	f001 fcc0 	bl	8005374 <GLOBAL_CCU8_Init>
 80039f4:	4603      	mov	r3, r0
 80039f6:	73fb      	strb	r3, [r7, #15]
    /*Configure io init for all three phases output*/
    for (phase_count = 0U; phase_count < PWM_SVM_PHASE_IO_MAX; phase_count++)
 80039f8:	2300      	movs	r3, #0
 80039fa:	613b      	str	r3, [r7, #16]
 80039fc:	e016      	b.n	8003a2c <PWM_SVM_Init+0x68>
    {
      XMC_GPIO_Init(HandlePtr->pwmoutpin_ptr[phase_count]->port, HandlePtr->pwmoutpin_ptr[phase_count]->pin,
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	3208      	adds	r2, #8
 8003a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a08:	6818      	ldr	r0, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	3208      	adds	r2, #8
 8003a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a14:	7919      	ldrb	r1, [r3, #4]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	320e      	adds	r2, #14
 8003a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a20:	461a      	mov	r2, r3
 8003a22:	f7fc fcbf 	bl	80003a4 <XMC_GPIO_Init>
  XMC_ASSERT("PWM_SVM_Init:NULL Handle Pointer", (HandlePtr != (PWM_SVM_t *) NULL));
  if ((PWM_SVM_STATE_t) PWM_SVM_UNINITIALIZED == HandlePtr->state)
  {
    status = (PWM_SVM_STATUS_t) GLOBAL_CCU8_Init(HandlePtr->globalccu8_handle_ptr);
    /*Configure io init for all three phases output*/
    for (phase_count = 0U; phase_count < PWM_SVM_PHASE_IO_MAX; phase_count++)
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	3301      	adds	r3, #1
 8003a2a:	613b      	str	r3, [r7, #16]
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	2b05      	cmp	r3, #5
 8003a30:	d9e5      	bls.n	80039fe <PWM_SVM_Init+0x3a>
    {
      XMC_GPIO_Init(HandlePtr->pwmoutpin_ptr[phase_count]->port, HandlePtr->pwmoutpin_ptr[phase_count]->pin,
          HandlePtr->pwmoutconfig_ptr[phase_count]);
    }
    /*Configure io init for trap input*/
    if ((uint8_t) true == svmptr->enable_trap)
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d11a      	bne.n	8003a72 <PWM_SVM_Init+0xae>
    {
      XMC_GPIO_Init(HandlePtr->trappin_ptr->port, HandlePtr->trappin_ptr->pin, HandlePtr->trapinconfig_ptr);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a40:	6819      	ldr	r1, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a46:	791a      	ldrb	r2, [r3, #4]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a4c:	4608      	mov	r0, r1
 8003a4e:	4611      	mov	r1, r2
 8003a50:	461a      	mov	r2, r3
 8003a52:	f7fc fca7 	bl	80003a4 <XMC_GPIO_Init>
      XMC_GPIO_SetHardwareControl(HandlePtr->trappin_ptr->port, HandlePtr->trappin_ptr->pin,
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a5a:	6819      	ldr	r1, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a60:	791a      	ldrb	r2, [r3, #4]
          HandlePtr->confighandle_ptr->trap_hwsel);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
    }
    /*Configure io init for trap input*/
    if ((uint8_t) true == svmptr->enable_trap)
    {
      XMC_GPIO_Init(HandlePtr->trappin_ptr->port, HandlePtr->trappin_ptr->pin, HandlePtr->trapinconfig_ptr);
      XMC_GPIO_SetHardwareControl(HandlePtr->trappin_ptr->port, HandlePtr->trappin_ptr->pin,
 8003a66:	7c9b      	ldrb	r3, [r3, #18]
 8003a68:	4608      	mov	r0, r1
 8003a6a:	4611      	mov	r1, r2
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	f7fd ff27 	bl	80018c0 <XMC_GPIO_SetHardwareControl>
          HandlePtr->confighandle_ptr->trap_hwsel);
    }

    /*Configure io init for inverter enable pin output*/
    if (svmptr->inverter_pin > (PWM_SVM_INVERTERPINLEVEL_t) PWM_SVM_IPIN_NOTREQUIRED)
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	7cdb      	ldrb	r3, [r3, #19]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00c      	beq.n	8003a94 <PWM_SVM_Init+0xd0>
    {
      XMC_GPIO_Init(HandlePtr->inverterpin_ptr->port, HandlePtr->inverterpin_ptr->pin,
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a7e:	6819      	ldr	r1, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a84:	791a      	ldrb	r2, [r3, #4]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a8a:	4608      	mov	r0, r1
 8003a8c:	4611      	mov	r1, r2
 8003a8e:	461a      	mov	r2, r3
 8003a90:	f7fc fc88 	bl	80003a4 <XMC_GPIO_Init>
          HandlePtr->inverterpinconfig_ptr);
    }

    /*Inverter Enable pin level is set to passive level.*/
    PWM_SVM_InverterDisable(HandlePtr);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f7ff ff49 	bl	800392c <PWM_SVM_InverterDisable>

    /* Phase configurations */
    for (count = 0U; count < PWM_SVM_NUMBERPHASE; count++)
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	617b      	str	r3, [r7, #20]
 8003a9e:	e0a4      	b.n	8003bea <PWM_SVM_Init+0x226>
    {
      XMC_CCU8_SLICE_CompareInit(HandlePtr->phase_ptr[count]->slice_ptr, HandlePtr->phase_configinit_ptr);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	3202      	adds	r2, #2
 8003aa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	4610      	mov	r0, r2
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	f7fd fd12 	bl	80014dc <XMC_CCU8_SLICE_CompareInit>

      /* configure dead time */
      XMC_CCU8_SLICE_DeadTimeInit(HandlePtr->phase_ptr[count]->slice_ptr, HandlePtr->deadtimeconfig_ptr);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	697a      	ldr	r2, [r7, #20]
 8003abc:	3202      	adds	r2, #2
 8003abe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ac8:	4610      	mov	r0, r2
 8003aca:	4619      	mov	r1, r3
 8003acc:	f7fd fe8a 	bl	80017e4 <XMC_CCU8_SLICE_DeadTimeInit>

      /* Configure external start to event 0 */
      XMC_CCU8_SLICE_ConfigureEvent(HandlePtr->phase_ptr[count]->slice_ptr,
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	3202      	adds	r2, #2
 8003ad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ae0:	4610      	mov	r0, r2
 8003ae2:	2101      	movs	r1, #1
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	f7fd fded 	bl	80016c4 <XMC_CCU8_SLICE_ConfigureEvent>
          (XMC_CCU8_SLICE_EVENT_t) XMC_CCU8_SLICE_EVENT_0, HandlePtr->startconfig_ptr);
      /* if trap is enabled, Enable Trap for all the three phases
       map the external trap functionality to event 2 */
      if ((uint8_t) true == svmptr->enable_trap)
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d121      	bne.n	8003b38 <PWM_SVM_Init+0x174>
      {
        XMC_CCU8_SLICE_ConfigureEvent(HandlePtr->phase_ptr[count]->slice_ptr, XMC_CCU8_SLICE_EVENT_2,
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	3202      	adds	r2, #2
 8003afa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b04:	4610      	mov	r0, r2
 8003b06:	2103      	movs	r1, #3
 8003b08:	461a      	mov	r2, r3
 8003b0a:	f7fd fddb 	bl	80016c4 <XMC_CCU8_SLICE_ConfigureEvent>
            HandlePtr->trapconfig_ptr);
        XMC_CCU8_SLICE_TrapConfig(HandlePtr->phase_ptr[count]->slice_ptr, svmptr->trap_exit_mode,
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	3202      	adds	r2, #2
 8003b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b18:	6819      	ldr	r1, [r3, #0]
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	7c5a      	ldrb	r2, [r3, #17]
            (bool)svmptr->trap_sync_pwm);
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
       map the external trap functionality to event 2 */
      if ((uint8_t) true == svmptr->enable_trap)
      {
        XMC_CCU8_SLICE_ConfigureEvent(HandlePtr->phase_ptr[count]->slice_ptr, XMC_CCU8_SLICE_EVENT_2,
            HandlePtr->trapconfig_ptr);
        XMC_CCU8_SLICE_TrapConfig(HandlePtr->phase_ptr[count]->slice_ptr, svmptr->trap_exit_mode,
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	bf14      	ite	ne
 8003b28:	2301      	movne	r3, #1
 8003b2a:	2300      	moveq	r3, #0
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	4608      	mov	r0, r1
 8003b30:	4611      	mov	r1, r2
 8003b32:	461a      	mov	r2, r3
 8003b34:	f7fd fd8c 	bl	8001650 <XMC_CCU8_SLICE_TrapConfig>
            (bool)svmptr->trap_sync_pwm);
      }

      /* Program period  value of the timer  */
      XMC_CCU8_SLICE_SetTimerPeriodMatch(HandlePtr->phase_ptr[count]->slice_ptr, (uint16_t) HandlePtr->period);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	697a      	ldr	r2, [r7, #20]
 8003b3c:	3202      	adds	r2, #2
 8003b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	4610      	mov	r0, r2
 8003b4e:	4619      	mov	r1, r3
 8003b50:	f7fd fe22 	bl	8001798 <XMC_CCU8_SLICE_SetTimerPeriodMatch>
      /* Program timer compare value for channel 1 or channel 2*/
      XMC_CCU8_SLICE_SetTimerCompareMatch(HandlePtr->phase_ptr[count]->slice_ptr,
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	3202      	adds	r2, #2
 8003b5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4618      	mov	r0, r3
 8003b62:	2100      	movs	r1, #0
 8003b64:	2200      	movs	r2, #0
 8003b66:	f7fd fe25 	bl	80017b4 <XMC_CCU8_SLICE_SetTimerCompareMatch>
          (XMC_CCU8_SLICE_COMPARE_CHANNEL_t) XMC_CCU8_SLICE_COMPARE_CHANNEL_1, 0U);
      /* Program timer compare value for channel 1 or channel 2*/
      XMC_CCU8_SLICE_SetTimerCompareMatch(HandlePtr->phase_ptr[count]->slice_ptr,
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	3202      	adds	r2, #2
 8003b70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4618      	mov	r0, r3
 8003b78:	2101      	movs	r1, #1
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f7fd fe1a 	bl	80017b4 <XMC_CCU8_SLICE_SetTimerCompareMatch>
          (XMC_CCU8_SLICE_COMPARE_CHANNEL_t) XMC_CCU8_SLICE_COMPARE_CHANNEL_2, 0U);
      /* Configures status ST1, ST2 mapping to STy */
      XMC_CCU8_SLICE_ConfigureStatusBitOutput(HandlePtr->phase_ptr[count]->slice_ptr,
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	3202      	adds	r2, #2
 8003b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b8a:	6819      	ldr	r1, [r3, #0]
          HandlePtr->confighandle_ptr->phase_st_map[count]);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681a      	ldr	r2, [r3, #0]
          (XMC_CCU8_SLICE_COMPARE_CHANNEL_t) XMC_CCU8_SLICE_COMPARE_CHANNEL_1, 0U);
      /* Program timer compare value for channel 1 or channel 2*/
      XMC_CCU8_SLICE_SetTimerCompareMatch(HandlePtr->phase_ptr[count]->slice_ptr,
          (XMC_CCU8_SLICE_COMPARE_CHANNEL_t) XMC_CCU8_SLICE_COMPARE_CHANNEL_2, 0U);
      /* Configures status ST1, ST2 mapping to STy */
      XMC_CCU8_SLICE_ConfigureStatusBitOutput(HandlePtr->phase_ptr[count]->slice_ptr,
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	4413      	add	r3, r2
 8003b94:	3308      	adds	r3, #8
 8003b96:	791b      	ldrb	r3, [r3, #4]
 8003b98:	4608      	mov	r0, r1
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	f7fd fe38 	bl	8001810 <XMC_CCU8_SLICE_ConfigureStatusBitOutput>
          HandlePtr->confighandle_ptr->phase_st_map[count]);

      /* Bind period match event to an NVIC node  */
      HandlePtr->phase_ptr[count]->slice_ptr->SRS |= svmptr->event_sr_selector[count];
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	697a      	ldr	r2, [r7, #20]
 8003ba4:	3202      	adds	r2, #2
 8003ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	6979      	ldr	r1, [r7, #20]
 8003bb0:	3102      	adds	r1, #2
 8003bb2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8003bb6:	6812      	ldr	r2, [r2, #0]
 8003bb8:	f8d2 10a8 	ldr.w	r1, [r2, #168]	; 0xa8
 8003bbc:	68ba      	ldr	r2, [r7, #8]
 8003bbe:	6978      	ldr	r0, [r7, #20]
 8003bc0:	300a      	adds	r0, #10
 8003bc2:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

      /* enable module clock by clearing idle bit*/
      XMC_CCU8_EnableClock(HandlePtr->global_ptr, HandlePtr->phase_ptr[count]->slice_number);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6859      	ldr	r1, [r3, #4]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	3202      	adds	r2, #2
 8003bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bda:	791b      	ldrb	r3, [r3, #4]
 8003bdc:	4608      	mov	r0, r1
 8003bde:	4619      	mov	r1, r3
 8003be0:	f7ff fdb0 	bl	8003744 <XMC_CCU8_EnableClock>

    /*Inverter Enable pin level is set to passive level.*/
    PWM_SVM_InverterDisable(HandlePtr);

    /* Phase configurations */
    for (count = 0U; count < PWM_SVM_NUMBERPHASE; count++)
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	3301      	adds	r3, #1
 8003be8:	617b      	str	r3, [r7, #20]
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	f67f af57 	bls.w	8003aa0 <PWM_SVM_Init+0xdc>

      /* enable module clock by clearing idle bit*/
      XMC_CCU8_EnableClock(HandlePtr->global_ptr, HandlePtr->phase_ptr[count]->slice_number);
    }

    PWM_SVM_lEnableEvent(HandlePtr);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f7ff fe78 	bl	80038e8 <PWM_SVM_lEnableEvent>
#if defined (MATH)
      /*Ungate Math coprocessor*/
      XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_MATH);
#endif
    /*Enable the shadow transfer for all three slice*/
    XMC_CCU8_EnableShadowTransfer(HandlePtr->global_ptr, svmptr->shadow_transfer_mask);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685a      	ldr	r2, [r3, #4]
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c00:	4610      	mov	r0, r2
 8003c02:	4619      	mov	r1, r3
 8003c04:	f7ff fde2 	bl	80037cc <XMC_CCU8_EnableShadowTransfer>

    /* update dead time variable*/
    HandlePtr->deadtime_rising_edge = HandlePtr->deadtimeconfig_ptr->channel1_st_rising_edge_counter;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c0c:	791b      	ldrb	r3, [r3, #4]
 8003c0e:	461a      	mov	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    HandlePtr->deadtime_falling_edge = HandlePtr->deadtimeconfig_ptr->channel1_st_falling_edge_counter;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c1a:	795b      	ldrb	r3, [r3, #5]
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    HandlePtr->deadtime_div = (XMC_CCU8_SLICE_DTC_DIV_t) HandlePtr->deadtimeconfig_ptr->div;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	461a      	mov	r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    if ((PWM_SVM_STATUS_t) PWM_SVM_STATUS_FAILURE != status)
 8003c38:	7bfb      	ldrb	r3, [r7, #15]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d006      	beq.n	8003c4c <PWM_SVM_Init+0x288>
    {
      status = PWM_SVM_STATUS_SUCCESS;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	73fb      	strb	r3, [r7, #15]
      HandlePtr->state = (PWM_SVM_STATE_t) PWM_SVM_INITIALIZED;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 8003c4a:	e001      	b.n	8003c50 <PWM_SVM_Init+0x28c>
    }
    else
    {
      status = PWM_SVM_STATUS_FAILURE;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return (status);
 8003c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3718      	adds	r7, #24
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop

08003c5c <PWM_SVM_Start>:

/**
 * This function starts the CCU8 slices used to generate SVM.
 */
void PWM_SVM_Start(PWM_SVM_t* const HandlePtr)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8003c64:	2300      	movs	r3, #0
 8003c66:	60fb      	str	r3, [r7, #12]
  const PWM_SVM_Config_t* const svmptr = HandlePtr->confighandle_ptr;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	60bb      	str	r3, [r7, #8]
  XMC_ASSERT("PWM_SVM_Start:NULL Handle Pointer", (HandlePtr != (PWM_SVM_t *) NULL));
  if (((PWM_SVM_STATE_t) PWM_SVM_INITIALIZED == HandlePtr->state)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d005      	beq.n	8003c84 <PWM_SVM_Start+0x28>
      || ((PWM_SVM_STATE_t) PWM_SVM_STOPPED == HandlePtr->state))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8003c7e:	2b03      	cmp	r3, #3
 8003c80:	f040 8133 	bne.w	8003eea <PWM_SVM_Start+0x28e>
  {
    HandlePtr->ta = 0U;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
    HandlePtr->tb = 0U;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
    HandlePtr->ta2 = 0U;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
    HandlePtr->tb2 = 0U;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
    HandlePtr->v_ta = 0U;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
    HandlePtr->v_tb = 0U;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
    HandlePtr->v_ta2 = 0U;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
    HandlePtr->v_tb2 = 0U;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
    HandlePtr->sector = 0U;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    HandlePtr->subsector = 0U;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0

    /*Enable Inverter*/
    PWM_SVM_InverterEnable(HandlePtr);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f7ff fe4f 	bl	8003978 <PWM_SVM_InverterEnable>

    for (count = 0U; count < PWM_SVM_NUMBERPHASE; count++)
 8003cda:	2300      	movs	r3, #0
 8003cdc:	60fb      	str	r3, [r7, #12]
 8003cde:	e026      	b.n	8003d2e <PWM_SVM_Start+0xd2>
    {
      /* if trap is enabled, Enable Trap for all the three phases
       map the external trap functionality to event 2 */
      if ((uint8_t) true == svmptr->enable_trap)
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d113      	bne.n	8003d12 <PWM_SVM_Start+0xb6>
      {
        XMC_CCU8_SLICE_ClearEvent(HandlePtr->phase_ptr[count]->slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT2);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	3202      	adds	r2, #2
 8003cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	210a      	movs	r1, #10
 8003cfa:	f7ff fd99 	bl	8003830 <XMC_CCU8_SLICE_ClearEvent>
        XMC_CCU8_SLICE_ClearEvent(HandlePtr->phase_ptr[count]->slice_ptr, XMC_CCU8_SLICE_IRQ_ID_TRAP);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	3202      	adds	r2, #2
 8003d04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	210b      	movs	r1, #11
 8003d0e:	f7ff fd8f 	bl	8003830 <XMC_CCU8_SLICE_ClearEvent>
      }
      /* configure the Start trigger function*/
      XMC_CCU8_SLICE_StartConfig(HandlePtr->phase_ptr[count]->slice_ptr,
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	3202      	adds	r2, #2
 8003d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	2101      	movs	r1, #1
 8003d22:	2201      	movs	r2, #1
 8003d24:	f7fd fc4c 	bl	80015c0 <XMC_CCU8_SLICE_StartConfig>
    HandlePtr->subsector = 0U;

    /*Enable Inverter*/
    PWM_SVM_InverterEnable(HandlePtr);

    for (count = 0U; count < PWM_SVM_NUMBERPHASE; count++)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	60fb      	str	r3, [r7, #12]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d9d5      	bls.n	8003ce0 <PWM_SVM_Start+0x84>
      XMC_CCU8_SLICE_StartConfig(HandlePtr->phase_ptr[count]->slice_ptr,
          (XMC_CCU8_SLICE_EVENT_t) XMC_CCU8_SLICE_EVENT_0,
          (XMC_CCU8_SLICE_START_MODE_t) XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR);
    }

    if ((uint8_t) true == svmptr->enable_trap)
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d129      	bne.n	8003d92 <PWM_SVM_Start+0x136>
    {
      /* Enables trap feature for phase u out 0 and 1*/
      XMC_CCU8_SLICE_EnableTrap(HandlePtr->phase_ptr[0]->slice_ptr,
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	681a      	ldr	r2, [r3, #0]
          ((uint32_t) svmptr->phase_u_out0 | ((uint32_t) svmptr->phase_u_out0 << 1U)));
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	7d1b      	ldrb	r3, [r3, #20]
 8003d48:	4619      	mov	r1, r3
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	7d1b      	ldrb	r3, [r3, #20]
 8003d4e:	005b      	lsls	r3, r3, #1
    }

    if ((uint8_t) true == svmptr->enable_trap)
    {
      /* Enables trap feature for phase u out 0 and 1*/
      XMC_CCU8_SLICE_EnableTrap(HandlePtr->phase_ptr[0]->slice_ptr,
 8003d50:	430b      	orrs	r3, r1
 8003d52:	4610      	mov	r0, r2
 8003d54:	4619      	mov	r1, r3
 8003d56:	f7ff fd09 	bl	800376c <XMC_CCU8_SLICE_EnableTrap>
          ((uint32_t) svmptr->phase_u_out0 | ((uint32_t) svmptr->phase_u_out0 << 1U)));

      /* Enables trap feature for phase v out 0 and 1*/
      XMC_CCU8_SLICE_EnableTrap(HandlePtr->phase_ptr[1]->slice_ptr,
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	681a      	ldr	r2, [r3, #0]
          ((uint32_t) svmptr->phase_v_out0 | ((uint32_t) svmptr->phase_v_out0 << 1U)));
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	7d5b      	ldrb	r3, [r3, #21]
 8003d64:	4619      	mov	r1, r3
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	7d5b      	ldrb	r3, [r3, #21]
 8003d6a:	005b      	lsls	r3, r3, #1
      /* Enables trap feature for phase u out 0 and 1*/
      XMC_CCU8_SLICE_EnableTrap(HandlePtr->phase_ptr[0]->slice_ptr,
          ((uint32_t) svmptr->phase_u_out0 | ((uint32_t) svmptr->phase_u_out0 << 1U)));

      /* Enables trap feature for phase v out 0 and 1*/
      XMC_CCU8_SLICE_EnableTrap(HandlePtr->phase_ptr[1]->slice_ptr,
 8003d6c:	430b      	orrs	r3, r1
 8003d6e:	4610      	mov	r0, r2
 8003d70:	4619      	mov	r1, r3
 8003d72:	f7ff fcfb 	bl	800376c <XMC_CCU8_SLICE_EnableTrap>
          ((uint32_t) svmptr->phase_v_out0 | ((uint32_t) svmptr->phase_v_out0 << 1U)));

      /* Enables trap feature for phase w out 0 and 1*/
      XMC_CCU8_SLICE_EnableTrap(HandlePtr->phase_ptr[2]->slice_ptr,
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	681a      	ldr	r2, [r3, #0]
          ((uint32_t) svmptr->phase_w_out0 | ((uint32_t) svmptr->phase_w_out0 << 1U)));
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	7d9b      	ldrb	r3, [r3, #22]
 8003d80:	4619      	mov	r1, r3
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	7d9b      	ldrb	r3, [r3, #22]
 8003d86:	005b      	lsls	r3, r3, #1
      /* Enables trap feature for phase v out 0 and 1*/
      XMC_CCU8_SLICE_EnableTrap(HandlePtr->phase_ptr[1]->slice_ptr,
          ((uint32_t) svmptr->phase_v_out0 | ((uint32_t) svmptr->phase_v_out0 << 1U)));

      /* Enables trap feature for phase w out 0 and 1*/
      XMC_CCU8_SLICE_EnableTrap(HandlePtr->phase_ptr[2]->slice_ptr,
 8003d88:	430b      	orrs	r3, r1
 8003d8a:	4610      	mov	r0, r2
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	f7ff fced 	bl	800376c <XMC_CCU8_SLICE_EnableTrap>
          ((uint32_t) svmptr->phase_w_out0 | ((uint32_t) svmptr->phase_w_out0 << 1U)));
    }

    /*enable module clock by clearing idle bit if any of current measurement is selected */
    if ((PWM_SVM_CMTYPE_t) PWM_SVM_NONE != svmptr->current_measurement)
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	7c1b      	ldrb	r3, [r3, #16]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d075      	beq.n	8003e86 <PWM_SVM_Start+0x22a>
    {
      XMC_CCU8_SLICE_StartConfig(HandlePtr->phase_ptr[3]->slice_ptr, (XMC_CCU8_SLICE_EVENT_t) XMC_CCU8_SLICE_EVENT_0,
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4618      	mov	r0, r3
 8003da2:	2101      	movs	r1, #1
 8003da4:	2201      	movs	r2, #1
 8003da6:	f7fd fc0b 	bl	80015c0 <XMC_CCU8_SLICE_StartConfig>
          (XMC_CCU8_SLICE_START_MODE_t) XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR);

      /* offset for current measurement trigger */
      if ((PWM_SVM_CMTYPE_t) PWM_SVM_DCLINKCM == svmptr->current_measurement)
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	7c1b      	ldrb	r3, [r3, #16]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d133      	bne.n	8003e1a <PWM_SVM_Start+0x1be>
      {
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[0]->slice_ptr,
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	6819      	ldr	r1, [r3, #0]
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8003dbe:	085b      	lsrs	r3, r3, #1
 8003dc0:	b29a      	uxth	r2, r3
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
          (XMC_CCU8_SLICE_START_MODE_t) XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR);

      /* offset for current measurement trigger */
      if ((PWM_SVM_CMTYPE_t) PWM_SVM_DCLINKCM == svmptr->current_measurement)
      {
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[0]->slice_ptr,
 8003dc8:	4413      	add	r3, r2
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	4608      	mov	r0, r1
 8003dce:	4619      	mov	r1, r3
 8003dd0:	f7ff fd0a 	bl	80037e8 <XMC_CCU8_SLICE_SetTimerValue>
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[1]->slice_ptr,
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	6819      	ldr	r1, [r3, #0]
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8003de0:	085b      	lsrs	r3, r3, #1
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
      /* offset for current measurement trigger */
      if ((PWM_SVM_CMTYPE_t) PWM_SVM_DCLINKCM == svmptr->current_measurement)
      {
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[0]->slice_ptr,
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[1]->slice_ptr,
 8003dea:	4413      	add	r3, r2
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	4608      	mov	r0, r1
 8003df0:	4619      	mov	r1, r3
 8003df2:	f7ff fcf9 	bl	80037e8 <XMC_CCU8_SLICE_SetTimerValue>
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[2]->slice_ptr,
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	6819      	ldr	r1, [r3, #0]
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8003e02:	085b      	lsrs	r3, r3, #1
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
      {
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[0]->slice_ptr,
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[1]->slice_ptr,
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[2]->slice_ptr,
 8003e0c:	4413      	add	r3, r2
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	4608      	mov	r0, r1
 8003e12:	4619      	mov	r1, r3
 8003e14:	f7ff fce8 	bl	80037e8 <XMC_CCU8_SLICE_SetTimerValue>
 8003e18:	e035      	b.n	8003e86 <PWM_SVM_Start+0x22a>
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
      }
      else
      {
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[0]->slice_ptr,
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	6819      	ldr	r1, [r3, #0]
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e26:	b29b      	uxth	r3, r3
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[2]->slice_ptr,
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
      }
      else
      {
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[0]->slice_ptr,
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	b29a      	uxth	r2, r3
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[2]->slice_ptr,
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
      }
      else
      {
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[0]->slice_ptr,
 8003e32:	4413      	add	r3, r2
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	4608      	mov	r0, r1
 8003e38:	4619      	mov	r1, r3
 8003e3a:	f7ff fcd5 	bl	80037e8 <XMC_CCU8_SLICE_SetTimerValue>
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[1]->slice_ptr,
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	6819      	ldr	r1, [r3, #0]
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e4a:	b29b      	uxth	r3, r3
      else
      {
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[0]->slice_ptr,
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[1]->slice_ptr,
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	b29a      	uxth	r2, r3
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
      else
      {
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[0]->slice_ptr,
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[1]->slice_ptr,
 8003e56:	4413      	add	r3, r2
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	4608      	mov	r0, r1
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	f7ff fcc3 	bl	80037e8 <XMC_CCU8_SLICE_SetTimerValue>
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[2]->slice_ptr,
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	6819      	ldr	r1, [r3, #0]
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge ) & (uint16_t) 0xFF)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e6e:	b29b      	uxth	r3, r3
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[1]->slice_ptr,
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[2]->slice_ptr,
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	b29a      	uxth	r2, r3
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge ) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[1]->slice_ptr,
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[2]->slice_ptr,
 8003e7a:	4413      	add	r3, r2
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	4608      	mov	r0, r1
 8003e80:	4619      	mov	r1, r3
 8003e82:	f7ff fcb1 	bl	80037e8 <XMC_CCU8_SLICE_SetTimerValue>
                    + (uint16_t) svmptr->current_offset));
      }
    }

    /* synchronous start of CCU8 slices */
    XMC_SCU_SetCcuTriggerHigh((uint32_t)(svmptr->sync_start_mask));
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	6a1b      	ldr	r3, [r3, #32]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7ff fce6 	bl	800385c <XMC_SCU_SetCcuTriggerHigh>

    /* disable the Start trigger function*/
    XMC_CCU8_SLICE_StartConfig(HandlePtr->phase_ptr[0]->slice_ptr, (XMC_CCU8_SLICE_EVENT_t) XMC_CCU8_SLICE_EVENT_NONE,
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4618      	mov	r0, r3
 8003e98:	2100      	movs	r1, #0
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f7fd fb90 	bl	80015c0 <XMC_CCU8_SLICE_StartConfig>
        (XMC_CCU8_SLICE_START_MODE_t) XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR);
    XMC_CCU8_SLICE_StartConfig(HandlePtr->phase_ptr[1]->slice_ptr, (XMC_CCU8_SLICE_EVENT_t) XMC_CCU8_SLICE_EVENT_NONE,
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	2100      	movs	r1, #0
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f7fd fb88 	bl	80015c0 <XMC_CCU8_SLICE_StartConfig>
        (XMC_CCU8_SLICE_START_MODE_t) XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR);
    XMC_CCU8_SLICE_StartConfig(HandlePtr->phase_ptr[2]->slice_ptr, (XMC_CCU8_SLICE_EVENT_t) XMC_CCU8_SLICE_EVENT_NONE,
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	2100      	movs	r1, #0
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f7fd fb80 	bl	80015c0 <XMC_CCU8_SLICE_StartConfig>
        (XMC_CCU8_SLICE_START_MODE_t) XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR);
    if ((PWM_SVM_CMTYPE_t) PWM_SVM_NONE != svmptr->current_measurement)
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	7c1b      	ldrb	r3, [r3, #16]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d007      	beq.n	8003ed8 <PWM_SVM_Start+0x27c>
    {
      XMC_CCU8_SLICE_StartConfig(HandlePtr->phase_ptr[3]->slice_ptr, (XMC_CCU8_SLICE_EVENT_t) XMC_CCU8_SLICE_EVENT_NONE,
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	2100      	movs	r1, #0
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f7fd fb74 	bl	80015c0 <XMC_CCU8_SLICE_StartConfig>
          (XMC_CCU8_SLICE_START_MODE_t) XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR);
    }

    /* disable synchronous start of CCU8 slices */
    XMC_SCU_SetCcuTriggerLow((uint32_t)(svmptr->sync_start_mask));
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	6a1b      	ldr	r3, [r3, #32]
 8003edc:	4618      	mov	r0, r3
 8003ede:	f7ff fccf 	bl	8003880 <XMC_SCU_SetCcuTriggerLow>

    /* change the state to RUNNING*/
    HandlePtr->state = PWM_SVM_RUNNING;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2202      	movs	r2, #2
 8003ee6:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  }
}
 8003eea:	3710      	adds	r7, #16
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <PWM_SVM_Stop>:

/**
 * This function stops the CCU8 slices used to generate SVM.
 */
void PWM_SVM_Stop(PWM_SVM_t* const HandlePtr)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  uint32_t count;
  const PWM_SVM_Config_t* const svmptr = HandlePtr->confighandle_ptr;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	60bb      	str	r3, [r7, #8]
  XMC_ASSERT("PWM_SVM_Stop:NULL Handle Pointer", (HandlePtr != (PWM_SVM_t *) NULL));
  /*Inverter Enable pin level is set to passive level.*/
  PWM_SVM_InverterDisable(HandlePtr);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f7ff fd14 	bl	800392c <PWM_SVM_InverterDisable>

  /* Disable trap */
  if ((uint8_t) 1 == svmptr->enable_trap)
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d13e      	bne.n	8003f8c <PWM_SVM_Stop+0x9c>
  {
    /* Disables trap feature for phase u out 0 and 1*/
    XMC_CCU8_SLICE_DisableTrap(HandlePtr->phase_ptr[0]->slice_ptr,
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	681a      	ldr	r2, [r3, #0]
        ((uint32_t) svmptr->phase_u_out0 | ((uint32_t) svmptr->phase_u_out0 << 1U)));
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	7d1b      	ldrb	r3, [r3, #20]
 8003f18:	4619      	mov	r1, r3
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	7d1b      	ldrb	r3, [r3, #20]
 8003f1e:	005b      	lsls	r3, r3, #1

  /* Disable trap */
  if ((uint8_t) 1 == svmptr->enable_trap)
  {
    /* Disables trap feature for phase u out 0 and 1*/
    XMC_CCU8_SLICE_DisableTrap(HandlePtr->phase_ptr[0]->slice_ptr,
 8003f20:	430b      	orrs	r3, r1
 8003f22:	4610      	mov	r0, r2
 8003f24:	4619      	mov	r1, r3
 8003f26:	f7ff fc33 	bl	8003790 <XMC_CCU8_SLICE_DisableTrap>
        ((uint32_t) svmptr->phase_u_out0 | ((uint32_t) svmptr->phase_u_out0 << 1U)));

    /* Disables trap feature for phase v out 0 and 1*/
    XMC_CCU8_SLICE_DisableTrap(HandlePtr->phase_ptr[1]->slice_ptr,
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	681a      	ldr	r2, [r3, #0]
        ((uint32_t) svmptr->phase_v_out0 | ((uint32_t) svmptr->phase_v_out0 << 1U)));
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	7d5b      	ldrb	r3, [r3, #21]
 8003f34:	4619      	mov	r1, r3
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	7d5b      	ldrb	r3, [r3, #21]
 8003f3a:	005b      	lsls	r3, r3, #1
    /* Disables trap feature for phase u out 0 and 1*/
    XMC_CCU8_SLICE_DisableTrap(HandlePtr->phase_ptr[0]->slice_ptr,
        ((uint32_t) svmptr->phase_u_out0 | ((uint32_t) svmptr->phase_u_out0 << 1U)));

    /* Disables trap feature for phase v out 0 and 1*/
    XMC_CCU8_SLICE_DisableTrap(HandlePtr->phase_ptr[1]->slice_ptr,
 8003f3c:	430b      	orrs	r3, r1
 8003f3e:	4610      	mov	r0, r2
 8003f40:	4619      	mov	r1, r3
 8003f42:	f7ff fc25 	bl	8003790 <XMC_CCU8_SLICE_DisableTrap>
        ((uint32_t) svmptr->phase_v_out0 | ((uint32_t) svmptr->phase_v_out0 << 1U)));

    /* Disables trap feature for phase w out 0 and 1*/
    XMC_CCU8_SLICE_DisableTrap(HandlePtr->phase_ptr[2]->slice_ptr,
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	681a      	ldr	r2, [r3, #0]
        ((uint32_t) svmptr->phase_w_out0 | ((uint32_t) svmptr->phase_w_out0 << 1U)));
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	7d9b      	ldrb	r3, [r3, #22]
 8003f50:	4619      	mov	r1, r3
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	7d9b      	ldrb	r3, [r3, #22]
 8003f56:	005b      	lsls	r3, r3, #1
    /* Disables trap feature for phase v out 0 and 1*/
    XMC_CCU8_SLICE_DisableTrap(HandlePtr->phase_ptr[1]->slice_ptr,
        ((uint32_t) svmptr->phase_v_out0 | ((uint32_t) svmptr->phase_v_out0 << 1U)));

    /* Disables trap feature for phase w out 0 and 1*/
    XMC_CCU8_SLICE_DisableTrap(HandlePtr->phase_ptr[2]->slice_ptr,
 8003f58:	430b      	orrs	r3, r1
 8003f5a:	4610      	mov	r0, r2
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	f7ff fc17 	bl	8003790 <XMC_CCU8_SLICE_DisableTrap>
        ((uint32_t) svmptr->phase_w_out0 | ((uint32_t) svmptr->phase_w_out0 << 1U)));

    XMC_CCU8_SLICE_ClearEvent(HandlePtr->phase_ptr[0]->slice_ptr, XMC_CCU8_SLICE_IRQ_ID_TRAP);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	210b      	movs	r1, #11
 8003f6c:	f7ff fc60 	bl	8003830 <XMC_CCU8_SLICE_ClearEvent>
    XMC_CCU8_SLICE_ClearEvent(HandlePtr->phase_ptr[1]->slice_ptr, XMC_CCU8_SLICE_IRQ_ID_TRAP);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4618      	mov	r0, r3
 8003f78:	210b      	movs	r1, #11
 8003f7a:	f7ff fc59 	bl	8003830 <XMC_CCU8_SLICE_ClearEvent>
    XMC_CCU8_SLICE_ClearEvent(HandlePtr->phase_ptr[2]->slice_ptr, XMC_CCU8_SLICE_IRQ_ID_TRAP);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4618      	mov	r0, r3
 8003f86:	210b      	movs	r1, #11
 8003f88:	f7ff fc52 	bl	8003830 <XMC_CCU8_SLICE_ClearEvent>
  }

  /* stop all three phases */
  for (count = 0U; count < PWM_SVM_NUMBERPHASE; count++)
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	60fb      	str	r3, [r7, #12]
 8003f90:	e00b      	b.n	8003faa <PWM_SVM_Stop+0xba>
  {
    XMC_CCU8_SLICE_StopTimer(HandlePtr->phase_ptr[count]->slice_ptr);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	3202      	adds	r2, #2
 8003f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7ff fc08 	bl	80037b4 <XMC_CCU8_SLICE_StopTimer>
    XMC_CCU8_SLICE_ClearEvent(HandlePtr->phase_ptr[1]->slice_ptr, XMC_CCU8_SLICE_IRQ_ID_TRAP);
    XMC_CCU8_SLICE_ClearEvent(HandlePtr->phase_ptr[2]->slice_ptr, XMC_CCU8_SLICE_IRQ_ID_TRAP);
  }

  /* stop all three phases */
  for (count = 0U; count < PWM_SVM_NUMBERPHASE; count++)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	60fb      	str	r3, [r7, #12]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d9f0      	bls.n	8003f92 <PWM_SVM_Stop+0xa2>
  {
    XMC_CCU8_SLICE_StopTimer(HandlePtr->phase_ptr[count]->slice_ptr);
  }
  if ((PWM_SVM_CMTYPE_t) PWM_SVM_NONE != svmptr->current_measurement)
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	7c1b      	ldrb	r3, [r3, #16]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d005      	beq.n	8003fc4 <PWM_SVM_Stop+0xd4>
  {
    XMC_CCU8_SLICE_StopTimer(HandlePtr->phase_ptr[3]->slice_ptr);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	695b      	ldr	r3, [r3, #20]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7ff fbf8 	bl	80037b4 <XMC_CCU8_SLICE_StopTimer>
  }

  XMC_SCU_SetCcuTriggerLow((uint32_t) svmptr->sync_start_mask);
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	6a1b      	ldr	r3, [r3, #32]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7ff fc59 	bl	8003880 <XMC_SCU_SetCcuTriggerLow>
  HandlePtr->state = (PWM_SVM_STATE_t) PWM_SVM_STOPPED;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2203      	movs	r2, #3
 8003fd2:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

}
 8003fd6:	3710      	adds	r7, #16
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <PWM_SVM_SetPWMFrequency>:
}


/*This API updates the PWM Frequency in terms of hertz*/
PWM_SVM_STATUS_t PWM_SVM_SetPWMFrequency(PWM_SVM_t* const HandlePtr, uint32_t Frequency)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b088      	sub	sp, #32
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  uint32_t pwm_time;
  uint32_t period;
  uint32_t count;
  uint32_t max_amplitude_count;
  PWM_SVM_STATUS_t status = PWM_SVM_STATUS_FAILURE;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	74fb      	strb	r3, [r7, #19]
  const PWM_SVM_Config_t* const svmptr = HandlePtr->confighandle_ptr;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	60fb      	str	r3, [r7, #12]
  XMC_ASSERT("PWM_SVM_SetPWMFrequency:NULL Handle Pointer", (HandlePtr != (PWM_SVM_t *) NULL));

  if (((PWM_SVM_STATE_t) PWM_SVM_INITIALIZED == HandlePtr->state)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d004      	beq.n	8004004 <PWM_SVM_SetPWMFrequency+0x28>
      || ((PWM_SVM_STATE_t) PWM_SVM_STOPPED == HandlePtr->state))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8004000:	2b03      	cmp	r3, #3
 8004002:	d17e      	bne.n	8004102 <PWM_SVM_SetPWMFrequency+0x126>
  {
    if ((Frequency > HandlePtr->confighandle_ptr->period_min) && (Frequency <= HandlePtr->confighandle_ptr->period_max))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	429a      	cmp	r2, r3
 800400e:	d276      	bcs.n	80040fe <PWM_SVM_SetPWMFrequency+0x122>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	429a      	cmp	r2, r3
 800401a:	d370      	bcc.n	80040fe <PWM_SVM_SetPWMFrequency+0x122>
    {
      pwm_time = (uint32_t)((svmptr->module_freq) / Frequency);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	69da      	ldr	r2, [r3, #28]
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	fbb2 f3f3 	udiv	r3, r2, r3
 8004026:	60bb      	str	r3, [r7, #8]

      if ((uint32_t) XMC_CCU8_SLICE_TIMER_COUNT_MODE_EA == HandlePtr->phase_configinit_ptr->timer_mode) /* EDGE_ALIGNED */
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	b2db      	uxtb	r3, r3
 8004034:	2b00      	cmp	r3, #0
 8004036:	d103      	bne.n	8004040 <PWM_SVM_SetPWMFrequency+0x64>
      {
        period = (uint32_t)(pwm_time - 1U);
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	3b01      	subs	r3, #1
 800403c:	61fb      	str	r3, [r7, #28]
 800403e:	e003      	b.n	8004048 <PWM_SVM_SetPWMFrequency+0x6c>
      }
      else /*CENTER_ALIGNED - hence half of the calculated period value is used*/
      {
        period = (uint32_t)((pwm_time >> 1U) - 1U);
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	085b      	lsrs	r3, r3, #1
 8004044:	3b01      	subs	r3, #1
 8004046:	61fb      	str	r3, [r7, #28]
      }
      /*set max amplitude for pseudo null vector based on scheme*/
      if ((PWM_SVM_SVMCONFIG_t) PWM_SVM_PSEUDONULL_3ACTIVE == HandlePtr->svm_config)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800404e:	2b04      	cmp	r3, #4
 8004050:	d10a      	bne.n	8004068 <PWM_SVM_SetPWMFrequency+0x8c>
      {
        max_amplitude_count = (uint32_t)((uint32_t)PWM_SVM_MAX_AMPLITUDE - (uint32_t)((uint32_t) 3 * (uint32_t) HandlePtr->tmin_14));
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8004058:	461a      	mov	r2, r3
 800405a:	4613      	mov	r3, r2
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	4413      	add	r3, r2
 8004060:	f5c3 4380 	rsb	r3, r3, #16384	; 0x4000
 8004064:	617b      	str	r3, [r7, #20]
 8004066:	e013      	b.n	8004090 <PWM_SVM_SetPWMFrequency+0xb4>
      }
      else if ((PWM_SVM_SVMCONFIG_t) PWM_SVM_PSEUDONULL_4ACTIVE == HandlePtr->svm_config)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800406e:	2b05      	cmp	r3, #5
 8004070:	d10b      	bne.n	800408a <PWM_SVM_SetPWMFrequency+0xae>
      {
        max_amplitude_count = (uint32_t)((uint32_t)PWM_SVM_MAX_AMPLITUDE - (uint32_t)((uint32_t) 4 * (uint32_t) HandlePtr->tmin_14));
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8004078:	461a      	mov	r2, r3
 800407a:	4613      	mov	r3, r2
 800407c:	079b      	lsls	r3, r3, #30
 800407e:	1a9b      	subs	r3, r3, r2
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8004086:	617b      	str	r3, [r7, #20]
 8004088:	e002      	b.n	8004090 <PWM_SVM_SetPWMFrequency+0xb4>
      }
      else
      {
        max_amplitude_count = (uint32_t) PWM_SVM_MAX_AMPLITUDE;
 800408a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800408e:	617b      	str	r3, [r7, #20]
      }
      /*update the calcualted period value in period register*/
      for (count = 0U; count < PWM_SVM_NUMBERPHASE; count++)
 8004090:	2300      	movs	r3, #0
 8004092:	61bb      	str	r3, [r7, #24]
 8004094:	e00e      	b.n	80040b4 <PWM_SVM_SetPWMFrequency+0xd8>
      {
        XMC_CCU8_SLICE_SetTimerPeriodMatch(HandlePtr->phase_ptr[count]->slice_ptr, (uint16_t) period);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	3202      	adds	r2, #2
 800409c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	4610      	mov	r0, r2
 80040a8:	4619      	mov	r1, r3
 80040aa:	f7fd fb75 	bl	8001798 <XMC_CCU8_SLICE_SetTimerPeriodMatch>
      else
      {
        max_amplitude_count = (uint32_t) PWM_SVM_MAX_AMPLITUDE;
      }
      /*update the calcualted period value in period register*/
      for (count = 0U; count < PWM_SVM_NUMBERPHASE; count++)
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	3301      	adds	r3, #1
 80040b2:	61bb      	str	r3, [r7, #24]
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d9ed      	bls.n	8004096 <PWM_SVM_SetPWMFrequency+0xba>
      {
        XMC_CCU8_SLICE_SetTimerPeriodMatch(HandlePtr->phase_ptr[count]->slice_ptr, (uint16_t) period);
      }
      if ((PWM_SVM_CMTYPE_t) PWM_SVM_NONE != HandlePtr->confighandle_ptr->current_measurement)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	7c1b      	ldrb	r3, [r3, #16]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d008      	beq.n	80040d6 <PWM_SVM_SetPWMFrequency+0xfa>
      {
        XMC_CCU8_SLICE_SetTimerPeriodMatch(HandlePtr->phase_ptr[3]->slice_ptr, (uint16_t) period);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	4610      	mov	r0, r2
 80040d0:	4619      	mov	r1, r3
 80040d2:	f7fd fb61 	bl	8001798 <XMC_CCU8_SLICE_SetTimerPeriodMatch>
      }

      /*Enable the shadow transfer for all three slice*/
      XMC_CCU8_EnableShadowTransfer(HandlePtr->global_ptr, svmptr->shadow_transfer_mask);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685a      	ldr	r2, [r3, #4]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040de:	4610      	mov	r0, r2
 80040e0:	4619      	mov	r1, r3
 80040e2:	f7ff fb73 	bl	80037cc <XMC_CCU8_EnableShadowTransfer>
      /* update dynamic handle parameters */
      HandlePtr->period = (uint32_t) period;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	69fa      	ldr	r2, [r7, #28]
 80040ea:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      HandlePtr->max_amplitude = (uint16_t) max_amplitude_count;
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	b29a      	uxth	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
      status = PWM_SVM_STATUS_SUCCESS;
 80040f8:	2300      	movs	r3, #0
 80040fa:	74fb      	strb	r3, [r7, #19]
 80040fc:	e001      	b.n	8004102 <PWM_SVM_SetPWMFrequency+0x126>
    }
    else
    {
      status = PWM_SVM_INVALID_PARAM;
 80040fe:	2302      	movs	r3, #2
 8004100:	74fb      	strb	r3, [r7, #19]
    }
  }
  return status;
 8004102:	7cfb      	ldrb	r3, [r7, #19]
}
 8004104:	4618      	mov	r0, r3
 8004106:	3720      	adds	r7, #32
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	460b      	mov	r3, r1
 8004116:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1) << slice_number;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	68da      	ldr	r2, [r3, #12]
 800411c:	78fb      	ldrb	r3, [r7, #3]
 800411e:	2101      	movs	r1, #1
 8004120:	fa01 f303 	lsl.w	r3, r1, r3
 8004124:	431a      	orrs	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	60da      	str	r2, [r3, #12]
}
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <XMC_CCU4_SLICE_EnableTrap>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_TrapConfig()<BR> XMC_CCU4_SLICE_DisableTrap()<BR> XMC_CCU4_SLICE_ConfigureEvent()<BR>
 *  XMC_CCU4_SLICE_SetInput().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableTrap(XMC_CCU4_SLICE_t *const slice)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableTrap:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TC |= (uint32_t) CCU4_CC4_TC_TRAPE_Msk;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	695b      	ldr	r3, [r3, #20]
 8004140:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	615a      	str	r2, [r3, #20]
}
 8004148:	370c      	adds	r7, #12
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop

08004154 <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	60da      	str	r2, [r3, #12]
}
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	460b      	mov	r3, r1
 8004176:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 8004178:	887a      	ldrh	r2, [r7, #2]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	460b      	mov	r3, r1
 8004192:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 8004194:	887a      	ldrh	r2, [r7, #2]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	683a      	ldr	r2, [r7, #0]
 80041b2:	611a      	str	r2, [r3, #16]
}
 80041b4:	370c      	adds	r7, #12
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop

080041c0 <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	460b      	mov	r3, r1
 80041ca:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80041d2:	78fb      	ldrb	r3, [r7, #3]
 80041d4:	2101      	movs	r1, #1
 80041d6:	fa01 f303 	lsl.w	r3, r1, r3
 80041da:	431a      	orrs	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <PWM_CCU4_Init>:
  return version;
}

/* This function initializes the app */
PWM_CCU4_STATUS_t PWM_CCU4_Init(PWM_CCU4_t* handle_ptr)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b086      	sub	sp, #24
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  PWM_CCU4_STATUS_t status;
  GLOBAL_CCU4_STATUS_t status_ccu4_global;
  uint32_t frequency_module;
  uint32_t prescalar;

  status = PWM_CCU4_STATUS_FAILURE;
 80041f4:	2301      	movs	r3, #1
 80041f6:	75fb      	strb	r3, [r7, #23]
  status_ccu4_global = GLOBAL_CCU4_STATUS_FAILURE;
 80041f8:	2301      	movs	r3, #1
 80041fa:	75bb      	strb	r3, [r7, #22]
  XMC_ASSERT("PWM_CCU4_Init:handle_ptr is NULL", (handle_ptr != NULL));

  if (PWM_CCU4_STATE_UNINITIALIZED == handle_ptr->state)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	7f1b      	ldrb	r3, [r3, #28]
 8004200:	2b00      	cmp	r3, #0
 8004202:	f040 808c 	bne.w	800431e <PWM_CCU4_Init+0x132>
  {
    /* Initialize consumed Apps */
    status_ccu4_global = GLOBAL_CCU4_Init(handle_ptr->config_ptr->global_ccu4_handle);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800420c:	4618      	mov	r0, r3
 800420e:	f001 f8e1 	bl	80053d4 <GLOBAL_CCU4_Init>
 8004212:	4603      	mov	r3, r0
 8004214:	75bb      	strb	r3, [r7, #22]

    /* Initialize CCU4x_CC4y slice */
    if (GLOBAL_CCU4_STATUS_SUCCESS == status_ccu4_global)
 8004216:	7dbb      	ldrb	r3, [r7, #22]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d17c      	bne.n	8004316 <PWM_CCU4_Init+0x12a>
    {
      XMC_DEBUG("PWM_CCU4_Init:Initilizing slice");

      /* Configure CCU4x_CC4y slice as timer */
      XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ccu4_cc4_slice_timer_ptr);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	689a      	ldr	r2, [r3, #8]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004226:	4610      	mov	r0, r2
 8004228:	4619      	mov	r1, r3
 800422a:	f7fc fe27 	bl	8000e7c <XMC_CCU4_SLICE_CompareInit>
      /* Set period match value of the timer  */
      XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->period_value);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	689a      	ldr	r2, [r3, #8]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	885b      	ldrh	r3, [r3, #2]
 8004238:	4610      	mov	r0, r2
 800423a:	4619      	mov	r1, r3
 800423c:	f7ff ff96 	bl	800416c <XMC_CCU4_SLICE_SetTimerPeriodMatch>

      /* Set timer compare match value for channel 1 */
      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, (uint16_t) handle_ptr->config_ptr->compare_value);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689a      	ldr	r2, [r3, #8]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	889b      	ldrh	r3, [r3, #4]
 800424a:	4610      	mov	r0, r2
 800424c:	4619      	mov	r1, r3
 800424e:	f7ff ff9b 	bl	8004188 <XMC_CCU4_SLICE_SetTimerCompareMatch>

      if (1U == handle_ptr->config_ptr->ccu4_cc4_slice_timer_ptr->mcm_enable)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004258:	78db      	ldrb	r3, [r3, #3]
 800425a:	f003 0302 	and.w	r3, r3, #2
 800425e:	b2db      	uxtb	r3, r3
 8004260:	2b00      	cmp	r3, #0
 8004262:	d008      	beq.n	8004276 <PWM_CCU4_Init+0x8a>
      {
        XMC_CCU4_SetMultiChannelShadowTransferMode(handle_ptr->ccu4_module_ptr,
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685a      	ldr	r2, [r3, #4]
                                                   (uint32_t) handle_ptr->config_ptr->mcm_shadow_txfr_mode);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      /* Set timer compare match value for channel 1 */
      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, (uint16_t) handle_ptr->config_ptr->compare_value);

      if (1U == handle_ptr->config_ptr->ccu4_cc4_slice_timer_ptr->mcm_enable)
      {
        XMC_CCU4_SetMultiChannelShadowTransferMode(handle_ptr->ccu4_module_ptr,
 800426e:	4610      	mov	r0, r2
 8004270:	4619      	mov	r1, r3
 8004272:	f7fc fde7 	bl	8000e44 <XMC_CCU4_SetMultiChannelShadowTransferMode>
        XMC_CCU4_SLICE_EnableCascadedShadowTransfer(handle_ptr->ccu4_slice_ptr);
      }
#endif

      /* Transfer value from shadow timer registers to actual timer registers */
      XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_module_ptr, handle_ptr->shadow_txfr_msk);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685a      	ldr	r2, [r3, #4]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	4610      	mov	r0, r2
 8004280:	4619      	mov	r1, r3
 8004282:	f7ff ff8f 	bl	80041a4 <XMC_CCU4_EnableShadowTransfer>
      XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_module_ptr, handle_ptr->dither_shadow_txfr_msk);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685a      	ldr	r2, [r3, #4]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	4610      	mov	r0, r2
 8004290:	4619      	mov	r1, r3
 8004292:	f7ff ff87 	bl	80041a4 <XMC_CCU4_EnableShadowTransfer>

      /* Configure events */
      PWM_CCU4_lConfigure_Events(handle_ptr);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 f8e2 	bl	8004460 <PWM_CCU4_lConfigure_Events>

      /* Enable the interrupts */
      PWM_CCU4_lInit_Interrupt(handle_ptr);
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f000 f845 	bl	800432c <PWM_CCU4_lInit_Interrupt>

      /*Initializes the GPIO*/
      if ((bool) true == handle_ptr->config_ptr->gpio_ch_out_enable)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00e      	beq.n	80042cc <PWM_CCU4_Init+0xe0>
      {
        XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch_out_ptr, handle_ptr->config_ptr->gpio_ch_out_pin,
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
                      handle_ptr->config_ptr->gpio_ch_out_config_ptr);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
      PWM_CCU4_lInit_Interrupt(handle_ptr);

      /*Initializes the GPIO*/
      if ((bool) true == handle_ptr->config_ptr->gpio_ch_out_enable)
      {
        XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch_out_ptr, handle_ptr->config_ptr->gpio_ch_out_pin,
 80042c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042c2:	4608      	mov	r0, r1
 80042c4:	4611      	mov	r1, r2
 80042c6:	461a      	mov	r2, r3
 80042c8:	f7fc f86c 	bl	80003a4 <XMC_GPIO_Init>
                      handle_ptr->config_ptr->gpio_ch_out_config_ptr);
      }

      frequency_module = handle_ptr->config_ptr->global_ccu4_handle->module_frequency;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	613b      	str	r3, [r7, #16]
      prescalar = (uint32_t) handle_ptr->config_ptr->ccu4_cc4_slice_timer_ptr->prescaler_initval;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042dc:	791b      	ldrb	r3, [r3, #4]
 80042de:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	60fb      	str	r3, [r7, #12]
      frequency_module = frequency_module / ((uint32_t) 1 << prescalar);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	693a      	ldr	r2, [r7, #16]
 80042ea:	fa22 f303 	lsr.w	r3, r2, r3
 80042ee:	613b      	str	r3, [r7, #16]
      handle_ptr->frequency_tclk = frequency_module;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	621a      	str	r2, [r3, #32]

      handle_ptr->state = PWM_CCU4_STATE_INITIALIZED;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	771a      	strb	r2, [r3, #28]
      status = PWM_CCU4_STATUS_SUCCESS;
 80042fc:	2300      	movs	r3, #0
 80042fe:	75fb      	strb	r3, [r7, #23]

      /* Start the PWM generation if start at initialization is enabled */
      if ((bool) true == handle_ptr->config_ptr->start_control)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00b      	beq.n	8004322 <PWM_CCU4_Init+0x136>
      {
        status = PWM_CCU4_Start(handle_ptr);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 f98c 	bl	8004628 <PWM_CCU4_Start>
 8004310:	4603      	mov	r3, r0
 8004312:	75fb      	strb	r3, [r7, #23]
 8004314:	e005      	b.n	8004322 <PWM_CCU4_Init+0x136>
      }
    }
    else
    {
      handle_ptr->state = PWM_CCU4_STATE_UNINITIALIZED;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	771a      	strb	r2, [r3, #28]
 800431c:	e001      	b.n	8004322 <PWM_CCU4_Init+0x136>
    }

  }
  else
  {
    status = PWM_CCU4_STATUS_ALREADY_INITIALIZED;
 800431e:	2302      	movs	r3, #2
 8004320:	75fb      	strb	r3, [r7, #23]
    XMC_DEBUG("PWM_CCU4_Init:PWM_CCU4_STATUS_ALREADY_INITIALIZED");
  }

  return (status);
 8004322:	7dfb      	ldrb	r3, [r7, #23]
} /* end of PWM_CCU4_Init() api */
 8004324:	4618      	mov	r0, r3
 8004326:	3718      	adds	r7, #24
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <PWM_CCU4_lInit_Interrupt>:

static void PWM_CCU4_lInit_Interrupt(PWM_CCU4_t* handle_ptr)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]

  /* Enable events. Bind event to corresponding service request node.Enable Interrupts. The user may choose to 
   disable the interrupts by LLD calls. */
  if ((bool) true == handle_ptr->config_ptr->int_per_match)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	799b      	ldrb	r3, [r3, #6]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00f      	beq.n	800435e <PWM_CCU4_lInit_Interrupt+0x32>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt period match enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_per_match);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
  /* Enable events. Bind event to corresponding service request node.Enable Interrupts. The user may choose to 
   disable the interrupts by LLD calls. */
  if ((bool) true == handle_ptr->config_ptr->int_per_match)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt period match enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 8004346:	7b5b      	ldrb	r3, [r3, #13]
 8004348:	4610      	mov	r0, r2
 800434a:	2100      	movs	r1, #0
 800434c:	461a      	mov	r2, r3
 800434e:	f7fc ffeb 	bl	8001328 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_per_match);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	4618      	mov	r0, r3
 8004358:	2100      	movs	r1, #0
 800435a:	f7ff ff31 	bl	80041c0 <XMC_CCU4_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp_match_up)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	79db      	ldrb	r3, [r3, #7]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00f      	beq.n	8004388 <PWM_CCU4_lInit_Interrupt+0x5c>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt compare match up enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP,
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_cmp_match_up);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp_match_up)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt compare match up enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP,
 8004370:	7b9b      	ldrb	r3, [r3, #14]
 8004372:	4610      	mov	r0, r2
 8004374:	2102      	movs	r1, #2
 8004376:	461a      	mov	r2, r3
 8004378:	f7fc ffd6 	bl	8001328 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_cmp_match_up);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	4618      	mov	r0, r3
 8004382:	2102      	movs	r1, #2
 8004384:	f7ff ff1c 	bl	80041c0 <XMC_CCU4_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp_match_down)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	7a1b      	ldrb	r3, [r3, #8]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00f      	beq.n	80043b2 <PWM_CCU4_lInit_Interrupt+0x86>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt compare match down enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN,
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_cmp_match_down);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp_match_down)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt compare match down enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN,
 800439a:	7bdb      	ldrb	r3, [r3, #15]
 800439c:	4610      	mov	r0, r2
 800439e:	2103      	movs	r1, #3
 80043a0:	461a      	mov	r2, r3
 80043a2:	f7fc ffc1 	bl	8001328 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_cmp_match_down);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	4618      	mov	r0, r3
 80043ac:	2103      	movs	r1, #3
 80043ae:	f7ff ff07 	bl	80041c0 <XMC_CCU4_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_one_match_down)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	7a5b      	ldrb	r3, [r3, #9]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00f      	beq.n	80043dc <PWM_CCU4_lInit_Interrupt+0xb0>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt one match enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH,
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_one_match_down);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
  }

  if ((bool) true == handle_ptr->config_ptr->int_one_match_down)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt one match enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH,
 80043c4:	7c1b      	ldrb	r3, [r3, #16]
 80043c6:	4610      	mov	r0, r2
 80043c8:	2101      	movs	r1, #1
 80043ca:	461a      	mov	r2, r3
 80043cc:	f7fc ffac 	bl	8001328 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_one_match_down);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	4618      	mov	r0, r3
 80043d6:	2101      	movs	r1, #1
 80043d8:	f7ff fef2 	bl	80041c0 <XMC_CCU4_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_e0)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	7a9b      	ldrb	r3, [r3, #10]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00f      	beq.n	8004406 <PWM_CCU4_lInit_Interrupt+0xda>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt event 0 enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT0,
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_e0);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
  }

  if ((bool) true == handle_ptr->config_ptr->int_e0)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt event 0 enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT0,
 80043ee:	7c5b      	ldrb	r3, [r3, #17]
 80043f0:	4610      	mov	r0, r2
 80043f2:	2108      	movs	r1, #8
 80043f4:	461a      	mov	r2, r3
 80043f6:	f7fc ff97 	bl	8001328 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_e0);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT0);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	4618      	mov	r0, r3
 8004400:	2108      	movs	r1, #8
 8004402:	f7ff fedd 	bl	80041c0 <XMC_CCU4_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_e1)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	7adb      	ldrb	r3, [r3, #11]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00f      	beq.n	8004430 <PWM_CCU4_lInit_Interrupt+0x104>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt event 1 enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT1,
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_e1);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
  }

  if ((bool) true == handle_ptr->config_ptr->int_e1)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt event 1 enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT1,
 8004418:	7c9b      	ldrb	r3, [r3, #18]
 800441a:	4610      	mov	r0, r2
 800441c:	2109      	movs	r1, #9
 800441e:	461a      	mov	r2, r3
 8004420:	f7fc ff82 	bl	8001328 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_e1);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT1);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	4618      	mov	r0, r3
 800442a:	2109      	movs	r1, #9
 800442c:	f7ff fec8 	bl	80041c0 <XMC_CCU4_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_e2)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	7b1b      	ldrb	r3, [r3, #12]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00f      	beq.n	800445a <PWM_CCU4_lInit_Interrupt+0x12e>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt event 2 enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT2,
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_e2);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
  }

  if ((bool) true == handle_ptr->config_ptr->int_e2)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt event 2 enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT2,
 8004442:	7cdb      	ldrb	r3, [r3, #19]
 8004444:	4610      	mov	r0, r2
 8004446:	210a      	movs	r1, #10
 8004448:	461a      	mov	r2, r3
 800444a:	f7fc ff6d 	bl	8001328 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_e2);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT2);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	4618      	mov	r0, r3
 8004454:	210a      	movs	r1, #10
 8004456:	f7ff feb3 	bl	80041c0 <XMC_CCU4_SLICE_EnableEvent>
  }
}
 800445a:	3708      	adds	r7, #8
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <PWM_CCU4_lConfigure_Events>:

static void PWM_CCU4_lConfigure_Events(PWM_CCU4_t* handle_ptr)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]

  /* Configure slice to a external event 0 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_0,
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	689a      	ldr	r2, [r3, #8]
                                handle_ptr->config_ptr->event0_config_ptr);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]

static void PWM_CCU4_lConfigure_Events(PWM_CCU4_t* handle_ptr)
{

  /* Configure slice to a external event 0 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_0,
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	4610      	mov	r0, r2
 8004474:	2101      	movs	r1, #1
 8004476:	461a      	mov	r2, r3
 8004478:	f7fc feec 	bl	8001254 <XMC_CCU4_SLICE_ConfigureEvent>
                                handle_ptr->config_ptr->event0_config_ptr);

  /* Configure slice to a external event 1 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_1,
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	689a      	ldr	r2, [r3, #8]
                                handle_ptr->config_ptr->event1_config_ptr);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
  /* Configure slice to a external event 0 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_0,
                                handle_ptr->config_ptr->event0_config_ptr);

  /* Configure slice to a external event 1 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_1,
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	4610      	mov	r0, r2
 8004488:	2102      	movs	r1, #2
 800448a:	461a      	mov	r2, r3
 800448c:	f7fc fee2 	bl	8001254 <XMC_CCU4_SLICE_ConfigureEvent>
                                handle_ptr->config_ptr->event1_config_ptr);

  /* Configure slice to a external event 2 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_2,
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	689a      	ldr	r2, [r3, #8]
                                handle_ptr->config_ptr->event2_config_ptr);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
  /* Configure slice to a external event 1 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_1,
                                handle_ptr->config_ptr->event1_config_ptr);

  /* Configure slice to a external event 2 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_2,
 8004498:	69db      	ldr	r3, [r3, #28]
 800449a:	4610      	mov	r0, r2
 800449c:	2103      	movs	r1, #3
 800449e:	461a      	mov	r2, r3
 80044a0:	f7fc fed8 	bl	8001254 <XMC_CCU4_SLICE_ConfigureEvent>
                                handle_ptr->config_ptr->event2_config_ptr);

  /* External signal controls start of the timer */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_start_event)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d00e      	beq.n	80044ce <PWM_CCU4_lConfigure_Events+0x6e>
  {
    XMC_CCU4_SLICE_StartConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_start_event,
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6899      	ldr	r1, [r3, #8]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f893 2020 	ldrb.w	r2, [r3, #32]
                               handle_ptr->config_ptr->ext_start_mode);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
                                handle_ptr->config_ptr->event2_config_ptr);

  /* External signal controls start of the timer */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_start_event)
  {
    XMC_CCU4_SLICE_StartConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_start_event,
 80044c0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80044c4:	4608      	mov	r0, r1
 80044c6:	4611      	mov	r1, r2
 80044c8:	461a      	mov	r2, r3
 80044ca:	f7fc fd0d 	bl	8000ee8 <XMC_CCU4_SLICE_StartConfig>
                               handle_ptr->config_ptr->ext_start_mode);
  }

  /* External signal can stop the timer */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_stop_event)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00e      	beq.n	80044f8 <PWM_CCU4_lConfigure_Events+0x98>
  {
    XMC_CCU4_SLICE_StopConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_stop_event,
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6899      	ldr	r1, [r3, #8]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
                              handle_ptr->config_ptr->ext_stop_mode);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
  }

  /* External signal can stop the timer */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_stop_event)
  {
    XMC_CCU4_SLICE_StopConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_stop_event,
 80044ea:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80044ee:	4608      	mov	r0, r1
 80044f0:	4611      	mov	r1, r2
 80044f2:	461a      	mov	r2, r3
 80044f4:	f7fc fd26 	bl	8000f44 <XMC_CCU4_SLICE_StopConfig>
                              handle_ptr->config_ptr->ext_stop_mode);
  }

  /* External signal can change the timer counting direction */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_count_dir_event)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004500:	2b00      	cmp	r3, #0
 8004502:	d009      	beq.n	8004518 <PWM_CCU4_lConfigure_Events+0xb8>
  {
    XMC_CCU4_SLICE_DirectionConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_count_dir_event);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	689a      	ldr	r2, [r3, #8]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004510:	4610      	mov	r0, r2
 8004512:	4619      	mov	r1, r3
 8004514:	f7fc fdd0 	bl	80010b8 <XMC_CCU4_SLICE_DirectionConfig>
  }
  /* External signal can stop the timer and the timer value remains same */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_gate_event)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004520:	2b00      	cmp	r3, #0
 8004522:	d009      	beq.n	8004538 <PWM_CCU4_lConfigure_Events+0xd8>
  {
    XMC_CCU4_SLICE_GateConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_gate_event);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689a      	ldr	r2, [r3, #8]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004530:	4610      	mov	r0, r2
 8004532:	4619      	mov	r1, r3
 8004534:	f7fc fda6 	bl	8001084 <XMC_CCU4_SLICE_GateConfig>
  }
  /* Timer increments on external signal */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_count_event)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004540:	2b00      	cmp	r3, #0
 8004542:	d009      	beq.n	8004558 <PWM_CCU4_lConfigure_Events+0xf8>
  {
    XMC_CCU4_SLICE_CountConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_count_event);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	689a      	ldr	r2, [r3, #8]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004550:	4610      	mov	r0, r2
 8004552:	4619      	mov	r1, r3
 8004554:	f7fc fd7c 	bl	8001050 <XMC_CCU4_SLICE_CountConfig>
  }
  /* Timer gets loaded with compare register value or period register value on external signal */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_load_event)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004560:	2b00      	cmp	r3, #0
 8004562:	d009      	beq.n	8004578 <PWM_CCU4_lConfigure_Events+0x118>
  {
    XMC_CCU4_SLICE_LoadConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_load_event);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	689a      	ldr	r2, [r3, #8]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004570:	4610      	mov	r0, r2
 8004572:	4619      	mov	r1, r3
 8004574:	f7fc fd12 	bl	8000f9c <XMC_CCU4_SLICE_LoadConfig>
  }
  /* External signal PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_mod_event)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00f      	beq.n	80045a4 <PWM_CCU4_lConfigure_Events+0x144>
  {
    XMC_CCU4_SLICE_ModulationConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_mod_event,
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6898      	ldr	r0, [r3, #8]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
                                    handle_ptr->config_ptr->ext_mod_mode, handle_ptr->config_ptr->ext_mod_sync);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
    XMC_CCU4_SLICE_LoadConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_load_event);
  }
  /* External signal PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_mod_event)
  {
    XMC_CCU4_SLICE_ModulationConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_mod_event,
 8004594:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
                                    handle_ptr->config_ptr->ext_mod_mode, handle_ptr->config_ptr->ext_mod_sync);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
    XMC_CCU4_SLICE_LoadConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_load_event);
  }
  /* External signal PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_mod_event)
  {
    XMC_CCU4_SLICE_ModulationConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_mod_event,
 800459c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80045a0:	f7fc fd16 	bl	8000fd0 <XMC_CCU4_SLICE_ModulationConfig>
                                    handle_ptr->config_ptr->ext_mod_mode, handle_ptr->config_ptr->ext_mod_sync);
  }

  /* PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU4_SLICE_EVENT_2 == handle_ptr->config_ptr->ext_trap_event)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80045ac:	2b03      	cmp	r3, #3
 80045ae:	d119      	bne.n	80045e4 <PWM_CCU4_lConfigure_Events+0x184>
  {
    XMC_CCU4_SLICE_TrapConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_trap_exit,
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6899      	ldr	r1, [r3, #8]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
                              handle_ptr->config_ptr->ext_trap_sync);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
  }

  /* PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU4_SLICE_EVENT_2 == handle_ptr->config_ptr->ext_trap_event)
  {
    XMC_CCU4_SLICE_TrapConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_trap_exit,
 80045c0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80045c4:	4608      	mov	r0, r1
 80045c6:	4611      	mov	r1, r2
 80045c8:	461a      	mov	r2, r3
 80045ca:	f7fc fda7 	bl	800111c <XMC_CCU4_SLICE_TrapConfig>
                              handle_ptr->config_ptr->ext_trap_sync);

    if ((bool) true == handle_ptr->config_ptr->ext_trap_enable)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d004      	beq.n	80045e4 <PWM_CCU4_lConfigure_Events+0x184>
    {
      XMC_CCU4_SLICE_EnableTrap(handle_ptr->ccu4_slice_ptr);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	4618      	mov	r0, r3
 80045e0:	f7ff fda8 	bl	8004134 <XMC_CCU4_SLICE_EnableTrap>
    }
  }
  if ((XMC_CCU4_SLICE_EVENT_1 == handle_ptr->config_ptr->ext_override_edge_event) && (XMC_CCU4_SLICE_EVENT_2
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d117      	bne.n	8004620 <PWM_CCU4_lConfigure_Events+0x1c0>
      == handle_ptr->config_ptr->ext_override_level_event))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    if ((bool) true == handle_ptr->config_ptr->ext_trap_enable)
    {
      XMC_CCU4_SLICE_EnableTrap(handle_ptr->ccu4_slice_ptr);
    }
  }
  if ((XMC_CCU4_SLICE_EVENT_1 == handle_ptr->config_ptr->ext_override_edge_event) && (XMC_CCU4_SLICE_EVENT_2
 80045f8:	2b03      	cmp	r3, #3
 80045fa:	d111      	bne.n	8004620 <PWM_CCU4_lConfigure_Events+0x1c0>
      == handle_ptr->config_ptr->ext_override_level_event))
  {
    XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent(handle_ptr->ccu4_slice_ptr,
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6899      	ldr	r1, [r3, #8]
                                                   handle_ptr->config_ptr->event1_config_ptr,
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
    }
  }
  if ((XMC_CCU4_SLICE_EVENT_1 == handle_ptr->config_ptr->ext_override_edge_event) && (XMC_CCU4_SLICE_EVENT_2
      == handle_ptr->config_ptr->ext_override_level_event))
  {
    XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent(handle_ptr->ccu4_slice_ptr,
 8004604:	699a      	ldr	r2, [r3, #24]
                                                   handle_ptr->config_ptr->event1_config_ptr,
                                                   handle_ptr->config_ptr->event2_config_ptr);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
    }
  }
  if ((XMC_CCU4_SLICE_EVENT_1 == handle_ptr->config_ptr->ext_override_edge_event) && (XMC_CCU4_SLICE_EVENT_2
      == handle_ptr->config_ptr->ext_override_level_event))
  {
    XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent(handle_ptr->ccu4_slice_ptr,
 800460a:	69db      	ldr	r3, [r3, #28]
 800460c:	4608      	mov	r0, r1
 800460e:	4611      	mov	r1, r2
 8004610:	461a      	mov	r2, r3
 8004612:	f7fc fdbd 	bl	8001190 <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent>
                                                   handle_ptr->config_ptr->event1_config_ptr,
                                                   handle_ptr->config_ptr->event2_config_ptr);
    XMC_CCU4_SLICE_StatusBitOverrideConfig(handle_ptr->ccu4_slice_ptr);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	4618      	mov	r0, r3
 800461c:	f7fc fd66 	bl	80010ec <XMC_CCU4_SLICE_StatusBitOverrideConfig>
  }

}
 8004620:	3708      	adds	r7, #8
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop

08004628 <PWM_CCU4_Start>:
/**********************************************************************************************************/
/*Starts the CCU4_CC4 slice. This needs to be called even if external start is configured.*/
PWM_CCU4_STATUS_t PWM_CCU4_Start(PWM_CCU4_t* handle_ptr)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  PWM_CCU4_STATUS_t status;

  status = PWM_CCU4_STATUS_FAILURE;
 8004630:	2301      	movs	r3, #1
 8004632:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("PWM_CCU4_Start:handle_ptr NULL", (handle_ptr != NULL));
  if ((PWM_CCU4_STATE_INITIALIZED == handle_ptr->state) || (PWM_CCU4_STATE_STOPPED == handle_ptr->state))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	7f1b      	ldrb	r3, [r3, #28]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d003      	beq.n	8004644 <PWM_CCU4_Start+0x1c>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	7f1b      	ldrb	r3, [r3, #28]
 8004640:	2b03      	cmp	r3, #3
 8004642:	d117      	bne.n	8004674 <PWM_CCU4_Start+0x4c>
  {
    /* clear IDLE mode for the slice; Start timer */
    XMC_CCU4_EnableClock(handle_ptr->ccu4_module_ptr, handle_ptr->slice_number);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685a      	ldr	r2, [r3, #4]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	7b5b      	ldrb	r3, [r3, #13]
 800464c:	4610      	mov	r0, r2
 800464e:	4619      	mov	r1, r3
 8004650:	f7ff fd5c 	bl	800410c <XMC_CCU4_EnableClock>

    if (XMC_CCU4_SLICE_EVENT_NONE == handle_ptr->config_ptr->ext_start_event)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f893 3020 	ldrb.w	r3, [r3, #32]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d104      	bne.n	800466a <PWM_CCU4_Start+0x42>
    {
      XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	4618      	mov	r0, r3
 8004666:	f7ff fd75 	bl	8004154 <XMC_CCU4_SLICE_StartTimer>
    }

    handle_ptr->state = PWM_CCU4_STATE_RUNNING;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2202      	movs	r2, #2
 800466e:	771a      	strb	r2, [r3, #28]
    status = PWM_CCU4_STATUS_SUCCESS;
 8004670:	2300      	movs	r3, #0
 8004672:	73fb      	strb	r3, [r7, #15]
    XMC_DEBUG("PWM_CCU4_Start:start PWM");
  }
  return (status);
 8004674:	7bfb      	ldrb	r3, [r7, #15]
} /* end of PWM_CCU4_Start() api */
 8004676:	4618      	mov	r0, r3
 8004678:	3710      	adds	r7, #16
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop

08004680 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	4603      	mov	r3, r0
 8004688:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800468a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800468e:	2b00      	cmp	r3, #0
 8004690:	db0c      	blt.n	80046ac <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8004692:	4909      	ldr	r1, [pc, #36]	; (80046b8 <__NVIC_ClearPendingIRQ+0x38>)
 8004694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004698:	095b      	lsrs	r3, r3, #5
 800469a:	79fa      	ldrb	r2, [r7, #7]
 800469c:	f002 021f 	and.w	r2, r2, #31
 80046a0:	2001      	movs	r0, #1
 80046a2:	fa00 f202 	lsl.w	r2, r0, r2
 80046a6:	3360      	adds	r3, #96	; 0x60
 80046a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80046ac:	370c      	adds	r7, #12
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	e000e100 	.word	0xe000e100

080046bc <XMC_USIC_CH_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
  channel->CCR &= (uint32_t)~event;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	43db      	mvns	r3, r3
 80046ce:	401a      	ands	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80046d4:	370c      	adds	r7, #12
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop

080046e0 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80046f2:	b2db      	uxtb	r3, r3
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <XMC_USIC_CH_TXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  channel->TBCTR |= event;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	431a      	orrs	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <XMC_USIC_CH_TXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
  channel->TBCTR &= (uint32_t)~event;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	43db      	mvns	r3, r3
 8004738:	401a      	ands	r2, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 8004740:	370c      	adds	r7, #12
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop

0800474c <XMC_USIC_CH_TXFIFO_IsFull>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800475a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800475e:	2b00      	cmp	r3, #0
 8004760:	bf14      	ite	ne
 8004762:	2301      	movne	r3, #1
 8004764:	2300      	moveq	r3, #0
 8004766:	b2db      	uxtb	r3, r3
}
 8004768:	4618      	mov	r0, r3
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <XMC_USIC_CH_TXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8004782:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004786:	2b00      	cmp	r3, #0
 8004788:	bf14      	ite	ne
 800478a:	2301      	movne	r3, #1
 800478c:	2300      	moveq	r3, #0
 800478e:	b2db      	uxtb	r3, r3
}
 8004790:	4618      	mov	r0, r3
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <XMC_USIC_CH_RXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  channel->RBCTR &= (uint32_t)~event;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	43db      	mvns	r3, r3
 80047b0:	401a      	ands	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 80047b8:	370c      	adds	r7, #12
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop

080047c4 <XMC_USIC_CH_RXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80047d2:	f003 0308 	and.w	r3, r3, #8
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	bf14      	ite	ne
 80047da:	2301      	movne	r3, #1
 80047dc:	2300      	moveq	r3, #0
 80047de:	b2db      	uxtb	r3, r3
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <XMC_I2C_CH_GetStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_ClearStatusFlag()\n\n
 */
__STATIC_INLINE uint32_t XMC_I2C_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  return (channel->PSR_IICMode);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	431a      	orrs	r2, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <I2C_MASTER_SetRXFIFOTriggerLimit>:
 *
 * @endcode
 */
__STATIC_INLINE void I2C_MASTER_SetRXFIFOTriggerLimit(I2C_MASTER_t * const handle, const uint32_t size,
		                                              const uint32_t limit)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("I2C_MASTER_SetRXFIFOTriggerLimit: invalid handle", (handle != NULL))
  XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel, (XMC_USIC_CH_FIFO_SIZE_t)size, limit);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	b2db      	uxtb	r3, r3
 8004838:	4610      	mov	r0, r2
 800483a:	4619      	mov	r1, r3
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	f7fd fb85 	bl	8001f4c <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>
}
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <I2C_MASTER_IsTXFIFOFull>:
 *  }
 * }
 * @endcode
 */
__STATIC_INLINE bool I2C_MASTER_IsTXFIFOFull(const I2C_MASTER_t* const handle)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_IsTXFIFOFull: invalid handle", (handle != NULL))
  return XMC_USIC_CH_TXFIFO_IsFull(handle->channel);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4618      	mov	r0, r3
 8004856:	f7ff ff79 	bl	800474c <XMC_USIC_CH_TXFIFO_IsFull>
 800485a:	4603      	mov	r3, r0
}
 800485c:	4618      	mov	r0, r3
 800485e:	3708      	adds	r7, #8
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <I2C_MASTER_IsRXFIFOEmpty>:
 *   }
 *  }
 * @endcode
 */
__STATIC_INLINE bool I2C_MASTER_IsRXFIFOEmpty(const I2C_MASTER_t* const handle)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_IsRXFIFOEmpty: invalid handle", (handle != NULL))
  return XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4618      	mov	r0, r3
 8004872:	f7ff ffa7 	bl	80047c4 <XMC_USIC_CH_RXFIFO_IsEmpty>
 8004876:	4603      	mov	r3, r0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3708      	adds	r7, #8
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <I2C_MASTER_GetReceivedByte>:
 * @endcode
 *
 */
/* Wrapper to the LLD API for reading back the value of the RBUF or OUTR register */
__STATIC_INLINE uint8_t I2C_MASTER_GetReceivedByte(I2C_MASTER_t * const handle)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_GetReceivedByte: invalid handle", (handle != NULL))
  return (uint8_t)XMC_I2C_CH_GetReceivedData(handle->channel);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4618      	mov	r0, r3
 800488e:	f7fd f975 	bl	8001b7c <XMC_I2C_CH_GetReceivedData>
 8004892:	4603      	mov	r3, r0
}
 8004894:	4618      	mov	r0, r3
 8004896:	3708      	adds	r7, #8
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <I2C_MASTER_TransmitByte>:
 *    }
 *  }
 * @endcode
 */
__STATIC_INLINE void I2C_MASTER_TransmitByte(I2C_MASTER_t * const handle, uint8_t byte)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	460b      	mov	r3, r1
 80048a6:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("I2C_MASTER_TransmitByte: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterTransmit(handle->channel, byte);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	78fb      	ldrb	r3, [r7, #3]
 80048ae:	4610      	mov	r0, r2
 80048b0:	4619      	mov	r1, r3
 80048b2:	f7fd f8f1 	bl	8001a98 <XMC_I2C_CH_MasterTransmit>
}
 80048b6:	3708      	adds	r7, #8
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}

080048bc <I2C_MASTER_DisableEvent>:
 *  }
 * @endcode
 *
 */
__STATIC_INLINE void I2C_MASTER_DisableEvent(I2C_MASTER_t * const handle, uint32_t event)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("I2C_MASTER_DisableEvent: invalid handle", (handle != NULL))
  XMC_I2C_CH_DisableEvent(handle->channel, event);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4618      	mov	r0, r3
 80048cc:	6839      	ldr	r1, [r7, #0]
 80048ce:	f7fd f96f 	bl	8001bb0 <XMC_I2C_CH_DisableEvent>
}
 80048d2:	3708      	adds	r7, #8
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <I2C_MASTER_ReceiveACK>:
 *    return 1U;
 *  }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveAck(handle->channel);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7fd f8fd 	bl	8001ae4 <XMC_I2C_CH_MasterReceiveAck>
}
 80048ea:	3708      	adds	r7, #8
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <I2C_MASTER_ReceiveNACK>:
 *    return 1U;
 *  }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveNack(handle->channel);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4618      	mov	r0, r3
 80048fe:	f7fd f917 	bl	8001b30 <XMC_I2C_CH_MasterReceiveNack>
}
 8004902:	3708      	adds	r7, #8
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <I2C_MASTER_SendStop>:
 *    return 1U;
 *  }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_SendStop(I2C_MASTER_t * const handle)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_SendStop: invalid handle", (handle != NULL))
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_STOP_CONDITION_RECEIVED);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4618      	mov	r0, r3
 8004916:	2110      	movs	r1, #16
 8004918:	f7ff ff74 	bl	8004804 <XMC_I2C_CH_ClearStatusFlag>
  XMC_I2C_CH_MasterStop(handle->channel);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4618      	mov	r0, r3
 8004922:	f7fd f893 	bl	8001a4c <XMC_I2C_CH_MasterStop>
}
 8004926:	3708      	adds	r7, #8
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <calculate_minfifosize>:
 */
void I2C_MASTER_ProtocolHandler(I2C_MASTER_t * const handle);

#if ((I2C_MASTER_INTERRUPT_TX_ENABLED == 1) || (I2C_MASTER_INTERRUPT_RX_ENABLED == 1))
static uint32_t calculate_minfifosize(uint32_t a, uint32_t b)
{
 800492c:	b480      	push	{r7}
 800492e:	b085      	sub	sp, #20
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  uint32_t result;

  if (a < b)
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	429a      	cmp	r2, r3
 800493c:	d202      	bcs.n	8004944 <calculate_minfifosize+0x18>
  {
    result = a;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	60fb      	str	r3, [r7, #12]
 8004942:	e001      	b.n	8004948 <calculate_minfifosize+0x1c>
  }
  else
  {
    result = b;
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	60fb      	str	r3, [r7, #12]
  }
  return (result);
 8004948:	68fb      	ldr	r3, [r7, #12]
}
 800494a:	4618      	mov	r0, r3
 800494c:	3714      	adds	r7, #20
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop

08004958 <I2C_MASTER_Init>:
  return (version);
}

/* Function to initialize the USIC Channel with GUI configured values.*/
I2C_MASTER_STATUS_t I2C_MASTER_Init(const I2C_MASTER_t *const handle)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  I2C_MASTER_STATUS_t status;

  if (handle != NULL)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d006      	beq.n	8004974 <I2C_MASTER_Init+0x1c>
  {
    /*Initialize the multiplexers required for I2C_MASTER configuration*/
    handle->config->fptr_i2c_config();
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	4798      	blx	r3

    status = I2C_MASTER_STATUS_SUCCESS;
 800496e:	2300      	movs	r3, #0
 8004970:	73fb      	strb	r3, [r7, #15]
 8004972:	e001      	b.n	8004978 <I2C_MASTER_Init+0x20>
  }
  else
  {
    status = I2C_MASTER_STATUS_FAILURE;
 8004974:	2301      	movs	r3, #1
 8004976:	73fb      	strb	r3, [r7, #15]
  }
  return (status);
 8004978:	7bfb      	ldrb	r3, [r7, #15]
}
 800497a:	4618      	mov	r0, r3
 800497c:	3710      	adds	r7, #16
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop

08004984 <I2C_MASTER_GetFlagStatus>:

/* Function to get flag status of the requested parameter */
uint32_t I2C_MASTER_GetFlagStatus(const I2C_MASTER_t *handle, uint32_t flagtype)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
  uint32_t status;

  status = XMC_I2C_CH_GetStatusFlag(handle->channel);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4618      	mov	r0, r3
 8004994:	f7ff ff2a 	bl	80047ec <XMC_I2C_CH_GetStatusFlag>
 8004998:	60f8      	str	r0, [r7, #12]

  return (status & flagtype);
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	4013      	ands	r3, r2
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3710      	adds	r7, #16
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <I2C_MASTER_ClearFlag>:

/* Function to clear flag status of the requested parameter */
void I2C_MASTER_ClearFlag(const I2C_MASTER_t *handle, uint32_t flagtype)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
  XMC_I2C_CH_ClearStatusFlag(handle->channel,flagtype);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4618      	mov	r0, r3
 80049b8:	6839      	ldr	r1, [r7, #0]
 80049ba:	f7ff ff23 	bl	8004804 <XMC_I2C_CH_ClearStatusFlag>
}
 80049be:	3708      	adds	r7, #8
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <I2C_MASTER_TransmitHandler>:
 *  @param  handle I2C_MASTER APP handle pointer of type I2C_MASTER_t*
 *
 *  @return void
 */
void I2C_MASTER_TransmitHandler(I2C_MASTER_t * const handle)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  I2C_MASTER_RUNTIME_t * ptr_runtime;
  uint8_t fifo_min;

  ptr_runtime = handle->runtime;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	60bb      	str	r3, [r7, #8]
  fifo_min = 0U;
 80049d2:	2300      	movs	r3, #0
 80049d4:	73fb      	strb	r3, [r7, #15]

  /* check if any error flag is set */
  if (I2C_MASTER_GetFlagStatus(handle, ((uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED |
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80049dc:	f7ff ffd2 	bl	8004984 <I2C_MASTER_GetFlagStatus>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d011      	beq.n	8004a0a <I2C_MASTER_TransmitHandler+0x46>
                                        (uint32_t)XMC_I2C_CH_STATUS_FLAG_ARBITRATION_LOST |
                                        (uint32_t)XMC_I2C_CH_STATUS_FLAG_ERROR |
                    (uint32_t)XMC_I2C_CH_STATUS_FLAG_WRONG_TDF_CODE_FOUND)))
  {
    /* Disable the transmit events */
    XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4618      	mov	r0, r3
 80049ec:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80049f0:	f7ff fe98 	bl	8004724 <XMC_USIC_CH_TXFIFO_DisableEvent>
    XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4618      	mov	r0, r3
 80049fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80049fe:	f7ff fe5d 	bl	80046bc <XMC_USIC_CH_DisableEvent>

    I2C_MASTER_ProtocolHandler(handle);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 fa96 	bl	8004f34 <I2C_MASTER_ProtocolHandler>
 8004a08:	e105      	b.n	8004c16 <I2C_MASTER_TransmitHandler+0x252>
  else
  {
/***********************************************************************************************************************
  Direction = Transmit, Tx FIFO enabled
***********************************************************************************************************************/
  if (ptr_runtime->direction == (uint32_t)I2C_MASTER_DIRECTION_TRANSMIT)
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	f040 8082 	bne.w	8004b18 <I2C_MASTER_TransmitHandler+0x154>
  {
    if (handle->config->txFIFO_size > 0)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d05a      	beq.n	8004ad6 <I2C_MASTER_TransmitHandler+0x112>
    {
      if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	68da      	ldr	r2, [r3, #12]
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d22e      	bcs.n	8004a8a <I2C_MASTER_TransmitHandler+0xc6>
      {
      I2C_MASTER_DisableEvent(handle,(uint32_t)XMC_I2C_CH_EVENT_ACK);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004a32:	f7ff ff43 	bl	80048bc <I2C_MASTER_DisableEvent>
      XMC_USIC_CH_TXFIFO_EnableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004a40:	f7ff fe5e 	bl	8004700 <XMC_USIC_CH_TXFIFO_EnableEvent>
        /*Fill the transmit FIFO */
        while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 8004a44:	e017      	b.n	8004a76 <I2C_MASTER_TransmitHandler+0xb2>
        {
          /* transmit each byte till index reaches to the last byte */
          if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	68da      	ldr	r2, [r3, #12]
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d20f      	bcs.n	8004a72 <I2C_MASTER_TransmitHandler+0xae>
          {
            /* load the FIFO, byte by byte till either FIFO is full or all data is loaded*/
            I2C_MASTER_TransmitByte(handle, (uint8_t)ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	4619      	mov	r1, r3
 8004a62:	f7ff ff1b 	bl	800489c <I2C_MASTER_TransmitByte>
            ptr_runtime->tx_data_index++;
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	1c5a      	adds	r2, r3, #1
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	60da      	str	r2, [r3, #12]
 8004a70:	e001      	b.n	8004a76 <I2C_MASTER_TransmitHandler+0xb2>
          }
          else
          {
            break;
 8004a72:	bf00      	nop
 8004a74:	e0cf      	b.n	8004c16 <I2C_MASTER_TransmitHandler+0x252>
      if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
      {
      I2C_MASTER_DisableEvent(handle,(uint32_t)XMC_I2C_CH_EVENT_ACK);
      XMC_USIC_CH_TXFIFO_EnableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
        /*Fill the transmit FIFO */
        while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f7ff fee6 	bl	8004848 <I2C_MASTER_IsTXFIFOFull>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	f083 0301 	eor.w	r3, r3, #1
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1de      	bne.n	8004a46 <I2C_MASTER_TransmitHandler+0x82>
 8004a88:	e0c5      	b.n	8004c16 <I2C_MASTER_TransmitHandler+0x252>
        } /* end of while */
      }
      else
      {
        /* if index is reached to last byte and "bus acquired" flag is set to true, then issue Send Stop */
      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004a94:	f7ff fe46 	bl	8004724 <XMC_USIC_CH_TXFIFO_DisableEvent>
      NVIC_ClearPendingIRQ(handle->config->tx_irqn);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004aa0:	b25b      	sxtb	r3, r3
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7ff fdec 	bl	8004680 <__NVIC_ClearPendingIRQ>

      /*make sure data is transmitted in FIFO*/
        while (!XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel)){}
 8004aa8:	bf00      	nop
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7ff fe60 	bl	8004774 <XMC_USIC_CH_TXFIFO_IsEmpty>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	f083 0301 	eor.w	r3, r3, #1
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d1f4      	bne.n	8004aaa <I2C_MASTER_TransmitHandler+0xe6>

          if (ptr_runtime->bus_acquired == true)
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	f000 80a4 	beq.w	8004c16 <I2C_MASTER_TransmitHandler+0x252>
          {
            I2C_MASTER_lSendStop_JumpTo_TxCallback(handle);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 f8a4 	bl	8004c1c <I2C_MASTER_lSendStop_JumpTo_TxCallback>
 8004ad4:	e09f      	b.n	8004c16 <I2C_MASTER_TransmitHandler+0x252>
    Direction = transmit and Tx FIFO disabled
***********************************************************************************************************************/
    else
    {
      /* transmit each byte till the last byte */
      if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	68da      	ldr	r2, [r3, #12]
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d20f      	bcs.n	8004b02 <I2C_MASTER_TransmitHandler+0x13e>
      {
        I2C_MASTER_TransmitByte(handle, ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	4413      	add	r3, r2
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	4619      	mov	r1, r3
 8004af2:	f7ff fed3 	bl	800489c <I2C_MASTER_TransmitByte>
        ptr_runtime->tx_data_index++;
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	1c5a      	adds	r2, r3, #1
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	60da      	str	r2, [r3, #12]
 8004b00:	e089      	b.n	8004c16 <I2C_MASTER_TransmitHandler+0x252>
      }
      else
      {
        /* if index reaches last byte and bus_acquired flag is set to true, issue send stop */
        if (ptr_runtime->bus_acquired == true)
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	f000 8083 	beq.w	8004c16 <I2C_MASTER_TransmitHandler+0x252>
        {
          I2C_MASTER_lSendStop_JumpTo_TxCallback(handle);
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f000 f883 	bl	8004c1c <I2C_MASTER_lSendStop_JumpTo_TxCallback>
 8004b16:	e07e      	b.n	8004c16 <I2C_MASTER_TransmitHandler+0x252>
/***********************************************************************************************************************
  Direction = Receive, Tx, Rx FIFO enabled.
  Minimum FIFO value is calculated by comparing Tx FIFO and Rx FIFO size.
  If Rx FIFO is not enabled, default size of 2 is considered.
***********************************************************************************************************************/
    if (handle->config->txFIFO_size > 0)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d054      	beq.n	8004bce <I2C_MASTER_TransmitHandler+0x20a>
    {
      if ((handle->config->rxFIFO_size > 0))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d015      	beq.n	8004b5c <I2C_MASTER_TransmitHandler+0x198>
      {
        fifo_min = (uint8_t)calculate_minfifosize(((uint32_t)1 << (uint32_t)handle->config->txFIFO_size),
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004b38:	461a      	mov	r2, r3
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	fa03 f202 	lsl.w	r2, r3, r2
                                              ((uint32_t)1 << (uint32_t)handle->config->rxFIFO_size));
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
***********************************************************************************************************************/
    if (handle->config->txFIFO_size > 0)
    {
      if ((handle->config->rxFIFO_size > 0))
      {
        fifo_min = (uint8_t)calculate_minfifosize(((uint32_t)1 << (uint32_t)handle->config->txFIFO_size),
 8004b48:	4619      	mov	r1, r3
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	408b      	lsls	r3, r1
 8004b4e:	4610      	mov	r0, r2
 8004b50:	4619      	mov	r1, r3
 8004b52:	f7ff feeb 	bl	800492c <calculate_minfifosize>
 8004b56:	4603      	mov	r3, r0
 8004b58:	73fb      	strb	r3, [r7, #15]
 8004b5a:	e001      	b.n	8004b60 <I2C_MASTER_TransmitHandler+0x19c>
                                              ((uint32_t)1 << (uint32_t)handle->config->rxFIFO_size));
      }
      else
      {
        /* if Rx FIFO is disabled, set minimum FIFO size as 2 */
        fifo_min = 2U;
 8004b5c:	2302      	movs	r3, #2
 8004b5e:	73fb      	strb	r3, [r7, #15]
      }

      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4618      	mov	r0, r3
 8004b66:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004b6a:	f7ff fddb 	bl	8004724 <XMC_USIC_CH_TXFIFO_DisableEvent>

      /* fill the FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 8004b6e:	e023      	b.n	8004bb8 <I2C_MASTER_TransmitHandler+0x1f4>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	68da      	ldr	r2, [r3, #12]
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d21c      	bcs.n	8004bb6 <I2C_MASTER_TransmitHandler+0x1f2>
        {
          /* check for last byte and send_nack is set to true */
          if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	1c5a      	adds	r2, r3, #1
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d107      	bne.n	8004b9a <I2C_MASTER_TransmitHandler+0x1d6>
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d103      	bne.n	8004b9a <I2C_MASTER_TransmitHandler+0x1d6>
          {
            I2C_MASTER_ReceiveNACK(handle);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f7ff feac 	bl	80048f0 <I2C_MASTER_ReceiveNACK>
 8004b98:	e002      	b.n	8004ba0 <I2C_MASTER_TransmitHandler+0x1dc>
          }
          else
          {
            I2C_MASTER_ReceiveACK(handle);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f7ff fe9c 	bl	80048d8 <I2C_MASTER_ReceiveACK>
          }
          ptr_runtime->tx_data_index++;
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	1c5a      	adds	r2, r3, #1
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	60da      	str	r2, [r3, #12]

          /*if index reaches fifo size - break*/
          if ((ptr_runtime->tx_data_index) >= fifo_min)
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	68da      	ldr	r2, [r3, #12]
 8004bae:	7bfb      	ldrb	r3, [r7, #15]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d301      	bcc.n	8004bb8 <I2C_MASTER_TransmitHandler+0x1f4>
          {
            break;
 8004bb4:	e00a      	b.n	8004bcc <I2C_MASTER_TransmitHandler+0x208>
          }
        }
        else
        {
          break;
 8004bb6:	e009      	b.n	8004bcc <I2C_MASTER_TransmitHandler+0x208>
      }

      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);

      /* fill the FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f7ff fe45 	bl	8004848 <I2C_MASTER_IsTXFIFOFull>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	f083 0301 	eor.w	r3, r3, #1
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d1d2      	bne.n	8004b70 <I2C_MASTER_TransmitHandler+0x1ac>
 8004bca:	e017      	b.n	8004bfc <I2C_MASTER_TransmitHandler+0x238>
 8004bcc:	e016      	b.n	8004bfc <I2C_MASTER_TransmitHandler+0x238>
   Direction = Receive, Tx FIFO disabled
 **********************************************************************************************************************/
    else
    {
      /* check for last byte and send_nack is set to true */
      if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	1c5a      	adds	r2, r3, #1
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d107      	bne.n	8004bec <I2C_MASTER_TransmitHandler+0x228>
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	6a1b      	ldr	r3, [r3, #32]
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d103      	bne.n	8004bec <I2C_MASTER_TransmitHandler+0x228>
      {
        I2C_MASTER_ReceiveNACK(handle);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f7ff fe83 	bl	80048f0 <I2C_MASTER_ReceiveNACK>
 8004bea:	e002      	b.n	8004bf2 <I2C_MASTER_TransmitHandler+0x22e>
      }
      else
      {
        I2C_MASTER_ReceiveACK(handle);
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f7ff fe73 	bl	80048d8 <I2C_MASTER_ReceiveACK>
      }
      ptr_runtime->tx_data_index++;
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	1c5a      	adds	r2, r3, #1
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	60da      	str	r2, [r3, #12]
    }

/***********************************************************************************************************************
   If last byte, then disable ACK event
 **********************************************************************************************************************/
     if (handle->runtime->tx_data_index == handle->runtime->tx_data_count)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	68da      	ldr	r2, [r3, #12]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d104      	bne.n	8004c16 <I2C_MASTER_TransmitHandler+0x252>
     {
       I2C_MASTER_DisableEvent(handle,(uint32_t)XMC_I2C_CH_EVENT_ACK);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004c12:	f7ff fe53 	bl	80048bc <I2C_MASTER_DisableEvent>
     }
  } /* end of else */
 } /* end of else */
}
 8004c16:	3710      	adds	r7, #16
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <I2C_MASTER_lSendStop_JumpTo_TxCallback>:

/* Function to issue Send Stop command and jump to callback routine */
static void I2C_MASTER_lSendStop_JumpTo_TxCallback(I2C_MASTER_t *const handle)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  ptr_runtime = handle->runtime;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	60fb      	str	r3, [r7, #12]

  I2C_MASTER_DisableEvent(handle,((uint32_t)XMC_I2C_CH_EVENT_ACK ));
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004c30:	f7ff fe44 	bl	80048bc <I2C_MASTER_DisableEvent>

  if (ptr_runtime->send_stop == true)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	69db      	ldr	r3, [r3, #28]
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d106      	bne.n	8004c4a <I2C_MASTER_lSendStop_JumpTo_TxCallback+0x2e>
  {
    ptr_runtime->bus_acquired = false;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    I2C_MASTER_SendStop(handle);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f7ff fe5f 	bl	8004908 <I2C_MASTER_SendStop>
  }

  while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
 8004c4a:	bf00      	nop
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4618      	mov	r0, r3
 8004c52:	f7ff fd45 	bl	80046e0 <XMC_USIC_CH_GetTransmitBufferStatus>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b80      	cmp	r3, #128	; 0x80
 8004c5a:	d0f7      	beq.n	8004c4c <I2C_MASTER_lSendStop_JumpTo_TxCallback+0x30>

  /*All data is transmitted*/
  ptr_runtime->tx_busy = false;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  if (handle->config->tx_cbhandler != NULL)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d003      	beq.n	8004c76 <I2C_MASTER_lSendStop_JumpTo_TxCallback+0x5a>
  {
    /*Execute the 'End of transmission' callback function*/
    handle->config->tx_cbhandler();
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	4798      	blx	r3
  }
}
 8004c76:	3710      	adds	r7, #16
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <I2C_MASTER_ReceiveHandler>:
 * @param  handle I2C_MASTER APP handle pointer of type I2C_MASTER_t*
 *
 * @return void
 */
void I2C_MASTER_ReceiveHandler(I2C_MASTER_t * const handle)
{
 8004c7c:	b590      	push	{r4, r7, lr}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  I2C_MASTER_RUNTIME_t * ptr_runtime;
  uint8_t fifo_lindex;
  uint8_t fifo_min;

  ptr_runtime = handle->runtime;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	60bb      	str	r3, [r7, #8]
  fifo_lindex = 0U;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	73fb      	strb	r3, [r7, #15]

  if (ptr_runtime->rx_busy == true)
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	f000 8111 	beq.w	8004ebe <I2C_MASTER_ReceiveHandler+0x242>
  {
    if (handle->config->rxFIFO_size > 0)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	f000 80c7 	beq.w	8004e38 <I2C_MASTER_ReceiveHandler+0x1bc>
    {
      /*****************************************************************************************************************
       Rx FIFO enabled
      *****************************************************************************************************************/
      while (I2C_MASTER_IsRXFIFOEmpty(handle) == false)
 8004caa:	e020      	b.n	8004cee <I2C_MASTER_ReceiveHandler+0x72>
      {
        /*Read all the content of Receive FIFO */
        ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)I2C_MASTER_GetReceivedByte(handle);
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	685a      	ldr	r2, [r3, #4]
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	18d4      	adds	r4, r2, r3
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f7ff fde2 	bl	8004880 <I2C_MASTER_GetReceivedByte>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	7023      	strb	r3, [r4, #0]
        ptr_runtime->rx_data_index++;
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	695b      	ldr	r3, [r3, #20]
 8004cc4:	1c5a      	adds	r2, r3, #1
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	615a      	str	r2, [r3, #20]

        if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	695a      	ldr	r2, [r3, #20]
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d10b      	bne.n	8004cee <I2C_MASTER_ReceiveHandler+0x72>
        {
          /*Reception complete*/
          ptr_runtime->rx_busy = false;
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

            /*Disable both standard receive and alternative receive FIFO events*/
            XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8004ce8:	f7ff fd58 	bl	800479c <XMC_USIC_CH_RXFIFO_DisableEvent>
                                          (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
                                                     (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));

          break;
 8004cec:	e008      	b.n	8004d00 <I2C_MASTER_ReceiveHandler+0x84>
    if (handle->config->rxFIFO_size > 0)
    {
      /*****************************************************************************************************************
       Rx FIFO enabled
      *****************************************************************************************************************/
      while (I2C_MASTER_IsRXFIFOEmpty(handle) == false)
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f7ff fdb8 	bl	8004864 <I2C_MASTER_IsRXFIFOEmpty>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	f083 0301 	eor.w	r3, r3, #1
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d1d5      	bne.n	8004cac <I2C_MASTER_ReceiveHandler+0x30>
          break;
        }
      } /* end of while(I2C_MASTER_IsRXFIFOEmpty(handle) == false)*/

      /*Set the trigger limit if data still to be received*/
      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	695a      	ldr	r2, [r3, #20]
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d277      	bcs.n	8004dfc <I2C_MASTER_ReceiveHandler+0x180>
      {
        I2C_MASTER_lReconfigureRxFIFO(handle,(uint32_t)(ptr_runtime->rx_data_count - ptr_runtime->rx_data_index));
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	691a      	ldr	r2, [r3, #16]
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	695b      	ldr	r3, [r3, #20]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	4619      	mov	r1, r3
 8004d1a:	f000 f94f 	bl	8004fbc <I2C_MASTER_lReconfigureRxFIFO>

        if ((handle->config->txFIFO_size > 0))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d015      	beq.n	8004d56 <I2C_MASTER_ReceiveHandler+0xda>
        {
          fifo_min = (uint8_t)calculate_minfifosize(((uint32_t)1 << (uint32_t)handle->config->txFIFO_size),
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004d32:	461a      	mov	r2, r3
 8004d34:	2301      	movs	r3, #1
 8004d36:	fa03 f202 	lsl.w	r2, r3, r2
                                                    ((uint32_t)1 << (uint32_t)handle->config->rxFIFO_size));
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
      {
        I2C_MASTER_lReconfigureRxFIFO(handle,(uint32_t)(ptr_runtime->rx_data_count - ptr_runtime->rx_data_index));

        if ((handle->config->txFIFO_size > 0))
        {
          fifo_min = (uint8_t)calculate_minfifosize(((uint32_t)1 << (uint32_t)handle->config->txFIFO_size),
 8004d42:	4619      	mov	r1, r3
 8004d44:	2301      	movs	r3, #1
 8004d46:	408b      	lsls	r3, r1
 8004d48:	4610      	mov	r0, r2
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	f7ff fdee 	bl	800492c <calculate_minfifosize>
 8004d50:	4603      	mov	r3, r0
 8004d52:	73bb      	strb	r3, [r7, #14]
 8004d54:	e001      	b.n	8004d5a <I2C_MASTER_ReceiveHandler+0xde>
                                                    ((uint32_t)1 << (uint32_t)handle->config->rxFIFO_size));
       }
       else
       {
          fifo_min = 2U;
 8004d56:	2302      	movs	r3, #2
 8004d58:	73bb      	strb	r3, [r7, #14]
       }
       /****************************************************************************************************************
         Rx and Tx FIFO enabled
        ***************************************************************************************************************/
        if (handle->config->txFIFO_size > 0)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d033      	beq.n	8004dce <I2C_MASTER_ReceiveHandler+0x152>
        {
          /*Fill the transmit FIFO */
          while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 8004d66:	e027      	b.n	8004db8 <I2C_MASTER_ReceiveHandler+0x13c>
          {
            if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	68da      	ldr	r2, [r3, #12]
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d220      	bcs.n	8004db6 <I2C_MASTER_ReceiveHandler+0x13a>
            {
              if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	1c5a      	adds	r2, r3, #1
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d107      	bne.n	8004d92 <I2C_MASTER_ReceiveHandler+0x116>
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	6a1b      	ldr	r3, [r3, #32]
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d103      	bne.n	8004d92 <I2C_MASTER_ReceiveHandler+0x116>
              {
                I2C_MASTER_ReceiveNACK(handle);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f7ff fdb0 	bl	80048f0 <I2C_MASTER_ReceiveNACK>
 8004d90:	e002      	b.n	8004d98 <I2C_MASTER_ReceiveHandler+0x11c>
              }
              else
              {
                I2C_MASTER_ReceiveACK(handle);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f7ff fda0 	bl	80048d8 <I2C_MASTER_ReceiveACK>
              }
              ptr_runtime->tx_data_index++;
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	1c5a      	adds	r2, r3, #1
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	60da      	str	r2, [r3, #12]

              /* if fifo size- break */
              if ((++fifo_lindex) >= fifo_min)
 8004da2:	7bfb      	ldrb	r3, [r7, #15]
 8004da4:	3301      	adds	r3, #1
 8004da6:	73fb      	strb	r3, [r7, #15]
 8004da8:	7bfa      	ldrb	r2, [r7, #15]
 8004daa:	7bbb      	ldrb	r3, [r7, #14]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d303      	bcc.n	8004db8 <I2C_MASTER_ReceiveHandler+0x13c>
              {
                fifo_lindex = 0U;
 8004db0:	2300      	movs	r3, #0
 8004db2:	73fb      	strb	r3, [r7, #15]
                break;
 8004db4:	e00a      	b.n	8004dcc <I2C_MASTER_ReceiveHandler+0x150>
              }
            }/* end of if(handle->runtime->tx_data_index < handle->runtime->tx_data_count) */
            else
            {
              break;
 8004db6:	e009      	b.n	8004dcc <I2C_MASTER_ReceiveHandler+0x150>
         Rx and Tx FIFO enabled
        ***************************************************************************************************************/
        if (handle->config->txFIFO_size > 0)
        {
          /*Fill the transmit FIFO */
          while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f7ff fd45 	bl	8004848 <I2C_MASTER_IsTXFIFOFull>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	f083 0301 	eor.w	r3, r3, #1
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d1ce      	bne.n	8004d68 <I2C_MASTER_ReceiveHandler+0xec>
 8004dca:	e017      	b.n	8004dfc <I2C_MASTER_ReceiveHandler+0x180>
 8004dcc:	e016      	b.n	8004dfc <I2C_MASTER_ReceiveHandler+0x180>
       /****************************************************************************************************************
          Rx FIFO is enabled, Tx FIFO disabled
       ****************************************************************************************************************/
       else
       {
         if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	1c5a      	adds	r2, r3, #1
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d107      	bne.n	8004dec <I2C_MASTER_ReceiveHandler+0x170>
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	6a1b      	ldr	r3, [r3, #32]
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d103      	bne.n	8004dec <I2C_MASTER_ReceiveHandler+0x170>
         {
           I2C_MASTER_ReceiveNACK(handle);
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f7ff fd83 	bl	80048f0 <I2C_MASTER_ReceiveNACK>
 8004dea:	e002      	b.n	8004df2 <I2C_MASTER_ReceiveHandler+0x176>
         }
         else
         {
           I2C_MASTER_ReceiveACK(handle);
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f7ff fd73 	bl	80048d8 <I2C_MASTER_ReceiveACK>
         }

         ptr_runtime->tx_data_index++;
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	1c5a      	adds	r2, r3, #1
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	60da      	str	r2, [r3, #12]
       }
     } /* end of if(ptr_runtime->rx_data_index < ptr_runtime->rx_data_count) */
/***********************************************************************************************************************
     if last byte to receive then disable receive events and jump to callback routine
***********************************************************************************************************************/
     if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	695a      	ldr	r2, [r3, #20]
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d15a      	bne.n	8004ebe <I2C_MASTER_ReceiveHandler+0x242>
     {
       /*Clear both standard receive and alternative receive FIFO events*/
       XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8004e12:	f7ff fcc3 	bl	800479c <XMC_USIC_CH_RXFIFO_DisableEvent>
                                                                   (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));

       /*Disable both standard receive and alternative receive events*/
       XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE |
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8004e20:	f7ff fc4c 	bl	80046bc <XMC_USIC_CH_DisableEvent>
                                                            (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE));

       if (ptr_runtime->bus_acquired == true)
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d046      	beq.n	8004ebe <I2C_MASTER_ReceiveHandler+0x242>
       {
         I2C_MASTER_lSendStop_JumpTo_RxCallback(handle);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 f847 	bl	8004ec4 <I2C_MASTER_lSendStop_JumpTo_RxCallback>
 8004e36:	e042      	b.n	8004ebe <I2C_MASTER_ReceiveHandler+0x242>
/***********************************************************************************************************************
     Rx FIFO disabled
***********************************************************************************************************************/
    else
    {
      ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)I2C_MASTER_GetReceivedByte(handle);
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	685a      	ldr	r2, [r3, #4]
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	695b      	ldr	r3, [r3, #20]
 8004e40:	18d4      	adds	r4, r2, r3
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f7ff fd1c 	bl	8004880 <I2C_MASTER_GetReceivedByte>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	7023      	strb	r3, [r4, #0]
      ptr_runtime->rx_data_index++;
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	695b      	ldr	r3, [r3, #20]
 8004e50:	1c5a      	adds	r2, r3, #1
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	615a      	str	r2, [r3, #20]

      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	695a      	ldr	r2, [r3, #20]
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d21d      	bcs.n	8004e9e <I2C_MASTER_ReceiveHandler+0x222>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	68da      	ldr	r2, [r3, #12]
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d227      	bcs.n	8004ebe <I2C_MASTER_ReceiveHandler+0x242>
        {
          /* if receive byte is end of byte and send_nack is true, send to receive Nack otherwise Ack*/
          if (((ptr_runtime->tx_data_index) == (ptr_runtime->tx_data_count - 1U)) && (ptr_runtime->send_nack == true))
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	68da      	ldr	r2, [r3, #12]
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	3b01      	subs	r3, #1
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d107      	bne.n	8004e8c <I2C_MASTER_ReceiveHandler+0x210>
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	6a1b      	ldr	r3, [r3, #32]
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d103      	bne.n	8004e8c <I2C_MASTER_ReceiveHandler+0x210>
          {
            I2C_MASTER_ReceiveNACK(handle);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f7ff fd33 	bl	80048f0 <I2C_MASTER_ReceiveNACK>
 8004e8a:	e002      	b.n	8004e92 <I2C_MASTER_ReceiveHandler+0x216>
          }
          else
          {
            I2C_MASTER_ReceiveACK(handle);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f7ff fd23 	bl	80048d8 <I2C_MASTER_ReceiveACK>
          }
          ptr_runtime->tx_data_index++;
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	1c5a      	adds	r2, r3, #1
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	60da      	str	r2, [r3, #12]
 8004e9c:	e00f      	b.n	8004ebe <I2C_MASTER_ReceiveHandler+0x242>
        }
      }
      else
      {
        /*Disable both standard receive and alternative receive events*/
        XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE |
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8004ea8:	f7ff fc08 	bl	80046bc <XMC_USIC_CH_DisableEvent>
                                                             (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE));
        if (ptr_runtime->bus_acquired == true)
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d002      	beq.n	8004ebe <I2C_MASTER_ReceiveHandler+0x242>
        {
          I2C_MASTER_lSendStop_JumpTo_RxCallback(handle);
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f000 f803 	bl	8004ec4 <I2C_MASTER_lSendStop_JumpTo_RxCallback>
        }
      }
    }
  } /* end of  if(ptr_runtime->rx_busy == true)*/
}
 8004ebe:	3714      	adds	r7, #20
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd90      	pop	{r4, r7, pc}

08004ec4 <I2C_MASTER_lSendStop_JumpTo_RxCallback>:

/* Function to issue Send Stop command and jump to receive callback routine */
static void I2C_MASTER_lSendStop_JumpTo_RxCallback(I2C_MASTER_t *const handle)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  ptr_runtime = handle->runtime;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	60fb      	str	r3, [r7, #12]

  if (ptr_runtime->send_stop == true)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	69db      	ldr	r3, [r3, #28]
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d10f      	bne.n	8004efa <I2C_MASTER_lSendStop_JumpTo_RxCallback+0x36>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
 8004eda:	bf00      	nop
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f7ff fbfd 	bl	80046e0 <XMC_USIC_CH_GetTransmitBufferStatus>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b80      	cmp	r3, #128	; 0x80
 8004eea:	d0f7      	beq.n	8004edc <I2C_MASTER_lSendStop_JumpTo_RxCallback+0x18>

    ptr_runtime->bus_acquired = false;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    I2C_MASTER_SendStop(handle);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f7ff fd07 	bl	8004908 <I2C_MASTER_SendStop>
  }

  while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
 8004efa:	bf00      	nop
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4618      	mov	r0, r3
 8004f02:	f7ff fbed 	bl	80046e0 <XMC_USIC_CH_GetTransmitBufferStatus>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b80      	cmp	r3, #128	; 0x80
 8004f0a:	d0f7      	beq.n	8004efc <I2C_MASTER_lSendStop_JumpTo_RxCallback+0x38>

  /* Reception complete */
  ptr_runtime->rx_busy = false;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  ptr_runtime->tx_busy = false;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  if (handle->config->rx_cbhandler != NULL)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	695b      	ldr	r3, [r3, #20]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d003      	beq.n	8004f2e <I2C_MASTER_lSendStop_JumpTo_RxCallback+0x6a>
  {
    /*Execute the 'End of reception' callback function*/
    handle->config->rx_cbhandler();
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	695b      	ldr	r3, [r3, #20]
 8004f2c:	4798      	blx	r3
  }
}
 8004f2e:	3710      	adds	r7, #16
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <I2C_MASTER_ProtocolHandler>:
 * @param  handle I2C_MASTER APP handle pointer of type I2C_MASTER_t*
 *
 * @return void
 */
void I2C_MASTER_ProtocolHandler(I2C_MASTER_t * const handle)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  uint32_t psr_status;

  psr_status = XMC_I2C_CH_GetStatusFlag(handle->channel);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4618      	mov	r0, r3
 8004f42:	f7ff fc53 	bl	80047ec <XMC_I2C_CH_GetStatusFlag>
 8004f46:	60f8      	str	r0, [r7, #12]

  /* Check for nack event */
  if ((handle->config->nack_cbhandler != NULL) && (psr_status & (uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00c      	beq.n	8004f6c <I2C_MASTER_ProtocolHandler+0x38>
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f003 0320 	and.w	r3, r3, #32
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d007      	beq.n	8004f6c <I2C_MASTER_ProtocolHandler+0x38>
  {
    I2C_MASTER_ClearFlag(handle,(uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED);
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	2120      	movs	r1, #32
 8004f60:	f7ff fd22 	bl	80049a8 <I2C_MASTER_ClearFlag>
    handle->config->nack_cbhandler();
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	4798      	blx	r3
  }

  /* Check for arbitration lost */
  if ((handle->config->arbitration_cbhandler != NULL) && (psr_status & (uint32_t)XMC_I2C_CH_STATUS_FLAG_ARBITRATION_LOST))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	69db      	ldr	r3, [r3, #28]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00c      	beq.n	8004f90 <I2C_MASTER_ProtocolHandler+0x5c>
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d007      	beq.n	8004f90 <I2C_MASTER_ProtocolHandler+0x5c>
  {
    I2C_MASTER_ClearFlag(handle,(uint32_t)XMC_I2C_CH_STATUS_FLAG_ARBITRATION_LOST);
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	2140      	movs	r1, #64	; 0x40
 8004f84:	f7ff fd10 	bl	80049a8 <I2C_MASTER_ClearFlag>
    handle->config->arbitration_cbhandler();
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	69db      	ldr	r3, [r3, #28]
 8004f8e:	4798      	blx	r3
  }

  /* Check for error detected */
  if ((handle->config->error_cbhandler != NULL) && (psr_status & ((uint32_t)XMC_I2C_CH_STATUS_FLAG_ERROR | (uint32_t)XMC_I2C_CH_STATUS_FLAG_WRONG_TDF_CODE_FOUND)))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	6a1b      	ldr	r3, [r3, #32]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00d      	beq.n	8004fb6 <I2C_MASTER_ProtocolHandler+0x82>
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f403 7381 	and.w	r3, r3, #258	; 0x102
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d008      	beq.n	8004fb6 <I2C_MASTER_ProtocolHandler+0x82>
  {
    I2C_MASTER_ClearFlag(handle,(uint32_t)XMC_I2C_CH_STATUS_FLAG_ERROR);
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004faa:	f7ff fcfd 	bl	80049a8 <I2C_MASTER_ClearFlag>
    handle->config->error_cbhandler();
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	6a1b      	ldr	r3, [r3, #32]
 8004fb4:	4798      	blx	r3
  }
}
 8004fb6:	3710      	adds	r7, #16
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <I2C_MASTER_lReconfigureRxFIFO>:
 *
 * @return void.
 */

static void I2C_MASTER_lReconfigureRxFIFO(const I2C_MASTER_t * const handle, uint32_t data_size)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b086      	sub	sp, #24
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
  uint32_t minfifo_value;
  uint8_t tx_fifo_size;
  uint8_t rx_fifo_size;
  uint8_t fifo_limit;

  rx_fifo_size = (uint8_t)((uint8_t)1 << handle->config->rxFIFO_size);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004fce:	461a      	mov	r2, r3
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	4093      	lsls	r3, r2
 8004fd4:	75bb      	strb	r3, [r7, #22]

  if ((handle->config->txFIFO_size > 0))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d008      	beq.n	8004ff4 <I2C_MASTER_lReconfigureRxFIFO+0x38>
  {
    tx_fifo_size = (uint8_t)((uint8_t)1 << handle->config->txFIFO_size);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004fea:	461a      	mov	r2, r3
 8004fec:	2301      	movs	r3, #1
 8004fee:	4093      	lsls	r3, r2
 8004ff0:	75fb      	strb	r3, [r7, #23]
 8004ff2:	e001      	b.n	8004ff8 <I2C_MASTER_lReconfigureRxFIFO+0x3c>
  }
  else
  {
    tx_fifo_size = 1U;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	75fb      	strb	r3, [r7, #23]
  }

  minfifo_value = (uint32_t)(calculate_minfifosize((uint32_t)tx_fifo_size, (uint32_t)rx_fifo_size));
 8004ff8:	7dfa      	ldrb	r2, [r7, #23]
 8004ffa:	7dbb      	ldrb	r3, [r7, #22]
 8004ffc:	4610      	mov	r0, r2
 8004ffe:	4619      	mov	r1, r3
 8005000:	f7ff fc94 	bl	800492c <calculate_minfifosize>
 8005004:	6138      	str	r0, [r7, #16]

  fifo_limit = (uint8_t)(calculate_minfifosize(data_size, minfifo_value));
 8005006:	6838      	ldr	r0, [r7, #0]
 8005008:	6939      	ldr	r1, [r7, #16]
 800500a:	f7ff fc8f 	bl	800492c <calculate_minfifosize>
 800500e:	4603      	mov	r3, r0
 8005010:	73fb      	strb	r3, [r7, #15]

  /* Set the limit value */
  I2C_MASTER_SetRXFIFOTriggerLimit((I2C_MASTER_t *)handle, handle->config->rxFIFO_size, ((uint32_t)fifo_limit - 1U));
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800501a:	461a      	mov	r2, r3
 800501c:	7bfb      	ldrb	r3, [r7, #15]
 800501e:	3b01      	subs	r3, #1
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	4611      	mov	r1, r2
 8005024:	461a      	mov	r2, r3
 8005026:	f7ff fbfd 	bl	8004824 <I2C_MASTER_SetRXFIFOTriggerLimit>
}
 800502a:	3718      	adds	r7, #24
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005030:	b480      	push	{r7}
 8005032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005034:	4b04      	ldr	r3, [pc, #16]	; (8005048 <__NVIC_GetPriorityGrouping+0x18>)
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800503c:	0a1b      	lsrs	r3, r3, #8
}
 800503e:	4618      	mov	r0, r3
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr
 8005048:	e000ed00 	.word	0xe000ed00

0800504c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	4603      	mov	r3, r0
 8005054:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800505a:	2b00      	cmp	r3, #0
 800505c:	db0b      	blt.n	8005076 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800505e:	4908      	ldr	r1, [pc, #32]	; (8005080 <__NVIC_EnableIRQ+0x34>)
 8005060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005064:	095b      	lsrs	r3, r3, #5
 8005066:	79fa      	ldrb	r2, [r7, #7]
 8005068:	f002 021f 	and.w	r2, r2, #31
 800506c:	2001      	movs	r0, #1
 800506e:	fa00 f202 	lsl.w	r2, r0, r2
 8005072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr
 8005080:	e000e100 	.word	0xe000e100

08005084 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
 800508a:	4603      	mov	r3, r0
 800508c:	6039      	str	r1, [r7, #0]
 800508e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005094:	2b00      	cmp	r3, #0
 8005096:	db0a      	blt.n	80050ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005098:	490d      	ldr	r1, [pc, #52]	; (80050d0 <__NVIC_SetPriority+0x4c>)
 800509a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800509e:	683a      	ldr	r2, [r7, #0]
 80050a0:	b2d2      	uxtb	r2, r2
 80050a2:	0092      	lsls	r2, r2, #2
 80050a4:	b2d2      	uxtb	r2, r2
 80050a6:	440b      	add	r3, r1
 80050a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80050ac:	e00a      	b.n	80050c4 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050ae:	4909      	ldr	r1, [pc, #36]	; (80050d4 <__NVIC_SetPriority+0x50>)
 80050b0:	79fb      	ldrb	r3, [r7, #7]
 80050b2:	f003 030f 	and.w	r3, r3, #15
 80050b6:	3b04      	subs	r3, #4
 80050b8:	683a      	ldr	r2, [r7, #0]
 80050ba:	b2d2      	uxtb	r2, r2
 80050bc:	0092      	lsls	r2, r2, #2
 80050be:	b2d2      	uxtb	r2, r2
 80050c0:	440b      	add	r3, r1
 80050c2:	761a      	strb	r2, [r3, #24]
  }
}
 80050c4:	370c      	adds	r7, #12
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	e000e100 	.word	0xe000e100
 80050d4:	e000ed00 	.word	0xe000ed00

080050d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050d8:	b480      	push	{r7}
 80050da:	b089      	sub	sp, #36	; 0x24
 80050dc:	af00      	add	r7, sp, #0
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f003 0307 	and.w	r3, r3, #7
 80050ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	f1c3 0307 	rsb	r3, r3, #7
 80050f2:	2b06      	cmp	r3, #6
 80050f4:	bf28      	it	cs
 80050f6:	2306      	movcs	r3, #6
 80050f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	3306      	adds	r3, #6
 80050fe:	2b06      	cmp	r3, #6
 8005100:	d902      	bls.n	8005108 <NVIC_EncodePriority+0x30>
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	3b01      	subs	r3, #1
 8005106:	e000      	b.n	800510a <NVIC_EncodePriority+0x32>
 8005108:	2300      	movs	r3, #0
 800510a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	2201      	movs	r2, #1
 8005110:	fa02 f303 	lsl.w	r3, r2, r3
 8005114:	1e5a      	subs	r2, r3, #1
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	401a      	ands	r2, r3
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	2101      	movs	r1, #1
 8005122:	fa01 f303 	lsl.w	r3, r1, r3
 8005126:	1e59      	subs	r1, r3, #1
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 800512c:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 800512e:	4618      	mov	r0, r3
 8005130:	3724      	adds	r7, #36	; 0x24
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop

0800513c <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	460b      	mov	r3, r1
 8005146:	70fb      	strb	r3, [r7, #3]
 8005148:	4613      	mov	r3, r2
 800514a:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 800514c:	78f8      	ldrb	r0, [r7, #3]
 800514e:	78fb      	ldrb	r3, [r7, #3]
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	3306      	adds	r3, #6
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	4413      	add	r3, r2
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	f023 0207 	bic.w	r2, r3, #7
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 800515e:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8005160:	431a      	orrs	r2, r3
 8005162:	6879      	ldr	r1, [r7, #4]
 8005164:	1d83      	adds	r3, r0, #6
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	440b      	add	r3, r1
 800516a:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 800516c:	370c      	adds	r7, #12
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr
 8005176:	bf00      	nop

08005178 <XMC_USIC_CH_TXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
  channel->TBCTR |= event;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	431a      	orrs	r2, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <XMC_USIC_CH_RXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
  channel->RBCTR |= event;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	431a      	orrs	r2, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <XMC_USIC_CH_SetMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	460b      	mov	r3, r1
 80051ca:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d0:	f023 020f 	bic.w	r2, r3, #15
 80051d4:	78fb      	ldrb	r3, [r7, #3]
 80051d6:	431a      	orrs	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	641a      	str	r2, [r3, #64]	; 0x40
}
 80051dc:	370c      	adds	r7, #12
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop

080051e8 <XMC_I2C_CH_Start>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_USIC_CH_SetMode()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_Start(XMC_USIC_CH_t *const channel)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_I2C);
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	2104      	movs	r1, #4
 80051f4:	f7ff ffe4 	bl	80051c0 <XMC_USIC_CH_SetMode>
}
 80051f8:	3708      	adds	r7, #8
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop

08005200 <I2C_MASTER_0_disable_io>:
  .baudrate = (uint32_t)(100000U),
  .address  = 0
};

static void I2C_MASTER_0_disable_io(void)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	af00      	add	r7, sp, #0
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)5, XMC_GPIO_MODE_INPUT_TRISTATE);
 8005204:	4805      	ldr	r0, [pc, #20]	; (800521c <I2C_MASTER_0_disable_io+0x1c>)
 8005206:	2105      	movs	r1, #5
 8005208:	2200      	movs	r2, #0
 800520a:	f7fc fb19 	bl	8001840 <XMC_GPIO_SetMode>
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)4, XMC_GPIO_MODE_INPUT_TRISTATE);
 800520e:	4803      	ldr	r0, [pc, #12]	; (800521c <I2C_MASTER_0_disable_io+0x1c>)
 8005210:	2104      	movs	r1, #4
 8005212:	2200      	movs	r2, #0
 8005214:	f7fc fb14 	bl	8001840 <XMC_GPIO_SetMode>
}
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	48028200 	.word	0x48028200

08005220 <I2C_MASTER_0_enable_io>:

static void I2C_MASTER_0_enable_io(void)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	af00      	add	r7, sp, #0
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)5, I2C_MASTER_0_sda_pin_config.mode);
 8005224:	23d0      	movs	r3, #208	; 0xd0
 8005226:	4806      	ldr	r0, [pc, #24]	; (8005240 <I2C_MASTER_0_enable_io+0x20>)
 8005228:	2105      	movs	r1, #5
 800522a:	461a      	mov	r2, r3
 800522c:	f7fc fb08 	bl	8001840 <XMC_GPIO_SetMode>
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)4, I2C_MASTER_0_scl_pin_config.mode);
 8005230:	23d0      	movs	r3, #208	; 0xd0
 8005232:	4803      	ldr	r0, [pc, #12]	; (8005240 <I2C_MASTER_0_enable_io+0x20>)
 8005234:	2104      	movs	r1, #4
 8005236:	461a      	mov	r2, r3
 8005238:	f7fc fb02 	bl	8001840 <XMC_GPIO_SetMode>
}
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	48028200 	.word	0x48028200

08005244 <I2C_MASTER_0_init>:
  .config = &I2C_MASTER_0_config,
  .runtime = &I2C_MASTER_0_runtime,
};

void I2C_MASTER_0_init(void)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b082      	sub	sp, #8
 8005248:	af00      	add	r7, sp, #0
 
  const uint32_t tx_fifo_events = (uint32_t)(0);
 800524a:	2300      	movs	r3, #0
 800524c:	607b      	str	r3, [r7, #4]
  const uint32_t rx_fifo_events = (uint32_t)(XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE | XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD);
 800524e:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8005252:	603b      	str	r3, [r7, #0]
  XMC_I2C_CH_Init(XMC_I2C0_CH1, &I2C_MASTER_0_channel_config);
 8005254:	4832      	ldr	r0, [pc, #200]	; (8005320 <I2C_MASTER_0_init+0xdc>)
 8005256:	4933      	ldr	r1, [pc, #204]	; (8005324 <I2C_MASTER_0_init+0xe0>)
 8005258:	f7fc fb74 	bl	8001944 <XMC_I2C_CH_Init>

  XMC_USIC_CH_SetInputSource(XMC_I2C0_CH1, XMC_USIC_CH_INPUT_DX0, 1);
 800525c:	4830      	ldr	r0, [pc, #192]	; (8005320 <I2C_MASTER_0_init+0xdc>)
 800525e:	2100      	movs	r1, #0
 8005260:	2201      	movs	r2, #1
 8005262:	f7ff ff6b 	bl	800513c <XMC_USIC_CH_SetInputSource>
  XMC_USIC_CH_SetInputSource(XMC_I2C0_CH1, XMC_USIC_CH_INPUT_DX1, 0);
 8005266:	482e      	ldr	r0, [pc, #184]	; (8005320 <I2C_MASTER_0_init+0xdc>)
 8005268:	2101      	movs	r1, #1
 800526a:	2200      	movs	r2, #0
 800526c:	f7ff ff66 	bl	800513c <XMC_USIC_CH_SetInputSource>

  /* configure i2c tx fifo */
  XMC_USIC_CH_TXFIFO_Configure(XMC_I2C0_CH1,
 8005270:	482b      	ldr	r0, [pc, #172]	; (8005320 <I2C_MASTER_0_init+0xdc>)
 8005272:	2110      	movs	r1, #16
 8005274:	2204      	movs	r2, #4
 8005276:	2301      	movs	r3, #1
 8005278:	f7fc fe16 	bl	8001ea8 <XMC_USIC_CH_TXFIFO_Configure>
                               16,
                               XMC_USIC_CH_FIFO_SIZE_16WORDS,
                               (uint32_t)1);
  XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_I2C0_CH1,
 800527c:	4828      	ldr	r0, [pc, #160]	; (8005320 <I2C_MASTER_0_init+0xdc>)
 800527e:	2110      	movs	r1, #16
 8005280:	2203      	movs	r2, #3
 8005282:	f7fc fea1 	bl	8001fc8 <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>
                                               XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
                                             ((uint32_t)3));
  XMC_USIC_CH_TXFIFO_EnableEvent(XMC_I2C0_CH1, tx_fifo_events);
 8005286:	4826      	ldr	r0, [pc, #152]	; (8005320 <I2C_MASTER_0_init+0xdc>)
 8005288:	6879      	ldr	r1, [r7, #4]
 800528a:	f7ff ff75 	bl	8005178 <XMC_USIC_CH_TXFIFO_EnableEvent>
  /* configure i2c rx fifo */
  XMC_USIC_CH_RXFIFO_Configure(XMC_I2C0_CH1,
 800528e:	4824      	ldr	r0, [pc, #144]	; (8005320 <I2C_MASTER_0_init+0xdc>)
 8005290:	2100      	movs	r1, #0
 8005292:	2204      	movs	r2, #4
 8005294:	230f      	movs	r3, #15
 8005296:	f7fc fe2f 	bl	8001ef8 <XMC_USIC_CH_RXFIFO_Configure>
                               0,
                               XMC_USIC_CH_FIFO_SIZE_16WORDS,
                                (uint32_t)(15));
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_I2C0_CH1,
 800529a:	4821      	ldr	r0, [pc, #132]	; (8005320 <I2C_MASTER_0_init+0xdc>)
 800529c:	2110      	movs	r1, #16
 800529e:	2205      	movs	r2, #5
 80052a0:	f7fc feb0 	bl	8002004 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
                                               XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
                                              ((uint32_t)0x5));
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_I2C0_CH1,
 80052a4:	481e      	ldr	r0, [pc, #120]	; (8005320 <I2C_MASTER_0_init+0xdc>)
 80052a6:	2113      	movs	r1, #19
 80052a8:	2205      	movs	r2, #5
 80052aa:	f7fc feab 	bl	8002004 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
                                               XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE,
                                              ((uint32_t)0x5));
  XMC_USIC_CH_RXFIFO_EnableEvent(XMC_I2C0_CH1, rx_fifo_events);
 80052ae:	481c      	ldr	r0, [pc, #112]	; (8005320 <I2C_MASTER_0_init+0xdc>)
 80052b0:	6839      	ldr	r1, [r7, #0]
 80052b2:	f7ff ff73 	bl	800519c <XMC_USIC_CH_RXFIFO_EnableEvent>
  XMC_USIC_CH_SetInterruptNodePointer(XMC_I2C0_CH1,
 80052b6:	481a      	ldr	r0, [pc, #104]	; (8005320 <I2C_MASTER_0_init+0xdc>)
 80052b8:	2110      	movs	r1, #16
 80052ba:	2200      	movs	r2, #0
 80052bc:	f7fc fe68 	bl	8001f90 <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
                                       ((uint32_t)0));
  XMC_I2C_CH_Start(XMC_I2C0_CH1);
 80052c0:	4817      	ldr	r0, [pc, #92]	; (8005320 <I2C_MASTER_0_init+0xdc>)
 80052c2:	f7ff ff91 	bl	80051e8 <XMC_I2C_CH_Start>

  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)5, &I2C_MASTER_0_sda_pin_config);
 80052c6:	4818      	ldr	r0, [pc, #96]	; (8005328 <I2C_MASTER_0_init+0xe4>)
 80052c8:	2105      	movs	r1, #5
 80052ca:	4a18      	ldr	r2, [pc, #96]	; (800532c <I2C_MASTER_0_init+0xe8>)
 80052cc:	f7fb f86a 	bl	80003a4 <XMC_GPIO_Init>
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)4, &I2C_MASTER_0_scl_pin_config);
 80052d0:	4815      	ldr	r0, [pc, #84]	; (8005328 <I2C_MASTER_0_init+0xe4>)
 80052d2:	2104      	movs	r1, #4
 80052d4:	4a16      	ldr	r2, [pc, #88]	; (8005330 <I2C_MASTER_0_init+0xec>)
 80052d6:	f7fb f865 	bl	80003a4 <XMC_GPIO_Init>
/* Tx interrupt priority settings */
  NVIC_SetPriority((IRQn_Type)87, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),63,0));
 80052da:	f7ff fea9 	bl	8005030 <__NVIC_GetPriorityGrouping>
 80052de:	4603      	mov	r3, r0
 80052e0:	4618      	mov	r0, r3
 80052e2:	213f      	movs	r1, #63	; 0x3f
 80052e4:	2200      	movs	r2, #0
 80052e6:	f7ff fef7 	bl	80050d8 <NVIC_EncodePriority>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2057      	movs	r0, #87	; 0x57
 80052ee:	4619      	mov	r1, r3
 80052f0:	f7ff fec8 	bl	8005084 <__NVIC_SetPriority>
  NVIC_EnableIRQ((IRQn_Type)87);/* Rx interrupt priority settings */
 80052f4:	2057      	movs	r0, #87	; 0x57
 80052f6:	f7ff fea9 	bl	800504c <__NVIC_EnableIRQ>
  NVIC_SetPriority((IRQn_Type)89, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),63,0));
 80052fa:	f7ff fe99 	bl	8005030 <__NVIC_GetPriorityGrouping>
 80052fe:	4603      	mov	r3, r0
 8005300:	4618      	mov	r0, r3
 8005302:	213f      	movs	r1, #63	; 0x3f
 8005304:	2200      	movs	r2, #0
 8005306:	f7ff fee7 	bl	80050d8 <NVIC_EncodePriority>
 800530a:	4603      	mov	r3, r0
 800530c:	2059      	movs	r0, #89	; 0x59
 800530e:	4619      	mov	r1, r3
 8005310:	f7ff feb8 	bl	8005084 <__NVIC_SetPriority>
  NVIC_EnableIRQ((IRQn_Type)89);}
 8005314:	2059      	movs	r0, #89	; 0x59
 8005316:	f7ff fe99 	bl	800504c <__NVIC_EnableIRQ>
 800531a:	3708      	adds	r7, #8
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}
 8005320:	40030200 	.word	0x40030200
 8005324:	0800a664 	.word	0x0800a664
 8005328:	48028200 	.word	0x48028200
 800532c:	0800a64c 	.word	0x0800a64c
 8005330:	0800a658 	.word	0x0800a658

08005334 <USIC0_3_IRQHandler>:
/*Transmit ISR*/
void I2C_MASTER_0_TX_HANDLER()
{
 8005334:	b580      	push	{r7, lr}
 8005336:	af00      	add	r7, sp, #0
  I2C_MASTER_TransmitHandler(&I2C_MASTER_0);
 8005338:	4801      	ldr	r0, [pc, #4]	; (8005340 <USIC0_3_IRQHandler+0xc>)
 800533a:	f7ff fb43 	bl	80049c4 <I2C_MASTER_TransmitHandler>
}
 800533e:	bd80      	pop	{r7, pc}
 8005340:	1fffce60 	.word	0x1fffce60

08005344 <USIC0_5_IRQHandler>:
/*Receive ISR*/
void I2C_MASTER_0_RX_HANDLER()
{
 8005344:	b580      	push	{r7, lr}
 8005346:	af00      	add	r7, sp, #0
  I2C_MASTER_ReceiveHandler(&I2C_MASTER_0);
 8005348:	4801      	ldr	r0, [pc, #4]	; (8005350 <USIC0_5_IRQHandler+0xc>)
 800534a:	f7ff fc97 	bl	8004c7c <I2C_MASTER_ReceiveHandler>
}
 800534e:	bd80      	pop	{r7, pc}
 8005350:	1fffce60 	.word	0x1fffce60

08005354 <XMC_CCU8_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_Init()<BR>  XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPrescaler()<BR> 
 *  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU8_GIDLC_SPRB_Msk;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	60da      	str	r2, [r3, #12]
}
 8005368:	370c      	adds	r7, #12
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop

08005374 <GLOBAL_CCU8_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU8_STATUS_t GLOBAL_CCU8_Init(GLOBAL_CCU8_t* handle)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU8_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	7b5b      	ldrb	r3, [r3, #13]
 8005380:	f083 0301 	eor.w	r3, r3, #1
 8005384:	b2db      	uxtb	r3, r3
 8005386:	2b00      	cmp	r3, #0
 8005388:	d00f      	beq.n	80053aa <GLOBAL_CCU8_Init+0x36>
  {
    /* Enable CCU8 module */
    XMC_CCU8_Init(handle->module_ptr,handle->mcs_action);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	689a      	ldr	r2, [r3, #8]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	7b1b      	ldrb	r3, [r3, #12]
 8005392:	4610      	mov	r0, r2
 8005394:	4619      	mov	r1, r3
 8005396:	f7fc f883 	bl	80014a0 <XMC_CCU8_Init>
    /* Start the prescaler */
    XMC_CCU8_StartPrescaler(handle->module_ptr);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	4618      	mov	r0, r3
 80053a0:	f7ff ffd8 	bl	8005354 <XMC_CCU8_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU8_STATUS_SUCCESS);
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3708      	adds	r7, #8
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	60da      	str	r2, [r3, #12]
}
 80053c8:	370c      	adds	r7, #12
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop

080053d4 <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	7b5b      	ldrb	r3, [r3, #13]
 80053e0:	f083 0301 	eor.w	r3, r3, #1
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d00f      	beq.n	800540a <GLOBAL_CCU4_Init+0x36>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	689a      	ldr	r2, [r3, #8]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	7b1b      	ldrb	r3, [r3, #12]
 80053f2:	4610      	mov	r0, r2
 80053f4:	4619      	mov	r1, r3
 80053f6:	f7fb fd07 	bl	8000e08 <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	4618      	mov	r0, r3
 8005400:	f7ff ffd8 	bl	80053b4 <XMC_CCU4_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
 800540a:	2300      	movs	r3, #0
}
 800540c:	4618      	mov	r0, r3
 800540e:	3708      	adds	r7, #8
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <XMC_VADC_GLOBAL_DisablePostCalibration>:
 * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
 * None
 */

__STATIC_INLINE void XMC_VADC_GLOBAL_DisablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, uint32_t group_number)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GLOBAL_DisablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_number));
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	3310      	adds	r3, #16
 8005428:	4619      	mov	r1, r3
 800542a:	2301      	movs	r3, #1
 800542c:	408b      	lsls	r3, r1
 800542e:	431a      	orrs	r2, r3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8005436:	370c      	adds	r7, #12
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <GLOBAL_ADC_Init>:
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/**
 * This function initializes all instances of the ADC Global APP and low level app.
 */
GLOBAL_ADC_STATUS_t GLOBAL_ADC_Init(GLOBAL_ADC_t *const handle_ptr)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_ADC_Init:Invalid handle_ptr", (handle_ptr != NULL))
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  uint32_t group_index;
#endif

  if (GLOBAL_ADC_UNINITIALIZED == handle_ptr->init_state)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	7e1b      	ldrb	r3, [r3, #24]
 800544c:	2b02      	cmp	r3, #2
 800544e:	d149      	bne.n	80054e4 <GLOBAL_ADC_Init+0xa4>
  {  
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	695a      	ldr	r2, [r3, #20]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	691b      	ldr	r3, [r3, #16]
 8005458:	4610      	mov	r0, r2
 800545a:	4619      	mov	r1, r3
 800545c:	f7fc fe80 	bl	8002160 <XMC_VADC_GLOBAL_Init>

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 8005460:	2300      	movs	r3, #0
 8005462:	60fb      	str	r3, [r7, #12]
 8005464:	e02f      	b.n	80054c6 <GLOBAL_ADC_Init+0x86>
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800546e:	6819      	ldr	r1, [r3, #0]
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	4608      	mov	r0, r1
 800547c:	4619      	mov	r1, r3
 800547e:	f7fc ff11 	bl	80022a4 <XMC_VADC_GROUP_Init>
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);

      /* Switch on the converter of the Group[group_index]*/
      XMC_VADC_GROUP_SetPowerMode(handle_ptr->group_ptrs_array[group_index]->group_handle,
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4618      	mov	r0, r3
 800548e:	2103      	movs	r1, #3
 8005490:	f7fc ff98 	bl	80023c4 <XMC_VADC_GROUP_SetPowerMode>
                                  XMC_VADC_GROUP_POWERMODE_NORMAL);

      /* Disable the post calibration option for the respective group*/
      if ((bool)false == handle_ptr->group_ptrs_array[group_index]->post_calibration)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	68fa      	ldr	r2, [r7, #12]
 8005498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800549c:	7a1b      	ldrb	r3, [r3, #8]
 800549e:	f083 0301 	eor.w	r3, r3, #1
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d005      	beq.n	80054b4 <GLOBAL_ADC_Init+0x74>
      {
        XMC_VADC_GLOBAL_DisablePostCalibration(handle_ptr->module_ptr,group_index);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	695b      	ldr	r3, [r3, #20]
 80054ac:	4618      	mov	r0, r3
 80054ae:	68f9      	ldr	r1, [r7, #12]
 80054b0:	f7ff ffb0 	bl	8005414 <XMC_VADC_GLOBAL_DisablePostCalibration>

#if(XMC_VADC_SHS_AVAILABLE == 1U)
      XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(handle_ptr->global_shs_ptr, (XMC_VADC_GROUP_INDEX_t)group_index);
#endif

      handle_ptr->group_ptrs_array[group_index]->state = GLOBAL_ADC_SUCCESS;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054bc:	2200      	movs	r2, #0
 80054be:	725a      	strb	r2, [r3, #9]
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	3301      	adds	r3, #1
 80054c4:	60fb      	str	r3, [r7, #12]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2b03      	cmp	r3, #3
 80054ca:	d9cc      	bls.n	8005466 <GLOBAL_ADC_Init+0x26>
#endif
#endif /* _XMC_VADC_GROUP_AVAILABLE_ */
#if(XMC_VADC_SHS_AVAILABLE == 1U)
    XMC_VADC_GLOBAL_SHS_SetAnalogReference(handle_ptr->global_shs_ptr, GLOBAL_ADC_AREF_VALUE);
#endif
    if((bool)true == handle_ptr->enable_startup_calibration)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	7e5b      	ldrb	r3, [r3, #25]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d004      	beq.n	80054de <GLOBAL_ADC_Init+0x9e>
    {
    	XMC_VADC_GLOBAL_StartupCalibration(handle_ptr->module_ptr);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	695b      	ldr	r3, [r3, #20]
 80054d8:	4618      	mov	r0, r3
 80054da:	f7fc fe8f 	bl	80021fc <XMC_VADC_GLOBAL_StartupCalibration>
    }
    handle_ptr->init_state = GLOBAL_ADC_SUCCESS;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	761a      	strb	r2, [r3, #24]
  }
  return (handle_ptr->init_state);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	7e1b      	ldrb	r3, [r3, #24]
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3710      	adds	r7, #16
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b082      	sub	sp, #8
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6819      	ldr	r1, [r3, #0]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	7c1a      	ldrb	r2, [r3, #16]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	3304      	adds	r3, #4
 8005504:	4608      	mov	r0, r1
 8005506:	4611      	mov	r1, r2
 8005508:	461a      	mov	r2, r3
 800550a:	f7fa ff4b 	bl	80003a4 <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6819      	ldr	r1, [r3, #0]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	7c1a      	ldrb	r2, [r3, #16]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	7c5b      	ldrb	r3, [r3, #17]
 800551a:	4608      	mov	r0, r1
 800551c:	4611      	mov	r1, r2
 800551e:	461a      	mov	r2, r3
 8005520:	f7fc f9ce 	bl	80018c0 <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3708      	adds	r7, #8
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop

08005530 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005530:	b480      	push	{r7}
 8005532:	b085      	sub	sp, #20
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f003 0307 	and.w	r3, r3, #7
 800553e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005540:	4b0c      	ldr	r3, [pc, #48]	; (8005574 <__NVIC_SetPriorityGrouping+0x44>)
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005546:	68ba      	ldr	r2, [r7, #8]
 8005548:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800554c:	4013      	ands	r3, r2
 800554e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8005558:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800555c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005560:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8005562:	4a04      	ldr	r2, [pc, #16]	; (8005574 <__NVIC_SetPriorityGrouping+0x44>)
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	60d3      	str	r3, [r2, #12]
}
 8005568:	3714      	adds	r7, #20
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	e000ed00 	.word	0xe000ed00

08005578 <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 800557e:	2001      	movs	r0, #1
 8005580:	f7ff ffd6 	bl	8005530 <__NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005584:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 8005586:	4b21      	ldr	r3, [pc, #132]	; (800560c <SystemCoreSetup+0x94>)
 8005588:	4a21      	ldr	r2, [pc, #132]	; (8005610 <SystemCoreSetup+0x98>)
 800558a:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800558c:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8005590:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8005592:	4a1e      	ldr	r2, [pc, #120]	; (800560c <SystemCoreSetup+0x94>)
 8005594:	4b1d      	ldr	r3, [pc, #116]	; (800560c <SystemCoreSetup+0x94>)
 8005596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800559a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800559e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 80055a2:	4b1c      	ldr	r3, [pc, #112]	; (8005614 <SystemCoreSetup+0x9c>)
 80055a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055a8:	3314      	adds	r3, #20
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f023 030f 	bic.w	r3, r3, #15
 80055b4:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f043 0303 	orr.w	r3, r3, #3
 80055bc:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 80055be:	4b15      	ldr	r3, [pc, #84]	; (8005614 <SystemCoreSetup+0x9c>)
 80055c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055c4:	3314      	adds	r3, #20
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	601a      	str	r2, [r3, #0]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 80055ca:	4a10      	ldr	r2, [pc, #64]	; (800560c <SystemCoreSetup+0x94>)
 80055cc:	4b0f      	ldr	r3, [pc, #60]	; (800560c <SystemCoreSetup+0x94>)
 80055ce:	695b      	ldr	r3, [r3, #20]
 80055d0:	f023 0310 	bic.w	r3, r3, #16
 80055d4:	6153      	str	r3, [r2, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 80055d6:	4a0d      	ldr	r2, [pc, #52]	; (800560c <SystemCoreSetup+0x94>)
 80055d8:	4b0c      	ldr	r3, [pc, #48]	; (800560c <SystemCoreSetup+0x94>)
 80055da:	695b      	ldr	r3, [r3, #20]
 80055dc:	f023 0308 	bic.w	r3, r3, #8
 80055e0:	6153      	str	r3, [r2, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80055e2:	4a0a      	ldr	r2, [pc, #40]	; (800560c <SystemCoreSetup+0x94>)
 80055e4:	4b09      	ldr	r3, [pc, #36]	; (800560c <SystemCoreSetup+0x94>)
 80055e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055ec:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 80055ee:	4a07      	ldr	r2, [pc, #28]	; (800560c <SystemCoreSetup+0x94>)
 80055f0:	4b06      	ldr	r3, [pc, #24]	; (800560c <SystemCoreSetup+0x94>)
 80055f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80055f8:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 80055fa:	4a04      	ldr	r2, [pc, #16]	; (800560c <SystemCoreSetup+0x94>)
 80055fc:	4b03      	ldr	r3, [pc, #12]	; (800560c <SystemCoreSetup+0x94>)
 80055fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005600:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005604:	6253      	str	r3, [r2, #36]	; 0x24
}
 8005606:	3708      	adds	r7, #8
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}
 800560c:	e000ed00 	.word	0xe000ed00
 8005610:	08000000 	.word	0x08000000
 8005614:	58001000 	.word	0x58001000

08005618 <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 8005618:	b480      	push	{r7}
 800561a:	b085      	sub	sp, #20
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 8005620:	2300      	movs	r3, #0
 8005622:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	701a      	strb	r2, [r3, #0]

  return (status);
 800562a:	7bfb      	ldrb	r3, [r7, #15]
}
 800562c:	4618      	mov	r0, r3
 800562e:	3714      	adds	r7, #20
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 8005638:	b480      	push	{r7}
 800563a:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 800563c:	4b02      	ldr	r3, [pc, #8]	; (8005648 <OSCHP_GetFrequency+0x10>)
}
 800563e:	4618      	mov	r0, r3
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr
 8005648:	00b71b00 	.word	0x00b71b00

0800564c <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 800564c:	b5b0      	push	{r4, r5, r7, lr}
 800564e:	b086      	sub	sp, #24
 8005650:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 8005652:	4b10      	ldr	r3, [pc, #64]	; (8005694 <SystemCoreClockSetup+0x48>)
 8005654:	1d3c      	adds	r4, r7, #4
 8005656:	461d      	mov	r5, r3
 8005658:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800565a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800565c:	682b      	ldr	r3, [r5, #0]
 800565e:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 8005660:	1d3b      	adds	r3, r7, #4
 8005662:	4618      	mov	r0, r3
 8005664:	f7fa ff7e 	bl	8000564 <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 8005668:	2000      	movs	r0, #0
 800566a:	f7fb f879 	bl	8000760 <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 800566e:	2000      	movs	r0, #0
 8005670:	f7fb f82e 	bl	80006d0 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(4U);
 8005674:	2004      	movs	r0, #4
 8005676:	f7fb f8ff 	bl	8000878 <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_StartUsbPll(1U, 32U);
 800567a:	2001      	movs	r0, #1
 800567c:	2120      	movs	r1, #32
 800567e:	f7fb f94f 	bl	8000920 <XMC_SCU_CLOCK_StartUsbPll>

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 8005682:	2000      	movs	r0, #0
 8005684:	f7fb f838 	bl	80006f8 <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 8005688:	2001      	movs	r0, #1
 800568a:	f7fb f909 	bl	80008a0 <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

}
 800568e:	3718      	adds	r7, #24
 8005690:	46bd      	mov	sp, r7
 8005692:	bdb0      	pop	{r4, r5, r7, pc}
 8005694:	0800a958 	.word	0x0800a958

08005698 <CCU8_SLICE_CONFIG_Init>:

  return (version);
}
/* This function initializes the CCU8 slice */
CCU8_SLICE_CONFIG_STATUS_t CCU8_SLICE_CONFIG_Init(const CCU8_SLICE_CONFIG_t *const handle_ptr)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b082      	sub	sp, #8
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  return handle_ptr->init();
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4798      	blx	r3
 80056a6:	4603      	mov	r3, r0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3708      	adds	r7, #8
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <XMC_CCU8_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_DisableClock()<BR>  XMC_CCU8_EnableMultipleClocks()<BR>  XMC_CCU8_StartPrescaler()<BR>  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_EnableClock(XMC_CCU8_MODULE_t *const module, const uint8_t slice_number)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	460b      	mov	r3, r1
 80056ba:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1 << slice_number);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	68da      	ldr	r2, [r3, #12]
 80056c0:	78fb      	ldrb	r3, [r7, #3]
 80056c2:	2101      	movs	r1, #1
 80056c4:	fa01 f303 	lsl.w	r3, r1, r3
 80056c8:	431a      	orrs	r2, r3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	60da      	str	r2, [r3, #12]
}
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <XMC_CCU8_SLICE_SetTimerCompareMatchChannel1>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_EnableShadowTransfer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_SetTimerCompareMatchChannel1(XMC_CCU8_SLICE_t *const slice, const uint16_t compare_val)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	460b      	mov	r3, r1
 80056e2:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatchChannel1:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->CR1S = (uint32_t) compare_val;
 80056e4:	887a      	ldrh	r2, [r7, #2]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <XMC_CCU8_SLICE_SetTimerCompareMatchChannel2>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_EnableShadowTransfer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_SetTimerCompareMatchChannel2(XMC_CCU8_SLICE_t *const slice, const uint16_t compare_val)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	460b      	mov	r3, r1
 80056fe:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatchChannel2:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->CR2S = (uint32_t) compare_val;
 8005700:	887a      	ldrh	r2, [r7, #2]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	645a      	str	r2, [r3, #68]	; 0x44
}
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <XMC_CCU8_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU8_EnableShadowTransfer(XMC_CCU8_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_EnableShadowTransfer:Invalid module Pointer", XMC_CCU8_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	683a      	ldr	r2, [r7, #0]
 800571e:	611a      	str	r2, [r3, #16]
}
 8005720:	370c      	adds	r7, #12
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop

0800572c <XMC_CCU8_SLICE_SetTimerValue>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_GetTimerValue().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_SetTimerValue(XMC_CCU8_SLICE_t *const slice, const uint16_t timer_val)
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	460b      	mov	r3, r1
 8005736:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerValue:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TIMER = (uint32_t) timer_val;
 8005738:	887a      	ldrh	r2, [r7, #2]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	671a      	str	r2, [r3, #112]	; 0x70
}
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <XMC_CCU8_SLICE_DisableCascadedShadowTransfer>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_EnableCascadedShadowTransfer()<BR>.
 * @note Not available for XMC4500 series 
 */
__STATIC_INLINE void XMC_CCU8_SLICE_DisableCascadedShadowTransfer(XMC_CCU8_SLICE_t *const slice)
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_DisableCascadedShadowTransfer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->STC &= ~(uint32_t) CCU8_CC8_STC_CSE_Msk;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005756:	f023 0201 	bic.w	r2, r3, #1
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 8005760:	370c      	adds	r7, #12
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
 800576a:	bf00      	nop

0800576c <CCU8_SLICE_CONFIG_0_lInit>:
  .level               = XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH,
  .duration            = XMC_CCU8_SLICE_EVENT_FILTER_DISABLED                               
 };
            /* Channel initialization function */
CCU8_SLICE_CONFIG_STATUS_t CCU8_SLICE_CONFIG_0_lInit(void)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	af00      	add	r7, sp, #0
 	
  (void)GLOBAL_CCU8_Init(&GLOBAL_CCU8_0);
 8005770:	4820      	ldr	r0, [pc, #128]	; (80057f4 <CCU8_SLICE_CONFIG_0_lInit+0x88>)
 8005772:	f7ff fdff 	bl	8005374 <GLOBAL_CCU8_Init>
   
  /* Configure CCU8x_CC8y slice as timer unit*/
  XMC_CCU8_SLICE_CompareInit(CCU80_CC83, &CCU8_SLICE_CONFIG_0_compare_config);
 8005776:	4820      	ldr	r0, [pc, #128]	; (80057f8 <CCU8_SLICE_CONFIG_0_lInit+0x8c>)
 8005778:	4920      	ldr	r1, [pc, #128]	; (80057fc <CCU8_SLICE_CONFIG_0_lInit+0x90>)
 800577a:	f7fb feaf 	bl	80014dc <XMC_CCU8_SLICE_CompareInit>
  /* Set timer compare register value */
  XMC_CCU8_SLICE_SetTimerCompareMatchChannel1(CCU80_CC83, (uint16_t)32768U); 
 800577e:	481e      	ldr	r0, [pc, #120]	; (80057f8 <CCU8_SLICE_CONFIG_0_lInit+0x8c>)
 8005780:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005784:	f7ff ffa8 	bl	80056d8 <XMC_CCU8_SLICE_SetTimerCompareMatchChannel1>
  XMC_CCU8_SLICE_SetTimerCompareMatchChannel2(CCU80_CC83, (uint16_t)32768U); 
 8005788:	481b      	ldr	r0, [pc, #108]	; (80057f8 <CCU8_SLICE_CONFIG_0_lInit+0x8c>)
 800578a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800578e:	f7ff ffb1 	bl	80056f4 <XMC_CCU8_SLICE_SetTimerCompareMatchChannel2>
  /* Set timer period register value */
  XMC_CCU8_SLICE_SetTimerPeriodMatch(CCU80_CC83, (uint16_t)65535U);	
 8005792:	4819      	ldr	r0, [pc, #100]	; (80057f8 <CCU8_SLICE_CONFIG_0_lInit+0x8c>)
 8005794:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005798:	f7fb fffe 	bl	8001798 <XMC_CCU8_SLICE_SetTimerPeriodMatch>
	  
  
  
  /* Register value update settings */
  
  XMC_CCU8_SetMultiChannelShadowTransferMode(CCU80, XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE3);
 800579c:	4818      	ldr	r0, [pc, #96]	; (8005800 <CCU8_SLICE_CONFIG_0_lInit+0x94>)
 800579e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 80057a2:	f7fb fef1 	bl	8001588 <XMC_CCU8_SetMultiChannelShadowTransferMode>
			   
  
  XMC_CCU8_SLICE_DisableCascadedShadowTransfer(CCU80_CC83);
 80057a6:	4814      	ldr	r0, [pc, #80]	; (80057f8 <CCU8_SLICE_CONFIG_0_lInit+0x8c>)
 80057a8:	f7ff ffce 	bl	8005748 <XMC_CCU8_SLICE_DisableCascadedShadowTransfer>
		
  
  
  
  /* Transfer value from shadow registers to actual timer registers */
  XMC_CCU8_EnableShadowTransfer(CCU80, XMC_CCU8_SHADOW_TRANSFER_SLICE_3 |
 80057ac:	4814      	ldr	r0, [pc, #80]	; (8005800 <CCU8_SLICE_CONFIG_0_lInit+0x94>)
 80057ae:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 80057b2:	f7ff ffad 	bl	8005710 <XMC_CCU8_EnableShadowTransfer>
                                               XMC_CCU8_SHADOW_TRANSFER_DITHER_SLICE_3 |
                                               XMC_CCU8_SHADOW_TRANSFER_PRESCALER_SLICE_3);
  /* Events and function settings */
  
  XMC_CCU8_SLICE_ConfigureEvent(CCU80_CC83, XMC_CCU8_SLICE_EVENT_0, &CCU8_SLICE_CONFIG_0_event0_config);
 80057b6:	4810      	ldr	r0, [pc, #64]	; (80057f8 <CCU8_SLICE_CONFIG_0_lInit+0x8c>)
 80057b8:	2101      	movs	r1, #1
 80057ba:	4a12      	ldr	r2, [pc, #72]	; (8005804 <CCU8_SLICE_CONFIG_0_lInit+0x98>)
 80057bc:	f7fb ff82 	bl	80016c4 <XMC_CCU8_SLICE_ConfigureEvent>
		
  XMC_CCU8_SLICE_ConfigureEvent(CCU80_CC83, XMC_CCU8_SLICE_EVENT_1, &CCU8_SLICE_CONFIG_0_event1_config);
 80057c0:	480d      	ldr	r0, [pc, #52]	; (80057f8 <CCU8_SLICE_CONFIG_0_lInit+0x8c>)
 80057c2:	2102      	movs	r1, #2
 80057c4:	4a10      	ldr	r2, [pc, #64]	; (8005808 <CCU8_SLICE_CONFIG_0_lInit+0x9c>)
 80057c6:	f7fb ff7d 	bl	80016c4 <XMC_CCU8_SLICE_ConfigureEvent>
		
  XMC_CCU8_SLICE_ConfigureEvent(CCU80_CC83, XMC_CCU8_SLICE_EVENT_2, &CCU8_SLICE_CONFIG_0_event2_config);
 80057ca:	480b      	ldr	r0, [pc, #44]	; (80057f8 <CCU8_SLICE_CONFIG_0_lInit+0x8c>)
 80057cc:	2103      	movs	r1, #3
 80057ce:	4a0f      	ldr	r2, [pc, #60]	; (800580c <CCU8_SLICE_CONFIG_0_lInit+0xa0>)
 80057d0:	f7fb ff78 	bl	80016c4 <XMC_CCU8_SLICE_ConfigureEvent>
		
  
  
  
  
  XMC_CCU8_SLICE_DirectionConfig(CCU80_CC83, XMC_CCU8_SLICE_EVENT_2);
 80057d4:	4808      	ldr	r0, [pc, #32]	; (80057f8 <CCU8_SLICE_CONFIG_0_lInit+0x8c>)
 80057d6:	2103      	movs	r1, #3
 80057d8:	f7fb ff20 	bl	800161c <XMC_CCU8_SLICE_DirectionConfig>
  
  
  
			
  /* clear IDLE mode for the slice*/
  XMC_CCU8_EnableClock(CCU80, 3);	
 80057dc:	4808      	ldr	r0, [pc, #32]	; (8005800 <CCU8_SLICE_CONFIG_0_lInit+0x94>)
 80057de:	2103      	movs	r1, #3
 80057e0:	f7ff ff66 	bl	80056b0 <XMC_CCU8_EnableClock>
  /* Set initial value of timer */
  XMC_CCU8_SLICE_SetTimerValue(CCU80_CC83, (uint16_t)0U);
 80057e4:	4804      	ldr	r0, [pc, #16]	; (80057f8 <CCU8_SLICE_CONFIG_0_lInit+0x8c>)
 80057e6:	2100      	movs	r1, #0
 80057e8:	f7ff ffa0 	bl	800572c <XMC_CCU8_SLICE_SetTimerValue>
	
  
  
  return CCU8_SLICE_CONFIG_STATUS_SUCCESS;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	1fffce6c 	.word	0x1fffce6c
 80057f8:	40020400 	.word	0x40020400
 80057fc:	0800a97c 	.word	0x0800a97c
 8005800:	40020000 	.word	0x40020000
 8005804:	0800a98c 	.word	0x0800a98c
 8005808:	0800a990 	.word	0x0800a990
 800580c:	0800a994 	.word	0x0800a994

08005810 <CCU4_SLICE_CONFIG_Init>:
  return (version);
}

/* API to initialize the CCU4 slice */
CCU4_SLICE_CONFIG_STATUS_t CCU4_SLICE_CONFIG_Init(const CCU4_SLICE_CONFIG_t *const handle_ptr)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  return handle_ptr->init();
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4798      	blx	r3
 800581e:	4603      	mov	r3, r0
}
 8005820:	4618      	mov	r0, r3
 8005822:	3708      	adds	r7, #8
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	460b      	mov	r3, r1
 8005832:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1) << slice_number;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	68da      	ldr	r2, [r3, #12]
 8005838:	78fb      	ldrb	r3, [r7, #3]
 800583a:	2101      	movs	r1, #1
 800583c:	fa01 f303 	lsl.w	r3, r1, r3
 8005840:	431a      	orrs	r2, r3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	60da      	str	r2, [r3, #12]
}
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	460b      	mov	r3, r1
 800585a:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 800585c:	887a      	ldrh	r2, [r7, #2]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	635a      	str	r2, [r3, #52]	; 0x34
}
 8005862:	370c      	adds	r7, #12
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	460b      	mov	r3, r1
 8005876:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 8005878:	887a      	ldrh	r2, [r7, #2]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800587e:	370c      	adds	r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	683a      	ldr	r2, [r7, #0]
 8005896:	611a      	str	r2, [r3, #16]
}
 8005898:	370c      	adds	r7, #12
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr
 80058a2:	bf00      	nop

080058a4 <XMC_CCU4_SLICE_SetTimerValue>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerValue().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerValue(XMC_CCU4_SLICE_t *const slice, const uint16_t timer_val)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	460b      	mov	r3, r1
 80058ae:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerValue:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TIMER = (uint32_t) timer_val;
 80058b0:	887a      	ldrh	r2, [r7, #2]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	671a      	str	r2, [r3, #112]	; 0x70
}
 80058b6:	370c      	adds	r7, #12
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <CCU4_SLICE_CONFIG_0_lInit>:
  .level               = XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH,
  .duration            = XMC_CCU4_SLICE_EVENT_FILTER_DISABLED                               
 };
            /* Channel initialization function */
CCU4_SLICE_CONFIG_STATUS_t CCU4_SLICE_CONFIG_0_lInit(void)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	af00      	add	r7, sp, #0
  GLOBAL_CCU4_Init(&GLOBAL_CCU4_2);
 80058c4:	481a      	ldr	r0, [pc, #104]	; (8005930 <CCU4_SLICE_CONFIG_0_lInit+0x70>)
 80058c6:	f7ff fd85 	bl	80053d4 <GLOBAL_CCU4_Init>
  /* Configure CCU4x_CC4y slice as timer unit */
  XMC_CCU4_SLICE_CompareInit(CCU43_CC43, &CCU4_SLICE_CONFIG_0_compare_config);
 80058ca:	481a      	ldr	r0, [pc, #104]	; (8005934 <CCU4_SLICE_CONFIG_0_lInit+0x74>)
 80058cc:	491a      	ldr	r1, [pc, #104]	; (8005938 <CCU4_SLICE_CONFIG_0_lInit+0x78>)
 80058ce:	f7fb fad5 	bl	8000e7c <XMC_CCU4_SLICE_CompareInit>
  /* Set timer compare register value */
  XMC_CCU4_SLICE_SetTimerCompareMatch(CCU43_CC43, (uint16_t)32768U);
 80058d2:	4818      	ldr	r0, [pc, #96]	; (8005934 <CCU4_SLICE_CONFIG_0_lInit+0x74>)
 80058d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80058d8:	f7ff ffc8 	bl	800586c <XMC_CCU4_SLICE_SetTimerCompareMatch>
  /* Set timer period register value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(CCU43_CC43, (uint16_t)65535U);	
 80058dc:	4815      	ldr	r0, [pc, #84]	; (8005934 <CCU4_SLICE_CONFIG_0_lInit+0x74>)
 80058de:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80058e2:	f7ff ffb5 	bl	8005850 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
  /* Register value update settings */
  XMC_CCU4_SetMultiChannelShadowTransferMode(CCU43, (uint32_t)XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE3);
 80058e6:	4815      	ldr	r0, [pc, #84]	; (800593c <CCU4_SLICE_CONFIG_0_lInit+0x7c>)
 80058e8:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 80058ec:	f7fb faaa 	bl	8000e44 <XMC_CCU4_SetMultiChannelShadowTransferMode>
  /* Transfer value from shadow registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(CCU43, (uint32_t)XMC_CCU4_SHADOW_TRANSFER_SLICE_3 |
 80058f0:	4812      	ldr	r0, [pc, #72]	; (800593c <CCU4_SLICE_CONFIG_0_lInit+0x7c>)
 80058f2:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 80058f6:	f7ff ffc7 	bl	8005888 <XMC_CCU4_EnableShadowTransfer>
                                               (uint32_t)XMC_CCU4_SHADOW_TRANSFER_DITHER_SLICE_3 |
                                               (uint32_t)XMC_CCU4_SHADOW_TRANSFER_PRESCALER_SLICE_3);
  /* Events and function settings */
  XMC_CCU4_SLICE_ConfigureEvent(CCU43_CC43, XMC_CCU4_SLICE_EVENT_0, &CCU4_SLICE_CONFIG_0_event0_config);
 80058fa:	480e      	ldr	r0, [pc, #56]	; (8005934 <CCU4_SLICE_CONFIG_0_lInit+0x74>)
 80058fc:	2101      	movs	r1, #1
 80058fe:	4a10      	ldr	r2, [pc, #64]	; (8005940 <CCU4_SLICE_CONFIG_0_lInit+0x80>)
 8005900:	f7fb fca8 	bl	8001254 <XMC_CCU4_SLICE_ConfigureEvent>
  XMC_CCU4_SLICE_ConfigureEvent(CCU43_CC43, XMC_CCU4_SLICE_EVENT_1, &CCU4_SLICE_CONFIG_0_event1_config);
 8005904:	480b      	ldr	r0, [pc, #44]	; (8005934 <CCU4_SLICE_CONFIG_0_lInit+0x74>)
 8005906:	2102      	movs	r1, #2
 8005908:	4a0e      	ldr	r2, [pc, #56]	; (8005944 <CCU4_SLICE_CONFIG_0_lInit+0x84>)
 800590a:	f7fb fca3 	bl	8001254 <XMC_CCU4_SLICE_ConfigureEvent>
  XMC_CCU4_SLICE_ConfigureEvent(CCU43_CC43, XMC_CCU4_SLICE_EVENT_2, &CCU4_SLICE_CONFIG_0_event2_config);
 800590e:	4809      	ldr	r0, [pc, #36]	; (8005934 <CCU4_SLICE_CONFIG_0_lInit+0x74>)
 8005910:	2103      	movs	r1, #3
 8005912:	4a0d      	ldr	r2, [pc, #52]	; (8005948 <CCU4_SLICE_CONFIG_0_lInit+0x88>)
 8005914:	f7fb fc9e 	bl	8001254 <XMC_CCU4_SLICE_ConfigureEvent>
  /* clear IDLE mode for the slice*/
  XMC_CCU4_EnableClock(CCU43, (uint8_t)3);	
 8005918:	4808      	ldr	r0, [pc, #32]	; (800593c <CCU4_SLICE_CONFIG_0_lInit+0x7c>)
 800591a:	2103      	movs	r1, #3
 800591c:	f7ff ff84 	bl	8005828 <XMC_CCU4_EnableClock>
  /* Set initial value of timer */
  XMC_CCU4_SLICE_SetTimerValue(CCU43_CC43, (uint16_t)0U);
 8005920:	4804      	ldr	r0, [pc, #16]	; (8005934 <CCU4_SLICE_CONFIG_0_lInit+0x74>)
 8005922:	2100      	movs	r1, #0
 8005924:	f7ff ffbe 	bl	80058a4 <XMC_CCU4_SLICE_SetTimerValue>
  return CCU4_SLICE_CONFIG_STATUS_SUCCESS;
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	1fffce8c 	.word	0x1fffce8c
 8005934:	48004400 	.word	0x48004400
 8005938:	0800a9a8 	.word	0x0800a9a8
 800593c:	48004000 	.word	0x48004000
 8005940:	0800a9b0 	.word	0x0800a9b0
 8005944:	0800a9b4 	.word	0x0800a9b4
 8005948:	0800a9b8 	.word	0x0800a9b8

0800594c <AUTOMATION_WriteBit>:

/**********************************************************************************************************************
* API IMPLEMENTATION
**********************************************************************************************************************/
static inline uint32_t AUTOMATION_WriteBit(uint32_t word, uint8_t pos, uint8_t data)
{
 800594c:	b480      	push	{r7}
 800594e:	b085      	sub	sp, #20
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	460b      	mov	r3, r1
 8005956:	70fb      	strb	r3, [r7, #3]
 8005958:	4613      	mov	r3, r2
 800595a:	70bb      	strb	r3, [r7, #2]
  uint32_t return_val;
  if (data == 0U)
 800595c:	78bb      	ldrb	r3, [r7, #2]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d108      	bne.n	8005974 <AUTOMATION_WriteBit+0x28>
  {
    /* Reset the bit */
    return_val = (word & (~((uint32_t) 1U << (uint32_t) pos)));
 8005962:	78fb      	ldrb	r3, [r7, #3]
 8005964:	2201      	movs	r2, #1
 8005966:	fa02 f303 	lsl.w	r3, r2, r3
 800596a:	43da      	mvns	r2, r3
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4013      	ands	r3, r2
 8005970:	60fb      	str	r3, [r7, #12]
 8005972:	e005      	b.n	8005980 <AUTOMATION_WriteBit+0x34>
  }
  else
  {
    /* Set the bit */
    return_val = (word | ((uint32_t) 1U << (uint32_t) pos));
 8005974:	78fb      	ldrb	r3, [r7, #3]
 8005976:	2201      	movs	r2, #1
 8005978:	409a      	lsls	r2, r3
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4313      	orrs	r3, r2
 800597e:	60fb      	str	r3, [r7, #12]
  }
  return return_val;
 8005980:	68fb      	ldr	r3, [r7, #12]
}
 8005982:	4618      	mov	r0, r3
 8005984:	3714      	adds	r7, #20
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop

08005990 <AUTOMATION_Init>:
/**
 * This creates the error handler task and function block processor task
 * Initializes parameter handler
 */
AUTOMATION_STATUS_t AUTOMATION_Init(AUTOMATION_t* const handle_ptr)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  uint32_t status = 0U;
 8005998:	2300      	movs	r3, #0
 800599a:	60fb      	str	r3, [r7, #12]
  if (AUTOMATION_STATE_UNINITIALIZED == handle_ptr->state)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	7b1b      	ldrb	r3, [r3, #12]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d12d      	bne.n	8005a00 <AUTOMATION_Init+0x70>
  {
    status = (uint32_t) SYSTIMER_Init(handle_ptr->systimer_ptr);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4618      	mov	r0, r3
 80059aa:	f7fd fd1d 	bl	80033e8 <SYSTIMER_Init>
 80059ae:	4603      	mov	r3, r0
 80059b0:	60fb      	str	r3, [r7, #12]

#if (AUTOMATION_EH_ENABLE == 1U)
    handle_ptr->eh_timer_id = SYSTIMER_CreateTimer(AUTOMATION_EH_PERIOD,
 80059b2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80059b6:	2101      	movs	r1, #1
 80059b8:	4a14      	ldr	r2, [pc, #80]	; (8005a0c <AUTOMATION_Init+0x7c>)
 80059ba:	2300      	movs	r3, #0
 80059bc:	f7fd fd4e 	bl	800345c <SYSTIMER_CreateTimer>
 80059c0:	4602      	mov	r2, r0
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	609a      	str	r2, [r3, #8]
    	SYSTIMER_MODE_PERIODIC,
        (SYSTIMER_CALLBACK_t)AUTOMATION_EH_ErrorSequencer,
        NULL);
    status |= (uint32_t)SYSTIMER_StartTimer(handle_ptr->eh_timer_id);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	4618      	mov	r0, r3
 80059cc:	f7fd fde4 	bl	8003598 <SYSTIMER_StartTimer>
 80059d0:	4603      	mov	r3, r0
 80059d2:	461a      	mov	r2, r3
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	60fb      	str	r3, [r7, #12]
        NULL);
    status |= (uint32_t)SYSTIMER_StartTimer(handle_ptr->fb_timer_id);
#endif

#if (AUTOMATION_FB_RAMP_GEN_0_ENABLED == 1U)
    status |= (uint32_t)AUTOMATION_FB_RegisterFunctionBlock(&AUTOMATION_FB_RAMP_0);
 80059da:	480d      	ldr	r0, [pc, #52]	; (8005a10 <AUTOMATION_Init+0x80>)
 80059dc:	f000 fb60 	bl	80060a0 <AUTOMATION_FB_RegisterFunctionBlock>
 80059e0:	4603      	mov	r3, r0
 80059e2:	461a      	mov	r2, r3
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	60fb      	str	r3, [r7, #12]
#endif
#if (AUTOMATION_FB_RAMP_GEN_1_ENABLED == 1U)
    status |= (uint32_t)AUTOMATION_FB_RegisterFunctionBlock(&AUTOMATION_FB_RAMP_1);
 80059ea:	480a      	ldr	r0, [pc, #40]	; (8005a14 <AUTOMATION_Init+0x84>)
 80059ec:	f000 fb58 	bl	80060a0 <AUTOMATION_FB_RegisterFunctionBlock>
 80059f0:	4603      	mov	r3, r0
 80059f2:	461a      	mov	r2, r3
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	60fb      	str	r3, [r7, #12]
#endif

    handle_ptr->state = AUTOMATION_STATE_INITIALIZED;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2201      	movs	r2, #1
 80059fe:	731a      	strb	r2, [r3, #12]
  }
  return ((AUTOMATION_STATUS_t) status);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	b2db      	uxtb	r3, r3
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3710      	adds	r7, #16
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	08005d6d 	.word	0x08005d6d
 8005a10:	1fffcf58 	.word	0x1fffcf58
 8005a14:	1fffcfc8 	.word	0x1fffcfc8

08005a18 <AUTOMATION_RegisterApp>:

/**
 * This function assigns the app_id to the app instance.
 */
AUTOMATION_STATUS_t AUTOMATION_RegisterApp(void* const app_handle_ptr, const char* const name, uint8_t* app_id)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b087      	sub	sp, #28
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	607a      	str	r2, [r7, #4]
  AUTOMATION_STATUS_t status;

  if (AUTOMATION_NUM_APPS > AUTOMATION_Handle.app_id)
 8005a24:	4b13      	ldr	r3, [pc, #76]	; (8005a74 <AUTOMATION_RegisterApp+0x5c>)
 8005a26:	7b5b      	ldrb	r3, [r3, #13]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d11a      	bne.n	8005a62 <AUTOMATION_RegisterApp+0x4a>
  {
    /* Register and Assign App ID */
    AUTOMATION_App_Table[AUTOMATION_Handle.app_id].apphandle_ptr = (void*) app_handle_ptr;
 8005a2c:	4b11      	ldr	r3, [pc, #68]	; (8005a74 <AUTOMATION_RegisterApp+0x5c>)
 8005a2e:	7b5b      	ldrb	r3, [r3, #13]
 8005a30:	4619      	mov	r1, r3
 8005a32:	4a11      	ldr	r2, [pc, #68]	; (8005a78 <AUTOMATION_RegisterApp+0x60>)
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
    AUTOMATION_App_Table[AUTOMATION_Handle.app_id].app_name_ptr = name;
 8005a3a:	4b0e      	ldr	r3, [pc, #56]	; (8005a74 <AUTOMATION_RegisterApp+0x5c>)
 8005a3c:	7b5b      	ldrb	r3, [r3, #13]
 8005a3e:	4a0e      	ldr	r2, [pc, #56]	; (8005a78 <AUTOMATION_RegisterApp+0x60>)
 8005a40:	00db      	lsls	r3, r3, #3
 8005a42:	4413      	add	r3, r2
 8005a44:	68ba      	ldr	r2, [r7, #8]
 8005a46:	605a      	str	r2, [r3, #4]
    *app_id = AUTOMATION_Handle.app_id;
 8005a48:	4b0a      	ldr	r3, [pc, #40]	; (8005a74 <AUTOMATION_RegisterApp+0x5c>)
 8005a4a:	7b5a      	ldrb	r2, [r3, #13]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	701a      	strb	r2, [r3, #0]
    AUTOMATION_Handle.app_id++;
 8005a50:	4b08      	ldr	r3, [pc, #32]	; (8005a74 <AUTOMATION_RegisterApp+0x5c>)
 8005a52:	7b5b      	ldrb	r3, [r3, #13]
 8005a54:	3301      	adds	r3, #1
 8005a56:	b2da      	uxtb	r2, r3
 8005a58:	4b06      	ldr	r3, [pc, #24]	; (8005a74 <AUTOMATION_RegisterApp+0x5c>)
 8005a5a:	735a      	strb	r2, [r3, #13]
    status = AUTOMATION_STATUS_SUCCESS;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	75fb      	strb	r3, [r7, #23]
 8005a60:	e001      	b.n	8005a66 <AUTOMATION_RegisterApp+0x4e>
  }
  else
  {
    /* App table entries are reached to its Max. */
    status = AUTOMATION_STATUS_NUM_APPS_EXCEEDED;
 8005a62:	2304      	movs	r3, #4
 8005a64:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005a66:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	371c      	adds	r7, #28
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr
 8005a74:	1fffcfdc 	.word	0x1fffcfdc
 8005a78:	200095bc 	.word	0x200095bc

08005a7c <AUTOMATION_RegisterTask>:
/**
 * Registers the task function to be called from the system timer interrupt
 */
AUTOMATION_STATUS_t AUTOMATION_RegisterTask(AUTOMATION_TASK_FUNCT_PTR_t task_ptr, void* callback_arg_ptr,
                                            uint32_t delay_count)
{
 8005a7c:	b590      	push	{r4, r7, lr}
 8005a7e:	b087      	sub	sp, #28
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	607a      	str	r2, [r7, #4]
  AUTOMATION_STATUS_t status;
  if (AUTOMATION_NUM_TASKS > AUTOMATION_Handle.task_id)
 8005a88:	4b2c      	ldr	r3, [pc, #176]	; (8005b3c <AUTOMATION_RegisterTask+0xc0>)
 8005a8a:	7c1b      	ldrb	r3, [r3, #16]
 8005a8c:	2b05      	cmp	r3, #5
 8005a8e:	d84e      	bhi.n	8005b2e <AUTOMATION_RegisterTask+0xb2>
  {
    /* Update the task table information */
    AUTOMATION_Task_Table[AUTOMATION_Handle.task_id].task_ptr = task_ptr;
 8005a90:	4b2a      	ldr	r3, [pc, #168]	; (8005b3c <AUTOMATION_RegisterTask+0xc0>)
 8005a92:	7c1b      	ldrb	r3, [r3, #16]
 8005a94:	4619      	mov	r1, r3
 8005a96:	4a2a      	ldr	r2, [pc, #168]	; (8005b40 <AUTOMATION_RegisterTask+0xc4>)
 8005a98:	460b      	mov	r3, r1
 8005a9a:	005b      	lsls	r3, r3, #1
 8005a9c:	440b      	add	r3, r1
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	4413      	add	r3, r2
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	601a      	str	r2, [r3, #0]
    AUTOMATION_Task_Table[AUTOMATION_Handle.task_id].period = delay_count;
 8005aa6:	4b25      	ldr	r3, [pc, #148]	; (8005b3c <AUTOMATION_RegisterTask+0xc0>)
 8005aa8:	7c1b      	ldrb	r3, [r3, #16]
 8005aaa:	4619      	mov	r1, r3
 8005aac:	4a24      	ldr	r2, [pc, #144]	; (8005b40 <AUTOMATION_RegisterTask+0xc4>)
 8005aae:	460b      	mov	r3, r1
 8005ab0:	005b      	lsls	r3, r3, #1
 8005ab2:	440b      	add	r3, r1
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	4413      	add	r3, r2
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	605a      	str	r2, [r3, #4]

    /* Create the system timer with the given period */
    AUTOMATION_Task_Table[AUTOMATION_Handle.task_id].task_timer_id = SYSTIMER_CreateTimer(delay_count,
 8005abc:	4b1f      	ldr	r3, [pc, #124]	; (8005b3c <AUTOMATION_RegisterTask+0xc0>)
 8005abe:	7c1b      	ldrb	r3, [r3, #16]
 8005ac0:	461c      	mov	r4, r3
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	2101      	movs	r1, #1
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	f7fd fcc7 	bl	800345c <SYSTIMER_CreateTimer>
 8005ace:	4601      	mov	r1, r0
 8005ad0:	4a1b      	ldr	r2, [pc, #108]	; (8005b40 <AUTOMATION_RegisterTask+0xc4>)
 8005ad2:	4623      	mov	r3, r4
 8005ad4:	005b      	lsls	r3, r3, #1
 8005ad6:	4423      	add	r3, r4
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	4413      	add	r3, r2
 8005adc:	3308      	adds	r3, #8
 8005ade:	6019      	str	r1, [r3, #0]
        SYSTIMER_MODE_PERIODIC, (SYSTIMER_CALLBACK_t) task_ptr, callback_arg_ptr);
    /* check if system timer is created successfully */
    if (AUTOMATION_Task_Table[AUTOMATION_Handle.task_id].task_timer_id != (0U))
 8005ae0:	4b16      	ldr	r3, [pc, #88]	; (8005b3c <AUTOMATION_RegisterTask+0xc0>)
 8005ae2:	7c1b      	ldrb	r3, [r3, #16]
 8005ae4:	4619      	mov	r1, r3
 8005ae6:	4a16      	ldr	r2, [pc, #88]	; (8005b40 <AUTOMATION_RegisterTask+0xc4>)
 8005ae8:	460b      	mov	r3, r1
 8005aea:	005b      	lsls	r3, r3, #1
 8005aec:	440b      	add	r3, r1
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	4413      	add	r3, r2
 8005af2:	3308      	adds	r3, #8
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d016      	beq.n	8005b28 <AUTOMATION_RegisterTask+0xac>
    {
      /* start the task timer */
      status = (AUTOMATION_STATUS_t) SYSTIMER_StartTimer(
          AUTOMATION_Task_Table[AUTOMATION_Handle.task_id].task_timer_id);
 8005afa:	4b10      	ldr	r3, [pc, #64]	; (8005b3c <AUTOMATION_RegisterTask+0xc0>)
 8005afc:	7c1b      	ldrb	r3, [r3, #16]
        SYSTIMER_MODE_PERIODIC, (SYSTIMER_CALLBACK_t) task_ptr, callback_arg_ptr);
    /* check if system timer is created successfully */
    if (AUTOMATION_Task_Table[AUTOMATION_Handle.task_id].task_timer_id != (0U))
    {
      /* start the task timer */
      status = (AUTOMATION_STATUS_t) SYSTIMER_StartTimer(
 8005afe:	4619      	mov	r1, r3
 8005b00:	4a0f      	ldr	r2, [pc, #60]	; (8005b40 <AUTOMATION_RegisterTask+0xc4>)
 8005b02:	460b      	mov	r3, r1
 8005b04:	005b      	lsls	r3, r3, #1
 8005b06:	440b      	add	r3, r1
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	4413      	add	r3, r2
 8005b0c:	3308      	adds	r3, #8
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4618      	mov	r0, r3
 8005b12:	f7fd fd41 	bl	8003598 <SYSTIMER_StartTimer>
 8005b16:	4603      	mov	r3, r0
 8005b18:	75fb      	strb	r3, [r7, #23]
          AUTOMATION_Task_Table[AUTOMATION_Handle.task_id].task_timer_id);
      AUTOMATION_Handle.task_id++;
 8005b1a:	4b08      	ldr	r3, [pc, #32]	; (8005b3c <AUTOMATION_RegisterTask+0xc0>)
 8005b1c:	7c1b      	ldrb	r3, [r3, #16]
 8005b1e:	3301      	adds	r3, #1
 8005b20:	b2da      	uxtb	r2, r3
 8005b22:	4b06      	ldr	r3, [pc, #24]	; (8005b3c <AUTOMATION_RegisterTask+0xc0>)
 8005b24:	741a      	strb	r2, [r3, #16]
 8005b26:	e004      	b.n	8005b32 <AUTOMATION_RegisterTask+0xb6>
    }
    else
    {
      status = AUTOMATION_STATUS_FAILURE;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	75fb      	strb	r3, [r7, #23]
 8005b2c:	e001      	b.n	8005b32 <AUTOMATION_RegisterTask+0xb6>
    }
  }
  else
  {
    status = AUTOMATION_STATUS_FAILURE;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005b32:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	371c      	adds	r7, #28
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd90      	pop	{r4, r7, pc}
 8005b3c:	1fffcfdc 	.word	0x1fffcfdc
 8005b40:	2000977c 	.word	0x2000977c

08005b44 <AUTOMATION_DeregisterTask>:
/**
 * De-registers task function.
 * Task table is adjusted for this deleted entry.
 */
AUTOMATION_STATUS_t AUTOMATION_DeregisterTask(AUTOMATION_TASK_FUNCT_PTR_t task_ptr)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  AUTOMATION_STATUS_t status;
  uint8_t count;
  uint8_t match_index = AUTOMATION_NUM_TASKS + 1U;
 8005b4c:	2307      	movs	r3, #7
 8005b4e:	737b      	strb	r3, [r7, #13]

  /* Find the entry in the task table based on the task_ptr */
  for (count = 0U; count < AUTOMATION_NUM_TASKS; count++)
 8005b50:	2300      	movs	r3, #0
 8005b52:	73bb      	strb	r3, [r7, #14]
 8005b54:	e010      	b.n	8005b78 <AUTOMATION_DeregisterTask+0x34>
  {
    if (AUTOMATION_Task_Table[count].task_ptr == task_ptr)
 8005b56:	7bba      	ldrb	r2, [r7, #14]
 8005b58:	4942      	ldr	r1, [pc, #264]	; (8005c64 <AUTOMATION_DeregisterTask+0x120>)
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	005b      	lsls	r3, r3, #1
 8005b5e:	4413      	add	r3, r2
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	440b      	add	r3, r1
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d102      	bne.n	8005b72 <AUTOMATION_DeregisterTask+0x2e>
    {
      match_index = count;
 8005b6c:	7bbb      	ldrb	r3, [r7, #14]
 8005b6e:	737b      	strb	r3, [r7, #13]
      break;
 8005b70:	e005      	b.n	8005b7e <AUTOMATION_DeregisterTask+0x3a>
  AUTOMATION_STATUS_t status;
  uint8_t count;
  uint8_t match_index = AUTOMATION_NUM_TASKS + 1U;

  /* Find the entry in the task table based on the task_ptr */
  for (count = 0U; count < AUTOMATION_NUM_TASKS; count++)
 8005b72:	7bbb      	ldrb	r3, [r7, #14]
 8005b74:	3301      	adds	r3, #1
 8005b76:	73bb      	strb	r3, [r7, #14]
 8005b78:	7bbb      	ldrb	r3, [r7, #14]
 8005b7a:	2b05      	cmp	r3, #5
 8005b7c:	d9eb      	bls.n	8005b56 <AUTOMATION_DeregisterTask+0x12>
      break;
    }
  }

  /* Delete the task and remove from the task table */
  if ((AUTOMATION_NUM_TASKS + 1U) != match_index)
 8005b7e:	7b7b      	ldrb	r3, [r7, #13]
 8005b80:	2b07      	cmp	r3, #7
 8005b82:	d068      	beq.n	8005c56 <AUTOMATION_DeregisterTask+0x112>
  {
    status = (AUTOMATION_STATUS_t) SYSTIMER_StopTimer(AUTOMATION_Task_Table[match_index].task_timer_id);
 8005b84:	7b7a      	ldrb	r2, [r7, #13]
 8005b86:	4937      	ldr	r1, [pc, #220]	; (8005c64 <AUTOMATION_DeregisterTask+0x120>)
 8005b88:	4613      	mov	r3, r2
 8005b8a:	005b      	lsls	r3, r3, #1
 8005b8c:	4413      	add	r3, r2
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	440b      	add	r3, r1
 8005b92:	3308      	adds	r3, #8
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4618      	mov	r0, r3
 8005b98:	f7fd fd3e 	bl	8003618 <SYSTIMER_StopTimer>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	73fb      	strb	r3, [r7, #15]
    if (AUTOMATION_STATUS_SUCCESS == status)
 8005ba0:	7bfb      	ldrb	r3, [r7, #15]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d154      	bne.n	8005c50 <AUTOMATION_DeregisterTask+0x10c>
    {
      status = (AUTOMATION_STATUS_t) SYSTIMER_DeleteTimer(AUTOMATION_Task_Table[match_index].task_timer_id);
 8005ba6:	7b7a      	ldrb	r2, [r7, #13]
 8005ba8:	492e      	ldr	r1, [pc, #184]	; (8005c64 <AUTOMATION_DeregisterTask+0x120>)
 8005baa:	4613      	mov	r3, r2
 8005bac:	005b      	lsls	r3, r3, #1
 8005bae:	4413      	add	r3, r2
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	440b      	add	r3, r1
 8005bb4:	3308      	adds	r3, #8
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f7fd fd65 	bl	8003688 <SYSTIMER_DeleteTimer>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	73fb      	strb	r3, [r7, #15]
      AUTOMATION_Handle.task_id--;
 8005bc2:	4b29      	ldr	r3, [pc, #164]	; (8005c68 <AUTOMATION_DeregisterTask+0x124>)
 8005bc4:	7c1b      	ldrb	r3, [r3, #16]
 8005bc6:	3b01      	subs	r3, #1
 8005bc8:	b2da      	uxtb	r2, r3
 8005bca:	4b27      	ldr	r3, [pc, #156]	; (8005c68 <AUTOMATION_DeregisterTask+0x124>)
 8005bcc:	741a      	strb	r2, [r3, #16]
      for (count = match_index; count <= AUTOMATION_Handle.task_id; count++)
 8005bce:	7b7b      	ldrb	r3, [r7, #13]
 8005bd0:	73bb      	strb	r3, [r7, #14]
 8005bd2:	e037      	b.n	8005c44 <AUTOMATION_DeregisterTask+0x100>
      {
        AUTOMATION_Task_Table[count].task_ptr = AUTOMATION_Task_Table[count + 1U].task_ptr;
 8005bd4:	7bba      	ldrb	r2, [r7, #14]
 8005bd6:	7bbb      	ldrb	r3, [r7, #14]
 8005bd8:	1c59      	adds	r1, r3, #1
 8005bda:	4822      	ldr	r0, [pc, #136]	; (8005c64 <AUTOMATION_DeregisterTask+0x120>)
 8005bdc:	460b      	mov	r3, r1
 8005bde:	005b      	lsls	r3, r3, #1
 8005be0:	440b      	add	r3, r1
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	4403      	add	r3, r0
 8005be6:	6819      	ldr	r1, [r3, #0]
 8005be8:	481e      	ldr	r0, [pc, #120]	; (8005c64 <AUTOMATION_DeregisterTask+0x120>)
 8005bea:	4613      	mov	r3, r2
 8005bec:	005b      	lsls	r3, r3, #1
 8005bee:	4413      	add	r3, r2
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	4403      	add	r3, r0
 8005bf4:	6019      	str	r1, [r3, #0]
        AUTOMATION_Task_Table[count].period = AUTOMATION_Task_Table[count + 1U].period;
 8005bf6:	7bba      	ldrb	r2, [r7, #14]
 8005bf8:	7bbb      	ldrb	r3, [r7, #14]
 8005bfa:	1c59      	adds	r1, r3, #1
 8005bfc:	4819      	ldr	r0, [pc, #100]	; (8005c64 <AUTOMATION_DeregisterTask+0x120>)
 8005bfe:	460b      	mov	r3, r1
 8005c00:	005b      	lsls	r3, r3, #1
 8005c02:	440b      	add	r3, r1
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	4403      	add	r3, r0
 8005c08:	6859      	ldr	r1, [r3, #4]
 8005c0a:	4816      	ldr	r0, [pc, #88]	; (8005c64 <AUTOMATION_DeregisterTask+0x120>)
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	005b      	lsls	r3, r3, #1
 8005c10:	4413      	add	r3, r2
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	4403      	add	r3, r0
 8005c16:	6059      	str	r1, [r3, #4]
        AUTOMATION_Task_Table[count].task_timer_id = AUTOMATION_Task_Table[count + 1U].task_timer_id;
 8005c18:	7bba      	ldrb	r2, [r7, #14]
 8005c1a:	7bbb      	ldrb	r3, [r7, #14]
 8005c1c:	1c59      	adds	r1, r3, #1
 8005c1e:	4811      	ldr	r0, [pc, #68]	; (8005c64 <AUTOMATION_DeregisterTask+0x120>)
 8005c20:	460b      	mov	r3, r1
 8005c22:	005b      	lsls	r3, r3, #1
 8005c24:	440b      	add	r3, r1
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	4403      	add	r3, r0
 8005c2a:	3308      	adds	r3, #8
 8005c2c:	6819      	ldr	r1, [r3, #0]
 8005c2e:	480d      	ldr	r0, [pc, #52]	; (8005c64 <AUTOMATION_DeregisterTask+0x120>)
 8005c30:	4613      	mov	r3, r2
 8005c32:	005b      	lsls	r3, r3, #1
 8005c34:	4413      	add	r3, r2
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	4403      	add	r3, r0
 8005c3a:	3308      	adds	r3, #8
 8005c3c:	6019      	str	r1, [r3, #0]
    status = (AUTOMATION_STATUS_t) SYSTIMER_StopTimer(AUTOMATION_Task_Table[match_index].task_timer_id);
    if (AUTOMATION_STATUS_SUCCESS == status)
    {
      status = (AUTOMATION_STATUS_t) SYSTIMER_DeleteTimer(AUTOMATION_Task_Table[match_index].task_timer_id);
      AUTOMATION_Handle.task_id--;
      for (count = match_index; count <= AUTOMATION_Handle.task_id; count++)
 8005c3e:	7bbb      	ldrb	r3, [r7, #14]
 8005c40:	3301      	adds	r3, #1
 8005c42:	73bb      	strb	r3, [r7, #14]
 8005c44:	4b08      	ldr	r3, [pc, #32]	; (8005c68 <AUTOMATION_DeregisterTask+0x124>)
 8005c46:	7c1b      	ldrb	r3, [r3, #16]
 8005c48:	7bba      	ldrb	r2, [r7, #14]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d9c2      	bls.n	8005bd4 <AUTOMATION_DeregisterTask+0x90>
 8005c4e:	e004      	b.n	8005c5a <AUTOMATION_DeregisterTask+0x116>
        AUTOMATION_Task_Table[count].task_timer_id = AUTOMATION_Task_Table[count + 1U].task_timer_id;
      }
    }
    else
    {
      status = AUTOMATION_STATUS_FAILURE;
 8005c50:	2301      	movs	r3, #1
 8005c52:	73fb      	strb	r3, [r7, #15]
 8005c54:	e001      	b.n	8005c5a <AUTOMATION_DeregisterTask+0x116>
    }
  }
  else
  {
    status = AUTOMATION_STATUS_FAILURE;
 8005c56:	2301      	movs	r3, #1
 8005c58:	73fb      	strb	r3, [r7, #15]
  }
  return (status);
 8005c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3710      	adds	r7, #16
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}
 8005c64:	2000977c 	.word	0x2000977c
 8005c68:	1fffcfdc 	.word	0x1fffcfdc

08005c6c <AUTOMATION_PH_RegisterParamTable>:
 * This function will save the app parameter table pointer in the AUTOMATION_PH_PARAMHANDLE.
 * It maintains the relation between app_id and parameter table pointer.
 */
AUTOMATION_STATUS_t AUTOMATION_PH_RegisterParamTable(uint8_t app_id,
    AUTOMATION_PH_PARAM_ENTRY_t* app_param_table_ptr)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b085      	sub	sp, #20
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	4603      	mov	r3, r0
 8005c74:	6039      	str	r1, [r7, #0]
 8005c76:	71fb      	strb	r3, [r7, #7]
  AUTOMATION_STATUS_t status;

  if (AUTOMATION_NUM_APPS > app_id)
 8005c78:	79fb      	ldrb	r3, [r7, #7]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d107      	bne.n	8005c8e <AUTOMATION_PH_RegisterParamTable+0x22>
  {
    /* App param table pointer */
    AUTOMATION_PH_Param_Table[app_id] = app_param_table_ptr;
 8005c7e:	79fb      	ldrb	r3, [r7, #7]
 8005c80:	4907      	ldr	r1, [pc, #28]	; (8005ca0 <AUTOMATION_PH_RegisterParamTable+0x34>)
 8005c82:	683a      	ldr	r2, [r7, #0]
 8005c84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    status = AUTOMATION_STATUS_SUCCESS;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	73fb      	strb	r3, [r7, #15]
 8005c8c:	e001      	b.n	8005c92 <AUTOMATION_PH_RegisterParamTable+0x26>
  }
  else
  {
    status = AUTOMATION_STATUS_NUM_PARAM_EXCEEDED;
 8005c8e:	2306      	movs	r3, #6
 8005c90:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8005c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3714      	adds	r7, #20
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr
 8005ca0:	200095fc 	.word	0x200095fc

08005ca4 <AUTOMATION_AppInterface_ReadReportedErrors>:
  return (status);
}

/* Read errors reported by App from temporary buffer and log it in log book and send through communication interface */
static void AUTOMATION_AppInterface_ReadReportedErrors(void)
{
 8005ca4:	b590      	push	{r4, r7, lr}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
  uint8_t temp_buf_index;
  AUTOMATION_EH_LOGBOOK_ENTRY_t * temp_logbook_entry;
  for (temp_buf_index = 0U; temp_buf_index < AUTOMATION_EH_AppErrorBuf.data_length; temp_buf_index++)
 8005caa:	2300      	movs	r3, #0
 8005cac:	71fb      	strb	r3, [r7, #7]
 8005cae:	e02e      	b.n	8005d0e <AUTOMATION_AppInterface_ReadReportedErrors+0x6a>
  {
    /* Read request for error log book Info/Warning section */
    temp_logbook_entry = &AUTOMATION_EH_AppErrorBuf.error_logbook_ptr[AUTOMATION_EH_AppErrorBuf.read_index++];
 8005cb0:	4b1b      	ldr	r3, [pc, #108]	; (8005d20 <AUTOMATION_AppInterface_ReadReportedErrors+0x7c>)
 8005cb2:	685a      	ldr	r2, [r3, #4]
 8005cb4:	4b1a      	ldr	r3, [pc, #104]	; (8005d20 <AUTOMATION_AppInterface_ReadReportedErrors+0x7c>)
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	1c59      	adds	r1, r3, #1
 8005cba:	b2c8      	uxtb	r0, r1
 8005cbc:	4918      	ldr	r1, [pc, #96]	; (8005d20 <AUTOMATION_AppInterface_ReadReportedErrors+0x7c>)
 8005cbe:	7008      	strb	r0, [r1, #0]
 8005cc0:	00db      	lsls	r3, r3, #3
 8005cc2:	4413      	add	r3, r2
 8005cc4:	603b      	str	r3, [r7, #0]
    if (AUTOMATION_EH_AppErrorBuf.read_index == AUTOMATION_EH_APPBUF_SIZE)
 8005cc6:	4b16      	ldr	r3, [pc, #88]	; (8005d20 <AUTOMATION_AppInterface_ReadReportedErrors+0x7c>)
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	2b05      	cmp	r3, #5
 8005ccc:	d102      	bne.n	8005cd4 <AUTOMATION_AppInterface_ReadReportedErrors+0x30>
    {
      /* Ring buffer */
      AUTOMATION_EH_AppErrorBuf.read_index = 0U;
 8005cce:	4b14      	ldr	r3, [pc, #80]	; (8005d20 <AUTOMATION_AppInterface_ReadReportedErrors+0x7c>)
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	701a      	strb	r2, [r3, #0]
    }
    AUTOMATION_EH_AppErrorBuf.data_length--;
 8005cd4:	4b12      	ldr	r3, [pc, #72]	; (8005d20 <AUTOMATION_AppInterface_ReadReportedErrors+0x7c>)
 8005cd6:	789b      	ldrb	r3, [r3, #2]
 8005cd8:	3b01      	subs	r3, #1
 8005cda:	b2da      	uxtb	r2, r3
 8005cdc:	4b10      	ldr	r3, [pc, #64]	; (8005d20 <AUTOMATION_AppInterface_ReadReportedErrors+0x7c>)
 8005cde:	709a      	strb	r2, [r3, #2]

    /* record to log book */
    AUTOMATION_EH_WriteLogbook(*temp_logbook_entry);
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005ce6:	f000 f96d 	bl	8005fc4 <AUTOMATION_EH_WriteLogbook>

    if (AUTOMATION_EH_ReportingInterface.eh_report_callback_ptr != NULL)
 8005cea:	4b0e      	ldr	r3, [pc, #56]	; (8005d24 <AUTOMATION_AppInterface_ReadReportedErrors+0x80>)
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d00a      	beq.n	8005d08 <AUTOMATION_AppInterface_ReadReportedErrors+0x64>
    {
      /* Report on communication interface */
      AUTOMATION_EH_ReportingInterface.eh_report_callback_ptr
 8005cf2:	4b0c      	ldr	r3, [pc, #48]	; (8005d24 <AUTOMATION_AppInterface_ReadReportedErrors+0x80>)
 8005cf4:	685c      	ldr	r4, [r3, #4]
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	7918      	ldrb	r0, [r3, #4]
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	7959      	ldrb	r1, [r3, #5]
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	799a      	ldrb	r2, [r3, #6]
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	79db      	ldrb	r3, [r3, #7]
 8005d06:	47a0      	blx	r4
/* Read errors reported by App from temporary buffer and log it in log book and send through communication interface */
static void AUTOMATION_AppInterface_ReadReportedErrors(void)
{
  uint8_t temp_buf_index;
  AUTOMATION_EH_LOGBOOK_ENTRY_t * temp_logbook_entry;
  for (temp_buf_index = 0U; temp_buf_index < AUTOMATION_EH_AppErrorBuf.data_length; temp_buf_index++)
 8005d08:	79fb      	ldrb	r3, [r7, #7]
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	71fb      	strb	r3, [r7, #7]
 8005d0e:	4b04      	ldr	r3, [pc, #16]	; (8005d20 <AUTOMATION_AppInterface_ReadReportedErrors+0x7c>)
 8005d10:	789b      	ldrb	r3, [r3, #2]
 8005d12:	79fa      	ldrb	r2, [r7, #7]
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d3cb      	bcc.n	8005cb0 <AUTOMATION_AppInterface_ReadReportedErrors+0xc>
          temp_logbook_entry->error_id,
          temp_logbook_entry->error_severity,
          temp_logbook_entry->error_status);
    }
  }
}
 8005d18:	370c      	adds	r7, #12
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd90      	pop	{r4, r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	1fffcef4 	.word	0x1fffcef4
 8005d24:	200092f4 	.word	0x200092f4

08005d28 <AUTOMATION_EH_ProcessError>:

static void AUTOMATION_EH_ProcessError(AUTOMATION_EH_BIT_ERROR_TABLE_t* const error_table_entry_ptr)
{
 8005d28:	b590      	push	{r4, r7, lr}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  if (AUTOMATION_EH_ReportingInterface.eh_report_callback_ptr != NULL)
 8005d30:	4b0d      	ldr	r3, [pc, #52]	; (8005d68 <AUTOMATION_EH_ProcessError+0x40>)
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d00a      	beq.n	8005d4e <AUTOMATION_EH_ProcessError+0x26>
  {
    /* Report error on interface */
    AUTOMATION_EH_ReportingInterface.eh_report_callback_ptr
 8005d38:	4b0b      	ldr	r3, [pc, #44]	; (8005d68 <AUTOMATION_EH_ProcessError+0x40>)
 8005d3a:	685c      	ldr	r4, [r3, #4]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	7a1a      	ldrb	r2, [r3, #8]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	7a9b      	ldrb	r3, [r3, #10]
 8005d44:	20ff      	movs	r0, #255	; 0xff
 8005d46:	4611      	mov	r1, r2
 8005d48:	461a      	mov	r2, r3
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	47a0      	blx	r4
        error_table_entry_ptr->error_id,
        error_table_entry_ptr->error_severity,
        (uint8_t)AUTOMATION_EH_ERROR_STATUS_SET);
  }

  if (error_table_entry_ptr->error_functptr != NULL)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d005      	beq.n	8005d62 <AUTOMATION_EH_ProcessError+0x3a>
  {
    /* Call registered call back function */
    (error_table_entry_ptr->error_functptr)(error_table_entry_ptr->error_callbackarg);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	6852      	ldr	r2, [r2, #4]
 8005d5e:	4610      	mov	r0, r2
 8005d60:	4798      	blx	r3
  }

}
 8005d62:	370c      	adds	r7, #12
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd90      	pop	{r4, r7, pc}
 8005d68:	200092f4 	.word	0x200092f4

08005d6c <AUTOMATION_EH_ErrorSequencer>:

/**
 * This function will scan errors from the BitInterface Word and take action.
 */
void AUTOMATION_EH_ErrorSequencer (void)
{
 8005d6c:	b590      	push	{r4, r7, lr}
 8005d6e:	b085      	sub	sp, #20
 8005d70:	af00      	add	r7, sp, #0
  uint8_t error_words_count,bit_count;
  AUTOMATION_EH_BIT_ERROR_TABLE_t *error_table_entry_ptr;
  AUTOMATION_EH_LOGBOOK_ENTRY_t logbook_entry;

  /* Loop to scan all registered bit interface error words */
  for(error_words_count=0U; error_words_count < AUTOMATION_NUM_INTERFACES; error_words_count++)
 8005d72:	2300      	movs	r3, #0
 8005d74:	73fb      	strb	r3, [r7, #15]
 8005d76:	e0ae      	b.n	8005ed6 <AUTOMATION_EH_ErrorSequencer+0x16a>
  {
    if ((AUTOMATION_EH_BitInterface_Word[error_words_count].error_word != 0U) ||
 8005d78:	7bfb      	ldrb	r3, [r7, #15]
 8005d7a:	4a5b      	ldr	r2, [pc, #364]	; (8005ee8 <AUTOMATION_EH_ErrorSequencer+0x17c>)
 8005d7c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d107      	bne.n	8005d94 <AUTOMATION_EH_ErrorSequencer+0x28>
        (AUTOMATION_EH_BitInterface_Word[error_words_count].status_word != 0U))
 8005d84:	7bfb      	ldrb	r3, [r7, #15]
 8005d86:	4a58      	ldr	r2, [pc, #352]	; (8005ee8 <AUTOMATION_EH_ErrorSequencer+0x17c>)
 8005d88:	00db      	lsls	r3, r3, #3
 8005d8a:	4413      	add	r3, r2
 8005d8c:	685b      	ldr	r3, [r3, #4]
  AUTOMATION_EH_LOGBOOK_ENTRY_t logbook_entry;

  /* Loop to scan all registered bit interface error words */
  for(error_words_count=0U; error_words_count < AUTOMATION_NUM_INTERFACES; error_words_count++)
  {
    if ((AUTOMATION_EH_BitInterface_Word[error_words_count].error_word != 0U) ||
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	f000 809e 	beq.w	8005ed0 <AUTOMATION_EH_ErrorSequencer+0x164>
        (AUTOMATION_EH_BitInterface_Word[error_words_count].status_word != 0U))
    {
      /* Loop to scan all registered bits insider error word */
      for(bit_count = 0U; bit_count < 32U; bit_count++)
 8005d94:	2300      	movs	r3, #0
 8005d96:	73bb      	strb	r3, [r7, #14]
 8005d98:	e096      	b.n	8005ec8 <AUTOMATION_EH_ErrorSequencer+0x15c>
      {
        /* Check if any error bit is set */
        if ((AUTOMATION_EH_BitInterface_Word[error_words_count].error_word>>bit_count) & 1U)
 8005d9a:	7bfb      	ldrb	r3, [r7, #15]
 8005d9c:	4a52      	ldr	r2, [pc, #328]	; (8005ee8 <AUTOMATION_EH_ErrorSequencer+0x17c>)
 8005d9e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8005da2:	7bbb      	ldrb	r3, [r7, #14]
 8005da4:	fa22 f303 	lsr.w	r3, r2, r3
 8005da8:	f003 0301 	and.w	r3, r3, #1
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d034      	beq.n	8005e1a <AUTOMATION_EH_ErrorSequencer+0xae>
        {
          /* Error bit is set */
          /* Check if any action is already taken */
          if ((AUTOMATION_EH_BitInterface_Word[error_words_count].status_word>>bit_count) & 1U)
 8005db0:	7bfb      	ldrb	r3, [r7, #15]
 8005db2:	4a4d      	ldr	r2, [pc, #308]	; (8005ee8 <AUTOMATION_EH_ErrorSequencer+0x17c>)
 8005db4:	00db      	lsls	r3, r3, #3
 8005db6:	4413      	add	r3, r2
 8005db8:	685a      	ldr	r2, [r3, #4]
 8005dba:	7bbb      	ldrb	r3, [r7, #14]
 8005dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8005dc0:	f003 0301 	and.w	r3, r3, #1
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d002      	beq.n	8005dce <AUTOMATION_EH_ErrorSequencer+0x62>
          {
            /* Action is already taken */
            error_table_entry_ptr = NULL;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	60bb      	str	r3, [r7, #8]
 8005dcc:	e065      	b.n	8005e9a <AUTOMATION_EH_ErrorSequencer+0x12e>
          }
          else
          {
            /* Action need to take */
            error_table_entry_ptr = &AUTOMATION_EH_BitErrorTable[error_words_count][bit_count];
 8005dce:	7bf9      	ldrb	r1, [r7, #15]
 8005dd0:	7bbb      	ldrb	r3, [r7, #14]
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	0052      	lsls	r2, r2, #1
 8005dd6:	441a      	add	r2, r3
 8005dd8:	0093      	lsls	r3, r2, #2
 8005dda:	461a      	mov	r2, r3
 8005ddc:	460b      	mov	r3, r1
 8005dde:	005b      	lsls	r3, r3, #1
 8005de0:	440b      	add	r3, r1
 8005de2:	01db      	lsls	r3, r3, #7
 8005de4:	4413      	add	r3, r2
 8005de6:	4a41      	ldr	r2, [pc, #260]	; (8005eec <AUTOMATION_EH_ErrorSequencer+0x180>)
 8005de8:	4413      	add	r3, r2
 8005dea:	60bb      	str	r3, [r7, #8]
            AUTOMATION_EH_ProcessError(error_table_entry_ptr);
 8005dec:	68b8      	ldr	r0, [r7, #8]
 8005dee:	f7ff ff9b 	bl	8005d28 <AUTOMATION_EH_ProcessError>
            /* Set corresponding bit in status word to indicate action is taken */
            AUTOMATION_EH_BitInterface_Word[error_words_count].status_word =
 8005df2:	7bfc      	ldrb	r4, [r7, #15]
            AUTOMATION_WriteBit(AUTOMATION_EH_BitInterface_Word[error_words_count].status_word, bit_count, AUTOMATION_EH_SET_BIT);
 8005df4:	7bfb      	ldrb	r3, [r7, #15]
 8005df6:	4a3c      	ldr	r2, [pc, #240]	; (8005ee8 <AUTOMATION_EH_ErrorSequencer+0x17c>)
 8005df8:	00db      	lsls	r3, r3, #3
 8005dfa:	4413      	add	r3, r2
 8005dfc:	685a      	ldr	r2, [r3, #4]
 8005dfe:	7bbb      	ldrb	r3, [r7, #14]
 8005e00:	4610      	mov	r0, r2
 8005e02:	4619      	mov	r1, r3
 8005e04:	2201      	movs	r2, #1
 8005e06:	f7ff fda1 	bl	800594c <AUTOMATION_WriteBit>
 8005e0a:	4601      	mov	r1, r0
          {
            /* Action need to take */
            error_table_entry_ptr = &AUTOMATION_EH_BitErrorTable[error_words_count][bit_count];
            AUTOMATION_EH_ProcessError(error_table_entry_ptr);
            /* Set corresponding bit in status word to indicate action is taken */
            AUTOMATION_EH_BitInterface_Word[error_words_count].status_word =
 8005e0c:	4a36      	ldr	r2, [pc, #216]	; (8005ee8 <AUTOMATION_EH_ErrorSequencer+0x17c>)
 8005e0e:	00e3      	lsls	r3, r4, #3
 8005e10:	4413      	add	r3, r2
 8005e12:	6059      	str	r1, [r3, #4]
            AUTOMATION_WriteBit(AUTOMATION_EH_BitInterface_Word[error_words_count].status_word, bit_count, AUTOMATION_EH_SET_BIT);

            /* Record in log book */
            logbook_entry.error_status = (uint8_t)AUTOMATION_EH_ERROR_STATUS_SET;
 8005e14:	2301      	movs	r3, #1
 8005e16:	71fb      	strb	r3, [r7, #7]
 8005e18:	e03f      	b.n	8005e9a <AUTOMATION_EH_ErrorSequencer+0x12e>
        }
        else
        {
          /* Error bit reseted */
          /* Check if status bit still set then reset it */
          if ((AUTOMATION_EH_BitInterface_Word[error_words_count].status_word>>bit_count) & 1U)
 8005e1a:	7bfb      	ldrb	r3, [r7, #15]
 8005e1c:	4a32      	ldr	r2, [pc, #200]	; (8005ee8 <AUTOMATION_EH_ErrorSequencer+0x17c>)
 8005e1e:	00db      	lsls	r3, r3, #3
 8005e20:	4413      	add	r3, r2
 8005e22:	685a      	ldr	r2, [r3, #4]
 8005e24:	7bbb      	ldrb	r3, [r7, #14]
 8005e26:	fa22 f303 	lsr.w	r3, r2, r3
 8005e2a:	f003 0301 	and.w	r3, r3, #1
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d031      	beq.n	8005e96 <AUTOMATION_EH_ErrorSequencer+0x12a>
          {
            /* Reset corresponding status bit in status word */
            AUTOMATION_EH_BitInterface_Word[error_words_count].status_word =
 8005e32:	7bfc      	ldrb	r4, [r7, #15]
            AUTOMATION_WriteBit(AUTOMATION_EH_BitInterface_Word[error_words_count].status_word,bit_count,AUTOMATION_EH_RESET_BIT);
 8005e34:	7bfb      	ldrb	r3, [r7, #15]
 8005e36:	4a2c      	ldr	r2, [pc, #176]	; (8005ee8 <AUTOMATION_EH_ErrorSequencer+0x17c>)
 8005e38:	00db      	lsls	r3, r3, #3
 8005e3a:	4413      	add	r3, r2
 8005e3c:	685a      	ldr	r2, [r3, #4]
 8005e3e:	7bbb      	ldrb	r3, [r7, #14]
 8005e40:	4610      	mov	r0, r2
 8005e42:	4619      	mov	r1, r3
 8005e44:	2200      	movs	r2, #0
 8005e46:	f7ff fd81 	bl	800594c <AUTOMATION_WriteBit>
 8005e4a:	4601      	mov	r1, r0
          /* Error bit reseted */
          /* Check if status bit still set then reset it */
          if ((AUTOMATION_EH_BitInterface_Word[error_words_count].status_word>>bit_count) & 1U)
          {
            /* Reset corresponding status bit in status word */
            AUTOMATION_EH_BitInterface_Word[error_words_count].status_word =
 8005e4c:	4a26      	ldr	r2, [pc, #152]	; (8005ee8 <AUTOMATION_EH_ErrorSequencer+0x17c>)
 8005e4e:	00e3      	lsls	r3, r4, #3
 8005e50:	4413      	add	r3, r2
 8005e52:	6059      	str	r1, [r3, #4]
            AUTOMATION_WriteBit(AUTOMATION_EH_BitInterface_Word[error_words_count].status_word,bit_count,AUTOMATION_EH_RESET_BIT);

            /* Error table pointer */
            error_table_entry_ptr = &AUTOMATION_EH_BitErrorTable[error_words_count][bit_count];
 8005e54:	7bf9      	ldrb	r1, [r7, #15]
 8005e56:	7bbb      	ldrb	r3, [r7, #14]
 8005e58:	461a      	mov	r2, r3
 8005e5a:	0052      	lsls	r2, r2, #1
 8005e5c:	441a      	add	r2, r3
 8005e5e:	0093      	lsls	r3, r2, #2
 8005e60:	461a      	mov	r2, r3
 8005e62:	460b      	mov	r3, r1
 8005e64:	005b      	lsls	r3, r3, #1
 8005e66:	440b      	add	r3, r1
 8005e68:	01db      	lsls	r3, r3, #7
 8005e6a:	4413      	add	r3, r2
 8005e6c:	4a1f      	ldr	r2, [pc, #124]	; (8005eec <AUTOMATION_EH_ErrorSequencer+0x180>)
 8005e6e:	4413      	add	r3, r2
 8005e70:	60bb      	str	r3, [r7, #8]
            /* Report error is cleared */
            if (AUTOMATION_EH_ReportingInterface.eh_report_callback_ptr != NULL)
 8005e72:	4b1f      	ldr	r3, [pc, #124]	; (8005ef0 <AUTOMATION_EH_ErrorSequencer+0x184>)
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00a      	beq.n	8005e90 <AUTOMATION_EH_ErrorSequencer+0x124>
            {
              /* Report error on interface */
              AUTOMATION_EH_ReportingInterface.eh_report_callback_ptr
 8005e7a:	4b1d      	ldr	r3, [pc, #116]	; (8005ef0 <AUTOMATION_EH_ErrorSequencer+0x184>)
 8005e7c:	685c      	ldr	r4, [r3, #4]
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	7a1a      	ldrb	r2, [r3, #8]
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	7a9b      	ldrb	r3, [r3, #10]
 8005e86:	20ff      	movs	r0, #255	; 0xff
 8005e88:	4611      	mov	r1, r2
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	47a0      	blx	r4
                  error_table_entry_ptr->error_id,
                  error_table_entry_ptr->error_severity,
                  (uint8_t)AUTOMATION_EH_ERROR_STATUS_SET);
            }
            /* Record in log book */
            logbook_entry.error_status = (uint8_t)AUTOMATION_EH_ERROR_STATUS_CLEARED;
 8005e90:	2300      	movs	r3, #0
 8005e92:	71fb      	strb	r3, [r7, #7]
 8005e94:	e001      	b.n	8005e9a <AUTOMATION_EH_ErrorSequencer+0x12e>
          }
          else
          {
            /* Both error bit and status is in reset - No need to take any action */
            error_table_entry_ptr = NULL;
 8005e96:	2300      	movs	r3, #0
 8005e98:	60bb      	str	r3, [r7, #8]
          }
        }
        /* Record in log book */
        if (error_table_entry_ptr != NULL)
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d010      	beq.n	8005ec2 <AUTOMATION_EH_ErrorSequencer+0x156>
        {
          logbook_entry.app_id = (uint8_t)AUTOMATION_EH_BIT_INTERFACE_ID;
 8005ea0:	23ff      	movs	r3, #255	; 0xff
 8005ea2:	713b      	strb	r3, [r7, #4]
          logbook_entry.error_id = error_table_entry_ptr->error_id;
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	7a1b      	ldrb	r3, [r3, #8]
 8005ea8:	717b      	strb	r3, [r7, #5]
          logbook_entry.error_severity = error_table_entry_ptr->error_severity;
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	7a9b      	ldrb	r3, [r3, #10]
 8005eae:	71bb      	strb	r3, [r7, #6]
          /* Gives the current system time in microsecond since start of counter.*/
          logbook_entry.timestamp = SYSTIMER_GetTime();
 8005eb0:	f7fd fc38 	bl	8003724 <SYSTIMER_GetTime>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	603b      	str	r3, [r7, #0]
          AUTOMATION_EH_WriteLogbook(logbook_entry);
 8005eb8:	463b      	mov	r3, r7
 8005eba:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005ebe:	f000 f881 	bl	8005fc4 <AUTOMATION_EH_WriteLogbook>
  {
    if ((AUTOMATION_EH_BitInterface_Word[error_words_count].error_word != 0U) ||
        (AUTOMATION_EH_BitInterface_Word[error_words_count].status_word != 0U))
    {
      /* Loop to scan all registered bits insider error word */
      for(bit_count = 0U; bit_count < 32U; bit_count++)
 8005ec2:	7bbb      	ldrb	r3, [r7, #14]
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	73bb      	strb	r3, [r7, #14]
 8005ec8:	7bbb      	ldrb	r3, [r7, #14]
 8005eca:	2b1f      	cmp	r3, #31
 8005ecc:	f67f af65 	bls.w	8005d9a <AUTOMATION_EH_ErrorSequencer+0x2e>
  uint8_t error_words_count,bit_count;
  AUTOMATION_EH_BIT_ERROR_TABLE_t *error_table_entry_ptr;
  AUTOMATION_EH_LOGBOOK_ENTRY_t logbook_entry;

  /* Loop to scan all registered bit interface error words */
  for(error_words_count=0U; error_words_count < AUTOMATION_NUM_INTERFACES; error_words_count++)
 8005ed0:	7bfb      	ldrb	r3, [r7, #15]
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	73fb      	strb	r3, [r7, #15]
 8005ed6:	7bfb      	ldrb	r3, [r7, #15]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	f43f af4d 	beq.w	8005d78 <AUTOMATION_EH_ErrorSequencer+0xc>
      } /* END Loop to scan all registered bits insider error word */
    } /* Error word or corresponding status word not set  */
  } /* END Loop to scan all registered bit interface error words */

  /* Read errors reported by App from temporary buffer and log it in log book and send through communication interface */
  AUTOMATION_AppInterface_ReadReportedErrors();
 8005ede:	f7ff fee1 	bl	8005ca4 <AUTOMATION_AppInterface_ReadReportedErrors>
}
 8005ee2:	3714      	adds	r7, #20
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd90      	pop	{r4, r7, pc}
 8005ee8:	200092ec 	.word	0x200092ec
 8005eec:	2000943c 	.word	0x2000943c
 8005ef0:	200092f4 	.word	0x200092f4

08005ef4 <AUTOMATION_EH_AppInterface_ReportError>:

/**
 * Automation Parameter set response in corresponding response buffer
 */
void AUTOMATION_EH_AppInterface_ReportError(uint8_t app_id, uint8_t error_id, AUTOMATION_EH_ERROR_SEVERITY_t error_severity,AUTOMATION_EH_ERROR_STATUS_t status)
{
 8005ef4:	b590      	push	{r4, r7, lr}
 8005ef6:	b087      	sub	sp, #28
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	4604      	mov	r4, r0
 8005efc:	4608      	mov	r0, r1
 8005efe:	4611      	mov	r1, r2
 8005f00:	461a      	mov	r2, r3
 8005f02:	4623      	mov	r3, r4
 8005f04:	71fb      	strb	r3, [r7, #7]
 8005f06:	4603      	mov	r3, r0
 8005f08:	71bb      	strb	r3, [r7, #6]
 8005f0a:	460b      	mov	r3, r1
 8005f0c:	717b      	strb	r3, [r7, #5]
 8005f0e:	4613      	mov	r3, r2
 8005f10:	713b      	strb	r3, [r7, #4]
  AUTOMATION_EH_LOGBOOK_ENTRY_t error;
  AUTOMATION_EH_LOGBOOK_ENTRY_t *logbook;
  if ((error_severity == AUTOMATION_EH_ERROR_SEVERITY_CRITICAL) ||
 8005f12:	797b      	ldrb	r3, [r7, #5]
 8005f14:	2b03      	cmp	r3, #3
 8005f16:	d002      	beq.n	8005f1e <AUTOMATION_EH_AppInterface_ReportError+0x2a>
 8005f18:	797b      	ldrb	r3, [r7, #5]
 8005f1a:	2b04      	cmp	r3, #4
 8005f1c:	d11d      	bne.n	8005f5a <AUTOMATION_EH_AppInterface_ReportError+0x66>
      (error_severity == AUTOMATION_EH_ERROR_SEVERITY_SAFETY_CRITICAL))
  {
    /* Critical error occurred - Need to report immediately */
    if (AUTOMATION_EH_ReportingInterface.eh_report_callback_ptr != NULL)
 8005f1e:	4b27      	ldr	r3, [pc, #156]	; (8005fbc <AUTOMATION_EH_AppInterface_ReportError+0xc8>)
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d006      	beq.n	8005f34 <AUTOMATION_EH_AppInterface_ReportError+0x40>
    {
      AUTOMATION_EH_ReportingInterface.eh_report_callback_ptr(app_id,error_id,(uint8_t)error_severity,(uint8_t)status);
 8005f26:	4b25      	ldr	r3, [pc, #148]	; (8005fbc <AUTOMATION_EH_AppInterface_ReportError+0xc8>)
 8005f28:	685c      	ldr	r4, [r3, #4]
 8005f2a:	79f8      	ldrb	r0, [r7, #7]
 8005f2c:	79b9      	ldrb	r1, [r7, #6]
 8005f2e:	797a      	ldrb	r2, [r7, #5]
 8005f30:	793b      	ldrb	r3, [r7, #4]
 8005f32:	47a0      	blx	r4
    }
    /* Record error in log book */
    error.app_id = app_id;
 8005f34:	79fb      	ldrb	r3, [r7, #7]
 8005f36:	743b      	strb	r3, [r7, #16]
    error.error_id = error_id;
 8005f38:	79bb      	ldrb	r3, [r7, #6]
 8005f3a:	747b      	strb	r3, [r7, #17]
    error.error_severity = (uint8_t)error_severity;
 8005f3c:	797b      	ldrb	r3, [r7, #5]
 8005f3e:	74bb      	strb	r3, [r7, #18]
    error.error_status = (uint8_t)status;
 8005f40:	793b      	ldrb	r3, [r7, #4]
 8005f42:	74fb      	strb	r3, [r7, #19]
    error.timestamp = SYSTIMER_GetTime();
 8005f44:	f7fd fbee 	bl	8003724 <SYSTIMER_GetTime>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	60fb      	str	r3, [r7, #12]
    AUTOMATION_EH_WriteLogbook(error);
 8005f4c:	f107 030c 	add.w	r3, r7, #12
 8005f50:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005f54:	f000 f836 	bl	8005fc4 <AUTOMATION_EH_WriteLogbook>
 8005f58:	e02c      	b.n	8005fb4 <AUTOMATION_EH_AppInterface_ReportError+0xc0>
  }
  else
  {
    /* Non critical error occurred - buffer it for processing */
    /* Overwriting can be possible */
    logbook = &AUTOMATION_EH_AppErrorBuf.error_logbook_ptr[AUTOMATION_EH_AppErrorBuf.write_index++];
 8005f5a:	4b19      	ldr	r3, [pc, #100]	; (8005fc0 <AUTOMATION_EH_AppInterface_ReportError+0xcc>)
 8005f5c:	685a      	ldr	r2, [r3, #4]
 8005f5e:	4b18      	ldr	r3, [pc, #96]	; (8005fc0 <AUTOMATION_EH_AppInterface_ReportError+0xcc>)
 8005f60:	785b      	ldrb	r3, [r3, #1]
 8005f62:	1c59      	adds	r1, r3, #1
 8005f64:	b2c8      	uxtb	r0, r1
 8005f66:	4916      	ldr	r1, [pc, #88]	; (8005fc0 <AUTOMATION_EH_AppInterface_ReportError+0xcc>)
 8005f68:	7048      	strb	r0, [r1, #1]
 8005f6a:	00db      	lsls	r3, r3, #3
 8005f6c:	4413      	add	r3, r2
 8005f6e:	617b      	str	r3, [r7, #20]
    if (AUTOMATION_EH_AppErrorBuf.write_index == AUTOMATION_EH_APPBUF_SIZE)
 8005f70:	4b13      	ldr	r3, [pc, #76]	; (8005fc0 <AUTOMATION_EH_AppInterface_ReportError+0xcc>)
 8005f72:	785b      	ldrb	r3, [r3, #1]
 8005f74:	2b05      	cmp	r3, #5
 8005f76:	d102      	bne.n	8005f7e <AUTOMATION_EH_AppInterface_ReportError+0x8a>
    {
      /* Temporary buffer is ring buffer */
      AUTOMATION_EH_AppErrorBuf.write_index = 0U;
 8005f78:	4b11      	ldr	r3, [pc, #68]	; (8005fc0 <AUTOMATION_EH_AppInterface_ReportError+0xcc>)
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	705a      	strb	r2, [r3, #1]
    }
    if (AUTOMATION_EH_AppErrorBuf.data_length < AUTOMATION_EH_APPBUF_SIZE)
 8005f7e:	4b10      	ldr	r3, [pc, #64]	; (8005fc0 <AUTOMATION_EH_AppInterface_ReportError+0xcc>)
 8005f80:	789b      	ldrb	r3, [r3, #2]
 8005f82:	2b04      	cmp	r3, #4
 8005f84:	d805      	bhi.n	8005f92 <AUTOMATION_EH_AppInterface_ReportError+0x9e>
    {
      AUTOMATION_EH_AppErrorBuf.data_length++;
 8005f86:	4b0e      	ldr	r3, [pc, #56]	; (8005fc0 <AUTOMATION_EH_AppInterface_ReportError+0xcc>)
 8005f88:	789b      	ldrb	r3, [r3, #2]
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	b2da      	uxtb	r2, r3
 8005f8e:	4b0c      	ldr	r3, [pc, #48]	; (8005fc0 <AUTOMATION_EH_AppInterface_ReportError+0xcc>)
 8005f90:	709a      	strb	r2, [r3, #2]
    }
    logbook->app_id = app_id;
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	79fa      	ldrb	r2, [r7, #7]
 8005f96:	711a      	strb	r2, [r3, #4]
    logbook->error_id = (uint8_t)error_id;
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	79ba      	ldrb	r2, [r7, #6]
 8005f9c:	715a      	strb	r2, [r3, #5]
    logbook->error_severity = (uint8_t)error_severity;
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	797a      	ldrb	r2, [r7, #5]
 8005fa2:	719a      	strb	r2, [r3, #6]
    logbook->error_status = (uint8_t)status;
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	793a      	ldrb	r2, [r7, #4]
 8005fa8:	71da      	strb	r2, [r3, #7]
    logbook->timestamp = SYSTIMER_GetTime();
 8005faa:	f7fd fbbb 	bl	8003724 <SYSTIMER_GetTime>
 8005fae:	4602      	mov	r2, r0
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	601a      	str	r2, [r3, #0]
  }
}
 8005fb4:	371c      	adds	r7, #28
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd90      	pop	{r4, r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	200092f4 	.word	0x200092f4
 8005fc0:	1fffcef4 	.word	0x1fffcef4

08005fc4 <AUTOMATION_EH_WriteLogbook>:
 * This API will record error entry in Error Log book
 * Critical errors     - logged in Log book Critical section     - Overwrite not possible
 * Info/Warning errors - logged in Log book Info/Warning section - Overwrite possible
 */
void AUTOMATION_EH_WriteLogbook(AUTOMATION_EH_LOGBOOK_ENTRY_t error)
{
 8005fc4:	b590      	push	{r4, r7, lr}
 8005fc6:	b085      	sub	sp, #20
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	463b      	mov	r3, r7
 8005fcc:	e883 0003 	stmia.w	r3, {r0, r1}
  AUTOMATION_EH_LOGBOOK_ENTRY_t * logbook;
  /* Check error severity & place accordingly in Log book */
  if ((error.error_severity == (uint8_t)AUTOMATION_EH_ERROR_SEVERITY_CRITICAL)||
 8005fd0:	79bb      	ldrb	r3, [r7, #6]
 8005fd2:	2b03      	cmp	r3, #3
 8005fd4:	d002      	beq.n	8005fdc <AUTOMATION_EH_WriteLogbook+0x18>
      (error.error_severity == (uint8_t)AUTOMATION_EH_ERROR_SEVERITY_SAFETY_CRITICAL))
 8005fd6:	79bb      	ldrb	r3, [r7, #6]
 */
void AUTOMATION_EH_WriteLogbook(AUTOMATION_EH_LOGBOOK_ENTRY_t error)
{
  AUTOMATION_EH_LOGBOOK_ENTRY_t * logbook;
  /* Check error severity & place accordingly in Log book */
  if ((error.error_severity == (uint8_t)AUTOMATION_EH_ERROR_SEVERITY_CRITICAL)||
 8005fd8:	2b04      	cmp	r3, #4
 8005fda:	d12b      	bne.n	8006034 <AUTOMATION_EH_WriteLogbook+0x70>
      (error.error_severity == (uint8_t)AUTOMATION_EH_ERROR_SEVERITY_SAFETY_CRITICAL))
  {
    if (AUTOMATION_EH_ErrorLogbook.cs_data_length < AUTOMATION_EH_LOGBOOK_CS_SIZE)
 8005fdc:	4b2e      	ldr	r3, [pc, #184]	; (8006098 <AUTOMATION_EH_WriteLogbook+0xd4>)
 8005fde:	789b      	ldrb	r3, [r3, #2]
 8005fe0:	2b09      	cmp	r3, #9
 8005fe2:	d818      	bhi.n	8006016 <AUTOMATION_EH_WriteLogbook+0x52>
    {
      /* Successfully logged the error */
      logbook = &AUTOMATION_EH_ErrorLogbook.error_logbook_ptr[AUTOMATION_EH_ErrorLogbook.cs_write_index++];
 8005fe4:	4b2c      	ldr	r3, [pc, #176]	; (8006098 <AUTOMATION_EH_WriteLogbook+0xd4>)
 8005fe6:	689a      	ldr	r2, [r3, #8]
 8005fe8:	4b2b      	ldr	r3, [pc, #172]	; (8006098 <AUTOMATION_EH_WriteLogbook+0xd4>)
 8005fea:	785b      	ldrb	r3, [r3, #1]
 8005fec:	1c59      	adds	r1, r3, #1
 8005fee:	b2c8      	uxtb	r0, r1
 8005ff0:	4929      	ldr	r1, [pc, #164]	; (8006098 <AUTOMATION_EH_WriteLogbook+0xd4>)
 8005ff2:	7048      	strb	r0, [r1, #1]
 8005ff4:	00db      	lsls	r3, r3, #3
 8005ff6:	4413      	add	r3, r2
 8005ff8:	60fb      	str	r3, [r7, #12]
      AUTOMATION_EH_ErrorLogbook.cs_data_length++;
 8005ffa:	4b27      	ldr	r3, [pc, #156]	; (8006098 <AUTOMATION_EH_WriteLogbook+0xd4>)
 8005ffc:	789b      	ldrb	r3, [r3, #2]
 8005ffe:	3301      	adds	r3, #1
 8006000:	b2da      	uxtb	r2, r3
 8006002:	4b25      	ldr	r3, [pc, #148]	; (8006098 <AUTOMATION_EH_WriteLogbook+0xd4>)
 8006004:	709a      	strb	r2, [r3, #2]
      if (AUTOMATION_EH_ErrorLogbook.cs_write_index == AUTOMATION_EH_LOGBOOK_CS_SIZE)
 8006006:	4b24      	ldr	r3, [pc, #144]	; (8006098 <AUTOMATION_EH_WriteLogbook+0xd4>)
 8006008:	785b      	ldrb	r3, [r3, #1]
 800600a:	2b0a      	cmp	r3, #10
 800600c:	d111      	bne.n	8006032 <AUTOMATION_EH_WriteLogbook+0x6e>
      {
        /* Log book Critical section ring buffer */
        AUTOMATION_EH_ErrorLogbook.cs_write_index = 0U;
 800600e:	4b22      	ldr	r3, [pc, #136]	; (8006098 <AUTOMATION_EH_WriteLogbook+0xd4>)
 8006010:	2200      	movs	r2, #0
 8006012:	705a      	strb	r2, [r3, #1]
  AUTOMATION_EH_LOGBOOK_ENTRY_t * logbook;
  /* Check error severity & place accordingly in Log book */
  if ((error.error_severity == (uint8_t)AUTOMATION_EH_ERROR_SEVERITY_CRITICAL)||
      (error.error_severity == (uint8_t)AUTOMATION_EH_ERROR_SEVERITY_SAFETY_CRITICAL))
  {
    if (AUTOMATION_EH_ErrorLogbook.cs_data_length < AUTOMATION_EH_LOGBOOK_CS_SIZE)
 8006014:	e02a      	b.n	800606c <AUTOMATION_EH_WriteLogbook+0xa8>
        AUTOMATION_EH_ErrorLogbook.cs_write_index = 0U;
      }
    }
    else
    {
      if (AUTOMATION_EH_ReportingInterface.eh_report_callback_ptr != NULL)
 8006016:	4b21      	ldr	r3, [pc, #132]	; (800609c <AUTOMATION_EH_WriteLogbook+0xd8>)
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d006      	beq.n	800602c <AUTOMATION_EH_WriteLogbook+0x68>
      {
        /* No Space to store new error entries - Report error on interface */
        AUTOMATION_EH_ReportingInterface.eh_report_callback_ptr((uint8_t)AUTOMATION_EH_BIT_INTERFACE_ID,
 800601e:	4b1f      	ldr	r3, [pc, #124]	; (800609c <AUTOMATION_EH_WriteLogbook+0xd8>)
 8006020:	685c      	ldr	r4, [r3, #4]
 8006022:	20ff      	movs	r0, #255	; 0xff
 8006024:	2109      	movs	r1, #9
 8006026:	2200      	movs	r2, #0
 8006028:	2301      	movs	r3, #1
 800602a:	47a0      	blx	r4
            (uint8_t)AUTOMATION_STATUS_LOGBOOK_CS_FULL,
            (uint8_t)AUTOMATION_EH_ERROR_SEVERITY_INFO,
            (uint8_t)AUTOMATION_EH_ERROR_STATUS_SET);
      }
      logbook = NULL;
 800602c:	2300      	movs	r3, #0
 800602e:	60fb      	str	r3, [r7, #12]
  AUTOMATION_EH_LOGBOOK_ENTRY_t * logbook;
  /* Check error severity & place accordingly in Log book */
  if ((error.error_severity == (uint8_t)AUTOMATION_EH_ERROR_SEVERITY_CRITICAL)||
      (error.error_severity == (uint8_t)AUTOMATION_EH_ERROR_SEVERITY_SAFETY_CRITICAL))
  {
    if (AUTOMATION_EH_ErrorLogbook.cs_data_length < AUTOMATION_EH_LOGBOOK_CS_SIZE)
 8006030:	e01c      	b.n	800606c <AUTOMATION_EH_WriteLogbook+0xa8>
 8006032:	e01b      	b.n	800606c <AUTOMATION_EH_WriteLogbook+0xa8>
      logbook = NULL;
    }
  }
  else
  {
    logbook = &AUTOMATION_EH_ErrorLogbook.error_logbook_ptr[AUTOMATION_EH_ErrorLogbook.info_write_index++];
 8006034:	4b18      	ldr	r3, [pc, #96]	; (8006098 <AUTOMATION_EH_WriteLogbook+0xd4>)
 8006036:	689a      	ldr	r2, [r3, #8]
 8006038:	4b17      	ldr	r3, [pc, #92]	; (8006098 <AUTOMATION_EH_WriteLogbook+0xd4>)
 800603a:	791b      	ldrb	r3, [r3, #4]
 800603c:	1c59      	adds	r1, r3, #1
 800603e:	b2c8      	uxtb	r0, r1
 8006040:	4915      	ldr	r1, [pc, #84]	; (8006098 <AUTOMATION_EH_WriteLogbook+0xd4>)
 8006042:	7108      	strb	r0, [r1, #4]
 8006044:	00db      	lsls	r3, r3, #3
 8006046:	4413      	add	r3, r2
 8006048:	60fb      	str	r3, [r7, #12]
    if (AUTOMATION_EH_ErrorLogbook.info_write_index == ((uint32_t)AUTOMATION_EH_LOGBOOK_INFO_SIZE << 1U))
 800604a:	4b13      	ldr	r3, [pc, #76]	; (8006098 <AUTOMATION_EH_WriteLogbook+0xd4>)
 800604c:	791b      	ldrb	r3, [r3, #4]
 800604e:	2b14      	cmp	r3, #20
 8006050:	d102      	bne.n	8006058 <AUTOMATION_EH_WriteLogbook+0x94>
    {
      /* Log book info section ring buffer */
      AUTOMATION_EH_ErrorLogbook.info_write_index = AUTOMATION_EH_LOGBOOK_CS_SIZE;
 8006052:	4b11      	ldr	r3, [pc, #68]	; (8006098 <AUTOMATION_EH_WriteLogbook+0xd4>)
 8006054:	220a      	movs	r2, #10
 8006056:	711a      	strb	r2, [r3, #4]
    }
    if (AUTOMATION_EH_ErrorLogbook.info_data_length < AUTOMATION_EH_LOGBOOK_INFO_SIZE)
 8006058:	4b0f      	ldr	r3, [pc, #60]	; (8006098 <AUTOMATION_EH_WriteLogbook+0xd4>)
 800605a:	795b      	ldrb	r3, [r3, #5]
 800605c:	2b09      	cmp	r3, #9
 800605e:	d805      	bhi.n	800606c <AUTOMATION_EH_WriteLogbook+0xa8>
    {
      AUTOMATION_EH_ErrorLogbook.info_data_length++;
 8006060:	4b0d      	ldr	r3, [pc, #52]	; (8006098 <AUTOMATION_EH_WriteLogbook+0xd4>)
 8006062:	795b      	ldrb	r3, [r3, #5]
 8006064:	3301      	adds	r3, #1
 8006066:	b2da      	uxtb	r2, r3
 8006068:	4b0b      	ldr	r3, [pc, #44]	; (8006098 <AUTOMATION_EH_WriteLogbook+0xd4>)
 800606a:	715a      	strb	r2, [r3, #5]
    }
  }

  if (logbook != NULL)
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d00e      	beq.n	8006090 <AUTOMATION_EH_WriteLogbook+0xcc>
  {
    logbook->app_id = error.app_id;
 8006072:	793a      	ldrb	r2, [r7, #4]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	711a      	strb	r2, [r3, #4]
    logbook->error_id = error.error_id;
 8006078:	797a      	ldrb	r2, [r7, #5]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	715a      	strb	r2, [r3, #5]
    logbook->error_severity = error.error_severity;
 800607e:	79ba      	ldrb	r2, [r7, #6]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	719a      	strb	r2, [r3, #6]
    logbook->error_status = error.error_status;
 8006084:	79fa      	ldrb	r2, [r7, #7]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	71da      	strb	r2, [r3, #7]
    logbook->timestamp = error.timestamp;
 800608a:	683a      	ldr	r2, [r7, #0]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	601a      	str	r2, [r3, #0]
  }
}
 8006090:	3714      	adds	r7, #20
 8006092:	46bd      	mov	sp, r7
 8006094:	bd90      	pop	{r4, r7, pc}
 8006096:	bf00      	nop
 8006098:	1fffcee8 	.word	0x1fffcee8
 800609c:	200092f4 	.word	0x200092f4

080060a0 <AUTOMATION_FB_RegisterFunctionBlock>:
#endif


/* register function block pointer */
AUTOMATION_STATUS_t AUTOMATION_FB_RegisterFunctionBlock(AUTOMATION_FB_HANDLE_t* const frame)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b085      	sub	sp, #20
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  AUTOMATION_STATUS_t status;
  if (AUTOMATION_Handle.fb_id >= (AUTOMATION_FB_APP_FUNCTION_BLOCKS + AUTOMATION_FB_ENABLED_FUNCTION_BLOCKS))
 80060a8:	4b0d      	ldr	r3, [pc, #52]	; (80060e0 <AUTOMATION_FB_RegisterFunctionBlock+0x40>)
 80060aa:	7bdb      	ldrb	r3, [r3, #15]
 80060ac:	2b02      	cmp	r3, #2
 80060ae:	d902      	bls.n	80060b6 <AUTOMATION_FB_RegisterFunctionBlock+0x16>
  {
    status = AUTOMATION_STATUS_NUM_FB_EXCEEDED;
 80060b0:	2307      	movs	r3, #7
 80060b2:	73fb      	strb	r3, [r7, #15]
 80060b4:	e00c      	b.n	80060d0 <AUTOMATION_FB_RegisterFunctionBlock+0x30>
  }
  else
  {
    AUTOMATION_FB_Table[AUTOMATION_Handle.fb_id++] = frame;
 80060b6:	4b0a      	ldr	r3, [pc, #40]	; (80060e0 <AUTOMATION_FB_RegisterFunctionBlock+0x40>)
 80060b8:	7bdb      	ldrb	r3, [r3, #15]
 80060ba:	1c5a      	adds	r2, r3, #1
 80060bc:	b2d1      	uxtb	r1, r2
 80060be:	4a08      	ldr	r2, [pc, #32]	; (80060e0 <AUTOMATION_FB_RegisterFunctionBlock+0x40>)
 80060c0:	73d1      	strb	r1, [r2, #15]
 80060c2:	4619      	mov	r1, r3
 80060c4:	4a07      	ldr	r2, [pc, #28]	; (80060e4 <AUTOMATION_FB_RegisterFunctionBlock+0x44>)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    status = AUTOMATION_STATUS_SUCCESS;
 80060cc:	2300      	movs	r3, #0
 80060ce:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80060d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3714      	adds	r7, #20
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr
 80060de:	bf00      	nop
 80060e0:	1fffcfdc 	.word	0x1fffcfdc
 80060e4:	2000942c 	.word	0x2000942c

080060e8 <AUTOMATION_FB_AddConnectionEntry>:
 */
AUTOMATION_STATUS_t AUTOMATION_FB_AddConnectionEntry(AUTOMATION_FB_HANDLE_t* const source_fb,
                                                     const uint8_t out_signal_num,
                                                     AUTOMATION_FB_HANDLE_t* const destination_fb,
                                                     const uint8_t in_signal_num)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b087      	sub	sp, #28
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	60f8      	str	r0, [r7, #12]
 80060f0:	607a      	str	r2, [r7, #4]
 80060f2:	461a      	mov	r2, r3
 80060f4:	460b      	mov	r3, r1
 80060f6:	72fb      	strb	r3, [r7, #11]
 80060f8:	4613      	mov	r3, r2
 80060fa:	72bb      	strb	r3, [r7, #10]
  AUTOMATION_STATUS_t status = AUTOMATION_STATUS_SUCCESS;
 80060fc:	2300      	movs	r3, #0
 80060fe:	75fb      	strb	r3, [r7, #23]
  if (0U == AUTOMATION_Handle.fb_connect_table_data_length)
 8006100:	4b27      	ldr	r3, [pc, #156]	; (80061a0 <AUTOMATION_FB_AddConnectionEntry+0xb8>)
 8006102:	7cdb      	ldrb	r3, [r3, #19]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d102      	bne.n	800610e <AUTOMATION_FB_AddConnectionEntry+0x26>
  {
    status = AUTOMATION_STATUS_CONNECT_TABLE_OVERFLOW;
 8006108:	2308      	movs	r3, #8
 800610a:	75fb      	strb	r3, [r7, #23]
 800610c:	e040      	b.n	8006190 <AUTOMATION_FB_AddConnectionEntry+0xa8>

  }
  else
  {
    if ((uint8_t) AUTOMATION_FB_CONNECT_TABLE_SIZE <= AUTOMATION_Handle.fb_connect_table_write_index)
 800610e:	4b24      	ldr	r3, [pc, #144]	; (80061a0 <AUTOMATION_FB_AddConnectionEntry+0xb8>)
 8006110:	7c5b      	ldrb	r3, [r3, #17]
 8006112:	2b11      	cmp	r3, #17
 8006114:	d902      	bls.n	800611c <AUTOMATION_FB_AddConnectionEntry+0x34>
    {
      AUTOMATION_Handle.fb_connect_table_write_index = 0U;
 8006116:	4b22      	ldr	r3, [pc, #136]	; (80061a0 <AUTOMATION_FB_AddConnectionEntry+0xb8>)
 8006118:	2200      	movs	r2, #0
 800611a:	745a      	strb	r2, [r3, #17]
    }
    AUTOMATION_FB_Connect_Table[AUTOMATION_Handle.fb_connect_table_write_index].source_fb = source_fb;
 800611c:	4b20      	ldr	r3, [pc, #128]	; (80061a0 <AUTOMATION_FB_AddConnectionEntry+0xb8>)
 800611e:	7c5b      	ldrb	r3, [r3, #17]
 8006120:	4619      	mov	r1, r3
 8006122:	4a20      	ldr	r2, [pc, #128]	; (80061a4 <AUTOMATION_FB_AddConnectionEntry+0xbc>)
 8006124:	460b      	mov	r3, r1
 8006126:	005b      	lsls	r3, r3, #1
 8006128:	440b      	add	r3, r1
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	4413      	add	r3, r2
 800612e:	68fa      	ldr	r2, [r7, #12]
 8006130:	601a      	str	r2, [r3, #0]
    AUTOMATION_FB_Connect_Table[AUTOMATION_Handle.fb_connect_table_write_index].out_signal_num = out_signal_num;
 8006132:	4b1b      	ldr	r3, [pc, #108]	; (80061a0 <AUTOMATION_FB_AddConnectionEntry+0xb8>)
 8006134:	7c5b      	ldrb	r3, [r3, #17]
 8006136:	4619      	mov	r1, r3
 8006138:	4a1a      	ldr	r2, [pc, #104]	; (80061a4 <AUTOMATION_FB_AddConnectionEntry+0xbc>)
 800613a:	460b      	mov	r3, r1
 800613c:	005b      	lsls	r3, r3, #1
 800613e:	440b      	add	r3, r1
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	4413      	add	r3, r2
 8006144:	3308      	adds	r3, #8
 8006146:	7afa      	ldrb	r2, [r7, #11]
 8006148:	701a      	strb	r2, [r3, #0]
    AUTOMATION_FB_Connect_Table[AUTOMATION_Handle.fb_connect_table_write_index].destination_fb = destination_fb;
 800614a:	4b15      	ldr	r3, [pc, #84]	; (80061a0 <AUTOMATION_FB_AddConnectionEntry+0xb8>)
 800614c:	7c5b      	ldrb	r3, [r3, #17]
 800614e:	4619      	mov	r1, r3
 8006150:	4a14      	ldr	r2, [pc, #80]	; (80061a4 <AUTOMATION_FB_AddConnectionEntry+0xbc>)
 8006152:	460b      	mov	r3, r1
 8006154:	005b      	lsls	r3, r3, #1
 8006156:	440b      	add	r3, r1
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	4413      	add	r3, r2
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	605a      	str	r2, [r3, #4]
    AUTOMATION_FB_Connect_Table[AUTOMATION_Handle.fb_connect_table_write_index].in_signal_num = in_signal_num;
 8006160:	4b0f      	ldr	r3, [pc, #60]	; (80061a0 <AUTOMATION_FB_AddConnectionEntry+0xb8>)
 8006162:	7c5b      	ldrb	r3, [r3, #17]
 8006164:	4619      	mov	r1, r3
 8006166:	4a0f      	ldr	r2, [pc, #60]	; (80061a4 <AUTOMATION_FB_AddConnectionEntry+0xbc>)
 8006168:	460b      	mov	r3, r1
 800616a:	005b      	lsls	r3, r3, #1
 800616c:	440b      	add	r3, r1
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	4413      	add	r3, r2
 8006172:	3308      	adds	r3, #8
 8006174:	7aba      	ldrb	r2, [r7, #10]
 8006176:	705a      	strb	r2, [r3, #1]

    AUTOMATION_Handle.fb_connect_table_write_index++;
 8006178:	4b09      	ldr	r3, [pc, #36]	; (80061a0 <AUTOMATION_FB_AddConnectionEntry+0xb8>)
 800617a:	7c5b      	ldrb	r3, [r3, #17]
 800617c:	3301      	adds	r3, #1
 800617e:	b2da      	uxtb	r2, r3
 8006180:	4b07      	ldr	r3, [pc, #28]	; (80061a0 <AUTOMATION_FB_AddConnectionEntry+0xb8>)
 8006182:	745a      	strb	r2, [r3, #17]
    AUTOMATION_Handle.fb_connect_table_data_length--;
 8006184:	4b06      	ldr	r3, [pc, #24]	; (80061a0 <AUTOMATION_FB_AddConnectionEntry+0xb8>)
 8006186:	7cdb      	ldrb	r3, [r3, #19]
 8006188:	3b01      	subs	r3, #1
 800618a:	b2da      	uxtb	r2, r3
 800618c:	4b04      	ldr	r3, [pc, #16]	; (80061a0 <AUTOMATION_FB_AddConnectionEntry+0xb8>)
 800618e:	74da      	strb	r2, [r3, #19]
  }
  return (status);
 8006190:	7dfb      	ldrb	r3, [r7, #23]
}
 8006192:	4618      	mov	r0, r3
 8006194:	371c      	adds	r7, #28
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr
 800619e:	bf00      	nop
 80061a0:	1fffcfdc 	.word	0x1fffcfdc
 80061a4:	200096a4 	.word	0x200096a4

080061a8 <AUTOMATION_FB_Connect>:

/*
 * Connect the the function block connection entries
 */
void AUTOMATION_FB_Connect()
{
 80061a8:	b490      	push	{r4, r7}
 80061aa:	b082      	sub	sp, #8
 80061ac:	af00      	add	r7, sp, #0
  uint8_t read_index = AUTOMATION_Handle.fb_connect_table_read_index;
 80061ae:	4b24      	ldr	r3, [pc, #144]	; (8006240 <AUTOMATION_FB_Connect+0x98>)
 80061b0:	7c9b      	ldrb	r3, [r3, #18]
 80061b2:	71fb      	strb	r3, [r7, #7]

  while (AUTOMATION_Handle.fb_connect_table_data_length != AUTOMATION_FB_CONNECT_TABLE_SIZE)
 80061b4:	e038      	b.n	8006228 <AUTOMATION_FB_Connect+0x80>
  {
    *AUTOMATION_FB_Connect_Table[read_index].destination_fb->input_ptr[AUTOMATION_FB_Connect_Table[read_index].in_signal_num] =
 80061b6:	79fa      	ldrb	r2, [r7, #7]
 80061b8:	4922      	ldr	r1, [pc, #136]	; (8006244 <AUTOMATION_FB_Connect+0x9c>)
 80061ba:	4613      	mov	r3, r2
 80061bc:	005b      	lsls	r3, r3, #1
 80061be:	4413      	add	r3, r2
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	440b      	add	r3, r1
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	6819      	ldr	r1, [r3, #0]
 80061c8:	79fa      	ldrb	r2, [r7, #7]
 80061ca:	481e      	ldr	r0, [pc, #120]	; (8006244 <AUTOMATION_FB_Connect+0x9c>)
 80061cc:	4613      	mov	r3, r2
 80061ce:	005b      	lsls	r3, r3, #1
 80061d0:	4413      	add	r3, r2
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	4403      	add	r3, r0
 80061d6:	3308      	adds	r3, #8
 80061d8:	785b      	ldrb	r3, [r3, #1]
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	440b      	add	r3, r1
 80061de:	6819      	ldr	r1, [r3, #0]
        AUTOMATION_FB_Connect_Table[read_index].source_fb->output_ptr[AUTOMATION_FB_Connect_Table[read_index].out_signal_num];
 80061e0:	79fa      	ldrb	r2, [r7, #7]
 80061e2:	4818      	ldr	r0, [pc, #96]	; (8006244 <AUTOMATION_FB_Connect+0x9c>)
 80061e4:	4613      	mov	r3, r2
 80061e6:	005b      	lsls	r3, r3, #1
 80061e8:	4413      	add	r3, r2
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	4403      	add	r3, r0
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	6858      	ldr	r0, [r3, #4]
 80061f2:	79fa      	ldrb	r2, [r7, #7]
 80061f4:	4c13      	ldr	r4, [pc, #76]	; (8006244 <AUTOMATION_FB_Connect+0x9c>)
 80061f6:	4613      	mov	r3, r2
 80061f8:	005b      	lsls	r3, r3, #1
 80061fa:	4413      	add	r3, r2
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	4423      	add	r3, r4
 8006200:	3308      	adds	r3, #8
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	4403      	add	r3, r0
 8006208:	681b      	ldr	r3, [r3, #0]
{
  uint8_t read_index = AUTOMATION_Handle.fb_connect_table_read_index;

  while (AUTOMATION_Handle.fb_connect_table_data_length != AUTOMATION_FB_CONNECT_TABLE_SIZE)
  {
    *AUTOMATION_FB_Connect_Table[read_index].destination_fb->input_ptr[AUTOMATION_FB_Connect_Table[read_index].in_signal_num] =
 800620a:	600b      	str	r3, [r1, #0]
        AUTOMATION_FB_Connect_Table[read_index].source_fb->output_ptr[AUTOMATION_FB_Connect_Table[read_index].out_signal_num];
    read_index++;
 800620c:	79fb      	ldrb	r3, [r7, #7]
 800620e:	3301      	adds	r3, #1
 8006210:	71fb      	strb	r3, [r7, #7]
    AUTOMATION_Handle.fb_connect_table_data_length++;
 8006212:	4b0b      	ldr	r3, [pc, #44]	; (8006240 <AUTOMATION_FB_Connect+0x98>)
 8006214:	7cdb      	ldrb	r3, [r3, #19]
 8006216:	3301      	adds	r3, #1
 8006218:	b2da      	uxtb	r2, r3
 800621a:	4b09      	ldr	r3, [pc, #36]	; (8006240 <AUTOMATION_FB_Connect+0x98>)
 800621c:	74da      	strb	r2, [r3, #19]
    if ((uint8_t) AUTOMATION_FB_CONNECT_TABLE_SIZE <= read_index)
 800621e:	79fb      	ldrb	r3, [r7, #7]
 8006220:	2b11      	cmp	r3, #17
 8006222:	d901      	bls.n	8006228 <AUTOMATION_FB_Connect+0x80>
    {
      read_index = 0U;
 8006224:	2300      	movs	r3, #0
 8006226:	71fb      	strb	r3, [r7, #7]
 */
void AUTOMATION_FB_Connect()
{
  uint8_t read_index = AUTOMATION_Handle.fb_connect_table_read_index;

  while (AUTOMATION_Handle.fb_connect_table_data_length != AUTOMATION_FB_CONNECT_TABLE_SIZE)
 8006228:	4b05      	ldr	r3, [pc, #20]	; (8006240 <AUTOMATION_FB_Connect+0x98>)
 800622a:	7cdb      	ldrb	r3, [r3, #19]
 800622c:	2b12      	cmp	r3, #18
 800622e:	d1c2      	bne.n	80061b6 <AUTOMATION_FB_Connect+0xe>
    if ((uint8_t) AUTOMATION_FB_CONNECT_TABLE_SIZE <= read_index)
    {
      read_index = 0U;
    }
  }
  AUTOMATION_Handle.fb_connect_table_read_index = read_index;
 8006230:	4a03      	ldr	r2, [pc, #12]	; (8006240 <AUTOMATION_FB_Connect+0x98>)
 8006232:	79fb      	ldrb	r3, [r7, #7]
 8006234:	7493      	strb	r3, [r2, #18]
}
 8006236:	3708      	adds	r7, #8
 8006238:	46bd      	mov	sp, r7
 800623a:	bc90      	pop	{r4, r7}
 800623c:	4770      	bx	lr
 800623e:	bf00      	nop
 8006240:	1fffcfdc 	.word	0x1fffcfdc
 8006244:	200096a4 	.word	0x200096a4

08006248 <AUTOMATION_FB_RampInit>:
  ramphandle_ptr->slewrate_end = ramphandle_ptr->slewrate_endset_t;
}

/* initialize ramp generator target values*/
void AUTOMATION_FB_RampInit(AUTOMATION_FB_HANDLE_t* const rampfb_ptr)
{
 8006248:	b480      	push	{r7}
 800624a:	b085      	sub	sp, #20
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  AUTOMATION_FB_RAMPGEN_t* ramphandle_ptr = rampfb_ptr->config_ptr;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	60fb      	str	r3, [r7, #12]
  ramphandle_ptr->out_set_t = ramphandle_ptr->startset_t;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	689a      	ldr	r2, [r3, #8]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	60da      	str	r2, [r3, #12]
}
 800625e:	3714      	adds	r7, #20
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <AUTOMATION_FB_LinearRamp>:

/*
 * generates the linear ramp
 */
void AUTOMATION_FB_LinearRamp(AUTOMATION_FB_RAMPGEN_t* const ramphandle_ptr)
{
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  ramphandle_ptr->counter_t = (ramphandle_ptr->counter * (*(ramphandle_ptr->scale_ptr))) >> AUTOMATION_Q15;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	699b      	ldr	r3, [r3, #24]
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	6952      	ldr	r2, [r2, #20]
 8006278:	6812      	ldr	r2, [r2, #0]
 800627a:	fb02 f303 	mul.w	r3, r2, r3
 800627e:	0bda      	lsrs	r2, r3, #15
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	61da      	str	r2, [r3, #28]
  /*Update the velocity reference value.*/
  if (ramphandle_ptr->index > ramphandle_ptr->counter_t)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6a1a      	ldr	r2, [r3, #32]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	69db      	ldr	r3, [r3, #28]
 800628c:	429a      	cmp	r2, r3
 800628e:	d91b      	bls.n	80062c8 <AUTOMATION_FB_LinearRamp+0x60>
  {
    if (*(ramphandle_ptr->endset_ptr) > ramphandle_ptr->out_set_t)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	429a      	cmp	r2, r3
 800629c:	dd05      	ble.n	80062aa <AUTOMATION_FB_LinearRamp+0x42>
    {
      ramphandle_ptr->out_set_t++;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	68db      	ldr	r3, [r3, #12]
 80062a2:	1c5a      	adds	r2, r3, #1
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	60da      	str	r2, [r3, #12]
 80062a8:	e00b      	b.n	80062c2 <AUTOMATION_FB_LinearRamp+0x5a>
    }
    else if (*(ramphandle_ptr->endset_ptr) < ramphandle_ptr->out_set_t)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	da04      	bge.n	80062c2 <AUTOMATION_FB_LinearRamp+0x5a>
    {
      ramphandle_ptr->out_set_t--;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	1e5a      	subs	r2, r3, #1
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	60da      	str	r2, [r3, #12]
    }
    else
    {

    }
    ramphandle_ptr->index = 0U;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	621a      	str	r2, [r3, #32]
  }
  ramphandle_ptr->index++;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6a1b      	ldr	r3, [r3, #32]
 80062cc:	1c5a      	adds	r2, r3, #1
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	621a      	str	r2, [r3, #32]
}
 80062d2:	370c      	adds	r7, #12
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <AUTOMATION_SM_RegisterStateMachine>:

/**
 * This function register Drive state machine handler.
 */
AUTOMATION_STATUS_t AUTOMATION_SM_RegisterStateMachine(AUTOMATION_SM_t* statemachine, uint8_t app_id)
{
 80062dc:	b480      	push	{r7}
 80062de:	b085      	sub	sp, #20
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	460b      	mov	r3, r1
 80062e6:	70fb      	strb	r3, [r7, #3]
  AUTOMATION_STATUS_t status;
  if (app_id > AUTOMATION_NUM_APPS)
 80062e8:	78fb      	ldrb	r3, [r7, #3]
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d902      	bls.n	80062f4 <AUTOMATION_SM_RegisterStateMachine+0x18>
  {
    status = AUTOMATION_STATUS_FAILURE;
 80062ee:	2301      	movs	r3, #1
 80062f0:	73fb      	strb	r3, [r7, #15]
 80062f2:	e006      	b.n	8006302 <AUTOMATION_SM_RegisterStateMachine+0x26>
  }
  else
  {
    /* Register Drive Statemachine interface */
    AUTOMATION_SM_Table[app_id] = statemachine;
 80062f4:	78fb      	ldrb	r3, [r7, #3]
 80062f6:	4906      	ldr	r1, [pc, #24]	; (8006310 <AUTOMATION_SM_RegisterStateMachine+0x34>)
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    status = AUTOMATION_STATUS_SUCCESS;
 80062fe:	2300      	movs	r3, #0
 8006300:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006302:	7bfb      	ldrb	r3, [r7, #15]
}
 8006304:	4618      	mov	r0, r3
 8006306:	3714      	adds	r7, #20
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr
 8006310:	20009438 	.word	0x20009438

08006314 <AUTOMATION_SM_RequestState>:
  return state;
}

/* request to change the state */
void AUTOMATION_SM_RequestState(AUTOMATION_SM_t* statemachine, uint8_t new_state)
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	460b      	mov	r3, r1
 800631e:	70fb      	strb	r3, [r7, #3]
  statemachine->requested_state = new_state;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	78fa      	ldrb	r2, [r7, #3]
 8006324:	725a      	strb	r2, [r3, #9]
  statemachine->transition_request = 1U;
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	7a93      	ldrb	r3, [r2, #10]
 800632a:	f043 0301 	orr.w	r3, r3, #1
 800632e:	7293      	strb	r3, [r2, #10]
}
 8006330:	370c      	adds	r7, #12
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr
 800633a:	bf00      	nop

0800633c <AUTOMATION_SM_Handler>:

/* Drive State machine scheduler */
void AUTOMATION_SM_Handler(AUTOMATION_SM_t * statemachine)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b082      	sub	sp, #8
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  if (NULL != statemachine)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d06f      	beq.n	800642a <AUTOMATION_SM_Handler+0xee>
  {
    if (statemachine->transition_request)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	0c1b      	lsrs	r3, r3, #16
 8006350:	f003 0301 	and.w	r3, r3, #1
 8006354:	b2db      	uxtb	r3, r3
 8006356:	2b00      	cmp	r3, #0
 8006358:	d053      	beq.n	8006402 <AUTOMATION_SM_Handler+0xc6>
    {
      /* New state was requested - execute the exit function of old state */
      if (NULL != statemachine->states[statemachine->current_state].state_exit_call)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	7a1b      	ldrb	r3, [r3, #8]
 8006362:	011b      	lsls	r3, r3, #4
 8006364:	4413      	add	r3, r2
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d00a      	beq.n	8006382 <AUTOMATION_SM_Handler+0x46>
      {
        statemachine->states[statemachine->current_state].state_exit_call((void*) statemachine->app_handler);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	7a1b      	ldrb	r3, [r3, #8]
 8006374:	011b      	lsls	r3, r3, #4
 8006376:	4413      	add	r3, r2
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	6852      	ldr	r2, [r2, #4]
 800637e:	4610      	mov	r0, r2
 8006380:	4798      	blx	r3
      }

      if (statemachine->current_state != statemachine->requested_state)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	7a1a      	ldrb	r2, [r3, #8]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	7a5b      	ldrb	r3, [r3, #9]
 800638a:	429a      	cmp	r2, r3
 800638c:	d033      	beq.n	80063f6 <AUTOMATION_SM_Handler+0xba>
      {
        /* change state */
        statemachine->current_state = statemachine->requested_state;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	7a5a      	ldrb	r2, [r3, #9]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	721a      	strb	r2, [r3, #8]
        /* execute the entry function of new state */
        if (NULL != statemachine->states[statemachine->current_state].state_entry_call)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	7a1b      	ldrb	r3, [r3, #8]
 800639e:	011b      	lsls	r3, r3, #4
 80063a0:	4413      	add	r3, r2
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d00a      	beq.n	80063be <AUTOMATION_SM_Handler+0x82>
        {
          statemachine->states[statemachine->current_state].state_entry_call((void*) statemachine->app_handler);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	7a1b      	ldrb	r3, [r3, #8]
 80063b0:	011b      	lsls	r3, r3, #4
 80063b2:	4413      	add	r3, r2
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	6852      	ldr	r2, [r2, #4]
 80063ba:	4610      	mov	r0, r2
 80063bc:	4798      	blx	r3
        }

        if (NULL != statemachine->states[statemachine->current_state].state_action_call)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	7a1b      	ldrb	r3, [r3, #8]
 80063c6:	011b      	lsls	r3, r3, #4
 80063c8:	4413      	add	r3, r2
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d012      	beq.n	80063f6 <AUTOMATION_SM_Handler+0xba>
        {
          if (statemachine->execute_action)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	0c5b      	lsrs	r3, r3, #17
 80063d6:	f003 0301 	and.w	r3, r3, #1
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d00a      	beq.n	80063f6 <AUTOMATION_SM_Handler+0xba>
          {
            /* immediate execution of action function was requested
             execute the action function of new state */
            statemachine->states[statemachine->current_state].state_action_call((void*) statemachine->app_handler);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	7a1b      	ldrb	r3, [r3, #8]
 80063e8:	011b      	lsls	r3, r3, #4
 80063ea:	4413      	add	r3, r2
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	6852      	ldr	r2, [r2, #4]
 80063f2:	4610      	mov	r0, r2
 80063f4:	4798      	blx	r3
          }
        }
      }
      statemachine->transition_request = 0U;
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	7a93      	ldrb	r3, [r2, #10]
 80063fa:	f36f 0300 	bfc	r3, #0, #1
 80063fe:	7293      	strb	r3, [r2, #10]
 8006400:	e013      	b.n	800642a <AUTOMATION_SM_Handler+0xee>
    }
    else
    {
      if (NULL != statemachine->states[statemachine->current_state].state_action_call)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	7a1b      	ldrb	r3, [r3, #8]
 800640a:	011b      	lsls	r3, r3, #4
 800640c:	4413      	add	r3, r2
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d00a      	beq.n	800642a <AUTOMATION_SM_Handler+0xee>
      {
        statemachine->states[statemachine->current_state].state_action_call((void*) statemachine->app_handler);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	7a1b      	ldrb	r3, [r3, #8]
 800641c:	011b      	lsls	r3, r3, #4
 800641e:	4413      	add	r3, r2
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	6852      	ldr	r2, [r2, #4]
 8006426:	4610      	mov	r0, r2
 8006428:	4798      	blx	r3
      }
    }

  }
}
 800642a:	3708      	adds	r7, #8
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}

08006430 <ANALOG_IO_Init>:
 * Input Parameter  : Handler Pointer pointing to APP data structure.
 * Output Parameter : ANALOG_IO_STATUS_t (ANALOG_IO APP initialization status).
 */

ANALOG_IO_STATUS_t ANALOG_IO_Init(const ANALOG_IO_t *const handle)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b082      	sub	sp, #8
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("ANALOG_IO_Init: Passed handler is a null pointer", handler != NULL);
  if (*(handle->state) == ANALOG_IO_STATE_NOT_INITIALIZED)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d10a      	bne.n	8006458 <ANALOG_IO_Init+0x28>
  {
    if (handle->config_ptr != NULL)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d002      	beq.n	8006450 <ANALOG_IO_Init+0x20>
    {
      /* Instance specific initialization function call*/
      handle->config_ptr();
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4798      	blx	r3
    }
    /* Set the state variable to initialized state*/
    *(handle->state) = ANALOG_IO_STATE_INITIALIZED;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	2201      	movs	r2, #1
 8006456:	701a      	strb	r2, [r3, #0]
  }
  return (ANALOG_IO_STATUS_OK);
 8006458:	2300      	movs	r3, #0
}
 800645a:	4618      	mov	r0, r3
 800645c:	3708      	adds	r7, #8
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop

08006464 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006464:	b480      	push	{r7}
 8006466:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006468:	4b04      	ldr	r3, [pc, #16]	; (800647c <__NVIC_GetPriorityGrouping+0x18>)
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006470:	0a1b      	lsrs	r3, r3, #8
}
 8006472:	4618      	mov	r0, r3
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr
 800647c:	e000ed00 	.word	0xe000ed00

08006480 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
 8006486:	4603      	mov	r3, r0
 8006488:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800648a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800648e:	2b00      	cmp	r3, #0
 8006490:	db0b      	blt.n	80064aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8006492:	4908      	ldr	r1, [pc, #32]	; (80064b4 <__NVIC_EnableIRQ+0x34>)
 8006494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006498:	095b      	lsrs	r3, r3, #5
 800649a:	79fa      	ldrb	r2, [r7, #7]
 800649c:	f002 021f 	and.w	r2, r2, #31
 80064a0:	2001      	movs	r0, #1
 80064a2:	fa00 f202 	lsl.w	r2, r0, r2
 80064a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80064aa:	370c      	adds	r7, #12
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr
 80064b4:	e000e100 	.word	0xe000e100

080064b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	4603      	mov	r3, r0
 80064c0:	6039      	str	r1, [r7, #0]
 80064c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80064c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	db0a      	blt.n	80064e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064cc:	490d      	ldr	r1, [pc, #52]	; (8006504 <__NVIC_SetPriority+0x4c>)
 80064ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064d2:	683a      	ldr	r2, [r7, #0]
 80064d4:	b2d2      	uxtb	r2, r2
 80064d6:	0092      	lsls	r2, r2, #2
 80064d8:	b2d2      	uxtb	r2, r2
 80064da:	440b      	add	r3, r1
 80064dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80064e0:	e00a      	b.n	80064f8 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064e2:	4909      	ldr	r1, [pc, #36]	; (8006508 <__NVIC_SetPriority+0x50>)
 80064e4:	79fb      	ldrb	r3, [r7, #7]
 80064e6:	f003 030f 	and.w	r3, r3, #15
 80064ea:	3b04      	subs	r3, #4
 80064ec:	683a      	ldr	r2, [r7, #0]
 80064ee:	b2d2      	uxtb	r2, r2
 80064f0:	0092      	lsls	r2, r2, #2
 80064f2:	b2d2      	uxtb	r2, r2
 80064f4:	440b      	add	r3, r1
 80064f6:	761a      	strb	r2, [r3, #24]
  }
}
 80064f8:	370c      	adds	r7, #12
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop
 8006504:	e000e100 	.word	0xe000e100
 8006508:	e000ed00 	.word	0xe000ed00

0800650c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800650c:	b480      	push	{r7}
 800650e:	b089      	sub	sp, #36	; 0x24
 8006510:	af00      	add	r7, sp, #0
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	60b9      	str	r1, [r7, #8]
 8006516:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f003 0307 	and.w	r3, r3, #7
 800651e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	f1c3 0307 	rsb	r3, r3, #7
 8006526:	2b06      	cmp	r3, #6
 8006528:	bf28      	it	cs
 800652a:	2306      	movcs	r3, #6
 800652c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800652e:	69fb      	ldr	r3, [r7, #28]
 8006530:	3306      	adds	r3, #6
 8006532:	2b06      	cmp	r3, #6
 8006534:	d902      	bls.n	800653c <NVIC_EncodePriority+0x30>
 8006536:	69fb      	ldr	r3, [r7, #28]
 8006538:	3b01      	subs	r3, #1
 800653a:	e000      	b.n	800653e <NVIC_EncodePriority+0x32>
 800653c:	2300      	movs	r3, #0
 800653e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	2201      	movs	r2, #1
 8006544:	fa02 f303 	lsl.w	r3, r2, r3
 8006548:	1e5a      	subs	r2, r3, #1
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	401a      	ands	r2, r3
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	2101      	movs	r1, #1
 8006556:	fa01 f303 	lsl.w	r3, r1, r3
 800655a:	1e59      	subs	r1, r3, #1
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8006560:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8006562:	4618      	mov	r0, r3
 8006564:	3724      	adds	r7, #36	; 0x24
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr
 800656e:	bf00      	nop

08006570 <XMC_VADC_GLOBAL_BackgroundTriggerConversion>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundTriggerConversion(XMC_VADC_GLOBAL_t *const global_ptr)
{
 8006570:	b480      	push	{r7}
 8006572:	b083      	sub	sp, #12
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundTriggerConversion:Wrong Module Pointer", (global_ptr == VADC))
  global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_LDEV_Msk;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800657e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 8006588:	370c      	adds	r7, #12
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr
 8006592:	bf00      	nop

08006594 <XMC_VADC_GLOBAL_BackgroundAddChannelToSequence>:
 *  XMC_VADC_GLOBAL_BackgroundAddMultipleChannels()<BR>
 */
__STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(XMC_VADC_GLOBAL_t *const global_ptr,
                                                                    const uint32_t grp_num,
                                                                    const uint32_t ch_num)
{
 8006594:	b480      	push	{r7}
 8006596:	b085      	sub	sp, #20
 8006598:	af00      	add	r7, sp, #0
 800659a:	60f8      	str	r0, [r7, #12]
 800659c:	60b9      	str	r1, [r7, #8]
 800659e:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Group Number",((grp_num) < XMC_VADC_MAXIMUM_NUM_GROUPS))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Channel Number",
             ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))

  global_ptr->BRSSEL[grp_num] |= (uint32_t)((uint32_t)1 << ch_num);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	68ba      	ldr	r2, [r7, #8]
 80065a4:	3260      	adds	r2, #96	; 0x60
 80065a6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2101      	movs	r1, #1
 80065ae:	fa01 f303 	lsl.w	r3, r1, r3
 80065b2:	ea42 0103 	orr.w	r1, r2, r3
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	68ba      	ldr	r2, [r7, #8]
 80065ba:	3260      	adds	r2, #96	; 0x60
 80065bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80065c0:	3714      	adds	r7, #20
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr
 80065ca:	bf00      	nop

080065cc <XMC_VADC_GROUP_ResultInit>:
 * XMC_VADC_GROUP_AddResultToFifo()<BR> XMC_VADC_GROUP_EnableResultEvent()<br> XMC_VADC_GROUP_DisableResultEvent()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_ResultInit(XMC_VADC_GROUP_t *const group_ptr,
                                               const uint32_t res_reg_num,
                                               const XMC_VADC_RESULT_CONFIG_t *config)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b085      	sub	sp, #20
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	60b9      	str	r1, [r7, #8]
 80065d6:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_ResultInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->RCR[res_reg_num] = config->g_rcr;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6819      	ldr	r1, [r3, #0]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	68ba      	ldr	r2, [r7, #8]
 80065e0:	32a0      	adds	r2, #160	; 0xa0
 80065e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 80065e6:	3714      	adds	r7, #20
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <XMC_VADC_GROUP_GetResult>:
 * \par<b>Related APIs:</b><br>
 * XMC_VADC_GROUP_GetDetailedResult().
 */
__STATIC_INLINE XMC_VADC_RESULT_SIZE_t XMC_VADC_GROUP_GetResult(XMC_VADC_GROUP_t *const group_ptr, 
                                                                const uint32_t res_reg)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b083      	sub	sp, #12
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))

  return ((XMC_VADC_RESULT_SIZE_t)group_ptr->RES[res_reg]);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	683a      	ldr	r2, [r7, #0]
 80065fe:	32c0      	adds	r2, #192	; 0xc0
 8006600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006604:	b29b      	uxth	r3, r3
}
 8006606:	4618      	mov	r0, r3
 8006608:	370c      	adds	r7, #12
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr
 8006612:	bf00      	nop

08006614 <ADC_MEASUREMENT_Init>:
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Initialization routine to call ADC LLD API's */
ADC_MEASUREMENT_STATUS_t ADC_MEASUREMENT_Init(ADC_MEASUREMENT_t *const handle_ptr)
{
 8006614:	b590      	push	{r4, r7, lr}
 8006616:	b085      	sub	sp, #20
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  uint8_t j;
  ADC_MEASUREMENT_STATUS_t status;

  XMC_ASSERT("ADC_MEASUREMENT_Init:Invalid handle_ptr", (handle_ptr != NULL))

  if (ADC_MEASUREMENT_STATUS_UNINITIALIZED == handle_ptr->init_state)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	7e1b      	ldrb	r3, [r3, #24]
 8006620:	2b02      	cmp	r3, #2
 8006622:	f040 80a7 	bne.w	8006774 <ADC_MEASUREMENT_Init+0x160>
  {
    /* Call the function to initialise Clock and ADC global functional units*/
    status = (ADC_MEASUREMENT_STATUS_t) GLOBAL_ADC_Init(handle_ptr->global_handle);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	4618      	mov	r0, r3
 800662c:	f7fe ff08 	bl	8005440 <GLOBAL_ADC_Init>
 8006630:	4603      	mov	r3, r0
 8006632:	73bb      	strb	r3, [r7, #14]
  
    /*Initialize the Global Conversion class 0*/
    XMC_VADC_GLOBAL_InputClassInit(handle_ptr->global_handle->module_ptr,*handle_ptr->iclass_config_handle,
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	695a      	ldr	r2, [r3, #20]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	4610      	mov	r0, r2
 8006640:	6819      	ldr	r1, [r3, #0]
 8006642:	2200      	movs	r2, #0
 8006644:	2300      	movs	r3, #0
 8006646:	f7fb fdb5 	bl	80021b4 <XMC_VADC_GLOBAL_InputClassInit>
    XMC_VADC_GLOBAL_InputClassInit(handle_ptr->global_handle->module_ptr,*handle_ptr->iclass_config_handle,
    		                              XMC_VADC_GROUP_CONV_STD,ADC_MEASUREMENT_ICLASS_NUM_XMC11);
#endif
  
    /* Initialize the Background Scan hardware */
    XMC_VADC_GLOBAL_BackgroundInit(handle_ptr->global_handle->module_ptr, handle_ptr->backgnd_config_handle);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	68db      	ldr	r3, [r3, #12]
 800664e:	695a      	ldr	r2, [r3, #20]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	4610      	mov	r0, r2
 8006656:	4619      	mov	r1, r3
 8006658:	f7fb fed0 	bl	80023fc <XMC_VADC_GLOBAL_BackgroundInit>
#if (XMC_VADC_GROUP_AVAILABLE == 0U)
    /* Initialize the global result register */
    XMC_VADC_GLOBAL_ResultInit(handle_ptr->global_handle->module_ptr,handle_ptr->array->res_handle);
#endif

    for (j = (uint8_t)0; j < (uint8_t)ADC_MEASUREMENT_MAXCHANNELS; j++)
 800665c:	2300      	movs	r3, #0
 800665e:	73fb      	strb	r3, [r7, #15]
 8006660:	e03c      	b.n	80066dc <ADC_MEASUREMENT_Init+0xc8>
    {
      indexed = handle_ptr->array->channel_array[j];
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	7bfa      	ldrb	r2, [r7, #15]
 8006668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800666c:	60bb      	str	r3, [r7, #8]
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
      /* Initialize for configured channels*/
      XMC_VADC_GROUP_ChannelInit(indexed->group_handle,(uint32_t)indexed->ch_num, indexed->ch_handle);
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	689a      	ldr	r2, [r3, #8]
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	7c5b      	ldrb	r3, [r3, #17]
 8006676:	4619      	mov	r1, r3
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4610      	mov	r0, r2
 800667e:	461a      	mov	r2, r3
 8006680:	f7fb ff3a 	bl	80024f8 <XMC_VADC_GROUP_ChannelInit>
  
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	689a      	ldr	r2, [r3, #8]
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	789b      	ldrb	r3, [r3, #2]
 800668e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8006692:	b2db      	uxtb	r3, r3
 8006694:	4619      	mov	r1, r3
                                indexed->res_handle);
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	685b      	ldr	r3, [r3, #4]
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
      /* Initialize for configured channels*/
      XMC_VADC_GROUP_ChannelInit(indexed->group_handle,(uint32_t)indexed->ch_num, indexed->ch_handle);
  
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
 800669a:	4610      	mov	r0, r2
 800669c:	461a      	mov	r2, r3
 800669e:	f7ff ff95 	bl	80065cc <XMC_VADC_GROUP_ResultInit>
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	695a      	ldr	r2, [r3, #20]
                                                     (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	7c1b      	ldrb	r3, [r3, #16]
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 80066ac:	4619      	mov	r1, r3
                                                     (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	7c5b      	ldrb	r3, [r3, #17]
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 80066b2:	4610      	mov	r0, r2
 80066b4:	461a      	mov	r2, r3
 80066b6:	f7ff ff6d 	bl	8006594 <XMC_VADC_GLOBAL_BackgroundAddChannelToSequence>
                                                     (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);

#ifdef ADC_MEASUREMENT_ANALOG_IO_USED
      /* ANALOG_IO initialization for the channel*/
      if(indexed->analog_io_config != NULL)
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	68db      	ldr	r3, [r3, #12]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d009      	beq.n	80066d6 <ADC_MEASUREMENT_Init+0xc2>
      {
        status |= (ADC_MEASUREMENT_STATUS_t) ANALOG_IO_Init(indexed->analog_io_config);
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	68db      	ldr	r3, [r3, #12]
 80066c6:	4618      	mov	r0, r3
 80066c8:	f7ff feb2 	bl	8006430 <ANALOG_IO_Init>
 80066cc:	4603      	mov	r3, r0
 80066ce:	461a      	mov	r2, r3
 80066d0:	7bbb      	ldrb	r3, [r7, #14]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	73bb      	strb	r3, [r7, #14]
#if (XMC_VADC_GROUP_AVAILABLE == 0U)
    /* Initialize the global result register */
    XMC_VADC_GLOBAL_ResultInit(handle_ptr->global_handle->module_ptr,handle_ptr->array->res_handle);
#endif

    for (j = (uint8_t)0; j < (uint8_t)ADC_MEASUREMENT_MAXCHANNELS; j++)
 80066d6:	7bfb      	ldrb	r3, [r7, #15]
 80066d8:	3301      	adds	r3, #1
 80066da:	73fb      	strb	r3, [r7, #15]
 80066dc:	7bfb      	ldrb	r3, [r7, #15]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d0bf      	beq.n	8006662 <ADC_MEASUREMENT_Init+0x4e>
        status |= (ADC_MEASUREMENT_STATUS_t) ANALOG_IO_Init(indexed->analog_io_config);
      }
#endif
    }
#if(UC_SERIES != XMC11)
    if ((handle_ptr->backgnd_config_handle->req_src_interrupt) && (handle_ptr->req_src_intr_handle != NULL ))
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	7a1b      	ldrb	r3, [r3, #8]
 80066e8:	f003 0308 	and.w	r3, r3, #8
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d02c      	beq.n	800674c <ADC_MEASUREMENT_Init+0x138>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	691b      	ldr	r3, [r3, #16]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d028      	beq.n	800674c <ADC_MEASUREMENT_Init+0x138>
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	b2dc      	uxtb	r4, r3
 8006702:	f7ff feaf 	bl	8006464 <__NVIC_GetPriorityGrouping>
 8006706:	4601      	mov	r1, r0
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	691b      	ldr	r3, [r3, #16]
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 800670c:	685a      	ldr	r2, [r3, #4]
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	691b      	ldr	r3, [r3, #16]
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	4608      	mov	r0, r1
 8006716:	4611      	mov	r1, r2
 8006718:	461a      	mov	r2, r3
 800671a:	f7ff fef7 	bl	800650c <NVIC_EncodePriority>
 800671e:	4602      	mov	r2, r0
 8006720:	b263      	sxtb	r3, r4
 8006722:	4618      	mov	r0, r3
 8006724:	4611      	mov	r1, r2
 8006726:	f7ff fec7 	bl	80064b8 <__NVIC_SetPriority>
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
#endif
      /* Connect background Request Source Event to NVIC node */
      XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(handle_ptr->global_handle->module_ptr,
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	695a      	ldr	r2, [r3, #20]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	7e5b      	ldrb	r3, [r3, #25]
 8006734:	4610      	mov	r0, r2
 8006736:	4619      	mov	r1, r3
 8006738:	f7fb fd90 	bl	800225c <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode>
    		                                         (XMC_VADC_SR_t) handle_ptr->srv_req_node);
    
      /* Enable Background Scan Request source IRQ */
      NVIC_EnableIRQ((IRQn_Type)handle_ptr->req_src_intr_handle->node_id);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	691b      	ldr	r3, [r3, #16]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	b2db      	uxtb	r3, r3
 8006744:	b25b      	sxtb	r3, r3
 8006746:	4618      	mov	r0, r3
 8006748:	f7ff fe9a 	bl	8006480 <__NVIC_EnableIRQ>
    /* Enable Background Scan Request source IRQ */
    NVIC_EnableIRQ((IRQn_Type)handle_ptr->result_intr_handle->node_id);
#endif
#endif
    /* Mux Configuration is done*/
    if (handle_ptr->mux_config != NULL)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	695b      	ldr	r3, [r3, #20]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d002      	beq.n	800675a <ADC_MEASUREMENT_Init+0x146>
    {
    	(handle_ptr->mux_config)();
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	695b      	ldr	r3, [r3, #20]
 8006758:	4798      	blx	r3
    }
  
    if (handle_ptr->start_conversion != (bool)false)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	7e9b      	ldrb	r3, [r3, #26]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d005      	beq.n	800676e <ADC_MEASUREMENT_Init+0x15a>
    {
      /* Start conversion manually using load event trigger*/
      XMC_VADC_GLOBAL_BackgroundTriggerConversion(handle_ptr->global_handle->module_ptr);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	68db      	ldr	r3, [r3, #12]
 8006766:	695b      	ldr	r3, [r3, #20]
 8006768:	4618      	mov	r0, r3
 800676a:	f7ff ff01 	bl	8006570 <XMC_VADC_GLOBAL_BackgroundTriggerConversion>
    }
    handle_ptr->init_state = status;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	7bba      	ldrb	r2, [r7, #14]
 8006772:	761a      	strb	r2, [r3, #24]
  }
  return (handle_ptr->init_state);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	7e1b      	ldrb	r3, [r3, #24]
}
 8006778:	4618      	mov	r0, r3
 800677a:	3714      	adds	r7, #20
 800677c:	46bd      	mov	sp, r7
 800677e:	bd90      	pop	{r4, r7, pc}

08006780 <ADC_MEASUREMENT_GetResult>:
}
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
#if(XMC_VADC_GROUP_AVAILABLE == 1U)
/* This API will get the result of a conversion for a specific channel*/
XMC_VADC_RESULT_SIZE_t ADC_MEASUREMENT_GetResult(ADC_MEASUREMENT_CHANNEL_t *const handle_ptr)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b084      	sub	sp, #16
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  XMC_VADC_RESULT_SIZE_t result;

  XMC_ASSERT("ADC_MEASUREMENT_GetResult:Invalid handle_ptr", (handle_ptr != NULL))

  result = XMC_VADC_GROUP_GetResult(handle_ptr->group_handle, handle_ptr->ch_handle->result_reg_number);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	689a      	ldr	r2, [r3, #8]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	789b      	ldrb	r3, [r3, #2]
 8006792:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8006796:	b2db      	uxtb	r3, r3
 8006798:	4610      	mov	r0, r2
 800679a:	4619      	mov	r1, r3
 800679c:	f7ff ff28 	bl	80065f0 <XMC_VADC_GROUP_GetResult>
 80067a0:	4603      	mov	r3, r0
 80067a2:	81fb      	strh	r3, [r7, #14]

  return (result);
 80067a4:	89fb      	ldrh	r3, [r7, #14]
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3710      	adds	r7, #16
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop

080067b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80067b0:	b480      	push	{r7}
 80067b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80067b4:	4b04      	ldr	r3, [pc, #16]	; (80067c8 <__NVIC_GetPriorityGrouping+0x18>)
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80067bc:	0a1b      	lsrs	r3, r3, #8
}
 80067be:	4618      	mov	r0, r3
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr
 80067c8:	e000ed00 	.word	0xe000ed00

080067cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b083      	sub	sp, #12
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	4603      	mov	r3, r0
 80067d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80067d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	db0b      	blt.n	80067f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80067de:	4908      	ldr	r1, [pc, #32]	; (8006800 <__NVIC_EnableIRQ+0x34>)
 80067e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067e4:	095b      	lsrs	r3, r3, #5
 80067e6:	79fa      	ldrb	r2, [r7, #7]
 80067e8:	f002 021f 	and.w	r2, r2, #31
 80067ec:	2001      	movs	r0, #1
 80067ee:	fa00 f202 	lsl.w	r2, r0, r2
 80067f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80067f6:	370c      	adds	r7, #12
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr
 8006800:	e000e100 	.word	0xe000e100

08006804 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
 800680a:	4603      	mov	r3, r0
 800680c:	6039      	str	r1, [r7, #0]
 800680e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006814:	2b00      	cmp	r3, #0
 8006816:	db0a      	blt.n	800682e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006818:	490d      	ldr	r1, [pc, #52]	; (8006850 <__NVIC_SetPriority+0x4c>)
 800681a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800681e:	683a      	ldr	r2, [r7, #0]
 8006820:	b2d2      	uxtb	r2, r2
 8006822:	0092      	lsls	r2, r2, #2
 8006824:	b2d2      	uxtb	r2, r2
 8006826:	440b      	add	r3, r1
 8006828:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 800682c:	e00a      	b.n	8006844 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800682e:	4909      	ldr	r1, [pc, #36]	; (8006854 <__NVIC_SetPriority+0x50>)
 8006830:	79fb      	ldrb	r3, [r7, #7]
 8006832:	f003 030f 	and.w	r3, r3, #15
 8006836:	3b04      	subs	r3, #4
 8006838:	683a      	ldr	r2, [r7, #0]
 800683a:	b2d2      	uxtb	r2, r2
 800683c:	0092      	lsls	r2, r2, #2
 800683e:	b2d2      	uxtb	r2, r2
 8006840:	440b      	add	r3, r1
 8006842:	761a      	strb	r2, [r3, #24]
  }
}
 8006844:	370c      	adds	r7, #12
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr
 800684e:	bf00      	nop
 8006850:	e000e100 	.word	0xe000e100
 8006854:	e000ed00 	.word	0xe000ed00

08006858 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006858:	b480      	push	{r7}
 800685a:	b089      	sub	sp, #36	; 0x24
 800685c:	af00      	add	r7, sp, #0
 800685e:	60f8      	str	r0, [r7, #12]
 8006860:	60b9      	str	r1, [r7, #8]
 8006862:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f003 0307 	and.w	r3, r3, #7
 800686a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	f1c3 0307 	rsb	r3, r3, #7
 8006872:	2b06      	cmp	r3, #6
 8006874:	bf28      	it	cs
 8006876:	2306      	movcs	r3, #6
 8006878:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	3306      	adds	r3, #6
 800687e:	2b06      	cmp	r3, #6
 8006880:	d902      	bls.n	8006888 <NVIC_EncodePriority+0x30>
 8006882:	69fb      	ldr	r3, [r7, #28]
 8006884:	3b01      	subs	r3, #1
 8006886:	e000      	b.n	800688a <NVIC_EncodePriority+0x32>
 8006888:	2300      	movs	r3, #0
 800688a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800688c:	69bb      	ldr	r3, [r7, #24]
 800688e:	2201      	movs	r2, #1
 8006890:	fa02 f303 	lsl.w	r3, r2, r3
 8006894:	1e5a      	subs	r2, r3, #1
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	401a      	ands	r2, r3
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	2101      	movs	r1, #1
 80068a2:	fa01 f303 	lsl.w	r3, r1, r3
 80068a6:	1e59      	subs	r1, r3, #1
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80068ac:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3724      	adds	r7, #36	; 0x24
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr
 80068ba:	bf00      	nop

080068bc <XMC_CCU8_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU8_EnableShadowTransfer(XMC_CCU8_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_EnableShadowTransfer:Invalid module Pointer", XMC_CCU8_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	683a      	ldr	r2, [r7, #0]
 80068ca:	611a      	str	r2, [r3, #16]
}
 80068cc:	370c      	adds	r7, #12
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr
 80068d6:	bf00      	nop

080068d8 <XMC_SCU_SetCcuTriggerHigh>:
 * the timer using this API.<BR>
 * \par<b>Related APIs:</b><BR>
 * XMC_CCU4_SLICE_StartConfig(), XMC_CCU4_SLICE_SetInput(), XMC_SCU_SetCcuTriggerLow()\n\n\n
 */
__STATIC_INLINE void XMC_SCU_SetCcuTriggerHigh(const uint32_t trigger)
{
 80068d8:	b480      	push	{r7}
 80068da:	b083      	sub	sp, #12
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  SCU_GENERAL->CCUCON |= (uint32_t)trigger;
 80068e0:	4905      	ldr	r1, [pc, #20]	; (80068f8 <XMC_SCU_SetCcuTriggerHigh+0x20>)
 80068e2:	4b05      	ldr	r3, [pc, #20]	; (80068f8 <XMC_SCU_SetCcuTriggerHigh+0x20>)
 80068e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4313      	orrs	r3, r2
 80068ea:	64cb      	str	r3, [r1, #76]	; 0x4c
}
 80068ec:	370c      	adds	r7, #12
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr
 80068f6:	bf00      	nop
 80068f8:	50004000 	.word	0x50004000

080068fc <XMC_SCU_SetCcuTriggerLow>:
 * the timer using this API.<BR>
 * \par<b>Related APIs:</b><BR>
 * XMC_CCU4_SLICE_StartConfig(), XMC_CCU4_SLICE_SetInput(), XMC_SCU_SetCcuTriggerHigh()\n\n\n
 */
__STATIC_INLINE void XMC_SCU_SetCcuTriggerLow(const uint32_t trigger)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  SCU_GENERAL->CCUCON &= (uint32_t)~trigger;
 8006904:	4905      	ldr	r1, [pc, #20]	; (800691c <XMC_SCU_SetCcuTriggerLow+0x20>)
 8006906:	4b05      	ldr	r3, [pc, #20]	; (800691c <XMC_SCU_SetCcuTriggerLow+0x20>)
 8006908:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	43db      	mvns	r3, r3
 800690e:	4013      	ands	r3, r2
 8006910:	64cb      	str	r3, [r1, #76]	; 0x4c
}
 8006912:	370c      	adds	r7, #12
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr
 800691c:	50004000 	.word	0x50004000

08006920 <ACIM_FREQ_CTRL_lInitializeVarAfterInit>:

/**********************************************************************************************************************
* API IMPLEMENTATION
**********************************************************************************************************************/
void ACIM_FREQ_CTRL_lInitializeVarAfterInit(ACIM_FREQ_CTRL_t* const HandlePtr)
{
 8006920:	b480      	push	{r7}
 8006922:	b083      	sub	sp, #12
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  /* Initialize current limit input if current limit is enabled */
  if ((HandlePtr->acim_config_ptr->enable_iavg_actcurrent == (uint16_t) 1)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	7e1b      	ldrb	r3, [r3, #24]
 800692e:	f003 0304 	and.w	r3, r3, #4
 8006932:	b2db      	uxtb	r3, r3
 8006934:	2b00      	cmp	r3, #0
 8006936:	d00c      	beq.n	8006952 <ACIM_FREQ_CTRL_lInitializeVarAfterInit+0x32>
      && (HandlePtr->acim_config_ptr->enable_current_limit == (uint16_t) 1))
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	7ddb      	ldrb	r3, [r3, #23]
 800693e:	f003 0308 	and.w	r3, r3, #8
 8006942:	b2db      	uxtb	r3, r3
 8006944:	2b00      	cmp	r3, #0
 8006946:	d004      	beq.n	8006952 <ACIM_FREQ_CTRL_lInitializeVarAfterInit+0x32>
  {
    /* Initialize current control actual input */
    HandlePtr->current_limit_ptr->input_ptr = &HandlePtr->motor_current;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	695b      	ldr	r3, [r3, #20]
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	3298      	adds	r2, #152	; 0x98
 8006950:	609a      	str	r2, [r3, #8]
  }
  /* Initialize position input and speed reference, if position control is enabled */
  if (HandlePtr->acim_config_ptr->enable_position_control == (uint16_t) 1)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	7ddb      	ldrb	r3, [r3, #23]
 8006958:	f003 0302 	and.w	r3, r3, #2
 800695c:	b2db      	uxtb	r3, r3
 800695e:	2b00      	cmp	r3, #0
 8006960:	d005      	beq.n	800696e <ACIM_FREQ_CTRL_lInitializeVarAfterInit+0x4e>
  {
    HandlePtr->speed_set_ptr = &HandlePtr->position_control_ptr->output;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	68db      	ldr	r3, [r3, #12]
 8006966:	f103 020c 	add.w	r2, r3, #12
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	671a      	str	r2, [r3, #112]	; 0x70
  }
}
 800696e:	370c      	adds	r7, #12
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr

08006978 <ACIM_FREQ_CTRL_lISRInit>:
void ACIM_FREQ_CTRL_lISRInit(ACIM_FREQ_CTRL_t* const HandlePtr)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b082      	sub	sp, #8
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  /* ISR Init for fast control loop */
  ACIM_FREQ_CTRL_ISRInit(HandlePtr->fcl_config_ptr);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6a1b      	ldr	r3, [r3, #32]
 8006984:	4618      	mov	r0, r3
 8006986:	f000 f80d 	bl	80069a4 <ACIM_FREQ_CTRL_ISRInit>

  if (HandlePtr->acim_config_ptr->pcl_task_conf == (uint8_t) ACIM_FREQ_CTRL_TS_PCL_ISR)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	7c5b      	ldrb	r3, [r3, #17]
 8006990:	2b02      	cmp	r3, #2
 8006992:	d104      	bne.n	800699e <ACIM_FREQ_CTRL_lISRInit+0x26>
  {
    /* ISR Init for primary control loop */
    ACIM_FREQ_CTRL_ISRInit(HandlePtr->pcl_config_ptr);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006998:	4618      	mov	r0, r3
 800699a:	f000 f803 	bl	80069a4 <ACIM_FREQ_CTRL_ISRInit>
  }
}
 800699e:	3708      	adds	r7, #8
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <ACIM_FREQ_CTRL_ISRInit>:
/*
 * This function configure the the NVIC Node.
 */
static void ACIM_FREQ_CTRL_ISRInit(ACIM_FREQ_CTRL_ISRHandle_t* const HandlePtr)
{
 80069a4:	b590      	push	{r4, r7, lr}
 80069a6:	b083      	sub	sp, #12
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  /*set the priority and sub priority*/
#if (UC_FAMILY == XMC1)
  NVIC_SetPriority((IRQn_Type) HandlePtr->node_id, (uint32_t) HandlePtr->priority);
#else
  NVIC_SetPriority((IRQn_Type)HandlePtr->node_id,
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	b2dc      	uxtb	r4, r3
 80069b2:	f7ff fefd 	bl	80067b0 <__NVIC_GetPriorityGrouping>
 80069b6:	4601      	mov	r1, r0
      NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
          (uint32_t)HandlePtr->priority,(uint32_t)HandlePtr->sub_priority));
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	785b      	ldrb	r3, [r3, #1]
{
  /*set the priority and sub priority*/
#if (UC_FAMILY == XMC1)
  NVIC_SetPriority((IRQn_Type) HandlePtr->node_id, (uint32_t) HandlePtr->priority);
#else
  NVIC_SetPriority((IRQn_Type)HandlePtr->node_id,
 80069bc:	461a      	mov	r2, r3
      NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
          (uint32_t)HandlePtr->priority,(uint32_t)HandlePtr->sub_priority));
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	789b      	ldrb	r3, [r3, #2]
{
  /*set the priority and sub priority*/
#if (UC_FAMILY == XMC1)
  NVIC_SetPriority((IRQn_Type) HandlePtr->node_id, (uint32_t) HandlePtr->priority);
#else
  NVIC_SetPriority((IRQn_Type)HandlePtr->node_id,
 80069c2:	4608      	mov	r0, r1
 80069c4:	4611      	mov	r1, r2
 80069c6:	461a      	mov	r2, r3
 80069c8:	f7ff ff46 	bl	8006858 <NVIC_EncodePriority>
 80069cc:	4602      	mov	r2, r0
 80069ce:	b263      	sxtb	r3, r4
 80069d0:	4618      	mov	r0, r3
 80069d2:	4611      	mov	r1, r2
 80069d4:	f7ff ff16 	bl	8006804 <__NVIC_SetPriority>
      NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
          (uint32_t)HandlePtr->priority,(uint32_t)HandlePtr->sub_priority));
#endif
  /*Enable the IRQ*/
  NVIC_EnableIRQ((IRQn_Type) HandlePtr->node_id);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	b25b      	sxtb	r3, r3
 80069e0:	4618      	mov	r0, r3
 80069e2:	f7ff fef3 	bl	80067cc <__NVIC_EnableIRQ>
}
 80069e6:	370c      	adds	r7, #12
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd90      	pop	{r4, r7, pc}

080069ec <ACIM_FREQ_CTRL_MotorParamInit>:

static void ACIM_FREQ_CTRL_MotorParamInit(ACIM_FREQ_CTRL_t* const HandlePtr)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b082      	sub	sp, #8
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  HandlePtr->amplitude = 0U;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	679a      	str	r2, [r3, #120]	; 0x78
  HandlePtr->angle = 0U;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	67da      	str	r2, [r3, #124]	; 0x7c
  HandlePtr->overcurrent_counter = 0U;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  HandlePtr->bootstrap_index = 0U;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
  if (HandlePtr->acim_config_ptr->enable_slip_control == 1U)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	7ddb      	ldrb	r3, [r3, #23]
 8006a16:	f003 0304 	and.w	r3, r3, #4
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d004      	beq.n	8006a2a <ACIM_FREQ_CTRL_MotorParamInit+0x3e>
  {
    HandlePtr->slip_control_ptr->pi_ptr->i_buf = 0;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	691b      	ldr	r3, [r3, #16]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	2200      	movs	r2, #0
 8006a28:	609a      	str	r2, [r3, #8]
  }
  if (HandlePtr->acim_config_ptr->enable_current_limit == 1U)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	7ddb      	ldrb	r3, [r3, #23]
 8006a30:	f003 0308 	and.w	r3, r3, #8
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d004      	beq.n	8006a44 <ACIM_FREQ_CTRL_MotorParamInit+0x58>
  {
    HandlePtr->current_limit_ptr->pi_ptr->i_buf = 0;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	695b      	ldr	r3, [r3, #20]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	2200      	movs	r2, #0
 8006a42:	609a      	str	r2, [r3, #8]
  }
  if (HandlePtr->acim_config_ptr->enable_position_control == 1U)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	7ddb      	ldrb	r3, [r3, #23]
 8006a4a:	f003 0302 	and.w	r3, r3, #2
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d004      	beq.n	8006a5e <ACIM_FREQ_CTRL_MotorParamInit+0x72>
  {
    HandlePtr->position_control_ptr->pi_ptr->i_buf = 0;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	609a      	str	r2, [r3, #8]
  }

  /*Changing write access for pwm frequency to not allowed*/
  HandlePtr->param_table_ptr[ACIM_FREQ_CTRL_PID_PWM_FREQUENCY].write_access =
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	699b      	ldr	r3, [r3, #24]
 8006a62:	338c      	adds	r3, #140	; 0x8c
 8006a64:	2200      	movs	r2, #0
 8006a66:	761a      	strb	r2, [r3, #24]
      (uint8_t) ACIM_FREQ_CTRL_PH_WA_NOT_ALLOWED;

#if (ACIM_FREQ_CTRL_IS_AUTOMATION_AVAILABLE == 1U)
  /*Ramp parameter Init*/
  if (NULL != HandlePtr->ramp_fb_ptr)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d004      	beq.n	8006a7a <ACIM_FREQ_CTRL_MotorParamInit+0x8e>
  {
    AUTOMATION_FB_RampInit (HandlePtr->ramp_fb_ptr);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a74:	4618      	mov	r0, r3
 8006a76:	f7ff fbe7 	bl	8006248 <AUTOMATION_FB_RampInit>
  }
#endif
}
 8006a7a:	3708      	adds	r7, #8
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <ACIM_FREQ_CTRL_Automation_Init>:

#if (ACIM_FREQ_CTRL_IS_AUTOMATION_AVAILABLE == 1U)
static ACIM_FREQ_CTRL_STATUS_t ACIM_FREQ_CTRL_Automation_Init(ACIM_FREQ_CTRL_t*const HandlePtr)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b084      	sub	sp, #16
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  uint32_t status;
  uint32_t fb_connect_status = (uint32_t)ACIM_FREQ_CTRL_STATUS_SUCCESS;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	60bb      	str	r3, [r7, #8]

  status = (uint32_t)AUTOMATION_Init(HandlePtr->automation_ptr);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a90:	4618      	mov	r0, r3
 8006a92:	f7fe ff7d 	bl	8005990 <AUTOMATION_Init>
 8006a96:	4603      	mov	r3, r0
 8006a98:	60fb      	str	r3, [r7, #12]

  /* Register App */
  status |= (uint32_t)AUTOMATION_RegisterApp (HandlePtr, HandlePtr->acim_freq_ctrl_fb_ptr->name, &HandlePtr->app_id);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a9e:	691a      	ldr	r2, [r3, #16]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	33a5      	adds	r3, #165	; 0xa5
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	4611      	mov	r1, r2
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	f7fe ffb5 	bl	8005a18 <AUTOMATION_RegisterApp>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	60fb      	str	r3, [r7, #12]

  /* register task */
  if ((uint32_t)ACIM_FREQ_CTRL_STATUS_SUCCESS == status)
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d17c      	bne.n	8006bb8 <ACIM_FREQ_CTRL_Automation_Init+0x138>
  {
#if (ACIM_FREQ_CTRL_IS_DSM_AVAILABLE == 1U)
    if (HandlePtr->acim_config_ptr->dsm_task_conf == (uint8_t)ACIM_FREQ_CTRL_TS_AUTOMATION)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	7cdb      	ldrb	r3, [r3, #19]
 8006ac4:	2b04      	cmp	r3, #4
 8006ac6:	d11e      	bne.n	8006b06 <ACIM_FREQ_CTRL_Automation_Init+0x86>
    {
      status |=(uint32_t)AUTOMATION_SM_RegisterStateMachine( HandlePtr->acim_statemachine ,HandlePtr->app_id);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006ad2:	4610      	mov	r0, r2
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	f7ff fc01 	bl	80062dc <AUTOMATION_SM_RegisterStateMachine>
 8006ada:	4603      	mov	r3, r0
 8006adc:	461a      	mov	r2, r3
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	60fb      	str	r3, [r7, #12]
      status |= (uint32_t)AUTOMATION_RegisterTask((AUTOMATION_TASK_FUNCT_PTR_t)HandlePtr->dsm_function_ptr,
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6c99      	ldr	r1, [r3, #72]	; 0x48
          (AUTOMATION_SM_t*)(void*)HandlePtr->acim_statemachine,HandlePtr->dsm_time);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  {
#if (ACIM_FREQ_CTRL_IS_DSM_AVAILABLE == 1U)
    if (HandlePtr->acim_config_ptr->dsm_task_conf == (uint8_t)ACIM_FREQ_CTRL_TS_AUTOMATION)
    {
      status |=(uint32_t)AUTOMATION_SM_RegisterStateMachine( HandlePtr->acim_statemachine ,HandlePtr->app_id);
      status |= (uint32_t)AUTOMATION_RegisterTask((AUTOMATION_TASK_FUNCT_PTR_t)HandlePtr->dsm_function_ptr,
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006af2:	4608      	mov	r0, r1
 8006af4:	4611      	mov	r1, r2
 8006af6:	461a      	mov	r2, r3
 8006af8:	f7fe ffc0 	bl	8005a7c <AUTOMATION_RegisterTask>
 8006afc:	4603      	mov	r3, r0
 8006afe:	461a      	mov	r2, r3
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	60fb      	str	r3, [r7, #12]
    }
#endif

#if (AUTOMATION_PH_ENABLE == 1U)
    /* register app parameter table in automation framework*/
    status |= (uint32_t)AUTOMATION_PH_RegisterParamTable(HandlePtr->app_id,
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f893 20a5 	ldrb.w	r2, [r3, #165]	; 0xa5
        (AUTOMATION_PH_PARAM_ENTRY_t*)(void*)HandlePtr->param_table_ptr);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	699b      	ldr	r3, [r3, #24]
    }
#endif

#if (AUTOMATION_PH_ENABLE == 1U)
    /* register app parameter table in automation framework*/
    status |= (uint32_t)AUTOMATION_PH_RegisterParamTable(HandlePtr->app_id,
 8006b10:	4610      	mov	r0, r2
 8006b12:	4619      	mov	r1, r3
 8006b14:	f7ff f8aa 	bl	8005c6c <AUTOMATION_PH_RegisterParamTable>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	60fb      	str	r3, [r7, #12]
        (AUTOMATION_PH_PARAM_ENTRY_t*)(void*)HandlePtr->param_table_ptr);
#endif

    /* Function block */
    status |= (uint32_t)AUTOMATION_FB_RegisterFunctionBlock(HandlePtr->acim_freq_ctrl_fb_ptr);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b26:	4618      	mov	r0, r3
 8006b28:	f7ff faba 	bl	80060a0 <AUTOMATION_FB_RegisterFunctionBlock>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	461a      	mov	r2, r3
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	4313      	orrs	r3, r2
 8006b34:	60fb      	str	r3, [r7, #12]

    if (NULL != HandlePtr->ramp_fb_ptr)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d03c      	beq.n	8006bb8 <ACIM_FREQ_CTRL_Automation_Init+0x138>
    {
      /* Connect ramp function block with ACIM_FREQ function block */
      fb_connect_status = (uint32_t)AUTOMATION_FB_AddConnectionEntry(HandlePtr->acim_freq_ctrl_fb_ptr, (uint8_t)ACIM_FREQ_CTRL_FB_OUT_USER_SPEED,
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b46:	4610      	mov	r0, r2
 8006b48:	2100      	movs	r1, #0
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	f7ff facb 	bl	80060e8 <AUTOMATION_FB_AddConnectionEntry>
 8006b52:	4603      	mov	r3, r0
 8006b54:	60bb      	str	r3, [r7, #8]
          HandlePtr->ramp_fb_ptr, (uint8_t)AUTOMATION_FB_IN_SIGNAL_ENDREF);
      if ((uint32_t)ACIM_FREQ_CTRL_STATUS_SUCCESS != fb_connect_status)
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d00d      	beq.n	8006b78 <ACIM_FREQ_CTRL_Automation_Init+0xf8>
      {
        AUTOMATION_FB_Connect();
 8006b5c:	f7ff fb24 	bl	80061a8 <AUTOMATION_FB_Connect>
        fb_connect_status = (uint32_t)AUTOMATION_FB_AddConnectionEntry(HandlePtr->acim_freq_ctrl_fb_ptr, (uint8_t)ACIM_FREQ_CTRL_FB_OUT_USER_SPEED,
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b68:	4610      	mov	r0, r2
 8006b6a:	2100      	movs	r1, #0
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	2300      	movs	r3, #0
 8006b70:	f7ff faba 	bl	80060e8 <AUTOMATION_FB_AddConnectionEntry>
 8006b74:	4603      	mov	r3, r0
 8006b76:	60bb      	str	r3, [r7, #8]
            HandlePtr->ramp_fb_ptr, (uint8_t)AUTOMATION_FB_IN_SIGNAL_ENDREF);
      }

      fb_connect_status |= (uint32_t)AUTOMATION_FB_AddConnectionEntry(HandlePtr->acim_freq_ctrl_fb_ptr, (uint8_t)ACIM_FREQ_CTRL_FB_OUT_SPEED_SCALE,
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b80:	4610      	mov	r0, r2
 8006b82:	2101      	movs	r1, #1
 8006b84:	461a      	mov	r2, r3
 8006b86:	2301      	movs	r3, #1
 8006b88:	f7ff faae 	bl	80060e8 <AUTOMATION_FB_AddConnectionEntry>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	461a      	mov	r2, r3
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	4313      	orrs	r3, r2
 8006b94:	60bb      	str	r3, [r7, #8]
          HandlePtr->ramp_fb_ptr, (uint8_t)AUTOMATION_FB_IN_SIGNAL_SCALE);

      fb_connect_status |= (uint32_t)AUTOMATION_FB_AddConnectionEntry(HandlePtr->ramp_fb_ptr, (uint8_t)AUTOMATION_FB_OUT_SIGNAL_REF,
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b9e:	4610      	mov	r0, r2
 8006ba0:	2100      	movs	r1, #0
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	f7ff fa9f 	bl	80060e8 <AUTOMATION_FB_AddConnectionEntry>
 8006baa:	4603      	mov	r3, r0
 8006bac:	461a      	mov	r2, r3
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	60bb      	str	r3, [r7, #8]
          HandlePtr->acim_freq_ctrl_fb_ptr, (uint8_t)ACIM_FREQ_CTRL_FB_IN_SPEED_REF);
      AUTOMATION_FB_Connect();
 8006bb4:	f7ff faf8 	bl	80061a8 <AUTOMATION_FB_Connect>
    }
  }

  return (ACIM_FREQ_CTRL_STATUS_t)(status | fb_connect_status);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	b2da      	uxtb	r2, r3
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	b2db      	uxtb	r3, r3
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3710      	adds	r7, #16
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <ACIM_FREQ_CTRL_Init>:
  return version;
}

/* Initialise ACIM_FREQ_CTRL app parameters and low level apps*/
ACIM_FREQ_CTRL_STATUS_t ACIM_FREQ_CTRL_Init(ACIM_FREQ_CTRL_t* const HandlePtr)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  ACIM_FREQ_CTRL_STATUS_t status = ACIM_FREQ_CTRL_STATUS_SUCCESS;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	73fb      	strb	r3, [r7, #15]

  if ((uint8_t) ACIM_FREQ_CTRL_UNINITIALISED == HandlePtr->state)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d12b      	bne.n	8006c3a <ACIM_FREQ_CTRL_Init+0x6e>
      }
    }
#endif
    /* AUTOMATION app initialisation */
#if (ACIM_FREQ_CTRL_IS_AUTOMATION_AVAILABLE == 1U)
    if (1U == HandlePtr->acim_config_ptr->enable_automation)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	7ddb      	ldrb	r3, [r3, #23]
 8006be8:	f003 0301 	and.w	r3, r3, #1
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d007      	beq.n	8006c02 <ACIM_FREQ_CTRL_Init+0x36>
    {
      if ((uint8_t)ACIM_FREQ_CTRL_STATUS_FAILURE == (uint8_t)ACIM_FREQ_CTRL_Automation_Init(HandlePtr))
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f7ff ff44 	bl	8006a80 <ACIM_FREQ_CTRL_Automation_Init>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d101      	bne.n	8006c02 <ACIM_FREQ_CTRL_Init+0x36>
      {
        status = ACIM_FREQ_CTRL_STATUS_FAILURE;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	73fb      	strb	r3, [r7, #15]
      }
    }
#endif
    ACIM_FREQ_CTRL_lISRInit(HandlePtr);
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f7ff feb8 	bl	8006978 <ACIM_FREQ_CTRL_lISRInit>

    /* PWM SVM Init */
    if ((uint8_t) ACIM_FREQ_CTRL_STATUS_FAILURE == (uint8_t) PWM_SVM_Init(HandlePtr->pwm_svm_ptr))
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f7fc fed9 	bl	80039c4 <PWM_SVM_Init>
 8006c12:	4603      	mov	r3, r0
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d101      	bne.n	8006c1c <ACIM_FREQ_CTRL_Init+0x50>
    {
      status = ACIM_FREQ_CTRL_STATUS_FAILURE;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	73fb      	strb	r3, [r7, #15]
    }
    if (status != ACIM_FREQ_CTRL_STATUS_FAILURE)
 8006c1c:	7bfb      	ldrb	r3, [r7, #15]
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d007      	beq.n	8006c32 <ACIM_FREQ_CTRL_Init+0x66>
    {
      ACIM_FREQ_CTRL_lInitializeVarAfterInit(HandlePtr);
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f7ff fe7c 	bl	8006920 <ACIM_FREQ_CTRL_lInitializeVarAfterInit>
      HandlePtr->state = (uint8_t) ACIM_FREQ_CTRL_INITIALISED;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
 8006c30:	e003      	b.n	8006c3a <ACIM_FREQ_CTRL_Init+0x6e>
    }
    else
    {
      ACIM_FREQ_CTRL_UpdateError(HandlePtr, ACIM_FREQ_CTRL_EID_INIT_FAILED);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	2100      	movs	r1, #0
 8006c36:	f000 f805 	bl	8006c44 <ACIM_FREQ_CTRL_UpdateError>
    }
  }
  return (status);
 8006c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3710      	adds	r7, #16
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}

08006c44 <ACIM_FREQ_CTRL_UpdateError>:
  return (adc_status);
}
#endif
/* Report error */
void ACIM_FREQ_CTRL_UpdateError(ACIM_FREQ_CTRL_t* const HandlePtr, const ACIM_FREQ_CTRL_EID_t error_num)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b082      	sub	sp, #8
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	70fb      	strb	r3, [r7, #3]
  /* Log the operational error */
  HandlePtr->operational_error |= ((uint32_t) 1 << (uint32_t) error_num);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c54:	78fb      	ldrb	r3, [r7, #3]
 8006c56:	2101      	movs	r1, #1
 8006c58:	fa01 f303 	lsl.w	r3, r1, r3
 8006c5c:	431a      	orrs	r2, r3
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	655a      	str	r2, [r3, #84]	; 0x54
  /* Set the error status in error table */
  HandlePtr->error_table_ptr[error_num].error_status = (uint8_t) ACIM_FREQ_CTRL_ERROR_SET;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	69da      	ldr	r2, [r3, #28]
 8006c66:	78fb      	ldrb	r3, [r7, #3]
 8006c68:	00db      	lsls	r3, r3, #3
 8006c6a:	4413      	add	r3, r2
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	715a      	strb	r2, [r3, #5]
  if (HandlePtr->error_table_ptr[error_num].error_handler_ptr_t != NULL)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	69da      	ldr	r2, [r3, #28]
 8006c74:	78fb      	ldrb	r3, [r7, #3]
 8006c76:	00db      	lsls	r3, r3, #3
 8006c78:	4413      	add	r3, r2
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d007      	beq.n	8006c90 <ACIM_FREQ_CTRL_UpdateError+0x4c>
  {
    /* Call the function to take action for timeout */
    (HandlePtr->error_table_ptr[error_num].error_handler_ptr_t)(HandlePtr);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	69da      	ldr	r2, [r3, #28]
 8006c84:	78fb      	ldrb	r3, [r7, #3]
 8006c86:	00db      	lsls	r3, r3, #3
 8006c88:	4413      	add	r3, r2
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	4798      	blx	r3
  }
}
 8006c90:	3708      	adds	r7, #8
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop

08006c98 <ACIM_FREQ_CTRL_lTaskSchedulerRegisteration>:
#if (ACIM_FREQ_CTRL_IS_AUTOMATION_AVAILABLE == 1U)
void ACIM_FREQ_CTRL_lTaskSchedulerRegisteration(ACIM_FREQ_CTRL_t*const HandlePtr,ACIM_FREQ_CTRL_TASKREGISTER_PTR_t task_function_ptr,
    const ACIM_FREQ_CTRL_EID_t error_num,uint32_t task_time)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	60b9      	str	r1, [r7, #8]
 8006ca2:	603b      	str	r3, [r7, #0]
 8006ca4:	4613      	mov	r3, r2
 8006ca6:	71fb      	strb	r3, [r7, #7]
  if ((uint32_t)ACIM_FREQ_CTRL_STATUS_FAILURE == (uint32_t)AUTOMATION_RegisterTask((AUTOMATION_TASK_FUNCT_PTR_t)task_function_ptr,(ACIM_FREQ_CTRL_t*)HandlePtr,
 8006ca8:	68b8      	ldr	r0, [r7, #8]
 8006caa:	68f9      	ldr	r1, [r7, #12]
 8006cac:	683a      	ldr	r2, [r7, #0]
 8006cae:	f7fe fee5 	bl	8005a7c <AUTOMATION_RegisterTask>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d105      	bne.n	8006cc4 <ACIM_FREQ_CTRL_lTaskSchedulerRegisteration+0x2c>
          task_time))
  {
    ACIM_FREQ_CTRL_UpdateError(HandlePtr,error_num);
 8006cb8:	79fb      	ldrb	r3, [r7, #7]
 8006cba:	68f8      	ldr	r0, [r7, #12]
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	f7ff ffc1 	bl	8006c44 <ACIM_FREQ_CTRL_UpdateError>
 8006cc2:	e00e      	b.n	8006ce2 <ACIM_FREQ_CTRL_lTaskSchedulerRegisteration+0x4a>
  }
  else
  {
    if (error_num == ACIM_FREQ_CTRL_EID_SVP_REG_FAILED)
 8006cc4:	79fb      	ldrb	r3, [r7, #7]
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d104      	bne.n	8006cd4 <ACIM_FREQ_CTRL_lTaskSchedulerRegisteration+0x3c>
    {
      HandlePtr->registered_task_svp = 1U;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2201      	movs	r2, #1
 8006cce:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
 8006cd2:	e006      	b.n	8006ce2 <ACIM_FREQ_CTRL_lTaskSchedulerRegisteration+0x4a>
    }
    else if (error_num == ACIM_FREQ_CTRL_EID_PCL_REG_FAILED)
 8006cd4:	79fb      	ldrb	r3, [r7, #7]
 8006cd6:	2b02      	cmp	r3, #2
 8006cd8:	d103      	bne.n	8006ce2 <ACIM_FREQ_CTRL_lTaskSchedulerRegisteration+0x4a>
    {
      HandlePtr->registered_task_pcl = 1U;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2201      	movs	r2, #1
 8006cde:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
    }
  }
}
 8006ce2:	3710      	adds	r7, #16
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <ACIM_FREQ_CTRL_MotorStart>:
#endif
void ACIM_FREQ_CTRL_MotorStart(ACIM_FREQ_CTRL_t* const HandlePtr)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  /* Motor State machine should be in STOP state to start the motor.
   * In case of any error, motor start function won't be started
   * until clear all the errors.
   */
  if (HandlePtr->msm_state == ACIM_FREQ_CTRL_MSM_STOP)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d14b      	bne.n	8006d92 <ACIM_FREQ_CTRL_MotorStart+0xaa>
  {
#if (ACIM_FREQ_CTRL_IS_DSM_AVAILABLE == 1U)
    if ((HandlePtr->acim_config_ptr->dsm_task_conf == (uint8_t)ACIM_FREQ_CTRL_TS_DISABLED)||
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	7cdb      	ldrb	r3, [r3, #19]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d004      	beq.n	8006d0e <ACIM_FREQ_CTRL_MotorStart+0x26>
        ( HandlePtr->acim_statemachine->current_state == (uint8_t)ACIM_FREQ_CTRL_DSM_OPERATION))
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d08:	7a1b      	ldrb	r3, [r3, #8]
   * until clear all the errors.
   */
  if (HandlePtr->msm_state == ACIM_FREQ_CTRL_MSM_STOP)
  {
#if (ACIM_FREQ_CTRL_IS_DSM_AVAILABLE == 1U)
    if ((HandlePtr->acim_config_ptr->dsm_task_conf == (uint8_t)ACIM_FREQ_CTRL_TS_DISABLED)||
 8006d0a:	2b03      	cmp	r3, #3
 8006d0c:	d103      	bne.n	8006d16 <ACIM_FREQ_CTRL_MotorStart+0x2e>
        ( HandlePtr->acim_statemachine->current_state == (uint8_t)ACIM_FREQ_CTRL_DSM_OPERATION))
    {
      /*Start the motor, if Drive State machine is in Operation state*/
      HandlePtr->msm_state = ACIM_FREQ_CTRL_MSM_INIT_INVERTER;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2201      	movs	r2, #1
 8006d12:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    }
    if ((HandlePtr->acim_config_ptr->dsm_task_conf != (uint8_t)ACIM_FREQ_CTRL_TS_DISABLED) &&
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	7cdb      	ldrb	r3, [r3, #19]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d008      	beq.n	8006d32 <ACIM_FREQ_CTRL_MotorStart+0x4a>
        ( HandlePtr->acim_statemachine->current_state != (uint8_t)ACIM_FREQ_CTRL_DSM_OPERATION))
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d24:	7a1b      	ldrb	r3, [r3, #8]
        ( HandlePtr->acim_statemachine->current_state == (uint8_t)ACIM_FREQ_CTRL_DSM_OPERATION))
    {
      /*Start the motor, if Drive State machine is in Operation state*/
      HandlePtr->msm_state = ACIM_FREQ_CTRL_MSM_INIT_INVERTER;
    }
    if ((HandlePtr->acim_config_ptr->dsm_task_conf != (uint8_t)ACIM_FREQ_CTRL_TS_DISABLED) &&
 8006d26:	2b03      	cmp	r3, #3
 8006d28:	d003      	beq.n	8006d32 <ACIM_FREQ_CTRL_MotorStart+0x4a>
        ( HandlePtr->acim_statemachine->current_state != (uint8_t)ACIM_FREQ_CTRL_DSM_OPERATION))
    {
      HandlePtr->cw_state =ACIM_FREQ_CTRL_CW_AUTOMATIC_ON;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2208      	movs	r2, #8
 8006d2e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
#else
    HandlePtr->msm_state = ACIM_FREQ_CTRL_MSM_INIT_INVERTER;
#endif
    /* check the MSM state */
    if (HandlePtr->msm_state == ACIM_FREQ_CTRL_MSM_INIT_INVERTER)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d12a      	bne.n	8006d92 <ACIM_FREQ_CTRL_MotorStart+0xaa>
    {
#if (ACIM_FREQ_CTRL_IS_AUTOMATION_AVAILABLE == 1U)
      /* Register set value process function to automation framework, based on user configuration */
      if ((HandlePtr->acim_config_ptr->svp_task_conf == (uint8_t)ACIM_FREQ_CTRL_TS_AUTOMATION ) &&
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	7c9b      	ldrb	r3, [r3, #18]
 8006d42:	2b04      	cmp	r3, #4
 8006d44:	d10e      	bne.n	8006d64 <ACIM_FREQ_CTRL_MotorStart+0x7c>
          (HandlePtr->registered_task_svp == 0U))
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
    /* check the MSM state */
    if (HandlePtr->msm_state == ACIM_FREQ_CTRL_MSM_INIT_INVERTER)
    {
#if (ACIM_FREQ_CTRL_IS_AUTOMATION_AVAILABLE == 1U)
      /* Register set value process function to automation framework, based on user configuration */
      if ((HandlePtr->acim_config_ptr->svp_task_conf == (uint8_t)ACIM_FREQ_CTRL_TS_AUTOMATION ) &&
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d109      	bne.n	8006d64 <ACIM_FREQ_CTRL_MotorStart+0x7c>
          (HandlePtr->registered_task_svp == 0U))
      {
        ACIM_FREQ_CTRL_lTaskSchedulerRegisteration(HandlePtr,HandlePtr->svp_function_ptr,ACIM_FREQ_CTRL_EID_SVP_REG_FAILED,
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	4611      	mov	r1, r2
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f7ff ff9a 	bl	8006c98 <ACIM_FREQ_CTRL_lTaskSchedulerRegisteration>
            HandlePtr->svp_time);
      }
      /* Register primary control loop function to automation framework, based on user configuration */
      if ((HandlePtr->acim_config_ptr->pcl_task_conf == (uint8_t)ACIM_FREQ_CTRL_TS_AUTOMATION) &&
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	7c5b      	ldrb	r3, [r3, #17]
 8006d6a:	2b04      	cmp	r3, #4
 8006d6c:	d10e      	bne.n	8006d8c <ACIM_FREQ_CTRL_MotorStart+0xa4>
          (HandlePtr->registered_task_pcl == 0U))
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
      {
        ACIM_FREQ_CTRL_lTaskSchedulerRegisteration(HandlePtr,HandlePtr->svp_function_ptr,ACIM_FREQ_CTRL_EID_SVP_REG_FAILED,
            HandlePtr->svp_time);
      }
      /* Register primary control loop function to automation framework, based on user configuration */
      if ((HandlePtr->acim_config_ptr->pcl_task_conf == (uint8_t)ACIM_FREQ_CTRL_TS_AUTOMATION) &&
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d109      	bne.n	8006d8c <ACIM_FREQ_CTRL_MotorStart+0xa4>
          (HandlePtr->registered_task_pcl == 0U))
      {
        ACIM_FREQ_CTRL_lTaskSchedulerRegisteration(HandlePtr,HandlePtr->pcl_function_ptr,ACIM_FREQ_CTRL_EID_PCL_REG_FAILED,
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	4611      	mov	r1, r2
 8006d86:	2202      	movs	r2, #2
 8006d88:	f7ff ff86 	bl	8006c98 <ACIM_FREQ_CTRL_lTaskSchedulerRegisteration>
            HandlePtr->pcl_time);
      }
#endif
      ACIM_FREQ_CTRL_MSM(HandlePtr);
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 fb09 	bl	80073a4 <ACIM_FREQ_CTRL_MSM>
    }
  }
}
 8006d92:	3708      	adds	r7, #8
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <ACIM_FREQ_CTRL_MotorStop>:

void ACIM_FREQ_CTRL_MotorStop(ACIM_FREQ_CTRL_t* const HandlePtr)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b084      	sub	sp, #16
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
#if (ACIM_FREQ_CTRL_IS_AUTOMATION_AVAILABLE == 1U)
  uint8_t status = (uint8_t)ACIM_FREQ_CTRL_STATUS_SUCCESS;
 8006da0:	2300      	movs	r3, #0
 8006da2:	73fb      	strb	r3, [r7, #15]
#endif
  /*stop pwm svm*/
  PWM_SVM_Stop(HandlePtr->pwm_svm_ptr);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	4618      	mov	r0, r3
 8006daa:	f7fd f8a1 	bl	8003ef0 <PWM_SVM_Stop>
  /*disable inverter*/
  PWM_SVM_InverterDisable(HandlePtr->pwm_svm_ptr);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	4618      	mov	r0, r3
 8006db4:	f7fc fdba 	bl	800392c <PWM_SVM_InverterDisable>

  /*Changing write access for pwm frequency to allowed*/
  HandlePtr->param_table_ptr[ACIM_FREQ_CTRL_PID_PWM_FREQUENCY].write_access = (uint8_t) ACIM_FREQ_CTRL_PH_WA_ALLOWED;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	699b      	ldr	r3, [r3, #24]
 8006dbc:	338c      	adds	r3, #140	; 0x8c
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	761a      	strb	r2, [r3, #24]

#if (ACIM_FREQ_CTRL_IS_AUTOMATION_AVAILABLE == 1U)
  /* deregister Primary Control Loop function to automation framework, based on user configuration */
  if ((HandlePtr->acim_config_ptr->pcl_task_conf == (uint8_t)ACIM_FREQ_CTRL_TS_AUTOMATION)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	7c5b      	ldrb	r3, [r3, #17]
 8006dc8:	2b04      	cmp	r3, #4
 8006dca:	d117      	bne.n	8006dfc <ACIM_FREQ_CTRL_MotorStop+0x64>
      &&(HandlePtr->registered_task_pcl == 1U))
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	d112      	bne.n	8006dfc <ACIM_FREQ_CTRL_MotorStop+0x64>
  {
    status = (uint8_t)AUTOMATION_DeregisterTask((AUTOMATION_TASK_FUNCT_PTR_t)HandlePtr->pcl_function_ptr);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f7fe feb2 	bl	8005b44 <AUTOMATION_DeregisterTask>
 8006de0:	4603      	mov	r3, r0
 8006de2:	73fb      	strb	r3, [r7, #15]
    if ((uint8_t)ACIM_FREQ_CTRL_STATUS_FAILURE == status)
 8006de4:	7bfb      	ldrb	r3, [r7, #15]
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d104      	bne.n	8006df4 <ACIM_FREQ_CTRL_MotorStop+0x5c>
    {
      ACIM_FREQ_CTRL_UpdateError(HandlePtr, ACIM_FREQ_CTRL_EID_PCL_REG_FAILED);
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	2102      	movs	r1, #2
 8006dee:	f7ff ff29 	bl	8006c44 <ACIM_FREQ_CTRL_UpdateError>
 8006df2:	e003      	b.n	8006dfc <ACIM_FREQ_CTRL_MotorStop+0x64>
    }
    else
    {
      HandlePtr->registered_task_pcl = 0U;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2200      	movs	r2, #0
 8006df8:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
    }

  }
  /* deregister Set value process function to automation framework, based on user configuration */
  if ((HandlePtr->acim_config_ptr->svp_task_conf == (uint8_t)ACIM_FREQ_CTRL_TS_AUTOMATION)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	7c9b      	ldrb	r3, [r3, #18]
 8006e02:	2b04      	cmp	r3, #4
 8006e04:	d117      	bne.n	8006e36 <ACIM_FREQ_CTRL_MotorStop+0x9e>
      &&(HandlePtr->registered_task_svp == 1U))
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d112      	bne.n	8006e36 <ACIM_FREQ_CTRL_MotorStop+0x9e>
  {
    status = (uint8_t)AUTOMATION_DeregisterTask((AUTOMATION_TASK_FUNCT_PTR_t)HandlePtr->svp_function_ptr);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e14:	4618      	mov	r0, r3
 8006e16:	f7fe fe95 	bl	8005b44 <AUTOMATION_DeregisterTask>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	73fb      	strb	r3, [r7, #15]
    if ((uint8_t)ACIM_FREQ_CTRL_STATUS_FAILURE == status)
 8006e1e:	7bfb      	ldrb	r3, [r7, #15]
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d104      	bne.n	8006e2e <ACIM_FREQ_CTRL_MotorStop+0x96>
    {
      ACIM_FREQ_CTRL_UpdateError(HandlePtr, ACIM_FREQ_CTRL_EID_SVP_REG_FAILED);
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	2101      	movs	r1, #1
 8006e28:	f7ff ff0c 	bl	8006c44 <ACIM_FREQ_CTRL_UpdateError>
 8006e2c:	e003      	b.n	8006e36 <ACIM_FREQ_CTRL_MotorStop+0x9e>
    }
    else
    {
      HandlePtr->registered_task_svp = 0U;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2200      	movs	r2, #0
 8006e32:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
    }
  }
#endif
  if (((HandlePtr->operational_error & 0x1FU) != 0U))
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e3a:	f003 031f 	and.w	r3, r3, #31
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d007      	beq.n	8006e52 <ACIM_FREQ_CTRL_MotorStop+0xba>
  {
    HandlePtr->msm_state = ACIM_FREQ_CTRL_MSM_ERROR;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	220f      	movs	r2, #15
 8006e46:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    /*call the motor state machine, to report the error*/
    ACIM_FREQ_CTRL_MSM(HandlePtr);
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 faaa 	bl	80073a4 <ACIM_FREQ_CTRL_MSM>
 8006e50:	e003      	b.n	8006e5a <ACIM_FREQ_CTRL_MotorStop+0xc2>
  }
  else
  {
    /* Change motor control state machine to stop */
    HandlePtr->msm_state = ACIM_FREQ_CTRL_MSM_STOP;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2200      	movs	r2, #0
 8006e56:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  }
}
 8006e5a:	3710      	adds	r7, #16
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}

08006e60 <ACIM_FREQ_CTRL_SetParameter>:

ACIM_FREQ_CTRL_STATUS_t ACIM_FREQ_CTRL_SetParameter(ACIM_FREQ_CTRL_t* const HandlePtr, int32_t param_value,
                                                    ACIM_FREQ_CTRL_PID_t param_id)
{
 8006e60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e62:	b087      	sub	sp, #28
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	60f8      	str	r0, [r7, #12]
 8006e68:	60b9      	str	r1, [r7, #8]
 8006e6a:	4613      	mov	r3, r2
 8006e6c:	71fb      	strb	r3, [r7, #7]
  ACIM_FREQ_CTRL_PT_ENTRY_t *param_ptr = &HandlePtr->param_table_ptr[param_id];
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	6999      	ldr	r1, [r3, #24]
 8006e72:	79fa      	ldrb	r2, [r7, #7]
 8006e74:	4613      	mov	r3, r2
 8006e76:	00db      	lsls	r3, r3, #3
 8006e78:	1a9b      	subs	r3, r3, r2
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	440b      	add	r3, r1
 8006e7e:	613b      	str	r3, [r7, #16]
  ACIM_FREQ_CTRL_STATUS_t status = ACIM_FREQ_CTRL_STATUS_SUCCESS;
 8006e80:	2300      	movs	r3, #0
 8006e82:	75fb      	strb	r3, [r7, #23]
  if (param_ptr->write_access == (uint8_t) ACIM_FREQ_CTRL_PH_WA_ALLOWED)
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	7e1b      	ldrb	r3, [r3, #24]
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d12d      	bne.n	8006ee8 <ACIM_FREQ_CTRL_SetParameter+0x88>
  {
    if ((param_value >= param_ptr->minval) && (param_value <= param_ptr->maxval))
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	685a      	ldr	r2, [r3, #4]
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	429a      	cmp	r2, r3
 8006e94:	dc25      	bgt.n	8006ee2 <ACIM_FREQ_CTRL_SetParameter+0x82>
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	689a      	ldr	r2, [r3, #8]
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	db20      	blt.n	8006ee2 <ACIM_FREQ_CTRL_SetParameter+0x82>
    {
      *param_ptr->param_value = (int32_t)(
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	681c      	ldr	r4, [r3, #0]
          ((int64_t) param_value * (int64_t) param_ptr->inv_scale) / (int64_t) ACIM_FREQ_CTRL_POWER215);
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	691b      	ldr	r3, [r3, #16]
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	f04f 0300 	mov.w	r3, #0
 8006eb6:	fb02 f601 	mul.w	r6, r2, r1
 8006eba:	fb00 f503 	mul.w	r5, r0, r3
 8006ebe:	4435      	add	r5, r6
 8006ec0:	fba0 2302 	umull	r2, r3, r0, r2
 8006ec4:	18e9      	adds	r1, r5, r3
 8006ec6:	460b      	mov	r3, r1
 8006ec8:	4610      	mov	r0, r2
 8006eca:	4619      	mov	r1, r3
 8006ecc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006ed0:	f04f 0300 	mov.w	r3, #0
 8006ed4:	f002 fb16 	bl	8009504 <__aeabi_ldivmod>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	460b      	mov	r3, r1
  ACIM_FREQ_CTRL_STATUS_t status = ACIM_FREQ_CTRL_STATUS_SUCCESS;
  if (param_ptr->write_access == (uint8_t) ACIM_FREQ_CTRL_PH_WA_ALLOWED)
  {
    if ((param_value >= param_ptr->minval) && (param_value <= param_ptr->maxval))
    {
      *param_ptr->param_value = (int32_t)(
 8006edc:	4613      	mov	r3, r2
 8006ede:	6023      	str	r3, [r4, #0]
 8006ee0:	e004      	b.n	8006eec <ACIM_FREQ_CTRL_SetParameter+0x8c>
          ((int64_t) param_value * (int64_t) param_ptr->inv_scale) / (int64_t) ACIM_FREQ_CTRL_POWER215);
    }
    else
    {
      status = ACIM_FREQ_CTRL_STATUS_INVALID_PARAM;
 8006ee2:	2302      	movs	r3, #2
 8006ee4:	75fb      	strb	r3, [r7, #23]
 8006ee6:	e001      	b.n	8006eec <ACIM_FREQ_CTRL_SetParameter+0x8c>
    }
  }
  else
  {
    status = ACIM_FREQ_CTRL_STATUS_PERMISSION_DENIED;
 8006ee8:	2304      	movs	r3, #4
 8006eea:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006eec:	7dfb      	ldrb	r3, [r7, #23]
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	371c      	adds	r7, #28
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ef6:	bf00      	nop

08006ef8 <ACIM_FREQ_CTRL_SetSpeed>:

/* This API update the end speed of the motor */
ACIM_FREQ_CTRL_STATUS_t ACIM_FREQ_CTRL_SetSpeed(ACIM_FREQ_CTRL_t* const HandlePtr, int32_t speed)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b084      	sub	sp, #16
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	6039      	str	r1, [r7, #0]
  ACIM_FREQ_CTRL_STATUS_t status;
  /*set the speed and return the status*/
  status = ACIM_FREQ_CTRL_SetParameter(HandlePtr, speed, ACIM_FREQ_CTRL_PID_SPEED_REF);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	6839      	ldr	r1, [r7, #0]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f7ff ffaa 	bl	8006e60 <ACIM_FREQ_CTRL_SetParameter>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	73fb      	strb	r3, [r7, #15]
  /*set the motor direction based on the speed*/
  if (HandlePtr->user_speed_set < 0)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	da04      	bge.n	8006f22 <ACIM_FREQ_CTRL_SetSpeed+0x2a>
  {
    HandlePtr->motor_direction = (int8_t) ACIM_FREQ_CTRL_ANTICLOCKWISE_DIR;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	22ff      	movs	r2, #255	; 0xff
 8006f1c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
 8006f20:	e003      	b.n	8006f2a <ACIM_FREQ_CTRL_SetSpeed+0x32>
  }
  else
  {
    HandlePtr->motor_direction = (int8_t) ACIM_FREQ_CTRL_CLOCKWISE_DIR;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2201      	movs	r2, #1
 8006f26:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
  }
  return status;
 8006f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3710      	adds	r7, #16
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <ACIM_FREQ_CTRL_SetMotorDirection>:
}

/* This API direction of the motor */
ACIM_FREQ_CTRL_STATUS_t ACIM_FREQ_CTRL_SetMotorDirection(ACIM_FREQ_CTRL_t* const HandlePtr,
                                                         ACIM_FREQ_CTRL_MD_t direction)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b085      	sub	sp, #20
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	460b      	mov	r3, r1
 8006f3e:	70fb      	strb	r3, [r7, #3]
  ACIM_FREQ_CTRL_STATUS_t status = ACIM_FREQ_CTRL_STATUS_SUCCESS;
 8006f40:	2300      	movs	r3, #0
 8006f42:	73fb      	strb	r3, [r7, #15]
  if (HandlePtr->param_table_ptr[ACIM_FREQ_CTRL_PID_MOTOR_DIR].write_access == (uint8_t) ACIM_FREQ_CTRL_PH_WA_ALLOWED)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	699b      	ldr	r3, [r3, #24]
 8006f48:	3370      	adds	r3, #112	; 0x70
 8006f4a:	7e1b      	ldrb	r3, [r3, #24]
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d131      	bne.n	8006fb4 <ACIM_FREQ_CTRL_SetMotorDirection+0x80>
  {
    if ((direction == ACIM_FREQ_CTRL_CLOCKWISE_DIR) || (direction == ACIM_FREQ_CTRL_ANTICLOCKWISE_DIR))
 8006f50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d004      	beq.n	8006f62 <ACIM_FREQ_CTRL_SetMotorDirection+0x2e>
 8006f58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f60:	d125      	bne.n	8006fae <ACIM_FREQ_CTRL_SetMotorDirection+0x7a>
    {
      HandlePtr->motor_direction = (int8_t) direction;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	78fa      	ldrb	r2, [r7, #3]
 8006f66:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

      if ((HandlePtr->user_speed_set < 0) && (HandlePtr->motor_direction == (int8_t) ACIM_FREQ_CTRL_CLOCKWISE_DIR))
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	da0b      	bge.n	8006f8a <ACIM_FREQ_CTRL_SetMotorDirection+0x56>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8006f78:	b25b      	sxtb	r3, r3
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d105      	bne.n	8006f8a <ACIM_FREQ_CTRL_SetMotorDirection+0x56>
      {
        HandlePtr->user_speed_set = (int32_t)(-1 * HandlePtr->user_speed_set);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f82:	425a      	negs	r2, r3
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	669a      	str	r2, [r3, #104]	; 0x68
 8006f88:	e00f      	b.n	8006faa <ACIM_FREQ_CTRL_SetMotorDirection+0x76>
      }
      else if ((HandlePtr->user_speed_set > 0)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	dd0b      	ble.n	8006faa <ACIM_FREQ_CTRL_SetMotorDirection+0x76>
          && (HandlePtr->motor_direction == (int8_t) ACIM_FREQ_CTRL_ANTICLOCKWISE_DIR))
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8006f98:	b25b      	sxtb	r3, r3
 8006f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f9e:	d104      	bne.n	8006faa <ACIM_FREQ_CTRL_SetMotorDirection+0x76>
      {
        HandlePtr->user_speed_set = (int32_t)(-1 * HandlePtr->user_speed_set);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fa4:	425a      	negs	r2, r3
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	669a      	str	r2, [r3, #104]	; 0x68
  {
    if ((direction == ACIM_FREQ_CTRL_CLOCKWISE_DIR) || (direction == ACIM_FREQ_CTRL_ANTICLOCKWISE_DIR))
    {
      HandlePtr->motor_direction = (int8_t) direction;

      if ((HandlePtr->user_speed_set < 0) && (HandlePtr->motor_direction == (int8_t) ACIM_FREQ_CTRL_CLOCKWISE_DIR))
 8006faa:	bf00      	nop
 8006fac:	e004      	b.n	8006fb8 <ACIM_FREQ_CTRL_SetMotorDirection+0x84>
      {
      }
    }
    else
    {
      status = ACIM_FREQ_CTRL_STATUS_INVALID_PARAM;
 8006fae:	2302      	movs	r3, #2
 8006fb0:	73fb      	strb	r3, [r7, #15]
 8006fb2:	e001      	b.n	8006fb8 <ACIM_FREQ_CTRL_SetMotorDirection+0x84>
    }
  }
  else
  {
    status = ACIM_FREQ_CTRL_STATUS_PERMISSION_DENIED;
 8006fb4:	2304      	movs	r3, #4
 8006fb6:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8006fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3714      	adds	r7, #20
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr
 8006fc6:	bf00      	nop

08006fc8 <ACIM_FREQ_CTRL_SetControlWordState>:
  return (int32_t)(HandlePtr->motor_direction);
}

/* This API set the control word state */
ACIM_FREQ_CTRL_STATUS_t ACIM_FREQ_CTRL_SetControlWordState(ACIM_FREQ_CTRL_t* const HandlePtr, uint32_t control_word)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b085      	sub	sp, #20
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]
  ACIM_FREQ_CTRL_STATUS_t status = ACIM_FREQ_CTRL_STATUS_SUCCESS;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	73fb      	strb	r3, [r7, #15]
  ACIM_FREQ_CTRL_PT_ENTRY_t* param_ptr = &HandlePtr->param_table_ptr[ACIM_FREQ_CTRL_PID_CW_STATE];
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	699b      	ldr	r3, [r3, #24]
 8006fda:	60bb      	str	r3, [r7, #8]
  if (param_ptr->write_access == (uint8_t) ACIM_FREQ_CTRL_PH_WA_ALLOWED)
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	7e1b      	ldrb	r3, [r3, #24]
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d114      	bne.n	800700e <ACIM_FREQ_CTRL_SetControlWordState+0x46>
  {
    if ((control_word >= (uint32_t) param_ptr->minval) && (control_word <= (uint32_t) param_ptr->maxval))
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	461a      	mov	r2, r3
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d80b      	bhi.n	8007008 <ACIM_FREQ_CTRL_SetControlWordState+0x40>
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d305      	bcc.n	8007008 <ACIM_FREQ_CTRL_SetControlWordState+0x40>
    {
      HandlePtr->cw_state = (ACIM_FREQ_CTRL_CW_t) control_word;
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	b2da      	uxtb	r2, r3
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8007006:	e004      	b.n	8007012 <ACIM_FREQ_CTRL_SetControlWordState+0x4a>
    }
    else
    {
      status = ACIM_FREQ_CTRL_STATUS_INVALID_PARAM;
 8007008:	2302      	movs	r3, #2
 800700a:	73fb      	strb	r3, [r7, #15]
 800700c:	e001      	b.n	8007012 <ACIM_FREQ_CTRL_SetControlWordState+0x4a>
    }

  }
  else
  {
    status = ACIM_FREQ_CTRL_STATUS_PERMISSION_DENIED;
 800700e:	2304      	movs	r3, #4
 8007010:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8007012:	7bfb      	ldrb	r3, [r7, #15]
}
 8007014:	4618      	mov	r0, r3
 8007016:	3714      	adds	r7, #20
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr

08007020 <ACIM_FREQ_CTRL_lTaskSchedulerTimeUpdate>:
  return (uint32_t)(
      ((uint64_t) HandlePtr->current_limit_ptr->current_limit
          * HandlePtr->param_table_ptr[ACIM_FREQ_CTRL_PID_CURRENT_LIMIT].scale) >> ACIM_FREQ_CTRL_Q15);
}
void ACIM_FREQ_CTRL_lTaskSchedulerTimeUpdate(ACIM_FREQ_CTRL_t* const HandlePtr, uint32_t frequency_value)
{
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
  /*Update pcl and msm time */
  if ((HandlePtr->acim_config_ptr->pcl_task_conf == (uint8_t) ACIM_FREQ_CTRL_TS_DISABLED)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	7c5b      	ldrb	r3, [r3, #17]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d009      	beq.n	8007048 <ACIM_FREQ_CTRL_lTaskSchedulerTimeUpdate+0x28>
      || (HandlePtr->acim_config_ptr->pcl_task_conf == (uint8_t) ACIM_FREQ_CTRL_TS_SW_DIV)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	7c5b      	ldrb	r3, [r3, #17]
 800703a:	2b01      	cmp	r3, #1
 800703c:	d004      	beq.n	8007048 <ACIM_FREQ_CTRL_lTaskSchedulerTimeUpdate+0x28>
      || (HandlePtr->acim_config_ptr->pcl_task_conf == (uint8_t) ACIM_FREQ_CTRL_TS_PCL_ISR))
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	7c5b      	ldrb	r3, [r3, #17]
 8007044:	2b02      	cmp	r3, #2
 8007046:	d11d      	bne.n	8007084 <ACIM_FREQ_CTRL_lTaskSchedulerTimeUpdate+0x64>
  {
    /*Update pcl time */
    HandlePtr->pcl_time = ((1000000U * HandlePtr->acim_config_ptr->pcl_divider) / frequency_value);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	7d5b      	ldrb	r3, [r3, #21]
 800704e:	461a      	mov	r2, r3
 8007050:	4b1a      	ldr	r3, [pc, #104]	; (80070bc <ACIM_FREQ_CTRL_lTaskSchedulerTimeUpdate+0x9c>)
 8007052:	fb03 f202 	mul.w	r2, r3, r2
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	fbb2 f2f3 	udiv	r2, r2, r3
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /*Update msm time */
    HandlePtr->msm_time = HandlePtr->pcl_time;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    /*Update svp time */
    if (HandlePtr->acim_config_ptr->svp_task_conf == (uint8_t) ACIM_FREQ_CTRL_TS_PCL_TASK)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	7c9b      	ldrb	r3, [r3, #18]
 8007074:	2b05      	cmp	r3, #5
 8007076:	d105      	bne.n	8007084 <ACIM_FREQ_CTRL_lTaskSchedulerTimeUpdate+0x64>
    {
      HandlePtr->svp_time = HandlePtr->pcl_time;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }
  }

  /*Update svp time if it dont use PCL_ISR time*/
  if ((HandlePtr->acim_config_ptr->svp_task_conf == (uint8_t) ACIM_FREQ_CTRL_TS_DISABLED)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	7c9b      	ldrb	r3, [r3, #18]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d004      	beq.n	8007098 <ACIM_FREQ_CTRL_lTaskSchedulerTimeUpdate+0x78>
      || (HandlePtr->acim_config_ptr->svp_task_conf == (uint8_t) ACIM_FREQ_CTRL_TS_SW_DIV))
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	7c9b      	ldrb	r3, [r3, #18]
 8007094:	2b01      	cmp	r3, #1
 8007096:	d10c      	bne.n	80070b2 <ACIM_FREQ_CTRL_lTaskSchedulerTimeUpdate+0x92>
  {
    /*Update svp time */
    HandlePtr->svp_time = ((1000000U * HandlePtr->acim_config_ptr->svp_divider) / frequency_value);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	7d9b      	ldrb	r3, [r3, #22]
 800709e:	461a      	mov	r2, r3
 80070a0:	4b06      	ldr	r3, [pc, #24]	; (80070bc <ACIM_FREQ_CTRL_lTaskSchedulerTimeUpdate+0x9c>)
 80070a2:	fb03 f202 	mul.w	r2, r3, r2
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
}
 80070b2:	370c      	adds	r7, #12
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr
 80070bc:	000f4240 	.word	0x000f4240

080070c0 <ACIM_FREQ_CTRL_SetPWMFrequency>:
/* This API set the PWM frequency and update the related parameters(angle_scale and bootstrap_count). */
ACIM_FREQ_CTRL_STATUS_t ACIM_FREQ_CTRL_SetPWMFrequency(ACIM_FREQ_CTRL_t* const HandlePtr, uint32_t frequency_value)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
  ACIM_FREQ_CTRL_PT_ENTRY_t* param_ptr = &HandlePtr->param_table_ptr[ACIM_FREQ_CTRL_PID_PWM_FREQUENCY];
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	699b      	ldr	r3, [r3, #24]
 80070ce:	338c      	adds	r3, #140	; 0x8c
 80070d0:	60bb      	str	r3, [r7, #8]
  uint32_t status = (uint32_t) ACIM_FREQ_CTRL_STATUS_SUCCESS;
 80070d2:	2300      	movs	r3, #0
 80070d4:	60fb      	str	r3, [r7, #12]
  if (param_ptr->write_access == (uint8_t) ACIM_FREQ_CTRL_PH_WA_ALLOWED)
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	7e1b      	ldrb	r3, [r3, #24]
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d151      	bne.n	8007182 <ACIM_FREQ_CTRL_SetPWMFrequency+0xc2>
  {
    if (HandlePtr->msm_state == ACIM_FREQ_CTRL_MSM_STOP)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d149      	bne.n	800717c <ACIM_FREQ_CTRL_SetPWMFrequency+0xbc>
    {
      if ((frequency_value >= (uint32_t) param_ptr->minval) && (frequency_value <= (uint32_t) param_ptr->maxval))
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	461a      	mov	r2, r3
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d840      	bhi.n	8007176 <ACIM_FREQ_CTRL_SetPWMFrequency+0xb6>
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	461a      	mov	r2, r3
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d33a      	bcc.n	8007176 <ACIM_FREQ_CTRL_SetPWMFrequency+0xb6>
      {
        /* Update the pwm frequency */
        HandlePtr->pwm_frequency = frequency_value;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	683a      	ldr	r2, [r7, #0]
 8007104:	651a      	str	r2, [r3, #80]	; 0x50
        status = (uint32_t) PWM_SVM_SetPWMFrequency(HandlePtr->pwm_svm_ptr, frequency_value);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	4618      	mov	r0, r3
 800710c:	6839      	ldr	r1, [r7, #0]
 800710e:	f7fc ff65 	bl	8003fdc <PWM_SVM_SetPWMFrequency>
 8007112:	4603      	mov	r3, r0
 8007114:	60fb      	str	r3, [r7, #12]
        if (frequency_value != 0U)
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d01c      	beq.n	8007156 <ACIM_FREQ_CTRL_SetPWMFrequency+0x96>
        {
          /* Update angle scale */
          HandlePtr->angle_scale = ((((HandlePtr->acim_config_ptr->nominal_speed
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	681b      	ldr	r3, [r3, #0]
              * HandlePtr->acim_config_ptr->fcl_divider * HandlePtr->acim_config_ptr->pole_pair) <<
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	6812      	ldr	r2, [r2, #0]
 8007126:	7d12      	ldrb	r2, [r2, #20]
 8007128:	fb02 f303 	mul.w	r3, r2, r3
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	6812      	ldr	r2, [r2, #0]
 8007130:	7c12      	ldrb	r2, [r2, #16]
 8007132:	fb02 f303 	mul.w	r3, r2, r3
 8007136:	0299      	lsls	r1, r3, #10
          ACIM_FREQ_CTRL_VFSCALE) / (frequency_value * 60U)) << 8U);
 8007138:	683a      	ldr	r2, [r7, #0]
 800713a:	4613      	mov	r3, r2
 800713c:	011b      	lsls	r3, r3, #4
 800713e:	1a9b      	subs	r3, r3, r2
 8007140:	009b      	lsls	r3, r3, #2
 8007142:	fbb1 f3f3 	udiv	r3, r1, r3
 8007146:	021a      	lsls	r2, r3, #8
        HandlePtr->pwm_frequency = frequency_value;
        status = (uint32_t) PWM_SVM_SetPWMFrequency(HandlePtr->pwm_svm_ptr, frequency_value);
        if (frequency_value != 0U)
        {
          /* Update angle scale */
          HandlePtr->angle_scale = ((((HandlePtr->acim_config_ptr->nominal_speed
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
              * HandlePtr->acim_config_ptr->fcl_divider * HandlePtr->acim_config_ptr->pole_pair) <<
          ACIM_FREQ_CTRL_VFSCALE) / (frequency_value * 60U)) << 8U);

          ACIM_FREQ_CTRL_lTaskSchedulerTimeUpdate(HandlePtr, frequency_value);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	6839      	ldr	r1, [r7, #0]
 8007152:	f7ff ff65 	bl	8007020 <ACIM_FREQ_CTRL_lTaskSchedulerTimeUpdate>

        }
        /* Update bootstrap count*/
        HandlePtr->bootstrap_count = (uint16_t)(
            ((uint32_t) HandlePtr->acim_config_ptr->bootstrap_time * frequency_value) / 1000U);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	899b      	ldrh	r3, [r3, #12]
 800715c:	461a      	mov	r2, r3
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	fb03 f302 	mul.w	r3, r3, r2
 8007164:	4a0b      	ldr	r2, [pc, #44]	; (8007194 <ACIM_FREQ_CTRL_SetPWMFrequency+0xd4>)
 8007166:	fba2 2303 	umull	r2, r3, r2, r3
 800716a:	099b      	lsrs	r3, r3, #6

          ACIM_FREQ_CTRL_lTaskSchedulerTimeUpdate(HandlePtr, frequency_value);

        }
        /* Update bootstrap count*/
        HandlePtr->bootstrap_count = (uint16_t)(
 800716c:	b29a      	uxth	r2, r3
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 8007174:	e007      	b.n	8007186 <ACIM_FREQ_CTRL_SetPWMFrequency+0xc6>
            ((uint32_t) HandlePtr->acim_config_ptr->bootstrap_time * frequency_value) / 1000U);

      }
      else
      {
        status = (uint32_t) ACIM_FREQ_CTRL_STATUS_INVALID_PARAM;
 8007176:	2302      	movs	r3, #2
 8007178:	60fb      	str	r3, [r7, #12]
 800717a:	e004      	b.n	8007186 <ACIM_FREQ_CTRL_SetPWMFrequency+0xc6>
      }
    }
    else
    {
      status = (uint32_t) ACIM_FREQ_CTRL_STATUS_OPERATION_NOT_ALLOWED;
 800717c:	2303      	movs	r3, #3
 800717e:	60fb      	str	r3, [r7, #12]
 8007180:	e001      	b.n	8007186 <ACIM_FREQ_CTRL_SetPWMFrequency+0xc6>
    }
  }
  else
  {
    status = (uint32_t) ACIM_FREQ_CTRL_STATUS_PERMISSION_DENIED;
 8007182:	2304      	movs	r3, #4
 8007184:	60fb      	str	r3, [r7, #12]
  }
  return (ACIM_FREQ_CTRL_STATUS_t) status;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	b2db      	uxtb	r3, r3
}
 800718a:	4618      	mov	r0, r3
 800718c:	3710      	adds	r7, #16
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	10624dd3 	.word	0x10624dd3

08007198 <ACIM_FREQ_CTRL_SetAngleoffset>:
{
  return (uint32_t)(PWM_SVM_GetPWMFrequency(HandlePtr->pwm_svm_ptr));
}

ACIM_FREQ_CTRL_STATUS_t ACIM_FREQ_CTRL_SetAngleoffset(ACIM_FREQ_CTRL_t* const HandlePtr, uint32_t angle_value)
{
 8007198:	b480      	push	{r7}
 800719a:	b085      	sub	sp, #20
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	6039      	str	r1, [r7, #0]
  ACIM_FREQ_CTRL_STATUS_t status = ACIM_FREQ_CTRL_STATUS_SUCCESS;
 80071a2:	2300      	movs	r3, #0
 80071a4:	73fb      	strb	r3, [r7, #15]
  ACIM_FREQ_CTRL_PT_ENTRY_t* param_ptr = &HandlePtr->param_table_ptr[ACIM_FREQ_CTRL_PID_ANGLE_OFFSET];
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	699b      	ldr	r3, [r3, #24]
 80071aa:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 80071ae:	60bb      	str	r3, [r7, #8]
  if (param_ptr->write_access == (uint8_t) ACIM_FREQ_CTRL_PH_WA_ALLOWED)
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	7e1b      	ldrb	r3, [r3, #24]
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d116      	bne.n	80071e6 <ACIM_FREQ_CTRL_SetAngleoffset+0x4e>
  {
    if ((angle_value >= (uint32_t) param_ptr->minval) && (angle_value <= (uint32_t) param_ptr->maxval))
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	461a      	mov	r2, r3
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d80d      	bhi.n	80071e0 <ACIM_FREQ_CTRL_SetAngleoffset+0x48>
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	461a      	mov	r2, r3
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d307      	bcc.n	80071e0 <ACIM_FREQ_CTRL_SetAngleoffset+0x48>
    {
      HandlePtr->angle_offset = (angle_value * param_ptr->inv_scale);
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	691b      	ldr	r3, [r3, #16]
 80071d4:	683a      	ldr	r2, [r7, #0]
 80071d6:	fb02 f203 	mul.w	r2, r2, r3
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	659a      	str	r2, [r3, #88]	; 0x58
 80071de:	e004      	b.n	80071ea <ACIM_FREQ_CTRL_SetAngleoffset+0x52>
    }
    else
    {
      status = ACIM_FREQ_CTRL_STATUS_INVALID_PARAM;
 80071e0:	2302      	movs	r3, #2
 80071e2:	73fb      	strb	r3, [r7, #15]
 80071e4:	e001      	b.n	80071ea <ACIM_FREQ_CTRL_SetAngleoffset+0x52>
    }
  }
  else
  {
    status = ACIM_FREQ_CTRL_STATUS_PERMISSION_DENIED;
 80071e6:	2304      	movs	r3, #4
 80071e8:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80071ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3714      	adds	r7, #20
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr

080071f8 <ACIM_FREQ_CTRL_Amplitude_Calculation>:
  HandlePtr->current_limit_ptr->input_ptr = ref_address;
}


void ACIM_FREQ_CTRL_Amplitude_Calculation(ACIM_FREQ_CTRL_t* const HandlePtr)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b087      	sub	sp, #28
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  int32_t temp_speed_ref;
  uint32_t temp_speed_value;
  ACIM_FREQ_CTRL_VF_t * const module_ptr = HandlePtr->vf_control_ptr;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	613b      	str	r3, [r7, #16]

  /*Amplitude Calculation*/
  temp_speed_ref = module_ptr->input;
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	617b      	str	r3, [r7, #20]

  if (temp_speed_ref < 0)
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	2b00      	cmp	r3, #0
 8007210:	da02      	bge.n	8007218 <ACIM_FREQ_CTRL_Amplitude_Calculation+0x20>
  {
    temp_speed_ref = -1 * temp_speed_ref;
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	425b      	negs	r3, r3
 8007216:	617b      	str	r3, [r7, #20]
  }
  temp_speed_value = (uint32_t) temp_speed_ref;
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	60fb      	str	r3, [r7, #12]

  module_ptr->output_amplitude = (uint32_t)(
      ((temp_speed_value * (module_ptr->vf_constant)) >> ACIM_FREQ_CTRL_VFSCALE) + (module_ptr->vf_offset));
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	68fa      	ldr	r2, [r7, #12]
 8007222:	fb02 f303 	mul.w	r3, r2, r3
 8007226:	0a9a      	lsrs	r2, r3, #10
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	685b      	ldr	r3, [r3, #4]
  {
    temp_speed_ref = -1 * temp_speed_ref;
  }
  temp_speed_value = (uint32_t) temp_speed_ref;

  module_ptr->output_amplitude = (uint32_t)(
 800722c:	441a      	add	r2, r3
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	611a      	str	r2, [r3, #16]
      ((temp_speed_value * (module_ptr->vf_constant)) >> ACIM_FREQ_CTRL_VFSCALE) + (module_ptr->vf_offset));

  if (module_ptr->output_amplitude > HandlePtr->voltage_limit)
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	691a      	ldr	r2, [r3, #16]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800723a:	429a      	cmp	r2, r3
 800723c:	d903      	bls.n	8007246 <ACIM_FREQ_CTRL_Amplitude_Calculation+0x4e>
  {
    module_ptr->output_amplitude = HandlePtr->voltage_limit;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	611a      	str	r2, [r3, #16]
  }
}
 8007246:	371c      	adds	r7, #28
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr

08007250 <ACIM_FREQ_CTRL_AngleRamp>:
void ACIM_FREQ_CTRL_AngleRamp(ACIM_FREQ_CTRL_t* const HandlePtr)
{
 8007250:	b480      	push	{r7}
 8007252:	b085      	sub	sp, #20
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  uint32_t temp_input;
  temp_input = (uint32_t) HandlePtr->vf_control_ptr->input;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	60fb      	str	r3, [r7, #12]
  temp_input = (HandlePtr->angle_scale * temp_input) >> 8U;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007266:	68fa      	ldr	r2, [r7, #12]
 8007268:	fb02 f303 	mul.w	r3, r2, r3
 800726c:	0a1b      	lsrs	r3, r3, #8
 800726e:	60fb      	str	r3, [r7, #12]
  /*Angle Calculation*/
  HandlePtr->vf_control_ptr->output_angle += (int32_t) temp_input;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	6892      	ldr	r2, [r2, #8]
 8007278:	68d1      	ldr	r1, [r2, #12]
 800727a:	68fa      	ldr	r2, [r7, #12]
 800727c:	440a      	add	r2, r1
 800727e:	60da      	str	r2, [r3, #12]
}
 8007280:	3714      	adds	r7, #20
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr
 800728a:	bf00      	nop

0800728c <ACIM_FREQ_CTRL_BootStrapConfiguration>:
    }
  }
}

void ACIM_FREQ_CTRL_BootStrapConfiguration(ACIM_FREQ_CTRL_t* const HandlePtr)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b084      	sub	sp, #16
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  volatile uint8_t phase_count;
  PWM_SVM_t * const module_ptr = HandlePtr->pwm_svm_ptr;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	60fb      	str	r3, [r7, #12]

  /*BootStrapping*/
  for (phase_count = (uint8_t) 0; phase_count < (uint8_t) 3; phase_count++)
 800729a:	2300      	movs	r3, #0
 800729c:	72fb      	strb	r3, [r7, #11]
 800729e:	e01e      	b.n	80072de <ACIM_FREQ_CTRL_BootStrapConfiguration+0x52>
  {
    /* Update channel 1 compare value (CR1) of slice */
    XMC_CCU8_SLICE_SetTimerCompareMatch(module_ptr->phase_ptr[phase_count]->slice_ptr,
 80072a0:	7afb      	ldrb	r3, [r7, #11]
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	461a      	mov	r2, r3
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	3202      	adds	r2, #2
 80072aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4618      	mov	r0, r3
 80072b2:	2100      	movs	r1, #0
 80072b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80072b8:	f7fa fa7c 	bl	80017b4 <XMC_CCU8_SLICE_SetTimerCompareMatch>
        (XMC_CCU8_SLICE_COMPARE_CHANNEL_t) XMC_CCU8_SLICE_COMPARE_CHANNEL_1, (uint16_t) 0xFFFFU);
    /*Disable PWM Asymmetrical, if this is enabled*/
    XMC_CCU8_SLICE_SetOutPath(HandlePtr->pwm_svm_ptr->phase_ptr[phase_count]->slice_ptr, 0x1E0014U);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	7afa      	ldrb	r2, [r7, #11]
 80072c2:	b2d2      	uxtb	r2, r2
 80072c4:	3202      	adds	r2, #2
 80072c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4618      	mov	r0, r3
 80072ce:	490c      	ldr	r1, [pc, #48]	; (8007300 <ACIM_FREQ_CTRL_BootStrapConfiguration+0x74>)
 80072d0:	f7fa f93e 	bl	8001550 <XMC_CCU8_SLICE_SetOutPath>
{
  volatile uint8_t phase_count;
  PWM_SVM_t * const module_ptr = HandlePtr->pwm_svm_ptr;

  /*BootStrapping*/
  for (phase_count = (uint8_t) 0; phase_count < (uint8_t) 3; phase_count++)
 80072d4:	7afb      	ldrb	r3, [r7, #11]
 80072d6:	b2db      	uxtb	r3, r3
 80072d8:	3301      	adds	r3, #1
 80072da:	b2db      	uxtb	r3, r3
 80072dc:	72fb      	strb	r3, [r7, #11]
 80072de:	7afb      	ldrb	r3, [r7, #11]
 80072e0:	b2db      	uxtb	r3, r3
 80072e2:	2b02      	cmp	r3, #2
 80072e4:	d9dc      	bls.n	80072a0 <ACIM_FREQ_CTRL_BootStrapConfiguration+0x14>
    /*Disable PWM Asymmetrical, if this is enabled*/
    XMC_CCU8_SLICE_SetOutPath(HandlePtr->pwm_svm_ptr->phase_ptr[phase_count]->slice_ptr, 0x1E0014U);
  }

  /*Enable the shadow transfer for all three consumed slice*/
  XMC_CCU8_EnableShadowTransfer(module_ptr->global_ptr, module_ptr->confighandle_ptr->shadow_transfer_mask);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	685a      	ldr	r2, [r3, #4]
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f0:	4610      	mov	r0, r2
 80072f2:	4619      	mov	r1, r3
 80072f4:	f7ff fae2 	bl	80068bc <XMC_CCU8_EnableShadowTransfer>
}
 80072f8:	3710      	adds	r7, #16
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}
 80072fe:	bf00      	nop
 8007300:	001e0014 	.word	0x001e0014

08007304 <ACIM_FREQ_CTRL_StartPWMTimer>:
  }
}
#endif

void ACIM_FREQ_CTRL_StartPWMTimer(ACIM_FREQ_CTRL_t* const HandlePtr)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  volatile uint8_t phase_count;
  PWM_SVM_t* const module_ptr = HandlePtr->pwm_svm_ptr;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	60fb      	str	r3, [r7, #12]

  for (phase_count = (uint8_t) 0; phase_count < (uint8_t) 3; phase_count++)
 8007312:	2300      	movs	r3, #0
 8007314:	72fb      	strb	r3, [r7, #11]
 8007316:	e011      	b.n	800733c <ACIM_FREQ_CTRL_StartPWMTimer+0x38>
  {
    /* configure the Start trigger function*/
    XMC_CCU8_SLICE_StartConfig(module_ptr->phase_ptr[phase_count]->slice_ptr,
 8007318:	7afb      	ldrb	r3, [r7, #11]
 800731a:	b2db      	uxtb	r3, r3
 800731c:	461a      	mov	r2, r3
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	3202      	adds	r2, #2
 8007322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4618      	mov	r0, r3
 800732a:	2101      	movs	r1, #1
 800732c:	2201      	movs	r2, #1
 800732e:	f7fa f947 	bl	80015c0 <XMC_CCU8_SLICE_StartConfig>
void ACIM_FREQ_CTRL_StartPWMTimer(ACIM_FREQ_CTRL_t* const HandlePtr)
{
  volatile uint8_t phase_count;
  PWM_SVM_t* const module_ptr = HandlePtr->pwm_svm_ptr;

  for (phase_count = (uint8_t) 0; phase_count < (uint8_t) 3; phase_count++)
 8007332:	7afb      	ldrb	r3, [r7, #11]
 8007334:	b2db      	uxtb	r3, r3
 8007336:	3301      	adds	r3, #1
 8007338:	b2db      	uxtb	r3, r3
 800733a:	72fb      	strb	r3, [r7, #11]
 800733c:	7afb      	ldrb	r3, [r7, #11]
 800733e:	b2db      	uxtb	r3, r3
 8007340:	2b02      	cmp	r3, #2
 8007342:	d9e9      	bls.n	8007318 <ACIM_FREQ_CTRL_StartPWMTimer+0x14>
    XMC_CCU8_SLICE_StartConfig(module_ptr->phase_ptr[phase_count]->slice_ptr,
        (XMC_CCU8_SLICE_EVENT_t) XMC_CCU8_SLICE_EVENT_0,
        (XMC_CCU8_SLICE_START_MODE_t) XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR);
  }
  /* synchronous start of CCU8 slices */
  XMC_SCU_SetCcuTriggerHigh(module_ptr->confighandle_ptr->sync_start_mask);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	6a1b      	ldr	r3, [r3, #32]
 800734a:	4618      	mov	r0, r3
 800734c:	f7ff fac4 	bl	80068d8 <XMC_SCU_SetCcuTriggerHigh>
  for (phase_count = (uint8_t) 0; phase_count < (uint8_t) 3; phase_count++)
 8007350:	2300      	movs	r3, #0
 8007352:	72fb      	strb	r3, [r7, #11]
 8007354:	e011      	b.n	800737a <ACIM_FREQ_CTRL_StartPWMTimer+0x76>
  {
    /* configure the Start trigger function*/
    XMC_CCU8_SLICE_StartConfig(module_ptr->phase_ptr[phase_count]->slice_ptr,
 8007356:	7afb      	ldrb	r3, [r7, #11]
 8007358:	b2db      	uxtb	r3, r3
 800735a:	461a      	mov	r2, r3
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	3202      	adds	r2, #2
 8007360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4618      	mov	r0, r3
 8007368:	2100      	movs	r1, #0
 800736a:	2201      	movs	r2, #1
 800736c:	f7fa f928 	bl	80015c0 <XMC_CCU8_SLICE_StartConfig>
        (XMC_CCU8_SLICE_EVENT_t) XMC_CCU8_SLICE_EVENT_0,
        (XMC_CCU8_SLICE_START_MODE_t) XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR);
  }
  /* synchronous start of CCU8 slices */
  XMC_SCU_SetCcuTriggerHigh(module_ptr->confighandle_ptr->sync_start_mask);
  for (phase_count = (uint8_t) 0; phase_count < (uint8_t) 3; phase_count++)
 8007370:	7afb      	ldrb	r3, [r7, #11]
 8007372:	b2db      	uxtb	r3, r3
 8007374:	3301      	adds	r3, #1
 8007376:	b2db      	uxtb	r3, r3
 8007378:	72fb      	strb	r3, [r7, #11]
 800737a:	7afb      	ldrb	r3, [r7, #11]
 800737c:	b2db      	uxtb	r3, r3
 800737e:	2b02      	cmp	r3, #2
 8007380:	d9e9      	bls.n	8007356 <ACIM_FREQ_CTRL_StartPWMTimer+0x52>
    /* configure the Start trigger function*/
    XMC_CCU8_SLICE_StartConfig(module_ptr->phase_ptr[phase_count]->slice_ptr,
        (XMC_CCU8_SLICE_EVENT_t) XMC_CCU8_SLICE_EVENT_NONE,
        (XMC_CCU8_SLICE_START_MODE_t) XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR);
  }
}
 8007382:	3710      	adds	r7, #16
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}

08007388 <ACIM_FREQ_CTRL_StopPWMTimer>:

void ACIM_FREQ_CTRL_StopPWMTimer(ACIM_FREQ_CTRL_t* const HandlePtr)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b082      	sub	sp, #8
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  /* synchronous stop of CCU8 slices */
  XMC_SCU_SetCcuTriggerLow(HandlePtr->pwm_svm_ptr->confighandle_ptr->sync_start_mask);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	6a1b      	ldr	r3, [r3, #32]
 8007398:	4618      	mov	r0, r3
 800739a:	f7ff faaf 	bl	80068fc <XMC_SCU_SetCcuTriggerLow>
}
 800739e:	3708      	adds	r7, #8
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <ACIM_FREQ_CTRL_MSM>:
  module_ptr->output = module_ptr->pi_ptr->pi_out_val;
}

/* Motot control state machine*/
void ACIM_FREQ_CTRL_MSM(ACIM_FREQ_CTRL_t* const HandlePtr)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b082      	sub	sp, #8
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  switch (HandlePtr->msm_state)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80073b2:	2b0f      	cmp	r3, #15
 80073b4:	d878      	bhi.n	80074a8 <ACIM_FREQ_CTRL_MSM+0x104>
 80073b6:	a201      	add	r2, pc, #4	; (adr r2, 80073bc <ACIM_FREQ_CTRL_MSM+0x18>)
 80073b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073bc:	080074a1 	.word	0x080074a1
 80073c0:	080073fd 	.word	0x080073fd
 80073c4:	0800744f 	.word	0x0800744f
 80073c8:	080074a9 	.word	0x080074a9
 80073cc:	080074a9 	.word	0x080074a9
 80073d0:	08007469 	.word	0x08007469
 80073d4:	080074a9 	.word	0x080074a9
 80073d8:	080074a9 	.word	0x080074a9
 80073dc:	080074a9 	.word	0x080074a9
 80073e0:	08007437 	.word	0x08007437
 80073e4:	080074a9 	.word	0x080074a9
 80073e8:	080074a9 	.word	0x080074a9
 80073ec:	080074a9 	.word	0x080074a9
 80073f0:	080074a9 	.word	0x080074a9
 80073f4:	080074a9 	.word	0x080074a9
 80073f8:	08007481 	.word	0x08007481
  {
    case ACIM_FREQ_CTRL_MSM_INIT_INVERTER:

      /*Initialize all run time parameters*/
      ACIM_FREQ_CTRL_MotorParamInit(HandlePtr);
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f7ff faf5 	bl	80069ec <ACIM_FREQ_CTRL_MotorParamInit>
#if (ACIM_FREQ_CTRL_IS_ADC_AVAILABLE == 1U)
      ACIM_FREQ_CTRL_AmpBiasVoltCalibration(HandlePtr);
#endif

      /*Start PWM Timer to run the Motor State Machine*/
      ACIM_FREQ_CTRL_StartPWMTimer(HandlePtr);
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f7ff ff7e 	bl	8007304 <ACIM_FREQ_CTRL_StartPWMTimer>

      /*Enable inverter*/
      PWM_SVM_InverterEnable(HandlePtr->pwm_svm_ptr);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	4618      	mov	r0, r3
 800740e:	f7fc fab3 	bl	8003978 <PWM_SVM_InverterEnable>

      if (HandlePtr->bootstrap_count != 0U)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8007418:	2b00      	cmp	r3, #0
 800741a:	d007      	beq.n	800742c <ACIM_FREQ_CTRL_MSM+0x88>
      {
        /*Boot strap Configuration */
        ACIM_FREQ_CTRL_BootStrapConfiguration(HandlePtr);
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f7ff ff35 	bl	800728c <ACIM_FREQ_CTRL_BootStrapConfiguration>
        /*Change Motor Control State Machine to Boot Strap*/
        HandlePtr->msm_state = ACIM_FREQ_CTRL_MSM_BOOTSTRAP;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2209      	movs	r2, #9
 8007426:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      }
      else
      {
        HandlePtr->msm_state = ACIM_FREQ_CTRL_MSM_START_UP;
      }
      break;
 800742a:	e03e      	b.n	80074aa <ACIM_FREQ_CTRL_MSM+0x106>
        /*Change Motor Control State Machine to Boot Strap*/
        HandlePtr->msm_state = ACIM_FREQ_CTRL_MSM_BOOTSTRAP;
      }
      else
      {
        HandlePtr->msm_state = ACIM_FREQ_CTRL_MSM_START_UP;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2202      	movs	r2, #2
 8007430:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      }
      break;
 8007434:	e039      	b.n	80074aa <ACIM_FREQ_CTRL_MSM+0x106>

    case ACIM_FREQ_CTRL_MSM_BOOTSTRAP:
      if (ACIM_FREQ_CTRL_BOOTSTRAP_COMPLETED == ACIM_FREQ_CTRL_BootStrap(HandlePtr))
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 f86a 	bl	8007510 <ACIM_FREQ_CTRL_BootStrap>
 800743c:	4603      	mov	r3, r0
 800743e:	2b01      	cmp	r3, #1
 8007440:	d104      	bne.n	800744c <ACIM_FREQ_CTRL_MSM+0xa8>
      {
        HandlePtr->msm_state = ACIM_FREQ_CTRL_MSM_START_UP;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2202      	movs	r2, #2
 8007446:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

      }
      break;
 800744a:	e02e      	b.n	80074aa <ACIM_FREQ_CTRL_MSM+0x106>
 800744c:	e02d      	b.n	80074aa <ACIM_FREQ_CTRL_MSM+0x106>

    case ACIM_FREQ_CTRL_MSM_START_UP:

      /*Stop the PWM timer*/
      ACIM_FREQ_CTRL_StopPWMTimer(HandlePtr);
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f7ff ff9a 	bl	8007388 <ACIM_FREQ_CTRL_StopPWMTimer>

      /*Start SVM*/
      PWM_SVM_Start(HandlePtr->pwm_svm_ptr);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	4618      	mov	r0, r3
 800745a:	f7fc fbff 	bl	8003c5c <PWM_SVM_Start>

      /*Change Motor Control State Machine to Operation*/
      HandlePtr->msm_state = ACIM_FREQ_CTRL_MSM_NORMAL_OPERATION;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2205      	movs	r2, #5
 8007462:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007466:	e020      	b.n	80074aa <ACIM_FREQ_CTRL_MSM+0x106>
    case ACIM_FREQ_CTRL_MSM_TRANSITION:
      break;

    case ACIM_FREQ_CTRL_MSM_NORMAL_OPERATION:

      if ((HandlePtr->operational_error & 0x1FU) != 0U)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800746c:	f003 031f 	and.w	r3, r3, #31
 8007470:	2b00      	cmp	r3, #0
 8007472:	d004      	beq.n	800747e <ACIM_FREQ_CTRL_MSM+0xda>
      {
        HandlePtr->msm_state = ACIM_FREQ_CTRL_MSM_ERROR;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	220f      	movs	r2, #15
 8007478:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      }
      break;
 800747c:	e015      	b.n	80074aa <ACIM_FREQ_CTRL_MSM+0x106>
 800747e:	e014      	b.n	80074aa <ACIM_FREQ_CTRL_MSM+0x106>

    case ACIM_FREQ_CTRL_MSM_ERROR:
      /*Report error to error handler*/
      ACIM_FREQ_CTRL_ReportError(HandlePtr);
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f000 f815 	bl	80074b0 <ACIM_FREQ_CTRL_ReportError>
#if (ACIM_FREQ_CTRL_IS_DSM_AVAILABLE == 1U)
      if ((uint8_t)ACIM_FREQ_CTRL_TS_DISABLED != HandlePtr->acim_config_ptr->dsm_task_conf)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	7cdb      	ldrb	r3, [r3, #19]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d006      	beq.n	800749e <ACIM_FREQ_CTRL_MSM+0xfa>
      {
        AUTOMATION_SM_RequestState(HandlePtr->acim_statemachine,(uint8_t)ACIM_FREQ_CTRL_DSM_ERROR);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007494:	4618      	mov	r0, r3
 8007496:	2107      	movs	r1, #7
 8007498:	f7fe ff3c 	bl	8006314 <AUTOMATION_SM_RequestState>
      }
#endif
      break;
 800749c:	e005      	b.n	80074aa <ACIM_FREQ_CTRL_MSM+0x106>
 800749e:	e004      	b.n	80074aa <ACIM_FREQ_CTRL_MSM+0x106>

    case ACIM_FREQ_CTRL_MSM_STOP:
      ACIM_FREQ_CTRL_MotorStop(HandlePtr);
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f7ff fc79 	bl	8006d98 <ACIM_FREQ_CTRL_MotorStop>
      break;
 80074a6:	e000      	b.n	80074aa <ACIM_FREQ_CTRL_MSM+0x106>

    default:
      break;
 80074a8:	bf00      	nop
  }
}
 80074aa:	3708      	adds	r7, #8
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <ACIM_FREQ_CTRL_ReportError>:

void ACIM_FREQ_CTRL_ReportError(ACIM_FREQ_CTRL_t* const HandlePtr)
{
 80074b0:	b590      	push	{r4, r7, lr}
 80074b2:	b085      	sub	sp, #20
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  uint8_t count;
  for (count = (uint8_t) 0; count < (uint8_t) ACIM_FREQ_CTRL_EID_MAX; count++)
 80074b8:	2300      	movs	r3, #0
 80074ba:	73fb      	strb	r3, [r7, #15]
 80074bc:	e022      	b.n	8007504 <ACIM_FREQ_CTRL_ReportError+0x54>
  {
    if (HandlePtr->error_table_ptr[count].error_status == (uint8_t) ACIM_FREQ_CTRL_ERROR_SET)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	69da      	ldr	r2, [r3, #28]
 80074c2:	7bfb      	ldrb	r3, [r7, #15]
 80074c4:	00db      	lsls	r3, r3, #3
 80074c6:	4413      	add	r3, r2
 80074c8:	795b      	ldrb	r3, [r3, #5]
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d117      	bne.n	80074fe <ACIM_FREQ_CTRL_ReportError+0x4e>
    {
#if ((ACIM_FREQ_CTRL_IS_AUTOMATION_AVAILABLE == 1U) && (AUTOMATION_EH_ENABLE == 1U))
      AUTOMATION_EH_AppInterface_ReportError(HandlePtr->app_id, HandlePtr->error_table_ptr[count].error_id,
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f893 00a5 	ldrb.w	r0, [r3, #165]	; 0xa5
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	69da      	ldr	r2, [r3, #28]
 80074d8:	7bfb      	ldrb	r3, [r7, #15]
 80074da:	00db      	lsls	r3, r3, #3
 80074dc:	4413      	add	r3, r2
 80074de:	7919      	ldrb	r1, [r3, #4]
          (AUTOMATION_EH_ERROR_SEVERITY_t)HandlePtr->error_table_ptr[count].error_severity,(AUTOMATION_EH_ERROR_STATUS_t)HandlePtr->error_table_ptr[count].error_status);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	69da      	ldr	r2, [r3, #28]
 80074e4:	7bfb      	ldrb	r3, [r7, #15]
 80074e6:	00db      	lsls	r3, r3, #3
 80074e8:	4413      	add	r3, r2
 80074ea:	799c      	ldrb	r4, [r3, #6]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	69da      	ldr	r2, [r3, #28]
 80074f0:	7bfb      	ldrb	r3, [r7, #15]
 80074f2:	00db      	lsls	r3, r3, #3
 80074f4:	4413      	add	r3, r2
 80074f6:	795b      	ldrb	r3, [r3, #5]
  for (count = (uint8_t) 0; count < (uint8_t) ACIM_FREQ_CTRL_EID_MAX; count++)
  {
    if (HandlePtr->error_table_ptr[count].error_status == (uint8_t) ACIM_FREQ_CTRL_ERROR_SET)
    {
#if ((ACIM_FREQ_CTRL_IS_AUTOMATION_AVAILABLE == 1U) && (AUTOMATION_EH_ENABLE == 1U))
      AUTOMATION_EH_AppInterface_ReportError(HandlePtr->app_id, HandlePtr->error_table_ptr[count].error_id,
 80074f8:	4622      	mov	r2, r4
 80074fa:	f7fe fcfb 	bl	8005ef4 <AUTOMATION_EH_AppInterface_ReportError>
}

void ACIM_FREQ_CTRL_ReportError(ACIM_FREQ_CTRL_t* const HandlePtr)
{
  uint8_t count;
  for (count = (uint8_t) 0; count < (uint8_t) ACIM_FREQ_CTRL_EID_MAX; count++)
 80074fe:	7bfb      	ldrb	r3, [r7, #15]
 8007500:	3301      	adds	r3, #1
 8007502:	73fb      	strb	r3, [r7, #15]
 8007504:	7bfb      	ldrb	r3, [r7, #15]
 8007506:	2b04      	cmp	r3, #4
 8007508:	d9d9      	bls.n	80074be <ACIM_FREQ_CTRL_ReportError+0xe>
  if ((uint16_t)1 == HandlePtr->acim_config_ptr->enable_error_callback)
  {
    ACIM_FREQ_CTRL_UserCodeErrorHandler(HandlePtr);
  }
#endif
}
 800750a:	3714      	adds	r7, #20
 800750c:	46bd      	mov	sp, r7
 800750e:	bd90      	pop	{r4, r7, pc}

08007510 <ACIM_FREQ_CTRL_BootStrap>:

ACIM_FREQ_CTRL_BOOTSTRAP_STATUS_t ACIM_FREQ_CTRL_BootStrap(ACIM_FREQ_CTRL_t* const HandlePtr)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b084      	sub	sp, #16
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  ACIM_FREQ_CTRL_BOOTSTRAP_STATUS_t status = ACIM_FREQ_CTRL_BOOTSTRAP_ACTIVE;
 8007518:	2300      	movs	r3, #0
 800751a:	73fb      	strb	r3, [r7, #15]

  /*Enable Bootstrap for Phase U*/
  if (HandlePtr->bootstrap_index < HandlePtr->bootstrap_count)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	; 0xa0
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8007528:	429a      	cmp	r2, r3
 800752a:	d21b      	bcs.n	8007564 <ACIM_FREQ_CTRL_BootStrap+0x54>
  {
    XMC_CCU8_SLICE_SetOutPath(HandlePtr->pwm_svm_ptr->phase_ptr[0U]->slice_ptr, 0x1E0000U);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4618      	mov	r0, r3
 8007536:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800753a:	f7fa f809 	bl	8001550 <XMC_CCU8_SLICE_SetOutPath>
    XMC_CCU8_SLICE_SetOutPath(HandlePtr->pwm_svm_ptr->phase_ptr[1U]->slice_ptr, 0x1E0000U);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4618      	mov	r0, r3
 8007548:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800754c:	f7fa f800 	bl	8001550 <XMC_CCU8_SLICE_SetOutPath>
    XMC_CCU8_SLICE_SetOutPath(HandlePtr->pwm_svm_ptr->phase_ptr[2U]->slice_ptr, 0x1E0000U);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	691b      	ldr	r3, [r3, #16]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4618      	mov	r0, r3
 800755a:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800755e:	f7f9 fff7 	bl	8001550 <XMC_CCU8_SLICE_SetOutPath>
 8007562:	e06b      	b.n	800763c <ACIM_FREQ_CTRL_BootStrap+0x12c>
  }
  /*Enable Bootstrap for Phase V*/
  else if (HandlePtr->bootstrap_index < (HandlePtr->bootstrap_count * 2U))
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 800756a:	461a      	mov	r2, r3
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8007572:	005b      	lsls	r3, r3, #1
 8007574:	429a      	cmp	r2, r3
 8007576:	d21b      	bcs.n	80075b0 <ACIM_FREQ_CTRL_BootStrap+0xa0>
  {
    XMC_CCU8_SLICE_SetOutPath(HandlePtr->pwm_svm_ptr->phase_ptr[0U]->slice_ptr, 0x1E0000U);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4618      	mov	r0, r3
 8007582:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8007586:	f7f9 ffe3 	bl	8001550 <XMC_CCU8_SLICE_SetOutPath>
    XMC_CCU8_SLICE_SetOutPath(HandlePtr->pwm_svm_ptr->phase_ptr[1U]->slice_ptr, 0x170000U);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4618      	mov	r0, r3
 8007594:	f44f 11b8 	mov.w	r1, #1507328	; 0x170000
 8007598:	f7f9 ffda 	bl	8001550 <XMC_CCU8_SLICE_SetOutPath>
    XMC_CCU8_SLICE_SetOutPath(HandlePtr->pwm_svm_ptr->phase_ptr[2U]->slice_ptr, 0x1E0000U);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	691b      	ldr	r3, [r3, #16]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4618      	mov	r0, r3
 80075a6:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 80075aa:	f7f9 ffd1 	bl	8001550 <XMC_CCU8_SLICE_SetOutPath>
 80075ae:	e045      	b.n	800763c <ACIM_FREQ_CTRL_BootStrap+0x12c>
  }
  /*Enable Bootstrap for Phase W*/
  else if (HandlePtr->bootstrap_index < (HandlePtr->bootstrap_count * 3U))
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 80075b6:	4619      	mov	r1, r3
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 80075be:	461a      	mov	r2, r3
 80075c0:	4613      	mov	r3, r2
 80075c2:	005b      	lsls	r3, r3, #1
 80075c4:	4413      	add	r3, r2
 80075c6:	4299      	cmp	r1, r3
 80075c8:	d21b      	bcs.n	8007602 <ACIM_FREQ_CTRL_BootStrap+0xf2>
  {
    XMC_CCU8_SLICE_SetOutPath(HandlePtr->pwm_svm_ptr->phase_ptr[0U]->slice_ptr, 0x1E0000U);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4618      	mov	r0, r3
 80075d4:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 80075d8:	f7f9 ffba 	bl	8001550 <XMC_CCU8_SLICE_SetOutPath>
    XMC_CCU8_SLICE_SetOutPath(HandlePtr->pwm_svm_ptr->phase_ptr[1U]->slice_ptr, 0x1E0000U);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	68db      	ldr	r3, [r3, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4618      	mov	r0, r3
 80075e6:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 80075ea:	f7f9 ffb1 	bl	8001550 <XMC_CCU8_SLICE_SetOutPath>
    XMC_CCU8_SLICE_SetOutPath(HandlePtr->pwm_svm_ptr->phase_ptr[2U]->slice_ptr, 0x170000U);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	691b      	ldr	r3, [r3, #16]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4618      	mov	r0, r3
 80075f8:	f44f 11b8 	mov.w	r1, #1507328	; 0x170000
 80075fc:	f7f9 ffa8 	bl	8001550 <XMC_CCU8_SLICE_SetOutPath>
 8007600:	e01c      	b.n	800763c <ACIM_FREQ_CTRL_BootStrap+0x12c>
  }
  else
  {
    /*Configure default value*/
    XMC_CCU8_SLICE_SetOutPath(HandlePtr->pwm_svm_ptr->phase_ptr[0U]->slice_ptr, 0x170000U);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4618      	mov	r0, r3
 800760c:	f44f 11b8 	mov.w	r1, #1507328	; 0x170000
 8007610:	f7f9 ff9e 	bl	8001550 <XMC_CCU8_SLICE_SetOutPath>
    XMC_CCU8_SLICE_SetOutPath(HandlePtr->pwm_svm_ptr->phase_ptr[1U]->slice_ptr, 0x170000U);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	68db      	ldr	r3, [r3, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4618      	mov	r0, r3
 800761e:	f44f 11b8 	mov.w	r1, #1507328	; 0x170000
 8007622:	f7f9 ff95 	bl	8001550 <XMC_CCU8_SLICE_SetOutPath>
    XMC_CCU8_SLICE_SetOutPath(HandlePtr->pwm_svm_ptr->phase_ptr[2U]->slice_ptr, 0x170000U);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	691b      	ldr	r3, [r3, #16]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4618      	mov	r0, r3
 8007630:	f44f 11b8 	mov.w	r1, #1507328	; 0x170000
 8007634:	f7f9 ff8c 	bl	8001550 <XMC_CCU8_SLICE_SetOutPath>
    status = ACIM_FREQ_CTRL_BOOTSTRAP_COMPLETED;
 8007638:	2301      	movs	r3, #1
 800763a:	73fb      	strb	r3, [r7, #15]
  }
  HandlePtr->bootstrap_index++;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8007642:	3301      	adds	r3, #1
 8007644:	b29a      	uxth	r2, r3
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
  return (status);
 800764c:	7bfb      	ldrb	r3, [r7, #15]
}
 800764e:	4618      	mov	r0, r3
 8007650:	3710      	adds	r7, #16
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
 8007656:	bf00      	nop

08007658 <ACIM_FREQ_CTRL_ClearErrorState>:

void ACIM_FREQ_CTRL_ClearErrorState(ACIM_FREQ_CTRL_t* const HandlePtr)
{
 8007658:	b590      	push	{r4, r7, lr}
 800765a:	b085      	sub	sp, #20
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  uint8_t count;
  for (count = (uint8_t) 0; count < (uint8_t) ACIM_FREQ_CTRL_EID_MAX; count++)
 8007660:	2300      	movs	r3, #0
 8007662:	73fb      	strb	r3, [r7, #15]
 8007664:	e029      	b.n	80076ba <ACIM_FREQ_CTRL_ClearErrorState+0x62>
  {
    if (HandlePtr->error_table_ptr[count].error_status == (uint8_t) ACIM_FREQ_CTRL_ERROR_SET)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	69da      	ldr	r2, [r3, #28]
 800766a:	7bfb      	ldrb	r3, [r7, #15]
 800766c:	00db      	lsls	r3, r3, #3
 800766e:	4413      	add	r3, r2
 8007670:	795b      	ldrb	r3, [r3, #5]
 8007672:	2b01      	cmp	r3, #1
 8007674:	d11e      	bne.n	80076b4 <ACIM_FREQ_CTRL_ClearErrorState+0x5c>
    {
      HandlePtr->error_table_ptr[count].error_status = (uint8_t) ACIM_FREQ_CTRL_ERROR_CLEARED;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	69da      	ldr	r2, [r3, #28]
 800767a:	7bfb      	ldrb	r3, [r7, #15]
 800767c:	00db      	lsls	r3, r3, #3
 800767e:	4413      	add	r3, r2
 8007680:	2200      	movs	r2, #0
 8007682:	715a      	strb	r2, [r3, #5]
#if ((ACIM_FREQ_CTRL_IS_AUTOMATION_AVAILABLE == 1U) && (AUTOMATION_EH_ENABLE == 1U))
      AUTOMATION_EH_AppInterface_ReportError(HandlePtr->app_id, HandlePtr->error_table_ptr[count].error_id,
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f893 00a5 	ldrb.w	r0, [r3, #165]	; 0xa5
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	69da      	ldr	r2, [r3, #28]
 800768e:	7bfb      	ldrb	r3, [r7, #15]
 8007690:	00db      	lsls	r3, r3, #3
 8007692:	4413      	add	r3, r2
 8007694:	7919      	ldrb	r1, [r3, #4]
          (AUTOMATION_EH_ERROR_SEVERITY_t)HandlePtr->error_table_ptr[count].error_severity,(AUTOMATION_EH_ERROR_STATUS_t)HandlePtr->error_table_ptr[count].error_status);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	69da      	ldr	r2, [r3, #28]
 800769a:	7bfb      	ldrb	r3, [r7, #15]
 800769c:	00db      	lsls	r3, r3, #3
 800769e:	4413      	add	r3, r2
 80076a0:	799c      	ldrb	r4, [r3, #6]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	69da      	ldr	r2, [r3, #28]
 80076a6:	7bfb      	ldrb	r3, [r7, #15]
 80076a8:	00db      	lsls	r3, r3, #3
 80076aa:	4413      	add	r3, r2
 80076ac:	795b      	ldrb	r3, [r3, #5]
  {
    if (HandlePtr->error_table_ptr[count].error_status == (uint8_t) ACIM_FREQ_CTRL_ERROR_SET)
    {
      HandlePtr->error_table_ptr[count].error_status = (uint8_t) ACIM_FREQ_CTRL_ERROR_CLEARED;
#if ((ACIM_FREQ_CTRL_IS_AUTOMATION_AVAILABLE == 1U) && (AUTOMATION_EH_ENABLE == 1U))
      AUTOMATION_EH_AppInterface_ReportError(HandlePtr->app_id, HandlePtr->error_table_ptr[count].error_id,
 80076ae:	4622      	mov	r2, r4
 80076b0:	f7fe fc20 	bl	8005ef4 <AUTOMATION_EH_AppInterface_ReportError>
}

void ACIM_FREQ_CTRL_ClearErrorState(ACIM_FREQ_CTRL_t* const HandlePtr)
{
  uint8_t count;
  for (count = (uint8_t) 0; count < (uint8_t) ACIM_FREQ_CTRL_EID_MAX; count++)
 80076b4:	7bfb      	ldrb	r3, [r7, #15]
 80076b6:	3301      	adds	r3, #1
 80076b8:	73fb      	strb	r3, [r7, #15]
 80076ba:	7bfb      	ldrb	r3, [r7, #15]
 80076bc:	2b04      	cmp	r3, #4
 80076be:	d9d2      	bls.n	8007666 <ACIM_FREQ_CTRL_ClearErrorState+0xe>
      AUTOMATION_EH_AppInterface_ReportError(HandlePtr->app_id, HandlePtr->error_table_ptr[count].error_id,
          (AUTOMATION_EH_ERROR_SEVERITY_t)HandlePtr->error_table_ptr[count].error_severity,(AUTOMATION_EH_ERROR_STATUS_t)HandlePtr->error_table_ptr[count].error_status);
#endif
    }
  }
  HandlePtr->operational_error = 0U;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	655a      	str	r2, [r3, #84]	; 0x54

  HandlePtr->msm_state = ACIM_FREQ_CTRL_MSM_STOP;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
}
 80076ce:	3714      	adds	r7, #20
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd90      	pop	{r4, r7, pc}

080076d4 <ACIM_FREQ_CTRL_DSM_SwitchedOff_Entry>:
#if (ACIM_FREQ_CTRL_IS_DSM_AVAILABLE == 1U)
void ACIM_FREQ_CTRL_DSM_SwitchedOff_Entry (void* HandlePtr)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b082      	sub	sp, #8
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  ACIM_FREQ_CTRL_MotorStop((ACIM_FREQ_CTRL_t*)HandlePtr);
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f7ff fb5b 	bl	8006d98 <ACIM_FREQ_CTRL_MotorStop>
}
 80076e2:	3708      	adds	r7, #8
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <ACIM_FREQ_CTRL_DSM_SwitchedOff_Action>:
void ACIM_FREQ_CTRL_DSM_SwitchedOff_Action (void* HandlePtr)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b084      	sub	sp, #16
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  ACIM_FREQ_CTRL_t* AppHandler = (ACIM_FREQ_CTRL_t*)HandlePtr;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	60fb      	str	r3, [r7, #12]
  if (AppHandler->state == (uint8_t)ACIM_FREQ_CTRL_UNINITIALISED)
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d106      	bne.n	800770c <ACIM_FREQ_CTRL_DSM_SwitchedOff_Action+0x24>
  {
    AUTOMATION_SM_RequestState(AppHandler->acim_statemachine,(uint8_t)ACIM_FREQ_CTRL_DSM_ERROR);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007702:	4618      	mov	r0, r3
 8007704:	2107      	movs	r1, #7
 8007706:	f7fe fe05 	bl	8006314 <AUTOMATION_SM_RequestState>
 800770a:	e005      	b.n	8007718 <ACIM_FREQ_CTRL_DSM_SwitchedOff_Action+0x30>
  }
  else
  {
    AUTOMATION_SM_RequestState(AppHandler->acim_statemachine,(uint8_t)ACIM_FREQ_CTRL_DSM_SAFE_TORQUE_OFF);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007710:	4618      	mov	r0, r3
 8007712:	2108      	movs	r1, #8
 8007714:	f7fe fdfe 	bl	8006314 <AUTOMATION_SM_RequestState>
  }
}
 8007718:	3710      	adds	r7, #16
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
 800771e:	bf00      	nop

08007720 <ACIM_FREQ_CTRL_DSM_SwitchedOff_Exit>:
void ACIM_FREQ_CTRL_DSM_SwitchedOff_Exit(void* HandlePtr)
{
 8007720:	b480      	push	{r7}
 8007722:	b085      	sub	sp, #20
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  ACIM_FREQ_CTRL_t* AppHandler = (ACIM_FREQ_CTRL_t*)HandlePtr;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	60fb      	str	r3, [r7, #12]
  if ((AppHandler->acim_statemachine->requested_state ==(uint8_t)ACIM_FREQ_CTRL_DSM_OPERATION )||
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007730:	7a5b      	ldrb	r3, [r3, #9]
 8007732:	2b03      	cmp	r3, #3
 8007734:	d004      	beq.n	8007740 <ACIM_FREQ_CTRL_DSM_SwitchedOff_Exit+0x20>
      (AppHandler->acim_statemachine->requested_state ==(uint8_t)ACIM_FREQ_CTRL_DSM_SWITCHED_ON ))
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800773a:	7a5b      	ldrb	r3, [r3, #9]
  }
}
void ACIM_FREQ_CTRL_DSM_SwitchedOff_Exit(void* HandlePtr)
{
  ACIM_FREQ_CTRL_t* AppHandler = (ACIM_FREQ_CTRL_t*)HandlePtr;
  if ((AppHandler->acim_statemachine->requested_state ==(uint8_t)ACIM_FREQ_CTRL_DSM_OPERATION )||
 800773c:	2b02      	cmp	r3, #2
 800773e:	d105      	bne.n	800774c <ACIM_FREQ_CTRL_DSM_SwitchedOff_Exit+0x2c>
      (AppHandler->acim_statemachine->requested_state ==(uint8_t)ACIM_FREQ_CTRL_DSM_SWITCHED_ON ))
  {
    AppHandler->acim_statemachine->requested_state = AppHandler->acim_statemachine->current_state;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007744:	68fa      	ldr	r2, [r7, #12]
 8007746:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007748:	7a12      	ldrb	r2, [r2, #8]
 800774a:	725a      	strb	r2, [r3, #9]
  }
}
 800774c:	3714      	adds	r7, #20
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr
 8007756:	bf00      	nop

08007758 <ACIM_FREQ_CTRL_DSM_Safe_Torque_Off_Entry>:
void ACIM_FREQ_CTRL_DSM_Safe_Torque_Off_Entry (void* HandlePtr)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  ACIM_FREQ_CTRL_MotorStop((ACIM_FREQ_CTRL_t*)HandlePtr);
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f7ff fb19 	bl	8006d98 <ACIM_FREQ_CTRL_MotorStop>
}
 8007766:	3708      	adds	r7, #8
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <ACIM_FREQ_CTRL_DSM_Safe_Torque_Off_Action>:
void ACIM_FREQ_CTRL_DSM_Safe_Torque_Off_Action (void* HandlePtr)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  ACIM_FREQ_CTRL_t* AppHandler = (ACIM_FREQ_CTRL_t*)HandlePtr;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	60fb      	str	r3, [r7, #12]
  if (ACIM_FREQ_CTRL_CW_AUTOMATIC_ON == AppHandler->cw_state )
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800777e:	2b08      	cmp	r3, #8
 8007780:	d105      	bne.n	800778e <ACIM_FREQ_CTRL_DSM_Safe_Torque_Off_Action+0x22>
  {
    AUTOMATION_SM_RequestState(AppHandler->acim_statemachine,(uint8_t)ACIM_FREQ_CTRL_DSM_ENABLED);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007786:	4618      	mov	r0, r3
 8007788:	2101      	movs	r1, #1
 800778a:	f7fe fdc3 	bl	8006314 <AUTOMATION_SM_RequestState>
  }
}
 800778e:	3710      	adds	r7, #16
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <ACIM_FREQ_CTRL_DSM_Safe_Torque_Off_Exit>:
void ACIM_FREQ_CTRL_DSM_Safe_Torque_Off_Exit(void* HandlePtr)
{
 8007794:	b480      	push	{r7}
 8007796:	b085      	sub	sp, #20
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  ACIM_FREQ_CTRL_t* AppHandler = (ACIM_FREQ_CTRL_t*)HandlePtr;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	60fb      	str	r3, [r7, #12]
  if ((AppHandler->acim_statemachine->requested_state ==(uint8_t)ACIM_FREQ_CTRL_DSM_OPERATION )||
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077a4:	7a5b      	ldrb	r3, [r3, #9]
 80077a6:	2b03      	cmp	r3, #3
 80077a8:	d004      	beq.n	80077b4 <ACIM_FREQ_CTRL_DSM_Safe_Torque_Off_Exit+0x20>
      (AppHandler->acim_statemachine->requested_state ==(uint8_t)ACIM_FREQ_CTRL_DSM_SWITCHED_ON ))
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077ae:	7a5b      	ldrb	r3, [r3, #9]
  }
}
void ACIM_FREQ_CTRL_DSM_Safe_Torque_Off_Exit(void* HandlePtr)
{
  ACIM_FREQ_CTRL_t* AppHandler = (ACIM_FREQ_CTRL_t*)HandlePtr;
  if ((AppHandler->acim_statemachine->requested_state ==(uint8_t)ACIM_FREQ_CTRL_DSM_OPERATION )||
 80077b0:	2b02      	cmp	r3, #2
 80077b2:	d105      	bne.n	80077c0 <ACIM_FREQ_CTRL_DSM_Safe_Torque_Off_Exit+0x2c>
      (AppHandler->acim_statemachine->requested_state ==(uint8_t)ACIM_FREQ_CTRL_DSM_SWITCHED_ON ))
  {
    AppHandler->acim_statemachine->requested_state = AppHandler->acim_statemachine->current_state;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077b8:	68fa      	ldr	r2, [r7, #12]
 80077ba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80077bc:	7a12      	ldrb	r2, [r2, #8]
 80077be:	725a      	strb	r2, [r3, #9]
  }
}
 80077c0:	3714      	adds	r7, #20
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr
 80077ca:	bf00      	nop

080077cc <ACIM_FREQ_CTRL_DSM_Enabled_Action>:
void ACIM_FREQ_CTRL_DSM_Enabled_Action (void* HandlePtr)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  ACIM_FREQ_CTRL_t* AppHandler = (ACIM_FREQ_CTRL_t*)HandlePtr;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	60fb      	str	r3, [r7, #12]
  if ((ACIM_FREQ_CTRL_CW_AUTOMATIC_ON == AppHandler->cw_state )||
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80077de:	2b08      	cmp	r3, #8
 80077e0:	d004      	beq.n	80077ec <ACIM_FREQ_CTRL_DSM_Enabled_Action+0x20>
      (ACIM_FREQ_CTRL_CW_ENABLE== AppHandler->cw_state))
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  }
}
void ACIM_FREQ_CTRL_DSM_Enabled_Action (void* HandlePtr)
{
  ACIM_FREQ_CTRL_t* AppHandler = (ACIM_FREQ_CTRL_t*)HandlePtr;
  if ((ACIM_FREQ_CTRL_CW_AUTOMATIC_ON == AppHandler->cw_state )||
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d105      	bne.n	80077f8 <ACIM_FREQ_CTRL_DSM_Enabled_Action+0x2c>
      (ACIM_FREQ_CTRL_CW_ENABLE== AppHandler->cw_state))
  {
    AUTOMATION_SM_RequestState(AppHandler->acim_statemachine,(uint8_t)ACIM_FREQ_CTRL_DSM_SWITCHED_ON);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077f0:	4618      	mov	r0, r3
 80077f2:	2102      	movs	r1, #2
 80077f4:	f7fe fd8e 	bl	8006314 <AUTOMATION_SM_RequestState>
  }
}
 80077f8:	3710      	adds	r7, #16
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	bf00      	nop

08007800 <ACIM_FREQ_CTRL_DSM_Enabled_Exit>:
void ACIM_FREQ_CTRL_DSM_Enabled_Exit(void* HandlePtr)
{
 8007800:	b480      	push	{r7}
 8007802:	b085      	sub	sp, #20
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  ACIM_FREQ_CTRL_t* AppHandler = (ACIM_FREQ_CTRL_t*)HandlePtr;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	60fb      	str	r3, [r7, #12]
  if (AppHandler->acim_statemachine->requested_state ==(uint8_t)ACIM_FREQ_CTRL_DSM_OPERATION )
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007810:	7a5b      	ldrb	r3, [r3, #9]
 8007812:	2b03      	cmp	r3, #3
 8007814:	d105      	bne.n	8007822 <ACIM_FREQ_CTRL_DSM_Enabled_Exit+0x22>
  {
    AppHandler->acim_statemachine->requested_state = AppHandler->acim_statemachine->current_state;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800781a:	68fa      	ldr	r2, [r7, #12]
 800781c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800781e:	7a12      	ldrb	r2, [r2, #8]
 8007820:	725a      	strb	r2, [r3, #9]
  }
}
 8007822:	3714      	adds	r7, #20
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <ACIM_FREQ_CTRL_DSM_Switched_On_Action>:
void ACIM_FREQ_CTRL_DSM_Switched_On_Action (void* HandlePtr)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b084      	sub	sp, #16
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  ACIM_FREQ_CTRL_t* AppHandler = (ACIM_FREQ_CTRL_t*)HandlePtr;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	60fb      	str	r3, [r7, #12]
  if ((ACIM_FREQ_CTRL_CW_AUTOMATIC_ON == AppHandler->cw_state )||
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800783e:	2b08      	cmp	r3, #8
 8007840:	d004      	beq.n	800784c <ACIM_FREQ_CTRL_DSM_Switched_On_Action+0x20>
      (ACIM_FREQ_CTRL_CW_OPERATE == AppHandler->cw_state))
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  }
}
void ACIM_FREQ_CTRL_DSM_Switched_On_Action (void* HandlePtr)
{
  ACIM_FREQ_CTRL_t* AppHandler = (ACIM_FREQ_CTRL_t*)HandlePtr;
  if ((ACIM_FREQ_CTRL_CW_AUTOMATIC_ON == AppHandler->cw_state )||
 8007848:	2b03      	cmp	r3, #3
 800784a:	d105      	bne.n	8007858 <ACIM_FREQ_CTRL_DSM_Switched_On_Action+0x2c>
      (ACIM_FREQ_CTRL_CW_OPERATE == AppHandler->cw_state))
  {
    AUTOMATION_SM_RequestState(AppHandler->acim_statemachine,(uint8_t)ACIM_FREQ_CTRL_DSM_OPERATION );
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007850:	4618      	mov	r0, r3
 8007852:	2103      	movs	r1, #3
 8007854:	f7fe fd5e 	bl	8006314 <AUTOMATION_SM_RequestState>
  }
}
 8007858:	3710      	adds	r7, #16
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}
 800785e:	bf00      	nop

08007860 <ACIM_FREQ_CTRL_DSM_Operation_Entry>:
void ACIM_FREQ_CTRL_DSM_Operation_Entry (void* HandlePtr)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b082      	sub	sp, #8
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  ACIM_FREQ_CTRL_MotorStart((ACIM_FREQ_CTRL_t*)HandlePtr);
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f7ff fa3d 	bl	8006ce8 <ACIM_FREQ_CTRL_MotorStart>
}
 800786e:	3708      	adds	r7, #8
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <ACIM_FREQ_CTRL_DSM_Operation_Action>:
void ACIM_FREQ_CTRL_DSM_Operation_Action(void* HandlePtr)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b084      	sub	sp, #16
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  ACIM_FREQ_CTRL_t* AppHandler = (ACIM_FREQ_CTRL_t*)HandlePtr;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	60fb      	str	r3, [r7, #12]
  if (AppHandler->cw_state == ACIM_FREQ_CTRL_CW_RAMP_DOWN)
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007886:	2b06      	cmp	r3, #6
 8007888:	d106      	bne.n	8007898 <ACIM_FREQ_CTRL_DSM_Operation_Action+0x24>
  {
    AUTOMATION_SM_RequestState(AppHandler->acim_statemachine,(uint8_t)ACIM_FREQ_CTRL_DSM_RAMP_DOWN);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800788e:	4618      	mov	r0, r3
 8007890:	2106      	movs	r1, #6
 8007892:	f7fe fd3f 	bl	8006314 <AUTOMATION_SM_RequestState>
 8007896:	e022      	b.n	80078de <ACIM_FREQ_CTRL_DSM_Operation_Action+0x6a>
  }
  else if (AppHandler->cw_state == ACIM_FREQ_CTRL_CW_COAST_STOP)
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800789e:	2b04      	cmp	r3, #4
 80078a0:	d106      	bne.n	80078b0 <ACIM_FREQ_CTRL_DSM_Operation_Action+0x3c>
  {
    AUTOMATION_SM_RequestState(AppHandler->acim_statemachine,(uint8_t)ACIM_FREQ_CTRL_DSM_COAST_STOP);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078a6:	4618      	mov	r0, r3
 80078a8:	2104      	movs	r1, #4
 80078aa:	f7fe fd33 	bl	8006314 <AUTOMATION_SM_RequestState>
 80078ae:	e016      	b.n	80078de <ACIM_FREQ_CTRL_DSM_Operation_Action+0x6a>
  }
  else if (AppHandler->cw_state == ACIM_FREQ_CTRL_CW_QUICK_STOP)
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80078b6:	2b05      	cmp	r3, #5
 80078b8:	d106      	bne.n	80078c8 <ACIM_FREQ_CTRL_DSM_Operation_Action+0x54>
  {
    AUTOMATION_SM_RequestState(AppHandler->acim_statemachine,(uint8_t)ACIM_FREQ_CTRL_DSM_QUICK_STOP);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078be:	4618      	mov	r0, r3
 80078c0:	2105      	movs	r1, #5
 80078c2:	f7fe fd27 	bl	8006314 <AUTOMATION_SM_RequestState>
 80078c6:	e00a      	b.n	80078de <ACIM_FREQ_CTRL_DSM_Operation_Action+0x6a>
  }
  else if (AppHandler->cw_state == ACIM_FREQ_CTRL_CW_SWITCH_ON)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80078ce:	2b02      	cmp	r3, #2
 80078d0:	d105      	bne.n	80078de <ACIM_FREQ_CTRL_DSM_Operation_Action+0x6a>
  {
    AUTOMATION_SM_RequestState(AppHandler->acim_statemachine,(uint8_t)ACIM_FREQ_CTRL_DSM_SWITCHED_ON);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078d6:	4618      	mov	r0, r3
 80078d8:	2102      	movs	r1, #2
 80078da:	f7fe fd1b 	bl	8006314 <AUTOMATION_SM_RequestState>
  }
  else
  {
  }
}
 80078de:	3710      	adds	r7, #16
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}

080078e4 <ACIM_FREQ_CTRL_DSM_Operation_Exit>:
void ACIM_FREQ_CTRL_DSM_Operation_Exit(void* HandlePtr)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b085      	sub	sp, #20
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  ACIM_FREQ_CTRL_t* AppHandler = (ACIM_FREQ_CTRL_t*)HandlePtr;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	60fb      	str	r3, [r7, #12]
  if ((AppHandler->acim_statemachine->requested_state ==(uint8_t)ACIM_FREQ_CTRL_DSM_ENABLED )||
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078f4:	7a5b      	ldrb	r3, [r3, #9]
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d004      	beq.n	8007904 <ACIM_FREQ_CTRL_DSM_Operation_Exit+0x20>
      (AppHandler->acim_statemachine->requested_state ==(uint8_t)ACIM_FREQ_CTRL_DSM_SWITCHED_ON ))
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078fe:	7a5b      	ldrb	r3, [r3, #9]
  }
}
void ACIM_FREQ_CTRL_DSM_Operation_Exit(void* HandlePtr)
{
  ACIM_FREQ_CTRL_t* AppHandler = (ACIM_FREQ_CTRL_t*)HandlePtr;
  if ((AppHandler->acim_statemachine->requested_state ==(uint8_t)ACIM_FREQ_CTRL_DSM_ENABLED )||
 8007900:	2b02      	cmp	r3, #2
 8007902:	d105      	bne.n	8007910 <ACIM_FREQ_CTRL_DSM_Operation_Exit+0x2c>
      (AppHandler->acim_statemachine->requested_state ==(uint8_t)ACIM_FREQ_CTRL_DSM_SWITCHED_ON ))
  {
    AppHandler->acim_statemachine->requested_state = AppHandler->acim_statemachine->current_state;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007908:	68fa      	ldr	r2, [r7, #12]
 800790a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800790c:	7a12      	ldrb	r2, [r2, #8]
 800790e:	725a      	strb	r2, [r3, #9]
  }
}
 8007910:	3714      	adds	r7, #20
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr
 800791a:	bf00      	nop

0800791c <ACIM_FREQ_CTRL_DSM_Coast_Stop_Entry>:
void ACIM_FREQ_CTRL_DSM_Coast_Stop_Entry (void* HandlePtr)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b082      	sub	sp, #8
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  ACIM_FREQ_CTRL_MotorStop((ACIM_FREQ_CTRL_t*)HandlePtr);
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f7ff fa37 	bl	8006d98 <ACIM_FREQ_CTRL_MotorStop>
}
 800792a:	3708      	adds	r7, #8
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}

08007930 <ACIM_FREQ_CTRL_DSM_Coast_Stop_Action>:
void ACIM_FREQ_CTRL_DSM_Coast_Stop_Action (void* HandlePtr)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b084      	sub	sp, #16
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  ACIM_FREQ_CTRL_t* AppHandler = (ACIM_FREQ_CTRL_t*)HandlePtr;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	60fb      	str	r3, [r7, #12]
  if (AppHandler->cw_state == ACIM_FREQ_CTRL_CW_SWITCHED_OFF)
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007942:	2b00      	cmp	r3, #0
 8007944:	d105      	bne.n	8007952 <ACIM_FREQ_CTRL_DSM_Coast_Stop_Action+0x22>
  {
    AUTOMATION_SM_RequestState(AppHandler->acim_statemachine,(uint8_t)ACIM_FREQ_CTRL_DSM_SWITCHED_OFF);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800794a:	4618      	mov	r0, r3
 800794c:	2100      	movs	r1, #0
 800794e:	f7fe fce1 	bl	8006314 <AUTOMATION_SM_RequestState>
  }
}
 8007952:	3710      	adds	r7, #16
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}

08007958 <ACIM_FREQ_CTRL_DSM_Coast_Stop_Exit>:
void ACIM_FREQ_CTRL_DSM_Coast_Stop_Exit(void* HandlePtr)
{
 8007958:	b480      	push	{r7}
 800795a:	b085      	sub	sp, #20
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  ACIM_FREQ_CTRL_t* AppHandler = (ACIM_FREQ_CTRL_t*)HandlePtr;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	60fb      	str	r3, [r7, #12]
  if ((AppHandler->acim_statemachine->requested_state ==(uint8_t)ACIM_FREQ_CTRL_DSM_ENABLED )||
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007968:	7a5b      	ldrb	r3, [r3, #9]
 800796a:	2b01      	cmp	r3, #1
 800796c:	d009      	beq.n	8007982 <ACIM_FREQ_CTRL_DSM_Coast_Stop_Exit+0x2a>
      (AppHandler->acim_statemachine->requested_state ==(uint8_t)ACIM_FREQ_CTRL_DSM_SWITCHED_ON )||
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007972:	7a5b      	ldrb	r3, [r3, #9]
  }
}
void ACIM_FREQ_CTRL_DSM_Coast_Stop_Exit(void* HandlePtr)
{
  ACIM_FREQ_CTRL_t* AppHandler = (ACIM_FREQ_CTRL_t*)HandlePtr;
  if ((AppHandler->acim_statemachine->requested_state ==(uint8_t)ACIM_FREQ_CTRL_DSM_ENABLED )||
 8007974:	2b02      	cmp	r3, #2
 8007976:	d004      	beq.n	8007982 <ACIM_FREQ_CTRL_DSM_Coast_Stop_Exit+0x2a>
      (AppHandler->acim_statemachine->requested_state ==(uint8_t)ACIM_FREQ_CTRL_DSM_SWITCHED_ON )||
      (AppHandler->acim_statemachine->requested_state ==(uint8_t)ACIM_FREQ_CTRL_DSM_OPERATION ) )
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800797c:	7a5b      	ldrb	r3, [r3, #9]
}
void ACIM_FREQ_CTRL_DSM_Coast_Stop_Exit(void* HandlePtr)
{
  ACIM_FREQ_CTRL_t* AppHandler = (ACIM_FREQ_CTRL_t*)HandlePtr;
  if ((AppHandler->acim_statemachine->requested_state ==(uint8_t)ACIM_FREQ_CTRL_DSM_ENABLED )||
      (AppHandler->acim_statemachine->requested_state ==(uint8_t)ACIM_FREQ_CTRL_DSM_SWITCHED_ON )||
 800797e:	2b03      	cmp	r3, #3
 8007980:	d105      	bne.n	800798e <ACIM_FREQ_CTRL_DSM_Coast_Stop_Exit+0x36>
      (AppHandler->acim_statemachine->requested_state ==(uint8_t)ACIM_FREQ_CTRL_DSM_OPERATION ) )
  {
    AppHandler->acim_statemachine->requested_state = AppHandler->acim_statemachine->current_state;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007986:	68fa      	ldr	r2, [r7, #12]
 8007988:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800798a:	7a12      	ldrb	r2, [r2, #8]
 800798c:	725a      	strb	r2, [r3, #9]
  }
}
 800798e:	3714      	adds	r7, #20
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr

08007998 <ACIM_FREQ_CTRL_DSM_Quick_Stop_Entry>:
void ACIM_FREQ_CTRL_DSM_Quick_Stop_Entry (void* HandlePtr)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  ACIM_FREQ_CTRL_MotorStop((ACIM_FREQ_CTRL_t*)HandlePtr);
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f7ff f9f9 	bl	8006d98 <ACIM_FREQ_CTRL_MotorStop>
}
 80079a6:	3708      	adds	r7, #8
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <ACIM_FREQ_CTRL_DSM_Quick_Stop_Action>:
void ACIM_FREQ_CTRL_DSM_Quick_Stop_Action (void* HandlePtr)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  ACIM_FREQ_CTRL_t* AppHandler = (ACIM_FREQ_CTRL_t*)HandlePtr;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	60fb      	str	r3, [r7, #12]
  if (AppHandler->cw_state == ACIM_FREQ_CTRL_CW_SWITCHED_OFF )
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d105      	bne.n	80079ce <ACIM_FREQ_CTRL_DSM_Quick_Stop_Action+0x22>
  {
    AUTOMATION_SM_RequestState(AppHandler->acim_statemachine,(uint8_t)ACIM_FREQ_CTRL_DSM_SWITCHED_OFF);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079c6:	4618      	mov	r0, r3
 80079c8:	2100      	movs	r1, #0
 80079ca:	f7fe fca3 	bl	8006314 <AUTOMATION_SM_RequestState>
  }
}
 80079ce:	3710      	adds	r7, #16
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <ACIM_FREQ_CTRL_DSM_Quick_Stop_Exit>:
void ACIM_FREQ_CTRL_DSM_Quick_Stop_Exit(void* HandlePtr)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b085      	sub	sp, #20
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  ACIM_FREQ_CTRL_t* AppHandler = (ACIM_FREQ_CTRL_t*)HandlePtr;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	60fb      	str	r3, [r7, #12]
  if ((AppHandler->acim_statemachine->requested_state ==(uint8_t)ACIM_FREQ_CTRL_DSM_ENABLED )||
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079e4:	7a5b      	ldrb	r3, [r3, #9]
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	d009      	beq.n	80079fe <ACIM_FREQ_CTRL_DSM_Quick_Stop_Exit+0x2a>
      (AppHandler->acim_statemachine->requested_state ==(uint8_t)ACIM_FREQ_CTRL_DSM_SWITCHED_ON )||
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079ee:	7a5b      	ldrb	r3, [r3, #9]
  }
}
void ACIM_FREQ_CTRL_DSM_Quick_Stop_Exit(void* HandlePtr)
{
  ACIM_FREQ_CTRL_t* AppHandler = (ACIM_FREQ_CTRL_t*)HandlePtr;
  if ((AppHandler->acim_statemachine->requested_state ==(uint8_t)ACIM_FREQ_CTRL_DSM_ENABLED )||
 80079f0:	2b02      	cmp	r3, #2
 80079f2:	d004      	beq.n	80079fe <ACIM_FREQ_CTRL_DSM_Quick_Stop_Exit+0x2a>
      (AppHandler->acim_statemachine->requested_state ==(uint8_t)ACIM_FREQ_CTRL_DSM_SWITCHED_ON )||
      (AppHandler->acim_statemachine->requested_state ==(uint8_t)ACIM_FREQ_CTRL_DSM_OPERATION ) )
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079f8:	7a5b      	ldrb	r3, [r3, #9]
}
void ACIM_FREQ_CTRL_DSM_Quick_Stop_Exit(void* HandlePtr)
{
  ACIM_FREQ_CTRL_t* AppHandler = (ACIM_FREQ_CTRL_t*)HandlePtr;
  if ((AppHandler->acim_statemachine->requested_state ==(uint8_t)ACIM_FREQ_CTRL_DSM_ENABLED )||
      (AppHandler->acim_statemachine->requested_state ==(uint8_t)ACIM_FREQ_CTRL_DSM_SWITCHED_ON )||
 80079fa:	2b03      	cmp	r3, #3
 80079fc:	d105      	bne.n	8007a0a <ACIM_FREQ_CTRL_DSM_Quick_Stop_Exit+0x36>
      (AppHandler->acim_statemachine->requested_state ==(uint8_t)ACIM_FREQ_CTRL_DSM_OPERATION ) )
  {
    AppHandler->acim_statemachine->requested_state = AppHandler->acim_statemachine->current_state;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a02:	68fa      	ldr	r2, [r7, #12]
 8007a04:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007a06:	7a12      	ldrb	r2, [r2, #8]
 8007a08:	725a      	strb	r2, [r3, #9]
  }
}
 8007a0a:	3714      	adds	r7, #20
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr

08007a14 <ACIM_FREQ_CTRL_DSM_Rampdown_Entry>:
void ACIM_FREQ_CTRL_DSM_Rampdown_Entry (void* HandlePtr)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b084      	sub	sp, #16
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  ACIM_FREQ_CTRL_STATUS_t status;
  ACIM_FREQ_CTRL_t* AppHandler = (ACIM_FREQ_CTRL_t*)HandlePtr;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	60fb      	str	r3, [r7, #12]

  status = ACIM_FREQ_CTRL_SetSpeed((ACIM_FREQ_CTRL_t*)HandlePtr,0);
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	2100      	movs	r1, #0
 8007a24:	f7ff fa68 	bl	8006ef8 <ACIM_FREQ_CTRL_SetSpeed>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	72fb      	strb	r3, [r7, #11]

  if (status != ACIM_FREQ_CTRL_STATUS_SUCCESS)
 8007a2c:	7afb      	ldrb	r3, [r7, #11]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d005      	beq.n	8007a3e <ACIM_FREQ_CTRL_DSM_Rampdown_Entry+0x2a>
  {
    AUTOMATION_SM_RequestState(AppHandler->acim_statemachine,(uint8_t)ACIM_FREQ_CTRL_DSM_ERROR);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a36:	4618      	mov	r0, r3
 8007a38:	2107      	movs	r1, #7
 8007a3a:	f7fe fc6b 	bl	8006314 <AUTOMATION_SM_RequestState>
  }
}
 8007a3e:	3710      	adds	r7, #16
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <ACIM_FREQ_CTRL_DSM_Rampdown_Action>:
void ACIM_FREQ_CTRL_DSM_Rampdown_Action (void* HandlePtr)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  ACIM_FREQ_CTRL_t* AppHandler = (ACIM_FREQ_CTRL_t*)HandlePtr;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	60fb      	str	r3, [r7, #12]
  if (*AppHandler->speed_set_ptr == 0)
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d105      	bne.n	8007a66 <ACIM_FREQ_CTRL_DSM_Rampdown_Action+0x22>
  {
    AUTOMATION_SM_RequestState(AppHandler->acim_statemachine,(uint8_t)ACIM_FREQ_CTRL_DSM_COAST_STOP);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a5e:	4618      	mov	r0, r3
 8007a60:	2104      	movs	r1, #4
 8007a62:	f7fe fc57 	bl	8006314 <AUTOMATION_SM_RequestState>
  }
}
 8007a66:	3710      	adds	r7, #16
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}

08007a6c <ACIM_FREQ_CTRL_DSM_Error_Entry>:
void ACIM_FREQ_CTRL_DSM_Error_Entry (void* HandlePtr)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b082      	sub	sp, #8
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  ACIM_FREQ_CTRL_MotorStop((ACIM_FREQ_CTRL_t*)HandlePtr);
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f7ff f98f 	bl	8006d98 <ACIM_FREQ_CTRL_MotorStop>
}
 8007a7a:	3708      	adds	r7, #8
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <ACIM_FREQ_CTRL_DSM_Error_Action>:
void ACIM_FREQ_CTRL_DSM_Error_Action (void* HandlePtr)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  ACIM_FREQ_CTRL_t* AppHandler = (ACIM_FREQ_CTRL_t*)HandlePtr;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	60fb      	str	r3, [r7, #12]
  if (ACIM_FREQ_CTRL_CW_ERROR_RESET ==AppHandler->cw_state )
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007a92:	2b09      	cmp	r3, #9
 8007a94:	d108      	bne.n	8007aa8 <ACIM_FREQ_CTRL_DSM_Error_Action+0x28>
  {
    ACIM_FREQ_CTRL_ClearErrorState(AppHandler);
 8007a96:	68f8      	ldr	r0, [r7, #12]
 8007a98:	f7ff fdde 	bl	8007658 <ACIM_FREQ_CTRL_ClearErrorState>
    AUTOMATION_SM_RequestState(AppHandler->acim_statemachine,(uint8_t)ACIM_FREQ_CTRL_DSM_SWITCHED_OFF);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	2100      	movs	r1, #0
 8007aa4:	f7fe fc36 	bl	8006314 <AUTOMATION_SM_RequestState>
  }
}
 8007aa8:	3710      	adds	r7, #16
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}
 8007aae:	bf00      	nop

08007ab0 <ACIM_FREQ_CTRL_DSM_Error_Exit>:
void ACIM_FREQ_CTRL_DSM_Error_Exit(void* HandlePtr)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  ACIM_FREQ_CTRL_t* AppHandler = (ACIM_FREQ_CTRL_t*)HandlePtr;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	60fb      	str	r3, [r7, #12]
  if ((AppHandler->acim_statemachine->requested_state != (uint8_t)ACIM_FREQ_CTRL_DSM_SWITCHED_OFF ) &&
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ac0:	7a5b      	ldrb	r3, [r3, #9]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d010      	beq.n	8007ae8 <ACIM_FREQ_CTRL_DSM_Error_Exit+0x38>
      (AppHandler->acim_statemachine->requested_state != (uint8_t)ACIM_FREQ_CTRL_DSM_USER_DEFINE_11 ) &&
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aca:	7a5b      	ldrb	r3, [r3, #9]
  }
}
void ACIM_FREQ_CTRL_DSM_Error_Exit(void* HandlePtr)
{
  ACIM_FREQ_CTRL_t* AppHandler = (ACIM_FREQ_CTRL_t*)HandlePtr;
  if ((AppHandler->acim_statemachine->requested_state != (uint8_t)ACIM_FREQ_CTRL_DSM_SWITCHED_OFF ) &&
 8007acc:	2b0b      	cmp	r3, #11
 8007ace:	d00b      	beq.n	8007ae8 <ACIM_FREQ_CTRL_DSM_Error_Exit+0x38>
      (AppHandler->acim_statemachine->requested_state != (uint8_t)ACIM_FREQ_CTRL_DSM_USER_DEFINE_11 ) &&
      (AppHandler->acim_statemachine->requested_state != (uint8_t)ACIM_FREQ_CTRL_DSM_USER_DEFINE_12 ))
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ad4:	7a5b      	ldrb	r3, [r3, #9]
}
void ACIM_FREQ_CTRL_DSM_Error_Exit(void* HandlePtr)
{
  ACIM_FREQ_CTRL_t* AppHandler = (ACIM_FREQ_CTRL_t*)HandlePtr;
  if ((AppHandler->acim_statemachine->requested_state != (uint8_t)ACIM_FREQ_CTRL_DSM_SWITCHED_OFF ) &&
      (AppHandler->acim_statemachine->requested_state != (uint8_t)ACIM_FREQ_CTRL_DSM_USER_DEFINE_11 ) &&
 8007ad6:	2b0c      	cmp	r3, #12
 8007ad8:	d006      	beq.n	8007ae8 <ACIM_FREQ_CTRL_DSM_Error_Exit+0x38>
      (AppHandler->acim_statemachine->requested_state != (uint8_t)ACIM_FREQ_CTRL_DSM_USER_DEFINE_12 ))
  {
    AppHandler->acim_statemachine->requested_state = AppHandler->acim_statemachine->current_state;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ade:	68fa      	ldr	r2, [r7, #12]
 8007ae0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007ae2:	7a12      	ldrb	r2, [r2, #8]
 8007ae4:	725a      	strb	r2, [r3, #9]
 8007ae6:	e00b      	b.n	8007b00 <ACIM_FREQ_CTRL_DSM_Error_Exit+0x50>
  }
  else
  {
    if (AppHandler->acim_statemachine->transition_request ==1U)
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aec:	689b      	ldr	r3, [r3, #8]
 8007aee:	0c1b      	lsrs	r3, r3, #16
 8007af0:	f003 0301 	and.w	r3, r3, #1
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d102      	bne.n	8007b00 <ACIM_FREQ_CTRL_DSM_Error_Exit+0x50>
    {
      ACIM_FREQ_CTRL_ClearErrorState(AppHandler);
 8007afa:	68f8      	ldr	r0, [r7, #12]
 8007afc:	f7ff fdac 	bl	8007658 <ACIM_FREQ_CTRL_ClearErrorState>
    }
  }
}
 8007b00:	3710      	adds	r7, #16
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	bf00      	nop

08007b08 <ACIM_FREQ_CTRL_DSM_Trouble_Action>:
void ACIM_FREQ_CTRL_DSM_Trouble_Action(void* HandlePtr)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b084      	sub	sp, #16
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  ACIM_FREQ_CTRL_t* AppHandler = (ACIM_FREQ_CTRL_t*)HandlePtr;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	60fb      	str	r3, [r7, #12]
  if (AppHandler->cw_state == ACIM_FREQ_CTRL_CW_ERROR)
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007b1a:	2b07      	cmp	r3, #7
 8007b1c:	d106      	bne.n	8007b2c <ACIM_FREQ_CTRL_DSM_Trouble_Action+0x24>
  {
    AUTOMATION_SM_RequestState(AppHandler->acim_statemachine,(uint8_t)ACIM_FREQ_CTRL_DSM_ERROR);
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b22:	4618      	mov	r0, r3
 8007b24:	2107      	movs	r1, #7
 8007b26:	f7fe fbf5 	bl	8006314 <AUTOMATION_SM_RequestState>
 8007b2a:	e022      	b.n	8007b72 <ACIM_FREQ_CTRL_DSM_Trouble_Action+0x6a>
  }
  else if (AppHandler->cw_state == ACIM_FREQ_CTRL_CW_RESUME_OPERATION)
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007b32:	2b0a      	cmp	r3, #10
 8007b34:	d106      	bne.n	8007b44 <ACIM_FREQ_CTRL_DSM_Trouble_Action+0x3c>
  {
    AUTOMATION_SM_RequestState(AppHandler->acim_statemachine,(uint8_t)ACIM_FREQ_CTRL_DSM_OPERATION);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	2103      	movs	r1, #3
 8007b3e:	f7fe fbe9 	bl	8006314 <AUTOMATION_SM_RequestState>
 8007b42:	e016      	b.n	8007b72 <ACIM_FREQ_CTRL_DSM_Trouble_Action+0x6a>
  }
  else if (AppHandler->cw_state == ACIM_FREQ_CTRL_CW_RESUME_SWITCHED_ON)
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007b4a:	2b0b      	cmp	r3, #11
 8007b4c:	d106      	bne.n	8007b5c <ACIM_FREQ_CTRL_DSM_Trouble_Action+0x54>
  {
    AUTOMATION_SM_RequestState(AppHandler->acim_statemachine,(uint8_t)ACIM_FREQ_CTRL_DSM_SWITCHED_ON);
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b52:	4618      	mov	r0, r3
 8007b54:	2102      	movs	r1, #2
 8007b56:	f7fe fbdd 	bl	8006314 <AUTOMATION_SM_RequestState>
 8007b5a:	e00a      	b.n	8007b72 <ACIM_FREQ_CTRL_DSM_Trouble_Action+0x6a>
  }
  else if (AppHandler->cw_state == ACIM_FREQ_CTRL_CW_RESUME_ENABLED)
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007b62:	2b0c      	cmp	r3, #12
 8007b64:	d105      	bne.n	8007b72 <ACIM_FREQ_CTRL_DSM_Trouble_Action+0x6a>
  {
    AUTOMATION_SM_RequestState(AppHandler->acim_statemachine,(uint8_t)ACIM_FREQ_CTRL_DSM_ENABLED);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	2101      	movs	r1, #1
 8007b6e:	f7fe fbd1 	bl	8006314 <AUTOMATION_SM_RequestState>
  }
  else
  {
  }
}
 8007b72:	3710      	adds	r7, #16
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}

08007b78 <CCU80_3_IRQHandler>:

void ACIM_FREQ_CTRL_0_PrimaryControlLoop(ACIM_FREQ_CTRL_t*const HandlePtr);  
void ACIM_FREQ_CTRL_0_SetValueProcessing(ACIM_FREQ_CTRL_t*const HandlePtr);

void ACIM_FREQ_CTRL_0_FastControlLoop_ISR()
{  
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b082      	sub	sp, #8
 8007b7c:	af00      	add	r7, sp, #0
  int32_t temp_angle;
/************************* Fast Control Loop ***************************/

    if(ACIM_FREQ_CTRL_0.fcl_div_value == ACIM_FREQ_CTRL_0.acim_config_ptr->fcl_divider)
 8007b7e:	4b35      	ldr	r3, [pc, #212]	; (8007c54 <CCU80_3_IRQHandler+0xdc>)
 8007b80:	f893 20a6 	ldrb.w	r2, [r3, #166]	; 0xa6
 8007b84:	4b33      	ldr	r3, [pc, #204]	; (8007c54 <CCU80_3_IRQHandler+0xdc>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	7d1b      	ldrb	r3, [r3, #20]
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	d13b      	bne.n	8007c06 <CCU80_3_IRQHandler+0x8e>
    {
      ACIM_FREQ_CTRL_0.fcl_div_value = 1;
 8007b8e:	4b31      	ldr	r3, [pc, #196]	; (8007c54 <CCU80_3_IRQHandler+0xdc>)
 8007b90:	2201      	movs	r2, #1
 8007b92:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6

      if(ACIM_FREQ_CTRL_0.msm_state != ACIM_FREQ_CTRL_MSM_BOOTSTRAP)
 8007b96:	4b2f      	ldr	r3, [pc, #188]	; (8007c54 <CCU80_3_IRQHandler+0xdc>)
 8007b98:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007b9c:	2b09      	cmp	r3, #9
 8007b9e:	d03a      	beq.n	8007c16 <CCU80_3_IRQHandler+0x9e>
      {

        /*Current is 0 because current measurement is disabled.*/
        ACIM_FREQ_CTRL_0.motor_current = 0U;
 8007ba0:	4b2c      	ldr	r3, [pc, #176]	; (8007c54 <CCU80_3_IRQHandler+0xdc>)
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        /*Updating input of v/f control*/
        ACIM_FREQ_CTRL_0.vf_control_ptr->input = (int32_t)*ACIM_FREQ_CTRL_0.speed_set_ptr;
 8007ba8:	4b2a      	ldr	r3, [pc, #168]	; (8007c54 <CCU80_3_IRQHandler+0xdc>)
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	4a29      	ldr	r2, [pc, #164]	; (8007c54 <CCU80_3_IRQHandler+0xdc>)
 8007bae:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8007bb0:	6812      	ldr	r2, [r2, #0]
 8007bb2:	609a      	str	r2, [r3, #8]

        /*amplitude calculation*/
        ACIM_FREQ_CTRL_Amplitude_Calculation(&ACIM_FREQ_CTRL_0);
 8007bb4:	4827      	ldr	r0, [pc, #156]	; (8007c54 <CCU80_3_IRQHandler+0xdc>)
 8007bb6:	f7ff fb1f 	bl	80071f8 <ACIM_FREQ_CTRL_Amplitude_Calculation>

        /*angle calculation*/
        ACIM_FREQ_CTRL_AngleRamp(&ACIM_FREQ_CTRL_0);
 8007bba:	4826      	ldr	r0, [pc, #152]	; (8007c54 <CCU80_3_IRQHandler+0xdc>)
 8007bbc:	f7ff fb48 	bl	8007250 <ACIM_FREQ_CTRL_AngleRamp>


        /*Update Modulation Angle and Amplitude before calling svm*/
        temp_angle = ACIM_FREQ_CTRL_0.vf_control_ptr->output_angle + (ACIM_FREQ_CTRL_0.angle_offset * ACIM_FREQ_CTRL_0.motor_direction);
 8007bc0:	4b24      	ldr	r3, [pc, #144]	; (8007c54 <CCU80_3_IRQHandler+0xdc>)
 8007bc2:	689b      	ldr	r3, [r3, #8]
 8007bc4:	68db      	ldr	r3, [r3, #12]
 8007bc6:	4619      	mov	r1, r3
 8007bc8:	4b22      	ldr	r3, [pc, #136]	; (8007c54 <CCU80_3_IRQHandler+0xdc>)
 8007bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bcc:	4a21      	ldr	r2, [pc, #132]	; (8007c54 <CCU80_3_IRQHandler+0xdc>)
 8007bce:	f892 20a4 	ldrb.w	r2, [r2, #164]	; 0xa4
 8007bd2:	b252      	sxtb	r2, r2
 8007bd4:	fb02 f303 	mul.w	r3, r2, r3
 8007bd8:	440b      	add	r3, r1
 8007bda:	607b      	str	r3, [r7, #4]
        ACIM_FREQ_CTRL_0.angle     = (uint32_t)(temp_angle);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	4a1d      	ldr	r2, [pc, #116]	; (8007c54 <CCU80_3_IRQHandler+0xdc>)
 8007be0:	67d3      	str	r3, [r2, #124]	; 0x7c
        ACIM_FREQ_CTRL_0.amplitude = ACIM_FREQ_CTRL_0.vf_control_ptr->output_amplitude;
 8007be2:	4b1c      	ldr	r3, [pc, #112]	; (8007c54 <CCU80_3_IRQHandler+0xdc>)
 8007be4:	689b      	ldr	r3, [r3, #8]
 8007be6:	691b      	ldr	r3, [r3, #16]
 8007be8:	4a1a      	ldr	r2, [pc, #104]	; (8007c54 <CCU80_3_IRQHandler+0xdc>)
 8007bea:	6793      	str	r3, [r2, #120]	; 0x78

        /*Call SVM*/
        PWM_SVM_SVMUpdate(ACIM_FREQ_CTRL_0.pwm_svm_ptr,(uint16_t)ACIM_FREQ_CTRL_0.amplitude,ACIM_FREQ_CTRL_0.angle);
 8007bec:	4b19      	ldr	r3, [pc, #100]	; (8007c54 <CCU80_3_IRQHandler+0xdc>)
 8007bee:	6859      	ldr	r1, [r3, #4]
 8007bf0:	4b18      	ldr	r3, [pc, #96]	; (8007c54 <CCU80_3_IRQHandler+0xdc>)
 8007bf2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007bf4:	b29a      	uxth	r2, r3
 8007bf6:	4b17      	ldr	r3, [pc, #92]	; (8007c54 <CCU80_3_IRQHandler+0xdc>)
 8007bf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bfa:	4608      	mov	r0, r1
 8007bfc:	4611      	mov	r1, r2
 8007bfe:	461a      	mov	r2, r3
 8007c00:	f001 ff7e 	bl	8009b00 <__PWM_SVM_SVMUpdate_veneer>
 8007c04:	e007      	b.n	8007c16 <CCU80_3_IRQHandler+0x9e>
      }

    }
    else
    {
      ACIM_FREQ_CTRL_0.fcl_div_value++;
 8007c06:	4b13      	ldr	r3, [pc, #76]	; (8007c54 <CCU80_3_IRQHandler+0xdc>)
 8007c08:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8007c0c:	3301      	adds	r3, #1
 8007c0e:	b2da      	uxtb	r2, r3
 8007c10:	4b10      	ldr	r3, [pc, #64]	; (8007c54 <CCU80_3_IRQHandler+0xdc>)
 8007c12:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
    }

/************************* calling control loops ***************************/

    if(ACIM_FREQ_CTRL_0.pcl_div_value == ACIM_FREQ_CTRL_0.acim_config_ptr->pcl_divider)
 8007c16:	4b0f      	ldr	r3, [pc, #60]	; (8007c54 <CCU80_3_IRQHandler+0xdc>)
 8007c18:	f893 20a7 	ldrb.w	r2, [r3, #167]	; 0xa7
 8007c1c:	4b0d      	ldr	r3, [pc, #52]	; (8007c54 <CCU80_3_IRQHandler+0xdc>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	7d5b      	ldrb	r3, [r3, #21]
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d10a      	bne.n	8007c3c <CCU80_3_IRQHandler+0xc4>
    {
      ACIM_FREQ_CTRL_0_SetValueProcessing(&ACIM_FREQ_CTRL_0);
 8007c26:	480b      	ldr	r0, [pc, #44]	; (8007c54 <CCU80_3_IRQHandler+0xdc>)
 8007c28:	f000 f820 	bl	8007c6c <ACIM_FREQ_CTRL_0_SetValueProcessing>

	  ACIM_FREQ_CTRL_0_PrimaryControlLoop(&ACIM_FREQ_CTRL_0); 
 8007c2c:	4809      	ldr	r0, [pc, #36]	; (8007c54 <CCU80_3_IRQHandler+0xdc>)
 8007c2e:	f000 f813 	bl	8007c58 <ACIM_FREQ_CTRL_0_PrimaryControlLoop>
      ACIM_FREQ_CTRL_0.pcl_div_value =(uint8_t)1;
 8007c32:	4b08      	ldr	r3, [pc, #32]	; (8007c54 <CCU80_3_IRQHandler+0xdc>)
 8007c34:	2201      	movs	r2, #1
 8007c36:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
 8007c3a:	e007      	b.n	8007c4c <CCU80_3_IRQHandler+0xd4>
    }
    else
    {
      ACIM_FREQ_CTRL_0.pcl_div_value++;
 8007c3c:	4b05      	ldr	r3, [pc, #20]	; (8007c54 <CCU80_3_IRQHandler+0xdc>)
 8007c3e:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 8007c42:	3301      	adds	r3, #1
 8007c44:	b2da      	uxtb	r2, r3
 8007c46:	4b03      	ldr	r3, [pc, #12]	; (8007c54 <CCU80_3_IRQHandler+0xdc>)
 8007c48:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
    }

}
 8007c4c:	3708      	adds	r7, #8
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
 8007c52:	bf00      	nop
 8007c54:	1fffd058 	.word	0x1fffd058

08007c58 <ACIM_FREQ_CTRL_0_PrimaryControlLoop>:

/*************** Primary control loop Functions ****************************/
 /* This Function execute primary control loop functionality*/
void ACIM_FREQ_CTRL_0_PrimaryControlLoop(ACIM_FREQ_CTRL_t*const HandlePtr)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  if(HandlePtr->msm_state != ACIM_FREQ_CTRL_MSM_BOOTSTRAP)
  {

  }
  /* Call motor control state machine */
  ACIM_FREQ_CTRL_MSM(HandlePtr);
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f7ff fb9f 	bl	80073a4 <ACIM_FREQ_CTRL_MSM>
}
 8007c66:	3708      	adds	r7, #8
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <ACIM_FREQ_CTRL_0_SetValueProcessing>:

/*************** Set Value Processing Function ****************************/
/* This Function execute set value processing control loop functionality*/
void ACIM_FREQ_CTRL_0_SetValueProcessing(ACIM_FREQ_CTRL_t*const HandlePtr)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b083      	sub	sp, #12
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]

}
 8007c74:	370c      	adds	r7, #12
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr
 8007c7e:	bf00      	nop

08007c80 <CCU81_0_IRQHandler>:

void ACIM_FREQ_CTRL_1_PrimaryControlLoop(ACIM_FREQ_CTRL_t*const HandlePtr);  
void ACIM_FREQ_CTRL_1_SetValueProcessing(ACIM_FREQ_CTRL_t*const HandlePtr);

void ACIM_FREQ_CTRL_1_FastControlLoop_ISR()
{  
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b082      	sub	sp, #8
 8007c84:	af00      	add	r7, sp, #0
  int32_t temp_angle;
/************************* Fast Control Loop ***************************/

    if(ACIM_FREQ_CTRL_1.fcl_div_value == ACIM_FREQ_CTRL_1.acim_config_ptr->fcl_divider)
 8007c86:	4b35      	ldr	r3, [pc, #212]	; (8007d5c <CCU81_0_IRQHandler+0xdc>)
 8007c88:	f893 20a6 	ldrb.w	r2, [r3, #166]	; 0xa6
 8007c8c:	4b33      	ldr	r3, [pc, #204]	; (8007d5c <CCU81_0_IRQHandler+0xdc>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	7d1b      	ldrb	r3, [r3, #20]
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d13b      	bne.n	8007d0e <CCU81_0_IRQHandler+0x8e>
    {
      ACIM_FREQ_CTRL_1.fcl_div_value = 1;
 8007c96:	4b31      	ldr	r3, [pc, #196]	; (8007d5c <CCU81_0_IRQHandler+0xdc>)
 8007c98:	2201      	movs	r2, #1
 8007c9a:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6

      if(ACIM_FREQ_CTRL_1.msm_state != ACIM_FREQ_CTRL_MSM_BOOTSTRAP)
 8007c9e:	4b2f      	ldr	r3, [pc, #188]	; (8007d5c <CCU81_0_IRQHandler+0xdc>)
 8007ca0:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007ca4:	2b09      	cmp	r3, #9
 8007ca6:	d03a      	beq.n	8007d1e <CCU81_0_IRQHandler+0x9e>
      {

        /*Current is 0 because current measurement is disabled.*/
        ACIM_FREQ_CTRL_1.motor_current = 0U;
 8007ca8:	4b2c      	ldr	r3, [pc, #176]	; (8007d5c <CCU81_0_IRQHandler+0xdc>)
 8007caa:	2200      	movs	r2, #0
 8007cac:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        /*Updating input of v/f control*/
        ACIM_FREQ_CTRL_1.vf_control_ptr->input = (int32_t)*ACIM_FREQ_CTRL_1.speed_set_ptr;
 8007cb0:	4b2a      	ldr	r3, [pc, #168]	; (8007d5c <CCU81_0_IRQHandler+0xdc>)
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	4a29      	ldr	r2, [pc, #164]	; (8007d5c <CCU81_0_IRQHandler+0xdc>)
 8007cb6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8007cb8:	6812      	ldr	r2, [r2, #0]
 8007cba:	609a      	str	r2, [r3, #8]

        /*amplitude calculation*/
        ACIM_FREQ_CTRL_Amplitude_Calculation(&ACIM_FREQ_CTRL_1);
 8007cbc:	4827      	ldr	r0, [pc, #156]	; (8007d5c <CCU81_0_IRQHandler+0xdc>)
 8007cbe:	f7ff fa9b 	bl	80071f8 <ACIM_FREQ_CTRL_Amplitude_Calculation>

        /*angle calculation*/
        ACIM_FREQ_CTRL_AngleRamp(&ACIM_FREQ_CTRL_1);
 8007cc2:	4826      	ldr	r0, [pc, #152]	; (8007d5c <CCU81_0_IRQHandler+0xdc>)
 8007cc4:	f7ff fac4 	bl	8007250 <ACIM_FREQ_CTRL_AngleRamp>


        /*Update Modulation Angle and Amplitude before calling svm*/
        temp_angle = ACIM_FREQ_CTRL_1.vf_control_ptr->output_angle + (ACIM_FREQ_CTRL_1.angle_offset * ACIM_FREQ_CTRL_1.motor_direction);
 8007cc8:	4b24      	ldr	r3, [pc, #144]	; (8007d5c <CCU81_0_IRQHandler+0xdc>)
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	68db      	ldr	r3, [r3, #12]
 8007cce:	4619      	mov	r1, r3
 8007cd0:	4b22      	ldr	r3, [pc, #136]	; (8007d5c <CCU81_0_IRQHandler+0xdc>)
 8007cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cd4:	4a21      	ldr	r2, [pc, #132]	; (8007d5c <CCU81_0_IRQHandler+0xdc>)
 8007cd6:	f892 20a4 	ldrb.w	r2, [r2, #164]	; 0xa4
 8007cda:	b252      	sxtb	r2, r2
 8007cdc:	fb02 f303 	mul.w	r3, r2, r3
 8007ce0:	440b      	add	r3, r1
 8007ce2:	607b      	str	r3, [r7, #4]
        ACIM_FREQ_CTRL_1.angle     = (uint32_t)(temp_angle);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	4a1d      	ldr	r2, [pc, #116]	; (8007d5c <CCU81_0_IRQHandler+0xdc>)
 8007ce8:	67d3      	str	r3, [r2, #124]	; 0x7c
        ACIM_FREQ_CTRL_1.amplitude = ACIM_FREQ_CTRL_1.vf_control_ptr->output_amplitude;
 8007cea:	4b1c      	ldr	r3, [pc, #112]	; (8007d5c <CCU81_0_IRQHandler+0xdc>)
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	691b      	ldr	r3, [r3, #16]
 8007cf0:	4a1a      	ldr	r2, [pc, #104]	; (8007d5c <CCU81_0_IRQHandler+0xdc>)
 8007cf2:	6793      	str	r3, [r2, #120]	; 0x78

        /*Call SVM*/
        PWM_SVM_SVMUpdate(ACIM_FREQ_CTRL_1.pwm_svm_ptr,(uint16_t)ACIM_FREQ_CTRL_1.amplitude,ACIM_FREQ_CTRL_1.angle);
 8007cf4:	4b19      	ldr	r3, [pc, #100]	; (8007d5c <CCU81_0_IRQHandler+0xdc>)
 8007cf6:	6859      	ldr	r1, [r3, #4]
 8007cf8:	4b18      	ldr	r3, [pc, #96]	; (8007d5c <CCU81_0_IRQHandler+0xdc>)
 8007cfa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cfc:	b29a      	uxth	r2, r3
 8007cfe:	4b17      	ldr	r3, [pc, #92]	; (8007d5c <CCU81_0_IRQHandler+0xdc>)
 8007d00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d02:	4608      	mov	r0, r1
 8007d04:	4611      	mov	r1, r2
 8007d06:	461a      	mov	r2, r3
 8007d08:	f001 fefa 	bl	8009b00 <__PWM_SVM_SVMUpdate_veneer>
 8007d0c:	e007      	b.n	8007d1e <CCU81_0_IRQHandler+0x9e>
      }

    }
    else
    {
      ACIM_FREQ_CTRL_1.fcl_div_value++;
 8007d0e:	4b13      	ldr	r3, [pc, #76]	; (8007d5c <CCU81_0_IRQHandler+0xdc>)
 8007d10:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8007d14:	3301      	adds	r3, #1
 8007d16:	b2da      	uxtb	r2, r3
 8007d18:	4b10      	ldr	r3, [pc, #64]	; (8007d5c <CCU81_0_IRQHandler+0xdc>)
 8007d1a:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
    }

/************************* calling control loops ***************************/

    if(ACIM_FREQ_CTRL_1.pcl_div_value == ACIM_FREQ_CTRL_1.acim_config_ptr->pcl_divider)
 8007d1e:	4b0f      	ldr	r3, [pc, #60]	; (8007d5c <CCU81_0_IRQHandler+0xdc>)
 8007d20:	f893 20a7 	ldrb.w	r2, [r3, #167]	; 0xa7
 8007d24:	4b0d      	ldr	r3, [pc, #52]	; (8007d5c <CCU81_0_IRQHandler+0xdc>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	7d5b      	ldrb	r3, [r3, #21]
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d10a      	bne.n	8007d44 <CCU81_0_IRQHandler+0xc4>
    {
      ACIM_FREQ_CTRL_1_SetValueProcessing(&ACIM_FREQ_CTRL_1);
 8007d2e:	480b      	ldr	r0, [pc, #44]	; (8007d5c <CCU81_0_IRQHandler+0xdc>)
 8007d30:	f000 f820 	bl	8007d74 <ACIM_FREQ_CTRL_1_SetValueProcessing>

	  ACIM_FREQ_CTRL_1_PrimaryControlLoop(&ACIM_FREQ_CTRL_1); 
 8007d34:	4809      	ldr	r0, [pc, #36]	; (8007d5c <CCU81_0_IRQHandler+0xdc>)
 8007d36:	f000 f813 	bl	8007d60 <ACIM_FREQ_CTRL_1_PrimaryControlLoop>
      ACIM_FREQ_CTRL_1.pcl_div_value =(uint8_t)1;
 8007d3a:	4b08      	ldr	r3, [pc, #32]	; (8007d5c <CCU81_0_IRQHandler+0xdc>)
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
 8007d42:	e007      	b.n	8007d54 <CCU81_0_IRQHandler+0xd4>
    }
    else
    {
      ACIM_FREQ_CTRL_1.pcl_div_value++;
 8007d44:	4b05      	ldr	r3, [pc, #20]	; (8007d5c <CCU81_0_IRQHandler+0xdc>)
 8007d46:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	b2da      	uxtb	r2, r3
 8007d4e:	4b03      	ldr	r3, [pc, #12]	; (8007d5c <CCU81_0_IRQHandler+0xdc>)
 8007d50:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
    }

}
 8007d54:	3708      	adds	r7, #8
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}
 8007d5a:	bf00      	nop
 8007d5c:	1fffd3a8 	.word	0x1fffd3a8

08007d60 <ACIM_FREQ_CTRL_1_PrimaryControlLoop>:

/*************** Primary control loop Functions ****************************/
 /* This Function execute primary control loop functionality*/
void ACIM_FREQ_CTRL_1_PrimaryControlLoop(ACIM_FREQ_CTRL_t*const HandlePtr)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b082      	sub	sp, #8
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  if(HandlePtr->msm_state != ACIM_FREQ_CTRL_MSM_BOOTSTRAP)
  {

  }
  /* Call motor control state machine */
  ACIM_FREQ_CTRL_MSM(HandlePtr);
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f7ff fb1b 	bl	80073a4 <ACIM_FREQ_CTRL_MSM>
}
 8007d6e:	3708      	adds	r7, #8
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <ACIM_FREQ_CTRL_1_SetValueProcessing>:

/*************** Set Value Processing Function ****************************/
/* This Function execute set value processing control loop functionality*/
void ACIM_FREQ_CTRL_1_SetValueProcessing(ACIM_FREQ_CTRL_t*const HandlePtr)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b083      	sub	sp, #12
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]

}
 8007d7c:	370c      	adds	r7, #12
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	4770      	bx	lr
 8007d86:	bf00      	nop

08007d88 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
DAVE_STATUS_t DAVE_Init(void)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b082      	sub	sp, #8
 8007d8c:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 8007d92:	48a9      	ldr	r0, [pc, #676]	; (8008038 <DAVE_Init+0x2b0>)
 8007d94:	f7fd fc40 	bl	8005618 <CLOCK_XMC4_Init>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 8007d9c:	79fb      	ldrb	r3, [r7, #7]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d104      	bne.n	8007dac <DAVE_Init+0x24>
  {
	 /**  Initialization of ACIM_FREQ_CTRL APP instance ACIM_FREQ_CTRL_0 */
	 init_status = (DAVE_STATUS_t)ACIM_FREQ_CTRL_Init(&ACIM_FREQ_CTRL_0); 
 8007da2:	48a6      	ldr	r0, [pc, #664]	; (800803c <DAVE_Init+0x2b4>)
 8007da4:	f7fe ff12 	bl	8006bcc <ACIM_FREQ_CTRL_Init>
 8007da8:	4603      	mov	r3, r0
 8007daa:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8007dac:	79fb      	ldrb	r3, [r7, #7]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d104      	bne.n	8007dbc <DAVE_Init+0x34>
  {
	 /**  Initialization of ACIM_FREQ_CTRL APP instance ACIM_FREQ_CTRL_1 */
	 init_status = (DAVE_STATUS_t)ACIM_FREQ_CTRL_Init(&ACIM_FREQ_CTRL_1); 
 8007db2:	48a3      	ldr	r0, [pc, #652]	; (8008040 <DAVE_Init+0x2b8>)
 8007db4:	f7fe ff0a 	bl	8006bcc <ACIM_FREQ_CTRL_Init>
 8007db8:	4603      	mov	r3, r0
 8007dba:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8007dbc:	79fb      	ldrb	r3, [r7, #7]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d104      	bne.n	8007dcc <DAVE_Init+0x44>
  {
	 /**  Initialization of DIGITAL_IO APP instance Cooling_FAN */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&Cooling_FAN); 
 8007dc2:	48a0      	ldr	r0, [pc, #640]	; (8008044 <DAVE_Init+0x2bc>)
 8007dc4:	f7fd fb94 	bl	80054f0 <DIGITAL_IO_Init>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8007dcc:	79fb      	ldrb	r3, [r7, #7]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d104      	bne.n	8007ddc <DAVE_Init+0x54>
  {
	 /**  Initialization of DIGITAL_IO APP instance Disable_Gate_Driver_M3 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&Disable_Gate_Driver_M3); 
 8007dd2:	489d      	ldr	r0, [pc, #628]	; (8008048 <DAVE_Init+0x2c0>)
 8007dd4:	f7fd fb8c 	bl	80054f0 <DIGITAL_IO_Init>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8007ddc:	79fb      	ldrb	r3, [r7, #7]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d104      	bne.n	8007dec <DAVE_Init+0x64>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_2 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_2); 
 8007de2:	489a      	ldr	r0, [pc, #616]	; (800804c <DAVE_Init+0x2c4>)
 8007de4:	f7fd fb84 	bl	80054f0 <DIGITAL_IO_Init>
 8007de8:	4603      	mov	r3, r0
 8007dea:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8007dec:	79fb      	ldrb	r3, [r7, #7]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d104      	bne.n	8007dfc <DAVE_Init+0x74>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_3 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_3); 
 8007df2:	4897      	ldr	r0, [pc, #604]	; (8008050 <DAVE_Init+0x2c8>)
 8007df4:	f7fd fb7c 	bl	80054f0 <DIGITAL_IO_Init>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8007dfc:	79fb      	ldrb	r3, [r7, #7]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d104      	bne.n	8007e0c <DAVE_Init+0x84>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_4 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_4); 
 8007e02:	4894      	ldr	r0, [pc, #592]	; (8008054 <DAVE_Init+0x2cc>)
 8007e04:	f7fd fb74 	bl	80054f0 <DIGITAL_IO_Init>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8007e0c:	79fb      	ldrb	r3, [r7, #7]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d104      	bne.n	8007e1c <DAVE_Init+0x94>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_5 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_5); 
 8007e12:	4891      	ldr	r0, [pc, #580]	; (8008058 <DAVE_Init+0x2d0>)
 8007e14:	f7fd fb6c 	bl	80054f0 <DIGITAL_IO_Init>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8007e1c:	79fb      	ldrb	r3, [r7, #7]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d104      	bne.n	8007e2c <DAVE_Init+0xa4>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_6 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_6); 
 8007e22:	488e      	ldr	r0, [pc, #568]	; (800805c <DAVE_Init+0x2d4>)
 8007e24:	f7fd fb64 	bl	80054f0 <DIGITAL_IO_Init>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8007e2c:	79fb      	ldrb	r3, [r7, #7]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d104      	bne.n	8007e3c <DAVE_Init+0xb4>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_7 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_7); 
 8007e32:	488b      	ldr	r0, [pc, #556]	; (8008060 <DAVE_Init+0x2d8>)
 8007e34:	f7fd fb5c 	bl	80054f0 <DIGITAL_IO_Init>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8007e3c:	79fb      	ldrb	r3, [r7, #7]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d104      	bne.n	8007e4c <DAVE_Init+0xc4>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_8 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_8); 
 8007e42:	4888      	ldr	r0, [pc, #544]	; (8008064 <DAVE_Init+0x2dc>)
 8007e44:	f7fd fb54 	bl	80054f0 <DIGITAL_IO_Init>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8007e4c:	79fb      	ldrb	r3, [r7, #7]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d104      	bne.n	8007e5c <DAVE_Init+0xd4>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_9 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_9); 
 8007e52:	4885      	ldr	r0, [pc, #532]	; (8008068 <DAVE_Init+0x2e0>)
 8007e54:	f7fd fb4c 	bl	80054f0 <DIGITAL_IO_Init>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8007e5c:	79fb      	ldrb	r3, [r7, #7]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d104      	bne.n	8007e6c <DAVE_Init+0xe4>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_10 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_10); 
 8007e62:	4882      	ldr	r0, [pc, #520]	; (800806c <DAVE_Init+0x2e4>)
 8007e64:	f7fd fb44 	bl	80054f0 <DIGITAL_IO_Init>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8007e6c:	79fb      	ldrb	r3, [r7, #7]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d104      	bne.n	8007e7c <DAVE_Init+0xf4>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_11 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_11); 
 8007e72:	487f      	ldr	r0, [pc, #508]	; (8008070 <DAVE_Init+0x2e8>)
 8007e74:	f7fd fb3c 	bl	80054f0 <DIGITAL_IO_Init>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8007e7c:	79fb      	ldrb	r3, [r7, #7]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d104      	bne.n	8007e8c <DAVE_Init+0x104>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_12 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_12); 
 8007e82:	487c      	ldr	r0, [pc, #496]	; (8008074 <DAVE_Init+0x2ec>)
 8007e84:	f7fd fb34 	bl	80054f0 <DIGITAL_IO_Init>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8007e8c:	79fb      	ldrb	r3, [r7, #7]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d104      	bne.n	8007e9c <DAVE_Init+0x114>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_13 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_13); 
 8007e92:	4879      	ldr	r0, [pc, #484]	; (8008078 <DAVE_Init+0x2f0>)
 8007e94:	f7fd fb2c 	bl	80054f0 <DIGITAL_IO_Init>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8007e9c:	79fb      	ldrb	r3, [r7, #7]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d104      	bne.n	8007eac <DAVE_Init+0x124>
  {
	 /**  Initialization of DIGITAL_IO APP instance RS485_DIR */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&RS485_DIR); 
 8007ea2:	4876      	ldr	r0, [pc, #472]	; (800807c <DAVE_Init+0x2f4>)
 8007ea4:	f7fd fb24 	bl	80054f0 <DIGITAL_IO_Init>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8007eac:	79fb      	ldrb	r3, [r7, #7]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d104      	bne.n	8007ebc <DAVE_Init+0x134>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_15 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_15); 
 8007eb2:	4873      	ldr	r0, [pc, #460]	; (8008080 <DAVE_Init+0x2f8>)
 8007eb4:	f7fd fb1c 	bl	80054f0 <DIGITAL_IO_Init>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8007ebc:	79fb      	ldrb	r3, [r7, #7]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d104      	bne.n	8007ecc <DAVE_Init+0x144>
  {
	 /**  Initialization of DIGITAL_IO APP instance IO_Bit1_DIR */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&IO_Bit1_DIR); 
 8007ec2:	4870      	ldr	r0, [pc, #448]	; (8008084 <DAVE_Init+0x2fc>)
 8007ec4:	f7fd fb14 	bl	80054f0 <DIGITAL_IO_Init>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8007ecc:	79fb      	ldrb	r3, [r7, #7]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d104      	bne.n	8007edc <DAVE_Init+0x154>
  {
	 /**  Initialization of DIGITAL_IO APP instance IO_Bit0_DIR */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&IO_Bit0_DIR); 
 8007ed2:	486d      	ldr	r0, [pc, #436]	; (8008088 <DAVE_Init+0x300>)
 8007ed4:	f7fd fb0c 	bl	80054f0 <DIGITAL_IO_Init>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8007edc:	79fb      	ldrb	r3, [r7, #7]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d104      	bne.n	8007eec <DAVE_Init+0x164>
  {
	 /**  Initialization of DIGITAL_IO APP instance HS_Overtemp */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&HS_Overtemp); 
 8007ee2:	486a      	ldr	r0, [pc, #424]	; (800808c <DAVE_Init+0x304>)
 8007ee4:	f7fd fb04 	bl	80054f0 <DIGITAL_IO_Init>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8007eec:	79fb      	ldrb	r3, [r7, #7]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d104      	bne.n	8007efc <DAVE_Init+0x174>
  {
	 /**  Initialization of DIGITAL_IO APP instance IO_Bit3_DIR */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&IO_Bit3_DIR); 
 8007ef2:	4867      	ldr	r0, [pc, #412]	; (8008090 <DAVE_Init+0x308>)
 8007ef4:	f7fd fafc 	bl	80054f0 <DIGITAL_IO_Init>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8007efc:	79fb      	ldrb	r3, [r7, #7]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d104      	bne.n	8007f0c <DAVE_Init+0x184>
  {
	 /**  Initialization of DIGITAL_IO APP instance IO_Bit2_DIR */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&IO_Bit2_DIR); 
 8007f02:	4864      	ldr	r0, [pc, #400]	; (8008094 <DAVE_Init+0x30c>)
 8007f04:	f7fd faf4 	bl	80054f0 <DIGITAL_IO_Init>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8007f0c:	79fb      	ldrb	r3, [r7, #7]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d104      	bne.n	8007f1c <DAVE_Init+0x194>
  {
	 /**  Initialization of DIGITAL_IO APP instance IO_Bit2 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&IO_Bit2); 
 8007f12:	4861      	ldr	r0, [pc, #388]	; (8008098 <DAVE_Init+0x310>)
 8007f14:	f7fd faec 	bl	80054f0 <DIGITAL_IO_Init>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8007f1c:	79fb      	ldrb	r3, [r7, #7]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d104      	bne.n	8007f2c <DAVE_Init+0x1a4>
  {
	 /**  Initialization of DIGITAL_IO APP instance IO_Bit1 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&IO_Bit1); 
 8007f22:	485e      	ldr	r0, [pc, #376]	; (800809c <DAVE_Init+0x314>)
 8007f24:	f7fd fae4 	bl	80054f0 <DIGITAL_IO_Init>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8007f2c:	79fb      	ldrb	r3, [r7, #7]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d104      	bne.n	8007f3c <DAVE_Init+0x1b4>
  {
	 /**  Initialization of DIGITAL_IO APP instance IO_Bit0 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&IO_Bit0); 
 8007f32:	485b      	ldr	r0, [pc, #364]	; (80080a0 <DAVE_Init+0x318>)
 8007f34:	f7fd fadc 	bl	80054f0 <DIGITAL_IO_Init>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8007f3c:	79fb      	ldrb	r3, [r7, #7]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d104      	bne.n	8007f4c <DAVE_Init+0x1c4>
  {
	 /**  Initialization of DIGITAL_IO APP instance IO_Bit3 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&IO_Bit3); 
 8007f42:	4858      	ldr	r0, [pc, #352]	; (80080a4 <DAVE_Init+0x31c>)
 8007f44:	f7fd fad4 	bl	80054f0 <DIGITAL_IO_Init>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8007f4c:	79fb      	ldrb	r3, [r7, #7]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d104      	bne.n	8007f5c <DAVE_Init+0x1d4>
  {
	 /**  Initialization of DIGITAL_IO APP instance Disable_Gate_Driver_M1_M2 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&Disable_Gate_Driver_M1_M2); 
 8007f52:	4855      	ldr	r0, [pc, #340]	; (80080a8 <DAVE_Init+0x320>)
 8007f54:	f7fd facc 	bl	80054f0 <DIGITAL_IO_Init>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8007f5c:	79fb      	ldrb	r3, [r7, #7]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d104      	bne.n	8007f6c <DAVE_Init+0x1e4>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_26 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_26); 
 8007f62:	4852      	ldr	r0, [pc, #328]	; (80080ac <DAVE_Init+0x324>)
 8007f64:	f7fd fac4 	bl	80054f0 <DIGITAL_IO_Init>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8007f6c:	79fb      	ldrb	r3, [r7, #7]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d104      	bne.n	8007f7c <DAVE_Init+0x1f4>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_27 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_27); 
 8007f72:	484f      	ldr	r0, [pc, #316]	; (80080b0 <DAVE_Init+0x328>)
 8007f74:	f7fd fabc 	bl	80054f0 <DIGITAL_IO_Init>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8007f7c:	79fb      	ldrb	r3, [r7, #7]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d104      	bne.n	8007f8c <DAVE_Init+0x204>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_28 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_28); 
 8007f82:	484c      	ldr	r0, [pc, #304]	; (80080b4 <DAVE_Init+0x32c>)
 8007f84:	f7fd fab4 	bl	80054f0 <DIGITAL_IO_Init>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8007f8c:	79fb      	ldrb	r3, [r7, #7]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d104      	bne.n	8007f9c <DAVE_Init+0x214>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_29 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_29); 
 8007f92:	4849      	ldr	r0, [pc, #292]	; (80080b8 <DAVE_Init+0x330>)
 8007f94:	f7fd faac 	bl	80054f0 <DIGITAL_IO_Init>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8007f9c:	79fb      	ldrb	r3, [r7, #7]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d104      	bne.n	8007fac <DAVE_Init+0x224>
  {
	 /**  Initialization of UART APP instance UART_0 */
	 init_status = (DAVE_STATUS_t)UART_Init(&UART_0); 
 8007fa2:	4846      	ldr	r0, [pc, #280]	; (80080bc <DAVE_Init+0x334>)
 8007fa4:	f7fa fc5e 	bl	8002864 <UART_Init>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8007fac:	79fb      	ldrb	r3, [r7, #7]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d104      	bne.n	8007fbc <DAVE_Init+0x234>
  {
	 /**  Initialization of ADC_MEASUREMENT APP instance ADC_MEASUREMENT_0 */
	 init_status = (DAVE_STATUS_t)ADC_MEASUREMENT_Init(&ADC_MEASUREMENT_0); 
 8007fb2:	4843      	ldr	r0, [pc, #268]	; (80080c0 <DAVE_Init+0x338>)
 8007fb4:	f7fe fb2e 	bl	8006614 <ADC_MEASUREMENT_Init>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8007fbc:	79fb      	ldrb	r3, [r7, #7]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d104      	bne.n	8007fcc <DAVE_Init+0x244>
  {
	 /**  Initialization of ANALOG_IO APP instance ANALOG_IO_1 */
	 init_status = (DAVE_STATUS_t)ANALOG_IO_Init(&ANALOG_IO_1); 
 8007fc2:	4840      	ldr	r0, [pc, #256]	; (80080c4 <DAVE_Init+0x33c>)
 8007fc4:	f7fe fa34 	bl	8006430 <ANALOG_IO_Init>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8007fcc:	79fb      	ldrb	r3, [r7, #7]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d104      	bne.n	8007fdc <DAVE_Init+0x254>
  {
	 /**  Initialization of UART_CONFIG APP instance UART_CONFIG_0 */
	 init_status = (DAVE_STATUS_t)UART_CONFIG_Init(&UART_CONFIG_0); 
 8007fd2:	483d      	ldr	r0, [pc, #244]	; (80080c8 <DAVE_Init+0x340>)
 8007fd4:	f7fa fb04 	bl	80025e0 <UART_CONFIG_Init>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8007fdc:	79fb      	ldrb	r3, [r7, #7]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d104      	bne.n	8007fec <DAVE_Init+0x264>
  {
	 /**  Initialization of CCU8_SLICE_CONFIG APP instance CCU8_SLICE_CONFIG_0 */
	 init_status = (DAVE_STATUS_t)CCU8_SLICE_CONFIG_Init(&CCU8_SLICE_CONFIG_0); 
 8007fe2:	483a      	ldr	r0, [pc, #232]	; (80080cc <DAVE_Init+0x344>)
 8007fe4:	f7fd fb58 	bl	8005698 <CCU8_SLICE_CONFIG_Init>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8007fec:	79fb      	ldrb	r3, [r7, #7]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d104      	bne.n	8007ffc <DAVE_Init+0x274>
  {
	 /**  Initialization of PWM_CCU4 APP instance PWM_CCU4_2 */
	 init_status = (DAVE_STATUS_t)PWM_CCU4_Init(&PWM_CCU4_2); 
 8007ff2:	4837      	ldr	r0, [pc, #220]	; (80080d0 <DAVE_Init+0x348>)
 8007ff4:	f7fc f8fa 	bl	80041ec <PWM_CCU4_Init>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8007ffc:	79fb      	ldrb	r3, [r7, #7]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d104      	bne.n	800800c <DAVE_Init+0x284>
  {
	 /**  Initialization of I2C_MASTER APP instance I2C_MASTER_0 */
	 init_status = (DAVE_STATUS_t)I2C_MASTER_Init(&I2C_MASTER_0); 
 8008002:	4834      	ldr	r0, [pc, #208]	; (80080d4 <DAVE_Init+0x34c>)
 8008004:	f7fc fca8 	bl	8004958 <I2C_MASTER_Init>
 8008008:	4603      	mov	r3, r0
 800800a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800800c:	79fb      	ldrb	r3, [r7, #7]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d104      	bne.n	800801c <DAVE_Init+0x294>
  {
	 /**  Initialization of ANALOG_IO APP instance ANALOG_IO_2 */
	 init_status = (DAVE_STATUS_t)ANALOG_IO_Init(&ANALOG_IO_2); 
 8008012:	4831      	ldr	r0, [pc, #196]	; (80080d8 <DAVE_Init+0x350>)
 8008014:	f7fe fa0c 	bl	8006430 <ANALOG_IO_Init>
 8008018:	4603      	mov	r3, r0
 800801a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800801c:	79fb      	ldrb	r3, [r7, #7]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d104      	bne.n	800802c <DAVE_Init+0x2a4>
  {
	 /**  Initialization of CCU4_SLICE_CONFIG APP instance CCU4_SLICE_CONFIG_0 */
	 init_status = (DAVE_STATUS_t)CCU4_SLICE_CONFIG_Init(&CCU4_SLICE_CONFIG_0); 
 8008022:	482e      	ldr	r0, [pc, #184]	; (80080dc <DAVE_Init+0x354>)
 8008024:	f7fd fbf4 	bl	8005810 <CCU4_SLICE_CONFIG_Init>
 8008028:	4603      	mov	r3, r0
 800802a:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 800802c:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 800802e:	4618      	mov	r0, r3
 8008030:	3708      	adds	r7, #8
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}
 8008036:	bf00      	nop
 8008038:	200092e8 	.word	0x200092e8
 800803c:	1fffd058 	.word	0x1fffd058
 8008040:	1fffd3a8 	.word	0x1fffd3a8
 8008044:	0800a700 	.word	0x0800a700
 8008048:	0800a714 	.word	0x0800a714
 800804c:	0800a728 	.word	0x0800a728
 8008050:	0800a73c 	.word	0x0800a73c
 8008054:	0800a750 	.word	0x0800a750
 8008058:	0800a764 	.word	0x0800a764
 800805c:	0800a778 	.word	0x0800a778
 8008060:	0800a78c 	.word	0x0800a78c
 8008064:	0800a7a0 	.word	0x0800a7a0
 8008068:	0800a7b4 	.word	0x0800a7b4
 800806c:	0800a7c8 	.word	0x0800a7c8
 8008070:	0800a7dc 	.word	0x0800a7dc
 8008074:	0800a7f0 	.word	0x0800a7f0
 8008078:	0800a804 	.word	0x0800a804
 800807c:	0800a818 	.word	0x0800a818
 8008080:	0800a82c 	.word	0x0800a82c
 8008084:	0800a840 	.word	0x0800a840
 8008088:	0800a854 	.word	0x0800a854
 800808c:	0800a868 	.word	0x0800a868
 8008090:	0800a87c 	.word	0x0800a87c
 8008094:	0800a890 	.word	0x0800a890
 8008098:	0800a8a4 	.word	0x0800a8a4
 800809c:	0800a8b8 	.word	0x0800a8b8
 80080a0:	0800a8cc 	.word	0x0800a8cc
 80080a4:	0800a8e0 	.word	0x0800a8e0
 80080a8:	0800a8f4 	.word	0x0800a8f4
 80080ac:	0800a908 	.word	0x0800a908
 80080b0:	0800a91c 	.word	0x0800a91c
 80080b4:	0800a930 	.word	0x0800a930
 80080b8:	0800a944 	.word	0x0800a944
 80080bc:	1fffcc50 	.word	0x1fffcc50
 80080c0:	1fffd018 	.word	0x1fffd018
 80080c4:	0800aa2c 	.word	0x0800aa2c
 80080c8:	1fffcc48 	.word	0x1fffcc48
 80080cc:	0800a96c 	.word	0x0800a96c
 80080d0:	1fffce0c 	.word	0x1fffce0c
 80080d4:	1fffce60 	.word	0x1fffce60
 80080d8:	0800aa3c 	.word	0x0800aa3c
 80080dc:	0800a998 	.word	0x0800a998

080080e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b083      	sub	sp, #12
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	4603      	mov	r3, r0
 80080e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80080ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	db0b      	blt.n	800810a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80080f2:	4908      	ldr	r1, [pc, #32]	; (8008114 <__NVIC_EnableIRQ+0x34>)
 80080f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080f8:	095b      	lsrs	r3, r3, #5
 80080fa:	79fa      	ldrb	r2, [r7, #7]
 80080fc:	f002 021f 	and.w	r2, r2, #31
 8008100:	2001      	movs	r0, #1
 8008102:	fa00 f202 	lsl.w	r2, r0, r2
 8008106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800810a:	370c      	adds	r7, #12
 800810c:	46bd      	mov	sp, r7
 800810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008112:	4770      	bx	lr
 8008114:	e000e100 	.word	0xe000e100

08008118 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008118:	b480      	push	{r7}
 800811a:	b083      	sub	sp, #12
 800811c:	af00      	add	r7, sp, #0
 800811e:	4603      	mov	r3, r0
 8008120:	6039      	str	r1, [r7, #0]
 8008122:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008128:	2b00      	cmp	r3, #0
 800812a:	db0a      	blt.n	8008142 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800812c:	490d      	ldr	r1, [pc, #52]	; (8008164 <__NVIC_SetPriority+0x4c>)
 800812e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008132:	683a      	ldr	r2, [r7, #0]
 8008134:	b2d2      	uxtb	r2, r2
 8008136:	0092      	lsls	r2, r2, #2
 8008138:	b2d2      	uxtb	r2, r2
 800813a:	440b      	add	r3, r1
 800813c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8008140:	e00a      	b.n	8008158 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008142:	4909      	ldr	r1, [pc, #36]	; (8008168 <__NVIC_SetPriority+0x50>)
 8008144:	79fb      	ldrb	r3, [r7, #7]
 8008146:	f003 030f 	and.w	r3, r3, #15
 800814a:	3b04      	subs	r3, #4
 800814c:	683a      	ldr	r2, [r7, #0]
 800814e:	b2d2      	uxtb	r2, r2
 8008150:	0092      	lsls	r2, r2, #2
 8008152:	b2d2      	uxtb	r2, r2
 8008154:	440b      	add	r3, r1
 8008156:	761a      	strb	r2, [r3, #24]
  }
}
 8008158:	370c      	adds	r7, #12
 800815a:	46bd      	mov	sp, r7
 800815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008160:	4770      	bx	lr
 8008162:	bf00      	nop
 8008164:	e000e100 	.word	0xe000e100
 8008168:	e000ed00 	.word	0xe000ed00

0800816c <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800816c:	b480      	push	{r7}
 800816e:	b083      	sub	sp, #12
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	460b      	mov	r3, r1
 8008176:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8008178:	78fb      	ldrb	r3, [r7, #3]
 800817a:	2201      	movs	r2, #1
 800817c:	409a      	lsls	r2, r3
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	605a      	str	r2, [r3, #4]
}
 8008182:	370c      	adds	r7, #12
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr

0800818c <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800818c:	b480      	push	{r7}
 800818e:	b083      	sub	sp, #12
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	460b      	mov	r3, r1
 8008196:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 8008198:	78fb      	ldrb	r3, [r7, #3]
 800819a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800819e:	409a      	lsls	r2, r3
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	605a      	str	r2, [r3, #4]
}
 80081a4:	370c      	adds	r7, #12
 80081a6:	46bd      	mov	sp, r7
 80081a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ac:	4770      	bx	lr
 80081ae:	bf00      	nop

080081b0 <XMC_GPIO_ToggleOutput>:
 * and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_ToggleOutput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b083      	sub	sp, #12
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	460b      	mov	r3, r1
 80081ba:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_ToggleOutput: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10001U << pin;
 80081bc:	78fb      	ldrb	r3, [r7, #3]
 80081be:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 80081c2:	409a      	lsls	r2, r3
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	605a      	str	r2, [r3, #4]
}
 80081c8:	370c      	adds	r7, #12
 80081ca:	46bd      	mov	sp, r7
 80081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d0:	4770      	bx	lr
 80081d2:	bf00      	nop

080081d4 <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b083      	sub	sp, #12
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	460b      	mov	r3, r1
 80081de:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80081e4:	78fb      	ldrb	r3, [r7, #3]
 80081e6:	fa22 f303 	lsr.w	r3, r2, r3
 80081ea:	f003 0301 	and.w	r3, r3, #1
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	370c      	adds	r7, #12
 80081f2:	46bd      	mov	sp, r7
 80081f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f8:	4770      	bx	lr
 80081fa:	bf00      	nop

080081fc <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b082      	sub	sp, #8
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	7c1b      	ldrb	r3, [r3, #16]
 800820c:	4610      	mov	r0, r2
 800820e:	4619      	mov	r1, r3
 8008210:	f7ff ffac 	bl	800816c <XMC_GPIO_SetOutputHigh>
}
 8008214:	3708      	adds	r7, #8
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}
 800821a:	bf00      	nop

0800821c <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b082      	sub	sp, #8
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681a      	ldr	r2, [r3, #0]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	7c1b      	ldrb	r3, [r3, #16]
 800822c:	4610      	mov	r0, r2
 800822e:	4619      	mov	r1, r3
 8008230:	f7ff ffac 	bl	800818c <XMC_GPIO_SetOutputLow>
}
 8008234:	3708      	adds	r7, #8
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
 800823a:	bf00      	nop

0800823c <DIGITAL_IO_ToggleOutput>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_ToggleOutput(const DIGITAL_IO_t *const handler)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b082      	sub	sp, #8
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_ToggleOutput: handler null pointer", handler != NULL);
  XMC_GPIO_ToggleOutput(handler->gpio_port, handler->gpio_pin);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681a      	ldr	r2, [r3, #0]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	7c1b      	ldrb	r3, [r3, #16]
 800824c:	4610      	mov	r0, r2
 800824e:	4619      	mov	r1, r3
 8008250:	f7ff ffae 	bl	80081b0 <XMC_GPIO_ToggleOutput>
}
 8008254:	3708      	adds	r7, #8
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
 800825a:	bf00      	nop

0800825c <DIGITAL_IO_GetInput>:
* }
*  @endcode
*/

__STATIC_INLINE uint32_t DIGITAL_IO_GetInput(const DIGITAL_IO_t *const handler)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b082      	sub	sp, #8
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_GetInput: handler null pointer", handler != NULL);
  return XMC_GPIO_GetInput(handler->gpio_port, handler->gpio_pin);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681a      	ldr	r2, [r3, #0]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	7c1b      	ldrb	r3, [r3, #16]
 800826c:	4610      	mov	r0, r2
 800826e:	4619      	mov	r1, r3
 8008270:	f7ff ffb0 	bl	80081d4 <XMC_GPIO_GetInput>
 8008274:	4603      	mov	r3, r0
}
 8008276:	4618      	mov	r0, r3
 8008278:	3708      	adds	r7, #8
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
 800827e:	bf00      	nop

08008280 <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 8008280:	b480      	push	{r7}
 8008282:	b083      	sub	sp, #12
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	460b      	mov	r3, r1
 800828a:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 800828c:	887a      	ldrh	r2, [r7, #2]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8008292:	370c      	adds	r7, #12
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr

0800829c <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 800829c:	b480      	push	{r7}
 800829e:	b083      	sub	sp, #12
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	683a      	ldr	r2, [r7, #0]
 80082aa:	611a      	str	r2, [r3, #16]
}
 80082ac:	370c      	adds	r7, #12
 80082ae:	46bd      	mov	sp, r7
 80082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b4:	4770      	bx	lr
 80082b6:	bf00      	nop

080082b8 <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b083      	sub	sp, #12
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	460b      	mov	r3, r1
 80082c2:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80082ca:	78fb      	ldrb	r3, [r7, #3]
 80082cc:	2101      	movs	r1, #1
 80082ce:	fa01 f303 	lsl.w	r3, r1, r3
 80082d2:	431a      	orrs	r2, r3
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 80082da:	370c      	adds	r7, #12
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr

080082e4 <XMC_CCU4_SLICE_ClearEvent>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_EnableEvent()<BR> XMC_CCU4_SLICE_SetEvent()<BR> XMC_CCU4_SLICE_GetEvent().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearEvent(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b083      	sub	sp, #12
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	460b      	mov	r3, r1
 80082ee:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_ClearEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->SWR |= ((uint32_t) 1) << ((uint32_t) event);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80082f6:	78fb      	ldrb	r3, [r7, #3]
 80082f8:	2101      	movs	r1, #1
 80082fa:	fa01 f303 	lsl.w	r3, r1, r3
 80082fe:	431a      	orrs	r2, r3
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8008306:	370c      	adds	r7, #12
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr

08008310 <CCU42_0_IRQHandler>:
XMC_GPIO_CONFIG_t SLICE0_OUTPUT_config = { .mode =
		XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT3, .output_level =
		XMC_GPIO_OUTPUT_LEVEL_LOW, .output_strength =
		XMC_GPIO_OUTPUT_STRENGTH_MEDIUM };

void CCU42_0_IRQHandler(void) {
 8008310:	b580      	push	{r7, lr}
 8008312:	b088      	sub	sp, #32
 8008314:	af00      	add	r7, sp, #0
	/* Clear pending interrupt */
	XMC_CCU4_SLICE_ClearEvent(SLICE0_PTR,
 8008316:	482b      	ldr	r0, [pc, #172]	; (80083c4 <CCU42_0_IRQHandler+0xb4>)
 8008318:	2102      	movs	r1, #2
 800831a:	f7ff ffe3 	bl	80082e4 <XMC_CCU4_SLICE_ClearEvent>
			XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP);
	/* Set new duty cycle value */
	float Modulationsgrad = 81;
 800831e:	4b2a      	ldr	r3, [pc, #168]	; (80083c8 <CCU42_0_IRQHandler+0xb8>)
 8008320:	61fb      	str	r3, [r7, #28]
	uint8_t frequenz = 100;
 8008322:	2364      	movs	r3, #100	; 0x64
 8008324:	76fb      	strb	r3, [r7, #27]
	//uint16_t value = 2400;
	int32_t temp1 =(int32_t)(comparevalue[count]-1250);
 8008326:	4b29      	ldr	r3, [pc, #164]	; (80083cc <CCU42_0_IRQHandler+0xbc>)
 8008328:	881b      	ldrh	r3, [r3, #0]
 800832a:	b29b      	uxth	r3, r3
 800832c:	461a      	mov	r2, r3
 800832e:	4b28      	ldr	r3, [pc, #160]	; (80083d0 <CCU42_0_IRQHandler+0xc0>)
 8008330:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008334:	f2a3 43e2 	subw	r3, r3, #1250	; 0x4e2
 8008338:	617b      	str	r3, [r7, #20]
	int32_t temp2 =  (temp1*Modulationsgrad)/100;
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	ee07 3a90 	vmov	s15, r3
 8008340:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008344:	edd7 7a07 	vldr	s15, [r7, #28]
 8008348:	ee67 7a27 	vmul.f32	s15, s14, s15
 800834c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80083d4 <CCU42_0_IRQHandler+0xc4>
 8008350:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8008354:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008358:	ee17 3a90 	vmov	r3, s15
 800835c:	613b      	str	r3, [r7, #16]
	int32_t temp3 = temp2 +1250;
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
 8008364:	60fb      	str	r3, [r7, #12]


	int32_t value =   temp3;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	60bb      	str	r3, [r7, #8]
	if(value >= 2490){
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	f640 12b9 	movw	r2, #2489	; 0x9b9
 8008370:	4293      	cmp	r3, r2
 8008372:	dd01      	ble.n	8008378 <CCU42_0_IRQHandler+0x68>
		int k = 12;
 8008374:	230c      	movs	r3, #12
 8008376:	607b      	str	r3, [r7, #4]
	}
	//(Modulationsgrad*comparevalue[count]);
	XMC_CCU4_SLICE_SetTimerCompareMatch(SLICE0_PTR, value);
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	b29b      	uxth	r3, r3
 800837c:	4811      	ldr	r0, [pc, #68]	; (80083c4 <CCU42_0_IRQHandler+0xb4>)
 800837e:	4619      	mov	r1, r3
 8008380:	f7ff ff7e 	bl	8008280 <XMC_CCU4_SLICE_SetTimerCompareMatch>
	count = count + frequenz;
 8008384:	7efb      	ldrb	r3, [r7, #27]
 8008386:	b29a      	uxth	r2, r3
 8008388:	4b10      	ldr	r3, [pc, #64]	; (80083cc <CCU42_0_IRQHandler+0xbc>)
 800838a:	881b      	ldrh	r3, [r3, #0]
 800838c:	b29b      	uxth	r3, r3
 800838e:	4413      	add	r3, r2
 8008390:	b29a      	uxth	r2, r3
 8008392:	4b0e      	ldr	r3, [pc, #56]	; (80083cc <CCU42_0_IRQHandler+0xbc>)
 8008394:	801a      	strh	r2, [r3, #0]
	if (count == 24000) {
 8008396:	4b0d      	ldr	r3, [pc, #52]	; (80083cc <CCU42_0_IRQHandler+0xbc>)
 8008398:	881b      	ldrh	r3, [r3, #0]
 800839a:	b29b      	uxth	r3, r3
 800839c:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d108      	bne.n	80083b6 <CCU42_0_IRQHandler+0xa6>
		count = 0;
 80083a4:	4b09      	ldr	r3, [pc, #36]	; (80083cc <CCU42_0_IRQHandler+0xbc>)
 80083a6:	2200      	movs	r2, #0
 80083a8:	801a      	strh	r2, [r3, #0]
		DIGITAL_IO_ToggleOutput(&IO_Bit3);
 80083aa:	480b      	ldr	r0, [pc, #44]	; (80083d8 <CCU42_0_IRQHandler+0xc8>)
 80083ac:	f7ff ff46 	bl	800823c <DIGITAL_IO_ToggleOutput>
		DIGITAL_IO_ToggleOutput(&IO_Bit2);
 80083b0:	480a      	ldr	r0, [pc, #40]	; (80083dc <CCU42_0_IRQHandler+0xcc>)
 80083b2:	f7ff ff43 	bl	800823c <DIGITAL_IO_ToggleOutput>
	}
	/* Enable shadow transfer for the new PWM value update */
	XMC_CCU4_EnableShadowTransfer(MODULE_PTR, XMC_CCU4_SHADOW_TRANSFER_SLICE_0);
 80083b6:	480a      	ldr	r0, [pc, #40]	; (80083e0 <CCU42_0_IRQHandler+0xd0>)
 80083b8:	2101      	movs	r1, #1
 80083ba:	f7ff ff6f 	bl	800829c <XMC_CCU4_EnableShadowTransfer>
}
 80083be:	3720      	adds	r7, #32
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}
 80083c4:	40014100 	.word	0x40014100
 80083c8:	42a20000 	.word	0x42a20000
 80083cc:	20009304 	.word	0x20009304
 80083d0:	1fffd6d4 	.word	0x1fffd6d4
 80083d4:	42c80000 	.word	0x42c80000
 80083d8:	0800a8e0 	.word	0x0800a8e0
 80083dc:	0800a8a4 	.word	0x0800a8a4
 80083e0:	40014000 	.word	0x40014000
 80083e4:	00000000 	.word	0x00000000

080083e8 <VADC0_C0_2_IRQHandler>:

XMC_VADC_RESULT_SIZE_t result;
void Adc_Measurement_Handler() {
 80083e8:	b580      	push	{r7, lr}
 80083ea:	ed2d 8b02 	vpush	{d8}
 80083ee:	b084      	sub	sp, #16
 80083f0:	af00      	add	r7, sp, #0
#if(UC_SERIES != XMC11)
	result = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_A);
 80083f2:	4849      	ldr	r0, [pc, #292]	; (8008518 <VADC0_C0_2_IRQHandler+0x130>)
 80083f4:	f7fe f9c4 	bl	8006780 <ADC_MEASUREMENT_GetResult>
 80083f8:	4603      	mov	r3, r0
 80083fa:	461a      	mov	r2, r3
 80083fc:	4b47      	ldr	r3, [pc, #284]	; (800851c <VADC0_C0_2_IRQHandler+0x134>)
 80083fe:	801a      	strh	r2, [r3, #0]
	float resistor = 10000 * (pow(2, 12) / result - 1);
 8008400:	4b46      	ldr	r3, [pc, #280]	; (800851c <VADC0_C0_2_IRQHandler+0x134>)
 8008402:	881b      	ldrh	r3, [r3, #0]
 8008404:	4618      	mov	r0, r3
 8008406:	f000 fd2d 	bl	8008e64 <__aeabi_i2d>
 800840a:	4602      	mov	r2, r0
 800840c:	460b      	mov	r3, r1
 800840e:	f04f 0000 	mov.w	r0, #0
 8008412:	4943      	ldr	r1, [pc, #268]	; (8008520 <VADC0_C0_2_IRQHandler+0x138>)
 8008414:	f000 feb6 	bl	8009184 <__aeabi_ddiv>
 8008418:	4602      	mov	r2, r0
 800841a:	460b      	mov	r3, r1
 800841c:	4610      	mov	r0, r2
 800841e:	4619      	mov	r1, r3
 8008420:	f04f 0200 	mov.w	r2, #0
 8008424:	4b3f      	ldr	r3, [pc, #252]	; (8008524 <VADC0_C0_2_IRQHandler+0x13c>)
 8008426:	f000 fbcf 	bl	8008bc8 <__aeabi_dsub>
 800842a:	4602      	mov	r2, r0
 800842c:	460b      	mov	r3, r1
 800842e:	4610      	mov	r0, r2
 8008430:	4619      	mov	r1, r3
 8008432:	a333      	add	r3, pc, #204	; (adr r3, 8008500 <VADC0_C0_2_IRQHandler+0x118>)
 8008434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008438:	f000 fd7a 	bl	8008f30 <__aeabi_dmul>
 800843c:	4602      	mov	r2, r0
 800843e:	460b      	mov	r3, r1
 8008440:	4610      	mov	r0, r2
 8008442:	4619      	mov	r1, r3
 8008444:	f001 f80e 	bl	8009464 <__aeabi_d2f>
 8008448:	4603      	mov	r3, r0
 800844a:	60fb      	str	r3, [r7, #12]
	float beta = 601.3;
 800844c:	4b36      	ldr	r3, [pc, #216]	; (8008528 <VADC0_C0_2_IRQHandler+0x140>)
 800844e:	60bb      	str	r3, [r7, #8]
	float T = (((float) (beta * 298.15))
 8008450:	68b8      	ldr	r0, [r7, #8]
 8008452:	f000 fd19 	bl	8008e88 <__aeabi_f2d>
 8008456:	4602      	mov	r2, r0
 8008458:	460b      	mov	r3, r1
 800845a:	4610      	mov	r0, r2
 800845c:	4619      	mov	r1, r3
 800845e:	a32a      	add	r3, pc, #168	; (adr r3, 8008508 <VADC0_C0_2_IRQHandler+0x120>)
 8008460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008464:	f000 fd64 	bl	8008f30 <__aeabi_dmul>
 8008468:	4602      	mov	r2, r0
 800846a:	460b      	mov	r3, r1
 800846c:	4610      	mov	r0, r2
 800846e:	4619      	mov	r1, r3
 8008470:	f000 fff8 	bl	8009464 <__aeabi_d2f>
 8008474:	ee08 0a10 	vmov	s16, r0
			/ (((float) (298.15 * log(resistor / 10000))) + beta)) - 273.15;
 8008478:	edd7 7a03 	vldr	s15, [r7, #12]
 800847c:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800852c <VADC0_C0_2_IRQHandler+0x144>
 8008480:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8008484:	ee17 0a90 	vmov	r0, s15
 8008488:	f000 fcfe 	bl	8008e88 <__aeabi_f2d>
 800848c:	4602      	mov	r2, r0
 800848e:	460b      	mov	r3, r1
 8008490:	4610      	mov	r0, r2
 8008492:	4619      	mov	r1, r3
 8008494:	f000 f8f6 	bl	8008684 <log>
 8008498:	4602      	mov	r2, r0
 800849a:	460b      	mov	r3, r1
 800849c:	4610      	mov	r0, r2
 800849e:	4619      	mov	r1, r3
 80084a0:	a319      	add	r3, pc, #100	; (adr r3, 8008508 <VADC0_C0_2_IRQHandler+0x120>)
 80084a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a6:	f000 fd43 	bl	8008f30 <__aeabi_dmul>
 80084aa:	4602      	mov	r2, r0
 80084ac:	460b      	mov	r3, r1
 80084ae:	4610      	mov	r0, r2
 80084b0:	4619      	mov	r1, r3
 80084b2:	f000 ffd7 	bl	8009464 <__aeabi_d2f>
 80084b6:	ee07 0a10 	vmov	s14, r0
 80084ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80084be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80084c2:	eec8 7a27 	vdiv.f32	s15, s16, s15
 80084c6:	ee17 0a90 	vmov	r0, s15
 80084ca:	f000 fcdd 	bl	8008e88 <__aeabi_f2d>
 80084ce:	4602      	mov	r2, r0
 80084d0:	460b      	mov	r3, r1
 80084d2:	4610      	mov	r0, r2
 80084d4:	4619      	mov	r1, r3
 80084d6:	a30e      	add	r3, pc, #56	; (adr r3, 8008510 <VADC0_C0_2_IRQHandler+0x128>)
 80084d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084dc:	f000 fb74 	bl	8008bc8 <__aeabi_dsub>
 80084e0:	4602      	mov	r2, r0
 80084e2:	460b      	mov	r3, r1
void Adc_Measurement_Handler() {
#if(UC_SERIES != XMC11)
	result = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_A);
	float resistor = 10000 * (pow(2, 12) / result - 1);
	float beta = 601.3;
	float T = (((float) (beta * 298.15))
 80084e4:	4610      	mov	r0, r2
 80084e6:	4619      	mov	r1, r3
 80084e8:	f000 ffbc 	bl	8009464 <__aeabi_d2f>
 80084ec:	4603      	mov	r3, r0
 80084ee:	607b      	str	r3, [r7, #4]
	if (result >= 2048) {
		//   DIGITAL_IO_SetOutputLow(&DIGITAL_IO_0);
	} else {
		// DIGITAL_IO_SetOutputHigh(&DIGITAL_IO_0);
	}
}
 80084f0:	3710      	adds	r7, #16
 80084f2:	46bd      	mov	sp, r7
 80084f4:	ecbd 8b02 	vpop	{d8}
 80084f8:	bd80      	pop	{r7, pc}
 80084fa:	bf00      	nop
 80084fc:	f3af 8000 	nop.w
 8008500:	00000000 	.word	0x00000000
 8008504:	40c38800 	.word	0x40c38800
 8008508:	66666666 	.word	0x66666666
 800850c:	4072a266 	.word	0x4072a266
 8008510:	66666666 	.word	0x66666666
 8008514:	40711266 	.word	0x40711266
 8008518:	1fffd000 	.word	0x1fffd000
 800851c:	200097c8 	.word	0x200097c8
 8008520:	40b00000 	.word	0x40b00000
 8008524:	3ff00000 	.word	0x3ff00000
 8008528:	44165333 	.word	0x44165333
 800852c:	461c4000 	.word	0x461c4000

08008530 <EndofTransmit>:

uint8_t rec_data[10];

void EndofTransmit() //Callback function for "End of transmit" event.

{
 8008530:	b580      	push	{r7, lr}
 8008532:	af00      	add	r7, sp, #0
	UART_Receive(&UART_0, rec_data, sizeof(rec_data));
 8008534:	4804      	ldr	r0, [pc, #16]	; (8008548 <EndofTransmit+0x18>)
 8008536:	4905      	ldr	r1, [pc, #20]	; (800854c <EndofTransmit+0x1c>)
 8008538:	220a      	movs	r2, #10
 800853a:	f7fa f9c1 	bl	80028c0 <UART_Receive>
	DIGITAL_IO_SetOutputLow(&RS485_DIR); // ready to receive
 800853e:	4804      	ldr	r0, [pc, #16]	; (8008550 <EndofTransmit+0x20>)
 8008540:	f7ff fe6c 	bl	800821c <DIGITAL_IO_SetOutputLow>
}
 8008544:	bd80      	pop	{r7, pc}
 8008546:	bf00      	nop
 8008548:	1fffcc50 	.word	0x1fffcc50
 800854c:	200097cc 	.word	0x200097cc
 8008550:	0800a818 	.word	0x0800a818

08008554 <EndofReceive>:

void EndofReceive() //Callback function for "End of receive" event.

{
 8008554:	b580      	push	{r7, lr}
 8008556:	b082      	sub	sp, #8
 8008558:	af00      	add	r7, sp, #0
	DIGITAL_IO_SetOutputHigh(&RS485_DIR);
 800855a:	4809      	ldr	r0, [pc, #36]	; (8008580 <EndofReceive+0x2c>)
 800855c:	f7ff fe4e 	bl	80081fc <DIGITAL_IO_SetOutputHigh>
	char value = rec_data[0];
 8008560:	4b08      	ldr	r3, [pc, #32]	; (8008584 <EndofReceive+0x30>)
 8008562:	781b      	ldrb	r3, [r3, #0]
 8008564:	71fb      	strb	r3, [r7, #7]
	if (value = 'a') {
 8008566:	2361      	movs	r3, #97	; 0x61
 8008568:	71fb      	strb	r3, [r7, #7]
		DIGITAL_IO_SetOutputHigh(&IO_Bit2);
 800856a:	4807      	ldr	r0, [pc, #28]	; (8008588 <EndofReceive+0x34>)
 800856c:	f7ff fe46 	bl	80081fc <DIGITAL_IO_SetOutputHigh>
	}
	UART_Transmit(&UART_0, rec_data, sizeof(rec_data));
 8008570:	4806      	ldr	r0, [pc, #24]	; (800858c <EndofReceive+0x38>)
 8008572:	4904      	ldr	r1, [pc, #16]	; (8008584 <EndofReceive+0x30>)
 8008574:	220a      	movs	r2, #10
 8008576:	f7fa f987 	bl	8002888 <UART_Transmit>
}
 800857a:	3708      	adds	r7, #8
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}
 8008580:	0800a818 	.word	0x0800a818
 8008584:	200097cc 	.word	0x200097cc
 8008588:	0800a8a4 	.word	0x0800a8a4
 800858c:	1fffcc50 	.word	0x1fffcc50

08008590 <main>:
}

float temp;
int fan_flag = 0;
int io_status = -1;
int main(void) {
 8008590:	b580      	push	{r7, lr}
 8008592:	b082      	sub	sp, #8
 8008594:	af00      	add	r7, sp, #0
	DAVE_STATUS_t status;
	uint32_t pin_status;
	uint32_t delay_count;

	status = DAVE_Init(); /* Initialization of DAVE APPs  */
 8008596:	f7ff fbf7 	bl	8007d88 <DAVE_Init>
 800859a:	4603      	mov	r3, r0
 800859c:	71fb      	strb	r3, [r7, #7]

	if (status != DAVE_STATUS_SUCCESS) {
 800859e:	79fb      	ldrb	r3, [r7, #7]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d000      	beq.n	80085a6 <main+0x16>
		/* Placeholder for error handler code. The while loop below can be replaced with an user error handler. */
		XMC_DEBUG("DAVE APPs initialization failed\n");

		while (1U) {

		}
 80085a4:	e7fe      	b.n	80085a4 <main+0x14>
	}

	DIGITAL_IO_SetOutputHigh(&DIGITAL_IO_6); // Enable RS485 Pin
 80085a6:	4829      	ldr	r0, [pc, #164]	; (800864c <main+0xbc>)
 80085a8:	f7ff fe28 	bl	80081fc <DIGITAL_IO_SetOutputHigh>
	DIGITAL_IO_SetOutputHigh(&RS485_DIR); // Direction RS485 Pin set to High to indicate that MCU wants to send data
 80085ac:	4828      	ldr	r0, [pc, #160]	; (8008650 <main+0xc0>)
 80085ae:	f7ff fe25 	bl	80081fc <DIGITAL_IO_SetOutputHigh>
//UART_Transmit(&UART_0, data, sizeof(data) - 1); //Transmit the string "Infineon Technologies".

//DIGITAL_IO_SetOutputHigh(&DIGITAL_IO_4); // Power up Main heating
//DIGITAL_IO_SetOutputHigh(&DIGITAL_IO_5); // Power up aux heating

	DIGITAL_IO_SetOutputLow(&IO_Bit0_DIR); // Set Input enable for IO Pin 0
 80085b2:	4828      	ldr	r0, [pc, #160]	; (8008654 <main+0xc4>)
 80085b4:	f7ff fe32 	bl	800821c <DIGITAL_IO_SetOutputLow>
	DIGITAL_IO_SetOutputLow(&IO_Bit1_DIR); // Set Input enable for IO Pin 1
 80085b8:	4827      	ldr	r0, [pc, #156]	; (8008658 <main+0xc8>)
 80085ba:	f7ff fe2f 	bl	800821c <DIGITAL_IO_SetOutputLow>
	DIGITAL_IO_SetOutputHigh(&IO_Bit3_DIR); // Set Input enable for IO Pin 3
 80085be:	4827      	ldr	r0, [pc, #156]	; (800865c <main+0xcc>)
 80085c0:	f7ff fe1c 	bl	80081fc <DIGITAL_IO_SetOutputHigh>
	DIGITAL_IO_SetOutputHigh(&IO_Bit2_DIR); // Set Input enable for IO Pin 2
 80085c4:	4826      	ldr	r0, [pc, #152]	; (8008660 <main+0xd0>)
 80085c6:	f7ff fe19 	bl	80081fc <DIGITAL_IO_SetOutputHigh>
//DIGITAL_IO_SetOutputHigh(&DIGITAL_IO_23);// Set Output Pin 0 high
//DIGITAL_IO_SetOutputHigh(&DIGITAL_IO_22); // Set Output Pin 1 high
//DIGITAL_IO_SetOutputHigh(&DIGITAL_IO_21); // Set Output Pin 2 high
//DIGITAL_IO_SetOutputHigh(&DIGITAL_IO_24); // Set Output Pin 3 high

	delay_count = 0;
 80085ca:	2300      	movs	r3, #0
 80085cc:	603b      	str	r3, [r7, #0]

//ACIM_FREQ_CTRL_MotorStart(&ACIM_FREQ_CTRL_1);

	/* Placeholder for user application code. The while loop below can be replaced with user application code. */

	DIGITAL_IO_SetOutputHigh(&Disable_Gate_Driver_M1_M2); // Set Output Pin 0 high
 80085ce:	4825      	ldr	r0, [pc, #148]	; (8008664 <main+0xd4>)
 80085d0:	f7ff fe14 	bl	80081fc <DIGITAL_IO_SetOutputHigh>
	DIGITAL_IO_SetOutputHigh(&Disable_Gate_Driver_M3); // Set Output Pin 0 high
 80085d4:	4824      	ldr	r0, [pc, #144]	; (8008668 <main+0xd8>)
 80085d6:	f7ff fe11 	bl	80081fc <DIGITAL_IO_SetOutputHigh>

	XMC_CCU4_SLICE_EnableEvent(SLICE0_PTR, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 80085da:	4824      	ldr	r0, [pc, #144]	; (800866c <main+0xdc>)
 80085dc:	2100      	movs	r1, #0
 80085de:	f7ff fe6b 	bl	80082b8 <XMC_CCU4_SLICE_EnableEvent>
	/* Connect compare match event to SR0 */
	XMC_CCU4_SLICE_SetInterruptNode(SLICE0_PTR,
 80085e2:	4822      	ldr	r0, [pc, #136]	; (800866c <main+0xdc>)
 80085e4:	2100      	movs	r1, #0
 80085e6:	2200      	movs	r2, #0
 80085e8:	f7f8 fe9e 	bl	8001328 <XMC_CCU4_SLICE_SetInterruptNode>
			XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH, XMC_CCU4_SLICE_SR_ID_0);

	/* Set NVIC priority */
	NVIC_SetPriority(CCU42_0_IRQn, 3U);
 80085ec:	2034      	movs	r0, #52	; 0x34
 80085ee:	2103      	movs	r1, #3
 80085f0:	f7ff fd92 	bl	8008118 <__NVIC_SetPriority>
	/* Enable IRQ */
	NVIC_EnableIRQ(CCU42_0_IRQn);
 80085f4:	2034      	movs	r0, #52	; 0x34
 80085f6:	f7ff fd73 	bl	80080e0 <__NVIC_EnableIRQ>
		// DIGITAL_IO_ToggleOutput(&DIGITAL_IO_0);
		// for(delay_count = 0;delay_count<0xfffff;delay_count++);
		//    delay_count = delay_count + 10;
		// pin_status = DIGITAL_IO_GetInput(&DIGITAL_IO_23);

		if (((!fan_flag) && DIGITAL_IO_GetInput(&IO_Bit0))
 80085fa:	4b1d      	ldr	r3, [pc, #116]	; (8008670 <main+0xe0>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d105      	bne.n	800860e <main+0x7e>
 8008602:	481c      	ldr	r0, [pc, #112]	; (8008674 <main+0xe4>)
 8008604:	f7ff fe2a 	bl	800825c <DIGITAL_IO_GetInput>
 8008608:	4603      	mov	r3, r0
 800860a:	2b00      	cmp	r3, #0
 800860c:	d105      	bne.n	800861a <main+0x8a>
				|| (DIGITAL_IO_GetInput(&HS_Overtemp))) {
 800860e:	481a      	ldr	r0, [pc, #104]	; (8008678 <main+0xe8>)
 8008610:	f7ff fe24 	bl	800825c <DIGITAL_IO_GetInput>
 8008614:	4603      	mov	r3, r0
 8008616:	2b00      	cmp	r3, #0
 8008618:	d006      	beq.n	8008628 <main+0x98>
			fan_flag = 1;
 800861a:	4b15      	ldr	r3, [pc, #84]	; (8008670 <main+0xe0>)
 800861c:	2201      	movs	r2, #1
 800861e:	601a      	str	r2, [r3, #0]
			DIGITAL_IO_SetOutputHigh(&Cooling_FAN); // Power up cooling fan
 8008620:	4816      	ldr	r0, [pc, #88]	; (800867c <main+0xec>)
 8008622:	f7ff fdeb 	bl	80081fc <DIGITAL_IO_SetOutputHigh>
 8008626:	e00f      	b.n	8008648 <main+0xb8>
		}

		else if (fan_flag && DIGITAL_IO_GetInput(&IO_Bit1)) {
 8008628:	4b11      	ldr	r3, [pc, #68]	; (8008670 <main+0xe0>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d00b      	beq.n	8008648 <main+0xb8>
 8008630:	4813      	ldr	r0, [pc, #76]	; (8008680 <main+0xf0>)
 8008632:	f7ff fe13 	bl	800825c <DIGITAL_IO_GetInput>
 8008636:	4603      	mov	r3, r0
 8008638:	2b00      	cmp	r3, #0
 800863a:	d005      	beq.n	8008648 <main+0xb8>
			fan_flag = 0;
 800863c:	4b0c      	ldr	r3, [pc, #48]	; (8008670 <main+0xe0>)
 800863e:	2200      	movs	r2, #0
 8008640:	601a      	str	r2, [r3, #0]
			DIGITAL_IO_SetOutputLow(&Cooling_FAN); // Power down cooling fan
 8008642:	480e      	ldr	r0, [pc, #56]	; (800867c <main+0xec>)
 8008644:	f7ff fdea 	bl	800821c <DIGITAL_IO_SetOutputLow>

		//ADC_MEASUREMENT_StartConversion(&ADC_MEASUREMENT_0);

		//temp = calculate_T_Amb();

	}
 8008648:	e7d7      	b.n	80085fa <main+0x6a>
 800864a:	bf00      	nop
 800864c:	0800a778 	.word	0x0800a778
 8008650:	0800a818 	.word	0x0800a818
 8008654:	0800a854 	.word	0x0800a854
 8008658:	0800a840 	.word	0x0800a840
 800865c:	0800a87c 	.word	0x0800a87c
 8008660:	0800a890 	.word	0x0800a890
 8008664:	0800a8f4 	.word	0x0800a8f4
 8008668:	0800a714 	.word	0x0800a714
 800866c:	40014100 	.word	0x40014100
 8008670:	20009308 	.word	0x20009308
 8008674:	0800a8cc 	.word	0x0800a8cc
 8008678:	0800a868 	.word	0x0800a868
 800867c:	0800a700 	.word	0x0800a700
 8008680:	0800a8b8 	.word	0x0800a8b8

08008684 <log>:
 8008684:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008688:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 800877c <log+0xf8>
 800868c:	b08b      	sub	sp, #44	; 0x2c
 800868e:	4606      	mov	r6, r0
 8008690:	460f      	mov	r7, r1
 8008692:	f000 f879 	bl	8008788 <__ieee754_log>
 8008696:	f998 3000 	ldrsb.w	r3, [r8]
 800869a:	3301      	adds	r3, #1
 800869c:	4604      	mov	r4, r0
 800869e:	460d      	mov	r5, r1
 80086a0:	d00b      	beq.n	80086ba <log+0x36>
 80086a2:	4630      	mov	r0, r6
 80086a4:	4639      	mov	r1, r7
 80086a6:	f000 fa57 	bl	8008b58 <__fpclassifyd>
 80086aa:	b130      	cbz	r0, 80086ba <log+0x36>
 80086ac:	4630      	mov	r0, r6
 80086ae:	4639      	mov	r1, r7
 80086b0:	2200      	movs	r2, #0
 80086b2:	2300      	movs	r3, #0
 80086b4:	f000 fecc 	bl	8009450 <__aeabi_dcmpgt>
 80086b8:	b120      	cbz	r0, 80086c4 <log+0x40>
 80086ba:	4620      	mov	r0, r4
 80086bc:	4629      	mov	r1, r5
 80086be:	b00b      	add	sp, #44	; 0x2c
 80086c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80086c4:	f898 4000 	ldrb.w	r4, [r8]
 80086c8:	4b29      	ldr	r3, [pc, #164]	; (8008770 <log+0xec>)
 80086ca:	9008      	str	r0, [sp, #32]
 80086cc:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80086d0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80086d4:	9301      	str	r3, [sp, #4]
 80086d6:	b99c      	cbnz	r4, 8008700 <log+0x7c>
 80086d8:	4d26      	ldr	r5, [pc, #152]	; (8008774 <log+0xf0>)
 80086da:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
 80086de:	4630      	mov	r0, r6
 80086e0:	4639      	mov	r1, r7
 80086e2:	2200      	movs	r2, #0
 80086e4:	2300      	movs	r3, #0
 80086e6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80086ea:	f000 fe89 	bl	8009400 <__aeabi_dcmpeq>
 80086ee:	2800      	cmp	r0, #0
 80086f0:	d135      	bne.n	800875e <log+0xda>
 80086f2:	2301      	movs	r3, #1
 80086f4:	9300      	str	r3, [sp, #0]
 80086f6:	4668      	mov	r0, sp
 80086f8:	f000 fa5a 	bl	8008bb0 <matherr>
 80086fc:	b9a8      	cbnz	r0, 800872a <log+0xa6>
 80086fe:	e010      	b.n	8008722 <log+0x9e>
 8008700:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8008780 <log+0xfc>
 8008704:	f04f 0800 	mov.w	r8, #0
 8008708:	4630      	mov	r0, r6
 800870a:	4639      	mov	r1, r7
 800870c:	2200      	movs	r2, #0
 800870e:	2300      	movs	r3, #0
 8008710:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8008714:	f000 fe74 	bl	8009400 <__aeabi_dcmpeq>
 8008718:	b998      	cbnz	r0, 8008742 <log+0xbe>
 800871a:	2301      	movs	r3, #1
 800871c:	2c02      	cmp	r4, #2
 800871e:	9300      	str	r3, [sp, #0]
 8008720:	d1e9      	bne.n	80086f6 <log+0x72>
 8008722:	f001 f9c1 	bl	8009aa8 <__errno>
 8008726:	2321      	movs	r3, #33	; 0x21
 8008728:	6003      	str	r3, [r0, #0]
 800872a:	4813      	ldr	r0, [pc, #76]	; (8008778 <log+0xf4>)
 800872c:	f000 fa42 	bl	8008bb4 <nan>
 8008730:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008734:	9b08      	ldr	r3, [sp, #32]
 8008736:	b9ab      	cbnz	r3, 8008764 <log+0xe0>
 8008738:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800873c:	b00b      	add	sp, #44	; 0x2c
 800873e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008742:	2302      	movs	r3, #2
 8008744:	429c      	cmp	r4, r3
 8008746:	9300      	str	r3, [sp, #0]
 8008748:	d004      	beq.n	8008754 <log+0xd0>
 800874a:	4668      	mov	r0, sp
 800874c:	f000 fa30 	bl	8008bb0 <matherr>
 8008750:	2800      	cmp	r0, #0
 8008752:	d1ef      	bne.n	8008734 <log+0xb0>
 8008754:	f001 f9a8 	bl	8009aa8 <__errno>
 8008758:	2322      	movs	r3, #34	; 0x22
 800875a:	6003      	str	r3, [r0, #0]
 800875c:	e7ea      	b.n	8008734 <log+0xb0>
 800875e:	2302      	movs	r3, #2
 8008760:	9300      	str	r3, [sp, #0]
 8008762:	e7f2      	b.n	800874a <log+0xc6>
 8008764:	f001 f9a0 	bl	8009aa8 <__errno>
 8008768:	9b08      	ldr	r3, [sp, #32]
 800876a:	6003      	str	r3, [r0, #0]
 800876c:	e7e4      	b.n	8008738 <log+0xb4>
 800876e:	bf00      	nop
 8008770:	0800ad34 	.word	0x0800ad34
 8008774:	c7efffff 	.word	0xc7efffff
 8008778:	0800ad38 	.word	0x0800ad38
 800877c:	20009254 	.word	0x20009254
 8008780:	fff00000 	.word	0xfff00000
 8008784:	00000000 	.word	0x00000000

08008788 <__ieee754_log>:
 8008788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800878c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8008790:	b085      	sub	sp, #20
 8008792:	4606      	mov	r6, r0
 8008794:	460f      	mov	r7, r1
 8008796:	460b      	mov	r3, r1
 8008798:	da5a      	bge.n	8008850 <__ieee754_log+0xc8>
 800879a:	4602      	mov	r2, r0
 800879c:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 80087a0:	4322      	orrs	r2, r4
 80087a2:	f000 80f6 	beq.w	8008992 <__ieee754_log+0x20a>
 80087a6:	2900      	cmp	r1, #0
 80087a8:	f2c0 8172 	blt.w	8008a90 <__ieee754_log+0x308>
 80087ac:	2200      	movs	r2, #0
 80087ae:	4bde      	ldr	r3, [pc, #888]	; (8008b28 <__ieee754_log+0x3a0>)
 80087b0:	f000 fbbe 	bl	8008f30 <__aeabi_dmul>
 80087b4:	460b      	mov	r3, r1
 80087b6:	460f      	mov	r7, r1
 80087b8:	49dc      	ldr	r1, [pc, #880]	; (8008b2c <__ieee754_log+0x3a4>)
 80087ba:	428b      	cmp	r3, r1
 80087bc:	4606      	mov	r6, r0
 80087be:	f06f 0235 	mvn.w	r2, #53	; 0x35
 80087c2:	dc4a      	bgt.n	800885a <__ieee754_log+0xd2>
 80087c4:	f3c3 0513 	ubfx	r5, r3, #0, #20
 80087c8:	f505 2415 	add.w	r4, r5, #610304	; 0x95000
 80087cc:	f604 7464 	addw	r4, r4, #3940	; 0xf64
 80087d0:	f404 1e80 	and.w	lr, r4, #1048576	; 0x100000
 80087d4:	f08e 517f 	eor.w	r1, lr, #1069547520	; 0x3fc00000
 80087d8:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 80087dc:	151b      	asrs	r3, r3, #20
 80087de:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80087e2:	ea41 0705 	orr.w	r7, r1, r5
 80087e6:	189c      	adds	r4, r3, r2
 80087e8:	4630      	mov	r0, r6
 80087ea:	2200      	movs	r2, #0
 80087ec:	4bd0      	ldr	r3, [pc, #832]	; (8008b30 <__ieee754_log+0x3a8>)
 80087ee:	4639      	mov	r1, r7
 80087f0:	eb04 541e 	add.w	r4, r4, lr, lsr #20
 80087f4:	f000 f9e8 	bl	8008bc8 <__aeabi_dsub>
 80087f8:	1cab      	adds	r3, r5, #2
 80087fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80087fe:	2b02      	cmp	r3, #2
 8008800:	4682      	mov	sl, r0
 8008802:	468b      	mov	fp, r1
 8008804:	f04f 0200 	mov.w	r2, #0
 8008808:	dc30      	bgt.n	800886c <__ieee754_log+0xe4>
 800880a:	2300      	movs	r3, #0
 800880c:	f000 fdf8 	bl	8009400 <__aeabi_dcmpeq>
 8008810:	2800      	cmp	r0, #0
 8008812:	f000 80c7 	beq.w	80089a4 <__ieee754_log+0x21c>
 8008816:	2c00      	cmp	r4, #0
 8008818:	f000 8143 	beq.w	8008aa2 <__ieee754_log+0x31a>
 800881c:	4620      	mov	r0, r4
 800881e:	f000 fb21 	bl	8008e64 <__aeabi_i2d>
 8008822:	a3ad      	add	r3, pc, #692	; (adr r3, 8008ad8 <__ieee754_log+0x350>)
 8008824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008828:	4606      	mov	r6, r0
 800882a:	460f      	mov	r7, r1
 800882c:	f000 fb80 	bl	8008f30 <__aeabi_dmul>
 8008830:	a3ab      	add	r3, pc, #684	; (adr r3, 8008ae0 <__ieee754_log+0x358>)
 8008832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008836:	4604      	mov	r4, r0
 8008838:	460d      	mov	r5, r1
 800883a:	4630      	mov	r0, r6
 800883c:	4639      	mov	r1, r7
 800883e:	f000 fb77 	bl	8008f30 <__aeabi_dmul>
 8008842:	4602      	mov	r2, r0
 8008844:	460b      	mov	r3, r1
 8008846:	4620      	mov	r0, r4
 8008848:	4629      	mov	r1, r5
 800884a:	f000 f9bf 	bl	8008bcc <__adddf3>
 800884e:	e00a      	b.n	8008866 <__ieee754_log+0xde>
 8008850:	49b6      	ldr	r1, [pc, #728]	; (8008b2c <__ieee754_log+0x3a4>)
 8008852:	428b      	cmp	r3, r1
 8008854:	f04f 0200 	mov.w	r2, #0
 8008858:	ddb4      	ble.n	80087c4 <__ieee754_log+0x3c>
 800885a:	4630      	mov	r0, r6
 800885c:	4639      	mov	r1, r7
 800885e:	4632      	mov	r2, r6
 8008860:	463b      	mov	r3, r7
 8008862:	f000 f9b3 	bl	8008bcc <__adddf3>
 8008866:	b005      	add	sp, #20
 8008868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800886c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008870:	f000 f9ac 	bl	8008bcc <__adddf3>
 8008874:	4602      	mov	r2, r0
 8008876:	460b      	mov	r3, r1
 8008878:	4650      	mov	r0, sl
 800887a:	4659      	mov	r1, fp
 800887c:	f000 fc82 	bl	8009184 <__aeabi_ddiv>
 8008880:	4606      	mov	r6, r0
 8008882:	460f      	mov	r7, r1
 8008884:	4620      	mov	r0, r4
 8008886:	e9cd 6700 	strd	r6, r7, [sp]
 800888a:	f000 faeb 	bl	8008e64 <__aeabi_i2d>
 800888e:	4632      	mov	r2, r6
 8008890:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008894:	463b      	mov	r3, r7
 8008896:	4630      	mov	r0, r6
 8008898:	4639      	mov	r1, r7
 800889a:	f000 fb49 	bl	8008f30 <__aeabi_dmul>
 800889e:	4602      	mov	r2, r0
 80088a0:	460b      	mov	r3, r1
 80088a2:	4680      	mov	r8, r0
 80088a4:	4689      	mov	r9, r1
 80088a6:	f000 fb43 	bl	8008f30 <__aeabi_dmul>
 80088aa:	a38f      	add	r3, pc, #572	; (adr r3, 8008ae8 <__ieee754_log+0x360>)
 80088ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b0:	4606      	mov	r6, r0
 80088b2:	460f      	mov	r7, r1
 80088b4:	f000 fb3c 	bl	8008f30 <__aeabi_dmul>
 80088b8:	a38d      	add	r3, pc, #564	; (adr r3, 8008af0 <__ieee754_log+0x368>)
 80088ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088be:	f000 f985 	bl	8008bcc <__adddf3>
 80088c2:	4632      	mov	r2, r6
 80088c4:	463b      	mov	r3, r7
 80088c6:	f000 fb33 	bl	8008f30 <__aeabi_dmul>
 80088ca:	a38b      	add	r3, pc, #556	; (adr r3, 8008af8 <__ieee754_log+0x370>)
 80088cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d0:	f000 f97c 	bl	8008bcc <__adddf3>
 80088d4:	4632      	mov	r2, r6
 80088d6:	463b      	mov	r3, r7
 80088d8:	f000 fb2a 	bl	8008f30 <__aeabi_dmul>
 80088dc:	a388      	add	r3, pc, #544	; (adr r3, 8008b00 <__ieee754_log+0x378>)
 80088de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088e2:	f000 f973 	bl	8008bcc <__adddf3>
 80088e6:	4642      	mov	r2, r8
 80088e8:	464b      	mov	r3, r9
 80088ea:	f000 fb21 	bl	8008f30 <__aeabi_dmul>
 80088ee:	a386      	add	r3, pc, #536	; (adr r3, 8008b08 <__ieee754_log+0x380>)
 80088f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f4:	4680      	mov	r8, r0
 80088f6:	4689      	mov	r9, r1
 80088f8:	4630      	mov	r0, r6
 80088fa:	4639      	mov	r1, r7
 80088fc:	f000 fb18 	bl	8008f30 <__aeabi_dmul>
 8008900:	a383      	add	r3, pc, #524	; (adr r3, 8008b10 <__ieee754_log+0x388>)
 8008902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008906:	f000 f961 	bl	8008bcc <__adddf3>
 800890a:	4632      	mov	r2, r6
 800890c:	463b      	mov	r3, r7
 800890e:	f000 fb0f 	bl	8008f30 <__aeabi_dmul>
 8008912:	a381      	add	r3, pc, #516	; (adr r3, 8008b18 <__ieee754_log+0x390>)
 8008914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008918:	f000 f958 	bl	8008bcc <__adddf3>
 800891c:	4632      	mov	r2, r6
 800891e:	463b      	mov	r3, r7
 8008920:	f000 fb06 	bl	8008f30 <__aeabi_dmul>
 8008924:	460b      	mov	r3, r1
 8008926:	4602      	mov	r2, r0
 8008928:	4649      	mov	r1, r9
 800892a:	4640      	mov	r0, r8
 800892c:	f000 f94e 	bl	8008bcc <__adddf3>
 8008930:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8008934:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8008938:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800893c:	3551      	adds	r5, #81	; 0x51
 800893e:	431d      	orrs	r5, r3
 8008940:	2d00      	cmp	r5, #0
 8008942:	4606      	mov	r6, r0
 8008944:	460f      	mov	r7, r1
 8008946:	dd53      	ble.n	80089f0 <__ieee754_log+0x268>
 8008948:	2200      	movs	r2, #0
 800894a:	4b7a      	ldr	r3, [pc, #488]	; (8008b34 <__ieee754_log+0x3ac>)
 800894c:	4650      	mov	r0, sl
 800894e:	4659      	mov	r1, fp
 8008950:	f000 faee 	bl	8008f30 <__aeabi_dmul>
 8008954:	4652      	mov	r2, sl
 8008956:	465b      	mov	r3, fp
 8008958:	f000 faea 	bl	8008f30 <__aeabi_dmul>
 800895c:	4680      	mov	r8, r0
 800895e:	4689      	mov	r9, r1
 8008960:	2c00      	cmp	r4, #0
 8008962:	d160      	bne.n	8008a26 <__ieee754_log+0x29e>
 8008964:	4632      	mov	r2, r6
 8008966:	463b      	mov	r3, r7
 8008968:	f000 f930 	bl	8008bcc <__adddf3>
 800896c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008970:	f000 fade 	bl	8008f30 <__aeabi_dmul>
 8008974:	4602      	mov	r2, r0
 8008976:	460b      	mov	r3, r1
 8008978:	4640      	mov	r0, r8
 800897a:	4649      	mov	r1, r9
 800897c:	f000 f924 	bl	8008bc8 <__aeabi_dsub>
 8008980:	4602      	mov	r2, r0
 8008982:	460b      	mov	r3, r1
 8008984:	4650      	mov	r0, sl
 8008986:	4659      	mov	r1, fp
 8008988:	f000 f91e 	bl	8008bc8 <__aeabi_dsub>
 800898c:	b005      	add	sp, #20
 800898e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008992:	2200      	movs	r2, #0
 8008994:	2300      	movs	r3, #0
 8008996:	2000      	movs	r0, #0
 8008998:	4967      	ldr	r1, [pc, #412]	; (8008b38 <__ieee754_log+0x3b0>)
 800899a:	f000 fbf3 	bl	8009184 <__aeabi_ddiv>
 800899e:	b005      	add	sp, #20
 80089a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089a4:	4652      	mov	r2, sl
 80089a6:	465b      	mov	r3, fp
 80089a8:	4650      	mov	r0, sl
 80089aa:	4659      	mov	r1, fp
 80089ac:	f000 fac0 	bl	8008f30 <__aeabi_dmul>
 80089b0:	a35b      	add	r3, pc, #364	; (adr r3, 8008b20 <__ieee754_log+0x398>)
 80089b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b6:	4606      	mov	r6, r0
 80089b8:	460f      	mov	r7, r1
 80089ba:	4650      	mov	r0, sl
 80089bc:	4659      	mov	r1, fp
 80089be:	f000 fab7 	bl	8008f30 <__aeabi_dmul>
 80089c2:	4602      	mov	r2, r0
 80089c4:	460b      	mov	r3, r1
 80089c6:	2000      	movs	r0, #0
 80089c8:	495a      	ldr	r1, [pc, #360]	; (8008b34 <__ieee754_log+0x3ac>)
 80089ca:	f000 f8fd 	bl	8008bc8 <__aeabi_dsub>
 80089ce:	4602      	mov	r2, r0
 80089d0:	460b      	mov	r3, r1
 80089d2:	4630      	mov	r0, r6
 80089d4:	4639      	mov	r1, r7
 80089d6:	f000 faab 	bl	8008f30 <__aeabi_dmul>
 80089da:	4606      	mov	r6, r0
 80089dc:	460f      	mov	r7, r1
 80089de:	2c00      	cmp	r4, #0
 80089e0:	d162      	bne.n	8008aa8 <__ieee754_log+0x320>
 80089e2:	4650      	mov	r0, sl
 80089e4:	4659      	mov	r1, fp
 80089e6:	4632      	mov	r2, r6
 80089e8:	463b      	mov	r3, r7
 80089ea:	f000 f8ed 	bl	8008bc8 <__aeabi_dsub>
 80089ee:	e73a      	b.n	8008866 <__ieee754_log+0xde>
 80089f0:	2c00      	cmp	r4, #0
 80089f2:	f000 80a3 	beq.w	8008b3c <__ieee754_log+0x3b4>
 80089f6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80089fa:	a337      	add	r3, pc, #220	; (adr r3, 8008ad8 <__ieee754_log+0x350>)
 80089fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a00:	4640      	mov	r0, r8
 8008a02:	4649      	mov	r1, r9
 8008a04:	f000 fa94 	bl	8008f30 <__aeabi_dmul>
 8008a08:	4632      	mov	r2, r6
 8008a0a:	463b      	mov	r3, r7
 8008a0c:	4604      	mov	r4, r0
 8008a0e:	460d      	mov	r5, r1
 8008a10:	4650      	mov	r0, sl
 8008a12:	4659      	mov	r1, fp
 8008a14:	f000 f8d8 	bl	8008bc8 <__aeabi_dsub>
 8008a18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a1c:	f000 fa88 	bl	8008f30 <__aeabi_dmul>
 8008a20:	4606      	mov	r6, r0
 8008a22:	460f      	mov	r7, r1
 8008a24:	e04c      	b.n	8008ac0 <__ieee754_log+0x338>
 8008a26:	a32c      	add	r3, pc, #176	; (adr r3, 8008ad8 <__ieee754_log+0x350>)
 8008a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a30:	f000 fa7e 	bl	8008f30 <__aeabi_dmul>
 8008a34:	4632      	mov	r2, r6
 8008a36:	463b      	mov	r3, r7
 8008a38:	4604      	mov	r4, r0
 8008a3a:	460d      	mov	r5, r1
 8008a3c:	4640      	mov	r0, r8
 8008a3e:	4649      	mov	r1, r9
 8008a40:	f000 f8c4 	bl	8008bcc <__adddf3>
 8008a44:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a48:	f000 fa72 	bl	8008f30 <__aeabi_dmul>
 8008a4c:	a324      	add	r3, pc, #144	; (adr r3, 8008ae0 <__ieee754_log+0x358>)
 8008a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a52:	4606      	mov	r6, r0
 8008a54:	460f      	mov	r7, r1
 8008a56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a5a:	f000 fa69 	bl	8008f30 <__aeabi_dmul>
 8008a5e:	4602      	mov	r2, r0
 8008a60:	460b      	mov	r3, r1
 8008a62:	4630      	mov	r0, r6
 8008a64:	4639      	mov	r1, r7
 8008a66:	f000 f8b1 	bl	8008bcc <__adddf3>
 8008a6a:	4602      	mov	r2, r0
 8008a6c:	460b      	mov	r3, r1
 8008a6e:	4640      	mov	r0, r8
 8008a70:	4649      	mov	r1, r9
 8008a72:	f000 f8a9 	bl	8008bc8 <__aeabi_dsub>
 8008a76:	4652      	mov	r2, sl
 8008a78:	465b      	mov	r3, fp
 8008a7a:	f000 f8a5 	bl	8008bc8 <__aeabi_dsub>
 8008a7e:	4602      	mov	r2, r0
 8008a80:	460b      	mov	r3, r1
 8008a82:	4620      	mov	r0, r4
 8008a84:	4629      	mov	r1, r5
 8008a86:	f000 f89f 	bl	8008bc8 <__aeabi_dsub>
 8008a8a:	b005      	add	sp, #20
 8008a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a90:	4602      	mov	r2, r0
 8008a92:	460b      	mov	r3, r1
 8008a94:	f000 f898 	bl	8008bc8 <__aeabi_dsub>
 8008a98:	2200      	movs	r2, #0
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	f000 fb72 	bl	8009184 <__aeabi_ddiv>
 8008aa0:	e6e1      	b.n	8008866 <__ieee754_log+0xde>
 8008aa2:	2000      	movs	r0, #0
 8008aa4:	2100      	movs	r1, #0
 8008aa6:	e6de      	b.n	8008866 <__ieee754_log+0xde>
 8008aa8:	4620      	mov	r0, r4
 8008aaa:	f000 f9db 	bl	8008e64 <__aeabi_i2d>
 8008aae:	a30a      	add	r3, pc, #40	; (adr r3, 8008ad8 <__ieee754_log+0x350>)
 8008ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab4:	4680      	mov	r8, r0
 8008ab6:	4689      	mov	r9, r1
 8008ab8:	f000 fa3a 	bl	8008f30 <__aeabi_dmul>
 8008abc:	4604      	mov	r4, r0
 8008abe:	460d      	mov	r5, r1
 8008ac0:	a307      	add	r3, pc, #28	; (adr r3, 8008ae0 <__ieee754_log+0x358>)
 8008ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac6:	4640      	mov	r0, r8
 8008ac8:	4649      	mov	r1, r9
 8008aca:	f000 fa31 	bl	8008f30 <__aeabi_dmul>
 8008ace:	4602      	mov	r2, r0
 8008ad0:	460b      	mov	r3, r1
 8008ad2:	4630      	mov	r0, r6
 8008ad4:	4639      	mov	r1, r7
 8008ad6:	e7cc      	b.n	8008a72 <__ieee754_log+0x2ea>
 8008ad8:	fee00000 	.word	0xfee00000
 8008adc:	3fe62e42 	.word	0x3fe62e42
 8008ae0:	35793c76 	.word	0x35793c76
 8008ae4:	3dea39ef 	.word	0x3dea39ef
 8008ae8:	df3e5244 	.word	0xdf3e5244
 8008aec:	3fc2f112 	.word	0x3fc2f112
 8008af0:	96cb03de 	.word	0x96cb03de
 8008af4:	3fc74664 	.word	0x3fc74664
 8008af8:	94229359 	.word	0x94229359
 8008afc:	3fd24924 	.word	0x3fd24924
 8008b00:	55555593 	.word	0x55555593
 8008b04:	3fe55555 	.word	0x3fe55555
 8008b08:	d078c69f 	.word	0xd078c69f
 8008b0c:	3fc39a09 	.word	0x3fc39a09
 8008b10:	1d8e78af 	.word	0x1d8e78af
 8008b14:	3fcc71c5 	.word	0x3fcc71c5
 8008b18:	9997fa04 	.word	0x9997fa04
 8008b1c:	3fd99999 	.word	0x3fd99999
 8008b20:	55555555 	.word	0x55555555
 8008b24:	3fd55555 	.word	0x3fd55555
 8008b28:	43500000 	.word	0x43500000
 8008b2c:	7fefffff 	.word	0x7fefffff
 8008b30:	3ff00000 	.word	0x3ff00000
 8008b34:	3fe00000 	.word	0x3fe00000
 8008b38:	c3500000 	.word	0xc3500000
 8008b3c:	4602      	mov	r2, r0
 8008b3e:	460b      	mov	r3, r1
 8008b40:	4650      	mov	r0, sl
 8008b42:	4659      	mov	r1, fp
 8008b44:	f000 f840 	bl	8008bc8 <__aeabi_dsub>
 8008b48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b4c:	f000 f9f0 	bl	8008f30 <__aeabi_dmul>
 8008b50:	e716      	b.n	8008980 <__ieee754_log+0x1f8>
 8008b52:	bf00      	nop
 8008b54:	f3af 8000 	nop.w

08008b58 <__fpclassifyd>:
 8008b58:	b410      	push	{r4}
 8008b5a:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 8008b5e:	460b      	mov	r3, r1
 8008b60:	d008      	beq.n	8008b74 <__fpclassifyd+0x1c>
 8008b62:	4a11      	ldr	r2, [pc, #68]	; (8008ba8 <__fpclassifyd+0x50>)
 8008b64:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008b68:	4291      	cmp	r1, r2
 8008b6a:	d808      	bhi.n	8008b7e <__fpclassifyd+0x26>
 8008b6c:	2004      	movs	r0, #4
 8008b6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b72:	4770      	bx	lr
 8008b74:	b918      	cbnz	r0, 8008b7e <__fpclassifyd+0x26>
 8008b76:	2002      	movs	r0, #2
 8008b78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b7c:	4770      	bx	lr
 8008b7e:	f103 43ff 	add.w	r3, r3, #2139095040	; 0x7f800000
 8008b82:	4a09      	ldr	r2, [pc, #36]	; (8008ba8 <__fpclassifyd+0x50>)
 8008b84:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d9ef      	bls.n	8008b6c <__fpclassifyd+0x14>
 8008b8c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008b90:	d201      	bcs.n	8008b96 <__fpclassifyd+0x3e>
 8008b92:	2003      	movs	r0, #3
 8008b94:	e7eb      	b.n	8008b6e <__fpclassifyd+0x16>
 8008b96:	4b05      	ldr	r3, [pc, #20]	; (8008bac <__fpclassifyd+0x54>)
 8008b98:	429c      	cmp	r4, r3
 8008b9a:	d001      	beq.n	8008ba0 <__fpclassifyd+0x48>
 8008b9c:	2000      	movs	r0, #0
 8008b9e:	e7e6      	b.n	8008b6e <__fpclassifyd+0x16>
 8008ba0:	fab0 f080 	clz	r0, r0
 8008ba4:	0940      	lsrs	r0, r0, #5
 8008ba6:	e7e2      	b.n	8008b6e <__fpclassifyd+0x16>
 8008ba8:	7fdfffff 	.word	0x7fdfffff
 8008bac:	7ff00000 	.word	0x7ff00000

08008bb0 <matherr>:
 8008bb0:	2000      	movs	r0, #0
 8008bb2:	4770      	bx	lr

08008bb4 <nan>:
 8008bb4:	2000      	movs	r0, #0
 8008bb6:	4901      	ldr	r1, [pc, #4]	; (8008bbc <nan+0x8>)
 8008bb8:	4770      	bx	lr
 8008bba:	bf00      	nop
 8008bbc:	7ff80000 	.word	0x7ff80000

08008bc0 <__aeabi_drsub>:
 8008bc0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8008bc4:	e002      	b.n	8008bcc <__adddf3>
 8008bc6:	bf00      	nop

08008bc8 <__aeabi_dsub>:
 8008bc8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08008bcc <__adddf3>:
 8008bcc:	b530      	push	{r4, r5, lr}
 8008bce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008bd2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008bd6:	ea94 0f05 	teq	r4, r5
 8008bda:	bf08      	it	eq
 8008bdc:	ea90 0f02 	teqeq	r0, r2
 8008be0:	bf1f      	itttt	ne
 8008be2:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008be6:	ea55 0c02 	orrsne.w	ip, r5, r2
 8008bea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8008bee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008bf2:	f000 80e2 	beq.w	8008dba <__adddf3+0x1ee>
 8008bf6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8008bfa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8008bfe:	bfb8      	it	lt
 8008c00:	426d      	neglt	r5, r5
 8008c02:	dd0c      	ble.n	8008c1e <__adddf3+0x52>
 8008c04:	442c      	add	r4, r5
 8008c06:	ea80 0202 	eor.w	r2, r0, r2
 8008c0a:	ea81 0303 	eor.w	r3, r1, r3
 8008c0e:	ea82 0000 	eor.w	r0, r2, r0
 8008c12:	ea83 0101 	eor.w	r1, r3, r1
 8008c16:	ea80 0202 	eor.w	r2, r0, r2
 8008c1a:	ea81 0303 	eor.w	r3, r1, r3
 8008c1e:	2d36      	cmp	r5, #54	; 0x36
 8008c20:	bf88      	it	hi
 8008c22:	bd30      	pophi	{r4, r5, pc}
 8008c24:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008c28:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8008c2c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008c30:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008c34:	d002      	beq.n	8008c3c <__adddf3+0x70>
 8008c36:	4240      	negs	r0, r0
 8008c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008c3c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008c40:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008c44:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008c48:	d002      	beq.n	8008c50 <__adddf3+0x84>
 8008c4a:	4252      	negs	r2, r2
 8008c4c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008c50:	ea94 0f05 	teq	r4, r5
 8008c54:	f000 80a7 	beq.w	8008da6 <__adddf3+0x1da>
 8008c58:	f1a4 0401 	sub.w	r4, r4, #1
 8008c5c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008c60:	db0d      	blt.n	8008c7e <__adddf3+0xb2>
 8008c62:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008c66:	fa22 f205 	lsr.w	r2, r2, r5
 8008c6a:	1880      	adds	r0, r0, r2
 8008c6c:	f141 0100 	adc.w	r1, r1, #0
 8008c70:	fa03 f20e 	lsl.w	r2, r3, lr
 8008c74:	1880      	adds	r0, r0, r2
 8008c76:	fa43 f305 	asr.w	r3, r3, r5
 8008c7a:	4159      	adcs	r1, r3
 8008c7c:	e00e      	b.n	8008c9c <__adddf3+0xd0>
 8008c7e:	f1a5 0520 	sub.w	r5, r5, #32
 8008c82:	f10e 0e20 	add.w	lr, lr, #32
 8008c86:	2a01      	cmp	r2, #1
 8008c88:	fa03 fc0e 	lsl.w	ip, r3, lr
 8008c8c:	bf28      	it	cs
 8008c8e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8008c92:	fa43 f305 	asr.w	r3, r3, r5
 8008c96:	18c0      	adds	r0, r0, r3
 8008c98:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8008c9c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008ca0:	d507      	bpl.n	8008cb2 <__adddf3+0xe6>
 8008ca2:	f04f 0e00 	mov.w	lr, #0
 8008ca6:	f1dc 0c00 	rsbs	ip, ip, #0
 8008caa:	eb7e 0000 	sbcs.w	r0, lr, r0
 8008cae:	eb6e 0101 	sbc.w	r1, lr, r1
 8008cb2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8008cb6:	d31b      	bcc.n	8008cf0 <__adddf3+0x124>
 8008cb8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8008cbc:	d30c      	bcc.n	8008cd8 <__adddf3+0x10c>
 8008cbe:	0849      	lsrs	r1, r1, #1
 8008cc0:	ea5f 0030 	movs.w	r0, r0, rrx
 8008cc4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8008cc8:	f104 0401 	add.w	r4, r4, #1
 8008ccc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008cd0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008cd4:	f080 809a 	bcs.w	8008e0c <__adddf3+0x240>
 8008cd8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8008cdc:	bf08      	it	eq
 8008cde:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008ce2:	f150 0000 	adcs.w	r0, r0, #0
 8008ce6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8008cea:	ea41 0105 	orr.w	r1, r1, r5
 8008cee:	bd30      	pop	{r4, r5, pc}
 8008cf0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008cf4:	4140      	adcs	r0, r0
 8008cf6:	eb41 0101 	adc.w	r1, r1, r1
 8008cfa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008cfe:	f1a4 0401 	sub.w	r4, r4, #1
 8008d02:	d1e9      	bne.n	8008cd8 <__adddf3+0x10c>
 8008d04:	f091 0f00 	teq	r1, #0
 8008d08:	bf04      	itt	eq
 8008d0a:	4601      	moveq	r1, r0
 8008d0c:	2000      	moveq	r0, #0
 8008d0e:	fab1 f381 	clz	r3, r1
 8008d12:	bf08      	it	eq
 8008d14:	3320      	addeq	r3, #32
 8008d16:	f1a3 030b 	sub.w	r3, r3, #11
 8008d1a:	f1b3 0220 	subs.w	r2, r3, #32
 8008d1e:	da0c      	bge.n	8008d3a <__adddf3+0x16e>
 8008d20:	320c      	adds	r2, #12
 8008d22:	dd08      	ble.n	8008d36 <__adddf3+0x16a>
 8008d24:	f102 0c14 	add.w	ip, r2, #20
 8008d28:	f1c2 020c 	rsb	r2, r2, #12
 8008d2c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008d30:	fa21 f102 	lsr.w	r1, r1, r2
 8008d34:	e00c      	b.n	8008d50 <__adddf3+0x184>
 8008d36:	f102 0214 	add.w	r2, r2, #20
 8008d3a:	bfd8      	it	le
 8008d3c:	f1c2 0c20 	rsble	ip, r2, #32
 8008d40:	fa01 f102 	lsl.w	r1, r1, r2
 8008d44:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008d48:	bfdc      	itt	le
 8008d4a:	ea41 010c 	orrle.w	r1, r1, ip
 8008d4e:	4090      	lslle	r0, r2
 8008d50:	1ae4      	subs	r4, r4, r3
 8008d52:	bfa2      	ittt	ge
 8008d54:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008d58:	4329      	orrge	r1, r5
 8008d5a:	bd30      	popge	{r4, r5, pc}
 8008d5c:	ea6f 0404 	mvn.w	r4, r4
 8008d60:	3c1f      	subs	r4, #31
 8008d62:	da1c      	bge.n	8008d9e <__adddf3+0x1d2>
 8008d64:	340c      	adds	r4, #12
 8008d66:	dc0e      	bgt.n	8008d86 <__adddf3+0x1ba>
 8008d68:	f104 0414 	add.w	r4, r4, #20
 8008d6c:	f1c4 0220 	rsb	r2, r4, #32
 8008d70:	fa20 f004 	lsr.w	r0, r0, r4
 8008d74:	fa01 f302 	lsl.w	r3, r1, r2
 8008d78:	ea40 0003 	orr.w	r0, r0, r3
 8008d7c:	fa21 f304 	lsr.w	r3, r1, r4
 8008d80:	ea45 0103 	orr.w	r1, r5, r3
 8008d84:	bd30      	pop	{r4, r5, pc}
 8008d86:	f1c4 040c 	rsb	r4, r4, #12
 8008d8a:	f1c4 0220 	rsb	r2, r4, #32
 8008d8e:	fa20 f002 	lsr.w	r0, r0, r2
 8008d92:	fa01 f304 	lsl.w	r3, r1, r4
 8008d96:	ea40 0003 	orr.w	r0, r0, r3
 8008d9a:	4629      	mov	r1, r5
 8008d9c:	bd30      	pop	{r4, r5, pc}
 8008d9e:	fa21 f004 	lsr.w	r0, r1, r4
 8008da2:	4629      	mov	r1, r5
 8008da4:	bd30      	pop	{r4, r5, pc}
 8008da6:	f094 0f00 	teq	r4, #0
 8008daa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8008dae:	bf06      	itte	eq
 8008db0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8008db4:	3401      	addeq	r4, #1
 8008db6:	3d01      	subne	r5, #1
 8008db8:	e74e      	b.n	8008c58 <__adddf3+0x8c>
 8008dba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8008dbe:	bf18      	it	ne
 8008dc0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008dc4:	d029      	beq.n	8008e1a <__adddf3+0x24e>
 8008dc6:	ea94 0f05 	teq	r4, r5
 8008dca:	bf08      	it	eq
 8008dcc:	ea90 0f02 	teqeq	r0, r2
 8008dd0:	d005      	beq.n	8008dde <__adddf3+0x212>
 8008dd2:	ea54 0c00 	orrs.w	ip, r4, r0
 8008dd6:	bf04      	itt	eq
 8008dd8:	4619      	moveq	r1, r3
 8008dda:	4610      	moveq	r0, r2
 8008ddc:	bd30      	pop	{r4, r5, pc}
 8008dde:	ea91 0f03 	teq	r1, r3
 8008de2:	bf1e      	ittt	ne
 8008de4:	2100      	movne	r1, #0
 8008de6:	2000      	movne	r0, #0
 8008de8:	bd30      	popne	{r4, r5, pc}
 8008dea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8008dee:	d105      	bne.n	8008dfc <__adddf3+0x230>
 8008df0:	0040      	lsls	r0, r0, #1
 8008df2:	4149      	adcs	r1, r1
 8008df4:	bf28      	it	cs
 8008df6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8008dfa:	bd30      	pop	{r4, r5, pc}
 8008dfc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008e00:	bf3c      	itt	cc
 8008e02:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008e06:	bd30      	popcc	{r4, r5, pc}
 8008e08:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008e0c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008e10:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008e14:	f04f 0000 	mov.w	r0, #0
 8008e18:	bd30      	pop	{r4, r5, pc}
 8008e1a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8008e1e:	bf1a      	itte	ne
 8008e20:	4619      	movne	r1, r3
 8008e22:	4610      	movne	r0, r2
 8008e24:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008e28:	bf1c      	itt	ne
 8008e2a:	460b      	movne	r3, r1
 8008e2c:	4602      	movne	r2, r0
 8008e2e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008e32:	bf06      	itte	eq
 8008e34:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008e38:	ea91 0f03 	teqeq	r1, r3
 8008e3c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008e40:	bd30      	pop	{r4, r5, pc}
 8008e42:	bf00      	nop

08008e44 <__aeabi_ui2d>:
 8008e44:	f090 0f00 	teq	r0, #0
 8008e48:	bf04      	itt	eq
 8008e4a:	2100      	moveq	r1, #0
 8008e4c:	4770      	bxeq	lr
 8008e4e:	b530      	push	{r4, r5, lr}
 8008e50:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008e54:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008e58:	f04f 0500 	mov.w	r5, #0
 8008e5c:	f04f 0100 	mov.w	r1, #0
 8008e60:	e750      	b.n	8008d04 <__adddf3+0x138>
 8008e62:	bf00      	nop

08008e64 <__aeabi_i2d>:
 8008e64:	f090 0f00 	teq	r0, #0
 8008e68:	bf04      	itt	eq
 8008e6a:	2100      	moveq	r1, #0
 8008e6c:	4770      	bxeq	lr
 8008e6e:	b530      	push	{r4, r5, lr}
 8008e70:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008e74:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008e78:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8008e7c:	bf48      	it	mi
 8008e7e:	4240      	negmi	r0, r0
 8008e80:	f04f 0100 	mov.w	r1, #0
 8008e84:	e73e      	b.n	8008d04 <__adddf3+0x138>
 8008e86:	bf00      	nop

08008e88 <__aeabi_f2d>:
 8008e88:	0042      	lsls	r2, r0, #1
 8008e8a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8008e8e:	ea4f 0131 	mov.w	r1, r1, rrx
 8008e92:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8008e96:	bf1f      	itttt	ne
 8008e98:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8008e9c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8008ea0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8008ea4:	4770      	bxne	lr
 8008ea6:	f092 0f00 	teq	r2, #0
 8008eaa:	bf14      	ite	ne
 8008eac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8008eb0:	4770      	bxeq	lr
 8008eb2:	b530      	push	{r4, r5, lr}
 8008eb4:	f44f 7460 	mov.w	r4, #896	; 0x380
 8008eb8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008ebc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008ec0:	e720      	b.n	8008d04 <__adddf3+0x138>
 8008ec2:	bf00      	nop

08008ec4 <__aeabi_ul2d>:
 8008ec4:	ea50 0201 	orrs.w	r2, r0, r1
 8008ec8:	bf08      	it	eq
 8008eca:	4770      	bxeq	lr
 8008ecc:	b530      	push	{r4, r5, lr}
 8008ece:	f04f 0500 	mov.w	r5, #0
 8008ed2:	e00a      	b.n	8008eea <__aeabi_l2d+0x16>

08008ed4 <__aeabi_l2d>:
 8008ed4:	ea50 0201 	orrs.w	r2, r0, r1
 8008ed8:	bf08      	it	eq
 8008eda:	4770      	bxeq	lr
 8008edc:	b530      	push	{r4, r5, lr}
 8008ede:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8008ee2:	d502      	bpl.n	8008eea <__aeabi_l2d+0x16>
 8008ee4:	4240      	negs	r0, r0
 8008ee6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008eea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008eee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008ef2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8008ef6:	f43f aedc 	beq.w	8008cb2 <__adddf3+0xe6>
 8008efa:	f04f 0203 	mov.w	r2, #3
 8008efe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008f02:	bf18      	it	ne
 8008f04:	3203      	addne	r2, #3
 8008f06:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008f0a:	bf18      	it	ne
 8008f0c:	3203      	addne	r2, #3
 8008f0e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8008f12:	f1c2 0320 	rsb	r3, r2, #32
 8008f16:	fa00 fc03 	lsl.w	ip, r0, r3
 8008f1a:	fa20 f002 	lsr.w	r0, r0, r2
 8008f1e:	fa01 fe03 	lsl.w	lr, r1, r3
 8008f22:	ea40 000e 	orr.w	r0, r0, lr
 8008f26:	fa21 f102 	lsr.w	r1, r1, r2
 8008f2a:	4414      	add	r4, r2
 8008f2c:	e6c1      	b.n	8008cb2 <__adddf3+0xe6>
 8008f2e:	bf00      	nop

08008f30 <__aeabi_dmul>:
 8008f30:	b570      	push	{r4, r5, r6, lr}
 8008f32:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8008f36:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008f3a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008f3e:	bf1d      	ittte	ne
 8008f40:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8008f44:	ea94 0f0c 	teqne	r4, ip
 8008f48:	ea95 0f0c 	teqne	r5, ip
 8008f4c:	f000 f8de 	bleq	800910c <__aeabi_dmul+0x1dc>
 8008f50:	442c      	add	r4, r5
 8008f52:	ea81 0603 	eor.w	r6, r1, r3
 8008f56:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008f5a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008f5e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8008f62:	bf18      	it	ne
 8008f64:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8008f68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008f6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f70:	d038      	beq.n	8008fe4 <__aeabi_dmul+0xb4>
 8008f72:	fba0 ce02 	umull	ip, lr, r0, r2
 8008f76:	f04f 0500 	mov.w	r5, #0
 8008f7a:	fbe1 e502 	umlal	lr, r5, r1, r2
 8008f7e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8008f82:	fbe0 e503 	umlal	lr, r5, r0, r3
 8008f86:	f04f 0600 	mov.w	r6, #0
 8008f8a:	fbe1 5603 	umlal	r5, r6, r1, r3
 8008f8e:	f09c 0f00 	teq	ip, #0
 8008f92:	bf18      	it	ne
 8008f94:	f04e 0e01 	orrne.w	lr, lr, #1
 8008f98:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8008f9c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8008fa0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8008fa4:	d204      	bcs.n	8008fb0 <__aeabi_dmul+0x80>
 8008fa6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8008faa:	416d      	adcs	r5, r5
 8008fac:	eb46 0606 	adc.w	r6, r6, r6
 8008fb0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8008fb4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8008fb8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8008fbc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8008fc0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8008fc4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008fc8:	bf88      	it	hi
 8008fca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008fce:	d81e      	bhi.n	800900e <__aeabi_dmul+0xde>
 8008fd0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8008fd4:	bf08      	it	eq
 8008fd6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008fda:	f150 0000 	adcs.w	r0, r0, #0
 8008fde:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8008fe2:	bd70      	pop	{r4, r5, r6, pc}
 8008fe4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008fe8:	ea46 0101 	orr.w	r1, r6, r1
 8008fec:	ea40 0002 	orr.w	r0, r0, r2
 8008ff0:	ea81 0103 	eor.w	r1, r1, r3
 8008ff4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008ff8:	bfc2      	ittt	gt
 8008ffa:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008ffe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8009002:	bd70      	popgt	{r4, r5, r6, pc}
 8009004:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009008:	f04f 0e00 	mov.w	lr, #0
 800900c:	3c01      	subs	r4, #1
 800900e:	f300 80ab 	bgt.w	8009168 <__aeabi_dmul+0x238>
 8009012:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8009016:	bfde      	ittt	le
 8009018:	2000      	movle	r0, #0
 800901a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800901e:	bd70      	pople	{r4, r5, r6, pc}
 8009020:	f1c4 0400 	rsb	r4, r4, #0
 8009024:	3c20      	subs	r4, #32
 8009026:	da35      	bge.n	8009094 <__aeabi_dmul+0x164>
 8009028:	340c      	adds	r4, #12
 800902a:	dc1b      	bgt.n	8009064 <__aeabi_dmul+0x134>
 800902c:	f104 0414 	add.w	r4, r4, #20
 8009030:	f1c4 0520 	rsb	r5, r4, #32
 8009034:	fa00 f305 	lsl.w	r3, r0, r5
 8009038:	fa20 f004 	lsr.w	r0, r0, r4
 800903c:	fa01 f205 	lsl.w	r2, r1, r5
 8009040:	ea40 0002 	orr.w	r0, r0, r2
 8009044:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8009048:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800904c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8009050:	fa21 f604 	lsr.w	r6, r1, r4
 8009054:	eb42 0106 	adc.w	r1, r2, r6
 8009058:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800905c:	bf08      	it	eq
 800905e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8009062:	bd70      	pop	{r4, r5, r6, pc}
 8009064:	f1c4 040c 	rsb	r4, r4, #12
 8009068:	f1c4 0520 	rsb	r5, r4, #32
 800906c:	fa00 f304 	lsl.w	r3, r0, r4
 8009070:	fa20 f005 	lsr.w	r0, r0, r5
 8009074:	fa01 f204 	lsl.w	r2, r1, r4
 8009078:	ea40 0002 	orr.w	r0, r0, r2
 800907c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8009080:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8009084:	f141 0100 	adc.w	r1, r1, #0
 8009088:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800908c:	bf08      	it	eq
 800908e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8009092:	bd70      	pop	{r4, r5, r6, pc}
 8009094:	f1c4 0520 	rsb	r5, r4, #32
 8009098:	fa00 f205 	lsl.w	r2, r0, r5
 800909c:	ea4e 0e02 	orr.w	lr, lr, r2
 80090a0:	fa20 f304 	lsr.w	r3, r0, r4
 80090a4:	fa01 f205 	lsl.w	r2, r1, r5
 80090a8:	ea43 0302 	orr.w	r3, r3, r2
 80090ac:	fa21 f004 	lsr.w	r0, r1, r4
 80090b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80090b4:	fa21 f204 	lsr.w	r2, r1, r4
 80090b8:	ea20 0002 	bic.w	r0, r0, r2
 80090bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80090c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80090c4:	bf08      	it	eq
 80090c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80090ca:	bd70      	pop	{r4, r5, r6, pc}
 80090cc:	f094 0f00 	teq	r4, #0
 80090d0:	d10f      	bne.n	80090f2 <__aeabi_dmul+0x1c2>
 80090d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80090d6:	0040      	lsls	r0, r0, #1
 80090d8:	eb41 0101 	adc.w	r1, r1, r1
 80090dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80090e0:	bf08      	it	eq
 80090e2:	3c01      	subeq	r4, #1
 80090e4:	d0f7      	beq.n	80090d6 <__aeabi_dmul+0x1a6>
 80090e6:	ea41 0106 	orr.w	r1, r1, r6
 80090ea:	f095 0f00 	teq	r5, #0
 80090ee:	bf18      	it	ne
 80090f0:	4770      	bxne	lr
 80090f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80090f6:	0052      	lsls	r2, r2, #1
 80090f8:	eb43 0303 	adc.w	r3, r3, r3
 80090fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8009100:	bf08      	it	eq
 8009102:	3d01      	subeq	r5, #1
 8009104:	d0f7      	beq.n	80090f6 <__aeabi_dmul+0x1c6>
 8009106:	ea43 0306 	orr.w	r3, r3, r6
 800910a:	4770      	bx	lr
 800910c:	ea94 0f0c 	teq	r4, ip
 8009110:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8009114:	bf18      	it	ne
 8009116:	ea95 0f0c 	teqne	r5, ip
 800911a:	d00c      	beq.n	8009136 <__aeabi_dmul+0x206>
 800911c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8009120:	bf18      	it	ne
 8009122:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8009126:	d1d1      	bne.n	80090cc <__aeabi_dmul+0x19c>
 8009128:	ea81 0103 	eor.w	r1, r1, r3
 800912c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8009130:	f04f 0000 	mov.w	r0, #0
 8009134:	bd70      	pop	{r4, r5, r6, pc}
 8009136:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800913a:	bf06      	itte	eq
 800913c:	4610      	moveq	r0, r2
 800913e:	4619      	moveq	r1, r3
 8009140:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8009144:	d019      	beq.n	800917a <__aeabi_dmul+0x24a>
 8009146:	ea94 0f0c 	teq	r4, ip
 800914a:	d102      	bne.n	8009152 <__aeabi_dmul+0x222>
 800914c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8009150:	d113      	bne.n	800917a <__aeabi_dmul+0x24a>
 8009152:	ea95 0f0c 	teq	r5, ip
 8009156:	d105      	bne.n	8009164 <__aeabi_dmul+0x234>
 8009158:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800915c:	bf1c      	itt	ne
 800915e:	4610      	movne	r0, r2
 8009160:	4619      	movne	r1, r3
 8009162:	d10a      	bne.n	800917a <__aeabi_dmul+0x24a>
 8009164:	ea81 0103 	eor.w	r1, r1, r3
 8009168:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800916c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8009170:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009174:	f04f 0000 	mov.w	r0, #0
 8009178:	bd70      	pop	{r4, r5, r6, pc}
 800917a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800917e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8009182:	bd70      	pop	{r4, r5, r6, pc}

08009184 <__aeabi_ddiv>:
 8009184:	b570      	push	{r4, r5, r6, lr}
 8009186:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800918a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800918e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8009192:	bf1d      	ittte	ne
 8009194:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8009198:	ea94 0f0c 	teqne	r4, ip
 800919c:	ea95 0f0c 	teqne	r5, ip
 80091a0:	f000 f8a7 	bleq	80092f2 <__aeabi_ddiv+0x16e>
 80091a4:	eba4 0405 	sub.w	r4, r4, r5
 80091a8:	ea81 0e03 	eor.w	lr, r1, r3
 80091ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80091b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80091b4:	f000 8088 	beq.w	80092c8 <__aeabi_ddiv+0x144>
 80091b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80091bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80091c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80091c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80091c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80091cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80091d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80091d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80091d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80091dc:	429d      	cmp	r5, r3
 80091de:	bf08      	it	eq
 80091e0:	4296      	cmpeq	r6, r2
 80091e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80091e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80091ea:	d202      	bcs.n	80091f2 <__aeabi_ddiv+0x6e>
 80091ec:	085b      	lsrs	r3, r3, #1
 80091ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80091f2:	1ab6      	subs	r6, r6, r2
 80091f4:	eb65 0503 	sbc.w	r5, r5, r3
 80091f8:	085b      	lsrs	r3, r3, #1
 80091fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80091fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8009202:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8009206:	ebb6 0e02 	subs.w	lr, r6, r2
 800920a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800920e:	bf22      	ittt	cs
 8009210:	1ab6      	subcs	r6, r6, r2
 8009212:	4675      	movcs	r5, lr
 8009214:	ea40 000c 	orrcs.w	r0, r0, ip
 8009218:	085b      	lsrs	r3, r3, #1
 800921a:	ea4f 0232 	mov.w	r2, r2, rrx
 800921e:	ebb6 0e02 	subs.w	lr, r6, r2
 8009222:	eb75 0e03 	sbcs.w	lr, r5, r3
 8009226:	bf22      	ittt	cs
 8009228:	1ab6      	subcs	r6, r6, r2
 800922a:	4675      	movcs	r5, lr
 800922c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8009230:	085b      	lsrs	r3, r3, #1
 8009232:	ea4f 0232 	mov.w	r2, r2, rrx
 8009236:	ebb6 0e02 	subs.w	lr, r6, r2
 800923a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800923e:	bf22      	ittt	cs
 8009240:	1ab6      	subcs	r6, r6, r2
 8009242:	4675      	movcs	r5, lr
 8009244:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8009248:	085b      	lsrs	r3, r3, #1
 800924a:	ea4f 0232 	mov.w	r2, r2, rrx
 800924e:	ebb6 0e02 	subs.w	lr, r6, r2
 8009252:	eb75 0e03 	sbcs.w	lr, r5, r3
 8009256:	bf22      	ittt	cs
 8009258:	1ab6      	subcs	r6, r6, r2
 800925a:	4675      	movcs	r5, lr
 800925c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8009260:	ea55 0e06 	orrs.w	lr, r5, r6
 8009264:	d018      	beq.n	8009298 <__aeabi_ddiv+0x114>
 8009266:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800926a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800926e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8009272:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8009276:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800927a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800927e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8009282:	d1c0      	bne.n	8009206 <__aeabi_ddiv+0x82>
 8009284:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8009288:	d10b      	bne.n	80092a2 <__aeabi_ddiv+0x11e>
 800928a:	ea41 0100 	orr.w	r1, r1, r0
 800928e:	f04f 0000 	mov.w	r0, #0
 8009292:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8009296:	e7b6      	b.n	8009206 <__aeabi_ddiv+0x82>
 8009298:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800929c:	bf04      	itt	eq
 800929e:	4301      	orreq	r1, r0
 80092a0:	2000      	moveq	r0, #0
 80092a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80092a6:	bf88      	it	hi
 80092a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80092ac:	f63f aeaf 	bhi.w	800900e <__aeabi_dmul+0xde>
 80092b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80092b4:	bf04      	itt	eq
 80092b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80092ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80092be:	f150 0000 	adcs.w	r0, r0, #0
 80092c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80092c6:	bd70      	pop	{r4, r5, r6, pc}
 80092c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80092cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80092d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80092d4:	bfc2      	ittt	gt
 80092d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80092da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80092de:	bd70      	popgt	{r4, r5, r6, pc}
 80092e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80092e4:	f04f 0e00 	mov.w	lr, #0
 80092e8:	3c01      	subs	r4, #1
 80092ea:	e690      	b.n	800900e <__aeabi_dmul+0xde>
 80092ec:	ea45 0e06 	orr.w	lr, r5, r6
 80092f0:	e68d      	b.n	800900e <__aeabi_dmul+0xde>
 80092f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80092f6:	ea94 0f0c 	teq	r4, ip
 80092fa:	bf08      	it	eq
 80092fc:	ea95 0f0c 	teqeq	r5, ip
 8009300:	f43f af3b 	beq.w	800917a <__aeabi_dmul+0x24a>
 8009304:	ea94 0f0c 	teq	r4, ip
 8009308:	d10a      	bne.n	8009320 <__aeabi_ddiv+0x19c>
 800930a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800930e:	f47f af34 	bne.w	800917a <__aeabi_dmul+0x24a>
 8009312:	ea95 0f0c 	teq	r5, ip
 8009316:	f47f af25 	bne.w	8009164 <__aeabi_dmul+0x234>
 800931a:	4610      	mov	r0, r2
 800931c:	4619      	mov	r1, r3
 800931e:	e72c      	b.n	800917a <__aeabi_dmul+0x24a>
 8009320:	ea95 0f0c 	teq	r5, ip
 8009324:	d106      	bne.n	8009334 <__aeabi_ddiv+0x1b0>
 8009326:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800932a:	f43f aefd 	beq.w	8009128 <__aeabi_dmul+0x1f8>
 800932e:	4610      	mov	r0, r2
 8009330:	4619      	mov	r1, r3
 8009332:	e722      	b.n	800917a <__aeabi_dmul+0x24a>
 8009334:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8009338:	bf18      	it	ne
 800933a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800933e:	f47f aec5 	bne.w	80090cc <__aeabi_dmul+0x19c>
 8009342:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8009346:	f47f af0d 	bne.w	8009164 <__aeabi_dmul+0x234>
 800934a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800934e:	f47f aeeb 	bne.w	8009128 <__aeabi_dmul+0x1f8>
 8009352:	e712      	b.n	800917a <__aeabi_dmul+0x24a>

08009354 <__gedf2>:
 8009354:	f04f 3cff 	mov.w	ip, #4294967295
 8009358:	e006      	b.n	8009368 <__cmpdf2+0x4>
 800935a:	bf00      	nop

0800935c <__ledf2>:
 800935c:	f04f 0c01 	mov.w	ip, #1
 8009360:	e002      	b.n	8009368 <__cmpdf2+0x4>
 8009362:	bf00      	nop

08009364 <__cmpdf2>:
 8009364:	f04f 0c01 	mov.w	ip, #1
 8009368:	f84d cd04 	str.w	ip, [sp, #-4]!
 800936c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8009370:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8009374:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8009378:	bf18      	it	ne
 800937a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800937e:	d01b      	beq.n	80093b8 <__cmpdf2+0x54>
 8009380:	b001      	add	sp, #4
 8009382:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8009386:	bf0c      	ite	eq
 8009388:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800938c:	ea91 0f03 	teqne	r1, r3
 8009390:	bf02      	ittt	eq
 8009392:	ea90 0f02 	teqeq	r0, r2
 8009396:	2000      	moveq	r0, #0
 8009398:	4770      	bxeq	lr
 800939a:	f110 0f00 	cmn.w	r0, #0
 800939e:	ea91 0f03 	teq	r1, r3
 80093a2:	bf58      	it	pl
 80093a4:	4299      	cmppl	r1, r3
 80093a6:	bf08      	it	eq
 80093a8:	4290      	cmpeq	r0, r2
 80093aa:	bf2c      	ite	cs
 80093ac:	17d8      	asrcs	r0, r3, #31
 80093ae:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80093b2:	f040 0001 	orr.w	r0, r0, #1
 80093b6:	4770      	bx	lr
 80093b8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80093bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80093c0:	d102      	bne.n	80093c8 <__cmpdf2+0x64>
 80093c2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80093c6:	d107      	bne.n	80093d8 <__cmpdf2+0x74>
 80093c8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80093cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80093d0:	d1d6      	bne.n	8009380 <__cmpdf2+0x1c>
 80093d2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80093d6:	d0d3      	beq.n	8009380 <__cmpdf2+0x1c>
 80093d8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80093dc:	4770      	bx	lr
 80093de:	bf00      	nop

080093e0 <__aeabi_cdrcmple>:
 80093e0:	4684      	mov	ip, r0
 80093e2:	4610      	mov	r0, r2
 80093e4:	4662      	mov	r2, ip
 80093e6:	468c      	mov	ip, r1
 80093e8:	4619      	mov	r1, r3
 80093ea:	4663      	mov	r3, ip
 80093ec:	e000      	b.n	80093f0 <__aeabi_cdcmpeq>
 80093ee:	bf00      	nop

080093f0 <__aeabi_cdcmpeq>:
 80093f0:	b501      	push	{r0, lr}
 80093f2:	f7ff ffb7 	bl	8009364 <__cmpdf2>
 80093f6:	2800      	cmp	r0, #0
 80093f8:	bf48      	it	mi
 80093fa:	f110 0f00 	cmnmi.w	r0, #0
 80093fe:	bd01      	pop	{r0, pc}

08009400 <__aeabi_dcmpeq>:
 8009400:	f84d ed08 	str.w	lr, [sp, #-8]!
 8009404:	f7ff fff4 	bl	80093f0 <__aeabi_cdcmpeq>
 8009408:	bf0c      	ite	eq
 800940a:	2001      	moveq	r0, #1
 800940c:	2000      	movne	r0, #0
 800940e:	f85d fb08 	ldr.w	pc, [sp], #8
 8009412:	bf00      	nop

08009414 <__aeabi_dcmplt>:
 8009414:	f84d ed08 	str.w	lr, [sp, #-8]!
 8009418:	f7ff ffea 	bl	80093f0 <__aeabi_cdcmpeq>
 800941c:	bf34      	ite	cc
 800941e:	2001      	movcc	r0, #1
 8009420:	2000      	movcs	r0, #0
 8009422:	f85d fb08 	ldr.w	pc, [sp], #8
 8009426:	bf00      	nop

08009428 <__aeabi_dcmple>:
 8009428:	f84d ed08 	str.w	lr, [sp, #-8]!
 800942c:	f7ff ffe0 	bl	80093f0 <__aeabi_cdcmpeq>
 8009430:	bf94      	ite	ls
 8009432:	2001      	movls	r0, #1
 8009434:	2000      	movhi	r0, #0
 8009436:	f85d fb08 	ldr.w	pc, [sp], #8
 800943a:	bf00      	nop

0800943c <__aeabi_dcmpge>:
 800943c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8009440:	f7ff ffce 	bl	80093e0 <__aeabi_cdrcmple>
 8009444:	bf94      	ite	ls
 8009446:	2001      	movls	r0, #1
 8009448:	2000      	movhi	r0, #0
 800944a:	f85d fb08 	ldr.w	pc, [sp], #8
 800944e:	bf00      	nop

08009450 <__aeabi_dcmpgt>:
 8009450:	f84d ed08 	str.w	lr, [sp, #-8]!
 8009454:	f7ff ffc4 	bl	80093e0 <__aeabi_cdrcmple>
 8009458:	bf34      	ite	cc
 800945a:	2001      	movcc	r0, #1
 800945c:	2000      	movcs	r0, #0
 800945e:	f85d fb08 	ldr.w	pc, [sp], #8
 8009462:	bf00      	nop

08009464 <__aeabi_d2f>:
 8009464:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8009468:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800946c:	bf24      	itt	cs
 800946e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8009472:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8009476:	d90d      	bls.n	8009494 <__aeabi_d2f+0x30>
 8009478:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800947c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8009480:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8009484:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8009488:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800948c:	bf08      	it	eq
 800948e:	f020 0001 	biceq.w	r0, r0, #1
 8009492:	4770      	bx	lr
 8009494:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8009498:	d121      	bne.n	80094de <__aeabi_d2f+0x7a>
 800949a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800949e:	bfbc      	itt	lt
 80094a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80094a4:	4770      	bxlt	lr
 80094a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80094aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80094ae:	f1c2 0218 	rsb	r2, r2, #24
 80094b2:	f1c2 0c20 	rsb	ip, r2, #32
 80094b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80094ba:	fa20 f002 	lsr.w	r0, r0, r2
 80094be:	bf18      	it	ne
 80094c0:	f040 0001 	orrne.w	r0, r0, #1
 80094c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80094c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80094cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80094d0:	ea40 000c 	orr.w	r0, r0, ip
 80094d4:	fa23 f302 	lsr.w	r3, r3, r2
 80094d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80094dc:	e7cc      	b.n	8009478 <__aeabi_d2f+0x14>
 80094de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80094e2:	d107      	bne.n	80094f4 <__aeabi_d2f+0x90>
 80094e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80094e8:	bf1e      	ittt	ne
 80094ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80094ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80094f2:	4770      	bxne	lr
 80094f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80094f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80094fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8009500:	4770      	bx	lr
 8009502:	bf00      	nop

08009504 <__aeabi_ldivmod>:
 8009504:	b973      	cbnz	r3, 8009524 <__aeabi_ldivmod+0x20>
 8009506:	b96a      	cbnz	r2, 8009524 <__aeabi_ldivmod+0x20>
 8009508:	2900      	cmp	r1, #0
 800950a:	bf08      	it	eq
 800950c:	2800      	cmpeq	r0, #0
 800950e:	bfbc      	itt	lt
 8009510:	2000      	movlt	r0, #0
 8009512:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8009516:	bfc4      	itt	gt
 8009518:	f06f 4100 	mvngt.w	r1, #2147483648	; 0x80000000
 800951c:	f04f 30ff 	movgt.w	r0, #4294967295
 8009520:	f000 b83c 	b.w	800959c <__aeabi_idiv0>
 8009524:	b082      	sub	sp, #8
 8009526:	46ec      	mov	ip, sp
 8009528:	e92d 5000 	stmdb	sp!, {ip, lr}
 800952c:	f000 f806 	bl	800953c <__gnu_ldivmod_helper>
 8009530:	f8dd e004 	ldr.w	lr, [sp, #4]
 8009534:	b002      	add	sp, #8
 8009536:	bc0c      	pop	{r2, r3}
 8009538:	4770      	bx	lr
 800953a:	bf00      	nop

0800953c <__gnu_ldivmod_helper>:
 800953c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009540:	9c06      	ldr	r4, [sp, #24]
 8009542:	4615      	mov	r5, r2
 8009544:	4606      	mov	r6, r0
 8009546:	460f      	mov	r7, r1
 8009548:	4698      	mov	r8, r3
 800954a:	f000 f829 	bl	80095a0 <__divdi3>
 800954e:	fb05 f301 	mul.w	r3, r5, r1
 8009552:	fb00 3808 	mla	r8, r0, r8, r3
 8009556:	fba5 2300 	umull	r2, r3, r5, r0
 800955a:	1ab2      	subs	r2, r6, r2
 800955c:	4443      	add	r3, r8
 800955e:	eb67 0303 	sbc.w	r3, r7, r3
 8009562:	e9c4 2300 	strd	r2, r3, [r4]
 8009566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800956a:	bf00      	nop

0800956c <__gnu_uldivmod_helper>:
 800956c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009570:	9c06      	ldr	r4, [sp, #24]
 8009572:	4690      	mov	r8, r2
 8009574:	4606      	mov	r6, r0
 8009576:	460f      	mov	r7, r1
 8009578:	461d      	mov	r5, r3
 800957a:	f000 f95f 	bl	800983c <__udivdi3>
 800957e:	fb00 f505 	mul.w	r5, r0, r5
 8009582:	fba0 2308 	umull	r2, r3, r0, r8
 8009586:	fb08 5501 	mla	r5, r8, r1, r5
 800958a:	1ab2      	subs	r2, r6, r2
 800958c:	442b      	add	r3, r5
 800958e:	eb67 0303 	sbc.w	r3, r7, r3
 8009592:	e9c4 2300 	strd	r2, r3, [r4]
 8009596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800959a:	bf00      	nop

0800959c <__aeabi_idiv0>:
 800959c:	4770      	bx	lr
 800959e:	bf00      	nop

080095a0 <__divdi3>:
 80095a0:	2900      	cmp	r1, #0
 80095a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80095a6:	f2c0 80a6 	blt.w	80096f6 <__divdi3+0x156>
 80095aa:	2600      	movs	r6, #0
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	f2c0 809c 	blt.w	80096ea <__divdi3+0x14a>
 80095b2:	4688      	mov	r8, r1
 80095b4:	4694      	mov	ip, r2
 80095b6:	469e      	mov	lr, r3
 80095b8:	4615      	mov	r5, r2
 80095ba:	4604      	mov	r4, r0
 80095bc:	460f      	mov	r7, r1
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d13d      	bne.n	800963e <__divdi3+0x9e>
 80095c2:	428a      	cmp	r2, r1
 80095c4:	d959      	bls.n	800967a <__divdi3+0xda>
 80095c6:	fab2 f382 	clz	r3, r2
 80095ca:	b13b      	cbz	r3, 80095dc <__divdi3+0x3c>
 80095cc:	f1c3 0220 	rsb	r2, r3, #32
 80095d0:	409f      	lsls	r7, r3
 80095d2:	fa20 f202 	lsr.w	r2, r0, r2
 80095d6:	409d      	lsls	r5, r3
 80095d8:	4317      	orrs	r7, r2
 80095da:	409c      	lsls	r4, r3
 80095dc:	0c29      	lsrs	r1, r5, #16
 80095de:	0c22      	lsrs	r2, r4, #16
 80095e0:	fbb7 fef1 	udiv	lr, r7, r1
 80095e4:	b2a8      	uxth	r0, r5
 80095e6:	fb01 771e 	mls	r7, r1, lr, r7
 80095ea:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 80095ee:	fb00 f30e 	mul.w	r3, r0, lr
 80095f2:	42bb      	cmp	r3, r7
 80095f4:	d90a      	bls.n	800960c <__divdi3+0x6c>
 80095f6:	197f      	adds	r7, r7, r5
 80095f8:	f10e 32ff 	add.w	r2, lr, #4294967295
 80095fc:	f080 8105 	bcs.w	800980a <__divdi3+0x26a>
 8009600:	42bb      	cmp	r3, r7
 8009602:	f240 8102 	bls.w	800980a <__divdi3+0x26a>
 8009606:	f1ae 0e02 	sub.w	lr, lr, #2
 800960a:	442f      	add	r7, r5
 800960c:	1aff      	subs	r7, r7, r3
 800960e:	b2a4      	uxth	r4, r4
 8009610:	fbb7 f3f1 	udiv	r3, r7, r1
 8009614:	fb01 7713 	mls	r7, r1, r3, r7
 8009618:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800961c:	fb00 f003 	mul.w	r0, r0, r3
 8009620:	42b8      	cmp	r0, r7
 8009622:	d908      	bls.n	8009636 <__divdi3+0x96>
 8009624:	197f      	adds	r7, r7, r5
 8009626:	f103 32ff 	add.w	r2, r3, #4294967295
 800962a:	f080 80f0 	bcs.w	800980e <__divdi3+0x26e>
 800962e:	42b8      	cmp	r0, r7
 8009630:	f240 80ed 	bls.w	800980e <__divdi3+0x26e>
 8009634:	3b02      	subs	r3, #2
 8009636:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800963a:	2200      	movs	r2, #0
 800963c:	e003      	b.n	8009646 <__divdi3+0xa6>
 800963e:	428b      	cmp	r3, r1
 8009640:	d90f      	bls.n	8009662 <__divdi3+0xc2>
 8009642:	2200      	movs	r2, #0
 8009644:	4613      	mov	r3, r2
 8009646:	1c34      	adds	r4, r6, #0
 8009648:	bf18      	it	ne
 800964a:	2401      	movne	r4, #1
 800964c:	4260      	negs	r0, r4
 800964e:	f04f 0500 	mov.w	r5, #0
 8009652:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
 8009656:	4058      	eors	r0, r3
 8009658:	4051      	eors	r1, r2
 800965a:	1900      	adds	r0, r0, r4
 800965c:	4169      	adcs	r1, r5
 800965e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009662:	fab3 f283 	clz	r2, r3
 8009666:	2a00      	cmp	r2, #0
 8009668:	f040 8086 	bne.w	8009778 <__divdi3+0x1d8>
 800966c:	428b      	cmp	r3, r1
 800966e:	d302      	bcc.n	8009676 <__divdi3+0xd6>
 8009670:	4584      	cmp	ip, r0
 8009672:	f200 80db 	bhi.w	800982c <__divdi3+0x28c>
 8009676:	2301      	movs	r3, #1
 8009678:	e7e5      	b.n	8009646 <__divdi3+0xa6>
 800967a:	b912      	cbnz	r2, 8009682 <__divdi3+0xe2>
 800967c:	2301      	movs	r3, #1
 800967e:	fbb3 f5f2 	udiv	r5, r3, r2
 8009682:	fab5 f085 	clz	r0, r5
 8009686:	2800      	cmp	r0, #0
 8009688:	d13b      	bne.n	8009702 <__divdi3+0x162>
 800968a:	1b78      	subs	r0, r7, r5
 800968c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8009690:	fa1f fc85 	uxth.w	ip, r5
 8009694:	2201      	movs	r2, #1
 8009696:	fbb0 f8fe 	udiv	r8, r0, lr
 800969a:	0c21      	lsrs	r1, r4, #16
 800969c:	fb0e 0718 	mls	r7, lr, r8, r0
 80096a0:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
 80096a4:	fb0c f308 	mul.w	r3, ip, r8
 80096a8:	42bb      	cmp	r3, r7
 80096aa:	d907      	bls.n	80096bc <__divdi3+0x11c>
 80096ac:	197f      	adds	r7, r7, r5
 80096ae:	f108 31ff 	add.w	r1, r8, #4294967295
 80096b2:	d202      	bcs.n	80096ba <__divdi3+0x11a>
 80096b4:	42bb      	cmp	r3, r7
 80096b6:	f200 80bd 	bhi.w	8009834 <__divdi3+0x294>
 80096ba:	4688      	mov	r8, r1
 80096bc:	1aff      	subs	r7, r7, r3
 80096be:	b2a4      	uxth	r4, r4
 80096c0:	fbb7 f3fe 	udiv	r3, r7, lr
 80096c4:	fb0e 7713 	mls	r7, lr, r3, r7
 80096c8:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 80096cc:	fb0c fc03 	mul.w	ip, ip, r3
 80096d0:	45bc      	cmp	ip, r7
 80096d2:	d907      	bls.n	80096e4 <__divdi3+0x144>
 80096d4:	197f      	adds	r7, r7, r5
 80096d6:	f103 31ff 	add.w	r1, r3, #4294967295
 80096da:	d202      	bcs.n	80096e2 <__divdi3+0x142>
 80096dc:	45bc      	cmp	ip, r7
 80096de:	f200 80a7 	bhi.w	8009830 <__divdi3+0x290>
 80096e2:	460b      	mov	r3, r1
 80096e4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80096e8:	e7ad      	b.n	8009646 <__divdi3+0xa6>
 80096ea:	4252      	negs	r2, r2
 80096ec:	ea6f 0606 	mvn.w	r6, r6
 80096f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80096f4:	e75d      	b.n	80095b2 <__divdi3+0x12>
 80096f6:	4240      	negs	r0, r0
 80096f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80096fc:	f04f 36ff 	mov.w	r6, #4294967295
 8009700:	e754      	b.n	80095ac <__divdi3+0xc>
 8009702:	f1c0 0220 	rsb	r2, r0, #32
 8009706:	fa24 f102 	lsr.w	r1, r4, r2
 800970a:	fa07 f300 	lsl.w	r3, r7, r0
 800970e:	4085      	lsls	r5, r0
 8009710:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8009714:	40d7      	lsrs	r7, r2
 8009716:	4319      	orrs	r1, r3
 8009718:	fbb7 f2fe 	udiv	r2, r7, lr
 800971c:	0c0b      	lsrs	r3, r1, #16
 800971e:	fb0e 7712 	mls	r7, lr, r2, r7
 8009722:	fa1f fc85 	uxth.w	ip, r5
 8009726:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800972a:	fb0c f702 	mul.w	r7, ip, r2
 800972e:	429f      	cmp	r7, r3
 8009730:	fa04 f400 	lsl.w	r4, r4, r0
 8009734:	d907      	bls.n	8009746 <__divdi3+0x1a6>
 8009736:	195b      	adds	r3, r3, r5
 8009738:	f102 30ff 	add.w	r0, r2, #4294967295
 800973c:	d274      	bcs.n	8009828 <__divdi3+0x288>
 800973e:	429f      	cmp	r7, r3
 8009740:	d972      	bls.n	8009828 <__divdi3+0x288>
 8009742:	3a02      	subs	r2, #2
 8009744:	442b      	add	r3, r5
 8009746:	1bdf      	subs	r7, r3, r7
 8009748:	b289      	uxth	r1, r1
 800974a:	fbb7 f8fe 	udiv	r8, r7, lr
 800974e:	fb0e 7318 	mls	r3, lr, r8, r7
 8009752:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009756:	fb0c f708 	mul.w	r7, ip, r8
 800975a:	429f      	cmp	r7, r3
 800975c:	d908      	bls.n	8009770 <__divdi3+0x1d0>
 800975e:	195b      	adds	r3, r3, r5
 8009760:	f108 31ff 	add.w	r1, r8, #4294967295
 8009764:	d25c      	bcs.n	8009820 <__divdi3+0x280>
 8009766:	429f      	cmp	r7, r3
 8009768:	d95a      	bls.n	8009820 <__divdi3+0x280>
 800976a:	f1a8 0802 	sub.w	r8, r8, #2
 800976e:	442b      	add	r3, r5
 8009770:	1bd8      	subs	r0, r3, r7
 8009772:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
 8009776:	e78e      	b.n	8009696 <__divdi3+0xf6>
 8009778:	f1c2 0320 	rsb	r3, r2, #32
 800977c:	fa2c f103 	lsr.w	r1, ip, r3
 8009780:	fa0e fe02 	lsl.w	lr, lr, r2
 8009784:	fa20 f703 	lsr.w	r7, r0, r3
 8009788:	ea41 0e0e 	orr.w	lr, r1, lr
 800978c:	fa08 f002 	lsl.w	r0, r8, r2
 8009790:	fa28 f103 	lsr.w	r1, r8, r3
 8009794:	ea4f 451e 	mov.w	r5, lr, lsr #16
 8009798:	4338      	orrs	r0, r7
 800979a:	fbb1 f8f5 	udiv	r8, r1, r5
 800979e:	0c03      	lsrs	r3, r0, #16
 80097a0:	fb05 1118 	mls	r1, r5, r8, r1
 80097a4:	fa1f f78e 	uxth.w	r7, lr
 80097a8:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80097ac:	fb07 f308 	mul.w	r3, r7, r8
 80097b0:	428b      	cmp	r3, r1
 80097b2:	fa0c fc02 	lsl.w	ip, ip, r2
 80097b6:	d909      	bls.n	80097cc <__divdi3+0x22c>
 80097b8:	eb11 010e 	adds.w	r1, r1, lr
 80097bc:	f108 39ff 	add.w	r9, r8, #4294967295
 80097c0:	d230      	bcs.n	8009824 <__divdi3+0x284>
 80097c2:	428b      	cmp	r3, r1
 80097c4:	d92e      	bls.n	8009824 <__divdi3+0x284>
 80097c6:	f1a8 0802 	sub.w	r8, r8, #2
 80097ca:	4471      	add	r1, lr
 80097cc:	1ac9      	subs	r1, r1, r3
 80097ce:	b280      	uxth	r0, r0
 80097d0:	fbb1 f3f5 	udiv	r3, r1, r5
 80097d4:	fb05 1113 	mls	r1, r5, r3, r1
 80097d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80097dc:	fb07 f703 	mul.w	r7, r7, r3
 80097e0:	428f      	cmp	r7, r1
 80097e2:	d908      	bls.n	80097f6 <__divdi3+0x256>
 80097e4:	eb11 010e 	adds.w	r1, r1, lr
 80097e8:	f103 30ff 	add.w	r0, r3, #4294967295
 80097ec:	d216      	bcs.n	800981c <__divdi3+0x27c>
 80097ee:	428f      	cmp	r7, r1
 80097f0:	d914      	bls.n	800981c <__divdi3+0x27c>
 80097f2:	3b02      	subs	r3, #2
 80097f4:	4471      	add	r1, lr
 80097f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80097fa:	1bc9      	subs	r1, r1, r7
 80097fc:	fba3 890c 	umull	r8, r9, r3, ip
 8009800:	4549      	cmp	r1, r9
 8009802:	d309      	bcc.n	8009818 <__divdi3+0x278>
 8009804:	d005      	beq.n	8009812 <__divdi3+0x272>
 8009806:	2200      	movs	r2, #0
 8009808:	e71d      	b.n	8009646 <__divdi3+0xa6>
 800980a:	4696      	mov	lr, r2
 800980c:	e6fe      	b.n	800960c <__divdi3+0x6c>
 800980e:	4613      	mov	r3, r2
 8009810:	e711      	b.n	8009636 <__divdi3+0x96>
 8009812:	4094      	lsls	r4, r2
 8009814:	4544      	cmp	r4, r8
 8009816:	d2f6      	bcs.n	8009806 <__divdi3+0x266>
 8009818:	3b01      	subs	r3, #1
 800981a:	e7f4      	b.n	8009806 <__divdi3+0x266>
 800981c:	4603      	mov	r3, r0
 800981e:	e7ea      	b.n	80097f6 <__divdi3+0x256>
 8009820:	4688      	mov	r8, r1
 8009822:	e7a5      	b.n	8009770 <__divdi3+0x1d0>
 8009824:	46c8      	mov	r8, r9
 8009826:	e7d1      	b.n	80097cc <__divdi3+0x22c>
 8009828:	4602      	mov	r2, r0
 800982a:	e78c      	b.n	8009746 <__divdi3+0x1a6>
 800982c:	4613      	mov	r3, r2
 800982e:	e70a      	b.n	8009646 <__divdi3+0xa6>
 8009830:	3b02      	subs	r3, #2
 8009832:	e757      	b.n	80096e4 <__divdi3+0x144>
 8009834:	f1a8 0802 	sub.w	r8, r8, #2
 8009838:	442f      	add	r7, r5
 800983a:	e73f      	b.n	80096bc <__divdi3+0x11c>

0800983c <__udivdi3>:
 800983c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009840:	2b00      	cmp	r3, #0
 8009842:	d144      	bne.n	80098ce <__udivdi3+0x92>
 8009844:	428a      	cmp	r2, r1
 8009846:	4615      	mov	r5, r2
 8009848:	4604      	mov	r4, r0
 800984a:	d94f      	bls.n	80098ec <__udivdi3+0xb0>
 800984c:	fab2 f782 	clz	r7, r2
 8009850:	460e      	mov	r6, r1
 8009852:	b14f      	cbz	r7, 8009868 <__udivdi3+0x2c>
 8009854:	f1c7 0320 	rsb	r3, r7, #32
 8009858:	40b9      	lsls	r1, r7
 800985a:	fa20 f603 	lsr.w	r6, r0, r3
 800985e:	fa02 f507 	lsl.w	r5, r2, r7
 8009862:	430e      	orrs	r6, r1
 8009864:	fa00 f407 	lsl.w	r4, r0, r7
 8009868:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800986c:	0c23      	lsrs	r3, r4, #16
 800986e:	fbb6 f0fe 	udiv	r0, r6, lr
 8009872:	b2af      	uxth	r7, r5
 8009874:	fb0e 6110 	mls	r1, lr, r0, r6
 8009878:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800987c:	fb07 f100 	mul.w	r1, r7, r0
 8009880:	4299      	cmp	r1, r3
 8009882:	d909      	bls.n	8009898 <__udivdi3+0x5c>
 8009884:	195b      	adds	r3, r3, r5
 8009886:	f100 32ff 	add.w	r2, r0, #4294967295
 800988a:	f080 80ec 	bcs.w	8009a66 <__udivdi3+0x22a>
 800988e:	4299      	cmp	r1, r3
 8009890:	f240 80e9 	bls.w	8009a66 <__udivdi3+0x22a>
 8009894:	3802      	subs	r0, #2
 8009896:	442b      	add	r3, r5
 8009898:	1a5a      	subs	r2, r3, r1
 800989a:	b2a4      	uxth	r4, r4
 800989c:	fbb2 f3fe 	udiv	r3, r2, lr
 80098a0:	fb0e 2213 	mls	r2, lr, r3, r2
 80098a4:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 80098a8:	fb07 f703 	mul.w	r7, r7, r3
 80098ac:	4297      	cmp	r7, r2
 80098ae:	d908      	bls.n	80098c2 <__udivdi3+0x86>
 80098b0:	1952      	adds	r2, r2, r5
 80098b2:	f103 31ff 	add.w	r1, r3, #4294967295
 80098b6:	f080 80d8 	bcs.w	8009a6a <__udivdi3+0x22e>
 80098ba:	4297      	cmp	r7, r2
 80098bc:	f240 80d5 	bls.w	8009a6a <__udivdi3+0x22e>
 80098c0:	3b02      	subs	r3, #2
 80098c2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80098c6:	2600      	movs	r6, #0
 80098c8:	4631      	mov	r1, r6
 80098ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098ce:	428b      	cmp	r3, r1
 80098d0:	d847      	bhi.n	8009962 <__udivdi3+0x126>
 80098d2:	fab3 f683 	clz	r6, r3
 80098d6:	2e00      	cmp	r6, #0
 80098d8:	d148      	bne.n	800996c <__udivdi3+0x130>
 80098da:	428b      	cmp	r3, r1
 80098dc:	d302      	bcc.n	80098e4 <__udivdi3+0xa8>
 80098de:	4282      	cmp	r2, r0
 80098e0:	f200 80cd 	bhi.w	8009a7e <__udivdi3+0x242>
 80098e4:	2001      	movs	r0, #1
 80098e6:	4631      	mov	r1, r6
 80098e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098ec:	b912      	cbnz	r2, 80098f4 <__udivdi3+0xb8>
 80098ee:	2501      	movs	r5, #1
 80098f0:	fbb5 f5f2 	udiv	r5, r5, r2
 80098f4:	fab5 f885 	clz	r8, r5
 80098f8:	f1b8 0f00 	cmp.w	r8, #0
 80098fc:	d177      	bne.n	80099ee <__udivdi3+0x1b2>
 80098fe:	1b4a      	subs	r2, r1, r5
 8009900:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8009904:	b2af      	uxth	r7, r5
 8009906:	2601      	movs	r6, #1
 8009908:	fbb2 f0fe 	udiv	r0, r2, lr
 800990c:	0c23      	lsrs	r3, r4, #16
 800990e:	fb0e 2110 	mls	r1, lr, r0, r2
 8009912:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8009916:	fb07 f300 	mul.w	r3, r7, r0
 800991a:	428b      	cmp	r3, r1
 800991c:	d907      	bls.n	800992e <__udivdi3+0xf2>
 800991e:	1949      	adds	r1, r1, r5
 8009920:	f100 32ff 	add.w	r2, r0, #4294967295
 8009924:	d202      	bcs.n	800992c <__udivdi3+0xf0>
 8009926:	428b      	cmp	r3, r1
 8009928:	f200 80ba 	bhi.w	8009aa0 <__udivdi3+0x264>
 800992c:	4610      	mov	r0, r2
 800992e:	1ac9      	subs	r1, r1, r3
 8009930:	b2a4      	uxth	r4, r4
 8009932:	fbb1 f3fe 	udiv	r3, r1, lr
 8009936:	fb0e 1113 	mls	r1, lr, r3, r1
 800993a:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800993e:	fb07 f703 	mul.w	r7, r7, r3
 8009942:	42a7      	cmp	r7, r4
 8009944:	d908      	bls.n	8009958 <__udivdi3+0x11c>
 8009946:	1964      	adds	r4, r4, r5
 8009948:	f103 32ff 	add.w	r2, r3, #4294967295
 800994c:	f080 808f 	bcs.w	8009a6e <__udivdi3+0x232>
 8009950:	42a7      	cmp	r7, r4
 8009952:	f240 808c 	bls.w	8009a6e <__udivdi3+0x232>
 8009956:	3b02      	subs	r3, #2
 8009958:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800995c:	4631      	mov	r1, r6
 800995e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009962:	2600      	movs	r6, #0
 8009964:	4630      	mov	r0, r6
 8009966:	4631      	mov	r1, r6
 8009968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800996c:	f1c6 0420 	rsb	r4, r6, #32
 8009970:	fa22 f504 	lsr.w	r5, r2, r4
 8009974:	40b3      	lsls	r3, r6
 8009976:	432b      	orrs	r3, r5
 8009978:	fa20 fc04 	lsr.w	ip, r0, r4
 800997c:	fa01 f706 	lsl.w	r7, r1, r6
 8009980:	fa21 f504 	lsr.w	r5, r1, r4
 8009984:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009988:	ea4c 0707 	orr.w	r7, ip, r7
 800998c:	fbb5 f8fe 	udiv	r8, r5, lr
 8009990:	0c39      	lsrs	r1, r7, #16
 8009992:	fb0e 5518 	mls	r5, lr, r8, r5
 8009996:	fa1f fc83 	uxth.w	ip, r3
 800999a:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
 800999e:	fb0c f108 	mul.w	r1, ip, r8
 80099a2:	42a9      	cmp	r1, r5
 80099a4:	fa02 f206 	lsl.w	r2, r2, r6
 80099a8:	d904      	bls.n	80099b4 <__udivdi3+0x178>
 80099aa:	18ed      	adds	r5, r5, r3
 80099ac:	f108 34ff 	add.w	r4, r8, #4294967295
 80099b0:	d367      	bcc.n	8009a82 <__udivdi3+0x246>
 80099b2:	46a0      	mov	r8, r4
 80099b4:	1a6d      	subs	r5, r5, r1
 80099b6:	b2bf      	uxth	r7, r7
 80099b8:	fbb5 f4fe 	udiv	r4, r5, lr
 80099bc:	fb0e 5514 	mls	r5, lr, r4, r5
 80099c0:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
 80099c4:	fb0c fc04 	mul.w	ip, ip, r4
 80099c8:	458c      	cmp	ip, r1
 80099ca:	d904      	bls.n	80099d6 <__udivdi3+0x19a>
 80099cc:	18c9      	adds	r1, r1, r3
 80099ce:	f104 35ff 	add.w	r5, r4, #4294967295
 80099d2:	d35c      	bcc.n	8009a8e <__udivdi3+0x252>
 80099d4:	462c      	mov	r4, r5
 80099d6:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 80099da:	ebcc 0101 	rsb	r1, ip, r1
 80099de:	fba4 2302 	umull	r2, r3, r4, r2
 80099e2:	4299      	cmp	r1, r3
 80099e4:	d348      	bcc.n	8009a78 <__udivdi3+0x23c>
 80099e6:	d044      	beq.n	8009a72 <__udivdi3+0x236>
 80099e8:	4620      	mov	r0, r4
 80099ea:	2600      	movs	r6, #0
 80099ec:	e76c      	b.n	80098c8 <__udivdi3+0x8c>
 80099ee:	f1c8 0420 	rsb	r4, r8, #32
 80099f2:	fa01 f308 	lsl.w	r3, r1, r8
 80099f6:	fa05 f508 	lsl.w	r5, r5, r8
 80099fa:	fa20 f704 	lsr.w	r7, r0, r4
 80099fe:	40e1      	lsrs	r1, r4
 8009a00:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8009a04:	431f      	orrs	r7, r3
 8009a06:	fbb1 f6fe 	udiv	r6, r1, lr
 8009a0a:	0c3a      	lsrs	r2, r7, #16
 8009a0c:	fb0e 1116 	mls	r1, lr, r6, r1
 8009a10:	fa1f fc85 	uxth.w	ip, r5
 8009a14:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
 8009a18:	fb0c f206 	mul.w	r2, ip, r6
 8009a1c:	429a      	cmp	r2, r3
 8009a1e:	fa00 f408 	lsl.w	r4, r0, r8
 8009a22:	d907      	bls.n	8009a34 <__udivdi3+0x1f8>
 8009a24:	195b      	adds	r3, r3, r5
 8009a26:	f106 31ff 	add.w	r1, r6, #4294967295
 8009a2a:	d237      	bcs.n	8009a9c <__udivdi3+0x260>
 8009a2c:	429a      	cmp	r2, r3
 8009a2e:	d935      	bls.n	8009a9c <__udivdi3+0x260>
 8009a30:	3e02      	subs	r6, #2
 8009a32:	442b      	add	r3, r5
 8009a34:	1a9b      	subs	r3, r3, r2
 8009a36:	b2bf      	uxth	r7, r7
 8009a38:	fbb3 f0fe 	udiv	r0, r3, lr
 8009a3c:	fb0e 3310 	mls	r3, lr, r0, r3
 8009a40:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8009a44:	fb0c f100 	mul.w	r1, ip, r0
 8009a48:	4299      	cmp	r1, r3
 8009a4a:	d907      	bls.n	8009a5c <__udivdi3+0x220>
 8009a4c:	195b      	adds	r3, r3, r5
 8009a4e:	f100 32ff 	add.w	r2, r0, #4294967295
 8009a52:	d221      	bcs.n	8009a98 <__udivdi3+0x25c>
 8009a54:	4299      	cmp	r1, r3
 8009a56:	d91f      	bls.n	8009a98 <__udivdi3+0x25c>
 8009a58:	3802      	subs	r0, #2
 8009a5a:	442b      	add	r3, r5
 8009a5c:	1a5a      	subs	r2, r3, r1
 8009a5e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8009a62:	4667      	mov	r7, ip
 8009a64:	e750      	b.n	8009908 <__udivdi3+0xcc>
 8009a66:	4610      	mov	r0, r2
 8009a68:	e716      	b.n	8009898 <__udivdi3+0x5c>
 8009a6a:	460b      	mov	r3, r1
 8009a6c:	e729      	b.n	80098c2 <__udivdi3+0x86>
 8009a6e:	4613      	mov	r3, r2
 8009a70:	e772      	b.n	8009958 <__udivdi3+0x11c>
 8009a72:	40b0      	lsls	r0, r6
 8009a74:	4290      	cmp	r0, r2
 8009a76:	d2b7      	bcs.n	80099e8 <__udivdi3+0x1ac>
 8009a78:	1e60      	subs	r0, r4, #1
 8009a7a:	2600      	movs	r6, #0
 8009a7c:	e724      	b.n	80098c8 <__udivdi3+0x8c>
 8009a7e:	4630      	mov	r0, r6
 8009a80:	e722      	b.n	80098c8 <__udivdi3+0x8c>
 8009a82:	42a9      	cmp	r1, r5
 8009a84:	d995      	bls.n	80099b2 <__udivdi3+0x176>
 8009a86:	f1a8 0802 	sub.w	r8, r8, #2
 8009a8a:	441d      	add	r5, r3
 8009a8c:	e792      	b.n	80099b4 <__udivdi3+0x178>
 8009a8e:	458c      	cmp	ip, r1
 8009a90:	d9a0      	bls.n	80099d4 <__udivdi3+0x198>
 8009a92:	3c02      	subs	r4, #2
 8009a94:	4419      	add	r1, r3
 8009a96:	e79e      	b.n	80099d6 <__udivdi3+0x19a>
 8009a98:	4610      	mov	r0, r2
 8009a9a:	e7df      	b.n	8009a5c <__udivdi3+0x220>
 8009a9c:	460e      	mov	r6, r1
 8009a9e:	e7c9      	b.n	8009a34 <__udivdi3+0x1f8>
 8009aa0:	3802      	subs	r0, #2
 8009aa2:	4429      	add	r1, r5
 8009aa4:	e743      	b.n	800992e <__udivdi3+0xf2>
 8009aa6:	bf00      	nop

08009aa8 <__errno>:
 8009aa8:	4b01      	ldr	r3, [pc, #4]	; (8009ab0 <__errno+0x8>)
 8009aaa:	6818      	ldr	r0, [r3, #0]
 8009aac:	4770      	bx	lr
 8009aae:	bf00      	nop
 8009ab0:	200092b8 	.word	0x200092b8

08009ab4 <__libc_init_array>:
 8009ab4:	b570      	push	{r4, r5, r6, lr}
 8009ab6:	4b0e      	ldr	r3, [pc, #56]	; (8009af0 <__libc_init_array+0x3c>)
 8009ab8:	4c0e      	ldr	r4, [pc, #56]	; (8009af4 <__libc_init_array+0x40>)
 8009aba:	1ae4      	subs	r4, r4, r3
 8009abc:	10a4      	asrs	r4, r4, #2
 8009abe:	2500      	movs	r5, #0
 8009ac0:	461e      	mov	r6, r3
 8009ac2:	42a5      	cmp	r5, r4
 8009ac4:	d004      	beq.n	8009ad0 <__libc_init_array+0x1c>
 8009ac6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009aca:	4798      	blx	r3
 8009acc:	3501      	adds	r5, #1
 8009ace:	e7f8      	b.n	8009ac2 <__libc_init_array+0xe>
 8009ad0:	f7f8 fd80 	bl	80025d4 <_init>
 8009ad4:	4c08      	ldr	r4, [pc, #32]	; (8009af8 <__libc_init_array+0x44>)
 8009ad6:	4b09      	ldr	r3, [pc, #36]	; (8009afc <__libc_init_array+0x48>)
 8009ad8:	1ae4      	subs	r4, r4, r3
 8009ada:	10a4      	asrs	r4, r4, #2
 8009adc:	2500      	movs	r5, #0
 8009ade:	461e      	mov	r6, r3
 8009ae0:	42a5      	cmp	r5, r4
 8009ae2:	d004      	beq.n	8009aee <__libc_init_array+0x3a>
 8009ae4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009ae8:	4798      	blx	r3
 8009aea:	3501      	adds	r5, #1
 8009aec:	e7f8      	b.n	8009ae0 <__libc_init_array+0x2c>
 8009aee:	bd70      	pop	{r4, r5, r6, pc}
 8009af0:	200092bc 	.word	0x200092bc
 8009af4:	200092bc 	.word	0x200092bc
 8009af8:	200092bc 	.word	0x200092bc
 8009afc:	200092bc 	.word	0x200092bc

08009b00 <__PWM_SVM_SVMUpdate_veneer>:
 8009b00:	b401      	push	{r0}
 8009b02:	4802      	ldr	r0, [pc, #8]	; (8009b0c <__PWM_SVM_SVMUpdate_veneer+0xc>)
 8009b04:	4684      	mov	ip, r0
 8009b06:	bc01      	pop	{r0}
 8009b08:	4760      	bx	ip
 8009b0a:	bf00      	nop
 8009b0c:	1fffcc01 	.word	0x1fffcc01

08009b10 <g_xmc_vadc_group_array>:
 8009b10:	40004400 40004800 40004c00 40005000     .D.@.H.@.L.@.P.@

08009b20 <UART_CONFIG_0_channel_config>:
 8009b20:	00004b00 10020808 00000000              .K..........

08009b2c <UART_CONFIG_0_config>:
 8009b2c:	08009b20 00000008 08002665 00000000      .......e&......
 8009b3c:	00000000                                ....

08009b40 <UART_0_channel_config>:
 8009b40:	00002580 10010808 00000000              .%..........

08009b4c <UART_0_tx_pin_config>:
 8009b4c:	00000090 00000001 00000002              ............

08009b58 <UART_0_tx_pin>:
 8009b58:	48028000 00000001 08009b4c              ...H....L...

08009b64 <UART_0_config>:
 8009b64:	08009b40 08002e45 08008531 08008555     @...E...1...U...
	...
 8009b88:	08009b58 05000000 00000105              X...........

08009b94 <UART_0_rx_pin_config>:
 8009b94:	00000000 00000001 00000002              ............

08009ba0 <PWM_SVM_0_PhUHighPin>:
 8009ba0:	48028000 00000003                       ...H....

08009ba8 <PWM_SVM_0_PhULowPin>:
 8009ba8:	48028200 0000000e                       ...H....

08009bb0 <PWM_SVM_0_PhVHighPin>:
 8009bb0:	48028000 00000004                       ...H....

08009bb8 <PWM_SVM_0_PhVLowPin>:
 8009bb8:	48028200 0000000f                       ...H....

08009bc0 <PWM_SVM_0_PhWHighPin>:
 8009bc0:	48028000 00000005                       ...H....

08009bc8 <PWM_SVM_0_PhWLowPin>:
 8009bc8:	48028000 00000002                       ...H....

08009bd0 <PWM_SVM_0_PhUHiOutPinConf>:
 8009bd0:	00000098 00010000 00000000              ............

08009bdc <PWM_SVM_0_PhULoOutPinConf>:
 8009bdc:	00000098 00010000 00000000              ............

08009be8 <PWM_SVM_0_PhVHiOutPinConf>:
 8009be8:	00000098 00010000 00000000              ............

08009bf4 <PWM_SVM_0_PhVLoOutPinConf>:
 8009bf4:	00000098 00010000 00000000              ............

08009c00 <PWM_SVM_0_PhWHiOutPinConf>:
 8009c00:	00000098 00010000 00000000              ............

08009c0c <PWM_SVM_0_PhWLoOutPinConf>:
 8009c0c:	00000098 00010000 00000000              ............

08009c18 <PWM_SVM_0_InverterPin>:
 8009c18:	48028000 00000008                       ...H....

08009c20 <PWM_SVM_0_InvPinConf>:
 8009c20:	00000080 00010000 00000000              ............

08009c2c <PWM_SVM_0_PhU>:
 8009c2c:	40020300 00000002                       ...@....

08009c34 <PWM_SVM_0_PhV>:
 8009c34:	40020200 00000001                       ...@....

08009c3c <PWM_SVM_0_PhW>:
 8009c3c:	40020100 00000000                       ...@....

08009c44 <PWM_SVM_0_CurrentTrig>:
 8009c44:	40020100 00000000                       ...@....

08009c4c <PWM_SVM_0_StartConfig>:
 8009c4c:	00000107                                ....

08009c50 <PWM_SVM_0_TimerInitHandle>:
 8009c50:	00000001 00000000 00000014 00000000     ................

08009c60 <PWM_SVM_0_TimerInit_CurrentTrig>:
 8009c60:	20000001 0000000f 00000000 00000000     ... ............

08009c70 <PWM_SVM_0_AppConfig>:
 8009c70:	4002023c 4002013c 01000000 01000000     <..@<..@........
 8009c80:	02000000 00010101 000186a0 07270e00     ..............'.
 8009c90:	00000100 00000111 00000003 00000000     ................
	...
 8009ca8:	03938700 00000727 00250000 00000001     ....'.....%.....
 8009cb8:	00000000                                ....

08009cbc <PWM_SVM_1_PhUHighPin>:
 8009cbc:	48028100 00000004                       ...H....

08009cc4 <PWM_SVM_1_PhULowPin>:
 8009cc4:	48028100 0000000a                       ...H....

08009ccc <PWM_SVM_1_PhVHighPin>:
 8009ccc:	48028100 00000005                       ...H....

08009cd4 <PWM_SVM_1_PhVLowPin>:
 8009cd4:	48028100 0000000b                       ...H....

08009cdc <PWM_SVM_1_PhWHighPin>:
 8009cdc:	48028100 0000000f                       ...H....

08009ce4 <PWM_SVM_1_PhWLowPin>:
 8009ce4:	48028100 0000000c                       ...H....

08009cec <PWM_SVM_1_PhUHiOutPinConf>:
 8009cec:	000000a0 00010000 00000000              ............

08009cf8 <PWM_SVM_1_PhULoOutPinConf>:
 8009cf8:	00000098 00010000 00000000              ............

08009d04 <PWM_SVM_1_PhVHiOutPinConf>:
 8009d04:	000000a0 00010000 00000000              ............

08009d10 <PWM_SVM_1_PhVLoOutPinConf>:
 8009d10:	00000098 00010000 00000000              ............

08009d1c <PWM_SVM_1_PhWHiOutPinConf>:
 8009d1c:	00000098 00010000 00000000              ............

08009d28 <PWM_SVM_1_PhWLoOutPinConf>:
 8009d28:	00000098 00010000 00000000              ............

08009d34 <PWM_SVM_1_InverterPin>:
 8009d34:	48028f00 00000009                       ...H....

08009d3c <PWM_SVM_1_InvPinConf>:
 8009d3c:	00000080 00010000 00000000              ............

08009d48 <PWM_SVM_1_PhU>:
 8009d48:	40024300 00000002                       .C.@....

08009d50 <PWM_SVM_1_PhV>:
 8009d50:	40024200 00000001                       .B.@....

08009d58 <PWM_SVM_1_PhW>:
 8009d58:	40024100 00000000                       .A.@....

08009d60 <PWM_SVM_1_CurrentTrig>:
 8009d60:	40024100 00000000                       .A.@....

08009d68 <PWM_SVM_1_StartConfig>:
 8009d68:	00000107                                ....

08009d6c <PWM_SVM_1_TimerInitHandle>:
 8009d6c:	00000001 00000000 00000014 00000000     ................

08009d7c <PWM_SVM_1_TimerInit_CurrentTrig>:
 8009d7c:	20000001 0000000f 00000000 00000000     ... ............

08009d8c <PWM_SVM_1_AppConfig>:
 8009d8c:	4002423c 4002413c 01000000 01000000     <B.@<A.@........
 8009d9c:	02000000 00010101 000186a0 07270e00     ..............'.
 8009dac:	00000200 00000111 00000004 00000005     ................
 8009dbc:	00001005 00000000 03938700 00000727     ............'...
 8009dcc:	00250000 00000001 00000000              ..%.........

08009dd8 <Sinus60_tab>:
 8009dd8:	00210000 00640043 00a70086 00ea00c9     ..!.C.d.........
 8009de8:	012d010c 0170014f 01b30192 01f601d5     ..-.O.p.........
 8009df8:	02390218 027c025b 02bf029e 030202e1     ..9.[.|.........
 8009e08:	03450324 03880367 03cb03aa 040e03ed     $.E.g...........
 8009e18:	04510430 04940473 04d704b6 051a04f9     0.Q.s...........
 8009e28:	055d053b 05a0057e 05e305c1 06260604     ;.].~.........&.
 8009e38:	06690647 06ac068a 06ef06cd 07320710     G.i...........2.
 8009e48:	07740753 07b70796 07fa07d9 083d081c     S.t...........=.
 8009e58:	0880085f 08c308a1 090608e4 09490927     _...........'.I.
 8009e68:	098b096a 09ce09ad 0a1109f0 0a540a32     j...........2.T.
 8009e78:	0a970a75 0ad90ab8 0b1c0afb 0b5f0b3e     u...........>._.
 8009e88:	0ba20b80 0be40bc3 0c270c06 0c6a0c49     ..........'.I.j.
 8009e98:	0cad0c8b 0cef0cce 0d320d11 0d750d53     ..........2.S.u.
 8009ea8:	0db70d96 0dfa0dd9 0e3c0e1b 0e7f0e5e     ..........<.^...
 8009eb8:	0ec20ea0 0f040ee3 0f470f25 0f890f68     ........%.G.h...
 8009ec8:	0fcc0fab 100e0fed 10511030 10931072     ........0.Q.r...
 8009ed8:	10d610b4 111810f7 115b1139 119d117c     ........9.[.|...
 8009ee8:	11df11be 12221200 12641243 12a61285     ......".C.d.....
 8009ef8:	12e912c7 132b130a 136d134c 13af138e     ......+.L.m.....
 8009f08:	13f213d0 14341413 14761455 14b81497     ......4.U.v.....
 8009f18:	14fa14d9 153c151b 157e155d 15c0159f     ......<.].~.....
 8009f28:	160215e1 16441623 16861665 16c816a7     ....#.D.e.......
 8009f38:	170a16e9 174c172b 178e176d 17d017af     ....+.L.m.......
 8009f48:	181217f1 18541833 18951875 18d718b6     ....3.T.u.......
 8009f58:	191918f8 195b193a 199c197b 19de19bd     ....:.[.{.......
 8009f68:	1a2019ff 1a611a40 1aa31a82 1ae41ac3     .. .@.a.........
 8009f78:	1b261b05 1b671b46 1ba91b88 1bea1bc9     ..&.F.g.........
 8009f88:	1c2b1c0b 1c6d1c4c 1cae1c8e 1cef1ccf     ..+.L.m.........
 8009f98:	1d311d10 1d721d51 1db31d93 1df41dd4     ..1.Q.r.........
 8009fa8:	1e351e15 1e771e56 1eb81e97 1ef91ed8     ..5.V.w.........
 8009fb8:	1f3a1f19 1f7b1f5a 1fbc1f9b 1ffd1fdc     ..:.Z.{.........
 8009fc8:	203d201d 207e205e 20bf209f 210020df     . = ^ ~ . . . .!
 8009fd8:	21412120 21812161 21c221a2 220321e2      !A!a!.!.!.!.!."
 8009fe8:	22432223 22842263 22c422a4 230522e4     #"C"c".".".".".#
 8009ff8:	23452325 23862365 23c623a6 240623e6     %#E#e#.#.#.#.#.$
 800a008:	24472426 24872467 24c724a7 250724e7     &$G$g$.$.$.$.$.%
 800a018:	25472527 25872567 25c725a7 260725e7     '%G%g%.%.%.%.%.&
 800a028:	26472627 26872667 26c726a7 270726e7     '&G&g&.&.&.&.&.'
 800a038:	27472727 27872767 27c627a7 280627e6     ''G'g'.'.'.'.'.(
 800a048:	28462826 28852866 28c528a5 290428e5     &(F(f(.(.(.(.(.)
 800a058:	29442924 29832964 29c329a3 2a0229e2     $)D)d).).).).).*
 800a068:	2a412a22 2a802a61 2ac02aa0 2aff2adf     "*A*a*.*.*.*.*.*
 800a078:	2b3e2b1e 2b7d2b5d 2bbc2b9c 2bfb2bdb     .+>+]+}+.+.+.+.+
 800a088:	2c3a2c1a 2c792c59 2cb82c98 2cf62cd7     .,:,Y,y,.,.,.,.,
 800a098:	2d352d16 2d742d54 2db22d93 2df12dd2     .-5-T-t-.-.-.-.-
 800a0a8:	2e2f2e10 2e6e2e4f 2eac2e8d 2eeb2ecc     ../.O.n.........
 800a0b8:	2f292f0a 2f672f48 2fa62f86 2fe42fc5     ./)/H/g/././././
 800a0c8:	30223003 30603041 309e307f 30dc30bd     .0"0A0`0.0.0.0.0
 800a0d8:	311a30fb 31583139 31963177 31d331b4     .0.191X1w1.1.1.1
 800a0e8:	321131f2 324f3230 328c326d 32ca32ab     .1.202O2m2.2.2.2
 800a0f8:	330732e9 33453326 33823363 33bf33a1     .2.3&3E3c3.3.3.3
 800a108:	33fd33de 343a341b 34773458 34b43496     .3.3.4:4X4w4.4.4
 800a118:	34f134d3 352e3510 356b354d 35a8358a     .4.4.5.5M5k5.5.5
 800a128:	35e535c6 36223603 365e3640 369b367d     .5.5.6"6@6^6}6.6
 800a138:	36d736b9 371436f6 37503732 378d376f     .6.6.6.727P7o7.7
 800a148:	37c937ab 380637e7 38423824 387e3860     .7.7.7.8$8B8`8~8
 800a158:	38ba389c 38f638d8 39323914 396e3950     .8.8.8.8.929P9n9
 800a168:	39aa398c 39e639c8 3a213a04 3a5d3a3f     .9.9.9.9.:!:?:]:
 800a178:	3a993a7b 3ad43ab6 3b103af2 3b4b3b2d     {:.:.:.:.:.;-;K;
 800a188:	3b863b69 3bc23ba4 3bfd3bdf 3c383c1b     i;.;.;.;.;.;.<8<
 800a198:	3c733c56 3cae3c91 3ce93ccc 3d243d07     V<s<.<.<.<.<.=$=
 800a1a8:	3d5f3d42 3d9a3d7c 3dd53db7 3e0f3df2     B=_=|=.=.=.=.=.>
 800a1b8:	3e4a3e2c 3e843e67 3ebf3ea2 3ef93edc     ,>J>g>.>.>.>.>.>
 800a1c8:	3f333f16 3f6e3f51 3fa83f8b 3fe23fc5     .?3?Q?n?.?.?.?.?
 800a1d8:	401c3fff 40564039 40904073 40ca40ad     .?.@9@V@s@.@.@.@
 800a1e8:	410340e7 413d4120 4177415a 41b04194     .@.A A=AZAwA.A.A
 800a1f8:	41ea41cd 42234207 425d4240 42964279     .A.A.B#B@B]ByB.B
 800a208:	42cf42b2 430842ec 43414325 437a435e     .B.B.B.C%CAC^CzC
 800a218:	43b34397 43ec43d0 44254408 445d4441     .C.C.C.C.D%DAD]D
 800a228:	4496447a 44cf44b2 450744eb 453f4523     zD.D.D.D.D.E#E?E
 800a238:	4578455c 45b04594 45e845cc 46204604     \ExE.E.E.E.E.F F
 800a248:	4658463c 46904674 46c846ac 470046e4     <FXFtF.F.F.F.F.G
 800a258:	4738471c 476f4754 47a7478b 47de47c3     .G8GTGoG.G.G.G.G
 800a268:	481647fa 484d4832 48844869 48bc48a0     .G.H2HMHiH.H.H.H
 800a278:	48f348d7 492a490e 49614945 4998497c     .H.H.I*IEIaI|I.I
 800a288:	49ce49b3 4a0549ea 4a3c4a20 4a724a57     .I.I.I.J J<JWJrJ
 800a298:	4aa94a8e 4adf4ac4 4b154afa 4b4c4b31     .J.J.J.J.J.K1KLK
 800a2a8:	4b824b67 4bb84b9d 4bee4bd3 4c244c09     gK.K.K.K.K.K.L$L
 800a2b8:	4c5a4c3f 4c8f4c75 4cc54caa 4cfb4ce0     ?LZLuL.L.L.L.L.L
 800a2c8:	4d304d15 4d664d4b 4d9b4d80 4dd04db6     .M0MKMfM.M.M.M.M
 800a2d8:	4e054deb 4e3a4e20 4e6f4e55 4ea44e8a     .M.N N:NUNoN.N.N
 800a2e8:	4ed94ebf 4f0e4ef4 4f434f28 4f774f5d     .N.N.N.O(OCO]OwO
 800a2f8:	4fac4f91 4fe04fc6 50144ffa 5049502f     .O.O.O.O.O.P/PIP
 800a308:	507d5063 50b15097 50e550cb 511950ff     cP}P.P.P.P.P.P.Q
 800a318:	514d5133 51805166 51b4519a 51e751ce     3QMQfQ.Q.Q.Q.Q.Q
 800a328:	521b5201 524e5235 52825268 52b5529b     .R.R5RNRhR.R.R.R
 800a338:	52e852ce 531b5301 534e5334 53815367     .R.R.S.S4SNSgS.S
 800a348:	53b3539a 53e653cd 541953ff 544b5432     .S.S.S.S.S.T2TKT
 800a358:	547d5464 54b05497 54e254c9 551454fb     dT}T.T.T.T.T.T.U
 800a368:	5546552d 5578555f 55aa5591 55dc55c3     -UFU_UxU.U.U.U.U
 800a378:	560d55f4 563f5626 56705658 56a25689     .U.V&V?VXVpV.V.V
 800a388:	56d356ba 570456ec 5735571d 5766574e     .V.V.V.W.W5WNWfW
 800a398:	5797577f 57c857b0 57f957e0 58295811     .W.W.W.W.W.W.X)X
 800a3a8:	585a5842 588a5872 58bb58a3 58eb58d3     BXZXrX.X.X.X.X.X
 800a3b8:	591b5903 594b5933 597b5963 59ab5993     .Y.Y3YKYcY{Y.Y.Y
 800a3c8:	59db59c3 5a0a59f3 5a3a5a22 5a6a5a52     .Y.Y.Y.Z"Z:ZRZjZ
 800a3d8:	5a995a81 5ac85ab1 5af75ae0 5b275b0f     .Z.Z.Z.Z.Z.Z.['[
 800a3e8:	5b565b3e 5b845b6d 5bb35b9c 5be25bcb     >[V[m[.[.[.[.[.[
 800a3f8:	5c115bf9 5c3f5c28 5c6d5c56 5c9c5c85     .[.\(\?\V\m\.\.\
 800a408:	5cca5cb3 5cf85ce1 5d265d0f 5d545d3d     .\.\.\.\.]&]=]T]
 800a418:	5d825d6b 5db05d99 5ddd5dc6 5e0b5df4     k].].].].].].].^
 800a428:	5e385e21 5e655e4f 5e935e7c 5ec05ea9     !^8^O^e^|^.^.^.^
 800a438:	5eed5ed6 5f1a5f03 5f465f30 5f735f5d     .^.^._._0_F_]_s_
 800a448:	5fa05f89 5fcc5fb6 5ff95fe2 6025600f     ._._._._._._.`%`
 800a458:	6051603b 607d6067 60a96093 60d560bf     ;`Q`g`}`.`.`.`.`
 800a468:	610160eb 612c6117 61586142 6184616e     .`.a.a,aBaXana.a
 800a478:	61af6199 61da61c5 620561f0 6230621b     .a.a.a.a.a.b.b0b
 800a488:	625b6246 62866271 62b1629b 62db62c6     Fb[bqb.b.b.b.b.b
 800a498:	630662f1 6330631b 635b6346 63856370     .b.c.c0cFc[cpc.c
 800a4a8:	63af639a 63d963c4 640363ee 642d6418     .c.c.c.c.c.d.d-d
 800a4b8:	64566441 6480646b 64a96495 64d364be     AdVdkd.d.d.d.d.d
 800a4c8:	64fc64e7 65256510 654e6539 65776562     .d.d.e%e9eNebewe
 800a4d8:	65a0658b 65c865b4 65f165dd 66196605     .e.e.e.e.e.e.f.f
 800a4e8:	6642662e 666a6656 6692667e 66ba66a6     .fBfVfjf~f.f.f.f
 800a4f8:	66e266ce 670a66f6 6732671e 67596745     .f.f.f.g.g2gEgYg
 800a508:	6781676d 67a86794 67cf67bc 67f667e3     mg.g.g.g.g.g.g.g
 800a518:	681e680a 68446831 686b6858 6892687f     .h.h1hDhXhkh.h.h
 800a528:	68b968a5 68df68cc 690568f2 692c6919     .h.h.h.h.h.i.i,i
 800a538:	6952693f 69786965 699e698b 69c469b1     ?iRieixi.i.i.i.i
 800a548:	69e969d6 6a0f69fc 6a346a22 6a5a6a47     .i.i.i.j"j4jGjZj
 800a558:	6a7f6a6c 6aa46a91 6ac96ab6 6aee6adb     lj.j.j.j.j.j.j.j
 800a568:	6b136b00 6b376b25 6b5c6b4a 6b806b6e     .k.k%k7kJk\knk.k
 800a578:	6ba56b92 6bc96bb7 6bed6bdb 6c116bff     .k.k.k.k.k.k.k.l
 800a588:	6c356c23 6c586c47 6c7c6c6a 6ca06c8e     #l5lGlXljl|l.l.l
 800a598:	6cc36cb1 6ce66cd5 6d096cf8 6d2c6d1b     .l.l.l.l.l.m.m,m
 800a5a8:	6d4f6d3e 6d726d61 6d956d84 6db76da6     >mOmamrm.m.m.m.m
 800a5b8:	6dda6dc9 6dfc6deb 6e1e6e0d 6e416e30     .m.m.m.m.n.n0nAn
 800a5c8:	6e636e52 6e846e73 6ea66e95 6ec86eb7     Rncnsn.n.n.n.n.n
 800a5d8:	00006ed9                                .n..

0800a5dc <PWM_CCU4_2_timer_handle>:
 800a5dc:	00000000 00000001                       ........

0800a5e4 <PWM_CCU4_2_event0_config>:
 800a5e4:	00010000                                ....

0800a5e8 <PWM_CCU4_2_event1_config>:
 800a5e8:	00010000                                ....

0800a5ec <PWM_CCU4_2_event2_config>:
 800a5ec:	00010000                                ....

0800a5f0 <PWM_CCU4_2_ch1_out0_config>:
 800a5f0:	00000098 00010000 00000004              ............

0800a5fc <PWM_CCU4_2_config_handle>:
 800a5fc:	09c30001 000004e2 00000000 00000000     ................
 800a60c:	00000000 0800a5e4 0800a5e8 0800a5ec     ................
	...
 800a628:	01000000 00000000 04000000 0800a5dc     ................
 800a638:	00000001 48028300 00000000 0800a5f0     .......H........
 800a648:	1fffce8c                                ....

0800a64c <I2C_MASTER_0_sda_pin_config>:
 800a64c:	000000d0 00000001 00000000              ............

0800a658 <I2C_MASTER_0_scl_pin_config>:
 800a658:	000000d0 00000001 00000000              ............

0800a664 <I2C_MASTER_0_channel_config>:
 800a664:	000186a0 00000000                       ........

0800a66c <I2C_MASTER_0_config>:
 800a66c:	0800a664 08005245 08005221 08005201     d...ER..!R...R..
	...
 800a690:	04040000 00005957                       ....WY..

0800a698 <group_init_handle0>:
	...

0800a6ac <group_init_handle1>:
	...

0800a6c0 <group_init_handle2>:
	...

0800a6d4 <group_init_handle3>:
	...

0800a6e8 <global_config>:
 800a6e8:	00000000 00000003 00000000 00000000     ................
	...

0800a700 <Cooling_FAN>:
 800a700:	48028000 00000080 00010000 00000000     ...H............
 800a710:	0000000a                                ....

0800a714 <Disable_Gate_Driver_M3>:
 800a714:	48028000 00000080 00010000 00000000     ...H............
 800a724:	0000000b                                ....

0800a728 <DIGITAL_IO_2>:
 800a728:	48028000 00000000 00000000 00000000     ...H............
 800a738:	00000009                                ....

0800a73c <DIGITAL_IO_3>:
 800a73c:	48028100 00000080 00010000 00000000     ...H............
 800a74c:	00000001                                ....

0800a750 <DIGITAL_IO_4>:
 800a750:	48028100 00000080 00010000 00000000     ...H............
 800a760:	0000000d                                ....

0800a764 <DIGITAL_IO_5>:
 800a764:	48028100 00000080 00010000 00000000     ...H............
 800a774:	0000000e                                ....

0800a778 <DIGITAL_IO_6>:
 800a778:	48028100 00000080 00010000 00000000     ...H............
 800a788:	00000002                                ....

0800a78c <DIGITAL_IO_7>:
 800a78c:	48028100 00000000 00000000 00000000     ...H............
 800a79c:	00000003                                ....

0800a7a0 <DIGITAL_IO_8>:
 800a7a0:	48028200 00000080 00000001 00000000     ...H............
 800a7b0:	00000000                                ....

0800a7b4 <DIGITAL_IO_9>:
 800a7b4:	48028200 00000080 00010000 00000000     ...H............
 800a7c4:	0000000a                                ....

0800a7c8 <DIGITAL_IO_10>:
 800a7c8:	48028200 00000000 00000000 00000000     ...H............
 800a7d8:	00000002                                ....

0800a7dc <DIGITAL_IO_11>:
 800a7dc:	48028200 00000000 00000000 00000000     ...H............
 800a7ec:	00000003                                ....

0800a7f0 <DIGITAL_IO_12>:
 800a7f0:	48028200 00000000 00000000 00000000     ...H............
 800a800:	00000006                                ....

0800a804 <DIGITAL_IO_13>:
 800a804:	48028200 00000000 00000000 00000000     ...H............
 800a814:	00000007                                ....

0800a818 <RS485_DIR>:
 800a818:	48028300 00000080 00010000 00000000     ...H............
 800a828:	00000001                                ....

0800a82c <DIGITAL_IO_15>:
 800a82c:	48028300 00000000 00000000 00000000     ...H............
 800a83c:	00000002                                ....

0800a840 <IO_Bit1_DIR>:
 800a840:	48028300 00000080 00010000 00000000     ...H............
 800a850:	00000003                                ....

0800a854 <IO_Bit0_DIR>:
 800a854:	48028300 00000080 00010000 00000000     ...H............
 800a864:	00000004                                ....

0800a868 <HS_Overtemp>:
 800a868:	48028300 00000000 00000000 00000000     ...H............
 800a878:	00000005                                ....

0800a87c <IO_Bit3_DIR>:
 800a87c:	48028400 00000080 00010000 00000000     ...H............
 800a88c:	00000000                                ....

0800a890 <IO_Bit2_DIR>:
 800a890:	48028400 00000080 00010000 00000000     ...H............
 800a8a0:	00000001                                ....

0800a8a4 <IO_Bit2>:
 800a8a4:	48028500 00000080 00010000 00000000     ...H............
 800a8b4:	00000001                                ....

0800a8b8 <IO_Bit1>:
 800a8b8:	48028500 00000000 00000000 00000000     ...H............
 800a8c8:	00000002                                ....

0800a8cc <IO_Bit0>:
 800a8cc:	48028500 00000000 00000000 00000000     ...H............
 800a8dc:	00000007                                ....

0800a8e0 <IO_Bit3>:
 800a8e0:	48028500 00000080 00010000 00000000     ...H............
 800a8f0:	00000000                                ....

0800a8f4 <Disable_Gate_Driver_M1_M2>:
 800a8f4:	48028000 00000080 00010000 00000000     ...H............
 800a904:	00000006                                ....

0800a908 <DIGITAL_IO_26>:
 800a908:	48028f00 00000000 00000000 00000000     ...H............
 800a918:	00000008                                ....

0800a91c <DIGITAL_IO_27>:
 800a91c:	48028100 00000000 00000000 00000000     ...H............
 800a92c:	00000000                                ....

0800a930 <DIGITAL_IO_28>:
 800a930:	48028f00 00000000 00000000 00000000     ...H............
 800a940:	00000003                                ....

0800a944 <DIGITAL_IO_29>:
 800a944:	48028100 00000000 00000000 00000000     ...H............
 800a954:	00000009 01040250 01010000 00008000     ....P...........
 800a964:	00010000 01010101                       ........

0800a96c <CCU8_SLICE_CONFIG_0>:
 800a96c:	0800576d 1fffce6c 40020400 00000003     mW..l......@....

0800a97c <CCU8_SLICE_CONFIG_0_compare_config>:
	...
 800a984:	00000014 000000f0                       ........

0800a98c <CCU8_SLICE_CONFIG_0_event0_config>:
 800a98c:	00000000                                ....

0800a990 <CCU8_SLICE_CONFIG_0_event1_config>:
 800a990:	00000000                                ....

0800a994 <CCU8_SLICE_CONFIG_0_event2_config>:
 800a994:	00000000                                ....

0800a998 <CCU4_SLICE_CONFIG_0>:
 800a998:	080058c1 1fffce8c 48004400 00000003     .X.......D.H....

0800a9a8 <CCU4_SLICE_CONFIG_0_compare_config>:
 800a9a8:	00000000 000000f0                       ........

0800a9b0 <CCU4_SLICE_CONFIG_0_event0_config>:
 800a9b0:	00000000                                ....

0800a9b4 <CCU4_SLICE_CONFIG_0_event1_config>:
 800a9b4:	00000000                                ....

0800a9b8 <CCU4_SLICE_CONFIG_0_event2_config>:
 800a9b8:	00000000                                ....

0800a9bc <AUTOMATION_FB_Ramp0_Config>:
 800a9bc:	00000000 000005dc 00000064 00001a0a     ........d.......
 800a9cc:	0000012c 000004b0 0000029a 000000c8     ,...............
 800a9dc:	00140000 525f4246 5f504d41 00000030     ....FB_RAMP_0...
 800a9ec:	525f4246 5f504d41 00000031              FB_RAMP_1...

0800a9f8 <AUTOMATION_FB_Ramp1_Config>:
 800a9f8:	00000000 000005dc 00000064 00001a0a     ........d.......
 800aa08:	0000012c 000004b0 0000029a 000000c8     ,...............
 800aa18:	00140000                                ....

0800aa1c <ANALOG_IO_0>:
 800aa1c:	00000000 200092fc 48028e00 00000001     ....... ...H....

0800aa2c <ANALOG_IO_1>:
 800aa2c:	00000000 200092fd 48028e00 00000000     ....... ...H....

0800aa3c <ANALOG_IO_2>:
 800aa3c:	00000000 200092fe 48028f00 00000002     ....... ...H....

0800aa4c <global_iclass_config>:
 800aa4c:	00000000                                ....

0800aa50 <backgnd_rs_intr_handle>:
 800aa50:	00000010 0000003f 00000000              ....?.......

0800aa5c <backgnd_config>:
 800aa5c:	00000005 00000000 00000018 0066666f     ............off.
 800aa6c:	62616e65 0064656c 00006e6f 7265706f     enabled.on..oper
 800aa7c:	6f697461 0000006e 73616f63 74732074     ation...coast st
 800aa8c:	0000706f 63697571 7473206b 0000706f     op..quick stop..
 800aa9c:	706d6172 776f6420 0000006e 6f727265     ramp down...erro
 800aaac:	00000072 65666173 00000000 65736572     r...safe....rese
 800aabc:	00657672 72657375 66656420 00656e69     rve.user define.
 800aacc:	756f7274 00656c62 4d494341 4552465f     trouble.ACIM_FRE
 800aadc:	54435f51 305f4c52 00000000 4d494341     Q_CTRL_0....ACIM
 800aaec:	4552465f 54435f51 315f4c52 00000000     _FREQ_CTRL_1....

0800aafc <ACIM_FREQ_CTRL_0_STATES>:
 800aafc:	0800aa68 080076d5 080076e9 08007721     h....v...v..!w..
 800ab0c:	0800aa6c 00000000 080077cd 08007801     l........w...x..
 800ab1c:	0800aa74 00000000 0800782d 00000000     t.......-x......
 800ab2c:	0800aa78 08007861 08007875 080078e5     x...ax..ux...x..
 800ab3c:	0800aa84 0800791d 08007931 08007959     .....y..1y..Yy..
 800ab4c:	0800aa90 08007999 080079ad 080079d5     .....y...y...y..
 800ab5c:	0800aa9c 08007a15 08007a45 00000000     .....z..Ez......
 800ab6c:	0800aaa8 08007a6d 08007a81 08007ab1     ....mz...z...z..
 800ab7c:	0800aab0 08007759 0800776d 08007795     ....Yw..mw...w..
 800ab8c:	0800aab8 00000000 00000000 00000000     ................
 800ab9c:	0800aab8 00000000 00000000 00000000     ................
 800abac:	0800aac0 00000000 00000000 00000000     ................
 800abbc:	0800aac0 00000000 00000000 00000000     ................
 800abcc:	0800aab8 00000000 00000000 00000000     ................
 800abdc:	0800aab8 00000000 00000000 00000000     ................
 800abec:	0800aacc 00000000 08007b09 00000000     .........{......

0800abfc <ACIM_FREQ_CTRL_0_Config>:
 800abfc:	00000bb8 00016781 00000018 3fff0000     .....g.........?
 800ac0c:	04050101 31190f05 00000000              .......1....

0800ac18 <ACIM_FREQ_CTRL_1_STATES>:
 800ac18:	0800aa68 080076d5 080076e9 08007721     h....v...v..!w..
 800ac28:	0800aa6c 00000000 080077cd 08007801     l........w...x..
 800ac38:	0800aa74 00000000 0800782d 00000000     t.......-x......
 800ac48:	0800aa78 08007861 08007875 080078e5     x...ax..ux...x..
 800ac58:	0800aa84 0800791d 08007931 08007959     .....y..1y..Yy..
 800ac68:	0800aa90 08007999 080079ad 080079d5     .....y...y...y..
 800ac78:	0800aa9c 08007a15 08007a45 00000000     .....z..Ez......
 800ac88:	0800aaa8 08007a6d 08007a81 08007ab1     ....mz...z...z..
 800ac98:	0800aab0 08007759 0800776d 08007795     ....Yw..mw...w..
 800aca8:	0800aab8 00000000 00000000 00000000     ................
 800acb8:	0800aab8 00000000 00000000 00000000     ................
 800acc8:	0800aac0 00000000 00000000 00000000     ................
 800acd8:	0800aac0 00000000 00000000 00000000     ................
 800ace8:	0800aab8 00000000 00000000 00000000     ................
 800acf8:	0800aab8 00000000 00000000 00000000     ................
 800ad08:	0800aacc 00000000 08007b09 00000000     .........{......

0800ad18 <ACIM_FREQ_CTRL_1_Config>:
 800ad18:	00000bb8 00016781 00000018 3fff0000     .....g.........?
 800ad28:	04050101 1114140a 00000000 00676f6c     ............log.
 800ad38:	00000000 00000043                       ....C...

Disassembly of section .ram_code:

1fffc800 <PWM_SVM_lSymCompValUpdate>:
        (XMC_CCU8_SLICE_COMPARE_CHANNEL_t) XMC_CCU8_SLICE_COMPARE_CHANNEL_2,
        (uint16_t)(HandlePtr->v_tb + (uint16_t)((uint16_t) HandlePtr->tb >> (uint16_t) 1) + (uint16_t) HandlePtr->ta));

}
static void PWM_SVM_lSymCompValUpdate(PWM_SVM_t* const HandlePtr)
{
1fffc800:	b480      	push	{r7}
1fffc802:	b083      	sub	sp, #12
1fffc804:	af00      	add	r7, sp, #0
1fffc806:	6078      	str	r0, [r7, #4]
  /*Update the compare register with appropriate value  based on sector*/
  switch ((HandlePtr->sector & 7U))
1fffc808:	687b      	ldr	r3, [r7, #4]
1fffc80a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
1fffc80e:	f003 0307 	and.w	r3, r3, #7
1fffc812:	2b04      	cmp	r3, #4
1fffc814:	f200 8086 	bhi.w	1fffc924 <__initial_sp+0x124>
1fffc818:	a201      	add	r2, pc, #4	; (adr r2, 1fffc820 <__initial_sp+0x20>)
1fffc81a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1fffc81e:	bf00      	nop
1fffc820:	1fffc835 	.word	0x1fffc835
1fffc824:	1fffc865 	.word	0x1fffc865
1fffc828:	1fffc895 	.word	0x1fffc895
1fffc82c:	1fffc8c5 	.word	0x1fffc8c5
1fffc830:	1fffc8f5 	.word	0x1fffc8f5
    {
    case 0:/*sector 0*/
      *HandlePtr->phaseu_crs = (uint32_t) HandlePtr->v_tb;
1fffc834:	687b      	ldr	r3, [r7, #4]
1fffc836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
1fffc838:	687a      	ldr	r2, [r7, #4]
1fffc83a:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
1fffc83e:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasev_crs = (uint32_t) (HandlePtr->v_tb + HandlePtr->tb);
1fffc840:	687b      	ldr	r3, [r7, #4]
1fffc842:	6f5b      	ldr	r3, [r3, #116]	; 0x74
1fffc844:	687a      	ldr	r2, [r7, #4]
1fffc846:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
1fffc84a:	4611      	mov	r1, r2
1fffc84c:	687a      	ldr	r2, [r7, #4]
1fffc84e:	f8b2 20b0 	ldrh.w	r2, [r2, #176]	; 0xb0
1fffc852:	440a      	add	r2, r1
1fffc854:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasew_crs = (uint32_t) HandlePtr->v_ta;
1fffc856:	687b      	ldr	r3, [r7, #4]
1fffc858:	6f9b      	ldr	r3, [r3, #120]	; 0x78
1fffc85a:	687a      	ldr	r2, [r7, #4]
1fffc85c:	f8b2 20b6 	ldrh.w	r2, [r2, #182]	; 0xb6
1fffc860:	601a      	str	r2, [r3, #0]
       break;
1fffc862:	e077      	b.n	1fffc954 <__initial_sp+0x154>
    case 1:/*sector 1*/
      *HandlePtr->phaseu_crs = (uint32_t) (HandlePtr->v_tb + HandlePtr->ta);
1fffc864:	687b      	ldr	r3, [r7, #4]
1fffc866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
1fffc868:	687a      	ldr	r2, [r7, #4]
1fffc86a:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
1fffc86e:	4611      	mov	r1, r2
1fffc870:	687a      	ldr	r2, [r7, #4]
1fffc872:	f8b2 20ae 	ldrh.w	r2, [r2, #174]	; 0xae
1fffc876:	440a      	add	r2, r1
1fffc878:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasev_crs = (uint32_t) (HandlePtr->v_tb);
1fffc87a:	687b      	ldr	r3, [r7, #4]
1fffc87c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
1fffc87e:	687a      	ldr	r2, [r7, #4]
1fffc880:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
1fffc884:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasew_crs = (uint32_t) HandlePtr->v_ta;
1fffc886:	687b      	ldr	r3, [r7, #4]
1fffc888:	6f9b      	ldr	r3, [r3, #120]	; 0x78
1fffc88a:	687a      	ldr	r2, [r7, #4]
1fffc88c:	f8b2 20b6 	ldrh.w	r2, [r2, #182]	; 0xb6
1fffc890:	601a      	str	r2, [r3, #0]
       break;
1fffc892:	e05f      	b.n	1fffc954 <__initial_sp+0x154>
    case 2:/*sector 2*/
      *HandlePtr->phaseu_crs = (uint32_t) HandlePtr->v_ta;
1fffc894:	687b      	ldr	r3, [r7, #4]
1fffc896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
1fffc898:	687a      	ldr	r2, [r7, #4]
1fffc89a:	f8b2 20b6 	ldrh.w	r2, [r2, #182]	; 0xb6
1fffc89e:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasev_crs = (uint32_t) HandlePtr->v_tb;
1fffc8a0:	687b      	ldr	r3, [r7, #4]
1fffc8a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
1fffc8a4:	687a      	ldr	r2, [r7, #4]
1fffc8a6:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
1fffc8aa:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasew_crs = (uint32_t) (HandlePtr->v_tb + HandlePtr->tb);
1fffc8ac:	687b      	ldr	r3, [r7, #4]
1fffc8ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
1fffc8b0:	687a      	ldr	r2, [r7, #4]
1fffc8b2:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
1fffc8b6:	4611      	mov	r1, r2
1fffc8b8:	687a      	ldr	r2, [r7, #4]
1fffc8ba:	f8b2 20b0 	ldrh.w	r2, [r2, #176]	; 0xb0
1fffc8be:	440a      	add	r2, r1
1fffc8c0:	601a      	str	r2, [r3, #0]
       break;
1fffc8c2:	e047      	b.n	1fffc954 <__initial_sp+0x154>
    case 3:/*sector 3*/
      *HandlePtr->phaseu_crs = (uint32_t) HandlePtr->v_ta;
1fffc8c4:	687b      	ldr	r3, [r7, #4]
1fffc8c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
1fffc8c8:	687a      	ldr	r2, [r7, #4]
1fffc8ca:	f8b2 20b6 	ldrh.w	r2, [r2, #182]	; 0xb6
1fffc8ce:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasev_crs = (uint32_t)( HandlePtr->v_tb+ HandlePtr->ta);
1fffc8d0:	687b      	ldr	r3, [r7, #4]
1fffc8d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
1fffc8d4:	687a      	ldr	r2, [r7, #4]
1fffc8d6:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
1fffc8da:	4611      	mov	r1, r2
1fffc8dc:	687a      	ldr	r2, [r7, #4]
1fffc8de:	f8b2 20ae 	ldrh.w	r2, [r2, #174]	; 0xae
1fffc8e2:	440a      	add	r2, r1
1fffc8e4:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasew_crs = (uint32_t) HandlePtr->v_tb;
1fffc8e6:	687b      	ldr	r3, [r7, #4]
1fffc8e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
1fffc8ea:	687a      	ldr	r2, [r7, #4]
1fffc8ec:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
1fffc8f0:	601a      	str	r2, [r3, #0]
       break;
1fffc8f2:	e02f      	b.n	1fffc954 <__initial_sp+0x154>
    case 4:/*sector 4*/
      *HandlePtr->phaseu_crs = (uint32_t) HandlePtr->v_tb+ HandlePtr->tb;
1fffc8f4:	687b      	ldr	r3, [r7, #4]
1fffc8f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
1fffc8f8:	687a      	ldr	r2, [r7, #4]
1fffc8fa:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
1fffc8fe:	4611      	mov	r1, r2
1fffc900:	687a      	ldr	r2, [r7, #4]
1fffc902:	f8b2 20b0 	ldrh.w	r2, [r2, #176]	; 0xb0
1fffc906:	440a      	add	r2, r1
1fffc908:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasev_crs = (uint32_t) HandlePtr->v_ta;
1fffc90a:	687b      	ldr	r3, [r7, #4]
1fffc90c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
1fffc90e:	687a      	ldr	r2, [r7, #4]
1fffc910:	f8b2 20b6 	ldrh.w	r2, [r2, #182]	; 0xb6
1fffc914:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasew_crs = (uint32_t) HandlePtr->v_tb;
1fffc916:	687b      	ldr	r3, [r7, #4]
1fffc918:	6f9b      	ldr	r3, [r3, #120]	; 0x78
1fffc91a:	687a      	ldr	r2, [r7, #4]
1fffc91c:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
1fffc920:	601a      	str	r2, [r3, #0]
       break;
1fffc922:	e017      	b.n	1fffc954 <__initial_sp+0x154>
    default:/*sector 5*/
      *HandlePtr->phaseu_crs = (uint32_t) HandlePtr->v_tb;
1fffc924:	687b      	ldr	r3, [r7, #4]
1fffc926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
1fffc928:	687a      	ldr	r2, [r7, #4]
1fffc92a:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
1fffc92e:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasev_crs = (uint32_t) HandlePtr->v_ta;
1fffc930:	687b      	ldr	r3, [r7, #4]
1fffc932:	6f5b      	ldr	r3, [r3, #116]	; 0x74
1fffc934:	687a      	ldr	r2, [r7, #4]
1fffc936:	f8b2 20b6 	ldrh.w	r2, [r2, #182]	; 0xb6
1fffc93a:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasew_crs = (uint32_t) HandlePtr->v_tb+ HandlePtr->ta;
1fffc93c:	687b      	ldr	r3, [r7, #4]
1fffc93e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
1fffc940:	687a      	ldr	r2, [r7, #4]
1fffc942:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
1fffc946:	4611      	mov	r1, r2
1fffc948:	687a      	ldr	r2, [r7, #4]
1fffc94a:	f8b2 20ae 	ldrh.w	r2, [r2, #174]	; 0xae
1fffc94e:	440a      	add	r2, r1
1fffc950:	601a      	str	r2, [r3, #0]
      break;
1fffc952:	bf00      	nop
    }
}
1fffc954:	370c      	adds	r7, #12
1fffc956:	46bd      	mov	sp, r7
1fffc958:	f85d 7b04 	ldr.w	r7, [sp], #4
1fffc95c:	4770      	bx	lr
1fffc95e:	bf00      	nop

1fffc960 <PWM_SVM_CalCmpValueSym7>:

/**
 * This function calculates the CCU8 slice compare valuefor Symmetric 7-segment SVM.
 */
__INLINE void PWM_SVM_CalCmpValueSym7(PWM_SVM_t* const HandlePtr)
{
1fffc960:	b580      	push	{r7, lr}
1fffc962:	b082      	sub	sp, #8
1fffc964:	af00      	add	r7, sp, #0
1fffc966:	6078      	str	r0, [r7, #4]
  /*If segment time ta less than tmin set to tmin*/
  if (HandlePtr->ta < (uint16_t) HandlePtr->tmin)
1fffc968:	687b      	ldr	r3, [r7, #4]
1fffc96a:	f8b3 20ae 	ldrh.w	r2, [r3, #174]	; 0xae
1fffc96e:	687b      	ldr	r3, [r7, #4]
1fffc970:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
1fffc974:	429a      	cmp	r2, r3
1fffc976:	d205      	bcs.n	1fffc984 <PWM_SVM_CalCmpValueSym7+0x24>
  {
    HandlePtr->ta = (uint16_t) HandlePtr->tmin;
1fffc978:	687b      	ldr	r3, [r7, #4]
1fffc97a:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	; 0xc2
1fffc97e:	687b      	ldr	r3, [r7, #4]
1fffc980:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
  }
  /*If segment time tb less than tmin set to tmin*/
  if (HandlePtr->tb < (uint16_t) HandlePtr->tmin)
1fffc984:	687b      	ldr	r3, [r7, #4]
1fffc986:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	; 0xb0
1fffc98a:	687b      	ldr	r3, [r7, #4]
1fffc98c:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
1fffc990:	429a      	cmp	r2, r3
1fffc992:	d205      	bcs.n	1fffc9a0 <PWM_SVM_CalCmpValueSym7+0x40>
  {
    HandlePtr->tb = (uint16_t) HandlePtr->tmin;
1fffc994:	687b      	ldr	r3, [r7, #4]
1fffc996:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	; 0xc2
1fffc99a:	687b      	ldr	r3, [r7, #4]
1fffc99c:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
  }

  HandlePtr->v_ta = (uint16_t)(((uint32_t) HandlePtr->period + (uint16_t) HandlePtr->ta) + (uint16_t) HandlePtr->tb)
1fffc9a0:	687b      	ldr	r3, [r7, #4]
1fffc9a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
1fffc9a6:	b29a      	uxth	r2, r3
1fffc9a8:	687b      	ldr	r3, [r7, #4]
1fffc9aa:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
1fffc9ae:	4413      	add	r3, r2
1fffc9b0:	b29a      	uxth	r2, r3
1fffc9b2:	687b      	ldr	r3, [r7, #4]
1fffc9b4:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
1fffc9b8:	4413      	add	r3, r2
1fffc9ba:	b29b      	uxth	r3, r3
1fffc9bc:	085b      	lsrs	r3, r3, #1
1fffc9be:	b29a      	uxth	r2, r3
1fffc9c0:	687b      	ldr	r3, [r7, #4]
1fffc9c2:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
                     >> (uint16_t) 1;
  HandlePtr->v_tb = (uint16_t)((uint16_t) HandlePtr->period - ((uint16_t) HandlePtr->ta + (uint16_t) HandlePtr->tb))
1fffc9c6:	687b      	ldr	r3, [r7, #4]
1fffc9c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
1fffc9cc:	b29a      	uxth	r2, r3
1fffc9ce:	687b      	ldr	r3, [r7, #4]
1fffc9d0:	f8b3 10ae 	ldrh.w	r1, [r3, #174]	; 0xae
1fffc9d4:	687b      	ldr	r3, [r7, #4]
1fffc9d6:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
1fffc9da:	440b      	add	r3, r1
1fffc9dc:	b29b      	uxth	r3, r3
1fffc9de:	1ad3      	subs	r3, r2, r3
1fffc9e0:	b29b      	uxth	r3, r3
1fffc9e2:	085b      	lsrs	r3, r3, #1
1fffc9e4:	b29a      	uxth	r2, r3
1fffc9e6:	687b      	ldr	r3, [r7, #4]
1fffc9e8:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
    /* Update the compare register values based on the sector number */
    PWM_SVM_lUpdateDcLinkComRes(HandlePtr);
  }
#endif
  /* Update the compare register values based on the sector number */
  PWM_SVM_lSymCompValUpdate(HandlePtr);
1fffc9ec:	6878      	ldr	r0, [r7, #4]
1fffc9ee:	f7ff ff07 	bl	1fffc800 <PWM_SVM_lSymCompValUpdate>

}
1fffc9f2:	3708      	adds	r7, #8
1fffc9f4:	46bd      	mov	sp, r7
1fffc9f6:	bd80      	pop	{r7, pc}

1fffc9f8 <PWM_SVM_CalCmpValueSym5>:

/**
 * This function calculates the CCU8 slice compare value for Symmetric 5-segment SVM.
 */
__INLINE void PWM_SVM_CalCmpValueSym5(PWM_SVM_t* const HandlePtr)
{
1fffc9f8:	b580      	push	{r7, lr}
1fffc9fa:	b082      	sub	sp, #8
1fffc9fc:	af00      	add	r7, sp, #0
1fffc9fe:	6078      	str	r0, [r7, #4]
  /*If segment time ta less than tmin set to tmin*/
  if (HandlePtr->ta < HandlePtr->tmin)
1fffca00:	687b      	ldr	r3, [r7, #4]
1fffca02:	f8b3 20ae 	ldrh.w	r2, [r3, #174]	; 0xae
1fffca06:	687b      	ldr	r3, [r7, #4]
1fffca08:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
1fffca0c:	429a      	cmp	r2, r3
1fffca0e:	d205      	bcs.n	1fffca1c <PWM_SVM_CalCmpValueSym5+0x24>
  {
    HandlePtr->ta = HandlePtr->tmin;
1fffca10:	687b      	ldr	r3, [r7, #4]
1fffca12:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	; 0xc2
1fffca16:	687b      	ldr	r3, [r7, #4]
1fffca18:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
  }
  /*If segment time tb less than tmin set to tmin*/
  if (HandlePtr->tb < HandlePtr->tmin)
1fffca1c:	687b      	ldr	r3, [r7, #4]
1fffca1e:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	; 0xb0
1fffca22:	687b      	ldr	r3, [r7, #4]
1fffca24:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
1fffca28:	429a      	cmp	r2, r3
1fffca2a:	d205      	bcs.n	1fffca38 <PWM_SVM_CalCmpValueSym5+0x40>
  {
    HandlePtr->tb = HandlePtr->tmin;
1fffca2c:	687b      	ldr	r3, [r7, #4]
1fffca2e:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	; 0xc2
1fffca32:	687b      	ldr	r3, [r7, #4]
1fffca34:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
  }
  HandlePtr->v_ta = (uint16_t) HandlePtr->period + 1U;
1fffca38:	687b      	ldr	r3, [r7, #4]
1fffca3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
1fffca3e:	b29b      	uxth	r3, r3
1fffca40:	3301      	adds	r3, #1
1fffca42:	b29a      	uxth	r2, r3
1fffca44:	687b      	ldr	r3, [r7, #4]
1fffca46:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
  HandlePtr->v_tb = ((uint16_t) HandlePtr->period - HandlePtr->ta) - HandlePtr->tb;
1fffca4a:	687b      	ldr	r3, [r7, #4]
1fffca4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
1fffca50:	b29a      	uxth	r2, r3
1fffca52:	687b      	ldr	r3, [r7, #4]
1fffca54:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
1fffca58:	1ad3      	subs	r3, r2, r3
1fffca5a:	b29a      	uxth	r2, r3
1fffca5c:	687b      	ldr	r3, [r7, #4]
1fffca5e:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
1fffca62:	1ad3      	subs	r3, r2, r3
1fffca64:	b29a      	uxth	r2, r3
1fffca66:	687b      	ldr	r3, [r7, #4]
1fffca68:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
    /* Update the compare register values based on the sector number */
    PWM_SVM_lUpdateDcLinkComRes(HandlePtr);
  }
#endif
  /* Update the compare register values based on the sector number */
  PWM_SVM_lSymCompValUpdate(HandlePtr);
1fffca6c:	6878      	ldr	r0, [r7, #4]
1fffca6e:	f7ff fec7 	bl	1fffc800 <PWM_SVM_lSymCompValUpdate>
}
1fffca72:	3708      	adds	r7, #8
1fffca74:	46bd      	mov	sp, r7
1fffca76:	bd80      	pop	{r7, pc}

1fffca78 <PWM_SVM_TimecalcUsingLUT>:
#if(1U == PWM_SVM_IS_LUT_ENABLE)
/*
 * SVM Segment Time calculation using Look up table
 */
void PWM_SVM_TimecalcUsingLUT(PWM_SVM_t* const HandlePtr, uint16_t Amplitude, uint32_t Angle)
{
1fffca78:	b480      	push	{r7}
1fffca7a:	b08b      	sub	sp, #44	; 0x2c
1fffca7c:	af00      	add	r7, sp, #0
1fffca7e:	60f8      	str	r0, [r7, #12]
1fffca80:	460b      	mov	r3, r1
1fffca82:	607a      	str	r2, [r7, #4]
1fffca84:	817b      	strh	r3, [r7, #10]
  uint16_t ta_tb,ta;
  uint32_t Dividend_Sine, Divisor_Sine;        /*Ts x sin(θrel), sin(θrel)+sin(60°-θrel)*/
  XMC_ASSERT("PWM_SVM_lTimecalcUsingLUT:NULL Handle Pointer",
      (HandlePtr != (PWM_SVM_t *)NULL));

  angletemp = (uint32_t)((Angle & (uint32_t)0xFFFFFF) >> 14U) * 6U;
1fffca86:	687b      	ldr	r3, [r7, #4]
1fffca88:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
1fffca8c:	0b9a      	lsrs	r2, r3, #14
1fffca8e:	4613      	mov	r3, r2
1fffca90:	005b      	lsls	r3, r3, #1
1fffca92:	4413      	add	r3, r2
1fffca94:	005b      	lsls	r3, r3, #1
1fffca96:	627b      	str	r3, [r7, #36]	; 0x24
  HandlePtr->sector_angle = (uint32_t)(angletemp & (uint32_t) 0x003FF);
1fffca98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1fffca9a:	f3c3 0209 	ubfx	r2, r3, #0, #10
1fffca9e:	68fb      	ldr	r3, [r7, #12]
1fffcaa0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  HandlePtr->sector = (uint32_t)((angletemp >> 10U) & 7U);
1fffcaa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1fffcaa6:	0a9b      	lsrs	r3, r3, #10
1fffcaa8:	f003 0207 	and.w	r2, r3, #7
1fffcaac:	68fb      	ldr	r3, [r7, #12]
1fffcaae:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  if ((uint16_t)Amplitude > (HandlePtr->max_amplitude))
1fffcab2:	68fb      	ldr	r3, [r7, #12]
1fffcab4:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
1fffcab8:	897a      	ldrh	r2, [r7, #10]
1fffcaba:	429a      	cmp	r2, r3
1fffcabc:	d903      	bls.n	1fffcac6 <PWM_SVM_TimecalcUsingLUT+0x4e>
  {
    Amplitude = HandlePtr->max_amplitude;
1fffcabe:	68fb      	ldr	r3, [r7, #12]
1fffcac0:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
1fffcac4:	817b      	strh	r3, [r7, #10]
  }
  HandlePtr->tb = (uint16_t)((Amplitude* Sinus60_tab[1023U - HandlePtr->sector_angle])>> 15U);
1fffcac6:	897a      	ldrh	r2, [r7, #10]
1fffcac8:	68fb      	ldr	r3, [r7, #12]
1fffcaca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
1fffcace:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
1fffcad2:	3303      	adds	r3, #3
1fffcad4:	4949      	ldr	r1, [pc, #292]	; (1fffcbfc <PWM_SVM_TimecalcUsingLUT+0x184>)
1fffcad6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
1fffcada:	fb03 f302 	mul.w	r3, r3, r2
1fffcade:	13db      	asrs	r3, r3, #15
1fffcae0:	b29a      	uxth	r2, r3
1fffcae2:	68fb      	ldr	r3, [r7, #12]
1fffcae4:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
  HandlePtr->tb = (uint16_t)((HandlePtr->tb * HandlePtr->confighandle_ptr->amplitude_scale) >> 10U);
1fffcae8:	68fb      	ldr	r3, [r7, #12]
1fffcaea:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
1fffcaee:	461a      	mov	r2, r3
1fffcaf0:	68fb      	ldr	r3, [r7, #12]
1fffcaf2:	681b      	ldr	r3, [r3, #0]
1fffcaf4:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
1fffcaf8:	fb03 f302 	mul.w	r3, r3, r2
1fffcafc:	129b      	asrs	r3, r3, #10
1fffcafe:	b29a      	uxth	r2, r3
1fffcb00:	68fb      	ldr	r3, [r7, #12]
1fffcb02:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0

  HandlePtr->ta = (uint16_t)((Amplitude* Sinus60_tab[HandlePtr->sector_angle])>> 15U);
1fffcb06:	897b      	ldrh	r3, [r7, #10]
1fffcb08:	68fa      	ldr	r2, [r7, #12]
1fffcb0a:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
1fffcb0e:	493b      	ldr	r1, [pc, #236]	; (1fffcbfc <PWM_SVM_TimecalcUsingLUT+0x184>)
1fffcb10:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
1fffcb14:	fb02 f303 	mul.w	r3, r2, r3
1fffcb18:	13db      	asrs	r3, r3, #15
1fffcb1a:	b29a      	uxth	r2, r3
1fffcb1c:	68fb      	ldr	r3, [r7, #12]
1fffcb1e:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
  HandlePtr->ta = (uint16_t)((HandlePtr->ta * HandlePtr->confighandle_ptr->amplitude_scale) >> 10U);
1fffcb22:	68fb      	ldr	r3, [r7, #12]
1fffcb24:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
1fffcb28:	461a      	mov	r2, r3
1fffcb2a:	68fb      	ldr	r3, [r7, #12]
1fffcb2c:	681b      	ldr	r3, [r3, #0]
1fffcb2e:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
1fffcb32:	fb03 f302 	mul.w	r3, r3, r2
1fffcb36:	129b      	asrs	r3, r3, #10
1fffcb38:	b29a      	uxth	r2, r3
1fffcb3a:	68fb      	ldr	r3, [r7, #12]
1fffcb3c:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
  ta_tb = HandlePtr->ta + HandlePtr->tb;
1fffcb40:	68fb      	ldr	r3, [r7, #12]
1fffcb42:	f8b3 20ae 	ldrh.w	r2, [r3, #174]	; 0xae
1fffcb46:	68fb      	ldr	r3, [r7, #12]
1fffcb48:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
1fffcb4c:	4413      	add	r3, r2
1fffcb4e:	847b      	strh	r3, [r7, #34]	; 0x22
  HandlePtr->t0 = (uint16_t)(HandlePtr->period - ta_tb);
1fffcb50:	68fb      	ldr	r3, [r7, #12]
1fffcb52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
1fffcb56:	b29a      	uxth	r2, r3
1fffcb58:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
1fffcb5a:	1ad3      	subs	r3, r2, r3
1fffcb5c:	b29a      	uxth	r2, r3
1fffcb5e:	68fb      	ldr	r3, [r7, #12]
1fffcb60:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac

  if (ta_tb > (HandlePtr->period))
1fffcb64:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
1fffcb66:	68fb      	ldr	r3, [r7, #12]
1fffcb68:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
1fffcb6c:	429a      	cmp	r2, r3
1fffcb6e:	d93f      	bls.n	1fffcbf0 <PWM_SVM_TimecalcUsingLUT+0x178>
  {
    if (HandlePtr->over_modulation_enable == 1U)
1fffcb70:	68fb      	ldr	r3, [r7, #12]
1fffcb72:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
1fffcb76:	2b01      	cmp	r3, #1
1fffcb78:	d13a      	bne.n	1fffcbf0 <PWM_SVM_TimecalcUsingLUT+0x178>
      /* Above Ta and Tb are not used for SVM PWM.*/

      /* Calculate new T1 and T2 of maximum Vref on SVM Hexagon edges,
       * where T0 = 0 (i.e.: T1+T2 = PERIOD_REG). Relative angle θrel kept the same.
       */
      Dividend_Sine = HandlePtr->period * Sinus60_tab[HandlePtr->sector_angle];
1fffcb7a:	68fb      	ldr	r3, [r7, #12]
1fffcb7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
1fffcb80:	68fa      	ldr	r2, [r7, #12]
1fffcb82:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
1fffcb86:	491d      	ldr	r1, [pc, #116]	; (1fffcbfc <PWM_SVM_TimecalcUsingLUT+0x184>)
1fffcb88:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
1fffcb8c:	fb02 f303 	mul.w	r3, r2, r3
1fffcb90:	61fb      	str	r3, [r7, #28]
      Divisor_Sine  = Sinus60_tab[HandlePtr->sector_angle] + Sinus60_tab[1023U - HandlePtr->sector_angle];
1fffcb92:	68fb      	ldr	r3, [r7, #12]
1fffcb94:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
1fffcb98:	4a18      	ldr	r2, [pc, #96]	; (1fffcbfc <PWM_SVM_TimecalcUsingLUT+0x184>)
1fffcb9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
1fffcb9e:	4619      	mov	r1, r3
1fffcba0:	68fb      	ldr	r3, [r7, #12]
1fffcba2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
1fffcba6:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
1fffcbaa:	3303      	adds	r3, #3
1fffcbac:	4a13      	ldr	r2, [pc, #76]	; (1fffcbfc <PWM_SVM_TimecalcUsingLUT+0x184>)
1fffcbae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
1fffcbb2:	440b      	add	r3, r1
1fffcbb4:	61bb      	str	r3, [r7, #24]
      /* Unsigned Div. Dividend << SHIFT_OVERMODULATION, Quotient >> SHIFT_OVERMODULATION, Divisor no shift.*/
      MATH->DIVCON = (0x00008004 | (PWM_SVM_SHIFT_OVERMODULATION << 16U) | (PWM_SVM_SHIFT_OVERMODULATION << 8U));
      MATH->DVD = Dividend_Sine;
      MATH->DVS = Divisor_Sine;
      #else
      ta = (uint16_t)(Dividend_Sine/Divisor_Sine);
1fffcbb6:	69fa      	ldr	r2, [r7, #28]
1fffcbb8:	69bb      	ldr	r3, [r7, #24]
1fffcbba:	fbb2 f3f3 	udiv	r3, r2, r3
1fffcbbe:	82fb      	strh	r3, [r7, #22]
      #endif
      /*###* CPU computes the following simultaneously when DIV #2 is computing ###*/
      HandlePtr->t0 = 0U;
1fffcbc0:	68fb      	ldr	r3, [r7, #12]
1fffcbc2:	2200      	movs	r2, #0
1fffcbc4:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
      ta_tb = (uint16_t)HandlePtr->period;                /* Make sure below T0/2 >= 0.*/
1fffcbc8:	68fb      	ldr	r3, [r7, #12]
1fffcbca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
1fffcbce:	847b      	strh	r3, [r7, #34]	; 0x22
      #if defined (MATH)
      /*###* Results of DIV #2 for T2 of Over-Modulation ###*/
      while (MATH->DIVST) continue;          /* Wait if DIV is still running calculation.*/
      ta = MATH->QUOT;     /* Read DIV Quotient result. T2 = Ts x sin(theta) / (sin(theta)+sin(60-theta)).*/
      #endif
      HandlePtr->ta = ta;
1fffcbd0:	68fb      	ldr	r3, [r7, #12]
1fffcbd2:	8afa      	ldrh	r2, [r7, #22]
1fffcbd4:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
      /* Ta + Tb = PERIOD_REG for Vref on SVM Hexagon edges.*/
      HandlePtr->tb = (uint16_t)(HandlePtr->period - HandlePtr->ta);
1fffcbd8:	68fb      	ldr	r3, [r7, #12]
1fffcbda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
1fffcbde:	b29a      	uxth	r2, r3
1fffcbe0:	68fb      	ldr	r3, [r7, #12]
1fffcbe2:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
1fffcbe6:	1ad3      	subs	r3, r2, r3
1fffcbe8:	b29a      	uxth	r2, r3
1fffcbea:	68fb      	ldr	r3, [r7, #12]
1fffcbec:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0

    }
  }
}
1fffcbf0:	372c      	adds	r7, #44	; 0x2c
1fffcbf2:	46bd      	mov	sp, r7
1fffcbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
1fffcbf8:	4770      	bx	lr
1fffcbfa:	bf00      	nop
1fffcbfc:	08009dd8 	.word	0x08009dd8

1fffcc00 <PWM_SVM_SVMUpdate>:
 * This is the SVM algorithm for sinusoidal commutation.
 * It updates the compare registers of the CCU8 slices as per calculated
 * duty cycle.
 */
void PWM_SVM_SVMUpdate(PWM_SVM_t* const HandlePtr, uint16_t Amplitude, uint32_t Angle)
{
1fffcc00:	b580      	push	{r7, lr}
1fffcc02:	b086      	sub	sp, #24
1fffcc04:	af00      	add	r7, sp, #0
1fffcc06:	60f8      	str	r0, [r7, #12]
1fffcc08:	460b      	mov	r3, r1
1fffcc0a:	607a      	str	r2, [r7, #4]
1fffcc0c:	817b      	strh	r3, [r7, #10]
  const PWM_SVM_Config_t* const svmptr = HandlePtr->confighandle_ptr;
1fffcc0e:	68fb      	ldr	r3, [r7, #12]
1fffcc10:	681b      	ldr	r3, [r3, #0]
1fffcc12:	617b      	str	r3, [r7, #20]
  XMC_ASSERT("PWM_SVM_SVMUpdate:NULL Handle Pointer", (HandlePtr != (PWM_SVM_t *) NULL));

  /*This function calculates segment time ta, tb using CORDIC or LUT as per UI configuration */
  HandlePtr->seg_time_calc_ptr(HandlePtr, (uint16_t) Amplitude, (uint32_t) Angle);
1fffcc14:	68fb      	ldr	r3, [r7, #12]
1fffcc16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
1fffcc1a:	897a      	ldrh	r2, [r7, #10]
1fffcc1c:	68f8      	ldr	r0, [r7, #12]
1fffcc1e:	4611      	mov	r1, r2
1fffcc20:	687a      	ldr	r2, [r7, #4]
1fffcc22:	4798      	blx	r3
  /*This function calculates and updates compare values in compare register*/
  HandlePtr->svm_schemesel_ptr(HandlePtr);
1fffcc24:	68fb      	ldr	r3, [r7, #12]
1fffcc26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
1fffcc2a:	68f8      	ldr	r0, [r7, #12]
1fffcc2c:	4798      	blx	r3

  /*Enable the shadow transfer for all three slice*/
  HandlePtr->global_ptr->GCSS |= svmptr->shadow_transfer_mask;
1fffcc2e:	68fb      	ldr	r3, [r7, #12]
1fffcc30:	685b      	ldr	r3, [r3, #4]
1fffcc32:	68fa      	ldr	r2, [r7, #12]
1fffcc34:	6852      	ldr	r2, [r2, #4]
1fffcc36:	6911      	ldr	r1, [r2, #16]
1fffcc38:	697a      	ldr	r2, [r7, #20]
1fffcc3a:	6a52      	ldr	r2, [r2, #36]	; 0x24
1fffcc3c:	430a      	orrs	r2, r1
1fffcc3e:	611a      	str	r2, [r3, #16]
}
1fffcc40:	3718      	adds	r7, #24
1fffcc42:	46bd      	mov	sp, r7
1fffcc44:	bd80      	pop	{r7, pc}
1fffcc46:	bf00      	nop
