
BAT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0003bc94  08000000  0c000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0803bc94  0c03bc94  00043c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 Stack         00000800  1fffc000  1fffc000  0004c000  2**0
                  ALLOC
  3 .ram_code     00000448  1fffc800  0c03bc9c  00044800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .data         00000b2c  1fffcc48  0c03c0e4  00044c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000520  1fffd774  0c03cc10  00045774  2**2
                  ALLOC
  6 .no_init      00000020  2000ffc0  2000ffc0  00047fc0  2**2
                  ALLOC
  7 .debug_aranges 00001d08  00000000  00000000  00045778  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000372dc  00000000  00000000  00047480  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00005739  00000000  00000000  0007e75c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000ebef  00000000  00000000  00083e95  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00007cb4  00000000  00000000  00092a84  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00014230  00000000  00000000  0009a738  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00010126  00000000  00000000  000ae968  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001968  00000000  00000000  000bea8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .build_attributes 00000e07  00000000  00000000  000c03f6  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 c8 ff 1f 01 02 00 08 99 02 00 08 99 02 00 08     ................
 8000010:	99 02 00 08 99 02 00 08 99 02 00 08 00 00 00 00     ................
	...
 800002c:	99 02 00 08 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800003c:	a1 33 00 08 99 02 00 08 99 02 00 08 99 02 00 08     .3..............
 800004c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800005c:	99 02 00 08 99 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800007c:	99 02 00 08 49 85 00 08 99 02 00 08 99 02 00 08     ....I...........
 800008c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800009c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000dc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ec:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000fc:	95 84 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800010c:	99 02 00 08 e5 83 00 08 99 02 00 08 99 02 00 08     ................
 800011c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800012c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800013c:	25 7c 00 08 2d 7d 00 08 99 02 00 08 99 02 00 08     %|..-}..........
 800014c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800015c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800016c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800017c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800018c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800019c:	35 53 00 08 99 02 00 08 45 53 00 08 29 2f 00 08     5S......ES..)/..
 80001ac:	19 2f 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ./..............
 80001bc:	99 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
 80001d8:	99 02 00 08 00 00 00 00 99 02 00 08 99 02 00 08     ................
 80001e8:	00 00 00 00 99 02 00 08 99 02 00 08 00 00 00 00     ................
	...

08000200 <Reset_Handler>:
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */
 8000200:	f8df d074 	ldr.w	sp, [pc, #116]	; 8000278 <__zero_table_end__>

	.align	1
    .thumb
 8000204:	481d      	ldr	r0, [pc, #116]	; (800027c <__zero_table_end__+0x4>)

 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c1d      	ldr	r4, [pc, #116]	; (8000280 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d1e      	ldr	r5, [pc, #120]	; (8000284 <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b18      	ldr	r3, [pc, #96]	; (8000288 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c19      	ldr	r4, [pc, #100]	; (800028c <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	4814      	ldr	r0, [pc, #80]	; (8000290 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	4814      	ldr	r0, [pc, #80]	; (8000294 <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c03c0e4 	.word	0x0c03c0e4
 800024c:	1fffcc48 	.word	0x1fffcc48
 8000250:	00000b2c 	.word	0x00000b2c
 8000254:	0c03bc9c 	.word	0x0c03bc9c
 8000258:	1fffc800 	.word	0x1fffc800
 800025c:	00000448 	.word	0x00000448

08000260 <__copy_table_end__>:
 8000260:	1fffd774 	.word	0x1fffd774
 8000264:	00000520 	.word	0x00000520
 8000268:	20000000 	.word	0x20000000
 800026c:	00000000 	.word	0x00000000
 8000270:	20000000 	.word	0x20000000
 8000274:	00000000 	.word	0x00000000

08000278 <__zero_table_end__>:
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */
 8000278:	1fffc800 	.word	0x1fffc800

	.align	1
    .thumb
 800027c:	0800029d 	.word	0x0800029d
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000280:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 8000284:	08000260 	.word	0x08000260
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000288:	08000260 	.word	0x08000260
	ldr	r4, =__zero_table_end__
 800028c:	08000278 	.word	0x08000278
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 8000290:	08009c35 	.word	0x08009c35
    blx  r0
#endif

    ldr  r0, =main
 8000294:	080086f1 	.word	0x080086f1

08000298 <BusFault_Handler>:
 	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 8000298:	e7fe      	b.n	8000298 <BusFault_Handler>
	...

0800029c <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 800029c:	b598      	push	{r3, r4, r7, lr}
 800029e:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80002a0:	4a08      	ldr	r2, [pc, #32]	; (80002c4 <SystemInit+0x28>)
 80002a2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002a6:	4614      	mov	r4, r2
 80002a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  memcpy(g_hrpwm_char_data, HRPWM_CHARDATA_LOC, 12);
 80002ae:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <SystemInit+0x2c>)
 80002b0:	4a06      	ldr	r2, [pc, #24]	; (80002cc <SystemInit+0x30>)
 80002b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80002b4:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  SystemCoreSetup();
 80002b8:	f005 f95e 	bl	8005578 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 80002bc:	f005 f9c6 	bl	800564c <SystemCoreClockSetup>
}
 80002c0:	bd98      	pop	{r3, r4, r7, pc}
 80002c2:	bf00      	nop
 80002c4:	2000ffc4 	.word	0x2000ffc4
 80002c8:	2000ffd4 	.word	0x2000ffd4
 80002cc:	20000084 	.word	0x20000084

080002d0 <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b084      	sub	sp, #16
 80002d4:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80002d6:	4b2f      	ldr	r3, [pc, #188]	; (8000394 <SystemCoreClockUpdate+0xc4>)
 80002d8:	68db      	ldr	r3, [r3, #12]
 80002da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d03e      	beq.n	8000360 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80002e2:	4b2d      	ldr	r3, [pc, #180]	; (8000398 <SystemCoreClockUpdate+0xc8>)
 80002e4:	68db      	ldr	r3, [r3, #12]
 80002e6:	f003 0301 	and.w	r3, r3, #1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d002      	beq.n	80002f4 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80002ee:	4b2b      	ldr	r3, [pc, #172]	; (800039c <SystemCoreClockUpdate+0xcc>)
 80002f0:	60fb      	str	r3, [r7, #12]
 80002f2:	e002      	b.n	80002fa <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80002f4:	f005 f9a0 	bl	8005638 <OSCHP_GetFrequency>
 80002f8:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80002fa:	4b27      	ldr	r3, [pc, #156]	; (8000398 <SystemCoreClockUpdate+0xc8>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	f003 0304 	and.w	r3, r3, #4
 8000302:	2b00      	cmp	r3, #0
 8000304:	d020      	beq.n	8000348 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 8000306:	4b24      	ldr	r3, [pc, #144]	; (8000398 <SystemCoreClockUpdate+0xc8>)
 8000308:	689b      	ldr	r3, [r3, #8]
 800030a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800030e:	0e1b      	lsrs	r3, r3, #24
 8000310:	3301      	adds	r3, #1
 8000312:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000314:	4b20      	ldr	r3, [pc, #128]	; (8000398 <SystemCoreClockUpdate+0xc8>)
 8000316:	689b      	ldr	r3, [r3, #8]
 8000318:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 800031c:	0a1b      	lsrs	r3, r3, #8
 800031e:	3301      	adds	r3, #1
 8000320:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8000322:	4b1d      	ldr	r3, [pc, #116]	; (8000398 <SystemCoreClockUpdate+0xc8>)
 8000324:	689b      	ldr	r3, [r3, #8]
 8000326:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800032a:	0c1b      	lsrs	r3, r3, #16
 800032c:	3301      	adds	r3, #1
 800032e:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8000330:	68bb      	ldr	r3, [r7, #8]
 8000332:	683a      	ldr	r2, [r7, #0]
 8000334:	fb02 f303 	mul.w	r3, r2, r3
 8000338:	68fa      	ldr	r2, [r7, #12]
 800033a:	fbb2 f3f3 	udiv	r3, r2, r3
 800033e:	687a      	ldr	r2, [r7, #4]
 8000340:	fb02 f303 	mul.w	r3, r2, r3
 8000344:	60fb      	str	r3, [r7, #12]
 8000346:	e00d      	b.n	8000364 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8000348:	4b13      	ldr	r3, [pc, #76]	; (8000398 <SystemCoreClockUpdate+0xc8>)
 800034a:	689b      	ldr	r3, [r3, #8]
 800034c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000350:	3301      	adds	r3, #1
 8000352:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 8000354:	68fa      	ldr	r2, [r7, #12]
 8000356:	683b      	ldr	r3, [r7, #0]
 8000358:	fbb2 f3f3 	udiv	r3, r2, r3
 800035c:	60fb      	str	r3, [r7, #12]
 800035e:	e001      	b.n	8000364 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8000360:	4b0e      	ldr	r3, [pc, #56]	; (800039c <SystemCoreClockUpdate+0xcc>)
 8000362:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8000364:	4b0b      	ldr	r3, [pc, #44]	; (8000394 <SystemCoreClockUpdate+0xc4>)
 8000366:	68db      	ldr	r3, [r3, #12]
 8000368:	b2db      	uxtb	r3, r3
 800036a:	3301      	adds	r3, #1
 800036c:	68fa      	ldr	r2, [r7, #12]
 800036e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000372:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000374:	4b07      	ldr	r3, [pc, #28]	; (8000394 <SystemCoreClockUpdate+0xc4>)
 8000376:	691b      	ldr	r3, [r3, #16]
 8000378:	f003 0301 	and.w	r3, r3, #1
 800037c:	3301      	adds	r3, #1
 800037e:	68fa      	ldr	r2, [r7, #12]
 8000380:	fbb2 f3f3 	udiv	r3, r2, r3
 8000384:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 8000386:	4a06      	ldr	r2, [pc, #24]	; (80003a0 <SystemCoreClockUpdate+0xd0>)
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	6013      	str	r3, [r2, #0]
}
 800038c:	3710      	adds	r7, #16
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	50004600 	.word	0x50004600
 8000398:	50004710 	.word	0x50004710
 800039c:	016e3600 	.word	0x016e3600
 80003a0:	2000ffc0 	.word	0x2000ffc0

080003a4 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 80003a4:	b480      	push	{r7}
 80003a6:	b085      	sub	sp, #20
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	60f8      	str	r0, [r7, #12]
 80003ac:	460b      	mov	r3, r1
 80003ae:	607a      	str	r2, [r7, #4]
 80003b0:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));

  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 80003b2:	7afb      	ldrb	r3, [r7, #11]
 80003b4:	089b      	lsrs	r3, r3, #2
 80003b6:	b2db      	uxtb	r3, r3
 80003b8:	4618      	mov	r0, r3
 80003ba:	7afb      	ldrb	r3, [r7, #11]
 80003bc:	089b      	lsrs	r3, r3, #2
 80003be:	b2db      	uxtb	r3, r3
 80003c0:	461a      	mov	r2, r3
 80003c2:	68fb      	ldr	r3, [r7, #12]
 80003c4:	3204      	adds	r2, #4
 80003c6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003ca:	7afb      	ldrb	r3, [r7, #11]
 80003cc:	f003 0303 	and.w	r3, r3, #3
 80003d0:	00db      	lsls	r3, r3, #3
 80003d2:	4619      	mov	r1, r3
 80003d4:	23f8      	movs	r3, #248	; 0xf8
 80003d6:	408b      	lsls	r3, r1
 80003d8:	43db      	mvns	r3, r3
 80003da:	ea02 0103 	and.w	r1, r2, r3
 80003de:	68fb      	ldr	r3, [r7, #12]
 80003e0:	1d02      	adds	r2, r0, #4
 80003e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80003ea:	7afb      	ldrb	r3, [r7, #11]
 80003ec:	005b      	lsls	r3, r3, #1
 80003ee:	4619      	mov	r1, r3
 80003f0:	2303      	movs	r3, #3
 80003f2:	408b      	lsls	r3, r1
 80003f4:	43db      	mvns	r3, r3
 80003f6:	401a      	ands	r2, r3
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	4a3a      	ldr	r2, [pc, #232]	; (80004e8 <XMC_GPIO_Init+0x144>)
 8000400:	4293      	cmp	r3, r2
 8000402:	d003      	beq.n	800040c <XMC_GPIO_Init+0x68>
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	4a39      	ldr	r2, [pc, #228]	; (80004ec <XMC_GPIO_Init+0x148>)
 8000408:	4293      	cmp	r3, r2
 800040a:	d10a      	bne.n	8000422 <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000410:	7afb      	ldrb	r3, [r7, #11]
 8000412:	2101      	movs	r1, #1
 8000414:	fa01 f303 	lsl.w	r3, r1, r3
 8000418:	43db      	mvns	r3, r3
 800041a:	401a      	ands	r2, r3
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	661a      	str	r2, [r3, #96]	; 0x60
 8000420:	e042      	b.n	80004a8 <XMC_GPIO_Init+0x104>
  }
  else
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	781b      	ldrb	r3, [r3, #0]
 8000426:	b2db      	uxtb	r3, r3
 8000428:	b25b      	sxtb	r3, r3
 800042a:	2b00      	cmp	r3, #0
 800042c:	da3c      	bge.n	80004a8 <XMC_GPIO_Init+0x104>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	685a      	ldr	r2, [r3, #4]
 8000432:	7afb      	ldrb	r3, [r7, #11]
 8000434:	409a      	lsls	r2, r3
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	605a      	str	r2, [r3, #4]

      /* Set output driver strength */
      port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 800043a:	7afb      	ldrb	r3, [r7, #11]
 800043c:	08db      	lsrs	r3, r3, #3
 800043e:	b2db      	uxtb	r3, r3
 8000440:	4618      	mov	r0, r3
 8000442:	7afb      	ldrb	r3, [r7, #11]
 8000444:	08db      	lsrs	r3, r3, #3
 8000446:	b2db      	uxtb	r3, r3
 8000448:	461a      	mov	r2, r3
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	3210      	adds	r2, #16
 800044e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000452:	7afb      	ldrb	r3, [r7, #11]
 8000454:	f003 0307 	and.w	r3, r3, #7
 8000458:	009b      	lsls	r3, r3, #2
 800045a:	4619      	mov	r1, r3
 800045c:	2307      	movs	r3, #7
 800045e:	408b      	lsls	r3, r1
 8000460:	43db      	mvns	r3, r3
 8000462:	ea02 0103 	and.w	r1, r2, r3
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	f100 0210 	add.w	r2, r0, #16
 800046c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8000470:	7afb      	ldrb	r3, [r7, #11]
 8000472:	08db      	lsrs	r3, r3, #3
 8000474:	b2db      	uxtb	r3, r3
 8000476:	4618      	mov	r0, r3
 8000478:	7afb      	ldrb	r3, [r7, #11]
 800047a:	08db      	lsrs	r3, r3, #3
 800047c:	b2db      	uxtb	r3, r3
 800047e:	461a      	mov	r2, r3
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	3210      	adds	r2, #16
 8000484:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	7a1b      	ldrb	r3, [r3, #8]
 800048c:	4619      	mov	r1, r3
 800048e:	7afb      	ldrb	r3, [r7, #11]
 8000490:	f003 0307 	and.w	r3, r3, #7
 8000494:	009b      	lsls	r3, r3, #2
 8000496:	fa01 f303 	lsl.w	r3, r1, r3
 800049a:	ea42 0103 	orr.w	r1, r2, r3
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	f100 0210 	add.w	r2, r0, #16
 80004a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 80004a8:	7afb      	ldrb	r3, [r7, #11]
 80004aa:	089b      	lsrs	r3, r3, #2
 80004ac:	b2db      	uxtb	r3, r3
 80004ae:	4618      	mov	r0, r3
 80004b0:	7afb      	ldrb	r3, [r7, #11]
 80004b2:	089b      	lsrs	r3, r3, #2
 80004b4:	b2db      	uxtb	r3, r3
 80004b6:	461a      	mov	r2, r3
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	3204      	adds	r2, #4
 80004bc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	4619      	mov	r1, r3
 80004c6:	7afb      	ldrb	r3, [r7, #11]
 80004c8:	f003 0303 	and.w	r3, r3, #3
 80004cc:	00db      	lsls	r3, r3, #3
 80004ce:	fa01 f303 	lsl.w	r3, r1, r3
 80004d2:	ea42 0103 	orr.w	r1, r2, r3
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	1d02      	adds	r2, r0, #4
 80004da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80004de:	3714      	adds	r7, #20
 80004e0:	46bd      	mov	sp, r7
 80004e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e6:	4770      	bx	lr
 80004e8:	48028e00 	.word	0x48028e00
 80004ec:	48028f00 	.word	0x48028f00

080004f0 <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80004f4:	4b03      	ldr	r3, [pc, #12]	; (8000504 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 80004f6:	681b      	ldr	r3, [r3, #0]
}
 80004f8:	4618      	mov	r0, r3
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	2000ffc0 	.word	0x2000ffc0

08000508 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  return(SCU_GENERAL->MIRRSTS);
 800050c:	4b03      	ldr	r3, [pc, #12]	; (800051c <XMC_SCU_GetMirrorStatus+0x14>)
 800050e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 8000512:	4618      	mov	r0, r3
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr
 800051c:	50004000 	.word	0x50004000

08000520 <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b084      	sub	sp, #16
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 8000528:	f7ff fed2 	bl	80002d0 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 800052c:	4b0b      	ldr	r3, [pc, #44]	; (800055c <XMC_SCU_lDelay+0x3c>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a0b      	ldr	r2, [pc, #44]	; (8000560 <XMC_SCU_lDelay+0x40>)
 8000532:	fba2 2303 	umull	r2, r3, r2, r3
 8000536:	0c9a      	lsrs	r2, r3, #18
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	fb02 f303 	mul.w	r3, r2, r3
 800053e:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 8000540:	2300      	movs	r3, #0
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	e003      	b.n	800054e <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 8000546:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	3301      	adds	r3, #1
 800054c:	60fb      	str	r3, [r7, #12]
 800054e:	68fa      	ldr	r2, [r7, #12]
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	429a      	cmp	r2, r3
 8000554:	d3f7      	bcc.n	8000546 <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 8000556:	3710      	adds	r7, #16
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	2000ffc0 	.word	0x2000ffc0
 8000560:	431bde83 	.word	0x431bde83

08000564 <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 8000564:	b5b0      	push	{r4, r5, r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af02      	add	r7, sp, #8
 800056a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
                 (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                 (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 800056c:	2000      	movs	r0, #0
 800056e:	f000 f89b 	bl	80006a8 <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 8000572:	f000 fa35 	bl	80009e0 <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	79db      	ldrb	r3, [r3, #7]
 800057a:	2b00      	cmp	r3, #0
 800057c:	d00a      	beq.n	8000594 <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 800057e:	f000 fa63 	bl	8000a48 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 8000582:	bf00      	nop
 8000584:	f000 fa58 	bl	8000a38 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 8000588:	4603      	mov	r3, r0
 800058a:	f083 0301 	eor.w	r3, r3, #1
 800058e:	b2db      	uxtb	r3, r3
 8000590:	2b00      	cmp	r3, #0
 8000592:	d1f7      	bne.n	8000584 <XMC_SCU_CLOCK_Init+0x20>
  }
  
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);  
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	7a5b      	ldrb	r3, [r3, #9]
 8000598:	4618      	mov	r0, r3
 800059a:	f000 f8ff 	bl	800079c <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 800059e:	bf00      	nop
 80005a0:	f7ff ffb2 	bl	8000508 <XMC_SCU_GetMirrorStatus>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d1fa      	bne.n	80005a0 <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	7a1b      	ldrb	r3, [r3, #8]
 80005ae:	4618      	mov	r0, r3
 80005b0:	f000 f9f0 	bl	8000994 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	7c1b      	ldrb	r3, [r3, #16]
 80005b8:	4618      	mov	r0, r3
 80005ba:	f000 f90d 	bl	80007d8 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	7c5b      	ldrb	r3, [r3, #17]
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 f930 	bl	8000828 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	7c9b      	ldrb	r3, [r3, #18]
 80005cc:	4618      	mov	r0, r3
 80005ce:	f000 f917 	bl	8000800 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	7cdb      	ldrb	r3, [r3, #19]
 80005d6:	4618      	mov	r0, r3
 80005d8:	f000 f93a 	bl	8000850 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	799b      	ldrb	r3, [r3, #6]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d00a      	beq.n	80005fa <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 80005e4:	f000 fa64 	bl	8000ab0 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 80005e8:	bf00      	nop
 80005ea:	f000 fa89 	bl	8000b00 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 80005ee:	4603      	mov	r3, r0
 80005f0:	f083 0301 	eor.w	r3, r3, #1
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d1f7      	bne.n	80005ea <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	78db      	ldrb	r3, [r3, #3]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d102      	bne.n	8000608 <XMC_SCU_CLOCK_Init+0xa4>
  {
    XMC_SCU_CLOCK_DisableSystemPll();
 8000602:	f000 faa1 	bl	8000b48 <XMC_SCU_CLOCK_DisableSystemPll>
 8000606:	e014      	b.n	8000632 <XMC_SCU_CLOCK_Init+0xce>
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 8000608:	f000 fa8e 	bl	8000b28 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	8899      	ldrh	r1, [r3, #4]
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000618:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800061e:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000624:	9300      	str	r3, [sp, #0]
 8000626:	4608      	mov	r0, r1
 8000628:	4611      	mov	r1, r2
 800062a:	462a      	mov	r2, r5
 800062c:	4623      	mov	r3, r4
 800062e:	f000 fa9b 	bl	8000b68 <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	68db      	ldr	r3, [r3, #12]
 8000636:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800063a:	d103      	bne.n	8000644 <XMC_SCU_CLOCK_Init+0xe0>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 800063c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000640:	f000 f832 	bl	80006a8 <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 8000644:	f7ff fe44 	bl	80002d0 <SystemCoreClockUpdate>
}
 8000648:	3708      	adds	r7, #8
 800064a:	46bd      	mov	sp, r7
 800064c:	bdb0      	pop	{r4, r5, r7, pc}
 800064e:	bf00      	nop

08000650 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8000650:	b480      	push	{r7}
 8000652:	b085      	sub	sp, #20
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	0f1b      	lsrs	r3, r3, #28
 800065c:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000664:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 8000666:	68fa      	ldr	r2, [r7, #12]
 8000668:	4613      	mov	r3, r2
 800066a:	005b      	lsls	r3, r3, #1
 800066c:	4413      	add	r3, r2
 800066e:	009b      	lsls	r3, r3, #2
 8000670:	461a      	mov	r2, r3
 8000672:	4b04      	ldr	r3, [pc, #16]	; (8000684 <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 8000674:	4413      	add	r3, r2
 8000676:	68ba      	ldr	r2, [r7, #8]
 8000678:	601a      	str	r2, [r3, #0]
}
 800067a:	3714      	adds	r7, #20
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	50004414 	.word	0x50004414

08000688 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 800068c:	f7ff ff30 	bl	80004f0 <XMC_SCU_CLOCK_GetCpuClockFrequency>
 8000690:	4602      	mov	r2, r0
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 8000692:	4b04      	ldr	r3, [pc, #16]	; (80006a4 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 8000694:	695b      	ldr	r3, [r3, #20]
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	fa22 f303 	lsr.w	r3, r2, r3
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}
 800069e:	4618      	mov	r0, r3
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	50004600 	.word	0x50004600

080006a8 <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 80006b0:	4906      	ldr	r1, [pc, #24]	; (80006cc <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80006b2:	4b06      	ldr	r3, [pc, #24]	; (80006cc <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80006b4:	68db      	ldr	r3, [r3, #12]
 80006b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	4313      	orrs	r3, r2
 80006be:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	50004600 	.word	0x50004600

080006d0 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 80006d8:	4906      	ldr	r1, [pc, #24]	; (80006f4 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 80006dc:	699b      	ldr	r3, [r3, #24]
 80006de:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	4313      	orrs	r3, r2
 80006e6:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	50004600 	.word	0x50004600

080006f8 <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 8000700:	4906      	ldr	r1, [pc, #24]	; (800071c <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8000702:	4b06      	ldr	r3, [pc, #24]	; (800071c <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8000704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000706:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4313      	orrs	r3, r2
 800070e:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 8000710:	370c      	adds	r7, #12
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	50004600 	.word	0x50004600

08000720 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 800072a:	88fb      	ldrh	r3, [r7, #6]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d108      	bne.n	8000742 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000730:	4a0a      	ldr	r2, [pc, #40]	; (800075c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000732:	4b0a      	ldr	r3, [pc, #40]	; (800075c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000734:	68db      	ldr	r3, [r3, #12]
 8000736:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800073a:	f023 0301 	bic.w	r3, r3, #1
 800073e:	60d3      	str	r3, [r2, #12]
 8000740:	e007      	b.n	8000752 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000742:	4a06      	ldr	r2, [pc, #24]	; (800075c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000744:	4b05      	ldr	r3, [pc, #20]	; (800075c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000746:	68db      	ldr	r3, [r3, #12]
 8000748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	60d3      	str	r3, [r2, #12]
  }
}
 8000752:	370c      	adds	r7, #12
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr
 800075c:	50004710 	.word	0x50004710

08000760 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800076a:	bf00      	nop
 800076c:	4b09      	ldr	r3, [pc, #36]	; (8000794 <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 800076e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000772:	f003 0308 	and.w	r3, r3, #8
 8000776:	2b00      	cmp	r3, #0
 8000778:	d1f8      	bne.n	800076c <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 800077a:	4907      	ldr	r1, [pc, #28]	; (8000798 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 800077e:	68db      	ldr	r3, [r3, #12]
 8000780:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 8000784:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 8000786:	4313      	orrs	r3, r2
 8000788:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 800078a:	370c      	adds	r7, #12
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr
 8000794:	50004000 	.word	0x50004000
 8000798:	50004300 	.word	0x50004300

0800079c <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80007a6:	bf00      	nop
 80007a8:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 80007aa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80007ae:	f003 0308 	and.w	r3, r3, #8
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d1f8      	bne.n	80007a8 <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80007b6:	4907      	ldr	r1, [pc, #28]	; (80007d4 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80007b8:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80007ba:	68db      	ldr	r3, [r3, #12]
 80007bc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 80007c0:	79fb      	ldrb	r3, [r7, #7]
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80007c2:	4313      	orrs	r3, r2
 80007c4:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	50004000 	.word	0x50004000
 80007d4:	50004300 	.word	0x50004300

080007d8 <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 80007e0:	4906      	ldr	r1, [pc, #24]	; (80007fc <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 80007e2:	4b06      	ldr	r3, [pc, #24]	; (80007fc <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 80007e4:	68db      	ldr	r3, [r3, #12]
 80007e6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 80007ee:	4313      	orrs	r3, r2
 80007f0:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 80007f2:	370c      	adds	r7, #12
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr
 80007fc:	50004600 	.word	0x50004600

08000800 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8000808:	4906      	ldr	r1, [pc, #24]	; (8000824 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 800080a:	4b06      	ldr	r3, [pc, #24]	; (8000824 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 800080c:	6a1b      	ldr	r3, [r3, #32]
 800080e:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8000816:	4313      	orrs	r3, r2
 8000818:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	50004600 	.word	0x50004600

08000828 <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000830:	4906      	ldr	r1, [pc, #24]	; (800084c <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8000832:	4b06      	ldr	r3, [pc, #24]	; (800084c <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8000834:	691b      	ldr	r3, [r3, #16]
 8000836:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 800083e:	4313      	orrs	r3, r2
 8000840:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 8000842:	370c      	adds	r7, #12
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr
 800084c:	50004600 	.word	0x50004600

08000850 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8000858:	4906      	ldr	r1, [pc, #24]	; (8000874 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 800085a:	4b06      	ldr	r3, [pc, #24]	; (8000874 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 800085c:	695b      	ldr	r3, [r3, #20]
 800085e:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8000866:	4313      	orrs	r3, r2
 8000868:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 800086a:	370c      	adds	r7, #12
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr
 8000874:	50004600 	.word	0x50004600

08000878 <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8000880:	4906      	ldr	r1, [pc, #24]	; (800089c <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8000882:	4b06      	ldr	r3, [pc, #24]	; (800089c <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8000884:	699b      	ldr	r3, [r3, #24]
 8000886:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 800088e:	4313      	orrs	r3, r2
 8000890:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
}
 8000892:	370c      	adds	r7, #12
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr
 800089c:	50004600 	.word	0x50004600

080008a0 <XMC_SCU_CLOCK_SetWdtClockDivider>:
}
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80008a8:	4906      	ldr	r1, [pc, #24]	; (80008c4 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 80008ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008ae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80008b6:	4313      	orrs	r3, r2
 80008b8:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr
 80008c4:	50004600 	.word	0x50004600

080008c8 <XMC_SCU_CLOCK_EnableClock>:
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 80008d2:	4a04      	ldr	r2, [pc, #16]	; (80008e4 <XMC_SCU_CLOCK_EnableClock+0x1c>)
 80008d4:	79fb      	ldrb	r3, [r7, #7]
 80008d6:	6053      	str	r3, [r2, #4]
}
 80008d8:	370c      	adds	r7, #12
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	50004600 	.word	0x50004600

080008e8 <XMC_SCU_CLOCK_UngatePeripheralClock>:
  *(uint32_t *)((&(SCU_CLK->CGATSET0)) + (index * 3U)) = (uint32_t)mask;
}

/* API to ungate a given module clock */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((peripheral & 0xf0000000UL) >> 28UL);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	0f1b      	lsrs	r3, r3, #28
 80008f4:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80008fc:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_CLK->CGATCLR0) + (index * 3U)) = (uint32_t)mask;
 80008fe:	68fa      	ldr	r2, [r7, #12]
 8000900:	4613      	mov	r3, r2
 8000902:	005b      	lsls	r3, r3, #1
 8000904:	4413      	add	r3, r2
 8000906:	009b      	lsls	r3, r3, #2
 8000908:	461a      	mov	r2, r3
 800090a:	4b04      	ldr	r3, [pc, #16]	; (800091c <XMC_SCU_CLOCK_UngatePeripheralClock+0x34>)
 800090c:	4413      	add	r3, r2
 800090e:	68ba      	ldr	r2, [r7, #8]
 8000910:	601a      	str	r2, [r3, #0]
}
 8000912:	3714      	adds	r7, #20
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr
 800091c:	50004648 	.word	0x50004648

08000920 <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 800092a:	4a19      	ldr	r2, [pc, #100]	; (8000990 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800092c:	4b18      	ldr	r3, [pc, #96]	; (8000990 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800092e:	695b      	ldr	r3, [r3, #20]
 8000930:	f043 0301 	orr.w	r3, r3, #1
 8000934:	6153      	str	r3, [r2, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000936:	4a16      	ldr	r2, [pc, #88]	; (8000990 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000938:	4b15      	ldr	r3, [pc, #84]	; (8000990 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800093a:	695b      	ldr	r3, [r3, #20]
 800093c:	f043 0310 	orr.w	r3, r3, #16
 8000940:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000942:	4913      	ldr	r1, [pc, #76]	; (8000990 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	3b01      	subs	r3, #1
 8000948:	021a      	lsls	r2, r3, #8
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	3b01      	subs	r3, #1
 800094e:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000950:	4313      	orrs	r3, r2
 8000952:	614b      	str	r3, [r1, #20]
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8000954:	4a0e      	ldr	r2, [pc, #56]	; (8000990 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000956:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000958:	695b      	ldr	r3, [r3, #20]
 800095a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800095e:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000960:	4a0b      	ldr	r2, [pc, #44]	; (8000990 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000962:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000964:	695b      	ldr	r3, [r3, #20]
 8000966:	f023 0310 	bic.w	r3, r3, #16
 800096a:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 800096c:	4a08      	ldr	r2, [pc, #32]	; (8000990 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800096e:	4b08      	ldr	r3, [pc, #32]	; (8000990 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000970:	695b      	ldr	r3, [r3, #20]
 8000972:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000976:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 8000978:	bf00      	nop
 800097a:	4b05      	ldr	r3, [pc, #20]	; (8000990 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800097c:	691b      	ldr	r3, [r3, #16]
 800097e:	f003 0304 	and.w	r3, r3, #4
 8000982:	2b00      	cmp	r3, #0
 8000984:	d0f9      	beq.n	800097a <XMC_SCU_CLOCK_StartUsbPll+0x5a>
  {
    /* wait for PLL Lock */
  }

}
 8000986:	370c      	adds	r7, #12
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr
 8000990:	50004710 	.word	0x50004710

08000994 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 800099e:	4a0f      	ldr	r2, [pc, #60]	; (80009dc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009a0:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80009a8:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 80009aa:	79fb      	ldrb	r3, [r7, #7]
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d10e      	bne.n	80009ce <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 80009b0:	4a0a      	ldr	r2, [pc, #40]	; (80009dc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009b2:	4b0a      	ldr	r3, [pc, #40]	; (80009dc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80009ba:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 80009bc:	2064      	movs	r0, #100	; 0x64
 80009be:	f7ff fdaf 	bl	8000520 <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 80009c2:	4a06      	ldr	r2, [pc, #24]	; (80009dc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009c4:	4b05      	ldr	r3, [pc, #20]	; (80009dc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80009cc:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 80009ce:	2064      	movs	r0, #100	; 0x64
 80009d0:	f7ff fda6 	bl	8000520 <XMC_SCU_lDelay>
}
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	50004710 	.word	0x50004710

080009e0 <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 80009e4:	4b12      	ldr	r3, [pc, #72]	; (8000a30 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f003 0301 	and.w	r3, r3, #1
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d109      	bne.n	8000a04 <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 80009f0:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80009f2:	2201      	movs	r2, #1
 80009f4:	605a      	str	r2, [r3, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 80009f6:	bf00      	nop
 80009f8:	4b0d      	ldr	r3, [pc, #52]	; (8000a30 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f003 0301 	and.w	r3, r3, #1
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d0f9      	beq.n	80009f8 <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8000a04:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d00a      	beq.n	8000a26 <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8000a10:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000a12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a16:	609a      	str	r2, [r3, #8]
    while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8000a18:	bf00      	nop
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d1f9      	bne.n	8000a1a <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	50004200 	.word	0x50004200
 8000a34:	50004400 	.word	0x50004400

08000a38 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  //return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
  return 1;
 8000a3c:	2301      	movs	r3, #1
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr

08000a48 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8000a4c:	bf00      	nop
 8000a4e:	4b16      	ldr	r3, [pc, #88]	; (8000aa8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 8000a50:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d1f8      	bne.n	8000a4e <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6>
  {
    /* Wait until no pending update to OSCULCTRL register in hibernate domain */
  }
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8000a5c:	4a13      	ldr	r2, [pc, #76]	; (8000aac <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8000a5e:	4b13      	ldr	r3, [pc, #76]	; (8000aac <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8000a60:	69db      	ldr	r3, [r3, #28]
 8000a62:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000a66:	61d3      	str	r3, [r2, #28]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8000a68:	bf00      	nop
 8000a6a:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 8000a6c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000a70:	f003 0308 	and.w	r3, r3, #8
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d1f8      	bne.n	8000a6a <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x22>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8000a78:	4a0c      	ldr	r2, [pc, #48]	; (8000aac <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8000a7a:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8000a7c:	68db      	ldr	r3, [r3, #12]
 8000a7e:	f043 0308 	orr.w	r3, r3, #8
 8000a82:	60d3      	str	r3, [r2, #12]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDSET_Msk)
 8000a84:	bf00      	nop
 8000a86:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 8000a88:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000a8c:	f003 0304 	and.w	r3, r3, #4
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d1f8      	bne.n	8000a86 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x3e>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDSET = (uint32_t)SCU_HIBERNATE_HDSET_ULPWDG_Msk;
 8000a94:	4b05      	ldr	r3, [pc, #20]	; (8000aac <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8000a96:	2208      	movs	r2, #8
 8000a98:	609a      	str	r2, [r3, #8]

  while (XMC_SCU_GetMirrorStatus() != 0)
 8000a9a:	bf00      	nop
 8000a9c:	f7ff fd34 	bl	8000508 <XMC_SCU_GetMirrorStatus>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d1fa      	bne.n	8000a9c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x54>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }
}
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	50004000 	.word	0x50004000
 8000aac:	50004300 	.word	0x50004300

08000ab0 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8000ab0:	b5b0      	push	{r4, r5, r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8000ab4:	4a0f      	ldr	r2, [pc, #60]	; (8000af4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000ab6:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000abe:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000ac0:	4d0d      	ldr	r5, [pc, #52]	; (8000af8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000ac2:	4b0d      	ldr	r3, [pc, #52]	; (8000af8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8000aca:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8000ace:	f004 fdb3 	bl	8005638 <OSCHP_GetFrequency>
 8000ad2:	4602      	mov	r2, r0
 8000ad4:	4b09      	ldr	r3, [pc, #36]	; (8000afc <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8000ad6:	fba3 2302 	umull	r2, r3, r3, r2
 8000ada:	0d1b      	lsrs	r3, r3, #20
 8000adc:	3b01      	subs	r3, #1
 8000ade:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000ae0:	4323      	orrs	r3, r4
 8000ae2:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000ae4:	4a03      	ldr	r2, [pc, #12]	; (8000af4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000ae6:	4b03      	ldr	r3, [pc, #12]	; (8000af4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000aee:	6053      	str	r3, [r2, #4]
}
 8000af0:	bdb0      	pop	{r4, r5, r7, pc}
 8000af2:	bf00      	nop
 8000af4:	50004710 	.word	0x50004710
 8000af8:	50004700 	.word	0x50004700
 8000afc:	6b5fca6b 	.word	0x6b5fca6b

08000b00 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8000b04:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000b0c:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000b10:	bf0c      	ite	eq
 8000b12:	2301      	moveq	r3, #1
 8000b14:	2300      	movne	r3, #0
 8000b16:	b2db      	uxtb	r3, r3
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	50004710 	.word	0x50004710

08000b28 <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000b2c:	4a05      	ldr	r2, [pc, #20]	; (8000b44 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000b2e:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b36:	f023 0302 	bic.w	r3, r3, #2
 8000b3a:	6053      	str	r3, [r2, #4]
}
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	50004710 	.word	0x50004710

08000b48 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000b4c:	4a05      	ldr	r2, [pc, #20]	; (8000b64 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000b4e:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b56:	f043 0302 	orr.w	r3, r3, #2
 8000b5a:	6053      	str	r3, [r2, #4]
}
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	50004710 	.word	0x50004710

08000b68 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60ba      	str	r2, [r7, #8]
 8000b70:	607b      	str	r3, [r7, #4]
 8000b72:	4603      	mov	r3, r0
 8000b74:	81fb      	strh	r3, [r7, #14]
 8000b76:	460b      	mov	r3, r1
 8000b78:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8000b7a:	89fb      	ldrh	r3, [r7, #14]
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff fdcf 	bl	8000720 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8000b82:	7b7b      	ldrb	r3, [r7, #13]
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	f040 8084 	bne.w	8000c92 <XMC_SCU_CLOCK_StartSystemPll+0x12a>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8000b8a:	89fb      	ldrh	r3, [r7, #14]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d109      	bne.n	8000ba4 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8000b90:	f004 fd52 	bl	8005638 <OSCHP_GetFrequency>
 8000b94:	4602      	mov	r2, r0
 8000b96:	4b4b      	ldr	r3, [pc, #300]	; (8000cc4 <XMC_SCU_CLOCK_StartSystemPll+0x15c>)
 8000b98:	fba3 2302 	umull	r2, r3, r3, r2
 8000b9c:	0c9b      	lsrs	r3, r3, #18
 8000b9e:	059b      	lsls	r3, r3, #22
 8000ba0:	617b      	str	r3, [r7, #20]
 8000ba2:	e002      	b.n	8000baa <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8000ba4:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000ba8:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	687a      	ldr	r2, [r7, #4]
 8000bae:	fb02 f203 	mul.w	r2, r2, r3
 8000bb2:	68bb      	ldr	r3, [r7, #8]
 8000bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bb8:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	4a42      	ldr	r2, [pc, #264]	; (8000cc8 <XMC_SCU_CLOCK_StartSystemPll+0x160>)
 8000bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8000bc2:	091b      	lsrs	r3, r3, #4
 8000bc4:	0d9b      	lsrs	r3, r3, #22
 8000bc6:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000bc8:	4a40      	ldr	r2, [pc, #256]	; (8000ccc <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000bca:	4b40      	ldr	r3, [pc, #256]	; (8000ccc <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	f043 0301 	orr.w	r3, r3, #1
 8000bd2:	6053      	str	r3, [r2, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8000bd4:	4a3d      	ldr	r2, [pc, #244]	; (8000ccc <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000bd6:	4b3d      	ldr	r3, [pc, #244]	; (8000ccc <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	f043 0310 	orr.w	r3, r3, #16
 8000bde:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000be0:	493a      	ldr	r1, [pc, #232]	; (8000ccc <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000be2:	4b3a      	ldr	r3, [pc, #232]	; (8000ccc <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000be4:	689a      	ldr	r2, [r3, #8]
 8000be6:	4b3a      	ldr	r3, [pc, #232]	; (8000cd0 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8000be8:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000bea:	687a      	ldr	r2, [r7, #4]
 8000bec:	3a01      	subs	r2, #1
 8000bee:	0212      	lsls	r2, r2, #8
 8000bf0:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	3b01      	subs	r3, #1
 8000bf6:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000bf8:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	3b01      	subs	r3, #1
 8000bfe:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000c00:	4313      	orrs	r3, r2
 8000c02:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000c04:	4a31      	ldr	r2, [pc, #196]	; (8000ccc <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c06:	4b31      	ldr	r3, [pc, #196]	; (8000ccc <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c0e:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000c10:	4a2e      	ldr	r2, [pc, #184]	; (8000ccc <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c12:	4b2e      	ldr	r3, [pc, #184]	; (8000ccc <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	f023 0310 	bic.w	r3, r3, #16
 8000c1a:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8000c1c:	4a2b      	ldr	r2, [pc, #172]	; (8000ccc <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c1e:	4b2b      	ldr	r3, [pc, #172]	; (8000ccc <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c26:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000c28:	bf00      	nop
 8000c2a:	4b28      	ldr	r3, [pc, #160]	; (8000ccc <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f003 0304 	and.w	r3, r3, #4
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d0f9      	beq.n	8000c2a <XMC_SCU_CLOCK_StartSystemPll+0xc2>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000c36:	4a25      	ldr	r2, [pc, #148]	; (8000ccc <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c38:	4b24      	ldr	r3, [pc, #144]	; (8000ccc <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	f023 0301 	bic.w	r3, r3, #1
 8000c40:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000c42:	bf00      	nop
 8000c44:	4b21      	ldr	r3, [pc, #132]	; (8000ccc <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f003 0301 	and.w	r3, r3, #1
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d1f9      	bne.n	8000c44 <XMC_SCU_CLOCK_StartSystemPll+0xdc>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	4a20      	ldr	r2, [pc, #128]	; (8000cd4 <XMC_SCU_CLOCK_StartSystemPll+0x16c>)
 8000c54:	fba2 2303 	umull	r2, r3, r2, r3
 8000c58:	095b      	lsrs	r3, r3, #5
 8000c5a:	0d9b      	lsrs	r3, r3, #22
 8000c5c:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000c5e:	6a3a      	ldr	r2, [r7, #32]
 8000c60:	693b      	ldr	r3, [r7, #16]
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d202      	bcs.n	8000c6c <XMC_SCU_CLOCK_StartSystemPll+0x104>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000c66:	6938      	ldr	r0, [r7, #16]
 8000c68:	f000 f838 	bl	8000cdc <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	085b      	lsrs	r3, r3, #1
 8000c70:	4a19      	ldr	r2, [pc, #100]	; (8000cd8 <XMC_SCU_CLOCK_StartSystemPll+0x170>)
 8000c72:	fba2 2303 	umull	r2, r3, r2, r3
 8000c76:	095b      	lsrs	r3, r3, #5
 8000c78:	0d9b      	lsrs	r3, r3, #22
 8000c7a:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000c7c:	6a3a      	ldr	r2, [r7, #32]
 8000c7e:	693b      	ldr	r3, [r7, #16]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d202      	bcs.n	8000c8a <XMC_SCU_CLOCK_StartSystemPll+0x122>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000c84:	6938      	ldr	r0, [r7, #16]
 8000c86:	f000 f829 	bl	8000cdc <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8000c8a:	6a38      	ldr	r0, [r7, #32]
 8000c8c:	f000 f826 	bl	8000cdc <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8000c90:	e015      	b.n	8000cbe <XMC_SCU_CLOCK_StartSystemPll+0x156>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000c92:	490e      	ldr	r1, [pc, #56]	; (8000ccc <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c94:	4b0d      	ldr	r3, [pc, #52]	; (8000ccc <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c96:	689b      	ldr	r3, [r3, #8]
 8000c98:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8000c9c:	6a3b      	ldr	r3, [r7, #32]
 8000c9e:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	608b      	str	r3, [r1, #8]
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000ca4:	4a09      	ldr	r2, [pc, #36]	; (8000ccc <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000ca6:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	f043 0301 	orr.w	r3, r3, #1
 8000cae:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000cb0:	bf00      	nop
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d0f9      	beq.n	8000cb2 <XMC_SCU_CLOCK_StartSystemPll+0x14a>
    {
      /* wait for prescaler mode */
    }
  }
}
 8000cbe:	3718      	adds	r7, #24
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	431bde83 	.word	0x431bde83
 8000cc8:	aaaaaaab 	.word	0xaaaaaaab
 8000ccc:	50004710 	.word	0x50004710
 8000cd0:	f08080ff 	.word	0xf08080ff
 8000cd4:	88888889 	.word	0x88888889
 8000cd8:	b60b60b7 	.word	0xb60b60b7

08000cdc <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000ce4:	4907      	ldr	r1, [pc, #28]	; (8000d04 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8000ce6:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8000ce8:	689b      	ldr	r3, [r3, #8]
 8000cea:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	3b01      	subs	r3, #1
 8000cf2:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	608b      	str	r3, [r1, #8]
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  XMC_SCU_lDelay(50U);
 8000cf8:	2032      	movs	r0, #50	; 0x32
 8000cfa:	f7ff fc11 	bl	8000520 <XMC_SCU_lDelay>
}
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	50004710 	.word	0x50004710

08000d08 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	60da      	str	r2, [r3, #12]
}
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop

08000d28 <XMC_CCU4_lDeassertReset>:
    XMC_ASSERT("XMC_CCU4_lAssertReset:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4a10      	ldr	r2, [pc, #64]	; (8000d74 <XMC_CCU4_lDeassertReset+0x4c>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d103      	bne.n	8000d40 <XMC_CCU4_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 8000d38:	2004      	movs	r0, #4
 8000d3a:	f7ff fc89 	bl	8000650 <XMC_SCU_RESET_DeassertPeripheralReset>
 8000d3e:	e016      	b.n	8000d6e <XMC_CCU4_lDeassertReset+0x46>
  }
#if defined(CCU41)
  else if (module == CCU41)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	4a0d      	ldr	r2, [pc, #52]	; (8000d78 <XMC_CCU4_lDeassertReset+0x50>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d103      	bne.n	8000d50 <XMC_CCU4_lDeassertReset+0x28>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 8000d48:	2008      	movs	r0, #8
 8000d4a:	f7ff fc81 	bl	8000650 <XMC_SCU_RESET_DeassertPeripheralReset>
 8000d4e:	e00e      	b.n	8000d6e <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	4a0a      	ldr	r2, [pc, #40]	; (8000d7c <XMC_CCU4_lDeassertReset+0x54>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d103      	bne.n	8000d60 <XMC_CCU4_lDeassertReset+0x38>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 8000d58:	2010      	movs	r0, #16
 8000d5a:	f7ff fc79 	bl	8000650 <XMC_SCU_RESET_DeassertPeripheralReset>
 8000d5e:	e006      	b.n	8000d6e <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4a07      	ldr	r2, [pc, #28]	; (8000d80 <XMC_CCU4_lDeassertReset+0x58>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d102      	bne.n	8000d6e <XMC_CCU4_lDeassertReset+0x46>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 8000d68:	4806      	ldr	r0, [pc, #24]	; (8000d84 <XMC_CCU4_lDeassertReset+0x5c>)
 8000d6a:	f7ff fc71 	bl	8000650 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	4000c000 	.word	0x4000c000
 8000d78:	40010000 	.word	0x40010000
 8000d7c:	40014000 	.word	0x40014000
 8000d80:	48004000 	.word	0x48004000
 8000d84:	10000001 	.word	0x10000001

08000d88 <XMC_CCU4_lUngateClock>:
    XMC_ASSERT("XMC_CCU4_lGateClock:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4a10      	ldr	r2, [pc, #64]	; (8000dd4 <XMC_CCU4_lUngateClock+0x4c>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d103      	bne.n	8000da0 <XMC_CCU4_lUngateClock+0x18>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
 8000d98:	2004      	movs	r0, #4
 8000d9a:	f7ff fda5 	bl	80008e8 <XMC_SCU_CLOCK_UngatePeripheralClock>
 8000d9e:	e016      	b.n	8000dce <XMC_CCU4_lUngateClock+0x46>
  }
#if defined(CCU41)
  else if (module == CCU41)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4a0d      	ldr	r2, [pc, #52]	; (8000dd8 <XMC_CCU4_lUngateClock+0x50>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d103      	bne.n	8000db0 <XMC_CCU4_lUngateClock+0x28>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU41);
 8000da8:	2008      	movs	r0, #8
 8000daa:	f7ff fd9d 	bl	80008e8 <XMC_SCU_CLOCK_UngatePeripheralClock>
 8000dae:	e00e      	b.n	8000dce <XMC_CCU4_lUngateClock+0x46>
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4a0a      	ldr	r2, [pc, #40]	; (8000ddc <XMC_CCU4_lUngateClock+0x54>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d103      	bne.n	8000dc0 <XMC_CCU4_lUngateClock+0x38>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU42);
 8000db8:	2010      	movs	r0, #16
 8000dba:	f7ff fd95 	bl	80008e8 <XMC_SCU_CLOCK_UngatePeripheralClock>
 8000dbe:	e006      	b.n	8000dce <XMC_CCU4_lUngateClock+0x46>
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	4a07      	ldr	r2, [pc, #28]	; (8000de0 <XMC_CCU4_lUngateClock+0x58>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d102      	bne.n	8000dce <XMC_CCU4_lUngateClock+0x46>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU43);
 8000dc8:	4806      	ldr	r0, [pc, #24]	; (8000de4 <XMC_CCU4_lUngateClock+0x5c>)
 8000dca:	f7ff fd8d 	bl	80008e8 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lUngateClock:Invalid Module Pointer", 0);
  }
}
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	4000c000 	.word	0x4000c000
 8000dd8:	40010000 	.word	0x40010000
 8000ddc:	40014000 	.word	0x40014000
 8000de0:	48004000 	.word	0x48004000
 8000de4:	10000001 	.word	0x10000001

08000de8 <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8000df0:	2010      	movs	r0, #16
 8000df2:	f7ff fd69 	bl	80008c8 <XMC_SCU_CLOCK_EnableClock>
#endif
  
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f7ff ffc6 	bl	8000d88 <XMC_CCU4_lUngateClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f7ff ff93 	bl	8000d28 <XMC_CCU4_lDeassertReset>
#endif
}
 8000e02:	3708      	adds	r7, #8
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	460b      	mov	r3, r1
 8000e12:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 8000e14:	6878      	ldr	r0, [r7, #4]
 8000e16:	f7ff ffe7 	bl	8000de8 <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f7ff ff74 	bl	8000d08 <XMC_CCU4_StartPrescaler>
  
  gctrl = module->GCTRL;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e2c:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 8000e2e:	78fb      	ldrb	r3, [r7, #3]
 8000e30:	039b      	lsls	r3, r3, #14
 8000e32:	68fa      	ldr	r2, [r7, #12]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	68fa      	ldr	r2, [r7, #12]
 8000e3c:	601a      	str	r2, [r3, #0]
}
 8000e3e:	3710      	adds	r7, #16
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <XMC_CCU4_SetMultiChannelShadowTransferMode>:
  module->GCTRL = gctrl;
}

/* API to configure the multichannel shadow transfer request via SW and via the CCU4x.MCSS input. */
void XMC_CCU4_SetMultiChannelShadowTransferMode(XMC_CCU4_MODULE_t *const module, const uint32_t slice_mode_msk)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6039      	str	r1, [r7, #0]
  uint32_t gctrl;

  XMC_ASSERT("XMC_CCU4_SetMultiChannelShadowTransferMode:Invalid module Pointer", XMC_CCU4_IsValidModule(module));
  
  gctrl = module->GCTRL;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t)slice_mode_msk >> 16U);
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	0c1b      	lsrs	r3, r3, #16
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	68fa      	ldr	r2, [r7, #12]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t)slice_mode_msk & 0xFFFFU);
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	68fa      	ldr	r2, [r7, #12]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	60fb      	str	r3, [r7, #12]
  module->GCTRL = gctrl;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	68fa      	ldr	r2, [r7, #12]
 8000e6e:	601a      	str	r2, [r3, #0]
}
 8000e70:	3714      	adds	r7, #20
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop

08000e7c <XMC_CCU4_SLICE_CompareInit>:

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	795b      	ldrb	r3, [r3, #5]
 8000e92:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	051a      	lsls	r2, r3, #20
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	791b      	ldrb	r3, [r3, #4]
 8000ea2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	795b      	ldrb	r3, [r3, #5]
 8000eb2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	461a      	mov	r2, r3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	795b      	ldrb	r3, [r3, #5]
 8000ec2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	461a      	mov	r2, r3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	791b      	ldrb	r3, [r3, #4]
 8000ed2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	461a      	mov	r2, r3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <XMC_CCU4_SLICE_StartConfig>:

/* API to configure the Start trigger function of a slice */
void XMC_CCU4_SLICE_StartConfig(XMC_CCU4_SLICE_t *const slice,
                            const XMC_CCU4_SLICE_EVENT_t event,
                                const XMC_CCU4_SLICE_START_MODE_t start_mode)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	70fb      	strb	r3, [r7, #3]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_StartConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_StartConfig:Invalid Start Mode", 
             ((start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR) ||\
              (start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START)));
  /* First, Bind the event with the stop function */
  cmc = slice->CMC;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	60bb      	str	r3, [r7, #8]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_STRTS_Msk);
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	f023 0303 	bic.w	r3, r3, #3
 8000f04:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_STRTS_Pos;
 8000f06:	78fb      	ldrb	r3, [r7, #3]
 8000f08:	68ba      	ldr	r2, [r7, #8]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	60bb      	str	r3, [r7, #8]

  slice->CMC = cmc;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	68ba      	ldr	r2, [r7, #8]
 8000f12:	605a      	str	r2, [r3, #4]
  
  tc  = slice->TC;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	695b      	ldr	r3, [r3, #20]
 8000f18:	60fb      	str	r3, [r7, #12]
  /* Next, Configure the start mode */
  if (start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR)
 8000f1a:	78bb      	ldrb	r3, [r7, #2]
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d104      	bne.n	8000f2a <XMC_CCU4_SLICE_StartConfig+0x42>
  {
    tc |= (uint32_t)CCU4_CC4_TC_STRM_Msk;
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	e003      	b.n	8000f32 <XMC_CCU4_SLICE_StartConfig+0x4a>
  }
  else
  {
    tc &= ~((uint32_t)CCU4_CC4_TC_STRM_Msk);
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000f30:	60fb      	str	r3, [r7, #12]
  }
  
  slice->TC = tc;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	68fa      	ldr	r2, [r7, #12]
 8000f36:	615a      	str	r2, [r3, #20]
}
 8000f38:	3714      	adds	r7, #20
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <XMC_CCU4_SLICE_StopConfig>:

/* API to configure the Stop trigger function of a slice */
void XMC_CCU4_SLICE_StopConfig(XMC_CCU4_SLICE_t *const slice,
                           const XMC_CCU4_SLICE_EVENT_t event,
                               const XMC_CCU4_SLICE_END_MODE_t end_mode)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	70fb      	strb	r3, [r7, #3]
 8000f50:	4613      	mov	r3, r2
 8000f52:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Start Mode", XMC_CCU4_CHECK_END_MODE(end_mode));
  
  /* First, Bind the event with the stop function */
  cmc = slice->CMC;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_ENDS_Msk);
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	f023 030c 	bic.w	r3, r3, #12
 8000f60:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_ENDS_Pos;
 8000f62:	78fb      	ldrb	r3, [r7, #3]
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	68fa      	ldr	r2, [r7, #12]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	68fa      	ldr	r2, [r7, #12]
 8000f70:	605a      	str	r2, [r3, #4]
  
  /* Next, Configure the stop mode */
  tc = slice->TC;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	695b      	ldr	r3, [r3, #20]
 8000f76:	60bb      	str	r3, [r7, #8]
  tc &= ~((uint32_t) CCU4_CC4_TC_ENDM_Msk);
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000f7e:	60bb      	str	r3, [r7, #8]
  tc |= ((uint32_t) end_mode) << CCU4_CC4_TC_ENDM_Pos;
 8000f80:	78bb      	ldrb	r3, [r7, #2]
 8000f82:	021b      	lsls	r3, r3, #8
 8000f84:	68ba      	ldr	r2, [r7, #8]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	60bb      	str	r3, [r7, #8]

  slice->TC = tc;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	68ba      	ldr	r2, [r7, #8]
 8000f8e:	615a      	str	r2, [r3, #20]
}
 8000f90:	3714      	adds	r7, #20
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <XMC_CCU4_SLICE_LoadConfig>:

/* API to configure the Load trigger function of a slice */
void XMC_CCU4_SLICE_LoadConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_SLICE_LoadConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_LoadConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the load function */
  cmc = slice->CMC;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_LDS_Msk);
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000fb4:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_LDS_Pos;
 8000fb6:	78fb      	ldrb	r3, [r7, #3]
 8000fb8:	031b      	lsls	r3, r3, #12
 8000fba:	68fa      	ldr	r2, [r7, #12]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	605a      	str	r2, [r3, #4]
}
 8000fc6:	3714      	adds	r7, #20
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <XMC_CCU4_SLICE_ModulationConfig>:
/* API to configure the slice modulation function */
void XMC_CCU4_SLICE_ModulationConfig(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_EVENT_t event,
                                     const XMC_CCU4_SLICE_MODULATION_MODE_t mod_mode,
                                     const bool synch_with_pwm)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	4608      	mov	r0, r1
 8000fda:	4611      	mov	r1, r2
 8000fdc:	461a      	mov	r2, r3
 8000fde:	4603      	mov	r3, r0
 8000fe0:	70fb      	strb	r3, [r7, #3]
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	70bb      	strb	r3, [r7, #2]
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	707b      	strb	r3, [r7, #1]
  XMC_ASSERT("XMC_CCU4_SLICE_ModulationConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_ModulationConfig:Invalid Modulation Mode",
             ((mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_OUT) ||\
              (mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_ST_OUT)));
  
  tc  = slice->TC;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	695b      	ldr	r3, [r3, #20]
 8000fee:	60fb      	str	r3, [r7, #12]
  cmc = slice->CMC;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	60bb      	str	r3, [r7, #8]
  
  /* First, Bind the event with the modulation function */
  cmc &= ~((uint32_t) CCU4_CC4_CMC_MOS_Msk);
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000ffc:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_MOS_Pos;
 8000ffe:	78fb      	ldrb	r3, [r7, #3]
 8001000:	049b      	lsls	r3, r3, #18
 8001002:	68ba      	ldr	r2, [r7, #8]
 8001004:	4313      	orrs	r3, r2
 8001006:	60bb      	str	r3, [r7, #8]
  slice->CMC = cmc;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	68ba      	ldr	r2, [r7, #8]
 800100c:	605a      	str	r2, [r3, #4]
  
  /* Next, Modulation mode */
  if (mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_OUT)
 800100e:	78bb      	ldrb	r3, [r7, #2]
 8001010:	2b01      	cmp	r3, #1
 8001012:	d104      	bne.n	800101e <XMC_CCU4_SLICE_ModulationConfig+0x4e>
  {
    tc |= (uint32_t) CCU4_CC4_TC_EMT_Msk;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	e003      	b.n	8001026 <XMC_CCU4_SLICE_ModulationConfig+0x56>
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_EMT_Msk);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001024:	60fb      	str	r3, [r7, #12]
  }

  /* Synchronization of modulation effect with PWM cycle */
  if (synch_with_pwm == (bool) true)
 8001026:	787b      	ldrb	r3, [r7, #1]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d004      	beq.n	8001036 <XMC_CCU4_SLICE_ModulationConfig+0x66>
  {
    tc |= (uint32_t) CCU4_CC4_TC_EMS_Msk;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	e003      	b.n	800103e <XMC_CCU4_SLICE_ModulationConfig+0x6e>
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_EMS_Msk);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800103c:	60fb      	str	r3, [r7, #12]
  }
  
  slice->TC = tc;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	68fa      	ldr	r2, [r7, #12]
 8001042:	615a      	str	r2, [r3, #20]
}
 8001044:	3714      	adds	r7, #20
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop

08001050 <XMC_CCU4_SLICE_CountConfig>:

/* API to configure the slice count function */
void XMC_CCU4_SLICE_CountConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	460b      	mov	r3, r1
 800105a:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_SLICE_CountConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CountConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));

  /* Bind the event with the count function */
  cmc = slice->CMC;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_CNTS_Msk);
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001068:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_CNTS_Pos;
 800106a:	78fb      	ldrb	r3, [r7, #3]
 800106c:	039b      	lsls	r3, r3, #14
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	4313      	orrs	r3, r2
 8001072:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	68fa      	ldr	r2, [r7, #12]
 8001078:	605a      	str	r2, [r3, #4]
}
 800107a:	3714      	adds	r7, #20
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <XMC_CCU4_SLICE_GateConfig>:

/* API to configure slice gate function */
void XMC_CCU4_SLICE_GateConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	460b      	mov	r3, r1
 800108e:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_SLICE_GateConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_GateConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the gate function */
  cmc = slice->CMC;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_GATES_Msk);
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800109c:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_GATES_Pos;
 800109e:	78fb      	ldrb	r3, [r7, #3]
 80010a0:	021b      	lsls	r3, r3, #8
 80010a2:	68fa      	ldr	r2, [r7, #12]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	68fa      	ldr	r2, [r7, #12]
 80010ac:	605a      	str	r2, [r3, #4]
}
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <XMC_CCU4_SLICE_DirectionConfig>:
  slice->CMC = cmc;
}

/* API to configure direction function */
void XMC_CCU4_SLICE_DirectionConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	460b      	mov	r3, r1
 80010c2:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_SLICE_DirectionConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_DirectionConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the direction function */
  cmc = slice->CMC;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_UDS_Msk);
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80010d0:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_UDS_Pos;
 80010d2:	78fb      	ldrb	r3, [r7, #3]
 80010d4:	029b      	lsls	r3, r3, #10
 80010d6:	68fa      	ldr	r2, [r7, #12]
 80010d8:	4313      	orrs	r3, r2
 80010da:	60fb      	str	r3, [r7, #12]
  
  slice->CMC = cmc;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	68fa      	ldr	r2, [r7, #12]
 80010e0:	605a      	str	r2, [r3, #4]
}
 80010e2:	3714      	adds	r7, #20
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <XMC_CCU4_SLICE_StatusBitOverrideConfig>:

/* API to configure slice status bit override function */
void XMC_CCU4_SLICE_StatusBitOverrideConfig(XMC_CCU4_SLICE_t *const slice)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  uint32_t cmc;
  
  XMC_ASSERT("XMC_CCU4_SLICE_StatusBitOverrideConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  
  /* Bind the event with the override function */
  cmc = slice->CMC;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	60fb      	str	r3, [r7, #12]
  /* Map status bit trigger override to Event 1 & 
         status bit value override to Event 2 */
  cmc &= ~((uint32_t) CCU4_CC4_CMC_OFS_Msk);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001100:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) 1) << CCU4_CC4_CMC_OFS_Pos;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001108:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	68fa      	ldr	r2, [r7, #12]
 800110e:	605a      	str	r2, [r3, #4]
}
 8001110:	3714      	adds	r7, #20
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop

0800111c <XMC_CCU4_SLICE_TrapConfig>:

/* API to configure trap function */
void XMC_CCU4_SLICE_TrapConfig(XMC_CCU4_SLICE_t *const slice,
                               const XMC_CCU4_SLICE_TRAP_EXIT_MODE_t exit_mode,
                               const bool synch_with_pwm)
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	460b      	mov	r3, r1
 8001126:	70fb      	strb	r3, [r7, #3]
 8001128:	4613      	mov	r3, r2
 800112a:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_TrapConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_TrapConfig:Invalid Exit Mode", ((exit_mode == XMC_CCU4_SLICE_TRAP_EXIT_MODE_AUTOMATIC) ||\
                                                             (exit_mode == XMC_CCU4_SLICE_TRAP_EXIT_MODE_SW)));
    
  /* First, Map trap function to Event 2 */
  cmc = slice->CMC;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	60bb      	str	r3, [r7, #8]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_TS_Msk);
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001138:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) 1) << CCU4_CC4_CMC_TS_Pos;
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001140:	60bb      	str	r3, [r7, #8]
  slice->CMC = cmc;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	68ba      	ldr	r2, [r7, #8]
 8001146:	605a      	str	r2, [r3, #4]
  
  /* Next, Configure synchronization option */
  tc = slice->TC;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	695b      	ldr	r3, [r3, #20]
 800114c:	60fb      	str	r3, [r7, #12]

  if (synch_with_pwm == (bool) true)
 800114e:	78bb      	ldrb	r3, [r7, #2]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d004      	beq.n	800115e <XMC_CCU4_SLICE_TrapConfig+0x42>
  {
    tc |= (uint32_t) CCU4_CC4_TC_TRPSE_Msk;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	e003      	b.n	8001166 <XMC_CCU4_SLICE_TrapConfig+0x4a>
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_TRPSE_Msk);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001164:	60fb      	str	r3, [r7, #12]
  }
  
  /* Configure exit mode */
  if (exit_mode == XMC_CCU4_SLICE_TRAP_EXIT_MODE_SW)
 8001166:	78fb      	ldrb	r3, [r7, #3]
 8001168:	2b01      	cmp	r3, #1
 800116a:	d104      	bne.n	8001176 <XMC_CCU4_SLICE_TrapConfig+0x5a>
  {
    tc |= (uint32_t) CCU4_CC4_TC_TRPSW_Msk;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	e003      	b.n	800117e <XMC_CCU4_SLICE_TrapConfig+0x62>
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_TRPSW_Msk);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800117c:	60fb      	str	r3, [r7, #12]
  }
  
  slice->TC = tc;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	68fa      	ldr	r2, [r7, #12]
 8001182:	615a      	str	r2, [r3, #20]
}
 8001184:	3714      	adds	r7, #20
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop

08001190 <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent>:

/* API to configure a slice Status Bit Override event */
void XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent(XMC_CCU4_SLICE_t *const slice,
                                                    const XMC_CCU4_SLICE_EVENT_CONFIG_t *const ev1_config,
                                                    const XMC_CCU4_SLICE_EVENT_CONFIG_t *const ev2_config)
{
 8001190:	b480      	push	{r7}
 8001192:	b087      	sub	sp, #28
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS1_EV2IS_Pos);
  ins |= ((uint32_t) ev2_config->mapped_input) << CCU4_CC4_INS1_EV2IS_Pos;
  
  slice->INS1 = ins;
#else
  ins = slice->INS;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	617b      	str	r3, [r7, #20]

  /* Configure the edge sensitivity for event 1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU4_CC4_INS_EV1EM_Pos);
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80011a8:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->edge) << CCU4_CC4_INS_EV1EM_Pos;
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	785b      	ldrb	r3, [r3, #1]
 80011ae:	049b      	lsls	r3, r3, #18
 80011b0:	697a      	ldr	r2, [r7, #20]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	617b      	str	r3, [r7, #20]
  
  /* Configure the edge sensitivity for event 2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU4_CC4_INS_EV2EM_Pos);
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80011bc:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->edge) << CCU4_CC4_INS_EV2EM_Pos;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	785b      	ldrb	r3, [r3, #1]
 80011c2:	051b      	lsls	r3, r3, #20
 80011c4:	697a      	ldr	r2, [r7, #20]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	617b      	str	r3, [r7, #20]
  
  /* Configure the level sensitivity for event 1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU4_CC4_INS_EV1LM_Pos);
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80011d0:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->level) << CCU4_CC4_INS_EV1LM_Pos;
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	789b      	ldrb	r3, [r3, #2]
 80011d6:	05db      	lsls	r3, r3, #23
 80011d8:	697a      	ldr	r2, [r7, #20]
 80011da:	4313      	orrs	r3, r2
 80011dc:	617b      	str	r3, [r7, #20]
  
  /* Configure the level sensitivity for event 2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU4_CC4_INS_EV2LM_Pos);
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80011e4:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->level) << CCU4_CC4_INS_EV2LM_Pos;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	789b      	ldrb	r3, [r3, #2]
 80011ea:	061b      	lsls	r3, r3, #24
 80011ec:	697a      	ldr	r2, [r7, #20]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	617b      	str	r3, [r7, #20]
  
  /* Configure the debounce filter for event 1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU4_CC4_INS_LPF1M_Pos);
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	f023 53c0 	bic.w	r3, r3, #402653184	; 0x18000000
 80011f8:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->duration) << CCU4_CC4_INS_LPF1M_Pos;
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	78db      	ldrb	r3, [r3, #3]
 80011fe:	06db      	lsls	r3, r3, #27
 8001200:	697a      	ldr	r2, [r7, #20]
 8001202:	4313      	orrs	r3, r2
 8001204:	617b      	str	r3, [r7, #20]

  /* Configure the debounce filter for event 2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU4_CC4_INS_LPF2M_Pos);
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800120c:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->duration) << CCU4_CC4_INS_LPF2M_Pos;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	78db      	ldrb	r3, [r3, #3]
 8001212:	075b      	lsls	r3, r3, #29
 8001214:	697a      	ldr	r2, [r7, #20]
 8001216:	4313      	orrs	r3, r2
 8001218:	617b      	str	r3, [r7, #20]
  
  /* Next, the input for Event1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS_EV1IS_Pos);
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001220:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->mapped_input) << CCU4_CC4_INS_EV1IS_Pos;
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	011b      	lsls	r3, r3, #4
 8001228:	697a      	ldr	r2, [r7, #20]
 800122a:	4313      	orrs	r3, r2
 800122c:	617b      	str	r3, [r7, #20]

  /* Finally, the input for Event2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS_EV2IS_Pos);
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001234:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->mapped_input) << CCU4_CC4_INS_EV2IS_Pos;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	021b      	lsls	r3, r3, #8
 800123c:	697a      	ldr	r2, [r7, #20]
 800123e:	4313      	orrs	r3, r2
 8001240:	617b      	str	r3, [r7, #20]
  
  slice->INS = ins;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	697a      	ldr	r2, [r7, #20]
 8001246:	601a      	str	r2, [r3, #0]
#endif
}
 8001248:	371c      	adds	r7, #28
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop

08001254 <XMC_CCU4_SLICE_ConfigureEvent>:

/* API to configure a slice trigger event */
void XMC_CCU4_SLICE_ConfigureEvent(XMC_CCU4_SLICE_t *const slice,
                                   const XMC_CCU4_SLICE_EVENT_t event,
                                   const XMC_CCU4_SLICE_EVENT_CONFIG_t *const config)
{
 8001254:	b480      	push	{r7}
 8001256:	b089      	sub	sp, #36	; 0x24
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	460b      	mov	r3, r1
 800125e:	607a      	str	r2, [r7, #4]
 8001260:	72fb      	strb	r3, [r7, #11]
             ((config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH) ||\
              (config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
  XMC_ASSERT("XMC_CCU4_SLICE_ConfigureEvent:Invalid Debounce Period", 
             XMC_CCU4_SLICE_CHECK_EVENT_FILTER(config->duration));
  /* Calculate offset with reference to event */
  offset = ((uint8_t) event) - 1U;
 8001262:	7afb      	ldrb	r3, [r7, #11]
 8001264:	3b01      	subs	r3, #1
 8001266:	77fb      	strb	r3, [r7, #31]
  ins |= ((uint32_t) config->mapped_input) << pos;

  slice->INS1 = ins;

#else
  ins = slice->INS;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	61bb      	str	r3, [r7, #24]
  
  /* First, configure the edge sensitivity */
  pos = ((uint8_t) CCU4_CC4_INS_EV0EM_Pos) + (uint8_t)(offset << 1U);
 800126e:	7ffb      	ldrb	r3, [r7, #31]
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	b2db      	uxtb	r3, r3
 8001274:	3310      	adds	r3, #16
 8001276:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
 8001278:	7dfb      	ldrb	r3, [r7, #23]
 800127a:	2203      	movs	r2, #3
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	43db      	mvns	r3, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4013      	ands	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->edge) << pos;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	785b      	ldrb	r3, [r3, #1]
 800128c:	461a      	mov	r2, r3
 800128e:	7dfb      	ldrb	r3, [r7, #23]
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4313      	orrs	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
  
  /* Next, the level */
  pos = ((uint8_t) CCU4_CC4_INS_EV0LM_Pos) + offset;
 800129a:	7ffb      	ldrb	r3, [r7, #31]
 800129c:	3316      	adds	r3, #22
 800129e:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
 80012a0:	7dfb      	ldrb	r3, [r7, #23]
 80012a2:	2201      	movs	r2, #1
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->level) << pos;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	789b      	ldrb	r3, [r3, #2]
 80012b4:	461a      	mov	r2, r3
 80012b6:	7dfb      	ldrb	r3, [r7, #23]
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4313      	orrs	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
  
  /* Next, the debounce filter */
  pos = ((uint8_t) CCU4_CC4_INS_LPF0M_Pos) + (uint8_t)(offset << 1U);
 80012c2:	7ffb      	ldrb	r3, [r7, #31]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	3319      	adds	r3, #25
 80012ca:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
 80012cc:	7dfb      	ldrb	r3, [r7, #23]
 80012ce:	2203      	movs	r2, #3
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	43db      	mvns	r3, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4013      	ands	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->duration) << pos;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	78db      	ldrb	r3, [r3, #3]
 80012e0:	461a      	mov	r2, r3
 80012e2:	7dfb      	ldrb	r3, [r7, #23]
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]

  /* Finally the input */
  pos = ((uint8_t) CCU4_CC4_INS_EV0IS_Pos) + (uint8_t)(offset << 2U);
 80012ee:	7ffb      	ldrb	r3, [r7, #31]
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 80012f4:	7dfb      	ldrb	r3, [r7, #23]
 80012f6:	220f      	movs	r2, #15
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4013      	ands	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->mapped_input) << pos;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	461a      	mov	r2, r3
 800130a:	7dfb      	ldrb	r3, [r7, #23]
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4313      	orrs	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]

  slice->INS = ins;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	601a      	str	r2, [r3, #0]
#endif
}
 800131c:	3724      	adds	r7, #36	; 0x24
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop

08001328 <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
 8001328:	b480      	push	{r7}
 800132a:	b087      	sub	sp, #28
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	460b      	mov	r3, r1
 8001332:	70fb      	strb	r3, [r7, #3]
 8001334:	4613      	mov	r3, r2
 8001336:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800133e:	60fb      	str	r3, [r7, #12]
  
  switch(event)
 8001340:	78fb      	ldrb	r3, [r7, #3]
 8001342:	2b09      	cmp	r3, #9
 8001344:	d82c      	bhi.n	80013a0 <XMC_CCU4_SLICE_SetInterruptNode+0x78>
 8001346:	a201      	add	r2, pc, #4	; (adr r2, 800134c <XMC_CCU4_SLICE_SetInterruptNode+0x24>)
 8001348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800134c:	08001375 	.word	0x08001375
 8001350:	08001375 	.word	0x08001375
 8001354:	0800137f 	.word	0x0800137f
 8001358:	0800137f 	.word	0x0800137f
 800135c:	080013a1 	.word	0x080013a1
 8001360:	080013a1 	.word	0x080013a1
 8001364:	080013a1 	.word	0x080013a1
 8001368:	080013a1 	.word	0x080013a1
 800136c:	08001389 	.word	0x08001389
 8001370:	08001395 	.word	0x08001395
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
 8001374:	2303      	movs	r3, #3
 8001376:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]
      break;
 800137c:	e016      	b.n	80013ac <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
 800137e:	230c      	movs	r3, #12
 8001380:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
 8001382:	2302      	movs	r3, #2
 8001384:	617b      	str	r3, [r7, #20]
      break;
 8001386:	e011      	b.n	80013ac <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
 8001388:	f44f 7340 	mov.w	r3, #768	; 0x300
 800138c:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
 800138e:	2308      	movs	r3, #8
 8001390:	617b      	str	r3, [r7, #20]
      break;
 8001392:	e00b      	b.n	80013ac <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
 8001394:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001398:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
 800139a:	230a      	movs	r3, #10
 800139c:	617b      	str	r3, [r7, #20]
      break;
 800139e:	e005      	b.n	80013ac <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    default:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
 80013a0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80013a4:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
 80013a6:	230c      	movs	r3, #12
 80013a8:	617b      	str	r3, [r7, #20]
      break;
 80013aa:	bf00      	nop
  }
  
  srs &= ~mask; 
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	43db      	mvns	r3, r3
 80013b0:	68fa      	ldr	r2, [r7, #12]
 80013b2:	4013      	ands	r3, r2
 80013b4:	60fb      	str	r3, [r7, #12]
  srs |= (uint32_t)sr << pos;
 80013b6:	78ba      	ldrb	r2, [r7, #2]
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	60fb      	str	r3, [r7, #12]
  slice->SRS = srs;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	68fa      	ldr	r2, [r7, #12]
 80013c8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 80013cc:	371c      	adds	r7, #28
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop

080013d8 <XMC_CCU8_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_Init()<BR>  XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPrescaler()<BR> 
 *  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU8_GIDLC_SPRB_Msk;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	60da      	str	r2, [r3, #12]
}
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop

080013f8 <XMC_CCU8_SLICE_StopTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StopTimer(XMC_CCU8_SLICE_t *const slice)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU8_CC8_TCCLR_TRBC_Msk;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2201      	movs	r2, #1
 8001404:	611a      	str	r2, [r3, #16]
}
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <XMC_CCU8_lDeassertReset>:
    XMC_ASSERT("XMC_CCU8_lAssertReset:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU8_lDeassertReset(const XMC_CCU8_MODULE_t *const module)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  if (module == CCU80)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4a09      	ldr	r2, [pc, #36]	; (8001440 <XMC_CCU8_lDeassertReset+0x30>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d103      	bne.n	8001428 <XMC_CCU8_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU80);
 8001420:	2080      	movs	r0, #128	; 0x80
 8001422:	f7ff f915 	bl	8000650 <XMC_SCU_RESET_DeassertPeripheralReset>
 8001426:	e007      	b.n	8001438 <XMC_CCU8_lDeassertReset+0x28>
  }
#if defined(CCU81)
  else if (module == CCU81)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4a06      	ldr	r2, [pc, #24]	; (8001444 <XMC_CCU8_lDeassertReset+0x34>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d103      	bne.n	8001438 <XMC_CCU8_lDeassertReset+0x28>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU81);
 8001430:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001434:	f7ff f90c 	bl	8000650 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU8_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40020000 	.word	0x40020000
 8001444:	40024000 	.word	0x40024000

08001448 <XMC_CCU8_lUngateClock>:
    XMC_ASSERT("XMC_CCU8_lGateClock:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU8_lUngateClock(XMC_CCU8_MODULE_t *const module)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  if (module == CCU80)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4a09      	ldr	r2, [pc, #36]	; (8001478 <XMC_CCU8_lUngateClock+0x30>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d103      	bne.n	8001460 <XMC_CCU8_lUngateClock+0x18>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU80);
 8001458:	2080      	movs	r0, #128	; 0x80
 800145a:	f7ff fa45 	bl	80008e8 <XMC_SCU_CLOCK_UngatePeripheralClock>
 800145e:	e007      	b.n	8001470 <XMC_CCU8_lUngateClock+0x28>
  }
#if defined(CCU81)
  else if (module == CCU81)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	4a06      	ldr	r2, [pc, #24]	; (800147c <XMC_CCU8_lUngateClock+0x34>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d103      	bne.n	8001470 <XMC_CCU8_lUngateClock+0x28>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU81);
 8001468:	f44f 7080 	mov.w	r0, #256	; 0x100
 800146c:	f7ff fa3c 	bl	80008e8 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU8_lUngateClock:Invalid Module Pointer", 0);
  }
}
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40020000 	.word	0x40020000
 800147c:	40024000 	.word	0x40024000

08001480 <XMC_CCU8_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/* API to set the CCU8 module as active and enable the clock  */
void XMC_CCU8_EnableModule(XMC_CCU8_MODULE_t *const module)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_EnableModule:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));

#if (UC_FAMILY == XMC4)
  /* Enable CCU8 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8001488:	2010      	movs	r0, #16
 800148a:	f7ff fa1d 	bl	80008c8 <XMC_SCU_CLOCK_EnableClock>
#endif

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU8_lUngateClock(module);
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7ff ffda 	bl	8001448 <XMC_CCU8_lUngateClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU8_lDeassertReset(module);
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f7ff ffbb 	bl	8001410 <XMC_CCU8_lDeassertReset>
#endif
}
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <XMC_CCU8_Init>:
#endif
}

/* API to initialize CCU8 global resources  */
void XMC_CCU8_Init(XMC_CCU8_MODULE_t *const module, const XMC_CCU8_SLICE_MCMS_ACTION_t mcs_action)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	460b      	mov	r3, r1
 80014aa:	70fb      	strb	r3, [r7, #3]

  XMC_ASSERT("XMC_CCU8_Init:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  XMC_ASSERT("XMC_CCU8_Init:Invalid mcs action", XMC_CCU8_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU8 module */
  XMC_CCU8_EnableModule(module);
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f7ff ffe7 	bl	8001480 <XMC_CCU8_EnableModule>
  /* Start the prescaler */
  XMC_CCU8_StartPrescaler(module);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff ff90 	bl	80013d8 <XMC_CCU8_StartPrescaler>
  
  gctrl = module->GCTRL;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU8_GCTRL_MSDE_Msk);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80014c4:	60fb      	str	r3, [r7, #12]
  gctrl |= (uint32_t)mcs_action << CCU8_GCTRL_MSDE_Pos;
 80014c6:	78fb      	ldrb	r3, [r7, #3]
 80014c8:	039b      	lsls	r3, r3, #14
 80014ca:	68fa      	ldr	r2, [r7, #12]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	68fa      	ldr	r2, [r7, #12]
 80014d4:	601a      	str	r2, [r3, #0]
}
 80014d6:	3710      	adds	r7, #16
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <XMC_CCU8_SLICE_CompareInit>:
}

/* API to configure CC8 Slice in Compare mode */
void XMC_CCU8_SLICE_CompareInit(XMC_CCU8_SLICE_t *const slice,
                                const XMC_CCU8_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Timer Init Pointer is NULL",
             (XMC_CCU8_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);
  /* Stops the timer */
  XMC_CCU8_SLICE_StopTimer(slice);
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f7ff ff86 	bl	80013f8 <XMC_CCU8_SLICE_StopTimer>
  /* Program the timer mode */
  slice->TC = compare_init->tc;
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC =  (uint32_t)compare_init->timer_concatenation << CCU8_CC8_CMC_TCE_Pos;
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	7b5b      	ldrb	r3, [r3, #13]
 80014f8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	051a      	lsls	r2, r3, #20
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	7b1b      	ldrb	r3, [r3, #12]
 8001508:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800150c:	b2db      	uxtb	r3, r3
 800150e:	461a      	mov	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	7b1b      	ldrb	r3, [r3, #12]
 8001518:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800151c:	b2db      	uxtb	r3, r3
 800151e:	461a      	mov	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	7b5b      	ldrb	r3, [r3, #13]
 8001528:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800152c:	b2db      	uxtb	r3, r3
 800152e:	461a      	mov	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->psl;
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685a      	ldr	r2, [r3, #4]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	619a      	str	r2, [r3, #24]
  /* Asymmetric PWM and Slice output routing configuration */
#if defined(CCU8V3) /* Defined for XMC1400 devices only */
  slice->CHC = (uint32_t) compare_init->chc;
#else
  slice->CHC = (uint32_t)((uint32_t)compare_init->chc ^ XMC_CCU8_SLICE_CHC_CONFIG_MASK);
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	f083 0214 	eor.w	r2, r3, #20
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	649a      	str	r2, [r3, #72]	; 0x48
#endif
}
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop

08001550 <XMC_CCU8_SLICE_SetOutPath>:
  slice->PSC = (uint32_t) capture_init->prescaler_initval;
}

/* API to configure the each output of the slice with either STx or inverted STx. */
void XMC_CCU8_SLICE_SetOutPath(XMC_CCU8_SLICE_t *const slice, const uint32_t out_path_msk)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
  uint32_t chc;
  XMC_ASSERT("XMC_CCU8_SLICE_SetOutPath:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  chc = slice->CHC;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800155e:	60fb      	str	r3, [r7, #12]
#if !defined(CCU8V3) /* Defined for all devices except XMC1400 */
  chc &= ~((uint32_t)out_path_msk >> 16U);
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	0c1b      	lsrs	r3, r3, #16
 8001564:	43db      	mvns	r3, r3
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	4013      	ands	r3, r2
 800156a:	60fb      	str	r3, [r7, #12]
  chc |= ((uint32_t)out_path_msk & 0xFFFFU);
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	b29b      	uxth	r3, r3
 8001570:	68fa      	ldr	r2, [r7, #12]
 8001572:	4313      	orrs	r3, r2
 8001574:	60fb      	str	r3, [r7, #12]
#else
  chc &= ~((uint32_t)((uint32_t)(out_path_msk & 0xCCCC0U) >> 2U));
  chc |= ((uint32_t)out_path_msk & 0x33330U);
#endif
  slice->CHC = chc;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	68fa      	ldr	r2, [r7, #12]
 800157a:	649a      	str	r2, [r3, #72]	; 0x48
}
 800157c:	3714      	adds	r7, #20
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop

08001588 <XMC_CCU8_SetMultiChannelShadowTransferMode>:

/* API to configure the multichannel shadow transfer request via SW and via the CCU8x.MCSS input. */
void XMC_CCU8_SetMultiChannelShadowTransferMode(XMC_CCU8_MODULE_t *const module, const uint32_t slice_mode_msk)
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
  uint32_t gctrl;

  XMC_ASSERT("XMC_CCU8_SetMultiChannelShadowTransferMode:Invalid module Pointer", XMC_CCU8_IsValidModule(module));
  
  gctrl = module->GCTRL;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t)slice_mode_msk >> 16U);
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	0c1b      	lsrs	r3, r3, #16
 800159c:	43db      	mvns	r3, r3
 800159e:	68fa      	ldr	r2, [r7, #12]
 80015a0:	4013      	ands	r3, r2
 80015a2:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t)slice_mode_msk & 0xFFFFU);
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	68fa      	ldr	r2, [r7, #12]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	60fb      	str	r3, [r7, #12]
  module->GCTRL = gctrl;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	68fa      	ldr	r2, [r7, #12]
 80015b2:	601a      	str	r2, [r3, #0]
}
 80015b4:	3714      	adds	r7, #20
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop

080015c0 <XMC_CCU8_SLICE_StartConfig>:

/* API to configure the Start trigger function of a slice*/
void XMC_CCU8_SLICE_StartConfig(XMC_CCU8_SLICE_t *const slice,
                                const XMC_CCU8_SLICE_EVENT_t event,
                                const XMC_CCU8_SLICE_START_MODE_t start_mode)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	460b      	mov	r3, r1
 80015ca:	70fb      	strb	r3, [r7, #3]
 80015cc:	4613      	mov	r3, r2
 80015ce:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Start Mode", 
             ((start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START) ||\
              (start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR)));
  cmc = slice->CMC;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	60bb      	str	r3, [r7, #8]

  cmc &= ~((uint32_t) CCU8_CC8_CMC_STRTS_Msk);
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	f023 0303 	bic.w	r3, r3, #3
 80015dc:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_STRTS_Pos;
 80015de:	78fb      	ldrb	r3, [r7, #3]
 80015e0:	68ba      	ldr	r2, [r7, #8]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	60bb      	str	r3, [r7, #8]

  slice->CMC = cmc;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	68ba      	ldr	r2, [r7, #8]
 80015ea:	605a      	str	r2, [r3, #4]

  tc  = slice->TC;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	695b      	ldr	r3, [r3, #20]
 80015f0:	60fb      	str	r3, [r7, #12]

  if(start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR)
 80015f2:	78bb      	ldrb	r3, [r7, #2]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d104      	bne.n	8001602 <XMC_CCU8_SLICE_StartConfig+0x42>
  {
    tc |= (uint32_t) CCU8_CC8_TC_STRM_Msk;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	e003      	b.n	800160a <XMC_CCU8_SLICE_StartConfig+0x4a>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_STRM_Msk);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001608:	60fb      	str	r3, [r7, #12]
  }

  slice->TC = tc;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	68fa      	ldr	r2, [r7, #12]
 800160e:	615a      	str	r2, [r3, #20]
}
 8001610:	3714      	adds	r7, #20
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop

0800161c <XMC_CCU8_SLICE_DirectionConfig>:
  slice->CMC = cmc;
}

/* API to configure direction function */
void XMC_CCU8_SLICE_DirectionConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	460b      	mov	r3, r1
 8001626:	70fb      	strb	r3, [r7, #3]
  uint32_t cmc;

  XMC_ASSERT("XMC_CCU8_SLICE_DirectionConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_DirectionConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));

  cmc = slice->CMC;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	60fb      	str	r3, [r7, #12]

  /* First, Bind the event with the direction function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_UDS_Msk);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001634:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_UDS_Pos;
 8001636:	78fb      	ldrb	r3, [r7, #3]
 8001638:	029b      	lsls	r3, r3, #10
 800163a:	68fa      	ldr	r2, [r7, #12]
 800163c:	4313      	orrs	r3, r2
 800163e:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	68fa      	ldr	r2, [r7, #12]
 8001644:	605a      	str	r2, [r3, #4]
}
 8001646:	3714      	adds	r7, #20
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <XMC_CCU8_SLICE_TrapConfig>:

/* API to configure trap function*/
void XMC_CCU8_SLICE_TrapConfig(XMC_CCU8_SLICE_t *const slice,
                               const XMC_CCU8_SLICE_TRAP_EXIT_MODE_t exit_mode,
                               const bool synch_with_pwm)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	460b      	mov	r3, r1
 800165a:	70fb      	strb	r3, [r7, #3]
 800165c:	4613      	mov	r3, r2
 800165e:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU8_SLICE_TrapConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_TrapConfig:Invalid Exit Mode", ((exit_mode == XMC_CCU8_SLICE_TRAP_EXIT_MODE_AUTOMATIC) ||\
                                                             (exit_mode == XMC_CCU8_SLICE_TRAP_EXIT_MODE_SW)));

  cmc = slice->CMC;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	60bb      	str	r3, [r7, #8]

  /* Map trap function to Event 2 */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_TS_Msk);
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800166c:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) 1) << CCU8_CC8_CMC_TS_Pos;
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001674:	60bb      	str	r3, [r7, #8]

  slice->CMC = cmc;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	68ba      	ldr	r2, [r7, #8]
 800167a:	605a      	str	r2, [r3, #4]

  tc = slice->TC;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	695b      	ldr	r3, [r3, #20]
 8001680:	60fb      	str	r3, [r7, #12]

  /* Configure synchronization option */
  if(synch_with_pwm == true)
 8001682:	78bb      	ldrb	r3, [r7, #2]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d004      	beq.n	8001692 <XMC_CCU8_SLICE_TrapConfig+0x42>
  {
    tc |= (uint32_t) CCU8_CC8_TC_TRPSE_Msk;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	e003      	b.n	800169a <XMC_CCU8_SLICE_TrapConfig+0x4a>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_TRPSE_Msk);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001698:	60fb      	str	r3, [r7, #12]
  }

  /* Configure exit mode */
  if(exit_mode == XMC_CCU8_SLICE_TRAP_EXIT_MODE_SW)
 800169a:	78fb      	ldrb	r3, [r7, #3]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d104      	bne.n	80016aa <XMC_CCU8_SLICE_TrapConfig+0x5a>
  {
    tc |= (uint32_t) CCU8_CC8_TC_TRPSW_Msk;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	e003      	b.n	80016b2 <XMC_CCU8_SLICE_TrapConfig+0x62>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_TRPSW_Msk);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80016b0:	60fb      	str	r3, [r7, #12]
  }

  slice->TC = tc;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	68fa      	ldr	r2, [r7, #12]
 80016b6:	615a      	str	r2, [r3, #20]
}
 80016b8:	3714      	adds	r7, #20
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop

080016c4 <XMC_CCU8_SLICE_ConfigureEvent>:

/* API to configure a slice trigger event */
void XMC_CCU8_SLICE_ConfigureEvent(XMC_CCU8_SLICE_t *const slice,
                                   const XMC_CCU8_SLICE_EVENT_t event,
                                   const XMC_CCU8_SLICE_EVENT_CONFIG_t *const config)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b089      	sub	sp, #36	; 0x24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	460b      	mov	r3, r1
 80016ce:	607a      	str	r2, [r7, #4]
 80016d0:	72fb      	strb	r3, [r7, #11]
              (config->level == XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
  XMC_ASSERT("XMC_CCU8_SLICE_ConfigureEvent:Invalid Debounce Period",
             XMC_CCU8_SLICE_CHECK_EVENT_FILTER(config->duration));

  /* Calculate offset with reference to event */
  offset = ((uint8_t) event) - 1U;
 80016d2:	7afb      	ldrb	r3, [r7, #11]
 80016d4:	3b01      	subs	r3, #1
 80016d6:	77fb      	strb	r3, [r7, #31]
  ins |= ((uint32_t) config->mapped_input) << pos;

  slice->INS1 = ins;

#else
  ins = slice->INS;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	61bb      	str	r3, [r7, #24]

  /* First, configure the edge sensitivity */
  pos = ((uint8_t) CCU8_CC8_INS_EV0EM_Pos) + (uint8_t)(offset << 1U);
 80016de:	7ffb      	ldrb	r3, [r7, #31]
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	3310      	adds	r3, #16
 80016e6:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
 80016e8:	7dfb      	ldrb	r3, [r7, #23]
 80016ea:	2203      	movs	r2, #3
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	43db      	mvns	r3, r3
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	4013      	ands	r3, r2
 80016f6:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->edge) << pos;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	785b      	ldrb	r3, [r3, #1]
 80016fc:	461a      	mov	r2, r3
 80016fe:	7dfb      	ldrb	r3, [r7, #23]
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	4313      	orrs	r3, r2
 8001708:	61bb      	str	r3, [r7, #24]

  /* Next, the level */
  pos = ((uint8_t) CCU8_CC8_INS_EV0LM_Pos) + offset;
 800170a:	7ffb      	ldrb	r3, [r7, #31]
 800170c:	3316      	adds	r3, #22
 800170e:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
 8001710:	7dfb      	ldrb	r3, [r7, #23]
 8001712:	2201      	movs	r2, #1
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	43db      	mvns	r3, r3
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	4013      	ands	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) (config->level)) << pos;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	789b      	ldrb	r3, [r3, #2]
 8001724:	461a      	mov	r2, r3
 8001726:	7dfb      	ldrb	r3, [r7, #23]
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	4313      	orrs	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]

  /* Next, the debounce filter */
  pos = ((uint8_t) CCU8_CC8_INS_LPF0M_Pos) + (uint8_t)(offset << 1U);
 8001732:	7ffb      	ldrb	r3, [r7, #31]
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	b2db      	uxtb	r3, r3
 8001738:	3319      	adds	r3, #25
 800173a:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
 800173c:	7dfb      	ldrb	r3, [r7, #23]
 800173e:	2203      	movs	r2, #3
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	43db      	mvns	r3, r3
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	4013      	ands	r3, r2
 800174a:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->duration) << pos;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	78db      	ldrb	r3, [r3, #3]
 8001750:	461a      	mov	r2, r3
 8001752:	7dfb      	ldrb	r3, [r7, #23]
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	4313      	orrs	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]

  /* Finally the input */
  pos = ((uint8_t) CCU8_CC8_INS_EV0IS_Pos) + (uint8_t)(offset << 2U);
 800175e:	7ffb      	ldrb	r3, [r7, #31]
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 8001764:	7dfb      	ldrb	r3, [r7, #23]
 8001766:	220f      	movs	r2, #15
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	43db      	mvns	r3, r3
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	4013      	ands	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->mapped_input) << pos;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	461a      	mov	r2, r3
 800177a:	7dfb      	ldrb	r3, [r7, #23]
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	4313      	orrs	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]

  slice->INS = ins;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	601a      	str	r2, [r3, #0]
#endif
}
 800178c:	3724      	adds	r7, #36	; 0x24
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop

08001798 <XMC_CCU8_SLICE_SetTimerPeriodMatch>:
  slice->TC = tc;
}

/* Programs period match value of the timer  */
void XMC_CCU8_SLICE_SetTimerPeriodMatch(XMC_CCU8_SLICE_t *const slice, const uint16_t period_val)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	460b      	mov	r3, r1
 80017a2:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 80017a4:	887a      	ldrh	r2, [r7, #2]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <XMC_CCU8_SLICE_SetTimerCompareMatch>:

/* Programs timer compare match value for channel 1 or 2 */
void XMC_CCU8_SLICE_SetTimerCompareMatch(XMC_CCU8_SLICE_t *const slice,
                                         const XMC_CCU8_SLICE_COMPARE_CHANNEL_t channel,
                                         const uint16_t compare_val)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	460b      	mov	r3, r1
 80017be:	70fb      	strb	r3, [r7, #3]
 80017c0:	4613      	mov	r3, r2
 80017c2:	803b      	strh	r3, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid channel", XMC_CCU8_SLICE_CHECK_COMP_CHANNEL(channel));

  if (XMC_CCU8_SLICE_COMPARE_CHANNEL_1 == channel)
 80017c4:	78fb      	ldrb	r3, [r7, #3]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d103      	bne.n	80017d2 <XMC_CCU8_SLICE_SetTimerCompareMatch+0x1e>
  {
    slice->CR1S = (uint32_t) compare_val;
 80017ca:	883a      	ldrh	r2, [r7, #0]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	63da      	str	r2, [r3, #60]	; 0x3c
 80017d0:	e002      	b.n	80017d8 <XMC_CCU8_SLICE_SetTimerCompareMatch+0x24>
  }
  else
  {
    slice->CR2S = (uint32_t) compare_val;
 80017d2:	883a      	ldrh	r2, [r7, #0]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop

080017e4 <XMC_CCU8_SLICE_DeadTimeInit>:
}

/* Initializes Dead time configuration for the slice outputs */
void XMC_CCU8_SLICE_DeadTimeInit(XMC_CCU8_SLICE_t *const slice,
                                 const XMC_CCU8_SLICE_DEAD_TIME_CONFIG_t *const config)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_ConfigureDeadTime:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));

  /* Program dead time value for channel 1 */
  slice->DC1R = config->dc1r;
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685a      	ldr	r2, [r3, #4]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	651a      	str	r2, [r3, #80]	; 0x50
  /* Program dead time value for channel 2 */
  slice->DC2R = config->dc2r;
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	689a      	ldr	r2, [r3, #8]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	655a      	str	r2, [r3, #84]	; 0x54
  /* Program dead time control configuration */
  slice->DTC = config->dtc;
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <XMC_CCU8_SLICE_ConfigureStatusBitOutput>:
  slice->DTC |= ((uint32_t) div_val) << CCU8_CC8_DTC_DTCC_Pos;
}

/* Configures status ST1, ST2 mapping to STy */
void XMC_CCU8_SLICE_ConfigureStatusBitOutput(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_STATUS_t channel)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	460b      	mov	r3, r1
 800181a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_SLICE_ConfigureStatusBitOutput:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_ConfigureStatusBitOutput:Invalid Channel", XMC_CCU8_SLICE_CHECK_SLICE_STATUS(channel));

  slice->TC &= ~((uint32_t) CCU8_CC8_TC_STOS_Msk);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	695b      	ldr	r3, [r3, #20]
 8001820:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	615a      	str	r2, [r3, #20]
  slice->TC |= ((uint32_t) channel) << CCU8_CC8_TC_STOS_Pos;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	695a      	ldr	r2, [r3, #20]
 800182c:	78fb      	ldrb	r3, [r7, #3]
 800182e:	075b      	lsls	r3, r3, #29
 8001830:	431a      	orrs	r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	615a      	str	r2, [r3, #20]
}
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <XMC_GPIO_SetMode>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	460b      	mov	r3, r1
 800184a:	70fb      	strb	r3, [r7, #3]
 800184c:	4613      	mov	r3, r2
 800184e:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
 8001850:	78fb      	ldrb	r3, [r7, #3]
 8001852:	089b      	lsrs	r3, r3, #2
 8001854:	b2db      	uxtb	r3, r3
 8001856:	4618      	mov	r0, r3
 8001858:	78fb      	ldrb	r3, [r7, #3]
 800185a:	089b      	lsrs	r3, r3, #2
 800185c:	b2db      	uxtb	r3, r3
 800185e:	461a      	mov	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3204      	adds	r2, #4
 8001864:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001868:	78fb      	ldrb	r3, [r7, #3]
 800186a:	f003 0303 	and.w	r3, r3, #3
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	4619      	mov	r1, r3
 8001872:	23f8      	movs	r3, #248	; 0xf8
 8001874:	408b      	lsls	r3, r1
 8001876:	43db      	mvns	r3, r3
 8001878:	ea02 0103 	and.w	r1, r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	1d02      	adds	r2, r0, #4
 8001880:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8001884:	78fb      	ldrb	r3, [r7, #3]
 8001886:	089b      	lsrs	r3, r3, #2
 8001888:	b2db      	uxtb	r3, r3
 800188a:	4618      	mov	r0, r3
 800188c:	78fb      	ldrb	r3, [r7, #3]
 800188e:	089b      	lsrs	r3, r3, #2
 8001890:	b2db      	uxtb	r3, r3
 8001892:	461a      	mov	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3204      	adds	r2, #4
 8001898:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800189c:	78bb      	ldrb	r3, [r7, #2]
 800189e:	78f9      	ldrb	r1, [r7, #3]
 80018a0:	f001 0103 	and.w	r1, r1, #3
 80018a4:	00c9      	lsls	r1, r1, #3
 80018a6:	408b      	lsls	r3, r1
 80018a8:	ea42 0103 	orr.w	r1, r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	1d02      	adds	r2, r0, #4
 80018b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop

080018c0 <XMC_GPIO_SetHardwareControl>:

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	460b      	mov	r3, r1
 80018ca:	70fb      	strb	r3, [r7, #3]
 80018cc:	4613      	mov	r3, r2
 80018ce:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80018d4:	78fb      	ldrb	r3, [r7, #3]
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	4619      	mov	r1, r3
 80018da:	2303      	movs	r3, #3
 80018dc:	408b      	lsls	r3, r1
 80018de:	43db      	mvns	r3, r3
 80018e0:	401a      	ands	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80018ea:	78bb      	ldrb	r3, [r7, #2]
 80018ec:	78f9      	ldrb	r1, [r7, #3]
 80018ee:	0049      	lsls	r1, r1, #1
 80018f0:	408b      	lsls	r3, r1
 80018f2:	431a      	orrs	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	675a      	str	r2, [r3, #116]	; 0x74
}
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop

08001904 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001910:	b2db      	uxtb	r3, r3
 8001912:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001916:	b2db      	uxtb	r3, r3
}
 8001918:	4618      	mov	r0, r3
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	431a      	orrs	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <XMC_I2C_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/
/* Initializes the USIC channel by setting the data format, slave address, baudrate, transfer buffer */
void XMC_I2C_CH_Init(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const config)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
  XMC_USIC_CH_Enable(channel);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f000 fa00 	bl	8001d54 <XMC_USIC_CH_Enable>
  
  /* Data format configuration */
  channel->SCTR = ((uint32_t)TRANSMISSION_MODE << (uint32_t)USIC_CH_SCTR_TRM_Pos) | /* Transmision mode */
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4a0e      	ldr	r2, [pc, #56]	; (8001990 <XMC_I2C_CH_Init+0x4c>)
 8001958:	635a      	str	r2, [r3, #52]	; 0x34
                  ((uint32_t)WORDLENGTH << (uint32_t)USIC_CH_SCTR_WLE_Pos) | /* 8 data bits */
                  USIC_CH_SCTR_FLE_Msk |           /* unlimited data flow */
                  USIC_CH_SCTR_SDIR_Msk |          /* MSB shifted first */
                  USIC_CH_SCTR_PDL_Msk;            /* Passive Data Level */

  XMC_I2C_CH_SetSlaveAddress(channel, config->address);
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	889b      	ldrh	r3, [r3, #4]
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	4619      	mov	r1, r3
 8001962:	f000 f817 	bl	8001994 <XMC_I2C_CH_SetSlaveAddress>
  (void)XMC_I2C_CH_SetBaudrate(channel, config->baudrate);
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	4619      	mov	r1, r3
 800196e:	f000 f831 	bl	80019d4 <XMC_I2C_CH_SetBaudrate>
    
  /* Enable transfer buffer */
  channel->TCSR = ((uint32_t)SET_TDV << (uint32_t)USIC_CH_TCSR_TDEN_Pos) | USIC_CH_TCSR_TDSSM_Msk;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8001978:	639a      	str	r2, [r3, #56]	; 0x38

  /* Clear status flags */
  channel->PSCR = 0xFFFFFFFFU;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f04f 32ff 	mov.w	r2, #4294967295
 8001980:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Disable parity generation */
  channel->CCR = 0x0U;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	073f0303 	.word	0x073f0303

08001994 <XMC_I2C_CH_SetSlaveAddress>:
/* Sets the slave address */
void XMC_I2C_CH_SetSlaveAddress(XMC_USIC_CH_t *const channel, const uint16_t address)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	460b      	mov	r3, r1
 800199e:	807b      	strh	r3, [r7, #2]
  if ((address & XMC_I2C_10BIT_ADDR_MASK) == XMC_I2C_10BIT_ADDR_GROUP)
 80019a0:	887b      	ldrh	r3, [r7, #2]
 80019a2:	f403 43f8 	and.w	r3, r3, #31744	; 0x7c00
 80019a6:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 80019aa:	d109      	bne.n	80019c0 <XMC_I2C_CH_SetSlaveAddress+0x2c>
  {
    channel->PCR_IICMode = (address & 0xffU) | ((address << 1) & 0xfe00U);
 80019ac:	887b      	ldrh	r3, [r7, #2]
 80019ae:	b2da      	uxtb	r2, r3
 80019b0:	887b      	ldrh	r3, [r7, #2]
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	f403 437e 	and.w	r3, r3, #65024	; 0xfe00
 80019b8:	431a      	orrs	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	63da      	str	r2, [r3, #60]	; 0x3c
 80019be:	e003      	b.n	80019c8 <XMC_I2C_CH_SetSlaveAddress+0x34>
  }
  else
  {
    channel->PCR_IICMode = ((uint32_t)address) << XMC_I2C_7BIT_ADDR_Pos;
 80019c0:	887b      	ldrh	r3, [r7, #2]
 80019c2:	021a      	lsls	r2, r3, #8
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	63da      	str	r2, [r3, #60]	; 0x3c
  }
}
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop

080019d4 <XMC_I2C_CH_SetBaudrate>:
  
  return (uint16_t)address;
}
/* Sets the baudrate and oversampling based on standard speed or fast speed */
XMC_I2C_CH_STATUS_t XMC_I2C_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  XMC_I2C_CH_STATUS_t status;
  
  status = XMC_I2C_CH_STATUS_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	73fb      	strb	r3, [r7, #15]
  
  if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_STANDARD)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	4a17      	ldr	r2, [pc, #92]	; (8001a44 <XMC_I2C_CH_SetBaudrate+0x70>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d810      	bhi.n	8001a0c <XMC_I2C_CH_SetBaudrate+0x38>
  {
		channel->PCR_IICMode &= (uint32_t)~USIC_CH_PCR_IICMode_STIM_Msk;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	63da      	str	r2, [r3, #60]	; 0x3c
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD) == XMC_USIC_CH_STATUS_OK)
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	6839      	ldr	r1, [r7, #0]
 80019fa:	220a      	movs	r2, #10
 80019fc:	f000 f9e4 	bl	8001dc8 <XMC_USIC_CH_SetBaudrate>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d119      	bne.n	8001a3a <XMC_I2C_CH_SetBaudrate+0x66>
    {
      status = XMC_I2C_CH_STATUS_OK;
 8001a06:	2300      	movs	r3, #0
 8001a08:	73fb      	strb	r3, [r7, #15]
 8001a0a:	e016      	b.n	8001a3a <XMC_I2C_CH_SetBaudrate+0x66>
    }
  }
  else if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_FAST)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	4a0e      	ldr	r2, [pc, #56]	; (8001a48 <XMC_I2C_CH_SetBaudrate+0x74>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d810      	bhi.n	8001a36 <XMC_I2C_CH_SetBaudrate+0x62>
  {
    channel->PCR_IICMode |= (uint32_t)USIC_CH_PCR_IICMode_STIM_Msk;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a18:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	63da      	str	r2, [r3, #60]	; 0x3c
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST) == XMC_USIC_CH_STATUS_OK)
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	6839      	ldr	r1, [r7, #0]
 8001a24:	2219      	movs	r2, #25
 8001a26:	f000 f9cf 	bl	8001dc8 <XMC_USIC_CH_SetBaudrate>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d104      	bne.n	8001a3a <XMC_I2C_CH_SetBaudrate+0x66>
    {
      status = XMC_I2C_CH_STATUS_OK;
 8001a30:	2300      	movs	r3, #0
 8001a32:	73fb      	strb	r3, [r7, #15]
 8001a34:	e001      	b.n	8001a3a <XMC_I2C_CH_SetBaudrate+0x66>
    }
  }
  else 
  {
    status = XMC_I2C_CH_STATUS_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8001a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3710      	adds	r7, #16
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	000186a0 	.word	0x000186a0
 8001a48:	00061a80 	.word	0x00061a80

08001a4c <XMC_I2C_CH_MasterStop>:
  }
}

/* Sends master stop command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStop(XMC_USIC_CH_t *const channel)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001a5a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d111      	bne.n	8001a86 <XMC_I2C_CH_MasterStop+0x3a>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8001a62:	bf00      	nop
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f7ff ff4d 	bl	8001904 <XMC_USIC_CH_GetTransmitBufferStatus>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b80      	cmp	r3, #128	; 0x80
 8001a6e:	d0f9      	beq.n	8001a64 <XMC_I2C_CH_MasterStop+0x18>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a76:	f7ff ff55 	bl	8001924 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001a80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001a84:	e004      	b.n	8001a90 <XMC_I2C_CH_MasterStop+0x44>
  }
  else
  {
    channel->IN[0U] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001a8c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop

08001a98 <XMC_I2C_CH_MasterTransmit>:

/* Sends master send command along with data to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterTransmit(XMC_USIC_CH_t *const channel, const uint8_t data)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	70fb      	strb	r3, [r7, #3]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001aaa:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d110      	bne.n	8001ad4 <XMC_I2C_CH_MasterTransmit+0x3c>
  {    
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8001ab2:	bf00      	nop
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f7ff ff25 	bl	8001904 <XMC_USIC_CH_GetTransmitBufferStatus>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b80      	cmp	r3, #128	; 0x80
 8001abe:	d0f9      	beq.n	8001ab4 <XMC_I2C_CH_MasterTransmit+0x1c>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ac6:	f7ff ff2d 	bl	8001924 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 8001aca:	78fa      	ldrb	r2, [r7, #3]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001ad2:	e003      	b.n	8001adc <XMC_I2C_CH_MasterTransmit+0x44>
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 8001ad4:	78fa      	ldrb	r2, [r7, #3]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop

08001ae4 <XMC_I2C_CH_MasterReceiveAck>:
  }
}

/* Sends master receive ack command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterReceiveAck(XMC_USIC_CH_t *const channel)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
/* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001af2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d111      	bne.n	8001b1e <XMC_I2C_CH_MasterReceiveAck+0x3a>
  {    
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8001afa:	bf00      	nop
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f7ff ff01 	bl	8001904 <XMC_USIC_CH_GetTransmitBufferStatus>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b80      	cmp	r3, #128	; 0x80
 8001b06:	d0f9      	beq.n	8001afc <XMC_I2C_CH_MasterReceiveAck+0x18>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b0e:	f7ff ff09 	bl	8001924 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001b1c:	e004      	b.n	8001b28 <XMC_I2C_CH_MasterReceiveAck+0x44>
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b24:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop

08001b30 <XMC_I2C_CH_MasterReceiveNack>:

/* Sends master receive nack command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterReceiveNack(XMC_USIC_CH_t *const channel)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001b3e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d111      	bne.n	8001b6a <XMC_I2C_CH_MasterReceiveNack+0x3a>
  {    
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8001b46:	bf00      	nop
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f7ff fedb 	bl	8001904 <XMC_USIC_CH_GetTransmitBufferStatus>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b80      	cmp	r3, #128	; 0x80
 8001b52:	d0f9      	beq.n	8001b48 <XMC_I2C_CH_MasterReceiveNack+0x18>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b5a:	f7ff fee3 	bl	8001924 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001b64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001b68:	e004      	b.n	8001b74 <XMC_I2C_CH_MasterReceiveNack+0x44>
  }
  else 
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001b70:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop

08001b7c <XMC_I2C_CH_GetReceivedData>:

/* Reads the data from RBUF if FIFO size is 0 otherwise from OUTR. */
uint8_t XMC_I2C_CH_GetReceivedData(const XMC_USIC_CH_t *const channel)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint8_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001b8a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d103      	bne.n	8001b9a <XMC_I2C_CH_GetReceivedData+0x1e>
  {
    retval = (uint8_t)channel->RBUF;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b96:	73fb      	strb	r3, [r7, #15]
 8001b98:	e003      	b.n	8001ba2 <XMC_I2C_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint8_t)channel->OUTR;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8001ba0:	73fb      	strb	r3, [r7, #15]
  }

  return retval;
 8001ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3714      	adds	r7, #20
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <XMC_I2C_CH_DisableEvent>:
  channel->CCR |= (event&0x1fc00U);
  channel->PCR_IICMode |= ((event) & 0x41fc0000U);
}

void XMC_I2C_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
  channel->CCR &= (uint32_t)~(event&0x1fc00U);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	f403 33fe 	and.w	r3, r3, #130048	; 0x1fc00
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	401a      	ands	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	641a      	str	r2, [r3, #64]	; 0x40
  channel->PCR_IICMode &= (uint32_t)~((event) & 0x41fc0000U);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001bd0:	6839      	ldr	r1, [r7, #0]
 8001bd2:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <XMC_I2C_CH_DisableEvent+0x38>)
 8001bd4:	400b      	ands	r3, r1
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	401a      	ands	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	41fc0000 	.word	0x41fc0000

08001bec <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001bfe:	b2db      	uxtb	r3, r3
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <XMC_UART_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  channel->PSCR = flag;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop

08001c28 <XMC_UART_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/

void XMC_UART_CH_Init(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;
 8001c32:	2310      	movs	r3, #16
 8001c34:	60fb      	str	r3, [r7, #12]

  /* USIC channel switched on*/
  XMC_USIC_CH_Enable(channel);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 f88c 	bl	8001d54 <XMC_USIC_CH_Enable>
  
  if(config->oversampling != 0U)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	79db      	ldrb	r3, [r3, #7]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d002      	beq.n	8001c4a <XMC_UART_CH_Init+0x22>
  {
    oversampling = (uint32_t)config->oversampling;
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	79db      	ldrb	r3, [r3, #7]
 8001c48:	60fb      	str	r3, [r7, #12]
  }
  
  /* Configure baud rate */
  (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, oversampling);
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	4619      	mov	r1, r3
 8001c52:	68fa      	ldr	r2, [r7, #12]
 8001c54:	f000 f8b8 	bl	8001dc8 <XMC_USIC_CH_SetBaudrate>
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	799b      	ldrb	r3, [r3, #6]
 8001c5c:	3b01      	subs	r3, #1
 8001c5e:	005a      	lsls	r2, r3, #1
                                    (((oversampling >> 1UL) + 1UL) << USIC_CH_PCR_ASCMode_SP_Pos) |
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	085b      	lsrs	r3, r3, #1
 8001c64:	3301      	adds	r3, #1
 8001c66:	021b      	lsls	r3, r3, #8
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8001c6e:	f043 0301 	orr.w	r3, r3, #1
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	63d3      	str	r3, [r2, #60]	; 0x3c
  /* Set passive data level, high
     Set word length. Data bits - 1
     If frame length is > 0, frame_lemgth-1; else, FLE = WLE (Data bits - 1)
     Transmission Mode: The shift control signal is considered active if it
     is at 1-level. This is the setting to be programmed to allow data transfers */
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	791b      	ldrb	r3, [r3, #4]
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	061b      	lsls	r3, r3, #24
 8001c7e:	f443 7281 	orr.w	r2, r3, #258	; 0x102
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	635a      	str	r2, [r3, #52]	; 0x34
                             ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));

  if (config->frame_length != 0U)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	795b      	ldrb	r3, [r3, #5]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d009      	beq.n	8001ca2 <XMC_UART_CH_Init+0x7a>
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	795b      	ldrb	r3, [r3, #5]
 8001c96:	3b01      	subs	r3, #1
 8001c98:	041b      	lsls	r3, r3, #16
 8001c9a:	431a      	orrs	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	635a      	str	r2, [r3, #52]	; 0x34
 8001ca0:	e008      	b.n	8001cb4 <XMC_UART_CH_Init+0x8c>
  }
  else
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_FLE_Pos);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	791b      	ldrb	r3, [r3, #4]
 8001caa:	3b01      	subs	r3, #1
 8001cac:	041b      	lsls	r3, r3, #16
 8001cae:	431a      	orrs	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Enable transfer buffer */
  channel->TCSR = (0x1UL << USIC_CH_TCSR_TDEN_Pos) |
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8001cba:	639a      	str	r2, [r3, #56]	; 0x38
                  USIC_CH_TCSR_TDSSM_Msk;

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f04f 32ff 	mov.w	r2, #4294967295
 8001cc2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	891b      	ldrh	r3, [r3, #8]
 8001cc8:	461a      	mov	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001cce:	3710      	adds	r7, #16
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <XMC_UART_CH_Transmit>:
  } 
  return status;
}

void XMC_UART_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	460b      	mov	r3, r1
 8001cde:	807b      	strh	r3, [r7, #2]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0UL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001ce6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d110      	bne.n	8001d10 <XMC_UART_CH_Transmit+0x3c>
  {
    /* Wait till the Transmit Buffer is free for transmission */
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8001cee:	bf00      	nop
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f7ff ff7b 	bl	8001bec <XMC_USIC_CH_GetTransmitBufferStatus>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b80      	cmp	r3, #128	; 0x80
 8001cfa:	d0f9      	beq.n	8001cf0 <XMC_UART_CH_Transmit+0x1c>
    {
    }
  
    /* Clear the Transmit Buffer indication flag */
    XMC_UART_CH_ClearStatusFlag(channel, (uint32_t)XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d02:	f7ff ff83 	bl	8001c0c <XMC_UART_CH_ClearStatusFlag>
  
    /*Transmit data */
    channel->TBUF[0U] = data;
 8001d06:	887a      	ldrh	r2, [r7, #2]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001d0e:	e003      	b.n	8001d18 <XMC_UART_CH_Transmit+0x44>
  }
  else
  {
    channel->IN[0U] = data;
 8001d10:	887a      	ldrh	r2, [r7, #2]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop

08001d20 <XMC_UART_CH_GetReceivedData>:

uint16_t XMC_UART_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001d2e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d103      	bne.n	8001d3e <XMC_UART_CH_GetReceivedData+0x1e>
  {
    retval = (uint16_t)channel->RBUF;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d3a:	81fb      	strh	r3, [r7, #14]
 8001d3c:	e003      	b.n	8001d46 <XMC_UART_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8001d44:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 8001d46:	89fb      	ldrh	r3, [r7, #14]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3714      	adds	r7, #20
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	4a14      	ldr	r2, [pc, #80]	; (8001db0 <XMC_USIC_CH_Enable+0x5c>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d003      	beq.n	8001d6c <XMC_USIC_CH_Enable+0x18>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a13      	ldr	r2, [pc, #76]	; (8001db4 <XMC_USIC_CH_Enable+0x60>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d103      	bne.n	8001d74 <XMC_USIC_CH_Enable+0x20>
  {
    XMC_USIC_Enable(XMC_USIC0);
 8001d6c:	4812      	ldr	r0, [pc, #72]	; (8001db8 <XMC_USIC_CH_Enable+0x64>)
 8001d6e:	f000 f967 	bl	8002040 <XMC_USIC_Enable>
 8001d72:	e00a      	b.n	8001d8a <XMC_USIC_CH_Enable+0x36>
  }
#if defined(USIC1)
  else if((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a11      	ldr	r2, [pc, #68]	; (8001dbc <XMC_USIC_CH_Enable+0x68>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d003      	beq.n	8001d84 <XMC_USIC_CH_Enable+0x30>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	4a10      	ldr	r2, [pc, #64]	; (8001dc0 <XMC_USIC_CH_Enable+0x6c>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d102      	bne.n	8001d8a <XMC_USIC_CH_Enable+0x36>
  {
    XMC_USIC_Enable(XMC_USIC1);
 8001d84:	480f      	ldr	r0, [pc, #60]	; (8001dc4 <XMC_USIC_CH_Enable+0x70>)
 8001d86:	f000 f95b 	bl	8002040 <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2203      	movs	r2, #3
 8001d8e:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 8001d90:	bf00      	nop
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d0f9      	beq.n	8001d92 <XMC_USIC_CH_Enable+0x3e>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	f023 020f 	bic.w	r2, r3, #15
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40030000 	.word	0x40030000
 8001db4:	40030200 	.word	0x40030200
 8001db8:	40030008 	.word	0x40030008
 8001dbc:	48020000 	.word	0x48020000
 8001dc0:	48020200 	.word	0x48020200
 8001dc4:	48020008 	.word	0x48020008

08001dc8 <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b08e      	sub	sp, #56	; 0x38
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
  
  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	2b63      	cmp	r3, #99	; 0x63
 8001dd8:	d958      	bls.n	8001e8c <XMC_USIC_CH_SetBaudrate+0xc4>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d055      	beq.n	8001e8c <XMC_USIC_CH_SetBaudrate+0xc4>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 8001de0:	f7fe fc52 	bl	8000688 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8001de4:	4602      	mov	r2, r0
 8001de6:	4b2e      	ldr	r3, [pc, #184]	; (8001ea0 <XMC_USIC_CH_SetBaudrate+0xd8>)
 8001de8:	fba3 2302 	umull	r2, r3, r3, r2
 8001dec:	095b      	lsrs	r3, r3, #5
 8001dee:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	4a2b      	ldr	r2, [pc, #172]	; (8001ea0 <XMC_USIC_CH_SetBaudrate+0xd8>)
 8001df4:	fba2 2303 	umull	r2, r3, r2, r3
 8001df8:	095b      	lsrs	r3, r3, #5
 8001dfa:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1U;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
 8001e00:	2301      	movs	r3, #1
 8001e02:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
 8001e04:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8001e08:	627b      	str	r3, [r7, #36]	; 0x24

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 8001e0a:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8001e0e:	633b      	str	r3, [r7, #48]	; 0x30
 8001e10:	e022      	b.n	8001e58 <XMC_USIC_CH_SetBaudrate+0x90>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 8001e12:	6a3b      	ldr	r3, [r7, #32]
 8001e14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e16:	fb02 f203 	mul.w	r2, r2, r3
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	6879      	ldr	r1, [r7, #4]
 8001e1e:	fb01 f303 	mul.w	r3, r1, r3
 8001e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e26:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	0a9b      	lsrs	r3, r3, #10
 8001e2c:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e34:	617b      	str	r3, [r7, #20]

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e3c:	d209      	bcs.n	8001e52 <XMC_USIC_CH_SetBaudrate+0x8a>
 8001e3e:	697a      	ldr	r2, [r7, #20]
 8001e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d205      	bcs.n	8001e52 <XMC_USIC_CH_SetBaudrate+0x8a>
      {
        pdiv_frac_min = pdiv_frac;
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
 8001e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e50:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 8001e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e54:	3b01      	subs	r3, #1
 8001e56:	633b      	str	r3, [r7, #48]	; 0x30
 8001e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1d9      	bne.n	8001e12 <XMC_USIC_CH_SetBaudrate+0x4a>
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 8001e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e60:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	611a      	str	r2, [r3, #16]
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	695a      	ldr	r2, [r3, #20]
 8001e6c:	4b0d      	ldr	r3, [pc, #52]	; (8001ea4 <XMC_USIC_CH_SetBaudrate+0xdc>)
 8001e6e:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	3a01      	subs	r2, #1
 8001e74:	0292      	lsls	r2, r2, #10
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 8001e76:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
 8001e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8001e7e:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
                    
    status = XMC_USIC_CH_STATUS_OK;
 8001e84:	2300      	movs	r3, #0
 8001e86:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001e8a:	e002      	b.n	8001e92 <XMC_USIC_CH_SetBaudrate+0xca>
  }
  else 
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  return status;
 8001e92:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3738      	adds	r7, #56	; 0x38
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	51eb851f 	.word	0x51eb851f
 8001ea4:	fc0080ef 	.word	0xfc0080ef

08001ea8 <XMC_USIC_CH_TXFIFO_Configure>:

void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	603b      	str	r3, [r7, #0]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001ebe:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001ece:	4b09      	ldr	r3, [pc, #36]	; (8001ef4 <XMC_USIC_CH_TXFIFO_Configure+0x4c>)
 8001ed0:	4013      	ands	r3, r2
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 8001ed2:	683a      	ldr	r2, [r7, #0]
 8001ed4:	0211      	lsls	r1, r2, #8
 8001ed6:	68ba      	ldr	r2, [r7, #8]
 8001ed8:	4311      	orrs	r1, r2
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
 8001eda:	79fa      	ldrb	r2, [r7, #7]
 8001edc:	0612      	lsls	r2, r2, #24
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 8001ede:	430a      	orrs	r2, r1
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
 8001ee0:	431a      	orrs	r2, r3
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
}
 8001ee8:	3714      	adds	r7, #20
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	f8ffc0c0 	.word	0xf8ffc0c0

08001ef8 <XMC_USIC_CH_RXFIFO_Configure>:

void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	603b      	str	r3, [r7, #0]
 8001f04:	4613      	mov	r3, r2
 8001f06:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001f0e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8001f1e:	4b0a      	ldr	r3, [pc, #40]	; (8001f48 <XMC_USIC_CH_RXFIFO_Configure+0x50>)
 8001f20:	4013      	ands	r3, r2
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
 8001f22:	683a      	ldr	r2, [r7, #0]
 8001f24:	0211      	lsls	r1, r2, #8
 8001f26:	68ba      	ldr	r2, [r7, #8]
 8001f28:	4311      	orrs	r1, r2
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
 8001f2a:	79fa      	ldrb	r2, [r7, #7]
 8001f2c:	0612      	lsls	r2, r2, #24
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
 8001f2e:	430a      	orrs	r2, r1
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8001f30:	4313      	orrs	r3, r2
 8001f32:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
                   (uint32_t)USIC_CH_RBCTR_LOF_Msk));
}
 8001f3c:	3714      	adds	r7, #20
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	efffc0c0 	.word	0xefffc0c0

08001f4c <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>:
}

void XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
                                            const XMC_USIC_CH_FIFO_SIZE_t size,
                                            const uint32_t limit)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	460b      	mov	r3, r1
 8001f56:	607a      	str	r2, [r7, #4]
 8001f58:	72fb      	strb	r3, [r7, #11]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001f60:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001f70:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	021b      	lsls	r3, r3, #8
                                            const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 8001f78:	431a      	orrs	r2, r3
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos));
 8001f7a:	7afb      	ldrb	r3, [r7, #11]
 8001f7c:	061b      	lsls	r3, r3, #24
                                            const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos));
}
 8001f86:	3714      	adds	r7, #20
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <XMC_USIC_CH_SetInterruptNodePointer>:

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	460b      	mov	r3, r1
 8001f9a:	607a      	str	r2, [r7, #4]
 8001f9c:	72fb      	strb	r3, [r7, #11]
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	699a      	ldr	r2, [r3, #24]
 8001fa2:	7afb      	ldrb	r3, [r7, #11]
 8001fa4:	2107      	movs	r1, #7
 8001fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8001faa:	43db      	mvns	r3, r3
 8001fac:	401a      	ands	r2, r3
                  (service_request << (uint32_t)interrupt_node));
 8001fae:	7afb      	ldrb	r3, [r7, #11]
 8001fb0:	6879      	ldr	r1, [r7, #4]
 8001fb2:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001fb6:	431a      	orrs	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	619a      	str	r2, [r3, #24]
                  (service_request << (uint32_t)interrupt_node));
}
 8001fbc:	3714      	adds	r7, #20
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop

08001fc8 <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>:

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	607a      	str	r2, [r7, #4]
 8001fd4:	72fb      	strb	r3, [r7, #11]
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001fdc:	7afb      	ldrb	r3, [r7, #11]
 8001fde:	2107      	movs	r1, #7
 8001fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	401a      	ands	r2, r3
                   (service_request << (uint32_t)interrupt_node));
 8001fe8:	7afb      	ldrb	r3, [r7, #11]
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001ff0:	431a      	orrs	r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (service_request << (uint32_t)interrupt_node));
}
 8001ff8:	3714      	adds	r7, #20
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop

08002004 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>:

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	460b      	mov	r3, r1
 800200e:	607a      	str	r2, [r7, #4]
 8002010:	72fb      	strb	r3, [r7, #11]
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8002018:	7afb      	ldrb	r3, [r7, #11]
 800201a:	2107      	movs	r1, #7
 800201c:	fa01 f303 	lsl.w	r3, r1, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	401a      	ands	r2, r3
                   (service_request << (uint32_t)interrupt_node));
 8002024:	7afb      	ldrb	r3, [r7, #11]
 8002026:	6879      	ldr	r1, [r7, #4]
 8002028:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 800202c:	431a      	orrs	r2, r3
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                   (service_request << (uint32_t)interrupt_node));
}
 8002034:	3714      	adds	r7, #20
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop

08002040 <XMC_USIC_Enable>:

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a0c      	ldr	r2, [pc, #48]	; (800207c <XMC_USIC_Enable+0x3c>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d108      	bne.n	8002062 <XMC_USIC_Enable+0x22>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
 8002050:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002054:	f7fe fc48 	bl	80008e8 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 8002058:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800205c:	f7fe faf8 	bl	8000650 <XMC_SCU_RESET_DeassertPeripheralReset>
 8002060:	e009      	b.n	8002076 <XMC_USIC_Enable+0x36>
#endif	
  }
#if defined(USIC1)  
  else if (usic == USIC1)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a06      	ldr	r2, [pc, #24]	; (8002080 <XMC_USIC_Enable+0x40>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d105      	bne.n	8002076 <XMC_USIC_Enable+0x36>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
 800206a:	4806      	ldr	r0, [pc, #24]	; (8002084 <XMC_USIC_Enable+0x44>)
 800206c:	f7fe fc3c 	bl	80008e8 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif	
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 8002070:	4804      	ldr	r0, [pc, #16]	; (8002084 <XMC_USIC_Enable+0x44>)
 8002072:	f7fe faed 	bl	8000650 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40030008 	.word	0x40030008
 8002080:	48020008 	.word	0x48020008
 8002084:	10000080 	.word	0x10000080

08002088 <XMC_VADC_GROUP_ExternalMuxControlInit>:
 * \par<b>Related APIs:</b><BR>
 * None
 */
__STATIC_INLINE void XMC_VADC_GROUP_ExternalMuxControlInit(XMC_VADC_GROUP_t *const group_ptr,
                                                           const XMC_VADC_GROUP_EMUXCFG_t emux_cfg)
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
 8002092:	783b      	ldrb	r3, [r7, #0]
 8002094:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8002098:	b2db      	uxtb	r3, r3
 800209a:	461a      	mov	r2, r3
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
 800209c:	887b      	ldrh	r3, [r7, #2]
 800209e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	041b      	lsls	r3, r3, #16
{
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
 80020a6:	4313      	orrs	r3, r2
 80020a8:	60fb      	str	r3, [r7, #12]
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 80020b2:	78fb      	ldrb	r3, [r7, #3]
 80020b4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	071a      	lsls	r2, r3, #28
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
 80020bc:	78fb      	ldrb	r3, [r7, #3]
 80020be:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	069b      	lsls	r3, r3, #26

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 80020c6:	431a      	orrs	r2, r3
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);
 80020c8:	78fb      	ldrb	r3, [r7, #3]
 80020ca:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	075b      	lsls	r3, r3, #29

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 80020d2:	4313      	orrs	r3, r2
 80020d4:	60fb      	str	r3, [r7, #12]
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);

#if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
  emux_config |= ((uint32_t)emux_cfg.emux_channel_select_style << (uint32_t)VADC_G_EMUXCTR_EMXCSS_Pos);
 80020d6:	78fb      	ldrb	r3, [r7, #3]
 80020d8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	079b      	lsls	r3, r3, #30
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	60fb      	str	r3, [r7, #12]
#endif
  group_ptr->EMUXCTR  |= (emux_config | ((uint32_t)VADC_G_EMUXCTR_EMXWC_Msk)) ;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f8d3 21f0 	ldr.w	r2, [r3, #496]	; 0x1f0
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
}
 80020fa:	3714      	adds	r7, #20
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <XMC_VADC_GROUP_BackgroundEnableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_BackgroundDisableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_BackgroundEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR |= (uint32_t)VADC_G_ARBPR_ASEN2_Msk;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002112:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop

08002128 <XMC_VADC_GROUP_BackgroundDisableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_BackgroundEnableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_BackgroundDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN2_Msk);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002136:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop

0800214c <XMC_VADC_GLOBAL_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/*API to enable the VADC Module*/
void XMC_VADC_GLOBAL_EnableModule(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
#if defined (COMPARATOR)
  COMPARATOR->ORCCTRL = (uint32_t)0xFF;
#endif

#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
 8002150:	2001      	movs	r0, #1
 8002152:	f7fe fbc9 	bl	80008e8 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  /* Reset the Hardware */
  XMC_SCU_RESET_DeassertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC );
 8002156:	2001      	movs	r0, #1
 8002158:	f7fe fa7a 	bl	8000650 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
}
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop

08002160 <XMC_VADC_GLOBAL_Init>:
}


/* API to initialize global resources */
void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *config)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  uint32_t reg;
#endif
  XMC_ASSERT("XMC_VADC_GLOBAL_Init:Wrong Module Pointer", (global_ptr == VADC))

  /* Enable the VADC module*/
  XMC_VADC_GLOBAL_EnableModule();
 800216a:	f7ff ffef 	bl	800214c <XMC_VADC_GLOBAL_EnableModule>

  global_ptr->CLC = (uint32_t)(config->clc);
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	695a      	ldr	r2, [r3, #20]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	601a      	str	r2, [r3, #0]

  /* Clock configuration */

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  global_ptr->GLOBCFG  = (uint32_t)(config->clock_config.globcfg | (uint32_t)(VADC_GLOBCFG_DIVWC_Msk));
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif

  /* ICLASS-0 configuration */
  global_ptr->GLOBICLASS[0] = (uint32_t)(config->class0.globiclass);
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* ICLASS-1 configuration */
  global_ptr->GLOBICLASS[1] = (uint32_t)(config->class1.globiclass);
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	68da      	ldr	r2, [r3, #12]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4


  /*Result generation related configuration */
  global_ptr->GLOBRCR = (uint32_t)(config->globrcr);
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	691a      	ldr	r2, [r3, #16]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280

#if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)

  /* Boundaries */
  global_ptr->GLOBBOUND = (uint32_t)(config->globbound);
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  /* From the Errata sheet of XMC1100 V1.7*/
  XMC_VADC_CONV_ENABLE_FOR_XMC11 = 1U;
#endif

}
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop

080021b4 <XMC_VADC_GLOBAL_InputClassInit>:

/* API to Set the Global IClass registers*/
void XMC_VADC_GLOBAL_InputClassInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CLASS_t config,
                                          const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	603b      	str	r3, [r7, #0]
 80021c0:	4613      	mov	r3, r2
 80021c2:	71fb      	strb	r3, [r7, #7]
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Conversion Type", ((conv_type) <= XMC_VADC_GROUP_CONV_EMUX))
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong ICLASS set number", (set_num < XMC_VADC_MAX_ICLASS_SET))

#if(XMC_VADC_EMUX_AVAILABLE == 1U)
  if (conv_type == XMC_VADC_GROUP_CONV_STD )
 80021c4:	79fb      	ldrb	r3, [r7, #7]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d109      	bne.n	80021de <XMC_VADC_GLOBAL_InputClassInit+0x2a>
  {
#endif
    global_ptr->GLOBICLASS[set_num] = config.globiclass &
 80021ca:	68ba      	ldr	r2, [r7, #8]
 80021cc:	f240 731f 	movw	r3, #1823	; 0x71f
 80021d0:	4013      	ands	r3, r2
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	6839      	ldr	r1, [r7, #0]
 80021d6:	3128      	adds	r1, #40	; 0x28
 80021d8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80021dc:	e007      	b.n	80021ee <XMC_VADC_GLOBAL_InputClassInit+0x3a>
                                      (uint32_t)(VADC_GLOBICLASS_CMS_Msk | VADC_GLOBICLASS_STCS_Msk);
#if(XMC_VADC_EMUX_AVAILABLE == 1U)
  }
  else
  {
    global_ptr->GLOBICLASS[set_num] = config.globiclass & (uint32_t)(VADC_GLOBICLASS_CME_Msk | VADC_GLOBICLASS_STCE_Msk);
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	4b05      	ldr	r3, [pc, #20]	; (80021f8 <XMC_VADC_GLOBAL_InputClassInit+0x44>)
 80021e2:	4013      	ands	r3, r2
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	6839      	ldr	r1, [r7, #0]
 80021e8:	3128      	adds	r1, #40	; 0x28
 80021ea:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  }
#endif
}
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	071f0000 	.word	0x071f0000

080021fc <XMC_VADC_GLOBAL_StartupCalibration>:

/* API to enable startup calibration feature */
void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  VADC_G_TypeDef *group_ptr;
#endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_StartupCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800220a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8002214:	2300      	movs	r3, #0
 8002216:	73fb      	strb	r3, [r7, #15]
 8002218:	e016      	b.n	8002248 <XMC_VADC_GLOBAL_StartupCalibration+0x4c>
  {
    group_ptr = g_xmc_vadc_group_array[i];
 800221a:	7bfb      	ldrb	r3, [r7, #15]
 800221c:	4a0e      	ldr	r2, [pc, #56]	; (8002258 <XMC_VADC_GLOBAL_StartupCalibration+0x5c>)
 800221e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002222:	60bb      	str	r3, [r7, #8]
    if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800222a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d007      	beq.n	8002242 <XMC_VADC_GLOBAL_StartupCalibration+0x46>
    {
      /* This group is active. Loop until it finishes calibration */
      while((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
 8002232:	bf00      	nop
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800223a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1f8      	bne.n	8002234 <XMC_VADC_GLOBAL_StartupCalibration+0x38>

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8002242:	7bfb      	ldrb	r3, [r7, #15]
 8002244:	3301      	adds	r3, #1
 8002246:	73fb      	strb	r3, [r7, #15]
 8002248:	7bfb      	ldrb	r3, [r7, #15]
 800224a:	2b03      	cmp	r3, #3
 800224c:	d9e5      	bls.n	800221a <XMC_VADC_GLOBAL_StartupCalibration+0x1e>
         XMC_VADC_SHS_START_UP_CAL_ACTIVE )
  {
    /* NOP */
  }
#endif
}
 800224e:	3714      	adds	r7, #20
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	08009c90 	.word	0x08009c90

0800225c <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode>:
  global_ptr->GLOBEVNP |= (uint32_t)(node << VADC_GLOBEVNP_REV0NP_Pos);
}

/* API to bind request source event with a service request line */
void XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC_VADC_SR_t sr)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	460b      	mov	r3, r1
 8002266:	70fb      	strb	r3, [r7, #3]
  uint32_t node;
  
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:Wrong Module Pointer", (global_ptr == VADC))

  if (sr >= XMC_VADC_SR_SHARED_SR0)
 8002268:	78fb      	ldrb	r3, [r7, #3]
 800226a:	2b03      	cmp	r3, #3
 800226c:	d903      	bls.n	8002276 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode+0x1a>
  {
    node = (uint32_t)sr - (uint32_t)XMC_VADC_SR_SHARED_SR0;
 800226e:	78fb      	ldrb	r3, [r7, #3]
 8002270:	3b04      	subs	r3, #4
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	e001      	b.n	800227a <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode+0x1e>
  }
  else
  {
    node = (uint32_t)sr;
 8002276:	78fb      	ldrb	r3, [r7, #3]
 8002278:	60fb      	str	r3, [r7, #12]
  }

  global_ptr->GLOBEVNP &= ~((uint32_t)VADC_GLOBEVNP_SEV0NP_Msk);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002280:	f023 020f 	bic.w	r2, r3, #15
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
  global_ptr->GLOBEVNP |= (uint32_t) (node << VADC_GLOBEVNP_SEV0NP_Pos);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	431a      	orrs	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 800229a:	3714      	adds	r7, #20
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <XMC_VADC_GROUP_Init>:

/* API to initialize an instance of group of VADC hardware */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)  
void XMC_VADC_GROUP_Init( XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_Init:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  /* Program the input classes */
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_STD, 0U);
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	6859      	ldr	r1, [r3, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	2300      	movs	r3, #0
 80022b8:	f000 f828 	bl	800230c <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_EMUX, 0U);
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	6859      	ldr	r1, [r3, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	2300      	movs	r3, #0
 80022c6:	f000 f821 	bl	800230c <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_STD, 1U);
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	6899      	ldr	r1, [r3, #8]
 80022d0:	2200      	movs	r2, #0
 80022d2:	2301      	movs	r3, #1
 80022d4:	f000 f81a 	bl	800230c <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_EMUX, 1U);
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	6899      	ldr	r1, [r3, #8]
 80022de:	2201      	movs	r2, #1
 80022e0:	2301      	movs	r3, #1
 80022e2:	f000 f813 	bl	800230c <XMC_VADC_GROUP_InputClassInit>

  group_ptr->ARBCFG = config->g_arbcfg;
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	691a      	ldr	r2, [r3, #16]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  group_ptr->BOUND = config->g_bound;
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	68da      	ldr	r2, [r3, #12]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  /* External mux configuration */
  XMC_VADC_GROUP_ExternalMuxControlInit(group_ptr,config->emux_config);
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	6819      	ldr	r1, [r3, #0]
 8002300:	f7ff fec2 	bl	8002088 <XMC_VADC_GROUP_ExternalMuxControlInit>

}
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop

0800230c <XMC_VADC_GROUP_InputClassInit>:

/* API to program conversion characteristics */
void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t config,
                                          const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
 800230c:	b480      	push	{r7}
 800230e:	b08d      	sub	sp, #52	; 0x34
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	603b      	str	r3, [r7, #0]
 8002318:	4613      	mov	r3, r2
 800231a:	71fb      	strb	r3, [r7, #7]

  /* 
   * Obtain the mask and position macros of the parameters based on what is being requested - Standard channels vs
   * external mux channels.
   */
  if (XMC_VADC_GROUP_CONV_STD == conv_type)
 800231c:	79fb      	ldrb	r3, [r7, #7]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d113      	bne.n	800234a <XMC_VADC_GROUP_InputClassInit+0x3e>
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CMS_Pos;
 8002322:	2308      	movs	r3, #8
 8002324:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CMS_Msk;
 8002326:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800232a:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCS_Pos;
 800232c:	2300      	movs	r3, #0
 800232e:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCS_Msk;
 8002330:	231f      	movs	r3, #31
 8002332:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sample_time_std_conv;
 8002334:	7a3b      	ldrb	r3, [r7, #8]
 8002336:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800233a:	b2db      	uxtb	r3, r3
 800233c:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_standard;
 800233e:	7a7b      	ldrb	r3, [r7, #9]
 8002340:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8002344:	b2db      	uxtb	r3, r3
 8002346:	76fb      	strb	r3, [r7, #27]
 8002348:	e013      	b.n	8002372 <XMC_VADC_GROUP_InputClassInit+0x66>
  }
  else
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CME_Pos;
 800234a:	2318      	movs	r3, #24
 800234c:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CME_Msk;
 800234e:	f04f 63e0 	mov.w	r3, #117440512	; 0x7000000
 8002352:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCE_Pos;
 8002354:	2310      	movs	r3, #16
 8002356:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCE_Msk;
 8002358:	f44f 13f8 	mov.w	r3, #2031616	; 0x1f0000
 800235c:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sampling_phase_emux_channel;
 800235e:	7abb      	ldrb	r3, [r7, #10]
 8002360:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8002364:	b2db      	uxtb	r3, r3
 8002366:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
 8002368:	7afb      	ldrb	r3, [r7, #11]
 800236a:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800236e:	b2db      	uxtb	r3, r3
 8002370:	76fb      	strb	r3, [r7, #27]
  }

  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	3228      	adds	r2, #40	; 0x28
 8002378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800237c:	617b      	str	r3, [r7, #20]

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
 800237e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002380:	43db      	mvns	r3, r3
 8002382:	697a      	ldr	r2, [r7, #20]
 8002384:	4013      	ands	r3, r2
 8002386:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
 8002388:	7efa      	ldrb	r2, [r7, #27]
 800238a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	4313      	orrs	r3, r2
 8002394:	617b      	str	r3, [r7, #20]
  conv_class &= ~(sample_time_mask);
 8002396:	6a3b      	ldr	r3, [r7, #32]
 8002398:	43db      	mvns	r3, r3
 800239a:	697a      	ldr	r2, [r7, #20]
 800239c:	4013      	ands	r3, r2
 800239e:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
 80023a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a2:	69fa      	ldr	r2, [r7, #28]
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	697a      	ldr	r2, [r7, #20]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	617b      	str	r3, [r7, #20]
  group_ptr->ICLASS[set_num] = conv_class;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	3228      	adds	r2, #40	; 0x28
 80023b4:	6979      	ldr	r1, [r7, #20]
 80023b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80023ba:	3734      	adds	r7, #52	; 0x34
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <XMC_VADC_GROUP_SetPowerMode>:

/* API which sets the power mode of analog converter of a VADC group */
void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_t power_mode)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	460b      	mov	r3, r1
 80023ce:	70fb      	strb	r3, [r7, #3]
  uint32_t arbcfg;

  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Power Mode", (power_mode <= XMC_VADC_GROUP_POWERMODE_NORMAL))

  arbcfg = group_ptr->ARBCFG;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023d6:	60fb      	str	r3, [r7, #12]

  arbcfg &= ~((uint32_t)VADC_G_ARBCFG_ANONC_Msk);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f023 0303 	bic.w	r3, r3, #3
 80023de:	60fb      	str	r3, [r7, #12]
  arbcfg |= (uint32_t)power_mode;
 80023e0:	78fb      	ldrb	r3, [r7, #3]
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	60fb      	str	r3, [r7, #12]

  group_ptr->ARBCFG = arbcfg;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 80023f0:	3714      	adds	r7, #20
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop

080023fc <XMC_VADC_GLOBAL_BackgroundInit>:
}
#endif

/* API to initialize background scan request source hardware */
void XMC_VADC_GLOBAL_BackgroundInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_BACKGROUND_CONFIG_t *config)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  #endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundInit:Wrong Module Pointer", (global_ptr == VADC))

  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8002406:	2300      	movs	r3, #0
 8002408:	75fb      	strb	r3, [r7, #23]
 800240a:	e009      	b.n	8002420 <XMC_VADC_GLOBAL_BackgroundInit+0x24>
  {
    XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 800240c:	7dfb      	ldrb	r3, [r7, #23]
 800240e:	4a39      	ldr	r2, [pc, #228]	; (80024f4 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8002410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff fe87 	bl	8002128 <XMC_VADC_GROUP_BackgroundDisableArbitrationSlot>
  #endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundInit:Wrong Module Pointer", (global_ptr == VADC))

  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 800241a:	7dfb      	ldrb	r3, [r7, #23]
 800241c:	3301      	adds	r3, #1
 800241e:	75fb      	strb	r3, [r7, #23]
 8002420:	7dfb      	ldrb	r3, [r7, #23]
 8002422:	2b03      	cmp	r3, #3
 8002424:	d9f2      	bls.n	800240c <XMC_VADC_GLOBAL_BackgroundInit+0x10>
  {
    XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }
  
  conv_start_mask = (uint32_t) 0;
 8002426:	2300      	movs	r3, #0
 8002428:	613b      	str	r3, [r7, #16]
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	f003 0303 	and.w	r3, r3, #3
 8002432:	b2db      	uxtb	r3, r3
 8002434:	2b00      	cmp	r3, #0
 8002436:	d002      	beq.n	800243e <XMC_VADC_GLOBAL_BackgroundInit+0x42>
  {
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
 8002438:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800243c:	613b      	str	r3, [r7, #16]
  }
  
  for(i=0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 800243e:	2300      	movs	r3, #0
 8002440:	75fb      	strb	r3, [r7, #23]
 8002442:	e021      	b.n	8002488 <XMC_VADC_GLOBAL_BackgroundInit+0x8c>
  {
    reg = g_xmc_vadc_group_array[i]->ARBPR;
 8002444:	7dfb      	ldrb	r3, [r7, #23]
 8002446:	4a2b      	ldr	r2, [pc, #172]	; (80024f4 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8002448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800244c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002450:	60fb      	str	r3, [r7, #12]

    reg &= ~(uint32_t)(VADC_G_ARBPR_PRIO2_Msk);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002458:	60fb      	str	r3, [r7, #12]

    /* Program the priority of the request source */
    reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO2_Pos);
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002462:	b2db      	uxtb	r3, r3
 8002464:	021b      	lsls	r3, r3, #8
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	4313      	orrs	r3, r2
 800246a:	60fb      	str	r3, [r7, #12]
  
    /* Program the start mode */
    reg |= conv_start_mask;
 800246c:	68fa      	ldr	r2, [r7, #12]
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	4313      	orrs	r3, r2
 8002472:	60fb      	str	r3, [r7, #12]

    g_xmc_vadc_group_array[i]->ARBPR = reg;
 8002474:	7dfb      	ldrb	r3, [r7, #23]
 8002476:	4a1f      	ldr	r2, [pc, #124]	; (80024f4 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8002478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800247c:	68fa      	ldr	r2, [r7, #12]
 800247e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
  {
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
  }
  
  for(i=0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8002482:	7dfb      	ldrb	r3, [r7, #23]
 8002484:	3301      	adds	r3, #1
 8002486:	75fb      	strb	r3, [r7, #23]
 8002488:	7dfb      	ldrb	r3, [r7, #23]
 800248a:	2b03      	cmp	r3, #3
 800248c:	d9da      	bls.n	8002444 <XMC_VADC_GLOBAL_BackgroundInit+0x48>
  
  }
  #endif

  /* program BRSCTRL register */
  global_ptr->BRSCTRL = (uint32_t)(config->asctrl | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VADC_BRSCTRL_GTWC_Msk);
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002496:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  /* program BRSMR register */
  global_ptr->BRSMR = (uint32_t)((config->asmr)| (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VADC_BRSMR_ENGT_Pos));
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f043 0201 	orr.w	r2, r3, #1
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  
#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	f003 0303 	and.w	r3, r3, #3
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d107      	bne.n	80024cc <XMC_VADC_GLOBAL_BackgroundInit+0xd0>
  {
    global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80024c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  }
#endif
  
  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 80024cc:	2300      	movs	r3, #0
 80024ce:	75fb      	strb	r3, [r7, #23]
 80024d0:	e009      	b.n	80024e6 <XMC_VADC_GLOBAL_BackgroundInit+0xea>
  {
    XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 80024d2:	7dfb      	ldrb	r3, [r7, #23]
 80024d4:	4a07      	ldr	r2, [pc, #28]	; (80024f4 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 80024d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024da:	4618      	mov	r0, r3
 80024dc:	f7ff fe12 	bl	8002104 <XMC_VADC_GROUP_BackgroundEnableArbitrationSlot>
    global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
  }
#endif
  
  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 80024e0:	7dfb      	ldrb	r3, [r7, #23]
 80024e2:	3301      	adds	r3, #1
 80024e4:	75fb      	strb	r3, [r7, #23]
 80024e6:	7dfb      	ldrb	r3, [r7, #23]
 80024e8:	2b03      	cmp	r3, #3
 80024ea:	d9f2      	bls.n	80024d2 <XMC_VADC_GLOBAL_BackgroundInit+0xd6>
  {
    XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }
  #endif
  
}
 80024ec:	3718      	adds	r7, #24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	08009c90 	.word	0x08009c90

080024f8 <XMC_VADC_GROUP_ChannelInit>:

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
/* API to initialize a channel unit */
void XMC_VADC_GROUP_ChannelInit(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num,
                                        const XMC_VADC_CHANNEL_CONFIG_t *config)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b089      	sub	sp, #36	; 0x24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]


  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
  
  prio  = (uint32_t)config->channel_priority;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	7b1b      	ldrb	r3, [r3, #12]
 8002508:	61bb      	str	r3, [r7, #24]

  /* Priority channel */
  ch_assign  = group_ptr->CHASS;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002510:	617b      	str	r3, [r7, #20]
  ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	2201      	movs	r2, #1
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	43db      	mvns	r3, r3
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	4013      	ands	r3, r2
 8002520:	617b      	str	r3, [r7, #20]
  ch_assign |= (uint32_t)(prio << ch_num);
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	697a      	ldr	r2, [r7, #20]
 800252c:	4313      	orrs	r3, r2
 800252e:	617b      	str	r3, [r7, #20]
  group_ptr->CHASS = ch_assign;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Alias channel */
  if (config->alias_channel >= (int32_t)0)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	7b5b      	ldrb	r3, [r3, #13]
 800253c:	b25b      	sxtb	r3, r3
 800253e:	2b00      	cmp	r3, #0
 8002540:	db29      	blt.n	8002596 <XMC_VADC_GROUP_ChannelInit+0x9e>
  {
    mask = (uint32_t)0;
 8002542:	2300      	movs	r3, #0
 8002544:	61fb      	str	r3, [r7, #28]
    if ((uint32_t)1 == ch_num)
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d10a      	bne.n	8002562 <XMC_VADC_GROUP_ChannelInit+0x6a>
    {
      mask = VADC_G_ALIAS_ALIAS1_Pos;
 800254c:	2308      	movs	r3, #8
 800254e:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS1_Msk);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002556:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002560:	e00c      	b.n	800257c <XMC_VADC_GROUP_ChannelInit+0x84>
    }
    else if ((uint32_t)0 == ch_num)
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d109      	bne.n	800257c <XMC_VADC_GROUP_ChannelInit+0x84>
    {
      mask = VADC_G_ALIAS_ALIAS0_Pos;
 8002568:	2300      	movs	r3, #0
 800256a:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS0_Msk);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002572:	f023 021f 	bic.w	r2, r3, #31
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }

    group_ptr->ALIAS |= (uint32_t)(config->alias_channel << mask);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	7b52      	ldrb	r2, [r2, #13]
 8002586:	b251      	sxtb	r1, r2
 8002588:	69fa      	ldr	r2, [r7, #28]
 800258a:	fa01 f202 	lsl.w	r2, r1, r2
 800258e:	431a      	orrs	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  }

  group_ptr->BFL |= config->bfl;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	431a      	orrs	r2, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

#if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
  group_ptr->BFLC |= config->bflc;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	431a      	orrs	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
#endif
  /* Program the CHCTR register */
  group_ptr->CHCTR[ch_num] = config->chctr;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6819      	ldr	r1, [r3, #0]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	68ba      	ldr	r2, [r7, #8]
 80025c2:	3280      	adds	r2, #128	; 0x80
 80025c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 80025c8:	3724      	adds	r7, #36	; 0x24
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop

080025d4 <_init>:
  }
}

/* Init */
void _init(void)
{}
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <UART_CONFIG_Init>:
 * @return UART_CONFIG_STATUS_t: Status of UART driver initialization.\n
 * @ref UART_CONFIG_STATUS_SUCCESS - on successful initialization.\n
 * @ref UART_CONFIG_STATUS_FAILURE - if initialization fails.\n
 */
UART_CONFIG_STATUS_t UART_CONFIG_Init(const UART_CH_CONFIG_t *const handle)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  UART_CONFIG_STATUS_t status;
  XMC_ASSERT("UART_CONFIG APP handle function pointer uninitialized", (((handle != NULL) &&
      (handle->config != NULL)) && ((handle->config->uart_config_init != NULL))))

  /* Initialize the multiplexers required for UART configuration */
  handle->config->uart_config_init();
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	4798      	blx	r3
  status = UART_CONFIG_STATUS_SUCCESS;
 80025f0:	2300      	movs	r3, #0
 80025f2:	73fb      	strb	r3, [r7, #15]

  return status;
 80025f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop

08002600 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	460b      	mov	r3, r1
 800260a:	70fb      	strb	r3, [r7, #3]
 800260c:	4613      	mov	r3, r2
 800260e:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8002610:	78f8      	ldrb	r0, [r7, #3]
 8002612:	78fb      	ldrb	r3, [r7, #3]
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	3306      	adds	r3, #6
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4413      	add	r3, r2
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f023 0207 	bic.w	r2, r3, #7
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 8002622:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8002624:	431a      	orrs	r2, r3
 8002626:	6879      	ldr	r1, [r7, #4]
 8002628:	1d83      	adds	r3, r0, #6
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	440b      	add	r3, r1
 800262e:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop

0800263c <XMC_UART_CH_SetSamplePoint>:
 * example if the oversampling is 16, then the sample point is set to 9.
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_EnableInputInversion(), XMC_UART_CH_SetSamplePoint() \n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_SetSamplePoint(XMC_USIC_CH_t *const channel, const uint32_t sample_point)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  channel->PCR_ASCMode = (uint32_t)((channel->PCR_ASCMode & (uint32_t)(~USIC_CH_PCR_ASCMode_SP_Msk)) |
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800264a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
                         (sample_point << USIC_CH_PCR_ASCMode_SP_Pos));
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	021b      	lsls	r3, r3, #8
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_EnableInputInversion(), XMC_UART_CH_SetSamplePoint() \n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_SetSamplePoint(XMC_USIC_CH_t *const channel, const uint32_t sample_point)
{
  channel->PCR_ASCMode = (uint32_t)((channel->PCR_ASCMode & (uint32_t)(~USIC_CH_PCR_ASCMode_SP_Msk)) |
 8002652:	431a      	orrs	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	63da      	str	r2, [r3, #60]	; 0x3c
                         (sample_point << USIC_CH_PCR_ASCMode_SP_Pos));
}
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop

08002664 <UART_CONFIG_0_lInit>:
/***********************************************************************************************************************
 * API IMPLEMENTATION
 **********************************************************************************************************************/
/* Channel initialization function */
void UART_CONFIG_0_lInit()
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* Initialize USIC channel in UART mode */
  XMC_UART_CH_Init(XMC_UART1_CH0, &UART_CONFIG_0_channel_config);
 8002668:	4809      	ldr	r0, [pc, #36]	; (8002690 <UART_CONFIG_0_lInit+0x2c>)
 800266a:	490a      	ldr	r1, [pc, #40]	; (8002694 <UART_CONFIG_0_lInit+0x30>)
 800266c:	f7ff fadc 	bl	8001c28 <XMC_UART_CH_Init>
  /* Set the Sample Point */
  XMC_UART_CH_SetSamplePoint(XMC_UART1_CH0, 8U);
 8002670:	4807      	ldr	r0, [pc, #28]	; (8002690 <UART_CONFIG_0_lInit+0x2c>)
 8002672:	2108      	movs	r1, #8
 8002674:	f7ff ffe2 	bl	800263c <XMC_UART_CH_SetSamplePoint>
  /* Set input source for input stage dx0 (receive pin) */
  XMC_USIC_CH_SetInputSource(XMC_UART1_CH0, (XMC_USIC_CH_INPUT_t)XMC_UART_CH_INPUT_RXD, 0U);
 8002678:	4805      	ldr	r0, [pc, #20]	; (8002690 <UART_CONFIG_0_lInit+0x2c>)
 800267a:	2100      	movs	r1, #0
 800267c:	2200      	movs	r2, #0
 800267e:	f7ff ffbf 	bl	8002600 <XMC_USIC_CH_SetInputSource>
  /* Set the service request line for the Data Lost, Baud Rate Generator and UART protocol events */
  XMC_USIC_CH_SetInterruptNodePointer(XMC_UART1_CH0, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL, 2U);
 8002682:	4803      	ldr	r0, [pc, #12]	; (8002690 <UART_CONFIG_0_lInit+0x2c>)
 8002684:	2110      	movs	r1, #16
 8002686:	2202      	movs	r2, #2
 8002688:	f7ff fc82 	bl	8001f90 <XMC_USIC_CH_SetInterruptNodePointer>
}
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	48020000 	.word	0x48020000
 8002694:	08009ca0 	.word	0x08009ca0

08002698 <XMC_USIC_CH_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  channel->CCR |= event;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	431a      	orrs	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	641a      	str	r2, [r3, #64]	; 0x40
}
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <XMC_USIC_CH_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  channel->CCR &= (uint32_t)~event;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	43db      	mvns	r3, r3
 80026ca:	401a      	ands	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	641a      	str	r2, [r3, #64]	; 0x40
}
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop

080026dc <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80026ee:	b2db      	uxtb	r3, r3
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <XMC_USIC_CH_TriggerServiceRequest>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t service_request_line)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  channel->FMR = (uint32_t)(USIC_CH_FMR_SIO0_Msk << service_request_line);
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800270c:	409a      	lsls	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <XMC_USIC_CH_TXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  channel->TBCTR |= event;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	431a      	orrs	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <XMC_USIC_CH_TXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  channel->TBCTR &= (uint32_t)~event;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	43db      	mvns	r3, r3
 8002754:	401a      	ands	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop

08002768 <XMC_USIC_CH_TXFIFO_Flush>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002776:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <XMC_USIC_CH_TXFIFO_IsFull>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8002792:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002796:	2b00      	cmp	r3, #0
 8002798:	bf14      	ite	ne
 800279a:	2301      	movne	r3, #1
 800279c:	2300      	moveq	r3, #0
 800279e:	b2db      	uxtb	r3, r3
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <XMC_USIC_CH_TXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80027ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027be:	2b00      	cmp	r3, #0
 80027c0:	bf14      	ite	ne
 80027c2:	2301      	movne	r3, #1
 80027c4:	2300      	moveq	r3, #0
 80027c6:	b2db      	uxtb	r3, r3
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <XMC_USIC_CH_RXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  channel->RBCTR |= event;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	431a      	orrs	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <XMC_USIC_CH_RXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  channel->RBCTR &= (uint32_t)~event;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	43db      	mvns	r3, r3
 800280c:	401a      	ands	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop

08002820 <XMC_USIC_CH_RXFIFO_Flush>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800282e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <XMC_USIC_CH_RXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800284a:	f003 0308 	and.w	r3, r3, #8
 800284e:	2b00      	cmp	r3, #0
 8002850:	bf14      	ite	ne
 8002852:	2301      	movne	r3, #1
 8002854:	2300      	moveq	r3, #0
 8002856:	b2db      	uxtb	r3, r3
}
 8002858:	4618      	mov	r0, r3
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <UART_Init>:
 *          UART_SUCCESS: for successful UART initialization.<BR>
 *          UART_STATUS_FAILURE  : If UART initialization fails.<BR>
 *
 */
UART_STATUS_t UART_Init(const UART_t *const handle)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  UART_STATUS_t status = UART_STATUS_SUCCESS;
 800286c:	2300      	movs	r3, #0
 800286e:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("UART_Init : UART APP handle invalid", (((handle != NULL)&&
      (handle->config != NULL)) &&((handle->config->fptr_uart_config != NULL)&&
      (handle->runtime != NULL))))

  /*Initialize the multiplexers required for UART configuration*/
  status = handle->config->fptr_uart_config();
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	4798      	blx	r3
 8002878:	4603      	mov	r3, r0
 800287a:	73fb      	strb	r3, [r7, #15]

  return status;
 800287c:	7bfb      	ldrb	r3, [r7, #15]
}
 800287e:	4618      	mov	r0, r3
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop

08002888 <UART_Transmit>:
 *          UART_STATUS_BUFFER_INVALID: Either if buffer is NULL or count is 0.<BR>
 *          UART_STATUS_MODE_MISMATCH: If the configured mode is invalid.<BR>
 *
 */
UART_STATUS_t UART_Transmit(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
 8002894:	2304      	movs	r3, #4
 8002896:	75fb      	strb	r3, [r7, #23]

  switch(handle->config->transmit_mode)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d000      	beq.n	80028a6 <UART_Transmit+0x1e>
  case UART_TRANSFER_MODE_DIRECT:
    ret_stat = UART_lStartTransmitPolling(handle, data_ptr, count);
    break;
#endif
  default:
    break;
 80028a4:	e007      	b.n	80028b6 <UART_Transmit+0x2e>

  switch(handle->config->transmit_mode)
  {
#ifdef UART_TX_INTERRUPT_USED
  case UART_TRANSFER_MODE_INTERRUPT:
    ret_stat = UART_StartTransmitIRQ(handle, data_ptr, count);
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	68b9      	ldr	r1, [r7, #8]
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	f000 f824 	bl	80028f8 <UART_StartTransmitIRQ>
 80028b0:	4603      	mov	r3, r0
 80028b2:	75fb      	strb	r3, [r7, #23]
    break;
 80028b4:	bf00      	nop
    break;
#endif
  default:
    break;
  }
  return ret_stat;
 80028b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3718      	adds	r7, #24
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <UART_Receive>:
 *          UART_STATUS_BUFFER_INVALID: Either if buffer is NULL or count is 0.<BR>
 *          UART_STATUS_MODE_MISMATCH: If the configured mode is invalid.<BR>
 *
 */
UART_STATUS_t UART_Receive(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b086      	sub	sp, #24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
 80028cc:	2304      	movs	r3, #4
 80028ce:	75fb      	strb	r3, [r7, #23]

  switch(handle->config->receive_mode)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d000      	beq.n	80028de <UART_Receive+0x1e>
  case UART_TRANSFER_MODE_DIRECT:
    ret_stat = UART_lStartReceivePolling(handle, data_ptr, count);
    break;
#endif
  default:
    break;
 80028dc:	e007      	b.n	80028ee <UART_Receive+0x2e>

  switch(handle->config->receive_mode)
  {
#ifdef UART_RX_INTERRUPT_USED
  case UART_TRANSFER_MODE_INTERRUPT:
    ret_stat = UART_StartReceiveIRQ(handle, data_ptr, count);
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	68b9      	ldr	r1, [r7, #8]
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	f000 f864 	bl	80029b0 <UART_StartReceiveIRQ>
 80028e8:	4603      	mov	r3, r0
 80028ea:	75fb      	strb	r3, [r7, #23]
    break;
 80028ec:	bf00      	nop
    break;
#endif
  default:
    break;
  }
  return ret_stat;
 80028ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3718      	adds	r7, #24
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <UART_StartTransmitIRQ>:
 * request is registered.
 *
 *
 */
UART_STATUS_t UART_StartTransmitIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
 8002904:	2304      	movs	r3, #4
 8002906:	75fb      	strb	r3, [r7, #23]
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	613b      	str	r3, [r7, #16]

  XMC_ASSERT("UART_StartTransmitIRQ: UART APP handle invalid", ((handle != NULL)&&
            (handle->runtime != NULL)))

  if (handle->config->transmit_mode == UART_TRANSFER_MODE_INTERRUPT)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002916:	2b00      	cmp	r3, #0
 8002918:	d144      	bne.n	80029a4 <UART_StartTransmitIRQ+0xac>
  {
    ret_stat = UART_STATUS_BUSY;
 800291a:	2302      	movs	r3, #2
 800291c:	75fb      	strb	r3, [r7, #23]
    if (ptr_runtime->tx_busy == false)
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	7e1b      	ldrb	r3, [r3, #24]
 8002922:	b2db      	uxtb	r3, r3
 8002924:	f083 0301 	eor.w	r3, r3, #1
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d03a      	beq.n	80029a4 <UART_StartTransmitIRQ+0xac>
    {
      /*If there is no transmission in progress*/
      if ((data_ptr != NULL) && (count > 0U))
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d035      	beq.n	80029a0 <UART_StartTransmitIRQ+0xa8>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d032      	beq.n	80029a0 <UART_StartTransmitIRQ+0xa8>
      {
        /*Obtain the address of data, size of data*/
        ptr_runtime->tx_data = data_ptr;
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	68ba      	ldr	r2, [r7, #8]
 800293e:	601a      	str	r2, [r3, #0]
        ptr_runtime->tx_data_count = count;
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	609a      	str	r2, [r3, #8]
        /*Initialize to first index and set the busy flag*/
        ptr_runtime->tx_data_index = 0U;
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	2200      	movs	r2, #0
 800294a:	60da      	str	r2, [r3, #12]
        ptr_runtime->tx_busy = true;
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	2201      	movs	r2, #1
 8002950:	761a      	strb	r2, [r3, #24]

        /*Enable the transmit buffer event*/
        if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00c      	beq.n	8002978 <UART_StartTransmitIRQ+0x80>
        {
          /*Clear the transmit FIFO*/
          XMC_USIC_CH_TXFIFO_Flush(handle->channel);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4618      	mov	r0, r3
 8002964:	f7ff ff00 	bl	8002768 <XMC_USIC_CH_TXFIFO_Flush>
          /*Enable transmit buffer interrupt*/
          XMC_USIC_CH_TXFIFO_EnableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4618      	mov	r0, r3
 800296e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002972:	f7ff fed3 	bl	800271c <XMC_USIC_CH_TXFIFO_EnableEvent>
 8002976:	e006      	b.n	8002986 <UART_StartTransmitIRQ+0x8e>
        }
        else
        {
          XMC_USIC_CH_EnableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4618      	mov	r0, r3
 800297e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002982:	f7ff fe89 	bl	8002698 <XMC_USIC_CH_EnableEvent>
        }
        ret_stat = UART_STATUS_SUCCESS;
 8002986:	2300      	movs	r3, #0
 8002988:	75fb      	strb	r3, [r7, #23]
        /*Trigger the transmit buffer interrupt*/
        XMC_USIC_CH_TriggerServiceRequest(handle->channel, (uint32_t)handle->config->tx_sr);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8002996:	4610      	mov	r0, r2
 8002998:	4619      	mov	r1, r3
 800299a:	f7ff feaf 	bl	80026fc <XMC_USIC_CH_TriggerServiceRequest>
 800299e:	e001      	b.n	80029a4 <UART_StartTransmitIRQ+0xac>
      }
      else
      {
        ret_stat = UART_STATUS_BUFFER_INVALID;
 80029a0:	2303      	movs	r3, #3
 80029a2:	75fb      	strb	r3, [r7, #23]
      }
    }
  }
  return ret_stat;
 80029a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3718      	adds	r7, #24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop

080029b0 <UART_StartReceiveIRQ>:
 * request is registered.
 *
 *
 */
UART_STATUS_t UART_StartReceiveIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
 80029bc:	2304      	movs	r3, #4
 80029be:	75fb      	strb	r3, [r7, #23]
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	613b      	str	r3, [r7, #16]

  XMC_ASSERT("UART_StartReceiveIRQ: UART APP handle invalid", ((handle != NULL)&&
            (handle->runtime != NULL)))

  if (handle->config->receive_mode == UART_TRANSFER_MODE_INTERRUPT)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d13e      	bne.n	8002a50 <UART_StartReceiveIRQ+0xa0>
  {
    ret_stat = UART_STATUS_BUSY;
 80029d2:	2302      	movs	r3, #2
 80029d4:	75fb      	strb	r3, [r7, #23]
    if (ptr_runtime->rx_busy == false)
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	7e5b      	ldrb	r3, [r3, #25]
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	f083 0301 	eor.w	r3, r3, #1
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d034      	beq.n	8002a50 <UART_StartReceiveIRQ+0xa0>
    {
      /*If no active reception in progress*/
      if ((data_ptr != NULL) && (count > 0U))
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d02f      	beq.n	8002a4c <UART_StartReceiveIRQ+0x9c>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d02c      	beq.n	8002a4c <UART_StartReceiveIRQ+0x9c>
      {
        /*Obtain the address of data buffer and
         * number of data bytes to be received*/
        ptr_runtime->rx_data = data_ptr;
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	68ba      	ldr	r2, [r7, #8]
 80029f6:	605a      	str	r2, [r3, #4]
        ptr_runtime->rx_data_count = count;
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	611a      	str	r2, [r3, #16]
        ptr_runtime->rx_busy = true;
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	2201      	movs	r2, #1
 8002a02:	765a      	strb	r2, [r3, #25]
        ptr_runtime->rx_data_index = 0U;
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	2200      	movs	r2, #0
 8002a08:	615a      	str	r2, [r3, #20]

        if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d010      	beq.n	8002a38 <UART_StartReceiveIRQ+0x88>
        {
          /*Clear the receive FIFO, configure the trigger lime
           * and enable the receive events*/
          XMC_USIC_CH_RXFIFO_Flush(handle->channel);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff ff00 	bl	8002820 <XMC_USIC_CH_RXFIFO_Flush>

          /*Configure the FIFO trigger limit based on the required data size*/
          UART_lReconfigureRxFIFO(handle, count);
 8002a20:	68f8      	ldr	r0, [r7, #12]
 8002a22:	6879      	ldr	r1, [r7, #4]
 8002a24:	f000 f930 	bl	8002c88 <UART_lReconfigureRxFIFO>

          XMC_USIC_CH_RXFIFO_EnableEvent(handle->channel,
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8002a32:	f7ff fecf 	bl	80027d4 <XMC_USIC_CH_RXFIFO_EnableEvent>
 8002a36:	e006      	b.n	8002a46 <UART_StartReceiveIRQ+0x96>
            (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
            (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));
        }
        else
        {
          XMC_USIC_CH_EnableEvent(handle->channel,
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8002a42:	f7ff fe29 	bl	8002698 <XMC_USIC_CH_EnableEvent>
          (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE | (uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE));
        }
        ret_stat = UART_STATUS_SUCCESS;
 8002a46:	2300      	movs	r3, #0
 8002a48:	75fb      	strb	r3, [r7, #23]
 8002a4a:	e001      	b.n	8002a50 <UART_StartReceiveIRQ+0xa0>
      }
      else
      {
        ret_stat = UART_STATUS_BUFFER_INVALID;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	75fb      	strb	r3, [r7, #23]
      }
    }
  }
  return ret_stat;
 8002a50:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3718      	adds	r7, #24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop

08002a5c <UART_lTransmitHandler>:
 *  * param[in]  handle UART APP handle pointer of type UART_t*
 *
 *  * return void
 */
void UART_lTransmitHandler(const UART_t * const handle)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	60fb      	str	r3, [r7, #12]

  if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	68da      	ldr	r2, [r3, #12]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d240      	bcs.n	8002af8 <UART_lTransmitHandler+0x9c>
  {
    if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d027      	beq.n	8002ad2 <UART_lTransmitHandler+0x76>
    {
      /*When Transmit FIFO is enabled*/
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
 8002a82:	e01a      	b.n	8002aba <UART_lTransmitHandler+0x5e>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	68da      	ldr	r2, [r3, #12]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d212      	bcs.n	8002ab6 <UART_lTransmitHandler+0x5a>
        {
          /*Load the FIFO byte by byte till either FIFO is full or all data is loaded*/
          XMC_UART_CH_Transmit(handle->channel,(uint16_t)ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6819      	ldr	r1, [r3, #0]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	4413      	add	r3, r2
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	4608      	mov	r0, r1
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	f7ff f915 	bl	8001cd4 <XMC_UART_CH_Transmit>
          (ptr_runtime->tx_data_index)++;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	1c5a      	adds	r2, r3, #1
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	60da      	str	r2, [r3, #12]
 8002ab4:	e001      	b.n	8002aba <UART_lTransmitHandler+0x5e>
        }
        else
        {
          break;
 8002ab6:	bf00      	nop
 8002ab8:	e053      	b.n	8002b62 <UART_lTransmitHandler+0x106>
  {
    if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
    {
      /*When Transmit FIFO is enabled*/
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7ff fe60 	bl	8002784 <XMC_USIC_CH_TXFIFO_IsFull>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	f083 0301 	eor.w	r3, r3, #1
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1d9      	bne.n	8002a84 <UART_lTransmitHandler+0x28>
 8002ad0:	e047      	b.n	8002b62 <UART_lTransmitHandler+0x106>
      }
    }
    else
    {
      /*When Transmit FIFO is disabled*/
      XMC_UART_CH_Transmit(handle->channel,(uint16_t)ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6819      	ldr	r1, [r3, #0]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	4413      	add	r3, r2
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	4608      	mov	r0, r1
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	f7ff f8f4 	bl	8001cd4 <XMC_UART_CH_Transmit>
      (ptr_runtime->tx_data_index)++;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	1c5a      	adds	r2, r3, #1
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	60da      	str	r2, [r3, #12]
 8002af6:	e034      	b.n	8002b62 <UART_lTransmitHandler+0x106>
    }
  }
  else
  {
    if (XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel) == true)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7ff fe55 	bl	80027ac <XMC_USIC_CH_TXFIFO_IsEmpty>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d02c      	beq.n	8002b62 <UART_lTransmitHandler+0x106>
    {
      if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d007      	beq.n	8002b24 <UART_lTransmitHandler+0xc8>
      {
        /*Disable the transmit FIFO event*/
        XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002b1e:	f7ff fe0f 	bl	8002740 <XMC_USIC_CH_TXFIFO_DisableEvent>
 8002b22:	e006      	b.n	8002b32 <UART_lTransmitHandler+0xd6>
      }
      else
      {
        /*Disable the standard transmit event*/
        XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b2e:	f7ff fdc3 	bl	80026b8 <XMC_USIC_CH_DisableEvent>
      }

      /*Wait for the transmit buffer to be free to ensure that all data is transmitted*/
      while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8002b32:	bf00      	nop
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7ff fdcf 	bl	80026dc <XMC_USIC_CH_GetTransmitBufferStatus>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b80      	cmp	r3, #128	; 0x80
 8002b42:	d0f7      	beq.n	8002b34 <UART_lTransmitHandler+0xd8>
      {

      }
      /*All data is transmitted*/
      ptr_runtime->tx_busy = false;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2200      	movs	r2, #0
 8002b48:	761a      	strb	r2, [r3, #24]
      ptr_runtime->tx_data = NULL;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	601a      	str	r2, [r3, #0]

      if (handle->config->tx_cbhandler != NULL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d003      	beq.n	8002b62 <UART_lTransmitHandler+0x106>
      {
        /*Execute the callback function provided in the UART APP UI*/
        handle->config->tx_cbhandler();
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	4798      	blx	r3
      }
    }
  }
}
 8002b62:	3710      	adds	r7, #16
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <UART_lReceiveHandler>:
 * param[in]  handle UART APP handle pointer of type UART_t*
 *
 * return void
 */
void UART_lReceiveHandler(const UART_t * const handle)
{
 8002b68:	b590      	push	{r4, r7, lr}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	60fb      	str	r3, [r7, #12]

  if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d04e      	beq.n	8002c20 <UART_lReceiveHandler+0xb8>
  {
    /*When Receive FIFO is enabled*/
    while (XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == false)
 8002b82:	e032      	b.n	8002bea <UART_lReceiveHandler+0x82>
    {
      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	695a      	ldr	r2, [r3, #20]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d211      	bcs.n	8002bb4 <UART_lReceiveHandler+0x4c>
      {
        /*Read all the content of Receive FIFO */
        ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	685a      	ldr	r2, [r3, #4]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	18d4      	adds	r4, r2, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7ff f8be 	bl	8001d20 <XMC_UART_CH_GetReceivedData>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	7023      	strb	r3, [r4, #0]
        (ptr_runtime->rx_data_index)++;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	1c5a      	adds	r2, r3, #1
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	615a      	str	r2, [r3, #20]
      }

      if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	695a      	ldr	r2, [r3, #20]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d114      	bne.n	8002bea <UART_lReceiveHandler+0x82>
      {
        /*Reception complete*/
        ptr_runtime->rx_busy = false;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	765a      	strb	r2, [r3, #25]
        /*Disable both standard receive and alternative receive FIFO events*/
        XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8002bd0:	f7ff fe12 	bl	80027f8 <XMC_USIC_CH_RXFIFO_DisableEvent>
            (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
            (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));
        if (handle->config->rx_cbhandler != NULL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d004      	beq.n	8002be8 <UART_lReceiveHandler+0x80>
        {
          /*Execute the 'End of reception' callback function*/
          handle->config->rx_cbhandler();
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	4798      	blx	r3
        }
        break;
 8002be6:	e00b      	b.n	8002c00 <UART_lReceiveHandler+0x98>
 8002be8:	e00a      	b.n	8002c00 <UART_lReceiveHandler+0x98>
  UART_RUNTIME_t * ptr_runtime = handle->runtime;

  if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
  {
    /*When Receive FIFO is enabled*/
    while (XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == false)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7ff fe24 	bl	800283c <XMC_USIC_CH_RXFIFO_IsEmpty>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	f083 0301 	eor.w	r3, r3, #1
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d1c1      	bne.n	8002b84 <UART_lReceiveHandler+0x1c>
        }
        break;
      }
    }
    /*Set the trigger limit if data still to be received*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	695a      	ldr	r2, [r3, #20]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	691b      	ldr	r3, [r3, #16]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d23a      	bcs.n	8002c82 <UART_lReceiveHandler+0x11a>
    {
      UART_lReconfigureRxFIFO(handle,
          (uint32_t)(ptr_runtime->rx_data_count - ptr_runtime->rx_data_index));
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	691a      	ldr	r2, [r3, #16]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	695b      	ldr	r3, [r3, #20]
      }
    }
    /*Set the trigger limit if data still to be received*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
    {
      UART_lReconfigureRxFIFO(handle,
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	4619      	mov	r1, r3
 8002c1a:	f000 f835 	bl	8002c88 <UART_lReconfigureRxFIFO>
 8002c1e:	e030      	b.n	8002c82 <UART_lReceiveHandler+0x11a>
    }
  }
  else
  {
    /*When RxFIFO is disabled*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	695a      	ldr	r2, [r3, #20]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d211      	bcs.n	8002c50 <UART_lReceiveHandler+0xe8>
    {
      ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	685a      	ldr	r2, [r3, #4]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	695b      	ldr	r3, [r3, #20]
 8002c34:	18d4      	adds	r4, r2, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7ff f870 	bl	8001d20 <XMC_UART_CH_GetReceivedData>
 8002c40:	4603      	mov	r3, r0
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	7023      	strb	r3, [r4, #0]
      (ptr_runtime->rx_data_index)++;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	1c5a      	adds	r2, r3, #1
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	615a      	str	r2, [r3, #20]
    }

    if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	695a      	ldr	r2, [r3, #20]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d112      	bne.n	8002c82 <UART_lReceiveHandler+0x11a>
    {
      /*Reception complete*/
      ptr_runtime->rx_busy = false;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	765a      	strb	r2, [r3, #25]
      /*Disable both standard receive and alternative receive FIFO events*/
      XMC_USIC_CH_DisableEvent(handle->channel,
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8002c6c:	f7ff fd24 	bl	80026b8 <XMC_USIC_CH_DisableEvent>
          (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE | (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE));

      if (handle->config->rx_cbhandler != NULL)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d003      	beq.n	8002c82 <UART_lReceiveHandler+0x11a>
      {
        /*Execute the 'End of reception' callback function*/
        handle->config->rx_cbhandler();
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	4798      	blx	r3
      }
    }
  }
}
 8002c82:	3714      	adds	r7, #20
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd90      	pop	{r4, r7, pc}

08002c88 <UART_lReconfigureRxFIFO>:
 * param[in] uint8_t  number of bytes to be received.
 *
 * return void.
 */
static void UART_lReconfigureRxFIFO(const UART_t * const handle, uint32_t data_size)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  uint32_t fifo_size;
  uint32_t ret_limit_val = 0U;
 8002c92:	2300      	movs	r3, #0
 8002c94:	60fb      	str	r3, [r7, #12]

  /*Get FIFO size in bytes*/
  fifo_size = (uint32_t)(0x01UL << (uint8_t)(handle->config->rx_fifo_size));
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	4093      	lsls	r3, r2
 8002ca4:	60bb      	str	r3, [r7, #8]
  /*If data size is more than FIFO size, configure the limit to the FIFO size*/
  if (data_size < fifo_size)
 8002ca6:	683a      	ldr	r2, [r7, #0]
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d203      	bcs.n	8002cb6 <UART_lReconfigureRxFIFO+0x2e>
  {
    ret_limit_val = (uint32_t)(data_size - 1U);
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	60fb      	str	r3, [r7, #12]
 8002cb4:	e002      	b.n	8002cbc <UART_lReconfigureRxFIFO+0x34>
  }
  else
  {
    ret_limit_val = (uint32_t)(fifo_size - 1U);
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	3b01      	subs	r3, #1
 8002cba:	60fb      	str	r3, [r7, #12]
  }
  /*Set the limit value*/
  XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel,
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681a      	ldr	r2, [r3, #0]
        handle->config->rx_fifo_size, ret_limit_val);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
  else
  {
    ret_limit_val = (uint32_t)(fifo_size - 1U);
  }
  /*Set the limit value*/
  XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel,
 8002cc4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002cc8:	4610      	mov	r0, r2
 8002cca:	4619      	mov	r1, r3
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	f7ff f93d 	bl	8001f4c <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>
        handle->config->rx_fifo_size, ret_limit_val);
}
 8002cd2:	3710      	adds	r7, #16
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cdc:	4b04      	ldr	r3, [pc, #16]	; (8002cf0 <__NVIC_GetPriorityGrouping+0x18>)
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ce4:	0a1b      	lsrs	r3, r3, #8
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr
 8002cf0:	e000ed00 	.word	0xe000ed00

08002cf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	db0b      	blt.n	8002d1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002d06:	4908      	ldr	r1, [pc, #32]	; (8002d28 <__NVIC_EnableIRQ+0x34>)
 8002d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0c:	095b      	lsrs	r3, r3, #5
 8002d0e:	79fa      	ldrb	r2, [r7, #7]
 8002d10:	f002 021f 	and.w	r2, r2, #31
 8002d14:	2001      	movs	r0, #1
 8002d16:	fa00 f202 	lsl.w	r2, r0, r2
 8002d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr
 8002d28:	e000e100 	.word	0xe000e100

08002d2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	4603      	mov	r3, r0
 8002d34:	6039      	str	r1, [r7, #0]
 8002d36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	db0a      	blt.n	8002d56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d40:	490d      	ldr	r1, [pc, #52]	; (8002d78 <__NVIC_SetPriority+0x4c>)
 8002d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d46:	683a      	ldr	r2, [r7, #0]
 8002d48:	b2d2      	uxtb	r2, r2
 8002d4a:	0092      	lsls	r2, r2, #2
 8002d4c:	b2d2      	uxtb	r2, r2
 8002d4e:	440b      	add	r3, r1
 8002d50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8002d54:	e00a      	b.n	8002d6c <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d56:	4909      	ldr	r1, [pc, #36]	; (8002d7c <__NVIC_SetPriority+0x50>)
 8002d58:	79fb      	ldrb	r3, [r7, #7]
 8002d5a:	f003 030f 	and.w	r3, r3, #15
 8002d5e:	3b04      	subs	r3, #4
 8002d60:	683a      	ldr	r2, [r7, #0]
 8002d62:	b2d2      	uxtb	r2, r2
 8002d64:	0092      	lsls	r2, r2, #2
 8002d66:	b2d2      	uxtb	r2, r2
 8002d68:	440b      	add	r3, r1
 8002d6a:	761a      	strb	r2, [r3, #24]
  }
}
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	e000e100 	.word	0xe000e100
 8002d7c:	e000ed00 	.word	0xe000ed00

08002d80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b089      	sub	sp, #36	; 0x24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f003 0307 	and.w	r3, r3, #7
 8002d92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	f1c3 0307 	rsb	r3, r3, #7
 8002d9a:	2b06      	cmp	r3, #6
 8002d9c:	bf28      	it	cs
 8002d9e:	2306      	movcs	r3, #6
 8002da0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	3306      	adds	r3, #6
 8002da6:	2b06      	cmp	r3, #6
 8002da8:	d902      	bls.n	8002db0 <NVIC_EncodePriority+0x30>
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	3b01      	subs	r3, #1
 8002dae:	e000      	b.n	8002db2 <NVIC_EncodePriority+0x32>
 8002db0:	2300      	movs	r3, #0
 8002db2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	2201      	movs	r2, #1
 8002db8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbc:	1e5a      	subs	r2, r3, #1
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	401a      	ands	r2, r3
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	2101      	movs	r1, #1
 8002dca:	fa01 f303 	lsl.w	r3, r1, r3
 8002dce:	1e59      	subs	r1, r3, #1
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8002dd4:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3724      	adds	r7, #36	; 0x24
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop

08002de4 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	460b      	mov	r3, r1
 8002dee:	70fb      	strb	r3, [r7, #3]
 8002df0:	4613      	mov	r3, r2
 8002df2:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8002df4:	78f8      	ldrb	r0, [r7, #3]
 8002df6:	78fb      	ldrb	r3, [r7, #3]
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	3306      	adds	r3, #6
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4413      	add	r3, r2
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f023 0207 	bic.w	r2, r3, #7
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 8002e06:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8002e08:	431a      	orrs	r2, r3
 8002e0a:	6879      	ldr	r1, [r7, #4]
 8002e0c:	1d83      	adds	r3, r0, #6
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	440b      	add	r3, r1
 8002e12:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop

08002e20 <XMC_UART_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Start(XMC_USIC_CH_t *const channel)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  channel->CCR = (uint32_t)(((channel->CCR) & (~USIC_CH_CCR_MODE_Msk)) | (uint32_t)XMC_USIC_CH_OPERATING_MODE_UART);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2c:	f023 030f 	bic.w	r3, r3, #15
 8002e30:	f043 0202 	orr.w	r2, r3, #2
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop

08002e44 <UART_0_init>:
/**********************************************************************************************************************
 * API IMPLEMENTATION
 **********************************************************************************************************************/
/*Channel initialization function*/
UART_STATUS_t UART_0_init()
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
  UART_STATUS_t status = UART_STATUS_SUCCESS;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	71fb      	strb	r3, [r7, #7]
  /*Configure Receive pin*/
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT0_BASE, 0U, &UART_0_rx_pin_config);
 8002e4e:	482d      	ldr	r0, [pc, #180]	; (8002f04 <UART_0_init+0xc0>)
 8002e50:	2100      	movs	r1, #0
 8002e52:	4a2d      	ldr	r2, [pc, #180]	; (8002f08 <UART_0_init+0xc4>)
 8002e54:	f7fd faa6 	bl	80003a4 <XMC_GPIO_Init>
  /* Initialize USIC channel in UART mode*/
  XMC_UART_CH_Init(XMC_UART1_CH1, &UART_0_channel_config);
 8002e58:	482c      	ldr	r0, [pc, #176]	; (8002f0c <UART_0_init+0xc8>)
 8002e5a:	492d      	ldr	r1, [pc, #180]	; (8002f10 <UART_0_init+0xcc>)
 8002e5c:	f7fe fee4 	bl	8001c28 <XMC_UART_CH_Init>
  /*Set input source path*/
  XMC_USIC_CH_SetInputSource(XMC_UART1_CH1, XMC_USIC_CH_INPUT_DX0, 3U);
 8002e60:	482a      	ldr	r0, [pc, #168]	; (8002f0c <UART_0_init+0xc8>)
 8002e62:	2100      	movs	r1, #0
 8002e64:	2203      	movs	r2, #3
 8002e66:	f7ff ffbd 	bl	8002de4 <XMC_USIC_CH_SetInputSource>
  /*Configure transmit FIFO*/
  XMC_USIC_CH_TXFIFO_Configure(XMC_UART1_CH1,
 8002e6a:	4828      	ldr	r0, [pc, #160]	; (8002f0c <UART_0_init+0xc8>)
 8002e6c:	2120      	movs	r1, #32
 8002e6e:	2205      	movs	r2, #5
 8002e70:	2301      	movs	r3, #1
 8002e72:	f7ff f819 	bl	8001ea8 <XMC_USIC_CH_TXFIFO_Configure>
        32U,
        XMC_USIC_CH_FIFO_SIZE_32WORDS,
        1U);
  /*Configure receive FIFO*/
  XMC_USIC_CH_RXFIFO_Configure(XMC_UART1_CH1,
 8002e76:	4825      	ldr	r0, [pc, #148]	; (8002f0c <UART_0_init+0xc8>)
 8002e78:	2100      	movs	r1, #0
 8002e7a:	2205      	movs	r2, #5
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	f7ff f83b 	bl	8001ef8 <XMC_USIC_CH_RXFIFO_Configure>
        0U,
        XMC_USIC_CH_FIFO_SIZE_32WORDS,
        0U);
  /* Start UART */
  XMC_UART_CH_Start(XMC_UART1_CH1);
 8002e82:	4822      	ldr	r0, [pc, #136]	; (8002f0c <UART_0_init+0xc8>)
 8002e84:	f7ff ffcc 	bl	8002e20 <XMC_UART_CH_Start>

  /* Initialize UART TX pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT0_BASE, 1U, &UART_0_tx_pin_config);
 8002e88:	481e      	ldr	r0, [pc, #120]	; (8002f04 <UART_0_init+0xc0>)
 8002e8a:	2101      	movs	r1, #1
 8002e8c:	4a21      	ldr	r2, [pc, #132]	; (8002f14 <UART_0_init+0xd0>)
 8002e8e:	f7fd fa89 	bl	80003a4 <XMC_GPIO_Init>

  /*Set service request for UART protocol events*/
  XMC_USIC_CH_SetInterruptNodePointer(XMC_UART1_CH1, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
 8002e92:	481e      	ldr	r0, [pc, #120]	; (8002f0c <UART_0_init+0xc8>)
 8002e94:	2110      	movs	r1, #16
 8002e96:	2202      	movs	r2, #2
 8002e98:	f7ff f87a 	bl	8001f90 <XMC_USIC_CH_SetInterruptNodePointer>
     2U);
  /*Set service request for tx FIFO transmit interrupt*/
  XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_UART1_CH1, XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
 8002e9c:	481b      	ldr	r0, [pc, #108]	; (8002f0c <UART_0_init+0xc8>)
 8002e9e:	2110      	movs	r1, #16
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	f7ff f891 	bl	8001fc8 <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>
      1U);
  /*Set service request for rx FIFO receive interrupt*/
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_UART1_CH1, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
 8002ea6:	4819      	ldr	r0, [pc, #100]	; (8002f0c <UART_0_init+0xc8>)
 8002ea8:	2110      	movs	r1, #16
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f7ff f8aa 	bl	8002004 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
       0x0U);
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_UART1_CH1, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE,
 8002eb0:	4816      	ldr	r0, [pc, #88]	; (8002f0c <UART_0_init+0xc8>)
 8002eb2:	2113      	movs	r1, #19
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f7ff f8a5 	bl	8002004 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
       0x0U);
  /*Set priority and enable NVIC node for transmit interrupt*/
  NVIC_SetPriority((IRQn_Type)91, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 8002eba:	f7ff ff0d 	bl	8002cd8 <__NVIC_GetPriorityGrouping>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	213f      	movs	r1, #63	; 0x3f
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f7ff ff5b 	bl	8002d80 <NVIC_EncodePriority>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	205b      	movs	r0, #91	; 0x5b
 8002ece:	4619      	mov	r1, r3
 8002ed0:	f7ff ff2c 	bl	8002d2c <__NVIC_SetPriority>
                        63U, 0U));
  NVIC_EnableIRQ((IRQn_Type)91);
 8002ed4:	205b      	movs	r0, #91	; 0x5b
 8002ed6:	f7ff ff0d 	bl	8002cf4 <__NVIC_EnableIRQ>
  /*Set priority and enable NVIC node for receive interrupt*/
  NVIC_SetPriority((IRQn_Type)90, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 8002eda:	f7ff fefd 	bl	8002cd8 <__NVIC_GetPriorityGrouping>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	213f      	movs	r1, #63	; 0x3f
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f7ff ff4b 	bl	8002d80 <NVIC_EncodePriority>
 8002eea:	4603      	mov	r3, r0
 8002eec:	205a      	movs	r0, #90	; 0x5a
 8002eee:	4619      	mov	r1, r3
 8002ef0:	f7ff ff1c 	bl	8002d2c <__NVIC_SetPriority>
                      63U, 0U));
  NVIC_EnableIRQ((IRQn_Type)90);
 8002ef4:	205a      	movs	r0, #90	; 0x5a
 8002ef6:	f7ff fefd 	bl	8002cf4 <__NVIC_EnableIRQ>
  return status;
 8002efa:	79fb      	ldrb	r3, [r7, #7]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3708      	adds	r7, #8
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	48028000 	.word	0x48028000
 8002f08:	08009d14 	.word	0x08009d14
 8002f0c:	48020200 	.word	0x48020200
 8002f10:	08009cc0 	.word	0x08009cc0
 8002f14:	08009ccc 	.word	0x08009ccc

08002f18 <USIC1_1_IRQHandler>:
/*Interrupt handlers*/
/*Transmit ISR*/
void UART_0_TX_HANDLER()
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
  UART_lTransmitHandler(&UART_0);
 8002f1c:	4801      	ldr	r0, [pc, #4]	; (8002f24 <USIC1_1_IRQHandler+0xc>)
 8002f1e:	f7ff fd9d 	bl	8002a5c <UART_lTransmitHandler>
}
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	1fffcc50 	.word	0x1fffcc50

08002f28 <USIC1_0_IRQHandler>:

/*Receive ISR*/
void UART_0_RX_HANDLER()
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
  UART_lReceiveHandler(&UART_0);
 8002f2c:	4801      	ldr	r0, [pc, #4]	; (8002f34 <USIC1_0_IRQHandler+0xc>)
 8002f2e:	f7ff fe1b 	bl	8002b68 <UART_lReceiveHandler>
}
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	1fffcc50 	.word	0x1fffcc50

08002f38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f3c:	4b04      	ldr	r3, [pc, #16]	; (8002f50 <__NVIC_GetPriorityGrouping+0x18>)
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f44:	0a1b      	lsrs	r3, r3, #8
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr
 8002f50:	e000ed00 	.word	0xe000ed00

08002f54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	6039      	str	r1, [r7, #0]
 8002f5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	db0a      	blt.n	8002f7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f68:	490d      	ldr	r1, [pc, #52]	; (8002fa0 <__NVIC_SetPriority+0x4c>)
 8002f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	b2d2      	uxtb	r2, r2
 8002f72:	0092      	lsls	r2, r2, #2
 8002f74:	b2d2      	uxtb	r2, r2
 8002f76:	440b      	add	r3, r1
 8002f78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8002f7c:	e00a      	b.n	8002f94 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f7e:	4909      	ldr	r1, [pc, #36]	; (8002fa4 <__NVIC_SetPriority+0x50>)
 8002f80:	79fb      	ldrb	r3, [r7, #7]
 8002f82:	f003 030f 	and.w	r3, r3, #15
 8002f86:	3b04      	subs	r3, #4
 8002f88:	683a      	ldr	r2, [r7, #0]
 8002f8a:	b2d2      	uxtb	r2, r2
 8002f8c:	0092      	lsls	r2, r2, #2
 8002f8e:	b2d2      	uxtb	r2, r2
 8002f90:	440b      	add	r3, r1
 8002f92:	761a      	strb	r2, [r3, #24]
  }
}
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	e000e100 	.word	0xe000e100
 8002fa4:	e000ed00 	.word	0xe000ed00

08002fa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b089      	sub	sp, #36	; 0x24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f003 0307 	and.w	r3, r3, #7
 8002fba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	f1c3 0307 	rsb	r3, r3, #7
 8002fc2:	2b06      	cmp	r3, #6
 8002fc4:	bf28      	it	cs
 8002fc6:	2306      	movcs	r3, #6
 8002fc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	3306      	adds	r3, #6
 8002fce:	2b06      	cmp	r3, #6
 8002fd0:	d902      	bls.n	8002fd8 <NVIC_EncodePriority+0x30>
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	e000      	b.n	8002fda <NVIC_EncodePriority+0x32>
 8002fd8:	2300      	movs	r3, #0
 8002fda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	1e5a      	subs	r2, r3, #1
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	401a      	ands	r2, r3
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	2101      	movs	r1, #1
 8002ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff6:	1e59      	subs	r1, r3, #1
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8002ffc:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3724      	adds	r7, #36	; 0x24
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop

0800300c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	3b01      	subs	r3, #1
 8003018:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800301c:	d301      	bcc.n	8003022 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800301e:	2301      	movs	r3, #1
 8003020:	e00f      	b.n	8003042 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003022:	4a0a      	ldr	r2, [pc, #40]	; (800304c <SysTick_Config+0x40>)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3b01      	subs	r3, #1
 8003028:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800302a:	f04f 30ff 	mov.w	r0, #4294967295
 800302e:	213f      	movs	r1, #63	; 0x3f
 8003030:	f7ff ff90 	bl	8002f54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003034:	4b05      	ldr	r3, [pc, #20]	; (800304c <SysTick_Config+0x40>)
 8003036:	2200      	movs	r2, #0
 8003038:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800303a:	4b04      	ldr	r3, [pc, #16]	; (800304c <SysTick_Config+0x40>)
 800303c:	2207      	movs	r2, #7
 800303e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3708      	adds	r7, #8
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	e000e010 	.word	0xe000e010

08003050 <SYSTIMER_lInsertTimerList>:
**********************************************************************************************************************/
/*
 * This function is called to insert a timer into the timer list.
 */
static void SYSTIMER_lInsertTimerList(uint32_t tbl_index)
{
 8003050:	b490      	push	{r4, r7}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  SYSTIMER_OBJECT_t *object_ptr;
  int32_t delta_ticks;
  int32_t timer_count;
  bool found_flag = false;
 8003058:	2300      	movs	r3, #0
 800305a:	73fb      	strb	r3, [r7, #15]
   /* Get timer time */
  timer_count = (int32_t)g_timer_tbl[tbl_index].count;
 800305c:	496b      	ldr	r1, [pc, #428]	; (800320c <SYSTIMER_lInsertTimerList+0x1bc>)
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	4613      	mov	r3, r2
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	4413      	add	r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	440b      	add	r3, r1
 800306a:	3318      	adds	r3, #24
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	60bb      	str	r3, [r7, #8]
  /* Check if Timer list is NULL */
  if (NULL == g_timer_list)
 8003070:	4b67      	ldr	r3, [pc, #412]	; (8003210 <SYSTIMER_lInsertTimerList+0x1c0>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d109      	bne.n	800308c <SYSTIMER_lInsertTimerList+0x3c>
  {
    /* Set this as first Timer */
    g_timer_list = &g_timer_tbl[tbl_index];
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	4613      	mov	r3, r2
 800307c:	00db      	lsls	r3, r3, #3
 800307e:	4413      	add	r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	4a62      	ldr	r2, [pc, #392]	; (800320c <SYSTIMER_lInsertTimerList+0x1bc>)
 8003084:	4413      	add	r3, r2
 8003086:	4a62      	ldr	r2, [pc, #392]	; (8003210 <SYSTIMER_lInsertTimerList+0x1c0>)
 8003088:	6013      	str	r3, [r2, #0]
 800308a:	e0bb      	b.n	8003204 <SYSTIMER_lInsertTimerList+0x1b4>
  }
  /* If not, find the correct place, and insert the specified timer */
  else
  {
    object_ptr = g_timer_list;
 800308c:	4b60      	ldr	r3, [pc, #384]	; (8003210 <SYSTIMER_lInsertTimerList+0x1c0>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	617b      	str	r3, [r7, #20]
    /* Get timer tick */
    delta_ticks = timer_count;
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	613b      	str	r3, [r7, #16]
    /* Find correct place for inserting the timer */
    while ((NULL != object_ptr) && (false == found_flag))
 8003096:	e0ab      	b.n	80031f0 <SYSTIMER_lInsertTimerList+0x1a0>
    {
      /* Get timer Count Difference */
      delta_ticks -= (int32_t)object_ptr->count;
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	461a      	mov	r2, r3
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	1a9b      	subs	r3, r3, r2
 80030a2:	613b      	str	r3, [r7, #16]
      /* Check for delta ticks < 0 */
      if (delta_ticks <= 0)
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	dc7a      	bgt.n	80031a0 <SYSTIMER_lInsertTimerList+0x150>
      {
        /* Check If head item */
        if (NULL != object_ptr->prev)
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d026      	beq.n	8003100 <SYSTIMER_lInsertTimerList+0xb0>
        {
          /* If Insert to list */
          object_ptr->prev->next = &g_timer_tbl[tbl_index];
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	6859      	ldr	r1, [r3, #4]
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	4613      	mov	r3, r2
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	4413      	add	r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	4a52      	ldr	r2, [pc, #328]	; (800320c <SYSTIMER_lInsertTimerList+0x1bc>)
 80030c2:	4413      	add	r3, r2
 80030c4:	600b      	str	r3, [r1, #0]
          g_timer_tbl[tbl_index].prev = object_ptr->prev;
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	6859      	ldr	r1, [r3, #4]
 80030ca:	4850      	ldr	r0, [pc, #320]	; (800320c <SYSTIMER_lInsertTimerList+0x1bc>)
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	4613      	mov	r3, r2
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	4413      	add	r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	4403      	add	r3, r0
 80030d8:	6059      	str	r1, [r3, #4]
          g_timer_tbl[tbl_index].next = object_ptr;
 80030da:	494c      	ldr	r1, [pc, #304]	; (800320c <SYSTIMER_lInsertTimerList+0x1bc>)
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	4613      	mov	r3, r2
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	4413      	add	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	440b      	add	r3, r1
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	601a      	str	r2, [r3, #0]
          object_ptr->prev = &g_timer_tbl[tbl_index];
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	4613      	mov	r3, r2
 80030f0:	00db      	lsls	r3, r3, #3
 80030f2:	4413      	add	r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	4a45      	ldr	r2, [pc, #276]	; (800320c <SYSTIMER_lInsertTimerList+0x1bc>)
 80030f8:	441a      	add	r2, r3
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	605a      	str	r2, [r3, #4]
 80030fe:	e01c      	b.n	800313a <SYSTIMER_lInsertTimerList+0xea>
        }
        else
        {
          /* Set Timer as first item */
          g_timer_tbl[tbl_index].next = g_timer_list;
 8003100:	4b43      	ldr	r3, [pc, #268]	; (8003210 <SYSTIMER_lInsertTimerList+0x1c0>)
 8003102:	6819      	ldr	r1, [r3, #0]
 8003104:	4841      	ldr	r0, [pc, #260]	; (800320c <SYSTIMER_lInsertTimerList+0x1bc>)
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	4613      	mov	r3, r2
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	4413      	add	r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	4403      	add	r3, r0
 8003112:	6019      	str	r1, [r3, #0]
          g_timer_list->prev = &g_timer_tbl[tbl_index];
 8003114:	4b3e      	ldr	r3, [pc, #248]	; (8003210 <SYSTIMER_lInsertTimerList+0x1c0>)
 8003116:	6819      	ldr	r1, [r3, #0]
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	4613      	mov	r3, r2
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	4413      	add	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	4a3a      	ldr	r2, [pc, #232]	; (800320c <SYSTIMER_lInsertTimerList+0x1bc>)
 8003124:	4413      	add	r3, r2
 8003126:	604b      	str	r3, [r1, #4]
          g_timer_list = &g_timer_tbl[tbl_index];
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	4613      	mov	r3, r2
 800312c:	00db      	lsls	r3, r3, #3
 800312e:	4413      	add	r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4a36      	ldr	r2, [pc, #216]	; (800320c <SYSTIMER_lInsertTimerList+0x1bc>)
 8003134:	4413      	add	r3, r2
 8003136:	4a36      	ldr	r2, [pc, #216]	; (8003210 <SYSTIMER_lInsertTimerList+0x1c0>)
 8003138:	6013      	str	r3, [r2, #0]
        }
        g_timer_tbl[tbl_index].count = g_timer_tbl[tbl_index].next->count + (uint32_t)delta_ticks;
 800313a:	4934      	ldr	r1, [pc, #208]	; (800320c <SYSTIMER_lInsertTimerList+0x1bc>)
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	4613      	mov	r3, r2
 8003140:	00db      	lsls	r3, r3, #3
 8003142:	4413      	add	r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	440b      	add	r3, r1
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	699a      	ldr	r2, [r3, #24]
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	18d1      	adds	r1, r2, r3
 8003150:	482e      	ldr	r0, [pc, #184]	; (800320c <SYSTIMER_lInsertTimerList+0x1bc>)
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	4613      	mov	r3, r2
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	4413      	add	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4403      	add	r3, r0
 800315e:	3318      	adds	r3, #24
 8003160:	6019      	str	r1, [r3, #0]
        g_timer_tbl[tbl_index].next->count  -= g_timer_tbl[tbl_index].count;
 8003162:	492a      	ldr	r1, [pc, #168]	; (800320c <SYSTIMER_lInsertTimerList+0x1bc>)
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	4613      	mov	r3, r2
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	4413      	add	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	440b      	add	r3, r1
 8003170:	6819      	ldr	r1, [r3, #0]
 8003172:	4826      	ldr	r0, [pc, #152]	; (800320c <SYSTIMER_lInsertTimerList+0x1bc>)
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	4613      	mov	r3, r2
 8003178:	00db      	lsls	r3, r3, #3
 800317a:	4413      	add	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	4403      	add	r3, r0
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	6998      	ldr	r0, [r3, #24]
 8003184:	4c21      	ldr	r4, [pc, #132]	; (800320c <SYSTIMER_lInsertTimerList+0x1bc>)
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	4613      	mov	r3, r2
 800318a:	00db      	lsls	r3, r3, #3
 800318c:	4413      	add	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	4423      	add	r3, r4
 8003192:	3318      	adds	r3, #24
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	1ac3      	subs	r3, r0, r3
 8003198:	618b      	str	r3, [r1, #24]
        found_flag = true;
 800319a:	2301      	movs	r3, #1
 800319c:	73fb      	strb	r3, [r7, #15]
 800319e:	e024      	b.n	80031ea <SYSTIMER_lInsertTimerList+0x19a>
      }
      /* Check for last item in list */
      else
      {
        if ((delta_ticks > 0) && (NULL == object_ptr->next))
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	dd21      	ble.n	80031ea <SYSTIMER_lInsertTimerList+0x19a>
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d11d      	bne.n	80031ea <SYSTIMER_lInsertTimerList+0x19a>
        {
          /* Yes, insert into */
          g_timer_tbl[tbl_index].prev = object_ptr;
 80031ae:	4917      	ldr	r1, [pc, #92]	; (800320c <SYSTIMER_lInsertTimerList+0x1bc>)
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	4613      	mov	r3, r2
 80031b4:	00db      	lsls	r3, r3, #3
 80031b6:	4413      	add	r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	440b      	add	r3, r1
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	605a      	str	r2, [r3, #4]
          object_ptr->next = &g_timer_tbl[tbl_index];
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	4613      	mov	r3, r2
 80031c4:	00db      	lsls	r3, r3, #3
 80031c6:	4413      	add	r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	4a10      	ldr	r2, [pc, #64]	; (800320c <SYSTIMER_lInsertTimerList+0x1bc>)
 80031cc:	441a      	add	r2, r3
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	601a      	str	r2, [r3, #0]
          g_timer_tbl[tbl_index].count = (uint32_t)delta_ticks;
 80031d2:	6939      	ldr	r1, [r7, #16]
 80031d4:	480d      	ldr	r0, [pc, #52]	; (800320c <SYSTIMER_lInsertTimerList+0x1bc>)
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	4613      	mov	r3, r2
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	4413      	add	r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	4403      	add	r3, r0
 80031e2:	3318      	adds	r3, #24
 80031e4:	6019      	str	r1, [r3, #0]
          found_flag = true;
 80031e6:	2301      	movs	r3, #1
 80031e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      /* Get the next item in timer list */
      object_ptr = object_ptr->next;
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	617b      	str	r3, [r7, #20]
  {
    object_ptr = g_timer_list;
    /* Get timer tick */
    delta_ticks = timer_count;
    /* Find correct place for inserting the timer */
    while ((NULL != object_ptr) && (false == found_flag))
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d006      	beq.n	8003204 <SYSTIMER_lInsertTimerList+0x1b4>
 80031f6:	7bfb      	ldrb	r3, [r7, #15]
 80031f8:	f083 0301 	eor.w	r3, r3, #1
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f47f af4a 	bne.w	8003098 <SYSTIMER_lInsertTimerList+0x48>
      }
      /* Get the next item in timer list */
      object_ptr = object_ptr->next;
    }
  }
}
 8003204:	3718      	adds	r7, #24
 8003206:	46bd      	mov	sp, r7
 8003208:	bc90      	pop	{r4, r7}
 800320a:	4770      	bx	lr
 800320c:	1fffd7c8 	.word	0x1fffd7c8
 8003210:	1fffd790 	.word	0x1fffd790

08003214 <SYSTIMER_lRemoveTimerList>:

/*
 * This function is called to remove a timer from the timer list. 
 */
static void SYSTIMER_lRemoveTimerList(uint32_t tbl_index)
{
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  SYSTIMER_OBJECT_t *object_ptr;
  object_ptr = &g_timer_tbl[tbl_index];
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	4613      	mov	r3, r2
 8003220:	00db      	lsls	r3, r3, #3
 8003222:	4413      	add	r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	4a29      	ldr	r2, [pc, #164]	; (80032cc <SYSTIMER_lRemoveTimerList+0xb8>)
 8003228:	4413      	add	r3, r2
 800322a:	60fb      	str	r3, [r7, #12]
  /* Check whether only one timer available */
  if ((NULL == object_ptr->prev) && (NULL == object_ptr->next ))
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d107      	bne.n	8003244 <SYSTIMER_lRemoveTimerList+0x30>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d103      	bne.n	8003244 <SYSTIMER_lRemoveTimerList+0x30>
  {
    /* set timer list as NULL */ 
    g_timer_list = NULL;                  
 800323c:	4b24      	ldr	r3, [pc, #144]	; (80032d0 <SYSTIMER_lRemoveTimerList+0xbc>)
 800323e:	2200      	movs	r2, #0
 8003240:	601a      	str	r2, [r3, #0]
 8003242:	e03d      	b.n	80032c0 <SYSTIMER_lRemoveTimerList+0xac>
  }
  /* Check if the first item in timer list */
  else if (NULL == object_ptr->prev)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d114      	bne.n	8003276 <SYSTIMER_lRemoveTimerList+0x62>
  {
    /* Remove timer from list, and reset timer list */
    g_timer_list  = object_ptr->next;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a1f      	ldr	r2, [pc, #124]	; (80032d0 <SYSTIMER_lRemoveTimerList+0xbc>)
 8003252:	6013      	str	r3, [r2, #0]
    g_timer_list->prev = NULL;
 8003254:	4b1e      	ldr	r3, [pc, #120]	; (80032d0 <SYSTIMER_lRemoveTimerList+0xbc>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2200      	movs	r2, #0
 800325a:	605a      	str	r2, [r3, #4]
    g_timer_list->count += object_ptr->count;
 800325c:	4b1c      	ldr	r3, [pc, #112]	; (80032d0 <SYSTIMER_lRemoveTimerList+0xbc>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a1b      	ldr	r2, [pc, #108]	; (80032d0 <SYSTIMER_lRemoveTimerList+0xbc>)
 8003262:	6812      	ldr	r2, [r2, #0]
 8003264:	6991      	ldr	r1, [r2, #24]
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	6992      	ldr	r2, [r2, #24]
 800326a:	440a      	add	r2, r1
 800326c:	619a      	str	r2, [r3, #24]
    object_ptr->next    = NULL;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	601a      	str	r2, [r3, #0]
 8003274:	e024      	b.n	80032c0 <SYSTIMER_lRemoveTimerList+0xac>
  }
  /* Check if the last item in timer list */
  else if (NULL == object_ptr->next)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d107      	bne.n	800328e <SYSTIMER_lRemoveTimerList+0x7a>
  {
    /* Remove timer from list */
    object_ptr->prev->next = NULL;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	601a      	str	r2, [r3, #0]
    object_ptr->prev = NULL;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	605a      	str	r2, [r3, #4]
 800328c:	e018      	b.n	80032c0 <SYSTIMER_lRemoveTimerList+0xac>
  }
  else                       
  {
    /* Remove timer from list */
    object_ptr->prev->next  =  object_ptr->next;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	6812      	ldr	r2, [r2, #0]
 8003296:	601a      	str	r2, [r3, #0]
    object_ptr->next->prev  =  object_ptr->prev;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	6852      	ldr	r2, [r2, #4]
 80032a0:	605a      	str	r2, [r3, #4]
    object_ptr->next->count += object_ptr->count;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	6812      	ldr	r2, [r2, #0]
 80032aa:	6991      	ldr	r1, [r2, #24]
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	6992      	ldr	r2, [r2, #24]
 80032b0:	440a      	add	r2, r1
 80032b2:	619a      	str	r2, [r3, #24]
    object_ptr->next = NULL;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	601a      	str	r2, [r3, #0]
    object_ptr->prev = NULL;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	605a      	str	r2, [r3, #4]
  }
}
 80032c0:	3714      	adds	r7, #20
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	1fffd7c8 	.word	0x1fffd7c8
 80032d0:	1fffd790 	.word	0x1fffd790

080032d4 <SYSTIMER_lTimerHandler>:

/*
 * Handler function called from SysTick event handler.
 */
static void SYSTIMER_lTimerHandler(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
  SYSTIMER_OBJECT_t *object_ptr;
  /* Get first item of timer list */
  object_ptr = g_timer_list;
 80032da:	4b2f      	ldr	r3, [pc, #188]	; (8003398 <SYSTIMER_lTimerHandler+0xc4>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	607b      	str	r3, [r7, #4]
  while ((NULL != object_ptr) && (0U == object_ptr->count))
 80032e0:	e050      	b.n	8003384 <SYSTIMER_lTimerHandler+0xb0>
  {
    if (true == object_ptr->delete_swtmr)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d013      	beq.n	8003314 <SYSTIMER_lTimerHandler+0x40>
    {
      /* Yes, remove this timer from timer list */
      SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	695b      	ldr	r3, [r3, #20]
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7ff ff8f 	bl	8003214 <SYSTIMER_lRemoveTimerList>
      /* Set timer status as SYSTIMER_STATE_NOT_INITIALIZED */
      object_ptr->state = SYSTIMER_STATE_NOT_INITIALIZED;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	735a      	strb	r2, [r3, #13]
      /* Release resource which are hold by this timer */
      g_timer_tracker &= ~(1U << object_ptr->id);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	695b      	ldr	r3, [r3, #20]
 8003300:	461a      	mov	r2, r3
 8003302:	2301      	movs	r3, #1
 8003304:	4093      	lsls	r3, r2
 8003306:	43da      	mvns	r2, r3
 8003308:	4b24      	ldr	r3, [pc, #144]	; (800339c <SYSTIMER_lTimerHandler+0xc8>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4013      	ands	r3, r2
 800330e:	4a23      	ldr	r2, [pc, #140]	; (800339c <SYSTIMER_lTimerHandler+0xc8>)
 8003310:	6013      	str	r3, [r2, #0]
 8003312:	e034      	b.n	800337e <SYSTIMER_lTimerHandler+0xaa>
    }
    /* Check whether timer is a one shot timer */
    else if (SYSTIMER_MODE_ONE_SHOT == object_ptr->mode)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	7b1b      	ldrb	r3, [r3, #12]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d112      	bne.n	8003342 <SYSTIMER_lTimerHandler+0x6e>
    {
      if (SYSTIMER_STATE_RUNNING == object_ptr->state)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	7b5b      	ldrb	r3, [r3, #13]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d12c      	bne.n	800337e <SYSTIMER_lTimerHandler+0xaa>
      {
        /* Yes, remove this timer from timer list */
        SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	695b      	ldr	r3, [r3, #20]
 8003328:	4618      	mov	r0, r3
 800332a:	f7ff ff73 	bl	8003214 <SYSTIMER_lRemoveTimerList>
        /* Set timer status as SYSTIMER_STATE_STOPPED */
        object_ptr->state = SYSTIMER_STATE_STOPPED;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2202      	movs	r2, #2
 8003332:	735a      	strb	r2, [r3, #13]
        /* Call timer callback function */
        (object_ptr->callback)(object_ptr->args);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	6912      	ldr	r2, [r2, #16]
 800333c:	4610      	mov	r0, r2
 800333e:	4798      	blx	r3
 8003340:	e01d      	b.n	800337e <SYSTIMER_lTimerHandler+0xaa>
      }
    }
    /* Check whether timer is periodic timer */
    else if (SYSTIMER_MODE_PERIODIC == object_ptr->mode)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	7b1b      	ldrb	r3, [r3, #12]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d118      	bne.n	800337c <SYSTIMER_lTimerHandler+0xa8>
    {
      if (SYSTIMER_STATE_RUNNING == object_ptr->state)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	7b5b      	ldrb	r3, [r3, #13]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d115      	bne.n	800337e <SYSTIMER_lTimerHandler+0xaa>
      {
        /* Yes, remove this timer from timer list */
        SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	4618      	mov	r0, r3
 8003358:	f7ff ff5c 	bl	8003214 <SYSTIMER_lRemoveTimerList>
        /* Reset timer tick */
        object_ptr->count = object_ptr->reload;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	69da      	ldr	r2, [r3, #28]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	619a      	str	r2, [r3, #24]
        /* Insert timer into timer list */
        SYSTIMER_lInsertTimerList((uint32_t)object_ptr->id);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	695b      	ldr	r3, [r3, #20]
 8003368:	4618      	mov	r0, r3
 800336a:	f7ff fe71 	bl	8003050 <SYSTIMER_lInsertTimerList>
        /* Call timer callback function */
        (object_ptr->callback)(object_ptr->args);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	6912      	ldr	r2, [r2, #16]
 8003376:	4610      	mov	r0, r2
 8003378:	4798      	blx	r3
 800337a:	e000      	b.n	800337e <SYSTIMER_lTimerHandler+0xaa>
      }
    }
    else
    {
      break;
 800337c:	e009      	b.n	8003392 <SYSTIMER_lTimerHandler+0xbe>
    }
    /* Get first item of timer list */
    object_ptr = g_timer_list;
 800337e:	4b06      	ldr	r3, [pc, #24]	; (8003398 <SYSTIMER_lTimerHandler+0xc4>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	607b      	str	r3, [r7, #4]
static void SYSTIMER_lTimerHandler(void)
{
  SYSTIMER_OBJECT_t *object_ptr;
  /* Get first item of timer list */
  object_ptr = g_timer_list;
  while ((NULL != object_ptr) && (0U == object_ptr->count))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d003      	beq.n	8003392 <SYSTIMER_lTimerHandler+0xbe>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d0a7      	beq.n	80032e2 <SYSTIMER_lTimerHandler+0xe>
      break;
    }
    /* Get first item of timer list */
    object_ptr = g_timer_list;
  }
}
 8003392:	3708      	adds	r7, #8
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	1fffd790 	.word	0x1fffd790
 800339c:	1fffd794 	.word	0x1fffd794

080033a0 <SysTick_Handler>:

/*
 *  SysTick Event Handler.
 */
void SysTick_Handler(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
  SYSTIMER_OBJECT_t *object_ptr;
  object_ptr = g_timer_list;
 80033a6:	4b0e      	ldr	r3, [pc, #56]	; (80033e0 <SysTick_Handler+0x40>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	607b      	str	r3, [r7, #4]
  g_systick_count++;
 80033ac:	4b0d      	ldr	r3, [pc, #52]	; (80033e4 <SysTick_Handler+0x44>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	3301      	adds	r3, #1
 80033b2:	4a0c      	ldr	r2, [pc, #48]	; (80033e4 <SysTick_Handler+0x44>)
 80033b4:	6013      	str	r3, [r2, #0]

  if (NULL != object_ptr)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00e      	beq.n	80033da <SysTick_Handler+0x3a>
  {
    if (object_ptr->count > 1UL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d905      	bls.n	80033d0 <SysTick_Handler+0x30>
    {
      object_ptr->count--;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	1e5a      	subs	r2, r3, #1
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	619a      	str	r2, [r3, #24]
 80033ce:	e004      	b.n	80033da <SysTick_Handler+0x3a>
    }
    else
    {
      object_ptr->count = 0U;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	619a      	str	r2, [r3, #24]
      SYSTIMER_lTimerHandler();
 80033d6:	f7ff ff7d 	bl	80032d4 <SYSTIMER_lTimerHandler>
    }
  }
}
 80033da:	3708      	adds	r7, #8
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	1fffd790 	.word	0x1fffd790
 80033e4:	1fffd798 	.word	0x1fffd798

080033e8 <SYSTIMER_Init>:

/*
 * Initialization function which initializes the SYSTIMER APP, configures SysTick timer and SysTick exception.
 */
SYSTIMER_STATUS_t SYSTIMER_Init(SYSTIMER_t *handle)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  SYSTIMER_STATUS_t status = SYSTIMER_STATUS_SUCCESS;
 80033f0:	2300      	movs	r3, #0
 80033f2:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("SYSTIMER_Init: SYSTIMER APP handle pointer uninitialized", (handle != NULL));

  /* Check APP initialization status to ensure whether SYSTIMER_Init called or not, initialize SYSTIMER if
   * SYSTIMER_Init called first time.
   */
  if (false == handle->init_status)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	f083 0301 	eor.w	r3, r3, #1
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d020      	beq.n	8003444 <SYSTIMER_Init+0x5c>
  {
    /* Initialize the header of the list */
    g_timer_list = NULL;
 8003402:	4b13      	ldr	r3, [pc, #76]	; (8003450 <SYSTIMER_Init+0x68>)
 8003404:	2200      	movs	r2, #0
 8003406:	601a      	str	r2, [r3, #0]
    /* Initialize SysTick timer */
    status = (SYSTIMER_STATUS_t)SysTick_Config((uint32_t)(SYSTIMER_SYSTICK_CLOCK * SYSTIMER_TICK_PERIOD));
 8003408:	4812      	ldr	r0, [pc, #72]	; (8003454 <SYSTIMER_Init+0x6c>)
 800340a:	f7ff fdff 	bl	800300c <SysTick_Config>
 800340e:	4603      	mov	r3, r0
 8003410:	73fb      	strb	r3, [r7, #15]

    if (SYSTIMER_STATUS_FAILURE == status)
 8003412:	7bfb      	ldrb	r3, [r7, #15]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d015      	beq.n	8003444 <SYSTIMER_Init+0x5c>
    }
    else
    {
#if (UC_FAMILY == XMC4)
      /* setting of First SW Timer period is always and subpriority value for XMC4000 devices */
      NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(
 8003418:	f7ff fd8e 	bl	8002f38 <__NVIC_GetPriorityGrouping>
 800341c:	4603      	mov	r3, r0
 800341e:	4618      	mov	r0, r3
 8003420:	213f      	movs	r1, #63	; 0x3f
 8003422:	2200      	movs	r2, #0
 8003424:	f7ff fdc0 	bl	8002fa8 <NVIC_EncodePriority>
 8003428:	4603      	mov	r3, r0
 800342a:	f04f 30ff 	mov.w	r0, #4294967295
 800342e:	4619      	mov	r1, r3
 8003430:	f7ff fd90 	bl	8002f54 <__NVIC_SetPriority>
      NVIC_GetPriorityGrouping(), SYSTIMER_PRIORITY, SYSTIMER_SUBPRIORITY));
#elif (UC_FAMILY == XMC1)
      /* setting of priority value for XMC1000 devices */
      NVIC_SetPriority(SysTick_IRQn, SYSTIMER_PRIORITY);
#endif      
      g_timer_tracker = 0U;
 8003434:	4b08      	ldr	r3, [pc, #32]	; (8003458 <SYSTIMER_Init+0x70>)
 8003436:	2200      	movs	r2, #0
 8003438:	601a      	str	r2, [r3, #0]
      /* Update the Initialization status of the SYSTIMER APP instance */
      handle->init_status = true;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2201      	movs	r2, #1
 800343e:	701a      	strb	r2, [r3, #0]
      status = SYSTIMER_STATUS_SUCCESS;
 8003440:	2300      	movs	r3, #0
 8003442:	73fb      	strb	r3, [r7, #15]
    }
  }

  return (status);
 8003444:	7bfb      	ldrb	r3, [r7, #15]
}
 8003446:	4618      	mov	r0, r3
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	1fffd790 	.word	0x1fffd790
 8003454:	0001d4c0 	.word	0x0001d4c0
 8003458:	1fffd794 	.word	0x1fffd794

0800345c <SYSTIMER_CreateTimer>:
  uint32_t period,
  SYSTIMER_MODE_t mode,
  SYSTIMER_CALLBACK_t callback,
  void  *args
)
{
 800345c:	b480      	push	{r7}
 800345e:	b089      	sub	sp, #36	; 0x24
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	607a      	str	r2, [r7, #4]
 8003466:	603b      	str	r3, [r7, #0]
 8003468:	460b      	mov	r3, r1
 800346a:	72fb      	strb	r3, [r7, #11]
  uint32_t id = 0U;
 800346c:	2300      	movs	r3, #0
 800346e:	61fb      	str	r3, [r7, #28]
  uint32_t count = 0U;
 8003470:	2300      	movs	r3, #0
 8003472:	61bb      	str	r3, [r7, #24]
  uint32_t period_ratio = 0U;
 8003474:	2300      	movs	r3, #0
 8003476:	617b      	str	r3, [r7, #20]
            ((period >= SYSTIMER_TICK_PERIOD_US) && (period > 0U) && (period <= 0xFFFFFFFFU)));
  XMC_ASSERT("SYSTIMER_CreateTimer: Timer creation failure due to invalid timer mode",
            ((SYSTIMER_MODE_ONE_SHOT == mode) || (SYSTIMER_MODE_PERIODIC == mode)));
  XMC_ASSERT("SYSTIMER_CreateTimer: Can not create software without user callback", (NULL != callback));
  
  if (period < SYSTIMER_TICK_PERIOD_US)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800347e:	d202      	bcs.n	8003486 <SYSTIMER_CreateTimer+0x2a>
  {
    id = 0U;
 8003480:	2300      	movs	r3, #0
 8003482:	61fb      	str	r3, [r7, #28]
 8003484:	e07b      	b.n	800357e <SYSTIMER_CreateTimer+0x122>
  }
  else
  {
    for (count = 0U; count < SYSTIMER_CFG_MAX_TMR; count++)
 8003486:	2300      	movs	r3, #0
 8003488:	61bb      	str	r3, [r7, #24]
 800348a:	e075      	b.n	8003578 <SYSTIMER_CreateTimer+0x11c>
    {
      /* Check for free timer ID */
      if (0U == (g_timer_tracker & (1U << count)))
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	2201      	movs	r2, #1
 8003490:	409a      	lsls	r2, r3
 8003492:	4b3e      	ldr	r3, [pc, #248]	; (800358c <SYSTIMER_CreateTimer+0x130>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4013      	ands	r3, r2
 8003498:	2b00      	cmp	r3, #0
 800349a:	d16a      	bne.n	8003572 <SYSTIMER_CreateTimer+0x116>
      {
        /* If yes, assign ID to this timer */
        g_timer_tracker |= (1U << count);
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	2201      	movs	r2, #1
 80034a0:	409a      	lsls	r2, r3
 80034a2:	4b3a      	ldr	r3, [pc, #232]	; (800358c <SYSTIMER_CreateTimer+0x130>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	4a38      	ldr	r2, [pc, #224]	; (800358c <SYSTIMER_CreateTimer+0x130>)
 80034aa:	6013      	str	r3, [r2, #0]
        /* Initialize the timer as per input values */
        g_timer_tbl[count].id     = count;
 80034ac:	4938      	ldr	r1, [pc, #224]	; (8003590 <SYSTIMER_CreateTimer+0x134>)
 80034ae:	69ba      	ldr	r2, [r7, #24]
 80034b0:	4613      	mov	r3, r2
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	4413      	add	r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	440b      	add	r3, r1
 80034ba:	3310      	adds	r3, #16
 80034bc:	69ba      	ldr	r2, [r7, #24]
 80034be:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].mode   = mode;
 80034c0:	4933      	ldr	r1, [pc, #204]	; (8003590 <SYSTIMER_CreateTimer+0x134>)
 80034c2:	69ba      	ldr	r2, [r7, #24]
 80034c4:	4613      	mov	r3, r2
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	4413      	add	r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	440b      	add	r3, r1
 80034ce:	3308      	adds	r3, #8
 80034d0:	7afa      	ldrb	r2, [r7, #11]
 80034d2:	711a      	strb	r2, [r3, #4]
        g_timer_tbl[count].state  = SYSTIMER_STATE_STOPPED;
 80034d4:	492e      	ldr	r1, [pc, #184]	; (8003590 <SYSTIMER_CreateTimer+0x134>)
 80034d6:	69ba      	ldr	r2, [r7, #24]
 80034d8:	4613      	mov	r3, r2
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	4413      	add	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	440b      	add	r3, r1
 80034e2:	3308      	adds	r3, #8
 80034e4:	2202      	movs	r2, #2
 80034e6:	715a      	strb	r2, [r3, #5]
        period_ratio = (uint32_t)(period / SYSTIMER_TICK_PERIOD_US);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	4a2a      	ldr	r2, [pc, #168]	; (8003594 <SYSTIMER_CreateTimer+0x138>)
 80034ec:	fba2 2303 	umull	r2, r3, r2, r3
 80034f0:	099b      	lsrs	r3, r3, #6
 80034f2:	617b      	str	r3, [r7, #20]
        g_timer_tbl[count].count  = (period_ratio + HW_TIMER_ADDITIONAL_CNT);
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	1c59      	adds	r1, r3, #1
 80034f8:	4825      	ldr	r0, [pc, #148]	; (8003590 <SYSTIMER_CreateTimer+0x134>)
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	4613      	mov	r3, r2
 80034fe:	00db      	lsls	r3, r3, #3
 8003500:	4413      	add	r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	4403      	add	r3, r0
 8003506:	3318      	adds	r3, #24
 8003508:	6019      	str	r1, [r3, #0]
        g_timer_tbl[count].reload  = period_ratio;
 800350a:	4921      	ldr	r1, [pc, #132]	; (8003590 <SYSTIMER_CreateTimer+0x134>)
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	4613      	mov	r3, r2
 8003510:	00db      	lsls	r3, r3, #3
 8003512:	4413      	add	r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	440b      	add	r3, r1
 8003518:	3318      	adds	r3, #24
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].callback = callback;
 800351e:	491c      	ldr	r1, [pc, #112]	; (8003590 <SYSTIMER_CreateTimer+0x134>)
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	4613      	mov	r3, r2
 8003524:	00db      	lsls	r3, r3, #3
 8003526:	4413      	add	r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	440b      	add	r3, r1
 800352c:	3308      	adds	r3, #8
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	601a      	str	r2, [r3, #0]
        g_timer_tbl[count].args = args;
 8003532:	4917      	ldr	r1, [pc, #92]	; (8003590 <SYSTIMER_CreateTimer+0x134>)
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	4613      	mov	r3, r2
 8003538:	00db      	lsls	r3, r3, #3
 800353a:	4413      	add	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	440b      	add	r3, r1
 8003540:	3310      	adds	r3, #16
 8003542:	683a      	ldr	r2, [r7, #0]
 8003544:	601a      	str	r2, [r3, #0]
        g_timer_tbl[count].prev   = NULL;
 8003546:	4912      	ldr	r1, [pc, #72]	; (8003590 <SYSTIMER_CreateTimer+0x134>)
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	4613      	mov	r3, r2
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	4413      	add	r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	440b      	add	r3, r1
 8003554:	2200      	movs	r2, #0
 8003556:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].next   = NULL;
 8003558:	490d      	ldr	r1, [pc, #52]	; (8003590 <SYSTIMER_CreateTimer+0x134>)
 800355a:	69ba      	ldr	r2, [r7, #24]
 800355c:	4613      	mov	r3, r2
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	4413      	add	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	440b      	add	r3, r1
 8003566:	2200      	movs	r2, #0
 8003568:	601a      	str	r2, [r3, #0]
        id = count + 1U;
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	3301      	adds	r3, #1
 800356e:	61fb      	str	r3, [r7, #28]
        break;
 8003570:	e005      	b.n	800357e <SYSTIMER_CreateTimer+0x122>
  {
    id = 0U;
  }
  else
  {
    for (count = 0U; count < SYSTIMER_CFG_MAX_TMR; count++)
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	3301      	adds	r3, #1
 8003576:	61bb      	str	r3, [r7, #24]
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	2b07      	cmp	r3, #7
 800357c:	d986      	bls.n	800348c <SYSTIMER_CreateTimer+0x30>
      }
    }

  }

  return (id);
 800357e:	69fb      	ldr	r3, [r7, #28]
}  
 8003580:	4618      	mov	r0, r3
 8003582:	3724      	adds	r7, #36	; 0x24
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr
 800358c:	1fffd794 	.word	0x1fffd794
 8003590:	1fffd7c8 	.word	0x1fffd7c8
 8003594:	10624dd3 	.word	0x10624dd3

08003598 <SYSTIMER_StartTimer>:

/*
 *  API to start the software timer.
 */
SYSTIMER_STATUS_t SYSTIMER_StartTimer(uint32_t id)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  SYSTIMER_STATUS_t status;
  status = SYSTIMER_STATUS_FAILURE;
 80035a0:	2301      	movs	r3, #1
 80035a2:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("SYSTIMER_StartTimer: Failure in timer restart operation due to invalid timer ID",
            ((id <= SYSTIMER_CFG_MAX_TMR) && (id > 0U)));
  XMC_ASSERT("SYSTIMER_StartTimer: Error during start of software timer", (0U != (g_timer_tracker & (1U << (id - 1U)))));
  
  /* Check if timer is running */
  if (SYSTIMER_STATE_STOPPED == g_timer_tbl[id - 1U].state)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	1e5a      	subs	r2, r3, #1
 80035a8:	491a      	ldr	r1, [pc, #104]	; (8003614 <SYSTIMER_StartTimer+0x7c>)
 80035aa:	4613      	mov	r3, r2
 80035ac:	00db      	lsls	r3, r3, #3
 80035ae:	4413      	add	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	440b      	add	r3, r1
 80035b4:	3308      	adds	r3, #8
 80035b6:	795b      	ldrb	r3, [r3, #5]
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d126      	bne.n	800360a <SYSTIMER_StartTimer+0x72>
  {
    g_timer_tbl[id - 1U].count = (g_timer_tbl[id - 1U].reload + HW_TIMER_ADDITIONAL_CNT);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	1e5a      	subs	r2, r3, #1
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	1e59      	subs	r1, r3, #1
 80035c4:	4813      	ldr	r0, [pc, #76]	; (8003614 <SYSTIMER_StartTimer+0x7c>)
 80035c6:	460b      	mov	r3, r1
 80035c8:	00db      	lsls	r3, r3, #3
 80035ca:	440b      	add	r3, r1
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	4403      	add	r3, r0
 80035d0:	3318      	adds	r3, #24
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	1c59      	adds	r1, r3, #1
 80035d6:	480f      	ldr	r0, [pc, #60]	; (8003614 <SYSTIMER_StartTimer+0x7c>)
 80035d8:	4613      	mov	r3, r2
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	4413      	add	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	4403      	add	r3, r0
 80035e2:	3318      	adds	r3, #24
 80035e4:	6019      	str	r1, [r3, #0]
    /* set timer status as SYSTIMER_STATE_RUNNING */
    g_timer_tbl[id - 1U].state = SYSTIMER_STATE_RUNNING;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	1e5a      	subs	r2, r3, #1
 80035ea:	490a      	ldr	r1, [pc, #40]	; (8003614 <SYSTIMER_StartTimer+0x7c>)
 80035ec:	4613      	mov	r3, r2
 80035ee:	00db      	lsls	r3, r3, #3
 80035f0:	4413      	add	r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	440b      	add	r3, r1
 80035f6:	3308      	adds	r3, #8
 80035f8:	2201      	movs	r2, #1
 80035fa:	715a      	strb	r2, [r3, #5]
    /* Insert this timer into timer list */
    SYSTIMER_lInsertTimerList((id - 1U));
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	3b01      	subs	r3, #1
 8003600:	4618      	mov	r0, r3
 8003602:	f7ff fd25 	bl	8003050 <SYSTIMER_lInsertTimerList>
    status = SYSTIMER_STATUS_SUCCESS;
 8003606:	2300      	movs	r3, #0
 8003608:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 800360a:	7bfb      	ldrb	r3, [r7, #15]
}
 800360c:	4618      	mov	r0, r3
 800360e:	3710      	adds	r7, #16
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	1fffd7c8 	.word	0x1fffd7c8

08003618 <SYSTIMER_StopTimer>:

/*
 *  API to stop the software timer.
 */
SYSTIMER_STATUS_t SYSTIMER_StopTimer(uint32_t id)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  SYSTIMER_STATUS_t status;
  status = SYSTIMER_STATUS_SUCCESS;
 8003620:	2300      	movs	r3, #0
 8003622:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("SYSTIMER_StopTimer: Failure in timer restart operation due to invalid timer ID",
            ((id <= SYSTIMER_CFG_MAX_TMR) && (id > 0U)));
  XMC_ASSERT("SYSTIMER_StopTimer: Error during stop of software timer", (0U != (g_timer_tracker & (1U << (id - 1U)))));

  if (SYSTIMER_STATE_NOT_INITIALIZED == g_timer_tbl[id - 1U].state)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	1e5a      	subs	r2, r3, #1
 8003628:	4916      	ldr	r1, [pc, #88]	; (8003684 <SYSTIMER_StopTimer+0x6c>)
 800362a:	4613      	mov	r3, r2
 800362c:	00db      	lsls	r3, r3, #3
 800362e:	4413      	add	r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	440b      	add	r3, r1
 8003634:	3308      	adds	r3, #8
 8003636:	795b      	ldrb	r3, [r3, #5]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d102      	bne.n	8003642 <SYSTIMER_StopTimer+0x2a>
  {
    status = SYSTIMER_STATUS_FAILURE;
 800363c:	2301      	movs	r3, #1
 800363e:	73fb      	strb	r3, [r7, #15]
 8003640:	e01b      	b.n	800367a <SYSTIMER_StopTimer+0x62>
  }
  else
  {
    /* Check whether Timer is in Stop state */
    if (SYSTIMER_STATE_RUNNING == g_timer_tbl[id - 1U].state)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	1e5a      	subs	r2, r3, #1
 8003646:	490f      	ldr	r1, [pc, #60]	; (8003684 <SYSTIMER_StopTimer+0x6c>)
 8003648:	4613      	mov	r3, r2
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	4413      	add	r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	440b      	add	r3, r1
 8003652:	3308      	adds	r3, #8
 8003654:	795b      	ldrb	r3, [r3, #5]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d10f      	bne.n	800367a <SYSTIMER_StopTimer+0x62>
    {
        /* Set timer status as SYSTIMER_STATE_STOPPED */
        g_timer_tbl[id - 1U].state = SYSTIMER_STATE_STOPPED;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	1e5a      	subs	r2, r3, #1
 800365e:	4909      	ldr	r1, [pc, #36]	; (8003684 <SYSTIMER_StopTimer+0x6c>)
 8003660:	4613      	mov	r3, r2
 8003662:	00db      	lsls	r3, r3, #3
 8003664:	4413      	add	r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	440b      	add	r3, r1
 800366a:	3308      	adds	r3, #8
 800366c:	2202      	movs	r2, #2
 800366e:	715a      	strb	r2, [r3, #5]

        /* remove Timer from node list */
        SYSTIMER_lRemoveTimerList(id - 1U);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	3b01      	subs	r3, #1
 8003674:	4618      	mov	r0, r3
 8003676:	f7ff fdcd 	bl	8003214 <SYSTIMER_lRemoveTimerList>

    }
  }

  return (status);
 800367a:	7bfb      	ldrb	r3, [r7, #15]
}
 800367c:	4618      	mov	r0, r3
 800367e:	3710      	adds	r7, #16
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	1fffd7c8 	.word	0x1fffd7c8

08003688 <SYSTIMER_DeleteTimer>:

/*
 *  Function to delete the Timer instance.
 */
SYSTIMER_STATUS_t SYSTIMER_DeleteTimer(uint32_t id)
{
 8003688:	b480      	push	{r7}
 800368a:	b085      	sub	sp, #20
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  SYSTIMER_STATUS_t status;
  status = SYSTIMER_STATUS_SUCCESS;
 8003690:	2300      	movs	r3, #0
 8003692:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("SYSTIMER_DeleteTimer: Failure in timer restart operation due to invalid timer ID",
            ((id <= SYSTIMER_CFG_MAX_TMR) && (id > 0U)));
  XMC_ASSERT("SYSTIMER_DeleteTimer: Error during deletion of software timer", (0U != (g_timer_tracker & (1U << (id - 1U)))));

  /* Check whether Timer is in delete state */
  if (SYSTIMER_STATE_NOT_INITIALIZED == g_timer_tbl[id - 1U].state)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	1e5a      	subs	r2, r3, #1
 8003698:	4920      	ldr	r1, [pc, #128]	; (800371c <SYSTIMER_DeleteTimer+0x94>)
 800369a:	4613      	mov	r3, r2
 800369c:	00db      	lsls	r3, r3, #3
 800369e:	4413      	add	r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	440b      	add	r3, r1
 80036a4:	3308      	adds	r3, #8
 80036a6:	795b      	ldrb	r3, [r3, #5]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d102      	bne.n	80036b2 <SYSTIMER_DeleteTimer+0x2a>
  {
      status = SYSTIMER_STATUS_FAILURE;
 80036ac:	2301      	movs	r3, #1
 80036ae:	73fb      	strb	r3, [r7, #15]
 80036b0:	e02d      	b.n	800370e <SYSTIMER_DeleteTimer+0x86>
  }
  else
  {
    if (SYSTIMER_STATE_STOPPED == g_timer_tbl[id - 1U].state)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	1e5a      	subs	r2, r3, #1
 80036b6:	4919      	ldr	r1, [pc, #100]	; (800371c <SYSTIMER_DeleteTimer+0x94>)
 80036b8:	4613      	mov	r3, r2
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	4413      	add	r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	440b      	add	r3, r1
 80036c2:	3308      	adds	r3, #8
 80036c4:	795b      	ldrb	r3, [r3, #5]
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d116      	bne.n	80036f8 <SYSTIMER_DeleteTimer+0x70>
    {
      /* Set timer status as SYSTIMER_STATE_NOT_INITIALIZED */
      g_timer_tbl[id - 1U].state = SYSTIMER_STATE_NOT_INITIALIZED;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	1e5a      	subs	r2, r3, #1
 80036ce:	4913      	ldr	r1, [pc, #76]	; (800371c <SYSTIMER_DeleteTimer+0x94>)
 80036d0:	4613      	mov	r3, r2
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	4413      	add	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	440b      	add	r3, r1
 80036da:	3308      	adds	r3, #8
 80036dc:	2200      	movs	r2, #0
 80036de:	715a      	strb	r2, [r3, #5]
      /* Release resource which are hold by this timer */
      g_timer_tracker &= ~(1U << (id - 1U));
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	3b01      	subs	r3, #1
 80036e4:	461a      	mov	r2, r3
 80036e6:	2301      	movs	r3, #1
 80036e8:	4093      	lsls	r3, r2
 80036ea:	43da      	mvns	r2, r3
 80036ec:	4b0c      	ldr	r3, [pc, #48]	; (8003720 <SYSTIMER_DeleteTimer+0x98>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4013      	ands	r3, r2
 80036f2:	4a0b      	ldr	r2, [pc, #44]	; (8003720 <SYSTIMER_DeleteTimer+0x98>)
 80036f4:	6013      	str	r3, [r2, #0]
 80036f6:	e00a      	b.n	800370e <SYSTIMER_DeleteTimer+0x86>
    }
    else
    {
      /* Yes, remove this timer from timer list during ISR execution */
      g_timer_tbl[id - 1U].delete_swtmr = true;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	1e5a      	subs	r2, r3, #1
 80036fc:	4907      	ldr	r1, [pc, #28]	; (800371c <SYSTIMER_DeleteTimer+0x94>)
 80036fe:	4613      	mov	r3, r2
 8003700:	00db      	lsls	r3, r3, #3
 8003702:	4413      	add	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	440b      	add	r3, r1
 8003708:	3320      	adds	r3, #32
 800370a:	2201      	movs	r2, #1
 800370c:	701a      	strb	r2, [r3, #0]
    }
  }

  return (status);
 800370e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003710:	4618      	mov	r0, r3
 8003712:	3714      	adds	r7, #20
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr
 800371c:	1fffd7c8 	.word	0x1fffd7c8
 8003720:	1fffd794 	.word	0x1fffd794

08003724 <SYSTIMER_GetTime>:

/*
 *  API to get the current SysTick time in microsecond.
 */
uint32_t SYSTIMER_GetTime(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
  return (g_systick_count * SYSTIMER_TICK_PERIOD_US);
 8003728:	4b05      	ldr	r3, [pc, #20]	; (8003740 <SYSTIMER_GetTime+0x1c>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003730:	fb02 f303 	mul.w	r3, r2, r3
}
 8003734:	4618      	mov	r0, r3
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	1fffd798 	.word	0x1fffd798

08003744 <XMC_CCU8_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_DisableClock()<BR>  XMC_CCU8_EnableMultipleClocks()<BR>  XMC_CCU8_StartPrescaler()<BR>  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_EnableClock(XMC_CCU8_MODULE_t *const module, const uint8_t slice_number)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	460b      	mov	r3, r1
 800374e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1 << slice_number);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	68da      	ldr	r2, [r3, #12]
 8003754:	78fb      	ldrb	r3, [r7, #3]
 8003756:	2101      	movs	r1, #1
 8003758:	fa01 f303 	lsl.w	r3, r1, r3
 800375c:	431a      	orrs	r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	60da      	str	r2, [r3, #12]
}
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <XMC_CCU8_SLICE_EnableTrap>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_TrapConfig()<BR>  XMC_CCU8_SLICE_DisableTrap()<BR>  XMC_CCU8_SLICE_ConfigureEvent()<BR> 
 *  XMC_CCU8_SLICE_SetInput().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_EnableTrap(XMC_CCU8_SLICE_t *const slice, const uint32_t out_mask)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_EnableTrap:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TC |= (uint32_t)out_mask << CCU8_CC8_TC_TRAPE0_Pos;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	695a      	ldr	r2, [r3, #20]
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	045b      	lsls	r3, r3, #17
 800377e:	431a      	orrs	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	615a      	str	r2, [r3, #20]
}
 8003784:	370c      	adds	r7, #12
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop

08003790 <XMC_CCU8_SLICE_DisableTrap>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_EnableTrap().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_DisableTrap(XMC_CCU8_SLICE_t *const slice, const uint32_t out_mask)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_DisableTrap:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  
  slice->TC &= ~((uint32_t)out_mask << CCU8_CC8_TC_TRAPE0_Pos);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	695a      	ldr	r2, [r3, #20]
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	045b      	lsls	r3, r3, #17
 80037a2:	43db      	mvns	r3, r3
 80037a4:	401a      	ands	r2, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	615a      	str	r2, [r3, #20]
}
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <XMC_CCU8_SLICE_StopTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StopTimer(XMC_CCU8_SLICE_t *const slice)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU8_CC8_TCCLR_TRBC_Msk;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	611a      	str	r2, [r3, #16]
}
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <XMC_CCU8_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU8_EnableShadowTransfer(XMC_CCU8_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_EnableShadowTransfer:Invalid module Pointer", XMC_CCU8_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	683a      	ldr	r2, [r7, #0]
 80037da:	611a      	str	r2, [r3, #16]
}
 80037dc:	370c      	adds	r7, #12
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop

080037e8 <XMC_CCU8_SLICE_SetTimerValue>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_GetTimerValue().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_SetTimerValue(XMC_CCU8_SLICE_t *const slice, const uint16_t timer_val)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	460b      	mov	r3, r1
 80037f2:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerValue:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TIMER = (uint32_t) timer_val;
 80037f4:	887a      	ldrh	r2, [r7, #2]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	671a      	str	r2, [r3, #112]	; 0x70
}
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <XMC_CCU8_SLICE_EnableEvent>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_SetInterruptNode()<BR>  XMC_CCU8_SLICE_EnableMultipleEvents()<BR>  XMC_CCU8_SLICE_DisableEvent()<BR> 
 *  XMC_CCU8_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_EnableEvent(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_IRQ_ID_t event)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	460b      	mov	r3, r1
 800380e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_EnableEvent:Invalid SR event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));

  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003816:	78fb      	ldrb	r3, [r7, #3]
 8003818:	2101      	movs	r1, #1
 800381a:	fa01 f303 	lsl.w	r3, r1, r3
 800381e:	431a      	orrs	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <XMC_CCU8_SLICE_ClearEvent>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_EnableEvent()<BR>  XMC_CCU8_SLICE_SetEvent()<BR>  XMC_CCU8_SLICE_GetEvent().
 *
 */
__STATIC_INLINE void XMC_CCU8_SLICE_ClearEvent(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_IRQ_ID_t event)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	460b      	mov	r3, r1
 800383a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_SLICE_ClearEvent:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_ClearEvent:Invalid SR event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));
  slice->SWR |= ((uint32_t) 1) << ((uint32_t) event);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003842:	78fb      	ldrb	r3, [r7, #3]
 8003844:	2101      	movs	r1, #1
 8003846:	fa01 f303 	lsl.w	r3, r1, r3
 800384a:	431a      	orrs	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <XMC_SCU_SetCcuTriggerHigh>:
 * the timer using this API.<BR>
 * \par<b>Related APIs:</b><BR>
 * XMC_CCU4_SLICE_StartConfig(), XMC_CCU4_SLICE_SetInput(), XMC_SCU_SetCcuTriggerLow()\n\n\n
 */
__STATIC_INLINE void XMC_SCU_SetCcuTriggerHigh(const uint32_t trigger)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  SCU_GENERAL->CCUCON |= (uint32_t)trigger;
 8003864:	4905      	ldr	r1, [pc, #20]	; (800387c <XMC_SCU_SetCcuTriggerHigh+0x20>)
 8003866:	4b05      	ldr	r3, [pc, #20]	; (800387c <XMC_SCU_SetCcuTriggerHigh+0x20>)
 8003868:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4313      	orrs	r3, r2
 800386e:	64cb      	str	r3, [r1, #76]	; 0x4c
}
 8003870:	370c      	adds	r7, #12
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	50004000 	.word	0x50004000

08003880 <XMC_SCU_SetCcuTriggerLow>:
 * the timer using this API.<BR>
 * \par<b>Related APIs:</b><BR>
 * XMC_CCU4_SLICE_StartConfig(), XMC_CCU4_SLICE_SetInput(), XMC_SCU_SetCcuTriggerHigh()\n\n\n
 */
__STATIC_INLINE void XMC_SCU_SetCcuTriggerLow(const uint32_t trigger)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  SCU_GENERAL->CCUCON &= (uint32_t)~trigger;
 8003888:	4905      	ldr	r1, [pc, #20]	; (80038a0 <XMC_SCU_SetCcuTriggerLow+0x20>)
 800388a:	4b05      	ldr	r3, [pc, #20]	; (80038a0 <XMC_SCU_SetCcuTriggerLow+0x20>)
 800388c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	43db      	mvns	r3, r3
 8003892:	4013      	ands	r3, r2
 8003894:	64cb      	str	r3, [r1, #76]	; 0x4c
}
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr
 80038a0:	50004000 	.word	0x50004000

080038a4 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	460b      	mov	r3, r1
 80038ae:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 80038b0:	78fb      	ldrb	r3, [r7, #3]
 80038b2:	2201      	movs	r2, #1
 80038b4:	409a      	lsls	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	605a      	str	r2, [r3, #4]
}
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	460b      	mov	r3, r1
 80038ce:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 80038d0:	78fb      	ldrb	r3, [r7, #3]
 80038d2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80038d6:	409a      	lsls	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	605a      	str	r2, [r3, #4]
}
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop

080038e8 <PWM_SVM_lEnableEvent>:

/**********************************************************************************************************************
* API IMPLEMENTATION
**********************************************************************************************************************/
void PWM_SVM_lEnableEvent(PWM_SVM_t* const HandlePtr)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  /*Enable the slice 0 period match interrupt */
  if ((uint8_t) true == HandlePtr->confighandle_ptr->enable_periodmatch)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d106      	bne.n	800390a <PWM_SVM_lEnableEvent+0x22>
  {
    XMC_CCU8_SLICE_EnableEvent(HandlePtr->phase_ptr[0]->slice_ptr,
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4618      	mov	r0, r3
 8003904:	2100      	movs	r1, #0
 8003906:	f7ff ff7d 	bl	8003804 <XMC_CCU8_SLICE_EnableEvent>
        (XMC_CCU8_SLICE_IRQ_ID_t) XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH);
  }
  /*Enable the slice 0 trap interrupt */
  if ((uint8_t) true == HandlePtr->confighandle_ptr->enable_trapevent)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003912:	2b01      	cmp	r3, #1
 8003914:	d106      	bne.n	8003924 <PWM_SVM_lEnableEvent+0x3c>
  {
    XMC_CCU8_SLICE_EnableEvent(HandlePtr->phase_ptr[0]->slice_ptr,
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4618      	mov	r0, r3
 800391e:	210a      	movs	r1, #10
 8003920:	f7ff ff70 	bl	8003804 <XMC_CCU8_SLICE_EnableEvent>
        (XMC_CCU8_SLICE_IRQ_ID_t) XMC_CCU8_SLICE_IRQ_ID_EVENT2);
  }
}
 8003924:	3708      	adds	r7, #8
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop

0800392c <PWM_SVM_InverterDisable>:
/**
 * This function disables the inverter
 */
void PWM_SVM_InverterDisable(PWM_SVM_t* const HandlePtr)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("PWM_SVM_InverterDisable:NULL Handle Pointer", (HandlePtr != (PWM_SVM_t *) NULL));
  /*Inverter Enable pin settings.*/
  if ((PWM_SVM_INVERTERPINLEVEL_t) PWM_SVM_IPIN_HIGH == HandlePtr->confighandle_ptr->inverter_pin)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	7cdb      	ldrb	r3, [r3, #19]
 800393a:	2b01      	cmp	r3, #1
 800393c:	d109      	bne.n	8003952 <PWM_SVM_InverterDisable+0x26>
  {
    /*Set IO output to low*/
    XMC_GPIO_SetOutputLow(HandlePtr->inverterpin_ptr->port, HandlePtr->inverterpin_ptr->pin);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003948:	791b      	ldrb	r3, [r3, #4]
 800394a:	4610      	mov	r0, r2
 800394c:	4619      	mov	r1, r3
 800394e:	f7ff ffb9 	bl	80038c4 <XMC_GPIO_SetOutputLow>
  }
  if ((PWM_SVM_INVERTERPINLEVEL_t) PWM_SVM_IPIN_LOW == HandlePtr->confighandle_ptr->inverter_pin)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	7cdb      	ldrb	r3, [r3, #19]
 8003958:	2b02      	cmp	r3, #2
 800395a:	d109      	bne.n	8003970 <PWM_SVM_InverterDisable+0x44>
  {
    /*Set IO output to high*/
    XMC_GPIO_SetOutputHigh(HandlePtr->inverterpin_ptr->port, HandlePtr->inverterpin_ptr->pin);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003966:	791b      	ldrb	r3, [r3, #4]
 8003968:	4610      	mov	r0, r2
 800396a:	4619      	mov	r1, r3
 800396c:	f7ff ff9a 	bl	80038a4 <XMC_GPIO_SetOutputHigh>
  }
}
 8003970:	3708      	adds	r7, #8
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop

08003978 <PWM_SVM_InverterEnable>:
/**
 * This function Enables the inverter
 */
void PWM_SVM_InverterEnable(PWM_SVM_t* const HandlePtr)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("NULL Handle Pointer", (HandlePtr != (PWM_SVM_t *) NULL));
  /*Inverter Enable pin settings.*/
  if ((PWM_SVM_INVERTERPINLEVEL_t) PWM_SVM_IPIN_HIGH == HandlePtr->confighandle_ptr->inverter_pin)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	7cdb      	ldrb	r3, [r3, #19]
 8003986:	2b01      	cmp	r3, #1
 8003988:	d109      	bne.n	800399e <PWM_SVM_InverterEnable+0x26>
  {
    /*Set IO output to high*/
    XMC_GPIO_SetOutputHigh(HandlePtr->inverterpin_ptr->port, HandlePtr->inverterpin_ptr->pin);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003994:	791b      	ldrb	r3, [r3, #4]
 8003996:	4610      	mov	r0, r2
 8003998:	4619      	mov	r1, r3
 800399a:	f7ff ff83 	bl	80038a4 <XMC_GPIO_SetOutputHigh>
  }
  if ((PWM_SVM_INVERTERPINLEVEL_t) PWM_SVM_IPIN_LOW == HandlePtr->confighandle_ptr->inverter_pin)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	7cdb      	ldrb	r3, [r3, #19]
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d109      	bne.n	80039bc <PWM_SVM_InverterEnable+0x44>
  {
    /*Set IO output to low*/
    XMC_GPIO_SetOutputLow(HandlePtr->inverterpin_ptr->port, HandlePtr->inverterpin_ptr->pin);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b2:	791b      	ldrb	r3, [r3, #4]
 80039b4:	4610      	mov	r0, r2
 80039b6:	4619      	mov	r1, r3
 80039b8:	f7ff ff84 	bl	80038c4 <XMC_GPIO_SetOutputLow>
  }
}
 80039bc:	3708      	adds	r7, #8
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop

080039c4 <PWM_SVM_Init>:
/**
 * This function initializes the peripherals and SVM structure 
 * required for the SVM algorithm.
 */
PWM_SVM_STATUS_t PWM_SVM_Init(PWM_SVM_t* const HandlePtr)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b086      	sub	sp, #24
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80039cc:	2300      	movs	r3, #0
 80039ce:	617b      	str	r3, [r7, #20]
  uint32_t phase_count = 0U;
 80039d0:	2300      	movs	r3, #0
 80039d2:	613b      	str	r3, [r7, #16]
  PWM_SVM_STATUS_t status = (PWM_SVM_STATUS_t) PWM_SVM_STATUS_SUCCESS;
 80039d4:	2300      	movs	r3, #0
 80039d6:	73fb      	strb	r3, [r7, #15]
  const PWM_SVM_Config_t* const svmptr = HandlePtr->confighandle_ptr;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	60bb      	str	r3, [r7, #8]
  XMC_ASSERT("PWM_SVM_Init:NULL Handle Pointer", (HandlePtr != (PWM_SVM_t *) NULL));
  if ((PWM_SVM_STATE_t) PWM_SVM_UNINITIALIZED == HandlePtr->state)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	f040 8133 	bne.w	8003c50 <PWM_SVM_Init+0x28c>
  {
    status = (PWM_SVM_STATUS_t) GLOBAL_CCU8_Init(HandlePtr->globalccu8_handle_ptr);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039ee:	4618      	mov	r0, r3
 80039f0:	f001 fcc0 	bl	8005374 <GLOBAL_CCU8_Init>
 80039f4:	4603      	mov	r3, r0
 80039f6:	73fb      	strb	r3, [r7, #15]
    /*Configure io init for all three phases output*/
    for (phase_count = 0U; phase_count < PWM_SVM_PHASE_IO_MAX; phase_count++)
 80039f8:	2300      	movs	r3, #0
 80039fa:	613b      	str	r3, [r7, #16]
 80039fc:	e016      	b.n	8003a2c <PWM_SVM_Init+0x68>
    {
      XMC_GPIO_Init(HandlePtr->pwmoutpin_ptr[phase_count]->port, HandlePtr->pwmoutpin_ptr[phase_count]->pin,
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	3208      	adds	r2, #8
 8003a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a08:	6818      	ldr	r0, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	3208      	adds	r2, #8
 8003a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a14:	7919      	ldrb	r1, [r3, #4]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	320e      	adds	r2, #14
 8003a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a20:	461a      	mov	r2, r3
 8003a22:	f7fc fcbf 	bl	80003a4 <XMC_GPIO_Init>
  XMC_ASSERT("PWM_SVM_Init:NULL Handle Pointer", (HandlePtr != (PWM_SVM_t *) NULL));
  if ((PWM_SVM_STATE_t) PWM_SVM_UNINITIALIZED == HandlePtr->state)
  {
    status = (PWM_SVM_STATUS_t) GLOBAL_CCU8_Init(HandlePtr->globalccu8_handle_ptr);
    /*Configure io init for all three phases output*/
    for (phase_count = 0U; phase_count < PWM_SVM_PHASE_IO_MAX; phase_count++)
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	3301      	adds	r3, #1
 8003a2a:	613b      	str	r3, [r7, #16]
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	2b05      	cmp	r3, #5
 8003a30:	d9e5      	bls.n	80039fe <PWM_SVM_Init+0x3a>
    {
      XMC_GPIO_Init(HandlePtr->pwmoutpin_ptr[phase_count]->port, HandlePtr->pwmoutpin_ptr[phase_count]->pin,
          HandlePtr->pwmoutconfig_ptr[phase_count]);
    }
    /*Configure io init for trap input*/
    if ((uint8_t) true == svmptr->enable_trap)
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d11a      	bne.n	8003a72 <PWM_SVM_Init+0xae>
    {
      XMC_GPIO_Init(HandlePtr->trappin_ptr->port, HandlePtr->trappin_ptr->pin, HandlePtr->trapinconfig_ptr);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a40:	6819      	ldr	r1, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a46:	791a      	ldrb	r2, [r3, #4]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a4c:	4608      	mov	r0, r1
 8003a4e:	4611      	mov	r1, r2
 8003a50:	461a      	mov	r2, r3
 8003a52:	f7fc fca7 	bl	80003a4 <XMC_GPIO_Init>
      XMC_GPIO_SetHardwareControl(HandlePtr->trappin_ptr->port, HandlePtr->trappin_ptr->pin,
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a5a:	6819      	ldr	r1, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a60:	791a      	ldrb	r2, [r3, #4]
          HandlePtr->confighandle_ptr->trap_hwsel);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
    }
    /*Configure io init for trap input*/
    if ((uint8_t) true == svmptr->enable_trap)
    {
      XMC_GPIO_Init(HandlePtr->trappin_ptr->port, HandlePtr->trappin_ptr->pin, HandlePtr->trapinconfig_ptr);
      XMC_GPIO_SetHardwareControl(HandlePtr->trappin_ptr->port, HandlePtr->trappin_ptr->pin,
 8003a66:	7c9b      	ldrb	r3, [r3, #18]
 8003a68:	4608      	mov	r0, r1
 8003a6a:	4611      	mov	r1, r2
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	f7fd ff27 	bl	80018c0 <XMC_GPIO_SetHardwareControl>
          HandlePtr->confighandle_ptr->trap_hwsel);
    }

    /*Configure io init for inverter enable pin output*/
    if (svmptr->inverter_pin > (PWM_SVM_INVERTERPINLEVEL_t) PWM_SVM_IPIN_NOTREQUIRED)
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	7cdb      	ldrb	r3, [r3, #19]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00c      	beq.n	8003a94 <PWM_SVM_Init+0xd0>
    {
      XMC_GPIO_Init(HandlePtr->inverterpin_ptr->port, HandlePtr->inverterpin_ptr->pin,
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a7e:	6819      	ldr	r1, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a84:	791a      	ldrb	r2, [r3, #4]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a8a:	4608      	mov	r0, r1
 8003a8c:	4611      	mov	r1, r2
 8003a8e:	461a      	mov	r2, r3
 8003a90:	f7fc fc88 	bl	80003a4 <XMC_GPIO_Init>
          HandlePtr->inverterpinconfig_ptr);
    }

    /*Inverter Enable pin level is set to passive level.*/
    PWM_SVM_InverterDisable(HandlePtr);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f7ff ff49 	bl	800392c <PWM_SVM_InverterDisable>

    /* Phase configurations */
    for (count = 0U; count < PWM_SVM_NUMBERPHASE; count++)
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	617b      	str	r3, [r7, #20]
 8003a9e:	e0a4      	b.n	8003bea <PWM_SVM_Init+0x226>
    {
      XMC_CCU8_SLICE_CompareInit(HandlePtr->phase_ptr[count]->slice_ptr, HandlePtr->phase_configinit_ptr);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	3202      	adds	r2, #2
 8003aa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	4610      	mov	r0, r2
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	f7fd fd12 	bl	80014dc <XMC_CCU8_SLICE_CompareInit>

      /* configure dead time */
      XMC_CCU8_SLICE_DeadTimeInit(HandlePtr->phase_ptr[count]->slice_ptr, HandlePtr->deadtimeconfig_ptr);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	697a      	ldr	r2, [r7, #20]
 8003abc:	3202      	adds	r2, #2
 8003abe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ac8:	4610      	mov	r0, r2
 8003aca:	4619      	mov	r1, r3
 8003acc:	f7fd fe8a 	bl	80017e4 <XMC_CCU8_SLICE_DeadTimeInit>

      /* Configure external start to event 0 */
      XMC_CCU8_SLICE_ConfigureEvent(HandlePtr->phase_ptr[count]->slice_ptr,
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	3202      	adds	r2, #2
 8003ad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ae0:	4610      	mov	r0, r2
 8003ae2:	2101      	movs	r1, #1
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	f7fd fded 	bl	80016c4 <XMC_CCU8_SLICE_ConfigureEvent>
          (XMC_CCU8_SLICE_EVENT_t) XMC_CCU8_SLICE_EVENT_0, HandlePtr->startconfig_ptr);
      /* if trap is enabled, Enable Trap for all the three phases
       map the external trap functionality to event 2 */
      if ((uint8_t) true == svmptr->enable_trap)
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d121      	bne.n	8003b38 <PWM_SVM_Init+0x174>
      {
        XMC_CCU8_SLICE_ConfigureEvent(HandlePtr->phase_ptr[count]->slice_ptr, XMC_CCU8_SLICE_EVENT_2,
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	3202      	adds	r2, #2
 8003afa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b04:	4610      	mov	r0, r2
 8003b06:	2103      	movs	r1, #3
 8003b08:	461a      	mov	r2, r3
 8003b0a:	f7fd fddb 	bl	80016c4 <XMC_CCU8_SLICE_ConfigureEvent>
            HandlePtr->trapconfig_ptr);
        XMC_CCU8_SLICE_TrapConfig(HandlePtr->phase_ptr[count]->slice_ptr, svmptr->trap_exit_mode,
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	3202      	adds	r2, #2
 8003b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b18:	6819      	ldr	r1, [r3, #0]
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	7c5a      	ldrb	r2, [r3, #17]
            (bool)svmptr->trap_sync_pwm);
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
       map the external trap functionality to event 2 */
      if ((uint8_t) true == svmptr->enable_trap)
      {
        XMC_CCU8_SLICE_ConfigureEvent(HandlePtr->phase_ptr[count]->slice_ptr, XMC_CCU8_SLICE_EVENT_2,
            HandlePtr->trapconfig_ptr);
        XMC_CCU8_SLICE_TrapConfig(HandlePtr->phase_ptr[count]->slice_ptr, svmptr->trap_exit_mode,
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	bf14      	ite	ne
 8003b28:	2301      	movne	r3, #1
 8003b2a:	2300      	moveq	r3, #0
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	4608      	mov	r0, r1
 8003b30:	4611      	mov	r1, r2
 8003b32:	461a      	mov	r2, r3
 8003b34:	f7fd fd8c 	bl	8001650 <XMC_CCU8_SLICE_TrapConfig>
            (bool)svmptr->trap_sync_pwm);
      }

      /* Program period  value of the timer  */
      XMC_CCU8_SLICE_SetTimerPeriodMatch(HandlePtr->phase_ptr[count]->slice_ptr, (uint16_t) HandlePtr->period);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	697a      	ldr	r2, [r7, #20]
 8003b3c:	3202      	adds	r2, #2
 8003b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	4610      	mov	r0, r2
 8003b4e:	4619      	mov	r1, r3
 8003b50:	f7fd fe22 	bl	8001798 <XMC_CCU8_SLICE_SetTimerPeriodMatch>
      /* Program timer compare value for channel 1 or channel 2*/
      XMC_CCU8_SLICE_SetTimerCompareMatch(HandlePtr->phase_ptr[count]->slice_ptr,
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	3202      	adds	r2, #2
 8003b5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4618      	mov	r0, r3
 8003b62:	2100      	movs	r1, #0
 8003b64:	2200      	movs	r2, #0
 8003b66:	f7fd fe25 	bl	80017b4 <XMC_CCU8_SLICE_SetTimerCompareMatch>
          (XMC_CCU8_SLICE_COMPARE_CHANNEL_t) XMC_CCU8_SLICE_COMPARE_CHANNEL_1, 0U);
      /* Program timer compare value for channel 1 or channel 2*/
      XMC_CCU8_SLICE_SetTimerCompareMatch(HandlePtr->phase_ptr[count]->slice_ptr,
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	3202      	adds	r2, #2
 8003b70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4618      	mov	r0, r3
 8003b78:	2101      	movs	r1, #1
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f7fd fe1a 	bl	80017b4 <XMC_CCU8_SLICE_SetTimerCompareMatch>
          (XMC_CCU8_SLICE_COMPARE_CHANNEL_t) XMC_CCU8_SLICE_COMPARE_CHANNEL_2, 0U);
      /* Configures status ST1, ST2 mapping to STy */
      XMC_CCU8_SLICE_ConfigureStatusBitOutput(HandlePtr->phase_ptr[count]->slice_ptr,
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	3202      	adds	r2, #2
 8003b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b8a:	6819      	ldr	r1, [r3, #0]
          HandlePtr->confighandle_ptr->phase_st_map[count]);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681a      	ldr	r2, [r3, #0]
          (XMC_CCU8_SLICE_COMPARE_CHANNEL_t) XMC_CCU8_SLICE_COMPARE_CHANNEL_1, 0U);
      /* Program timer compare value for channel 1 or channel 2*/
      XMC_CCU8_SLICE_SetTimerCompareMatch(HandlePtr->phase_ptr[count]->slice_ptr,
          (XMC_CCU8_SLICE_COMPARE_CHANNEL_t) XMC_CCU8_SLICE_COMPARE_CHANNEL_2, 0U);
      /* Configures status ST1, ST2 mapping to STy */
      XMC_CCU8_SLICE_ConfigureStatusBitOutput(HandlePtr->phase_ptr[count]->slice_ptr,
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	4413      	add	r3, r2
 8003b94:	3308      	adds	r3, #8
 8003b96:	791b      	ldrb	r3, [r3, #4]
 8003b98:	4608      	mov	r0, r1
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	f7fd fe38 	bl	8001810 <XMC_CCU8_SLICE_ConfigureStatusBitOutput>
          HandlePtr->confighandle_ptr->phase_st_map[count]);

      /* Bind period match event to an NVIC node  */
      HandlePtr->phase_ptr[count]->slice_ptr->SRS |= svmptr->event_sr_selector[count];
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	697a      	ldr	r2, [r7, #20]
 8003ba4:	3202      	adds	r2, #2
 8003ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	6979      	ldr	r1, [r7, #20]
 8003bb0:	3102      	adds	r1, #2
 8003bb2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8003bb6:	6812      	ldr	r2, [r2, #0]
 8003bb8:	f8d2 10a8 	ldr.w	r1, [r2, #168]	; 0xa8
 8003bbc:	68ba      	ldr	r2, [r7, #8]
 8003bbe:	6978      	ldr	r0, [r7, #20]
 8003bc0:	300a      	adds	r0, #10
 8003bc2:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

      /* enable module clock by clearing idle bit*/
      XMC_CCU8_EnableClock(HandlePtr->global_ptr, HandlePtr->phase_ptr[count]->slice_number);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6859      	ldr	r1, [r3, #4]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	3202      	adds	r2, #2
 8003bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bda:	791b      	ldrb	r3, [r3, #4]
 8003bdc:	4608      	mov	r0, r1
 8003bde:	4619      	mov	r1, r3
 8003be0:	f7ff fdb0 	bl	8003744 <XMC_CCU8_EnableClock>

    /*Inverter Enable pin level is set to passive level.*/
    PWM_SVM_InverterDisable(HandlePtr);

    /* Phase configurations */
    for (count = 0U; count < PWM_SVM_NUMBERPHASE; count++)
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	3301      	adds	r3, #1
 8003be8:	617b      	str	r3, [r7, #20]
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	f67f af57 	bls.w	8003aa0 <PWM_SVM_Init+0xdc>

      /* enable module clock by clearing idle bit*/
      XMC_CCU8_EnableClock(HandlePtr->global_ptr, HandlePtr->phase_ptr[count]->slice_number);
    }

    PWM_SVM_lEnableEvent(HandlePtr);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f7ff fe78 	bl	80038e8 <PWM_SVM_lEnableEvent>
#if defined (MATH)
      /*Ungate Math coprocessor*/
      XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_MATH);
#endif
    /*Enable the shadow transfer for all three slice*/
    XMC_CCU8_EnableShadowTransfer(HandlePtr->global_ptr, svmptr->shadow_transfer_mask);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685a      	ldr	r2, [r3, #4]
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c00:	4610      	mov	r0, r2
 8003c02:	4619      	mov	r1, r3
 8003c04:	f7ff fde2 	bl	80037cc <XMC_CCU8_EnableShadowTransfer>

    /* update dead time variable*/
    HandlePtr->deadtime_rising_edge = HandlePtr->deadtimeconfig_ptr->channel1_st_rising_edge_counter;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c0c:	791b      	ldrb	r3, [r3, #4]
 8003c0e:	461a      	mov	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    HandlePtr->deadtime_falling_edge = HandlePtr->deadtimeconfig_ptr->channel1_st_falling_edge_counter;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c1a:	795b      	ldrb	r3, [r3, #5]
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    HandlePtr->deadtime_div = (XMC_CCU8_SLICE_DTC_DIV_t) HandlePtr->deadtimeconfig_ptr->div;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	461a      	mov	r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    if ((PWM_SVM_STATUS_t) PWM_SVM_STATUS_FAILURE != status)
 8003c38:	7bfb      	ldrb	r3, [r7, #15]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d006      	beq.n	8003c4c <PWM_SVM_Init+0x288>
    {
      status = PWM_SVM_STATUS_SUCCESS;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	73fb      	strb	r3, [r7, #15]
      HandlePtr->state = (PWM_SVM_STATE_t) PWM_SVM_INITIALIZED;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 8003c4a:	e001      	b.n	8003c50 <PWM_SVM_Init+0x28c>
    }
    else
    {
      status = PWM_SVM_STATUS_FAILURE;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return (status);
 8003c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3718      	adds	r7, #24
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop

08003c5c <PWM_SVM_Start>:

/**
 * This function starts the CCU8 slices used to generate SVM.
 */
void PWM_SVM_Start(PWM_SVM_t* const HandlePtr)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8003c64:	2300      	movs	r3, #0
 8003c66:	60fb      	str	r3, [r7, #12]
  const PWM_SVM_Config_t* const svmptr = HandlePtr->confighandle_ptr;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	60bb      	str	r3, [r7, #8]
  XMC_ASSERT("PWM_SVM_Start:NULL Handle Pointer", (HandlePtr != (PWM_SVM_t *) NULL));
  if (((PWM_SVM_STATE_t) PWM_SVM_INITIALIZED == HandlePtr->state)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d005      	beq.n	8003c84 <PWM_SVM_Start+0x28>
      || ((PWM_SVM_STATE_t) PWM_SVM_STOPPED == HandlePtr->state))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8003c7e:	2b03      	cmp	r3, #3
 8003c80:	f040 8133 	bne.w	8003eea <PWM_SVM_Start+0x28e>
  {
    HandlePtr->ta = 0U;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
    HandlePtr->tb = 0U;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
    HandlePtr->ta2 = 0U;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
    HandlePtr->tb2 = 0U;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
    HandlePtr->v_ta = 0U;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
    HandlePtr->v_tb = 0U;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
    HandlePtr->v_ta2 = 0U;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
    HandlePtr->v_tb2 = 0U;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
    HandlePtr->sector = 0U;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    HandlePtr->subsector = 0U;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0

    /*Enable Inverter*/
    PWM_SVM_InverterEnable(HandlePtr);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f7ff fe4f 	bl	8003978 <PWM_SVM_InverterEnable>

    for (count = 0U; count < PWM_SVM_NUMBERPHASE; count++)
 8003cda:	2300      	movs	r3, #0
 8003cdc:	60fb      	str	r3, [r7, #12]
 8003cde:	e026      	b.n	8003d2e <PWM_SVM_Start+0xd2>
    {
      /* if trap is enabled, Enable Trap for all the three phases
       map the external trap functionality to event 2 */
      if ((uint8_t) true == svmptr->enable_trap)
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d113      	bne.n	8003d12 <PWM_SVM_Start+0xb6>
      {
        XMC_CCU8_SLICE_ClearEvent(HandlePtr->phase_ptr[count]->slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT2);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	3202      	adds	r2, #2
 8003cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	210a      	movs	r1, #10
 8003cfa:	f7ff fd99 	bl	8003830 <XMC_CCU8_SLICE_ClearEvent>
        XMC_CCU8_SLICE_ClearEvent(HandlePtr->phase_ptr[count]->slice_ptr, XMC_CCU8_SLICE_IRQ_ID_TRAP);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	3202      	adds	r2, #2
 8003d04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	210b      	movs	r1, #11
 8003d0e:	f7ff fd8f 	bl	8003830 <XMC_CCU8_SLICE_ClearEvent>
      }
      /* configure the Start trigger function*/
      XMC_CCU8_SLICE_StartConfig(HandlePtr->phase_ptr[count]->slice_ptr,
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	3202      	adds	r2, #2
 8003d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	2101      	movs	r1, #1
 8003d22:	2201      	movs	r2, #1
 8003d24:	f7fd fc4c 	bl	80015c0 <XMC_CCU8_SLICE_StartConfig>
    HandlePtr->subsector = 0U;

    /*Enable Inverter*/
    PWM_SVM_InverterEnable(HandlePtr);

    for (count = 0U; count < PWM_SVM_NUMBERPHASE; count++)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	60fb      	str	r3, [r7, #12]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d9d5      	bls.n	8003ce0 <PWM_SVM_Start+0x84>
      XMC_CCU8_SLICE_StartConfig(HandlePtr->phase_ptr[count]->slice_ptr,
          (XMC_CCU8_SLICE_EVENT_t) XMC_CCU8_SLICE_EVENT_0,
          (XMC_CCU8_SLICE_START_MODE_t) XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR);
    }

    if ((uint8_t) true == svmptr->enable_trap)
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d129      	bne.n	8003d92 <PWM_SVM_Start+0x136>
    {
      /* Enables trap feature for phase u out 0 and 1*/
      XMC_CCU8_SLICE_EnableTrap(HandlePtr->phase_ptr[0]->slice_ptr,
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	681a      	ldr	r2, [r3, #0]
          ((uint32_t) svmptr->phase_u_out0 | ((uint32_t) svmptr->phase_u_out0 << 1U)));
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	7d1b      	ldrb	r3, [r3, #20]
 8003d48:	4619      	mov	r1, r3
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	7d1b      	ldrb	r3, [r3, #20]
 8003d4e:	005b      	lsls	r3, r3, #1
    }

    if ((uint8_t) true == svmptr->enable_trap)
    {
      /* Enables trap feature for phase u out 0 and 1*/
      XMC_CCU8_SLICE_EnableTrap(HandlePtr->phase_ptr[0]->slice_ptr,
 8003d50:	430b      	orrs	r3, r1
 8003d52:	4610      	mov	r0, r2
 8003d54:	4619      	mov	r1, r3
 8003d56:	f7ff fd09 	bl	800376c <XMC_CCU8_SLICE_EnableTrap>
          ((uint32_t) svmptr->phase_u_out0 | ((uint32_t) svmptr->phase_u_out0 << 1U)));

      /* Enables trap feature for phase v out 0 and 1*/
      XMC_CCU8_SLICE_EnableTrap(HandlePtr->phase_ptr[1]->slice_ptr,
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	681a      	ldr	r2, [r3, #0]
          ((uint32_t) svmptr->phase_v_out0 | ((uint32_t) svmptr->phase_v_out0 << 1U)));
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	7d5b      	ldrb	r3, [r3, #21]
 8003d64:	4619      	mov	r1, r3
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	7d5b      	ldrb	r3, [r3, #21]
 8003d6a:	005b      	lsls	r3, r3, #1
      /* Enables trap feature for phase u out 0 and 1*/
      XMC_CCU8_SLICE_EnableTrap(HandlePtr->phase_ptr[0]->slice_ptr,
          ((uint32_t) svmptr->phase_u_out0 | ((uint32_t) svmptr->phase_u_out0 << 1U)));

      /* Enables trap feature for phase v out 0 and 1*/
      XMC_CCU8_SLICE_EnableTrap(HandlePtr->phase_ptr[1]->slice_ptr,
 8003d6c:	430b      	orrs	r3, r1
 8003d6e:	4610      	mov	r0, r2
 8003d70:	4619      	mov	r1, r3
 8003d72:	f7ff fcfb 	bl	800376c <XMC_CCU8_SLICE_EnableTrap>
          ((uint32_t) svmptr->phase_v_out0 | ((uint32_t) svmptr->phase_v_out0 << 1U)));

      /* Enables trap feature for phase w out 0 and 1*/
      XMC_CCU8_SLICE_EnableTrap(HandlePtr->phase_ptr[2]->slice_ptr,
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	681a      	ldr	r2, [r3, #0]
          ((uint32_t) svmptr->phase_w_out0 | ((uint32_t) svmptr->phase_w_out0 << 1U)));
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	7d9b      	ldrb	r3, [r3, #22]
 8003d80:	4619      	mov	r1, r3
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	7d9b      	ldrb	r3, [r3, #22]
 8003d86:	005b      	lsls	r3, r3, #1
      /* Enables trap feature for phase v out 0 and 1*/
      XMC_CCU8_SLICE_EnableTrap(HandlePtr->phase_ptr[1]->slice_ptr,
          ((uint32_t) svmptr->phase_v_out0 | ((uint32_t) svmptr->phase_v_out0 << 1U)));

      /* Enables trap feature for phase w out 0 and 1*/
      XMC_CCU8_SLICE_EnableTrap(HandlePtr->phase_ptr[2]->slice_ptr,
 8003d88:	430b      	orrs	r3, r1
 8003d8a:	4610      	mov	r0, r2
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	f7ff fced 	bl	800376c <XMC_CCU8_SLICE_EnableTrap>
          ((uint32_t) svmptr->phase_w_out0 | ((uint32_t) svmptr->phase_w_out0 << 1U)));
    }

    /*enable module clock by clearing idle bit if any of current measurement is selected */
    if ((PWM_SVM_CMTYPE_t) PWM_SVM_NONE != svmptr->current_measurement)
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	7c1b      	ldrb	r3, [r3, #16]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d075      	beq.n	8003e86 <PWM_SVM_Start+0x22a>
    {
      XMC_CCU8_SLICE_StartConfig(HandlePtr->phase_ptr[3]->slice_ptr, (XMC_CCU8_SLICE_EVENT_t) XMC_CCU8_SLICE_EVENT_0,
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4618      	mov	r0, r3
 8003da2:	2101      	movs	r1, #1
 8003da4:	2201      	movs	r2, #1
 8003da6:	f7fd fc0b 	bl	80015c0 <XMC_CCU8_SLICE_StartConfig>
          (XMC_CCU8_SLICE_START_MODE_t) XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR);

      /* offset for current measurement trigger */
      if ((PWM_SVM_CMTYPE_t) PWM_SVM_DCLINKCM == svmptr->current_measurement)
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	7c1b      	ldrb	r3, [r3, #16]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d133      	bne.n	8003e1a <PWM_SVM_Start+0x1be>
      {
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[0]->slice_ptr,
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	6819      	ldr	r1, [r3, #0]
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8003dbe:	085b      	lsrs	r3, r3, #1
 8003dc0:	b29a      	uxth	r2, r3
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
          (XMC_CCU8_SLICE_START_MODE_t) XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR);

      /* offset for current measurement trigger */
      if ((PWM_SVM_CMTYPE_t) PWM_SVM_DCLINKCM == svmptr->current_measurement)
      {
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[0]->slice_ptr,
 8003dc8:	4413      	add	r3, r2
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	4608      	mov	r0, r1
 8003dce:	4619      	mov	r1, r3
 8003dd0:	f7ff fd0a 	bl	80037e8 <XMC_CCU8_SLICE_SetTimerValue>
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[1]->slice_ptr,
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	6819      	ldr	r1, [r3, #0]
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8003de0:	085b      	lsrs	r3, r3, #1
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
      /* offset for current measurement trigger */
      if ((PWM_SVM_CMTYPE_t) PWM_SVM_DCLINKCM == svmptr->current_measurement)
      {
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[0]->slice_ptr,
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[1]->slice_ptr,
 8003dea:	4413      	add	r3, r2
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	4608      	mov	r0, r1
 8003df0:	4619      	mov	r1, r3
 8003df2:	f7ff fcf9 	bl	80037e8 <XMC_CCU8_SLICE_SetTimerValue>
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[2]->slice_ptr,
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	6819      	ldr	r1, [r3, #0]
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8003e02:	085b      	lsrs	r3, r3, #1
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
      {
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[0]->slice_ptr,
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[1]->slice_ptr,
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[2]->slice_ptr,
 8003e0c:	4413      	add	r3, r2
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	4608      	mov	r0, r1
 8003e12:	4619      	mov	r1, r3
 8003e14:	f7ff fce8 	bl	80037e8 <XMC_CCU8_SLICE_SetTimerValue>
 8003e18:	e035      	b.n	8003e86 <PWM_SVM_Start+0x22a>
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
      }
      else
      {
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[0]->slice_ptr,
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	6819      	ldr	r1, [r3, #0]
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e26:	b29b      	uxth	r3, r3
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[2]->slice_ptr,
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
      }
      else
      {
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[0]->slice_ptr,
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	b29a      	uxth	r2, r3
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[2]->slice_ptr,
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
      }
      else
      {
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[0]->slice_ptr,
 8003e32:	4413      	add	r3, r2
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	4608      	mov	r0, r1
 8003e38:	4619      	mov	r1, r3
 8003e3a:	f7ff fcd5 	bl	80037e8 <XMC_CCU8_SLICE_SetTimerValue>
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[1]->slice_ptr,
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	6819      	ldr	r1, [r3, #0]
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e4a:	b29b      	uxth	r3, r3
      else
      {
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[0]->slice_ptr,
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[1]->slice_ptr,
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	b29a      	uxth	r2, r3
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
      else
      {
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[0]->slice_ptr,
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[1]->slice_ptr,
 8003e56:	4413      	add	r3, r2
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	4608      	mov	r0, r1
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	f7ff fcc3 	bl	80037e8 <XMC_CCU8_SLICE_SetTimerValue>
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[2]->slice_ptr,
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	6819      	ldr	r1, [r3, #0]
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge ) & (uint16_t) 0xFF)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e6e:	b29b      	uxth	r3, r3
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[1]->slice_ptr,
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[2]->slice_ptr,
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	b29a      	uxth	r2, r3
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge ) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[1]->slice_ptr,
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[2]->slice_ptr,
 8003e7a:	4413      	add	r3, r2
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	4608      	mov	r0, r1
 8003e80:	4619      	mov	r1, r3
 8003e82:	f7ff fcb1 	bl	80037e8 <XMC_CCU8_SLICE_SetTimerValue>
                    + (uint16_t) svmptr->current_offset));
      }
    }

    /* synchronous start of CCU8 slices */
    XMC_SCU_SetCcuTriggerHigh((uint32_t)(svmptr->sync_start_mask));
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	6a1b      	ldr	r3, [r3, #32]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7ff fce6 	bl	800385c <XMC_SCU_SetCcuTriggerHigh>

    /* disable the Start trigger function*/
    XMC_CCU8_SLICE_StartConfig(HandlePtr->phase_ptr[0]->slice_ptr, (XMC_CCU8_SLICE_EVENT_t) XMC_CCU8_SLICE_EVENT_NONE,
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4618      	mov	r0, r3
 8003e98:	2100      	movs	r1, #0
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f7fd fb90 	bl	80015c0 <XMC_CCU8_SLICE_StartConfig>
        (XMC_CCU8_SLICE_START_MODE_t) XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR);
    XMC_CCU8_SLICE_StartConfig(HandlePtr->phase_ptr[1]->slice_ptr, (XMC_CCU8_SLICE_EVENT_t) XMC_CCU8_SLICE_EVENT_NONE,
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	2100      	movs	r1, #0
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f7fd fb88 	bl	80015c0 <XMC_CCU8_SLICE_StartConfig>
        (XMC_CCU8_SLICE_START_MODE_t) XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR);
    XMC_CCU8_SLICE_StartConfig(HandlePtr->phase_ptr[2]->slice_ptr, (XMC_CCU8_SLICE_EVENT_t) XMC_CCU8_SLICE_EVENT_NONE,
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	2100      	movs	r1, #0
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f7fd fb80 	bl	80015c0 <XMC_CCU8_SLICE_StartConfig>
        (XMC_CCU8_SLICE_START_MODE_t) XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR);
    if ((PWM_SVM_CMTYPE_t) PWM_SVM_NONE != svmptr->current_measurement)
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	7c1b      	ldrb	r3, [r3, #16]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d007      	beq.n	8003ed8 <PWM_SVM_Start+0x27c>
    {
      XMC_CCU8_SLICE_StartConfig(HandlePtr->phase_ptr[3]->slice_ptr, (XMC_CCU8_SLICE_EVENT_t) XMC_CCU8_SLICE_EVENT_NONE,
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	2100      	movs	r1, #0
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f7fd fb74 	bl	80015c0 <XMC_CCU8_SLICE_StartConfig>
          (XMC_CCU8_SLICE_START_MODE_t) XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR);
    }

    /* disable synchronous start of CCU8 slices */
    XMC_SCU_SetCcuTriggerLow((uint32_t)(svmptr->sync_start_mask));
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	6a1b      	ldr	r3, [r3, #32]
 8003edc:	4618      	mov	r0, r3
 8003ede:	f7ff fccf 	bl	8003880 <XMC_SCU_SetCcuTriggerLow>

    /* change the state to RUNNING*/
    HandlePtr->state = PWM_SVM_RUNNING;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2202      	movs	r2, #2
 8003ee6:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  }
}
 8003eea:	3710      	adds	r7, #16
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <PWM_SVM_Stop>:

/**
 * This function stops the CCU8 slices used to generate SVM.
 */
void PWM_SVM_Stop(PWM_SVM_t* const HandlePtr)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  uint32_t count;
  const PWM_SVM_Config_t* const svmptr = HandlePtr->confighandle_ptr;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	60bb      	str	r3, [r7, #8]
  XMC_ASSERT("PWM_SVM_Stop:NULL Handle Pointer", (HandlePtr != (PWM_SVM_t *) NULL));
  /*Inverter Enable pin level is set to passive level.*/
  PWM_SVM_InverterDisable(HandlePtr);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f7ff fd14 	bl	800392c <PWM_SVM_InverterDisable>

  /* Disable trap */
  if ((uint8_t) 1 == svmptr->enable_trap)
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d13e      	bne.n	8003f8c <PWM_SVM_Stop+0x9c>
  {
    /* Disables trap feature for phase u out 0 and 1*/
    XMC_CCU8_SLICE_DisableTrap(HandlePtr->phase_ptr[0]->slice_ptr,
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	681a      	ldr	r2, [r3, #0]
        ((uint32_t) svmptr->phase_u_out0 | ((uint32_t) svmptr->phase_u_out0 << 1U)));
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	7d1b      	ldrb	r3, [r3, #20]
 8003f18:	4619      	mov	r1, r3
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	7d1b      	ldrb	r3, [r3, #20]
 8003f1e:	005b      	lsls	r3, r3, #1

  /* Disable trap */
  if ((uint8_t) 1 == svmptr->enable_trap)
  {
    /* Disables trap feature for phase u out 0 and 1*/
    XMC_CCU8_SLICE_DisableTrap(HandlePtr->phase_ptr[0]->slice_ptr,
 8003f20:	430b      	orrs	r3, r1
 8003f22:	4610      	mov	r0, r2
 8003f24:	4619      	mov	r1, r3
 8003f26:	f7ff fc33 	bl	8003790 <XMC_CCU8_SLICE_DisableTrap>
        ((uint32_t) svmptr->phase_u_out0 | ((uint32_t) svmptr->phase_u_out0 << 1U)));

    /* Disables trap feature for phase v out 0 and 1*/
    XMC_CCU8_SLICE_DisableTrap(HandlePtr->phase_ptr[1]->slice_ptr,
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	681a      	ldr	r2, [r3, #0]
        ((uint32_t) svmptr->phase_v_out0 | ((uint32_t) svmptr->phase_v_out0 << 1U)));
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	7d5b      	ldrb	r3, [r3, #21]
 8003f34:	4619      	mov	r1, r3
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	7d5b      	ldrb	r3, [r3, #21]
 8003f3a:	005b      	lsls	r3, r3, #1
    /* Disables trap feature for phase u out 0 and 1*/
    XMC_CCU8_SLICE_DisableTrap(HandlePtr->phase_ptr[0]->slice_ptr,
        ((uint32_t) svmptr->phase_u_out0 | ((uint32_t) svmptr->phase_u_out0 << 1U)));

    /* Disables trap feature for phase v out 0 and 1*/
    XMC_CCU8_SLICE_DisableTrap(HandlePtr->phase_ptr[1]->slice_ptr,
 8003f3c:	430b      	orrs	r3, r1
 8003f3e:	4610      	mov	r0, r2
 8003f40:	4619      	mov	r1, r3
 8003f42:	f7ff fc25 	bl	8003790 <XMC_CCU8_SLICE_DisableTrap>
        ((uint32_t) svmptr->phase_v_out0 | ((uint32_t) svmptr->phase_v_out0 << 1U)));

    /* Disables trap feature for phase w out 0 and 1*/
    XMC_CCU8_SLICE_DisableTrap(HandlePtr->phase_ptr[2]->slice_ptr,
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	681a      	ldr	r2, [r3, #0]
        ((uint32_t) svmptr->phase_w_out0 | ((uint32_t) svmptr->phase_w_out0 << 1U)));
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	7d9b      	ldrb	r3, [r3, #22]
 8003f50:	4619      	mov	r1, r3
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	7d9b      	ldrb	r3, [r3, #22]
 8003f56:	005b      	lsls	r3, r3, #1
    /* Disables trap feature for phase v out 0 and 1*/
    XMC_CCU8_SLICE_DisableTrap(HandlePtr->phase_ptr[1]->slice_ptr,
        ((uint32_t) svmptr->phase_v_out0 | ((uint32_t) svmptr->phase_v_out0 << 1U)));

    /* Disables trap feature for phase w out 0 and 1*/
    XMC_CCU8_SLICE_DisableTrap(HandlePtr->phase_ptr[2]->slice_ptr,
 8003f58:	430b      	orrs	r3, r1
 8003f5a:	4610      	mov	r0, r2
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	f7ff fc17 	bl	8003790 <XMC_CCU8_SLICE_DisableTrap>
        ((uint32_t) svmptr->phase_w_out0 | ((uint32_t) svmptr->phase_w_out0 << 1U)));

    XMC_CCU8_SLICE_ClearEvent(HandlePtr->phase_ptr[0]->slice_ptr, XMC_CCU8_SLICE_IRQ_ID_TRAP);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	210b      	movs	r1, #11
 8003f6c:	f7ff fc60 	bl	8003830 <XMC_CCU8_SLICE_ClearEvent>
    XMC_CCU8_SLICE_ClearEvent(HandlePtr->phase_ptr[1]->slice_ptr, XMC_CCU8_SLICE_IRQ_ID_TRAP);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4618      	mov	r0, r3
 8003f78:	210b      	movs	r1, #11
 8003f7a:	f7ff fc59 	bl	8003830 <XMC_CCU8_SLICE_ClearEvent>
    XMC_CCU8_SLICE_ClearEvent(HandlePtr->phase_ptr[2]->slice_ptr, XMC_CCU8_SLICE_IRQ_ID_TRAP);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4618      	mov	r0, r3
 8003f86:	210b      	movs	r1, #11
 8003f88:	f7ff fc52 	bl	8003830 <XMC_CCU8_SLICE_ClearEvent>
  }

  /* stop all three phases */
  for (count = 0U; count < PWM_SVM_NUMBERPHASE; count++)
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	60fb      	str	r3, [r7, #12]
 8003f90:	e00b      	b.n	8003faa <PWM_SVM_Stop+0xba>
  {
    XMC_CCU8_SLICE_StopTimer(HandlePtr->phase_ptr[count]->slice_ptr);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	3202      	adds	r2, #2
 8003f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7ff fc08 	bl	80037b4 <XMC_CCU8_SLICE_StopTimer>
    XMC_CCU8_SLICE_ClearEvent(HandlePtr->phase_ptr[1]->slice_ptr, XMC_CCU8_SLICE_IRQ_ID_TRAP);
    XMC_CCU8_SLICE_ClearEvent(HandlePtr->phase_ptr[2]->slice_ptr, XMC_CCU8_SLICE_IRQ_ID_TRAP);
  }

  /* stop all three phases */
  for (count = 0U; count < PWM_SVM_NUMBERPHASE; count++)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	60fb      	str	r3, [r7, #12]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d9f0      	bls.n	8003f92 <PWM_SVM_Stop+0xa2>
  {
    XMC_CCU8_SLICE_StopTimer(HandlePtr->phase_ptr[count]->slice_ptr);
  }
  if ((PWM_SVM_CMTYPE_t) PWM_SVM_NONE != svmptr->current_measurement)
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	7c1b      	ldrb	r3, [r3, #16]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d005      	beq.n	8003fc4 <PWM_SVM_Stop+0xd4>
  {
    XMC_CCU8_SLICE_StopTimer(HandlePtr->phase_ptr[3]->slice_ptr);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	695b      	ldr	r3, [r3, #20]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7ff fbf8 	bl	80037b4 <XMC_CCU8_SLICE_StopTimer>
  }

  XMC_SCU_SetCcuTriggerLow((uint32_t) svmptr->sync_start_mask);
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	6a1b      	ldr	r3, [r3, #32]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7ff fc59 	bl	8003880 <XMC_SCU_SetCcuTriggerLow>
  HandlePtr->state = (PWM_SVM_STATE_t) PWM_SVM_STOPPED;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2203      	movs	r2, #3
 8003fd2:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

}
 8003fd6:	3710      	adds	r7, #16
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <PWM_SVM_SetPWMFrequency>:
}


/*This API updates the PWM Frequency in terms of hertz*/
PWM_SVM_STATUS_t PWM_SVM_SetPWMFrequency(PWM_SVM_t* const HandlePtr, uint32_t Frequency)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b088      	sub	sp, #32
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  uint32_t pwm_time;
  uint32_t period;
  uint32_t count;
  uint32_t max_amplitude_count;
  PWM_SVM_STATUS_t status = PWM_SVM_STATUS_FAILURE;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	74fb      	strb	r3, [r7, #19]
  const PWM_SVM_Config_t* const svmptr = HandlePtr->confighandle_ptr;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	60fb      	str	r3, [r7, #12]
  XMC_ASSERT("PWM_SVM_SetPWMFrequency:NULL Handle Pointer", (HandlePtr != (PWM_SVM_t *) NULL));

  if (((PWM_SVM_STATE_t) PWM_SVM_INITIALIZED == HandlePtr->state)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d004      	beq.n	8004004 <PWM_SVM_SetPWMFrequency+0x28>
      || ((PWM_SVM_STATE_t) PWM_SVM_STOPPED == HandlePtr->state))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8004000:	2b03      	cmp	r3, #3
 8004002:	d17e      	bne.n	8004102 <PWM_SVM_SetPWMFrequency+0x126>
  {
    if ((Frequency > HandlePtr->confighandle_ptr->period_min) && (Frequency <= HandlePtr->confighandle_ptr->period_max))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	429a      	cmp	r2, r3
 800400e:	d276      	bcs.n	80040fe <PWM_SVM_SetPWMFrequency+0x122>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	429a      	cmp	r2, r3
 800401a:	d370      	bcc.n	80040fe <PWM_SVM_SetPWMFrequency+0x122>
    {
      pwm_time = (uint32_t)((svmptr->module_freq) / Frequency);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	69da      	ldr	r2, [r3, #28]
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	fbb2 f3f3 	udiv	r3, r2, r3
 8004026:	60bb      	str	r3, [r7, #8]

      if ((uint32_t) XMC_CCU8_SLICE_TIMER_COUNT_MODE_EA == HandlePtr->phase_configinit_ptr->timer_mode) /* EDGE_ALIGNED */
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	b2db      	uxtb	r3, r3
 8004034:	2b00      	cmp	r3, #0
 8004036:	d103      	bne.n	8004040 <PWM_SVM_SetPWMFrequency+0x64>
      {
        period = (uint32_t)(pwm_time - 1U);
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	3b01      	subs	r3, #1
 800403c:	61fb      	str	r3, [r7, #28]
 800403e:	e003      	b.n	8004048 <PWM_SVM_SetPWMFrequency+0x6c>
      }
      else /*CENTER_ALIGNED - hence half of the calculated period value is used*/
      {
        period = (uint32_t)((pwm_time >> 1U) - 1U);
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	085b      	lsrs	r3, r3, #1
 8004044:	3b01      	subs	r3, #1
 8004046:	61fb      	str	r3, [r7, #28]
      }
      /*set max amplitude for pseudo null vector based on scheme*/
      if ((PWM_SVM_SVMCONFIG_t) PWM_SVM_PSEUDONULL_3ACTIVE == HandlePtr->svm_config)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800404e:	2b04      	cmp	r3, #4
 8004050:	d10a      	bne.n	8004068 <PWM_SVM_SetPWMFrequency+0x8c>
      {
        max_amplitude_count = (uint32_t)((uint32_t)PWM_SVM_MAX_AMPLITUDE - (uint32_t)((uint32_t) 3 * (uint32_t) HandlePtr->tmin_14));
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8004058:	461a      	mov	r2, r3
 800405a:	4613      	mov	r3, r2
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	4413      	add	r3, r2
 8004060:	f5c3 4380 	rsb	r3, r3, #16384	; 0x4000
 8004064:	617b      	str	r3, [r7, #20]
 8004066:	e013      	b.n	8004090 <PWM_SVM_SetPWMFrequency+0xb4>
      }
      else if ((PWM_SVM_SVMCONFIG_t) PWM_SVM_PSEUDONULL_4ACTIVE == HandlePtr->svm_config)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800406e:	2b05      	cmp	r3, #5
 8004070:	d10b      	bne.n	800408a <PWM_SVM_SetPWMFrequency+0xae>
      {
        max_amplitude_count = (uint32_t)((uint32_t)PWM_SVM_MAX_AMPLITUDE - (uint32_t)((uint32_t) 4 * (uint32_t) HandlePtr->tmin_14));
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8004078:	461a      	mov	r2, r3
 800407a:	4613      	mov	r3, r2
 800407c:	079b      	lsls	r3, r3, #30
 800407e:	1a9b      	subs	r3, r3, r2
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8004086:	617b      	str	r3, [r7, #20]
 8004088:	e002      	b.n	8004090 <PWM_SVM_SetPWMFrequency+0xb4>
      }
      else
      {
        max_amplitude_count = (uint32_t) PWM_SVM_MAX_AMPLITUDE;
 800408a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800408e:	617b      	str	r3, [r7, #20]
      }
      /*update the calcualted period value in period register*/
      for (count = 0U; count < PWM_SVM_NUMBERPHASE; count++)
 8004090:	2300      	movs	r3, #0
 8004092:	61bb      	str	r3, [r7, #24]
 8004094:	e00e      	b.n	80040b4 <PWM_SVM_SetPWMFrequency+0xd8>
      {
        XMC_CCU8_SLICE_SetTimerPeriodMatch(HandlePtr->phase_ptr[count]->slice_ptr, (uint16_t) period);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	3202      	adds	r2, #2
 800409c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	4610      	mov	r0, r2
 80040a8:	4619      	mov	r1, r3
 80040aa:	f7fd fb75 	bl	8001798 <XMC_CCU8_SLICE_SetTimerPeriodMatch>
      else
      {
        max_amplitude_count = (uint32_t) PWM_SVM_MAX_AMPLITUDE;
      }
      /*update the calcualted period value in period register*/
      for (count = 0U; count < PWM_SVM_NUMBERPHASE; count++)
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	3301      	adds	r3, #1
 80040b2:	61bb      	str	r3, [r7, #24]
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d9ed      	bls.n	8004096 <PWM_SVM_SetPWMFrequency+0xba>
      {
        XMC_CCU8_SLICE_SetTimerPeriodMatch(HandlePtr->phase_ptr[count]->slice_ptr, (uint16_t) period);
      }
      if ((PWM_SVM_CMTYPE_t) PWM_SVM_NONE != HandlePtr->confighandle_ptr->current_measurement)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	7c1b      	ldrb	r3, [r3, #16]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d008      	beq.n	80040d6 <PWM_SVM_SetPWMFrequency+0xfa>
      {
        XMC_CCU8_SLICE_SetTimerPeriodMatch(HandlePtr->phase_ptr[3]->slice_ptr, (uint16_t) period);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	4610      	mov	r0, r2
 80040d0:	4619      	mov	r1, r3
 80040d2:	f7fd fb61 	bl	8001798 <XMC_CCU8_SLICE_SetTimerPeriodMatch>
      }

      /*Enable the shadow transfer for all three slice*/
      XMC_CCU8_EnableShadowTransfer(HandlePtr->global_ptr, svmptr->shadow_transfer_mask);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685a      	ldr	r2, [r3, #4]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040de:	4610      	mov	r0, r2
 80040e0:	4619      	mov	r1, r3
 80040e2:	f7ff fb73 	bl	80037cc <XMC_CCU8_EnableShadowTransfer>
      /* update dynamic handle parameters */
      HandlePtr->period = (uint32_t) period;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	69fa      	ldr	r2, [r7, #28]
 80040ea:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      HandlePtr->max_amplitude = (uint16_t) max_amplitude_count;
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	b29a      	uxth	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
      status = PWM_SVM_STATUS_SUCCESS;
 80040f8:	2300      	movs	r3, #0
 80040fa:	74fb      	strb	r3, [r7, #19]
 80040fc:	e001      	b.n	8004102 <PWM_SVM_SetPWMFrequency+0x126>
    }
    else
    {
      status = PWM_SVM_INVALID_PARAM;
 80040fe:	2302      	movs	r3, #2
 8004100:	74fb      	strb	r3, [r7, #19]
    }
  }
  return status;
 8004102:	7cfb      	ldrb	r3, [r7, #19]
}
 8004104:	4618      	mov	r0, r3
 8004106:	3720      	adds	r7, #32
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	460b      	mov	r3, r1
 8004116:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1) << slice_number;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	68da      	ldr	r2, [r3, #12]
 800411c:	78fb      	ldrb	r3, [r7, #3]
 800411e:	2101      	movs	r1, #1
 8004120:	fa01 f303 	lsl.w	r3, r1, r3
 8004124:	431a      	orrs	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	60da      	str	r2, [r3, #12]
}
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <XMC_CCU4_SLICE_EnableTrap>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_TrapConfig()<BR> XMC_CCU4_SLICE_DisableTrap()<BR> XMC_CCU4_SLICE_ConfigureEvent()<BR>
 *  XMC_CCU4_SLICE_SetInput().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableTrap(XMC_CCU4_SLICE_t *const slice)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableTrap:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TC |= (uint32_t) CCU4_CC4_TC_TRAPE_Msk;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	695b      	ldr	r3, [r3, #20]
 8004140:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	615a      	str	r2, [r3, #20]
}
 8004148:	370c      	adds	r7, #12
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop

08004154 <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	60da      	str	r2, [r3, #12]
}
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	460b      	mov	r3, r1
 8004176:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 8004178:	887a      	ldrh	r2, [r7, #2]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	460b      	mov	r3, r1
 8004192:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 8004194:	887a      	ldrh	r2, [r7, #2]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	683a      	ldr	r2, [r7, #0]
 80041b2:	611a      	str	r2, [r3, #16]
}
 80041b4:	370c      	adds	r7, #12
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop

080041c0 <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	460b      	mov	r3, r1
 80041ca:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80041d2:	78fb      	ldrb	r3, [r7, #3]
 80041d4:	2101      	movs	r1, #1
 80041d6:	fa01 f303 	lsl.w	r3, r1, r3
 80041da:	431a      	orrs	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <PWM_CCU4_Init>:
  return version;
}

/* This function initializes the app */
PWM_CCU4_STATUS_t PWM_CCU4_Init(PWM_CCU4_t* handle_ptr)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b086      	sub	sp, #24
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  PWM_CCU4_STATUS_t status;
  GLOBAL_CCU4_STATUS_t status_ccu4_global;
  uint32_t frequency_module;
  uint32_t prescalar;

  status = PWM_CCU4_STATUS_FAILURE;
 80041f4:	2301      	movs	r3, #1
 80041f6:	75fb      	strb	r3, [r7, #23]
  status_ccu4_global = GLOBAL_CCU4_STATUS_FAILURE;
 80041f8:	2301      	movs	r3, #1
 80041fa:	75bb      	strb	r3, [r7, #22]
  XMC_ASSERT("PWM_CCU4_Init:handle_ptr is NULL", (handle_ptr != NULL));

  if (PWM_CCU4_STATE_UNINITIALIZED == handle_ptr->state)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	7f1b      	ldrb	r3, [r3, #28]
 8004200:	2b00      	cmp	r3, #0
 8004202:	f040 808c 	bne.w	800431e <PWM_CCU4_Init+0x132>
  {
    /* Initialize consumed Apps */
    status_ccu4_global = GLOBAL_CCU4_Init(handle_ptr->config_ptr->global_ccu4_handle);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800420c:	4618      	mov	r0, r3
 800420e:	f001 f8e1 	bl	80053d4 <GLOBAL_CCU4_Init>
 8004212:	4603      	mov	r3, r0
 8004214:	75bb      	strb	r3, [r7, #22]

    /* Initialize CCU4x_CC4y slice */
    if (GLOBAL_CCU4_STATUS_SUCCESS == status_ccu4_global)
 8004216:	7dbb      	ldrb	r3, [r7, #22]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d17c      	bne.n	8004316 <PWM_CCU4_Init+0x12a>
    {
      XMC_DEBUG("PWM_CCU4_Init:Initilizing slice");

      /* Configure CCU4x_CC4y slice as timer */
      XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ccu4_cc4_slice_timer_ptr);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	689a      	ldr	r2, [r3, #8]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004226:	4610      	mov	r0, r2
 8004228:	4619      	mov	r1, r3
 800422a:	f7fc fe27 	bl	8000e7c <XMC_CCU4_SLICE_CompareInit>
      /* Set period match value of the timer  */
      XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->period_value);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	689a      	ldr	r2, [r3, #8]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	885b      	ldrh	r3, [r3, #2]
 8004238:	4610      	mov	r0, r2
 800423a:	4619      	mov	r1, r3
 800423c:	f7ff ff96 	bl	800416c <XMC_CCU4_SLICE_SetTimerPeriodMatch>

      /* Set timer compare match value for channel 1 */
      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, (uint16_t) handle_ptr->config_ptr->compare_value);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689a      	ldr	r2, [r3, #8]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	889b      	ldrh	r3, [r3, #4]
 800424a:	4610      	mov	r0, r2
 800424c:	4619      	mov	r1, r3
 800424e:	f7ff ff9b 	bl	8004188 <XMC_CCU4_SLICE_SetTimerCompareMatch>

      if (1U == handle_ptr->config_ptr->ccu4_cc4_slice_timer_ptr->mcm_enable)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004258:	78db      	ldrb	r3, [r3, #3]
 800425a:	f003 0302 	and.w	r3, r3, #2
 800425e:	b2db      	uxtb	r3, r3
 8004260:	2b00      	cmp	r3, #0
 8004262:	d008      	beq.n	8004276 <PWM_CCU4_Init+0x8a>
      {
        XMC_CCU4_SetMultiChannelShadowTransferMode(handle_ptr->ccu4_module_ptr,
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685a      	ldr	r2, [r3, #4]
                                                   (uint32_t) handle_ptr->config_ptr->mcm_shadow_txfr_mode);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      /* Set timer compare match value for channel 1 */
      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, (uint16_t) handle_ptr->config_ptr->compare_value);

      if (1U == handle_ptr->config_ptr->ccu4_cc4_slice_timer_ptr->mcm_enable)
      {
        XMC_CCU4_SetMultiChannelShadowTransferMode(handle_ptr->ccu4_module_ptr,
 800426e:	4610      	mov	r0, r2
 8004270:	4619      	mov	r1, r3
 8004272:	f7fc fde7 	bl	8000e44 <XMC_CCU4_SetMultiChannelShadowTransferMode>
        XMC_CCU4_SLICE_EnableCascadedShadowTransfer(handle_ptr->ccu4_slice_ptr);
      }
#endif

      /* Transfer value from shadow timer registers to actual timer registers */
      XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_module_ptr, handle_ptr->shadow_txfr_msk);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685a      	ldr	r2, [r3, #4]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	4610      	mov	r0, r2
 8004280:	4619      	mov	r1, r3
 8004282:	f7ff ff8f 	bl	80041a4 <XMC_CCU4_EnableShadowTransfer>
      XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_module_ptr, handle_ptr->dither_shadow_txfr_msk);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685a      	ldr	r2, [r3, #4]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	4610      	mov	r0, r2
 8004290:	4619      	mov	r1, r3
 8004292:	f7ff ff87 	bl	80041a4 <XMC_CCU4_EnableShadowTransfer>

      /* Configure events */
      PWM_CCU4_lConfigure_Events(handle_ptr);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 f8e2 	bl	8004460 <PWM_CCU4_lConfigure_Events>

      /* Enable the interrupts */
      PWM_CCU4_lInit_Interrupt(handle_ptr);
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f000 f845 	bl	800432c <PWM_CCU4_lInit_Interrupt>

      /*Initializes the GPIO*/
      if ((bool) true == handle_ptr->config_ptr->gpio_ch_out_enable)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00e      	beq.n	80042cc <PWM_CCU4_Init+0xe0>
      {
        XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch_out_ptr, handle_ptr->config_ptr->gpio_ch_out_pin,
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
                      handle_ptr->config_ptr->gpio_ch_out_config_ptr);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
      PWM_CCU4_lInit_Interrupt(handle_ptr);

      /*Initializes the GPIO*/
      if ((bool) true == handle_ptr->config_ptr->gpio_ch_out_enable)
      {
        XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch_out_ptr, handle_ptr->config_ptr->gpio_ch_out_pin,
 80042c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042c2:	4608      	mov	r0, r1
 80042c4:	4611      	mov	r1, r2
 80042c6:	461a      	mov	r2, r3
 80042c8:	f7fc f86c 	bl	80003a4 <XMC_GPIO_Init>
                      handle_ptr->config_ptr->gpio_ch_out_config_ptr);
      }

      frequency_module = handle_ptr->config_ptr->global_ccu4_handle->module_frequency;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	613b      	str	r3, [r7, #16]
      prescalar = (uint32_t) handle_ptr->config_ptr->ccu4_cc4_slice_timer_ptr->prescaler_initval;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042dc:	791b      	ldrb	r3, [r3, #4]
 80042de:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	60fb      	str	r3, [r7, #12]
      frequency_module = frequency_module / ((uint32_t) 1 << prescalar);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	693a      	ldr	r2, [r7, #16]
 80042ea:	fa22 f303 	lsr.w	r3, r2, r3
 80042ee:	613b      	str	r3, [r7, #16]
      handle_ptr->frequency_tclk = frequency_module;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	621a      	str	r2, [r3, #32]

      handle_ptr->state = PWM_CCU4_STATE_INITIALIZED;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	771a      	strb	r2, [r3, #28]
      status = PWM_CCU4_STATUS_SUCCESS;
 80042fc:	2300      	movs	r3, #0
 80042fe:	75fb      	strb	r3, [r7, #23]

      /* Start the PWM generation if start at initialization is enabled */
      if ((bool) true == handle_ptr->config_ptr->start_control)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00b      	beq.n	8004322 <PWM_CCU4_Init+0x136>
      {
        status = PWM_CCU4_Start(handle_ptr);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 f98c 	bl	8004628 <PWM_CCU4_Start>
 8004310:	4603      	mov	r3, r0
 8004312:	75fb      	strb	r3, [r7, #23]
 8004314:	e005      	b.n	8004322 <PWM_CCU4_Init+0x136>
      }
    }
    else
    {
      handle_ptr->state = PWM_CCU4_STATE_UNINITIALIZED;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	771a      	strb	r2, [r3, #28]
 800431c:	e001      	b.n	8004322 <PWM_CCU4_Init+0x136>
    }

  }
  else
  {
    status = PWM_CCU4_STATUS_ALREADY_INITIALIZED;
 800431e:	2302      	movs	r3, #2
 8004320:	75fb      	strb	r3, [r7, #23]
    XMC_DEBUG("PWM_CCU4_Init:PWM_CCU4_STATUS_ALREADY_INITIALIZED");
  }

  return (status);
 8004322:	7dfb      	ldrb	r3, [r7, #23]
} /* end of PWM_CCU4_Init() api */
 8004324:	4618      	mov	r0, r3
 8004326:	3718      	adds	r7, #24
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <PWM_CCU4_lInit_Interrupt>:

static void PWM_CCU4_lInit_Interrupt(PWM_CCU4_t* handle_ptr)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]

  /* Enable events. Bind event to corresponding service request node.Enable Interrupts. The user may choose to 
   disable the interrupts by LLD calls. */
  if ((bool) true == handle_ptr->config_ptr->int_per_match)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	799b      	ldrb	r3, [r3, #6]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00f      	beq.n	800435e <PWM_CCU4_lInit_Interrupt+0x32>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt period match enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_per_match);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
  /* Enable events. Bind event to corresponding service request node.Enable Interrupts. The user may choose to 
   disable the interrupts by LLD calls. */
  if ((bool) true == handle_ptr->config_ptr->int_per_match)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt period match enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 8004346:	7b5b      	ldrb	r3, [r3, #13]
 8004348:	4610      	mov	r0, r2
 800434a:	2100      	movs	r1, #0
 800434c:	461a      	mov	r2, r3
 800434e:	f7fc ffeb 	bl	8001328 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_per_match);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	4618      	mov	r0, r3
 8004358:	2100      	movs	r1, #0
 800435a:	f7ff ff31 	bl	80041c0 <XMC_CCU4_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp_match_up)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	79db      	ldrb	r3, [r3, #7]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00f      	beq.n	8004388 <PWM_CCU4_lInit_Interrupt+0x5c>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt compare match up enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP,
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_cmp_match_up);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp_match_up)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt compare match up enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP,
 8004370:	7b9b      	ldrb	r3, [r3, #14]
 8004372:	4610      	mov	r0, r2
 8004374:	2102      	movs	r1, #2
 8004376:	461a      	mov	r2, r3
 8004378:	f7fc ffd6 	bl	8001328 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_cmp_match_up);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	4618      	mov	r0, r3
 8004382:	2102      	movs	r1, #2
 8004384:	f7ff ff1c 	bl	80041c0 <XMC_CCU4_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp_match_down)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	7a1b      	ldrb	r3, [r3, #8]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00f      	beq.n	80043b2 <PWM_CCU4_lInit_Interrupt+0x86>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt compare match down enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN,
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_cmp_match_down);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp_match_down)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt compare match down enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN,
 800439a:	7bdb      	ldrb	r3, [r3, #15]
 800439c:	4610      	mov	r0, r2
 800439e:	2103      	movs	r1, #3
 80043a0:	461a      	mov	r2, r3
 80043a2:	f7fc ffc1 	bl	8001328 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_cmp_match_down);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	4618      	mov	r0, r3
 80043ac:	2103      	movs	r1, #3
 80043ae:	f7ff ff07 	bl	80041c0 <XMC_CCU4_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_one_match_down)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	7a5b      	ldrb	r3, [r3, #9]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00f      	beq.n	80043dc <PWM_CCU4_lInit_Interrupt+0xb0>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt one match enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH,
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_one_match_down);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
  }

  if ((bool) true == handle_ptr->config_ptr->int_one_match_down)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt one match enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH,
 80043c4:	7c1b      	ldrb	r3, [r3, #16]
 80043c6:	4610      	mov	r0, r2
 80043c8:	2101      	movs	r1, #1
 80043ca:	461a      	mov	r2, r3
 80043cc:	f7fc ffac 	bl	8001328 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_one_match_down);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	4618      	mov	r0, r3
 80043d6:	2101      	movs	r1, #1
 80043d8:	f7ff fef2 	bl	80041c0 <XMC_CCU4_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_e0)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	7a9b      	ldrb	r3, [r3, #10]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00f      	beq.n	8004406 <PWM_CCU4_lInit_Interrupt+0xda>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt event 0 enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT0,
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_e0);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
  }

  if ((bool) true == handle_ptr->config_ptr->int_e0)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt event 0 enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT0,
 80043ee:	7c5b      	ldrb	r3, [r3, #17]
 80043f0:	4610      	mov	r0, r2
 80043f2:	2108      	movs	r1, #8
 80043f4:	461a      	mov	r2, r3
 80043f6:	f7fc ff97 	bl	8001328 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_e0);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT0);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	4618      	mov	r0, r3
 8004400:	2108      	movs	r1, #8
 8004402:	f7ff fedd 	bl	80041c0 <XMC_CCU4_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_e1)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	7adb      	ldrb	r3, [r3, #11]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00f      	beq.n	8004430 <PWM_CCU4_lInit_Interrupt+0x104>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt event 1 enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT1,
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_e1);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
  }

  if ((bool) true == handle_ptr->config_ptr->int_e1)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt event 1 enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT1,
 8004418:	7c9b      	ldrb	r3, [r3, #18]
 800441a:	4610      	mov	r0, r2
 800441c:	2109      	movs	r1, #9
 800441e:	461a      	mov	r2, r3
 8004420:	f7fc ff82 	bl	8001328 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_e1);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT1);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	4618      	mov	r0, r3
 800442a:	2109      	movs	r1, #9
 800442c:	f7ff fec8 	bl	80041c0 <XMC_CCU4_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_e2)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	7b1b      	ldrb	r3, [r3, #12]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00f      	beq.n	800445a <PWM_CCU4_lInit_Interrupt+0x12e>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt event 2 enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT2,
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_e2);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
  }

  if ((bool) true == handle_ptr->config_ptr->int_e2)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt event 2 enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT2,
 8004442:	7cdb      	ldrb	r3, [r3, #19]
 8004444:	4610      	mov	r0, r2
 8004446:	210a      	movs	r1, #10
 8004448:	461a      	mov	r2, r3
 800444a:	f7fc ff6d 	bl	8001328 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_e2);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT2);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	4618      	mov	r0, r3
 8004454:	210a      	movs	r1, #10
 8004456:	f7ff feb3 	bl	80041c0 <XMC_CCU4_SLICE_EnableEvent>
  }
}
 800445a:	3708      	adds	r7, #8
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <PWM_CCU4_lConfigure_Events>:

static void PWM_CCU4_lConfigure_Events(PWM_CCU4_t* handle_ptr)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]

  /* Configure slice to a external event 0 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_0,
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	689a      	ldr	r2, [r3, #8]
                                handle_ptr->config_ptr->event0_config_ptr);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]

static void PWM_CCU4_lConfigure_Events(PWM_CCU4_t* handle_ptr)
{

  /* Configure slice to a external event 0 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_0,
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	4610      	mov	r0, r2
 8004474:	2101      	movs	r1, #1
 8004476:	461a      	mov	r2, r3
 8004478:	f7fc feec 	bl	8001254 <XMC_CCU4_SLICE_ConfigureEvent>
                                handle_ptr->config_ptr->event0_config_ptr);

  /* Configure slice to a external event 1 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_1,
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	689a      	ldr	r2, [r3, #8]
                                handle_ptr->config_ptr->event1_config_ptr);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
  /* Configure slice to a external event 0 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_0,
                                handle_ptr->config_ptr->event0_config_ptr);

  /* Configure slice to a external event 1 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_1,
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	4610      	mov	r0, r2
 8004488:	2102      	movs	r1, #2
 800448a:	461a      	mov	r2, r3
 800448c:	f7fc fee2 	bl	8001254 <XMC_CCU4_SLICE_ConfigureEvent>
                                handle_ptr->config_ptr->event1_config_ptr);

  /* Configure slice to a external event 2 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_2,
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	689a      	ldr	r2, [r3, #8]
                                handle_ptr->config_ptr->event2_config_ptr);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
  /* Configure slice to a external event 1 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_1,
                                handle_ptr->config_ptr->event1_config_ptr);

  /* Configure slice to a external event 2 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_2,
 8004498:	69db      	ldr	r3, [r3, #28]
 800449a:	4610      	mov	r0, r2
 800449c:	2103      	movs	r1, #3
 800449e:	461a      	mov	r2, r3
 80044a0:	f7fc fed8 	bl	8001254 <XMC_CCU4_SLICE_ConfigureEvent>
                                handle_ptr->config_ptr->event2_config_ptr);

  /* External signal controls start of the timer */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_start_event)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d00e      	beq.n	80044ce <PWM_CCU4_lConfigure_Events+0x6e>
  {
    XMC_CCU4_SLICE_StartConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_start_event,
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6899      	ldr	r1, [r3, #8]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f893 2020 	ldrb.w	r2, [r3, #32]
                               handle_ptr->config_ptr->ext_start_mode);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
                                handle_ptr->config_ptr->event2_config_ptr);

  /* External signal controls start of the timer */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_start_event)
  {
    XMC_CCU4_SLICE_StartConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_start_event,
 80044c0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80044c4:	4608      	mov	r0, r1
 80044c6:	4611      	mov	r1, r2
 80044c8:	461a      	mov	r2, r3
 80044ca:	f7fc fd0d 	bl	8000ee8 <XMC_CCU4_SLICE_StartConfig>
                               handle_ptr->config_ptr->ext_start_mode);
  }

  /* External signal can stop the timer */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_stop_event)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00e      	beq.n	80044f8 <PWM_CCU4_lConfigure_Events+0x98>
  {
    XMC_CCU4_SLICE_StopConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_stop_event,
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6899      	ldr	r1, [r3, #8]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
                              handle_ptr->config_ptr->ext_stop_mode);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
  }

  /* External signal can stop the timer */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_stop_event)
  {
    XMC_CCU4_SLICE_StopConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_stop_event,
 80044ea:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80044ee:	4608      	mov	r0, r1
 80044f0:	4611      	mov	r1, r2
 80044f2:	461a      	mov	r2, r3
 80044f4:	f7fc fd26 	bl	8000f44 <XMC_CCU4_SLICE_StopConfig>
                              handle_ptr->config_ptr->ext_stop_mode);
  }

  /* External signal can change the timer counting direction */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_count_dir_event)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004500:	2b00      	cmp	r3, #0
 8004502:	d009      	beq.n	8004518 <PWM_CCU4_lConfigure_Events+0xb8>
  {
    XMC_CCU4_SLICE_DirectionConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_count_dir_event);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	689a      	ldr	r2, [r3, #8]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004510:	4610      	mov	r0, r2
 8004512:	4619      	mov	r1, r3
 8004514:	f7fc fdd0 	bl	80010b8 <XMC_CCU4_SLICE_DirectionConfig>
  }
  /* External signal can stop the timer and the timer value remains same */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_gate_event)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004520:	2b00      	cmp	r3, #0
 8004522:	d009      	beq.n	8004538 <PWM_CCU4_lConfigure_Events+0xd8>
  {
    XMC_CCU4_SLICE_GateConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_gate_event);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689a      	ldr	r2, [r3, #8]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004530:	4610      	mov	r0, r2
 8004532:	4619      	mov	r1, r3
 8004534:	f7fc fda6 	bl	8001084 <XMC_CCU4_SLICE_GateConfig>
  }
  /* Timer increments on external signal */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_count_event)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004540:	2b00      	cmp	r3, #0
 8004542:	d009      	beq.n	8004558 <PWM_CCU4_lConfigure_Events+0xf8>
  {
    XMC_CCU4_SLICE_CountConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_count_event);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	689a      	ldr	r2, [r3, #8]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004550:	4610      	mov	r0, r2
 8004552:	4619      	mov	r1, r3
 8004554:	f7fc fd7c 	bl	8001050 <XMC_CCU4_SLICE_CountConfig>
  }
  /* Timer gets loaded with compare register value or period register value on external signal */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_load_event)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004560:	2b00      	cmp	r3, #0
 8004562:	d009      	beq.n	8004578 <PWM_CCU4_lConfigure_Events+0x118>
  {
    XMC_CCU4_SLICE_LoadConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_load_event);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	689a      	ldr	r2, [r3, #8]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004570:	4610      	mov	r0, r2
 8004572:	4619      	mov	r1, r3
 8004574:	f7fc fd12 	bl	8000f9c <XMC_CCU4_SLICE_LoadConfig>
  }
  /* External signal PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_mod_event)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00f      	beq.n	80045a4 <PWM_CCU4_lConfigure_Events+0x144>
  {
    XMC_CCU4_SLICE_ModulationConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_mod_event,
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6898      	ldr	r0, [r3, #8]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
                                    handle_ptr->config_ptr->ext_mod_mode, handle_ptr->config_ptr->ext_mod_sync);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
    XMC_CCU4_SLICE_LoadConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_load_event);
  }
  /* External signal PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_mod_event)
  {
    XMC_CCU4_SLICE_ModulationConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_mod_event,
 8004594:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
                                    handle_ptr->config_ptr->ext_mod_mode, handle_ptr->config_ptr->ext_mod_sync);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
    XMC_CCU4_SLICE_LoadConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_load_event);
  }
  /* External signal PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_mod_event)
  {
    XMC_CCU4_SLICE_ModulationConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_mod_event,
 800459c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80045a0:	f7fc fd16 	bl	8000fd0 <XMC_CCU4_SLICE_ModulationConfig>
                                    handle_ptr->config_ptr->ext_mod_mode, handle_ptr->config_ptr->ext_mod_sync);
  }

  /* PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU4_SLICE_EVENT_2 == handle_ptr->config_ptr->ext_trap_event)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80045ac:	2b03      	cmp	r3, #3
 80045ae:	d119      	bne.n	80045e4 <PWM_CCU4_lConfigure_Events+0x184>
  {
    XMC_CCU4_SLICE_TrapConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_trap_exit,
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6899      	ldr	r1, [r3, #8]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
                              handle_ptr->config_ptr->ext_trap_sync);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
  }

  /* PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU4_SLICE_EVENT_2 == handle_ptr->config_ptr->ext_trap_event)
  {
    XMC_CCU4_SLICE_TrapConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_trap_exit,
 80045c0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80045c4:	4608      	mov	r0, r1
 80045c6:	4611      	mov	r1, r2
 80045c8:	461a      	mov	r2, r3
 80045ca:	f7fc fda7 	bl	800111c <XMC_CCU4_SLICE_TrapConfig>
                              handle_ptr->config_ptr->ext_trap_sync);

    if ((bool) true == handle_ptr->config_ptr->ext_trap_enable)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d004      	beq.n	80045e4 <PWM_CCU4_lConfigure_Events+0x184>
    {
      XMC_CCU4_SLICE_EnableTrap(handle_ptr->ccu4_slice_ptr);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	4618      	mov	r0, r3
 80045e0:	f7ff fda8 	bl	8004134 <XMC_CCU4_SLICE_EnableTrap>
    }
  }
  if ((XMC_CCU4_SLICE_EVENT_1 == handle_ptr->config_ptr->ext_override_edge_event) && (XMC_CCU4_SLICE_EVENT_2
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d117      	bne.n	8004620 <PWM_CCU4_lConfigure_Events+0x1c0>
      == handle_ptr->config_ptr->ext_override_level_event))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    if ((bool) true == handle_ptr->config_ptr->ext_trap_enable)
    {
      XMC_CCU4_SLICE_EnableTrap(handle_ptr->ccu4_slice_ptr);
    }
  }
  if ((XMC_CCU4_SLICE_EVENT_1 == handle_ptr->config_ptr->ext_override_edge_event) && (XMC_CCU4_SLICE_EVENT_2
 80045f8:	2b03      	cmp	r3, #3
 80045fa:	d111      	bne.n	8004620 <PWM_CCU4_lConfigure_Events+0x1c0>
      == handle_ptr->config_ptr->ext_override_level_event))
  {
    XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent(handle_ptr->ccu4_slice_ptr,
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6899      	ldr	r1, [r3, #8]
                                                   handle_ptr->config_ptr->event1_config_ptr,
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
    }
  }
  if ((XMC_CCU4_SLICE_EVENT_1 == handle_ptr->config_ptr->ext_override_edge_event) && (XMC_CCU4_SLICE_EVENT_2
      == handle_ptr->config_ptr->ext_override_level_event))
  {
    XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent(handle_ptr->ccu4_slice_ptr,
 8004604:	699a      	ldr	r2, [r3, #24]
                                                   handle_ptr->config_ptr->event1_config_ptr,
                                                   handle_ptr->config_ptr->event2_config_ptr);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
    }
  }
  if ((XMC_CCU4_SLICE_EVENT_1 == handle_ptr->config_ptr->ext_override_edge_event) && (XMC_CCU4_SLICE_EVENT_2
      == handle_ptr->config_ptr->ext_override_level_event))
  {
    XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent(handle_ptr->ccu4_slice_ptr,
 800460a:	69db      	ldr	r3, [r3, #28]
 800460c:	4608      	mov	r0, r1
 800460e:	4611      	mov	r1, r2
 8004610:	461a      	mov	r2, r3
 8004612:	f7fc fdbd 	bl	8001190 <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent>
                                                   handle_ptr->config_ptr->event1_config_ptr,
                                                   handle_ptr->config_ptr->event2_config_ptr);
    XMC_CCU4_SLICE_StatusBitOverrideConfig(handle_ptr->ccu4_slice_ptr);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	4618      	mov	r0, r3
 800461c:	f7fc fd66 	bl	80010ec <XMC_CCU4_SLICE_StatusBitOverrideConfig>
  }

}
 8004620:	3708      	adds	r7, #8
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop

08004628 <PWM_CCU4_Start>:
/**********************************************************************************************************/
/*Starts the CCU4_CC4 slice. This needs to be called even if external start is configured.*/
PWM_CCU4_STATUS_t PWM_CCU4_Start(PWM_CCU4_t* handle_ptr)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  PWM_CCU4_STATUS_t status;

  status = PWM_CCU4_STATUS_FAILURE;
 8004630:	2301      	movs	r3, #1
 8004632:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("PWM_CCU4_Start:handle_ptr NULL", (handle_ptr != NULL));
  if ((PWM_CCU4_STATE_INITIALIZED == handle_ptr->state) || (PWM_CCU4_STATE_STOPPED == handle_ptr->state))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	7f1b      	ldrb	r3, [r3, #28]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d003      	beq.n	8004644 <PWM_CCU4_Start+0x1c>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	7f1b      	ldrb	r3, [r3, #28]
 8004640:	2b03      	cmp	r3, #3
 8004642:	d117      	bne.n	8004674 <PWM_CCU4_Start+0x4c>
  {
    /* clear IDLE mode for the slice; Start timer */
    XMC_CCU4_EnableClock(handle_ptr->ccu4_module_ptr, handle_ptr->slice_number);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685a      	ldr	r2, [r3, #4]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	7b5b      	ldrb	r3, [r3, #13]
 800464c:	4610      	mov	r0, r2
 800464e:	4619      	mov	r1, r3
 8004650:	f7ff fd5c 	bl	800410c <XMC_CCU4_EnableClock>

    if (XMC_CCU4_SLICE_EVENT_NONE == handle_ptr->config_ptr->ext_start_event)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f893 3020 	ldrb.w	r3, [r3, #32]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d104      	bne.n	800466a <PWM_CCU4_Start+0x42>
    {
      XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	4618      	mov	r0, r3
 8004666:	f7ff fd75 	bl	8004154 <XMC_CCU4_SLICE_StartTimer>
    }

    handle_ptr->state = PWM_CCU4_STATE_RUNNING;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2202      	movs	r2, #2
 800466e:	771a      	strb	r2, [r3, #28]
    status = PWM_CCU4_STATUS_SUCCESS;
 8004670:	2300      	movs	r3, #0
 8004672:	73fb      	strb	r3, [r7, #15]
    XMC_DEBUG("PWM_CCU4_Start:start PWM");
  }
  return (status);
 8004674:	7bfb      	ldrb	r3, [r7, #15]
} /* end of PWM_CCU4_Start() api */
 8004676:	4618      	mov	r0, r3
 8004678:	3710      	adds	r7, #16
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop

08004680 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	4603      	mov	r3, r0
 8004688:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800468a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800468e:	2b00      	cmp	r3, #0
 8004690:	db0c      	blt.n	80046ac <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8004692:	4909      	ldr	r1, [pc, #36]	; (80046b8 <__NVIC_ClearPendingIRQ+0x38>)
 8004694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004698:	095b      	lsrs	r3, r3, #5
 800469a:	79fa      	ldrb	r2, [r7, #7]
 800469c:	f002 021f 	and.w	r2, r2, #31
 80046a0:	2001      	movs	r0, #1
 80046a2:	fa00 f202 	lsl.w	r2, r0, r2
 80046a6:	3360      	adds	r3, #96	; 0x60
 80046a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80046ac:	370c      	adds	r7, #12
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	e000e100 	.word	0xe000e100

080046bc <XMC_USIC_CH_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
  channel->CCR &= (uint32_t)~event;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	43db      	mvns	r3, r3
 80046ce:	401a      	ands	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80046d4:	370c      	adds	r7, #12
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop

080046e0 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80046f2:	b2db      	uxtb	r3, r3
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <XMC_USIC_CH_TXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  channel->TBCTR |= event;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	431a      	orrs	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <XMC_USIC_CH_TXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
  channel->TBCTR &= (uint32_t)~event;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	43db      	mvns	r3, r3
 8004738:	401a      	ands	r2, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 8004740:	370c      	adds	r7, #12
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop

0800474c <XMC_USIC_CH_TXFIFO_IsFull>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800475a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800475e:	2b00      	cmp	r3, #0
 8004760:	bf14      	ite	ne
 8004762:	2301      	movne	r3, #1
 8004764:	2300      	moveq	r3, #0
 8004766:	b2db      	uxtb	r3, r3
}
 8004768:	4618      	mov	r0, r3
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <XMC_USIC_CH_TXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8004782:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004786:	2b00      	cmp	r3, #0
 8004788:	bf14      	ite	ne
 800478a:	2301      	movne	r3, #1
 800478c:	2300      	moveq	r3, #0
 800478e:	b2db      	uxtb	r3, r3
}
 8004790:	4618      	mov	r0, r3
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <XMC_USIC_CH_RXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  channel->RBCTR &= (uint32_t)~event;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	43db      	mvns	r3, r3
 80047b0:	401a      	ands	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 80047b8:	370c      	adds	r7, #12
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop

080047c4 <XMC_USIC_CH_RXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80047d2:	f003 0308 	and.w	r3, r3, #8
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	bf14      	ite	ne
 80047da:	2301      	movne	r3, #1
 80047dc:	2300      	moveq	r3, #0
 80047de:	b2db      	uxtb	r3, r3
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <XMC_I2C_CH_GetStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_ClearStatusFlag()\n\n
 */
__STATIC_INLINE uint32_t XMC_I2C_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  return (channel->PSR_IICMode);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	431a      	orrs	r2, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <I2C_MASTER_SetRXFIFOTriggerLimit>:
 *
 * @endcode
 */
__STATIC_INLINE void I2C_MASTER_SetRXFIFOTriggerLimit(I2C_MASTER_t * const handle, const uint32_t size,
		                                              const uint32_t limit)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("I2C_MASTER_SetRXFIFOTriggerLimit: invalid handle", (handle != NULL))
  XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel, (XMC_USIC_CH_FIFO_SIZE_t)size, limit);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	b2db      	uxtb	r3, r3
 8004838:	4610      	mov	r0, r2
 800483a:	4619      	mov	r1, r3
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	f7fd fb85 	bl	8001f4c <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>
}
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <I2C_MASTER_IsTXFIFOFull>:
 *  }
 * }
 * @endcode
 */
__STATIC_INLINE bool I2C_MASTER_IsTXFIFOFull(const I2C_MASTER_t* const handle)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_IsTXFIFOFull: invalid handle", (handle != NULL))
  return XMC_USIC_CH_TXFIFO_IsFull(handle->channel);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4618      	mov	r0, r3
 8004856:	f7ff ff79 	bl	800474c <XMC_USIC_CH_TXFIFO_IsFull>
 800485a:	4603      	mov	r3, r0
}
 800485c:	4618      	mov	r0, r3
 800485e:	3708      	adds	r7, #8
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <I2C_MASTER_IsRXFIFOEmpty>:
 *   }
 *  }
 * @endcode
 */
__STATIC_INLINE bool I2C_MASTER_IsRXFIFOEmpty(const I2C_MASTER_t* const handle)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_IsRXFIFOEmpty: invalid handle", (handle != NULL))
  return XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4618      	mov	r0, r3
 8004872:	f7ff ffa7 	bl	80047c4 <XMC_USIC_CH_RXFIFO_IsEmpty>
 8004876:	4603      	mov	r3, r0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3708      	adds	r7, #8
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <I2C_MASTER_GetReceivedByte>:
 * @endcode
 *
 */
/* Wrapper to the LLD API for reading back the value of the RBUF or OUTR register */
__STATIC_INLINE uint8_t I2C_MASTER_GetReceivedByte(I2C_MASTER_t * const handle)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_GetReceivedByte: invalid handle", (handle != NULL))
  return (uint8_t)XMC_I2C_CH_GetReceivedData(handle->channel);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4618      	mov	r0, r3
 800488e:	f7fd f975 	bl	8001b7c <XMC_I2C_CH_GetReceivedData>
 8004892:	4603      	mov	r3, r0
}
 8004894:	4618      	mov	r0, r3
 8004896:	3708      	adds	r7, #8
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <I2C_MASTER_TransmitByte>:
 *    }
 *  }
 * @endcode
 */
__STATIC_INLINE void I2C_MASTER_TransmitByte(I2C_MASTER_t * const handle, uint8_t byte)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	460b      	mov	r3, r1
 80048a6:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("I2C_MASTER_TransmitByte: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterTransmit(handle->channel, byte);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	78fb      	ldrb	r3, [r7, #3]
 80048ae:	4610      	mov	r0, r2
 80048b0:	4619      	mov	r1, r3
 80048b2:	f7fd f8f1 	bl	8001a98 <XMC_I2C_CH_MasterTransmit>
}
 80048b6:	3708      	adds	r7, #8
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}

080048bc <I2C_MASTER_DisableEvent>:
 *  }
 * @endcode
 *
 */
__STATIC_INLINE void I2C_MASTER_DisableEvent(I2C_MASTER_t * const handle, uint32_t event)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("I2C_MASTER_DisableEvent: invalid handle", (handle != NULL))
  XMC_I2C_CH_DisableEvent(handle->channel, event);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4618      	mov	r0, r3
 80048cc:	6839      	ldr	r1, [r7, #0]
 80048ce:	f7fd f96f 	bl	8001bb0 <XMC_I2C_CH_DisableEvent>
}
 80048d2:	3708      	adds	r7, #8
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <I2C_MASTER_ReceiveACK>:
 *    return 1U;
 *  }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveAck(handle->channel);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7fd f8fd 	bl	8001ae4 <XMC_I2C_CH_MasterReceiveAck>
}
 80048ea:	3708      	adds	r7, #8
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <I2C_MASTER_ReceiveNACK>:
 *    return 1U;
 *  }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveNack(handle->channel);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4618      	mov	r0, r3
 80048fe:	f7fd f917 	bl	8001b30 <XMC_I2C_CH_MasterReceiveNack>
}
 8004902:	3708      	adds	r7, #8
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <I2C_MASTER_SendStop>:
 *    return 1U;
 *  }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_SendStop(I2C_MASTER_t * const handle)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_SendStop: invalid handle", (handle != NULL))
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_STOP_CONDITION_RECEIVED);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4618      	mov	r0, r3
 8004916:	2110      	movs	r1, #16
 8004918:	f7ff ff74 	bl	8004804 <XMC_I2C_CH_ClearStatusFlag>
  XMC_I2C_CH_MasterStop(handle->channel);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4618      	mov	r0, r3
 8004922:	f7fd f893 	bl	8001a4c <XMC_I2C_CH_MasterStop>
}
 8004926:	3708      	adds	r7, #8
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <calculate_minfifosize>:
 */
void I2C_MASTER_ProtocolHandler(I2C_MASTER_t * const handle);

#if ((I2C_MASTER_INTERRUPT_TX_ENABLED == 1) || (I2C_MASTER_INTERRUPT_RX_ENABLED == 1))
static uint32_t calculate_minfifosize(uint32_t a, uint32_t b)
{
 800492c:	b480      	push	{r7}
 800492e:	b085      	sub	sp, #20
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  uint32_t result;

  if (a < b)
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	429a      	cmp	r2, r3
 800493c:	d202      	bcs.n	8004944 <calculate_minfifosize+0x18>
  {
    result = a;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	60fb      	str	r3, [r7, #12]
 8004942:	e001      	b.n	8004948 <calculate_minfifosize+0x1c>
  }
  else
  {
    result = b;
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	60fb      	str	r3, [r7, #12]
  }
  return (result);
 8004948:	68fb      	ldr	r3, [r7, #12]
}
 800494a:	4618      	mov	r0, r3
 800494c:	3714      	adds	r7, #20
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop

08004958 <I2C_MASTER_Init>:
  return (version);
}

/* Function to initialize the USIC Channel with GUI configured values.*/
I2C_MASTER_STATUS_t I2C_MASTER_Init(const I2C_MASTER_t *const handle)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  I2C_MASTER_STATUS_t status;

  if (handle != NULL)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d006      	beq.n	8004974 <I2C_MASTER_Init+0x1c>
  {
    /*Initialize the multiplexers required for I2C_MASTER configuration*/
    handle->config->fptr_i2c_config();
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	4798      	blx	r3

    status = I2C_MASTER_STATUS_SUCCESS;
 800496e:	2300      	movs	r3, #0
 8004970:	73fb      	strb	r3, [r7, #15]
 8004972:	e001      	b.n	8004978 <I2C_MASTER_Init+0x20>
  }
  else
  {
    status = I2C_MASTER_STATUS_FAILURE;
 8004974:	2301      	movs	r3, #1
 8004976:	73fb      	strb	r3, [r7, #15]
  }
  return (status);
 8004978:	7bfb      	ldrb	r3, [r7, #15]
}
 800497a:	4618      	mov	r0, r3
 800497c:	3710      	adds	r7, #16
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop

08004984 <I2C_MASTER_GetFlagStatus>:

/* Function to get flag status of the requested parameter */
uint32_t I2C_MASTER_GetFlagStatus(const I2C_MASTER_t *handle, uint32_t flagtype)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
  uint32_t status;

  status = XMC_I2C_CH_GetStatusFlag(handle->channel);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4618      	mov	r0, r3
 8004994:	f7ff ff2a 	bl	80047ec <XMC_I2C_CH_GetStatusFlag>
 8004998:	60f8      	str	r0, [r7, #12]

  return (status & flagtype);
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	4013      	ands	r3, r2
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3710      	adds	r7, #16
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <I2C_MASTER_ClearFlag>:

/* Function to clear flag status of the requested parameter */
void I2C_MASTER_ClearFlag(const I2C_MASTER_t *handle, uint32_t flagtype)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
  XMC_I2C_CH_ClearStatusFlag(handle->channel,flagtype);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4618      	mov	r0, r3
 80049b8:	6839      	ldr	r1, [r7, #0]
 80049ba:	f7ff ff23 	bl	8004804 <XMC_I2C_CH_ClearStatusFlag>
}
 80049be:	3708      	adds	r7, #8
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <I2C_MASTER_TransmitHandler>:
 *  @param  handle I2C_MASTER APP handle pointer of type I2C_MASTER_t*
 *
 *  @return void
 */
void I2C_MASTER_TransmitHandler(I2C_MASTER_t * const handle)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  I2C_MASTER_RUNTIME_t * ptr_runtime;
  uint8_t fifo_min;

  ptr_runtime = handle->runtime;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	60bb      	str	r3, [r7, #8]
  fifo_min = 0U;
 80049d2:	2300      	movs	r3, #0
 80049d4:	73fb      	strb	r3, [r7, #15]

  /* check if any error flag is set */
  if (I2C_MASTER_GetFlagStatus(handle, ((uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED |
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80049dc:	f7ff ffd2 	bl	8004984 <I2C_MASTER_GetFlagStatus>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d011      	beq.n	8004a0a <I2C_MASTER_TransmitHandler+0x46>
                                        (uint32_t)XMC_I2C_CH_STATUS_FLAG_ARBITRATION_LOST |
                                        (uint32_t)XMC_I2C_CH_STATUS_FLAG_ERROR |
                    (uint32_t)XMC_I2C_CH_STATUS_FLAG_WRONG_TDF_CODE_FOUND)))
  {
    /* Disable the transmit events */
    XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4618      	mov	r0, r3
 80049ec:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80049f0:	f7ff fe98 	bl	8004724 <XMC_USIC_CH_TXFIFO_DisableEvent>
    XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4618      	mov	r0, r3
 80049fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80049fe:	f7ff fe5d 	bl	80046bc <XMC_USIC_CH_DisableEvent>

    I2C_MASTER_ProtocolHandler(handle);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 fa96 	bl	8004f34 <I2C_MASTER_ProtocolHandler>
 8004a08:	e105      	b.n	8004c16 <I2C_MASTER_TransmitHandler+0x252>
  else
  {
/***********************************************************************************************************************
  Direction = Transmit, Tx FIFO enabled
***********************************************************************************************************************/
  if (ptr_runtime->direction == (uint32_t)I2C_MASTER_DIRECTION_TRANSMIT)
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	f040 8082 	bne.w	8004b18 <I2C_MASTER_TransmitHandler+0x154>
  {
    if (handle->config->txFIFO_size > 0)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d05a      	beq.n	8004ad6 <I2C_MASTER_TransmitHandler+0x112>
    {
      if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	68da      	ldr	r2, [r3, #12]
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d22e      	bcs.n	8004a8a <I2C_MASTER_TransmitHandler+0xc6>
      {
      I2C_MASTER_DisableEvent(handle,(uint32_t)XMC_I2C_CH_EVENT_ACK);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004a32:	f7ff ff43 	bl	80048bc <I2C_MASTER_DisableEvent>
      XMC_USIC_CH_TXFIFO_EnableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004a40:	f7ff fe5e 	bl	8004700 <XMC_USIC_CH_TXFIFO_EnableEvent>
        /*Fill the transmit FIFO */
        while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 8004a44:	e017      	b.n	8004a76 <I2C_MASTER_TransmitHandler+0xb2>
        {
          /* transmit each byte till index reaches to the last byte */
          if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	68da      	ldr	r2, [r3, #12]
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d20f      	bcs.n	8004a72 <I2C_MASTER_TransmitHandler+0xae>
          {
            /* load the FIFO, byte by byte till either FIFO is full or all data is loaded*/
            I2C_MASTER_TransmitByte(handle, (uint8_t)ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	4619      	mov	r1, r3
 8004a62:	f7ff ff1b 	bl	800489c <I2C_MASTER_TransmitByte>
            ptr_runtime->tx_data_index++;
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	1c5a      	adds	r2, r3, #1
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	60da      	str	r2, [r3, #12]
 8004a70:	e001      	b.n	8004a76 <I2C_MASTER_TransmitHandler+0xb2>
          }
          else
          {
            break;
 8004a72:	bf00      	nop
 8004a74:	e0cf      	b.n	8004c16 <I2C_MASTER_TransmitHandler+0x252>
      if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
      {
      I2C_MASTER_DisableEvent(handle,(uint32_t)XMC_I2C_CH_EVENT_ACK);
      XMC_USIC_CH_TXFIFO_EnableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
        /*Fill the transmit FIFO */
        while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f7ff fee6 	bl	8004848 <I2C_MASTER_IsTXFIFOFull>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	f083 0301 	eor.w	r3, r3, #1
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1de      	bne.n	8004a46 <I2C_MASTER_TransmitHandler+0x82>
 8004a88:	e0c5      	b.n	8004c16 <I2C_MASTER_TransmitHandler+0x252>
        } /* end of while */
      }
      else
      {
        /* if index is reached to last byte and "bus acquired" flag is set to true, then issue Send Stop */
      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004a94:	f7ff fe46 	bl	8004724 <XMC_USIC_CH_TXFIFO_DisableEvent>
      NVIC_ClearPendingIRQ(handle->config->tx_irqn);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004aa0:	b25b      	sxtb	r3, r3
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7ff fdec 	bl	8004680 <__NVIC_ClearPendingIRQ>

      /*make sure data is transmitted in FIFO*/
        while (!XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel)){}
 8004aa8:	bf00      	nop
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7ff fe60 	bl	8004774 <XMC_USIC_CH_TXFIFO_IsEmpty>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	f083 0301 	eor.w	r3, r3, #1
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d1f4      	bne.n	8004aaa <I2C_MASTER_TransmitHandler+0xe6>

          if (ptr_runtime->bus_acquired == true)
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	f000 80a4 	beq.w	8004c16 <I2C_MASTER_TransmitHandler+0x252>
          {
            I2C_MASTER_lSendStop_JumpTo_TxCallback(handle);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 f8a4 	bl	8004c1c <I2C_MASTER_lSendStop_JumpTo_TxCallback>
 8004ad4:	e09f      	b.n	8004c16 <I2C_MASTER_TransmitHandler+0x252>
    Direction = transmit and Tx FIFO disabled
***********************************************************************************************************************/
    else
    {
      /* transmit each byte till the last byte */
      if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	68da      	ldr	r2, [r3, #12]
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d20f      	bcs.n	8004b02 <I2C_MASTER_TransmitHandler+0x13e>
      {
        I2C_MASTER_TransmitByte(handle, ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	4413      	add	r3, r2
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	4619      	mov	r1, r3
 8004af2:	f7ff fed3 	bl	800489c <I2C_MASTER_TransmitByte>
        ptr_runtime->tx_data_index++;
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	1c5a      	adds	r2, r3, #1
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	60da      	str	r2, [r3, #12]
 8004b00:	e089      	b.n	8004c16 <I2C_MASTER_TransmitHandler+0x252>
      }
      else
      {
        /* if index reaches last byte and bus_acquired flag is set to true, issue send stop */
        if (ptr_runtime->bus_acquired == true)
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	f000 8083 	beq.w	8004c16 <I2C_MASTER_TransmitHandler+0x252>
        {
          I2C_MASTER_lSendStop_JumpTo_TxCallback(handle);
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f000 f883 	bl	8004c1c <I2C_MASTER_lSendStop_JumpTo_TxCallback>
 8004b16:	e07e      	b.n	8004c16 <I2C_MASTER_TransmitHandler+0x252>
/***********************************************************************************************************************
  Direction = Receive, Tx, Rx FIFO enabled.
  Minimum FIFO value is calculated by comparing Tx FIFO and Rx FIFO size.
  If Rx FIFO is not enabled, default size of 2 is considered.
***********************************************************************************************************************/
    if (handle->config->txFIFO_size > 0)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d054      	beq.n	8004bce <I2C_MASTER_TransmitHandler+0x20a>
    {
      if ((handle->config->rxFIFO_size > 0))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d015      	beq.n	8004b5c <I2C_MASTER_TransmitHandler+0x198>
      {
        fifo_min = (uint8_t)calculate_minfifosize(((uint32_t)1 << (uint32_t)handle->config->txFIFO_size),
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004b38:	461a      	mov	r2, r3
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	fa03 f202 	lsl.w	r2, r3, r2
                                              ((uint32_t)1 << (uint32_t)handle->config->rxFIFO_size));
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
***********************************************************************************************************************/
    if (handle->config->txFIFO_size > 0)
    {
      if ((handle->config->rxFIFO_size > 0))
      {
        fifo_min = (uint8_t)calculate_minfifosize(((uint32_t)1 << (uint32_t)handle->config->txFIFO_size),
 8004b48:	4619      	mov	r1, r3
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	408b      	lsls	r3, r1
 8004b4e:	4610      	mov	r0, r2
 8004b50:	4619      	mov	r1, r3
 8004b52:	f7ff feeb 	bl	800492c <calculate_minfifosize>
 8004b56:	4603      	mov	r3, r0
 8004b58:	73fb      	strb	r3, [r7, #15]
 8004b5a:	e001      	b.n	8004b60 <I2C_MASTER_TransmitHandler+0x19c>
                                              ((uint32_t)1 << (uint32_t)handle->config->rxFIFO_size));
      }
      else
      {
        /* if Rx FIFO is disabled, set minimum FIFO size as 2 */
        fifo_min = 2U;
 8004b5c:	2302      	movs	r3, #2
 8004b5e:	73fb      	strb	r3, [r7, #15]
      }

      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4618      	mov	r0, r3
 8004b66:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004b6a:	f7ff fddb 	bl	8004724 <XMC_USIC_CH_TXFIFO_DisableEvent>

      /* fill the FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 8004b6e:	e023      	b.n	8004bb8 <I2C_MASTER_TransmitHandler+0x1f4>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	68da      	ldr	r2, [r3, #12]
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d21c      	bcs.n	8004bb6 <I2C_MASTER_TransmitHandler+0x1f2>
        {
          /* check for last byte and send_nack is set to true */
          if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	1c5a      	adds	r2, r3, #1
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d107      	bne.n	8004b9a <I2C_MASTER_TransmitHandler+0x1d6>
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d103      	bne.n	8004b9a <I2C_MASTER_TransmitHandler+0x1d6>
          {
            I2C_MASTER_ReceiveNACK(handle);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f7ff feac 	bl	80048f0 <I2C_MASTER_ReceiveNACK>
 8004b98:	e002      	b.n	8004ba0 <I2C_MASTER_TransmitHandler+0x1dc>
          }
          else
          {
            I2C_MASTER_ReceiveACK(handle);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f7ff fe9c 	bl	80048d8 <I2C_MASTER_ReceiveACK>
          }
          ptr_runtime->tx_data_index++;
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	1c5a      	adds	r2, r3, #1
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	60da      	str	r2, [r3, #12]

          /*if index reaches fifo size - break*/
          if ((ptr_runtime->tx_data_index) >= fifo_min)
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	68da      	ldr	r2, [r3, #12]
 8004bae:	7bfb      	ldrb	r3, [r7, #15]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d301      	bcc.n	8004bb8 <I2C_MASTER_TransmitHandler+0x1f4>
          {
            break;
 8004bb4:	e00a      	b.n	8004bcc <I2C_MASTER_TransmitHandler+0x208>
          }
        }
        else
        {
          break;
 8004bb6:	e009      	b.n	8004bcc <I2C_MASTER_TransmitHandler+0x208>
      }

      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);

      /* fill the FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f7ff fe45 	bl	8004848 <I2C_MASTER_IsTXFIFOFull>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	f083 0301 	eor.w	r3, r3, #1
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d1d2      	bne.n	8004b70 <I2C_MASTER_TransmitHandler+0x1ac>
 8004bca:	e017      	b.n	8004bfc <I2C_MASTER_TransmitHandler+0x238>
 8004bcc:	e016      	b.n	8004bfc <I2C_MASTER_TransmitHandler+0x238>
   Direction = Receive, Tx FIFO disabled
 **********************************************************************************************************************/
    else
    {
      /* check for last byte and send_nack is set to true */
      if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	1c5a      	adds	r2, r3, #1
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d107      	bne.n	8004bec <I2C_MASTER_TransmitHandler+0x228>
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	6a1b      	ldr	r3, [r3, #32]
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d103      	bne.n	8004bec <I2C_MASTER_TransmitHandler+0x228>
      {
        I2C_MASTER_ReceiveNACK(handle);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f7ff fe83 	bl	80048f0 <I2C_MASTER_ReceiveNACK>
 8004bea:	e002      	b.n	8004bf2 <I2C_MASTER_TransmitHandler+0x22e>
      }
      else
      {
        I2C_MASTER_ReceiveACK(handle);
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f7ff fe73 	bl	80048d8 <I2C_MASTER_ReceiveACK>
      }
      ptr_runtime->tx_data_index++;
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	1c5a      	adds	r2, r3, #1
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	60da      	str	r2, [r3, #12]
    }

/***********************************************************************************************************************
   If last byte, then disable ACK event
 **********************************************************************************************************************/
     if (handle->runtime->tx_data_index == handle->runtime->tx_data_count)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	68da      	ldr	r2, [r3, #12]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d104      	bne.n	8004c16 <I2C_MASTER_TransmitHandler+0x252>
     {
       I2C_MASTER_DisableEvent(handle,(uint32_t)XMC_I2C_CH_EVENT_ACK);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004c12:	f7ff fe53 	bl	80048bc <I2C_MASTER_DisableEvent>
     }
  } /* end of else */
 } /* end of else */
}
 8004c16:	3710      	adds	r7, #16
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <I2C_MASTER_lSendStop_JumpTo_TxCallback>:

/* Function to issue Send Stop command and jump to callback routine */
static void I2C_MASTER_lSendStop_JumpTo_TxCallback(I2C_MASTER_t *const handle)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  ptr_runtime = handle->runtime;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	60fb      	str	r3, [r7, #12]

  I2C_MASTER_DisableEvent(handle,((uint32_t)XMC_I2C_CH_EVENT_ACK ));
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004c30:	f7ff fe44 	bl	80048bc <I2C_MASTER_DisableEvent>

  if (ptr_runtime->send_stop == true)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	69db      	ldr	r3, [r3, #28]
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d106      	bne.n	8004c4a <I2C_MASTER_lSendStop_JumpTo_TxCallback+0x2e>
  {
    ptr_runtime->bus_acquired = false;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    I2C_MASTER_SendStop(handle);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f7ff fe5f 	bl	8004908 <I2C_MASTER_SendStop>
  }

  while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
 8004c4a:	bf00      	nop
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4618      	mov	r0, r3
 8004c52:	f7ff fd45 	bl	80046e0 <XMC_USIC_CH_GetTransmitBufferStatus>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b80      	cmp	r3, #128	; 0x80
 8004c5a:	d0f7      	beq.n	8004c4c <I2C_MASTER_lSendStop_JumpTo_TxCallback+0x30>

  /*All data is transmitted*/
  ptr_runtime->tx_busy = false;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  if (handle->config->tx_cbhandler != NULL)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d003      	beq.n	8004c76 <I2C_MASTER_lSendStop_JumpTo_TxCallback+0x5a>
  {
    /*Execute the 'End of transmission' callback function*/
    handle->config->tx_cbhandler();
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	4798      	blx	r3
  }
}
 8004c76:	3710      	adds	r7, #16
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <I2C_MASTER_ReceiveHandler>:
 * @param  handle I2C_MASTER APP handle pointer of type I2C_MASTER_t*
 *
 * @return void
 */
void I2C_MASTER_ReceiveHandler(I2C_MASTER_t * const handle)
{
 8004c7c:	b590      	push	{r4, r7, lr}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  I2C_MASTER_RUNTIME_t * ptr_runtime;
  uint8_t fifo_lindex;
  uint8_t fifo_min;

  ptr_runtime = handle->runtime;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	60bb      	str	r3, [r7, #8]
  fifo_lindex = 0U;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	73fb      	strb	r3, [r7, #15]

  if (ptr_runtime->rx_busy == true)
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	f000 8111 	beq.w	8004ebe <I2C_MASTER_ReceiveHandler+0x242>
  {
    if (handle->config->rxFIFO_size > 0)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	f000 80c7 	beq.w	8004e38 <I2C_MASTER_ReceiveHandler+0x1bc>
    {
      /*****************************************************************************************************************
       Rx FIFO enabled
      *****************************************************************************************************************/
      while (I2C_MASTER_IsRXFIFOEmpty(handle) == false)
 8004caa:	e020      	b.n	8004cee <I2C_MASTER_ReceiveHandler+0x72>
      {
        /*Read all the content of Receive FIFO */
        ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)I2C_MASTER_GetReceivedByte(handle);
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	685a      	ldr	r2, [r3, #4]
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	18d4      	adds	r4, r2, r3
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f7ff fde2 	bl	8004880 <I2C_MASTER_GetReceivedByte>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	7023      	strb	r3, [r4, #0]
        ptr_runtime->rx_data_index++;
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	695b      	ldr	r3, [r3, #20]
 8004cc4:	1c5a      	adds	r2, r3, #1
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	615a      	str	r2, [r3, #20]

        if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	695a      	ldr	r2, [r3, #20]
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d10b      	bne.n	8004cee <I2C_MASTER_ReceiveHandler+0x72>
        {
          /*Reception complete*/
          ptr_runtime->rx_busy = false;
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

            /*Disable both standard receive and alternative receive FIFO events*/
            XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8004ce8:	f7ff fd58 	bl	800479c <XMC_USIC_CH_RXFIFO_DisableEvent>
                                          (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
                                                     (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));

          break;
 8004cec:	e008      	b.n	8004d00 <I2C_MASTER_ReceiveHandler+0x84>
    if (handle->config->rxFIFO_size > 0)
    {
      /*****************************************************************************************************************
       Rx FIFO enabled
      *****************************************************************************************************************/
      while (I2C_MASTER_IsRXFIFOEmpty(handle) == false)
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f7ff fdb8 	bl	8004864 <I2C_MASTER_IsRXFIFOEmpty>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	f083 0301 	eor.w	r3, r3, #1
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d1d5      	bne.n	8004cac <I2C_MASTER_ReceiveHandler+0x30>
          break;
        }
      } /* end of while(I2C_MASTER_IsRXFIFOEmpty(handle) == false)*/

      /*Set the trigger limit if data still to be received*/
      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	695a      	ldr	r2, [r3, #20]
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d277      	bcs.n	8004dfc <I2C_MASTER_ReceiveHandler+0x180>
      {
        I2C_MASTER_lReconfigureRxFIFO(handle,(uint32_t)(ptr_runtime->rx_data_count - ptr_runtime->rx_data_index));
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	691a      	ldr	r2, [r3, #16]
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	695b      	ldr	r3, [r3, #20]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	4619      	mov	r1, r3
 8004d1a:	f000 f94f 	bl	8004fbc <I2C_MASTER_lReconfigureRxFIFO>

        if ((handle->config->txFIFO_size > 0))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d015      	beq.n	8004d56 <I2C_MASTER_ReceiveHandler+0xda>
        {
          fifo_min = (uint8_t)calculate_minfifosize(((uint32_t)1 << (uint32_t)handle->config->txFIFO_size),
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004d32:	461a      	mov	r2, r3
 8004d34:	2301      	movs	r3, #1
 8004d36:	fa03 f202 	lsl.w	r2, r3, r2
                                                    ((uint32_t)1 << (uint32_t)handle->config->rxFIFO_size));
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
      {
        I2C_MASTER_lReconfigureRxFIFO(handle,(uint32_t)(ptr_runtime->rx_data_count - ptr_runtime->rx_data_index));

        if ((handle->config->txFIFO_size > 0))
        {
          fifo_min = (uint8_t)calculate_minfifosize(((uint32_t)1 << (uint32_t)handle->config->txFIFO_size),
 8004d42:	4619      	mov	r1, r3
 8004d44:	2301      	movs	r3, #1
 8004d46:	408b      	lsls	r3, r1
 8004d48:	4610      	mov	r0, r2
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	f7ff fdee 	bl	800492c <calculate_minfifosize>
 8004d50:	4603      	mov	r3, r0
 8004d52:	73bb      	strb	r3, [r7, #14]
 8004d54:	e001      	b.n	8004d5a <I2C_MASTER_ReceiveHandler+0xde>
                                                    ((uint32_t)1 << (uint32_t)handle->config->rxFIFO_size));
       }
       else
       {
          fifo_min = 2U;
 8004d56:	2302      	movs	r3, #2
 8004d58:	73bb      	strb	r3, [r7, #14]
       }
       /****************************************************************************************************************
         Rx and Tx FIFO enabled
        ***************************************************************************************************************/
        if (handle->config->txFIFO_size > 0)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d033      	beq.n	8004dce <I2C_MASTER_ReceiveHandler+0x152>
        {
          /*Fill the transmit FIFO */
          while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 8004d66:	e027      	b.n	8004db8 <I2C_MASTER_ReceiveHandler+0x13c>
          {
            if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	68da      	ldr	r2, [r3, #12]
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d220      	bcs.n	8004db6 <I2C_MASTER_ReceiveHandler+0x13a>
            {
              if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	1c5a      	adds	r2, r3, #1
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d107      	bne.n	8004d92 <I2C_MASTER_ReceiveHandler+0x116>
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	6a1b      	ldr	r3, [r3, #32]
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d103      	bne.n	8004d92 <I2C_MASTER_ReceiveHandler+0x116>
              {
                I2C_MASTER_ReceiveNACK(handle);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f7ff fdb0 	bl	80048f0 <I2C_MASTER_ReceiveNACK>
 8004d90:	e002      	b.n	8004d98 <I2C_MASTER_ReceiveHandler+0x11c>
              }
              else
              {
                I2C_MASTER_ReceiveACK(handle);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f7ff fda0 	bl	80048d8 <I2C_MASTER_ReceiveACK>
              }
              ptr_runtime->tx_data_index++;
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	1c5a      	adds	r2, r3, #1
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	60da      	str	r2, [r3, #12]

              /* if fifo size- break */
              if ((++fifo_lindex) >= fifo_min)
 8004da2:	7bfb      	ldrb	r3, [r7, #15]
 8004da4:	3301      	adds	r3, #1
 8004da6:	73fb      	strb	r3, [r7, #15]
 8004da8:	7bfa      	ldrb	r2, [r7, #15]
 8004daa:	7bbb      	ldrb	r3, [r7, #14]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d303      	bcc.n	8004db8 <I2C_MASTER_ReceiveHandler+0x13c>
              {
                fifo_lindex = 0U;
 8004db0:	2300      	movs	r3, #0
 8004db2:	73fb      	strb	r3, [r7, #15]
                break;
 8004db4:	e00a      	b.n	8004dcc <I2C_MASTER_ReceiveHandler+0x150>
              }
            }/* end of if(handle->runtime->tx_data_index < handle->runtime->tx_data_count) */
            else
            {
              break;
 8004db6:	e009      	b.n	8004dcc <I2C_MASTER_ReceiveHandler+0x150>
         Rx and Tx FIFO enabled
        ***************************************************************************************************************/
        if (handle->config->txFIFO_size > 0)
        {
          /*Fill the transmit FIFO */
          while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f7ff fd45 	bl	8004848 <I2C_MASTER_IsTXFIFOFull>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	f083 0301 	eor.w	r3, r3, #1
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d1ce      	bne.n	8004d68 <I2C_MASTER_ReceiveHandler+0xec>
 8004dca:	e017      	b.n	8004dfc <I2C_MASTER_ReceiveHandler+0x180>
 8004dcc:	e016      	b.n	8004dfc <I2C_MASTER_ReceiveHandler+0x180>
       /****************************************************************************************************************
          Rx FIFO is enabled, Tx FIFO disabled
       ****************************************************************************************************************/
       else
       {
         if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	1c5a      	adds	r2, r3, #1
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d107      	bne.n	8004dec <I2C_MASTER_ReceiveHandler+0x170>
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	6a1b      	ldr	r3, [r3, #32]
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d103      	bne.n	8004dec <I2C_MASTER_ReceiveHandler+0x170>
         {
           I2C_MASTER_ReceiveNACK(handle);
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f7ff fd83 	bl	80048f0 <I2C_MASTER_ReceiveNACK>
 8004dea:	e002      	b.n	8004df2 <I2C_MASTER_ReceiveHandler+0x176>
         }
         else
         {
           I2C_MASTER_ReceiveACK(handle);
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f7ff fd73 	bl	80048d8 <I2C_MASTER_ReceiveACK>
         }

         ptr_runtime->tx_data_index++;
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	1c5a      	adds	r2, r3, #1
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	60da      	str	r2, [r3, #12]
       }
     } /* end of if(ptr_runtime->rx_data_index < ptr_runtime->rx_data_count) */
/***********************************************************************************************************************
     if last byte to receive then disable receive events and jump to callback routine
***********************************************************************************************************************/
     if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	695a      	ldr	r2, [r3, #20]
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d15a      	bne.n	8004ebe <I2C_MASTER_ReceiveHandler+0x242>
     {
       /*Clear both standard receive and alternative receive FIFO events*/
       XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8004e12:	f7ff fcc3 	bl	800479c <XMC_USIC_CH_RXFIFO_DisableEvent>
                                                                   (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));

       /*Disable both standard receive and alternative receive events*/
       XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE |
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8004e20:	f7ff fc4c 	bl	80046bc <XMC_USIC_CH_DisableEvent>
                                                            (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE));

       if (ptr_runtime->bus_acquired == true)
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d046      	beq.n	8004ebe <I2C_MASTER_ReceiveHandler+0x242>
       {
         I2C_MASTER_lSendStop_JumpTo_RxCallback(handle);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 f847 	bl	8004ec4 <I2C_MASTER_lSendStop_JumpTo_RxCallback>
 8004e36:	e042      	b.n	8004ebe <I2C_MASTER_ReceiveHandler+0x242>
/***********************************************************************************************************************
     Rx FIFO disabled
***********************************************************************************************************************/
    else
    {
      ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)I2C_MASTER_GetReceivedByte(handle);
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	685a      	ldr	r2, [r3, #4]
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	695b      	ldr	r3, [r3, #20]
 8004e40:	18d4      	adds	r4, r2, r3
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f7ff fd1c 	bl	8004880 <I2C_MASTER_GetReceivedByte>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	7023      	strb	r3, [r4, #0]
      ptr_runtime->rx_data_index++;
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	695b      	ldr	r3, [r3, #20]
 8004e50:	1c5a      	adds	r2, r3, #1
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	615a      	str	r2, [r3, #20]

      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	695a      	ldr	r2, [r3, #20]
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d21d      	bcs.n	8004e9e <I2C_MASTER_ReceiveHandler+0x222>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	68da      	ldr	r2, [r3, #12]
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d227      	bcs.n	8004ebe <I2C_MASTER_ReceiveHandler+0x242>
        {
          /* if receive byte is end of byte and send_nack is true, send to receive Nack otherwise Ack*/
          if (((ptr_runtime->tx_data_index) == (ptr_runtime->tx_data_count - 1U)) && (ptr_runtime->send_nack == true))
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	68da      	ldr	r2, [r3, #12]
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	3b01      	subs	r3, #1
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d107      	bne.n	8004e8c <I2C_MASTER_ReceiveHandler+0x210>
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	6a1b      	ldr	r3, [r3, #32]
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d103      	bne.n	8004e8c <I2C_MASTER_ReceiveHandler+0x210>
          {
            I2C_MASTER_ReceiveNACK(handle);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f7ff fd33 	bl	80048f0 <I2C_MASTER_ReceiveNACK>
 8004e8a:	e002      	b.n	8004e92 <I2C_MASTER_ReceiveHandler+0x216>
          }
          else
          {
            I2C_MASTER_ReceiveACK(handle);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f7ff fd23 	bl	80048d8 <I2C_MASTER_ReceiveACK>
          }
          ptr_runtime->tx_data_index++;
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	1c5a      	adds	r2, r3, #1
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	60da      	str	r2, [r3, #12]
 8004e9c:	e00f      	b.n	8004ebe <I2C_MASTER_ReceiveHandler+0x242>
        }
      }
      else
      {
        /*Disable both standard receive and alternative receive events*/
        XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE |
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8004ea8:	f7ff fc08 	bl	80046bc <XMC_USIC_CH_DisableEvent>
                                                             (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE));
        if (ptr_runtime->bus_acquired == true)
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d002      	beq.n	8004ebe <I2C_MASTER_ReceiveHandler+0x242>
        {
          I2C_MASTER_lSendStop_JumpTo_RxCallback(handle);
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f000 f803 	bl	8004ec4 <I2C_MASTER_lSendStop_JumpTo_RxCallback>
        }
      }
    }
  } /* end of  if(ptr_runtime->rx_busy == true)*/
}
 8004ebe:	3714      	adds	r7, #20
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd90      	pop	{r4, r7, pc}

08004ec4 <I2C_MASTER_lSendStop_JumpTo_RxCallback>:

/* Function to issue Send Stop command and jump to receive callback routine */
static void I2C_MASTER_lSendStop_JumpTo_RxCallback(I2C_MASTER_t *const handle)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  ptr_runtime = handle->runtime;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	60fb      	str	r3, [r7, #12]

  if (ptr_runtime->send_stop == true)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	69db      	ldr	r3, [r3, #28]
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d10f      	bne.n	8004efa <I2C_MASTER_lSendStop_JumpTo_RxCallback+0x36>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
 8004eda:	bf00      	nop
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f7ff fbfd 	bl	80046e0 <XMC_USIC_CH_GetTransmitBufferStatus>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b80      	cmp	r3, #128	; 0x80
 8004eea:	d0f7      	beq.n	8004edc <I2C_MASTER_lSendStop_JumpTo_RxCallback+0x18>

    ptr_runtime->bus_acquired = false;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    I2C_MASTER_SendStop(handle);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f7ff fd07 	bl	8004908 <I2C_MASTER_SendStop>
  }

  while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
 8004efa:	bf00      	nop
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4618      	mov	r0, r3
 8004f02:	f7ff fbed 	bl	80046e0 <XMC_USIC_CH_GetTransmitBufferStatus>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b80      	cmp	r3, #128	; 0x80
 8004f0a:	d0f7      	beq.n	8004efc <I2C_MASTER_lSendStop_JumpTo_RxCallback+0x38>

  /* Reception complete */
  ptr_runtime->rx_busy = false;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  ptr_runtime->tx_busy = false;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  if (handle->config->rx_cbhandler != NULL)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	695b      	ldr	r3, [r3, #20]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d003      	beq.n	8004f2e <I2C_MASTER_lSendStop_JumpTo_RxCallback+0x6a>
  {
    /*Execute the 'End of reception' callback function*/
    handle->config->rx_cbhandler();
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	695b      	ldr	r3, [r3, #20]
 8004f2c:	4798      	blx	r3
  }
}
 8004f2e:	3710      	adds	r7, #16
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <I2C_MASTER_ProtocolHandler>:
 * @param  handle I2C_MASTER APP handle pointer of type I2C_MASTER_t*
 *
 * @return void
 */
void I2C_MASTER_ProtocolHandler(I2C_MASTER_t * const handle)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  uint32_t psr_status;

  psr_status = XMC_I2C_CH_GetStatusFlag(handle->channel);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4618      	mov	r0, r3
 8004f42:	f7ff fc53 	bl	80047ec <XMC_I2C_CH_GetStatusFlag>
 8004f46:	60f8      	str	r0, [r7, #12]

  /* Check for nack event */
  if ((handle->config->nack_cbhandler != NULL) && (psr_status & (uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00c      	beq.n	8004f6c <I2C_MASTER_ProtocolHandler+0x38>
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f003 0320 	and.w	r3, r3, #32
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d007      	beq.n	8004f6c <I2C_MASTER_ProtocolHandler+0x38>
  {
    I2C_MASTER_ClearFlag(handle,(uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED);
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	2120      	movs	r1, #32
 8004f60:	f7ff fd22 	bl	80049a8 <I2C_MASTER_ClearFlag>
    handle->config->nack_cbhandler();
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	4798      	blx	r3
  }

  /* Check for arbitration lost */
  if ((handle->config->arbitration_cbhandler != NULL) && (psr_status & (uint32_t)XMC_I2C_CH_STATUS_FLAG_ARBITRATION_LOST))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	69db      	ldr	r3, [r3, #28]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00c      	beq.n	8004f90 <I2C_MASTER_ProtocolHandler+0x5c>
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d007      	beq.n	8004f90 <I2C_MASTER_ProtocolHandler+0x5c>
  {
    I2C_MASTER_ClearFlag(handle,(uint32_t)XMC_I2C_CH_STATUS_FLAG_ARBITRATION_LOST);
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	2140      	movs	r1, #64	; 0x40
 8004f84:	f7ff fd10 	bl	80049a8 <I2C_MASTER_ClearFlag>
    handle->config->arbitration_cbhandler();
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	69db      	ldr	r3, [r3, #28]
 8004f8e:	4798      	blx	r3
  }

  /* Check for error detected */
  if ((handle->config->error_cbhandler != NULL) && (psr_status & ((uint32_t)XMC_I2C_CH_STATUS_FLAG_ERROR | (uint32_t)XMC_I2C_CH_STATUS_FLAG_WRONG_TDF_CODE_FOUND)))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	6a1b      	ldr	r3, [r3, #32]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00d      	beq.n	8004fb6 <I2C_MASTER_ProtocolHandler+0x82>
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f403 7381 	and.w	r3, r3, #258	; 0x102
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d008      	beq.n	8004fb6 <I2C_MASTER_ProtocolHandler+0x82>
  {
    I2C_MASTER_ClearFlag(handle,(uint32_t)XMC_I2C_CH_STATUS_FLAG_ERROR);
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004faa:	f7ff fcfd 	bl	80049a8 <I2C_MASTER_ClearFlag>
    handle->config->error_cbhandler();
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	6a1b      	ldr	r3, [r3, #32]
 8004fb4:	4798      	blx	r3
  }
}
 8004fb6:	3710      	adds	r7, #16
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <I2C_MASTER_lReconfigureRxFIFO>:
 *
 * @return void.
 */

static void I2C_MASTER_lReconfigureRxFIFO(const I2C_MASTER_t * const handle, uint32_t data_size)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b086      	sub	sp, #24
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
  uint32_t minfifo_value;
  uint8_t tx_fifo_size;
  uint8_t rx_fifo_size;
  uint8_t fifo_limit;

  rx_fifo_size = (uint8_t)((uint8_t)1 << handle->config->rxFIFO_size);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004fce:	461a      	mov	r2, r3
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	4093      	lsls	r3, r2
 8004fd4:	75bb      	strb	r3, [r7, #22]

  if ((handle->config->txFIFO_size > 0))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d008      	beq.n	8004ff4 <I2C_MASTER_lReconfigureRxFIFO+0x38>
  {
    tx_fifo_size = (uint8_t)((uint8_t)1 << handle->config->txFIFO_size);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004fea:	461a      	mov	r2, r3
 8004fec:	2301      	movs	r3, #1
 8004fee:	4093      	lsls	r3, r2
 8004ff0:	75fb      	strb	r3, [r7, #23]
 8004ff2:	e001      	b.n	8004ff8 <I2C_MASTER_lReconfigureRxFIFO+0x3c>
  }
  else
  {
    tx_fifo_size = 1U;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	75fb      	strb	r3, [r7, #23]
  }

  minfifo_value = (uint32_t)(calculate_minfifosize((uint32_t)tx_fifo_size, (uint32_t)rx_fifo_size));
 8004ff8:	7dfa      	ldrb	r2, [r7, #23]
 8004ffa:	7dbb      	ldrb	r3, [r7, #22]
 8004ffc:	4610      	mov	r0, r2
 8004ffe:	4619      	mov	r1, r3
 8005000:	f7ff fc94 	bl	800492c <calculate_minfifosize>
 8005004:	6138      	str	r0, [r7, #16]

  fifo_limit = (uint8_t)(calculate_minfifosize(data_size, minfifo_value));
 8005006:	6838      	ldr	r0, [r7, #0]
 8005008:	6939      	ldr	r1, [r7, #16]
 800500a:	f7ff fc8f 	bl	800492c <calculate_minfifosize>
 800500e:	4603      	mov	r3, r0
 8005010:	73fb      	strb	r3, [r7, #15]

  /* Set the limit value */
  I2C_MASTER_SetRXFIFOTriggerLimit((I2C_MASTER_t *)handle, handle->config->rxFIFO_size, ((uint32_t)fifo_limit - 1U));
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800501a:	461a      	mov	r2, r3
 800501c:	7bfb      	ldrb	r3, [r7, #15]
 800501e:	3b01      	subs	r3, #1
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	4611      	mov	r1, r2
 8005024:	461a      	mov	r2, r3
 8005026:	f7ff fbfd 	bl	8004824 <I2C_MASTER_SetRXFIFOTriggerLimit>
}
 800502a:	3718      	adds	r7, #24
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005030:	b480      	push	{r7}
 8005032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005034:	4b04      	ldr	r3, [pc, #16]	; (8005048 <__NVIC_GetPriorityGrouping+0x18>)
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800503c:	0a1b      	lsrs	r3, r3, #8
}
 800503e:	4618      	mov	r0, r3
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr
 8005048:	e000ed00 	.word	0xe000ed00

0800504c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	4603      	mov	r3, r0
 8005054:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800505a:	2b00      	cmp	r3, #0
 800505c:	db0b      	blt.n	8005076 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800505e:	4908      	ldr	r1, [pc, #32]	; (8005080 <__NVIC_EnableIRQ+0x34>)
 8005060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005064:	095b      	lsrs	r3, r3, #5
 8005066:	79fa      	ldrb	r2, [r7, #7]
 8005068:	f002 021f 	and.w	r2, r2, #31
 800506c:	2001      	movs	r0, #1
 800506e:	fa00 f202 	lsl.w	r2, r0, r2
 8005072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr
 8005080:	e000e100 	.word	0xe000e100

08005084 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
 800508a:	4603      	mov	r3, r0
 800508c:	6039      	str	r1, [r7, #0]
 800508e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005094:	2b00      	cmp	r3, #0
 8005096:	db0a      	blt.n	80050ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005098:	490d      	ldr	r1, [pc, #52]	; (80050d0 <__NVIC_SetPriority+0x4c>)
 800509a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800509e:	683a      	ldr	r2, [r7, #0]
 80050a0:	b2d2      	uxtb	r2, r2
 80050a2:	0092      	lsls	r2, r2, #2
 80050a4:	b2d2      	uxtb	r2, r2
 80050a6:	440b      	add	r3, r1
 80050a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80050ac:	e00a      	b.n	80050c4 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050ae:	4909      	ldr	r1, [pc, #36]	; (80050d4 <__NVIC_SetPriority+0x50>)
 80050b0:	79fb      	ldrb	r3, [r7, #7]
 80050b2:	f003 030f 	and.w	r3, r3, #15
 80050b6:	3b04      	subs	r3, #4
 80050b8:	683a      	ldr	r2, [r7, #0]
 80050ba:	b2d2      	uxtb	r2, r2
 80050bc:	0092      	lsls	r2, r2, #2
 80050be:	b2d2      	uxtb	r2, r2
 80050c0:	440b      	add	r3, r1
 80050c2:	761a      	strb	r2, [r3, #24]
  }
}
 80050c4:	370c      	adds	r7, #12
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	e000e100 	.word	0xe000e100
 80050d4:	e000ed00 	.word	0xe000ed00

080050d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050d8:	b480      	push	{r7}
 80050da:	b089      	sub	sp, #36	; 0x24
 80050dc:	af00      	add	r7, sp, #0
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f003 0307 	and.w	r3, r3, #7
 80050ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	f1c3 0307 	rsb	r3, r3, #7
 80050f2:	2b06      	cmp	r3, #6
 80050f4:	bf28      	it	cs
 80050f6:	2306      	movcs	r3, #6
 80050f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	3306      	adds	r3, #6
 80050fe:	2b06      	cmp	r3, #6
 8005100:	d902      	bls.n	8005108 <NVIC_EncodePriority+0x30>
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	3b01      	subs	r3, #1
 8005106:	e000      	b.n	800510a <NVIC_EncodePriority+0x32>
 8005108:	2300      	movs	r3, #0
 800510a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	2201      	movs	r2, #1
 8005110:	fa02 f303 	lsl.w	r3, r2, r3
 8005114:	1e5a      	subs	r2, r3, #1
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	401a      	ands	r2, r3
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	2101      	movs	r1, #1
 8005122:	fa01 f303 	lsl.w	r3, r1, r3
 8005126:	1e59      	subs	r1, r3, #1
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 800512c:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 800512e:	4618      	mov	r0, r3
 8005130:	3724      	adds	r7, #36	; 0x24
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop

0800513c <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	460b      	mov	r3, r1
 8005146:	70fb      	strb	r3, [r7, #3]
 8005148:	4613      	mov	r3, r2
 800514a:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 800514c:	78f8      	ldrb	r0, [r7, #3]
 800514e:	78fb      	ldrb	r3, [r7, #3]
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	3306      	adds	r3, #6
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	4413      	add	r3, r2
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	f023 0207 	bic.w	r2, r3, #7
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 800515e:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8005160:	431a      	orrs	r2, r3
 8005162:	6879      	ldr	r1, [r7, #4]
 8005164:	1d83      	adds	r3, r0, #6
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	440b      	add	r3, r1
 800516a:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 800516c:	370c      	adds	r7, #12
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr
 8005176:	bf00      	nop

08005178 <XMC_USIC_CH_TXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
  channel->TBCTR |= event;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	431a      	orrs	r2, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <XMC_USIC_CH_RXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
  channel->RBCTR |= event;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	431a      	orrs	r2, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <XMC_USIC_CH_SetMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	460b      	mov	r3, r1
 80051ca:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d0:	f023 020f 	bic.w	r2, r3, #15
 80051d4:	78fb      	ldrb	r3, [r7, #3]
 80051d6:	431a      	orrs	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	641a      	str	r2, [r3, #64]	; 0x40
}
 80051dc:	370c      	adds	r7, #12
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop

080051e8 <XMC_I2C_CH_Start>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_USIC_CH_SetMode()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_Start(XMC_USIC_CH_t *const channel)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_I2C);
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	2104      	movs	r1, #4
 80051f4:	f7ff ffe4 	bl	80051c0 <XMC_USIC_CH_SetMode>
}
 80051f8:	3708      	adds	r7, #8
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop

08005200 <I2C_MASTER_0_disable_io>:
  .baudrate = (uint32_t)(100000U),
  .address  = 0
};

static void I2C_MASTER_0_disable_io(void)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	af00      	add	r7, sp, #0
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)5, XMC_GPIO_MODE_INPUT_TRISTATE);
 8005204:	4805      	ldr	r0, [pc, #20]	; (800521c <I2C_MASTER_0_disable_io+0x1c>)
 8005206:	2105      	movs	r1, #5
 8005208:	2200      	movs	r2, #0
 800520a:	f7fc fb19 	bl	8001840 <XMC_GPIO_SetMode>
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)4, XMC_GPIO_MODE_INPUT_TRISTATE);
 800520e:	4803      	ldr	r0, [pc, #12]	; (800521c <I2C_MASTER_0_disable_io+0x1c>)
 8005210:	2104      	movs	r1, #4
 8005212:	2200      	movs	r2, #0
 8005214:	f7fc fb14 	bl	8001840 <XMC_GPIO_SetMode>
}
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	48028200 	.word	0x48028200

08005220 <I2C_MASTER_0_enable_io>:

static void I2C_MASTER_0_enable_io(void)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	af00      	add	r7, sp, #0
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)5, I2C_MASTER_0_sda_pin_config.mode);
 8005224:	23d0      	movs	r3, #208	; 0xd0
 8005226:	4806      	ldr	r0, [pc, #24]	; (8005240 <I2C_MASTER_0_enable_io+0x20>)
 8005228:	2105      	movs	r1, #5
 800522a:	461a      	mov	r2, r3
 800522c:	f7fc fb08 	bl	8001840 <XMC_GPIO_SetMode>
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)4, I2C_MASTER_0_scl_pin_config.mode);
 8005230:	23d0      	movs	r3, #208	; 0xd0
 8005232:	4803      	ldr	r0, [pc, #12]	; (8005240 <I2C_MASTER_0_enable_io+0x20>)
 8005234:	2104      	movs	r1, #4
 8005236:	461a      	mov	r2, r3
 8005238:	f7fc fb02 	bl	8001840 <XMC_GPIO_SetMode>
}
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	48028200 	.word	0x48028200

08005244 <I2C_MASTER_0_init>:
  .config = &I2C_MASTER_0_config,
  .runtime = &I2C_MASTER_0_runtime,
};

void I2C_MASTER_0_init(void)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b082      	sub	sp, #8
 8005248:	af00      	add	r7, sp, #0
 
  const uint32_t tx_fifo_events = (uint32_t)(0);
 800524a:	2300      	movs	r3, #0
 800524c:	607b      	str	r3, [r7, #4]
  const uint32_t rx_fifo_events = (uint32_t)(XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE | XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD);
 800524e:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8005252:	603b      	str	r3, [r7, #0]
  XMC_I2C_CH_Init(XMC_I2C0_CH1, &I2C_MASTER_0_channel_config);
 8005254:	4832      	ldr	r0, [pc, #200]	; (8005320 <I2C_MASTER_0_init+0xdc>)
 8005256:	4933      	ldr	r1, [pc, #204]	; (8005324 <I2C_MASTER_0_init+0xe0>)
 8005258:	f7fc fb74 	bl	8001944 <XMC_I2C_CH_Init>

  XMC_USIC_CH_SetInputSource(XMC_I2C0_CH1, XMC_USIC_CH_INPUT_DX0, 1);
 800525c:	4830      	ldr	r0, [pc, #192]	; (8005320 <I2C_MASTER_0_init+0xdc>)
 800525e:	2100      	movs	r1, #0
 8005260:	2201      	movs	r2, #1
 8005262:	f7ff ff6b 	bl	800513c <XMC_USIC_CH_SetInputSource>
  XMC_USIC_CH_SetInputSource(XMC_I2C0_CH1, XMC_USIC_CH_INPUT_DX1, 0);
 8005266:	482e      	ldr	r0, [pc, #184]	; (8005320 <I2C_MASTER_0_init+0xdc>)
 8005268:	2101      	movs	r1, #1
 800526a:	2200      	movs	r2, #0
 800526c:	f7ff ff66 	bl	800513c <XMC_USIC_CH_SetInputSource>

  /* configure i2c tx fifo */
  XMC_USIC_CH_TXFIFO_Configure(XMC_I2C0_CH1,
 8005270:	482b      	ldr	r0, [pc, #172]	; (8005320 <I2C_MASTER_0_init+0xdc>)
 8005272:	2110      	movs	r1, #16
 8005274:	2204      	movs	r2, #4
 8005276:	2301      	movs	r3, #1
 8005278:	f7fc fe16 	bl	8001ea8 <XMC_USIC_CH_TXFIFO_Configure>
                               16,
                               XMC_USIC_CH_FIFO_SIZE_16WORDS,
                               (uint32_t)1);
  XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_I2C0_CH1,
 800527c:	4828      	ldr	r0, [pc, #160]	; (8005320 <I2C_MASTER_0_init+0xdc>)
 800527e:	2110      	movs	r1, #16
 8005280:	2203      	movs	r2, #3
 8005282:	f7fc fea1 	bl	8001fc8 <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>
                                               XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
                                             ((uint32_t)3));
  XMC_USIC_CH_TXFIFO_EnableEvent(XMC_I2C0_CH1, tx_fifo_events);
 8005286:	4826      	ldr	r0, [pc, #152]	; (8005320 <I2C_MASTER_0_init+0xdc>)
 8005288:	6879      	ldr	r1, [r7, #4]
 800528a:	f7ff ff75 	bl	8005178 <XMC_USIC_CH_TXFIFO_EnableEvent>
  /* configure i2c rx fifo */
  XMC_USIC_CH_RXFIFO_Configure(XMC_I2C0_CH1,
 800528e:	4824      	ldr	r0, [pc, #144]	; (8005320 <I2C_MASTER_0_init+0xdc>)
 8005290:	2100      	movs	r1, #0
 8005292:	2204      	movs	r2, #4
 8005294:	230f      	movs	r3, #15
 8005296:	f7fc fe2f 	bl	8001ef8 <XMC_USIC_CH_RXFIFO_Configure>
                               0,
                               XMC_USIC_CH_FIFO_SIZE_16WORDS,
                                (uint32_t)(15));
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_I2C0_CH1,
 800529a:	4821      	ldr	r0, [pc, #132]	; (8005320 <I2C_MASTER_0_init+0xdc>)
 800529c:	2110      	movs	r1, #16
 800529e:	2205      	movs	r2, #5
 80052a0:	f7fc feb0 	bl	8002004 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
                                               XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
                                              ((uint32_t)0x5));
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_I2C0_CH1,
 80052a4:	481e      	ldr	r0, [pc, #120]	; (8005320 <I2C_MASTER_0_init+0xdc>)
 80052a6:	2113      	movs	r1, #19
 80052a8:	2205      	movs	r2, #5
 80052aa:	f7fc feab 	bl	8002004 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
                                               XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE,
                                              ((uint32_t)0x5));
  XMC_USIC_CH_RXFIFO_EnableEvent(XMC_I2C0_CH1, rx_fifo_events);
 80052ae:	481c      	ldr	r0, [pc, #112]	; (8005320 <I2C_MASTER_0_init+0xdc>)
 80052b0:	6839      	ldr	r1, [r7, #0]
 80052b2:	f7ff ff73 	bl	800519c <XMC_USIC_CH_RXFIFO_EnableEvent>
  XMC_USIC_CH_SetInterruptNodePointer(XMC_I2C0_CH1,
 80052b6:	481a      	ldr	r0, [pc, #104]	; (8005320 <I2C_MASTER_0_init+0xdc>)
 80052b8:	2110      	movs	r1, #16
 80052ba:	2200      	movs	r2, #0
 80052bc:	f7fc fe68 	bl	8001f90 <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
                                       ((uint32_t)0));
  XMC_I2C_CH_Start(XMC_I2C0_CH1);
 80052c0:	4817      	ldr	r0, [pc, #92]	; (8005320 <I2C_MASTER_0_init+0xdc>)
 80052c2:	f7ff ff91 	bl	80051e8 <XMC_I2C_CH_Start>

  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)5, &I2C_MASTER_0_sda_pin_config);
 80052c6:	4818      	ldr	r0, [pc, #96]	; (8005328 <I2C_MASTER_0_init+0xe4>)
 80052c8:	2105      	movs	r1, #5
 80052ca:	4a18      	ldr	r2, [pc, #96]	; (800532c <I2C_MASTER_0_init+0xe8>)
 80052cc:	f7fb f86a 	bl	80003a4 <XMC_GPIO_Init>
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)4, &I2C_MASTER_0_scl_pin_config);
 80052d0:	4815      	ldr	r0, [pc, #84]	; (8005328 <I2C_MASTER_0_init+0xe4>)
 80052d2:	2104      	movs	r1, #4
 80052d4:	4a16      	ldr	r2, [pc, #88]	; (8005330 <I2C_MASTER_0_init+0xec>)
 80052d6:	f7fb f865 	bl	80003a4 <XMC_GPIO_Init>
/* Tx interrupt priority settings */
  NVIC_SetPriority((IRQn_Type)87, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),63,0));
 80052da:	f7ff fea9 	bl	8005030 <__NVIC_GetPriorityGrouping>
 80052de:	4603      	mov	r3, r0
 80052e0:	4618      	mov	r0, r3
 80052e2:	213f      	movs	r1, #63	; 0x3f
 80052e4:	2200      	movs	r2, #0
 80052e6:	f7ff fef7 	bl	80050d8 <NVIC_EncodePriority>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2057      	movs	r0, #87	; 0x57
 80052ee:	4619      	mov	r1, r3
 80052f0:	f7ff fec8 	bl	8005084 <__NVIC_SetPriority>
  NVIC_EnableIRQ((IRQn_Type)87);/* Rx interrupt priority settings */
 80052f4:	2057      	movs	r0, #87	; 0x57
 80052f6:	f7ff fea9 	bl	800504c <__NVIC_EnableIRQ>
  NVIC_SetPriority((IRQn_Type)89, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),63,0));
 80052fa:	f7ff fe99 	bl	8005030 <__NVIC_GetPriorityGrouping>
 80052fe:	4603      	mov	r3, r0
 8005300:	4618      	mov	r0, r3
 8005302:	213f      	movs	r1, #63	; 0x3f
 8005304:	2200      	movs	r2, #0
 8005306:	f7ff fee7 	bl	80050d8 <NVIC_EncodePriority>
 800530a:	4603      	mov	r3, r0
 800530c:	2059      	movs	r0, #89	; 0x59
 800530e:	4619      	mov	r1, r3
 8005310:	f7ff feb8 	bl	8005084 <__NVIC_SetPriority>
  NVIC_EnableIRQ((IRQn_Type)89);}
 8005314:	2059      	movs	r0, #89	; 0x59
 8005316:	f7ff fe99 	bl	800504c <__NVIC_EnableIRQ>
 800531a:	3708      	adds	r7, #8
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}
 8005320:	40030200 	.word	0x40030200
 8005324:	0800a854 	.word	0x0800a854
 8005328:	48028200 	.word	0x48028200
 800532c:	0800a83c 	.word	0x0800a83c
 8005330:	0800a848 	.word	0x0800a848

08005334 <USIC0_3_IRQHandler>:
/*Transmit ISR*/
void I2C_MASTER_0_TX_HANDLER()
{
 8005334:	b580      	push	{r7, lr}
 8005336:	af00      	add	r7, sp, #0
  I2C_MASTER_TransmitHandler(&I2C_MASTER_0);
 8005338:	4801      	ldr	r0, [pc, #4]	; (8005340 <USIC0_3_IRQHandler+0xc>)
 800533a:	f7ff fb43 	bl	80049c4 <I2C_MASTER_TransmitHandler>
}
 800533e:	bd80      	pop	{r7, pc}
 8005340:	1fffce88 	.word	0x1fffce88

08005344 <USIC0_5_IRQHandler>:
/*Receive ISR*/
void I2C_MASTER_0_RX_HANDLER()
{
 8005344:	b580      	push	{r7, lr}
 8005346:	af00      	add	r7, sp, #0
  I2C_MASTER_ReceiveHandler(&I2C_MASTER_0);
 8005348:	4801      	ldr	r0, [pc, #4]	; (8005350 <USIC0_5_IRQHandler+0xc>)
 800534a:	f7ff fc97 	bl	8004c7c <I2C_MASTER_ReceiveHandler>
}
 800534e:	bd80      	pop	{r7, pc}
 8005350:	1fffce88 	.word	0x1fffce88

08005354 <XMC_CCU8_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_Init()<BR>  XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPrescaler()<BR> 
 *  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU8_GIDLC_SPRB_Msk;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	60da      	str	r2, [r3, #12]
}
 8005368:	370c      	adds	r7, #12
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop

08005374 <GLOBAL_CCU8_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU8_STATUS_t GLOBAL_CCU8_Init(GLOBAL_CCU8_t* handle)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU8_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	7b5b      	ldrb	r3, [r3, #13]
 8005380:	f083 0301 	eor.w	r3, r3, #1
 8005384:	b2db      	uxtb	r3, r3
 8005386:	2b00      	cmp	r3, #0
 8005388:	d00f      	beq.n	80053aa <GLOBAL_CCU8_Init+0x36>
  {
    /* Enable CCU8 module */
    XMC_CCU8_Init(handle->module_ptr,handle->mcs_action);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	689a      	ldr	r2, [r3, #8]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	7b1b      	ldrb	r3, [r3, #12]
 8005392:	4610      	mov	r0, r2
 8005394:	4619      	mov	r1, r3
 8005396:	f7fc f883 	bl	80014a0 <XMC_CCU8_Init>
    /* Start the prescaler */
    XMC_CCU8_StartPrescaler(handle->module_ptr);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	4618      	mov	r0, r3
 80053a0:	f7ff ffd8 	bl	8005354 <XMC_CCU8_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU8_STATUS_SUCCESS);
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3708      	adds	r7, #8
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	60da      	str	r2, [r3, #12]
}
 80053c8:	370c      	adds	r7, #12
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop

080053d4 <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	7b5b      	ldrb	r3, [r3, #13]
 80053e0:	f083 0301 	eor.w	r3, r3, #1
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d00f      	beq.n	800540a <GLOBAL_CCU4_Init+0x36>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	689a      	ldr	r2, [r3, #8]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	7b1b      	ldrb	r3, [r3, #12]
 80053f2:	4610      	mov	r0, r2
 80053f4:	4619      	mov	r1, r3
 80053f6:	f7fb fd07 	bl	8000e08 <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	4618      	mov	r0, r3
 8005400:	f7ff ffd8 	bl	80053b4 <XMC_CCU4_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
 800540a:	2300      	movs	r3, #0
}
 800540c:	4618      	mov	r0, r3
 800540e:	3708      	adds	r7, #8
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <XMC_VADC_GLOBAL_DisablePostCalibration>:
 * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
 * None
 */

__STATIC_INLINE void XMC_VADC_GLOBAL_DisablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, uint32_t group_number)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GLOBAL_DisablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_number));
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	3310      	adds	r3, #16
 8005428:	4619      	mov	r1, r3
 800542a:	2301      	movs	r3, #1
 800542c:	408b      	lsls	r3, r1
 800542e:	431a      	orrs	r2, r3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8005436:	370c      	adds	r7, #12
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <GLOBAL_ADC_Init>:
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/**
 * This function initializes all instances of the ADC Global APP and low level app.
 */
GLOBAL_ADC_STATUS_t GLOBAL_ADC_Init(GLOBAL_ADC_t *const handle_ptr)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_ADC_Init:Invalid handle_ptr", (handle_ptr != NULL))
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  uint32_t group_index;
#endif

  if (GLOBAL_ADC_UNINITIALIZED == handle_ptr->init_state)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	7e1b      	ldrb	r3, [r3, #24]
 800544c:	2b02      	cmp	r3, #2
 800544e:	d149      	bne.n	80054e4 <GLOBAL_ADC_Init+0xa4>
  {  
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	695a      	ldr	r2, [r3, #20]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	691b      	ldr	r3, [r3, #16]
 8005458:	4610      	mov	r0, r2
 800545a:	4619      	mov	r1, r3
 800545c:	f7fc fe80 	bl	8002160 <XMC_VADC_GLOBAL_Init>

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 8005460:	2300      	movs	r3, #0
 8005462:	60fb      	str	r3, [r7, #12]
 8005464:	e02f      	b.n	80054c6 <GLOBAL_ADC_Init+0x86>
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800546e:	6819      	ldr	r1, [r3, #0]
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	4608      	mov	r0, r1
 800547c:	4619      	mov	r1, r3
 800547e:	f7fc ff11 	bl	80022a4 <XMC_VADC_GROUP_Init>
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);

      /* Switch on the converter of the Group[group_index]*/
      XMC_VADC_GROUP_SetPowerMode(handle_ptr->group_ptrs_array[group_index]->group_handle,
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4618      	mov	r0, r3
 800548e:	2103      	movs	r1, #3
 8005490:	f7fc ff98 	bl	80023c4 <XMC_VADC_GROUP_SetPowerMode>
                                  XMC_VADC_GROUP_POWERMODE_NORMAL);

      /* Disable the post calibration option for the respective group*/
      if ((bool)false == handle_ptr->group_ptrs_array[group_index]->post_calibration)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	68fa      	ldr	r2, [r7, #12]
 8005498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800549c:	7a1b      	ldrb	r3, [r3, #8]
 800549e:	f083 0301 	eor.w	r3, r3, #1
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d005      	beq.n	80054b4 <GLOBAL_ADC_Init+0x74>
      {
        XMC_VADC_GLOBAL_DisablePostCalibration(handle_ptr->module_ptr,group_index);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	695b      	ldr	r3, [r3, #20]
 80054ac:	4618      	mov	r0, r3
 80054ae:	68f9      	ldr	r1, [r7, #12]
 80054b0:	f7ff ffb0 	bl	8005414 <XMC_VADC_GLOBAL_DisablePostCalibration>

#if(XMC_VADC_SHS_AVAILABLE == 1U)
      XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(handle_ptr->global_shs_ptr, (XMC_VADC_GROUP_INDEX_t)group_index);
#endif

      handle_ptr->group_ptrs_array[group_index]->state = GLOBAL_ADC_SUCCESS;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054bc:	2200      	movs	r2, #0
 80054be:	725a      	strb	r2, [r3, #9]
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	3301      	adds	r3, #1
 80054c4:	60fb      	str	r3, [r7, #12]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2b03      	cmp	r3, #3
 80054ca:	d9cc      	bls.n	8005466 <GLOBAL_ADC_Init+0x26>
#endif
#endif /* _XMC_VADC_GROUP_AVAILABLE_ */
#if(XMC_VADC_SHS_AVAILABLE == 1U)
    XMC_VADC_GLOBAL_SHS_SetAnalogReference(handle_ptr->global_shs_ptr, GLOBAL_ADC_AREF_VALUE);
#endif
    if((bool)true == handle_ptr->enable_startup_calibration)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	7e5b      	ldrb	r3, [r3, #25]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d004      	beq.n	80054de <GLOBAL_ADC_Init+0x9e>
    {
    	XMC_VADC_GLOBAL_StartupCalibration(handle_ptr->module_ptr);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	695b      	ldr	r3, [r3, #20]
 80054d8:	4618      	mov	r0, r3
 80054da:	f7fc fe8f 	bl	80021fc <XMC_VADC_GLOBAL_StartupCalibration>
    }
    handle_ptr->init_state = GLOBAL_ADC_SUCCESS;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	761a      	strb	r2, [r3, #24]
  }
  return (handle_ptr->init_state);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	7e1b      	ldrb	r3, [r3, #24]
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3710      	adds	r7, #16
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b082      	sub	sp, #8
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6819      	ldr	r1, [r3, #0]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	7c1a      	ldrb	r2, [r3, #16]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	3304      	adds	r3, #4
 8005504:	4608      	mov	r0, r1
 8005506:	4611      	mov	r1, r2
 8005508:	461a      	mov	r2, r3
 800550a:	f7fa ff4b 	bl	80003a4 <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6819      	ldr	r1, [r3, #0]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	7c1a      	ldrb	r2, [r3, #16]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	7c5b      	ldrb	r3, [r3, #17]
 800551a:	4608      	mov	r0, r1
 800551c:	4611      	mov	r1, r2
 800551e:	461a      	mov	r2, r3
 8005520:	f7fc f9ce 	bl	80018c0 <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3708      	adds	r7, #8
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop

08005530 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005530:	b480      	push	{r7}
 8005532:	b085      	sub	sp, #20
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f003 0307 	and.w	r3, r3, #7
 800553e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005540:	4b0c      	ldr	r3, [pc, #48]	; (8005574 <__NVIC_SetPriorityGrouping+0x44>)
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005546:	68ba      	ldr	r2, [r7, #8]
 8005548:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800554c:	4013      	ands	r3, r2
 800554e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8005558:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800555c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005560:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8005562:	4a04      	ldr	r2, [pc, #16]	; (8005574 <__NVIC_SetPriorityGrouping+0x44>)
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	60d3      	str	r3, [r2, #12]
}
 8005568:	3714      	adds	r7, #20
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	e000ed00 	.word	0xe000ed00

08005578 <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 800557e:	2001      	movs	r0, #1
 8005580:	f7ff ffd6 	bl	8005530 <__NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005584:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 8005586:	4b21      	ldr	r3, [pc, #132]	; (800560c <SystemCoreSetup+0x94>)
 8005588:	4a21      	ldr	r2, [pc, #132]	; (8005610 <SystemCoreSetup+0x98>)
 800558a:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800558c:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8005590:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8005592:	4a1e      	ldr	r2, [pc, #120]	; (800560c <SystemCoreSetup+0x94>)
 8005594:	4b1d      	ldr	r3, [pc, #116]	; (800560c <SystemCoreSetup+0x94>)
 8005596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800559a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800559e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 80055a2:	4b1c      	ldr	r3, [pc, #112]	; (8005614 <SystemCoreSetup+0x9c>)
 80055a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055a8:	3314      	adds	r3, #20
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f023 030f 	bic.w	r3, r3, #15
 80055b4:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f043 0303 	orr.w	r3, r3, #3
 80055bc:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 80055be:	4b15      	ldr	r3, [pc, #84]	; (8005614 <SystemCoreSetup+0x9c>)
 80055c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055c4:	3314      	adds	r3, #20
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	601a      	str	r2, [r3, #0]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 80055ca:	4a10      	ldr	r2, [pc, #64]	; (800560c <SystemCoreSetup+0x94>)
 80055cc:	4b0f      	ldr	r3, [pc, #60]	; (800560c <SystemCoreSetup+0x94>)
 80055ce:	695b      	ldr	r3, [r3, #20]
 80055d0:	f023 0310 	bic.w	r3, r3, #16
 80055d4:	6153      	str	r3, [r2, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 80055d6:	4a0d      	ldr	r2, [pc, #52]	; (800560c <SystemCoreSetup+0x94>)
 80055d8:	4b0c      	ldr	r3, [pc, #48]	; (800560c <SystemCoreSetup+0x94>)
 80055da:	695b      	ldr	r3, [r3, #20]
 80055dc:	f023 0308 	bic.w	r3, r3, #8
 80055e0:	6153      	str	r3, [r2, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80055e2:	4a0a      	ldr	r2, [pc, #40]	; (800560c <SystemCoreSetup+0x94>)
 80055e4:	4b09      	ldr	r3, [pc, #36]	; (800560c <SystemCoreSetup+0x94>)
 80055e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055ec:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 80055ee:	4a07      	ldr	r2, [pc, #28]	; (800560c <SystemCoreSetup+0x94>)
 80055f0:	4b06      	ldr	r3, [pc, #24]	; (800560c <SystemCoreSetup+0x94>)
 80055f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80055f8:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 80055fa:	4a04      	ldr	r2, [pc, #16]	; (800560c <SystemCoreSetup+0x94>)
 80055fc:	4b03      	ldr	r3, [pc, #12]	; (800560c <SystemCoreSetup+0x94>)
 80055fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005600:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005604:	6253      	str	r3, [r2, #36]	; 0x24
}
 8005606:	3708      	adds	r7, #8
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}
 800560c:	e000ed00 	.word	0xe000ed00
 8005610:	08000000 	.word	0x08000000
 8005614:	58001000 	.word	0x58001000

08005618 <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 8005618:	b480      	push	{r7}
 800561a:	b085      	sub	sp, #20
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 8005620:	2300      	movs	r3, #0
 8005622:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	701a      	strb	r2, [r3, #0]

  return (status);
 800562a:	7bfb      	ldrb	r3, [r7, #15]
}
 800562c:	4618      	mov	r0, r3
 800562e:	3714      	adds	r7, #20
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 8005638:	b480      	push	{r7}
 800563a:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 800563c:	4b02      	ldr	r3, [pc, #8]	; (8005648 <OSCHP_GetFrequency+0x10>)
}
 800563e:	4618      	mov	r0, r3
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr
 8005648:	00b71b00 	.word	0x00b71b00

0800564c <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 800564c:	b5b0      	push	{r4, r5, r7, lr}
 800564e:	b086      	sub	sp, #24
 8005650:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 8005652:	4b10      	ldr	r3, [pc, #64]	; (8005694 <SystemCoreClockSetup+0x48>)
 8005654:	1d3c      	adds	r4, r7, #4
 8005656:	461d      	mov	r5, r3
 8005658:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800565a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800565c:	682b      	ldr	r3, [r5, #0]
 800565e:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 8005660:	1d3b      	adds	r3, r7, #4
 8005662:	4618      	mov	r0, r3
 8005664:	f7fa ff7e 	bl	8000564 <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 8005668:	2000      	movs	r0, #0
 800566a:	f7fb f879 	bl	8000760 <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 800566e:	2000      	movs	r0, #0
 8005670:	f7fb f82e 	bl	80006d0 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(4U);
 8005674:	2004      	movs	r0, #4
 8005676:	f7fb f8ff 	bl	8000878 <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_StartUsbPll(1U, 32U);
 800567a:	2001      	movs	r0, #1
 800567c:	2120      	movs	r1, #32
 800567e:	f7fb f94f 	bl	8000920 <XMC_SCU_CLOCK_StartUsbPll>

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 8005682:	2000      	movs	r0, #0
 8005684:	f7fb f838 	bl	80006f8 <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 8005688:	2001      	movs	r0, #1
 800568a:	f7fb f909 	bl	80008a0 <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

}
 800568e:	3718      	adds	r7, #24
 8005690:	46bd      	mov	sp, r7
 8005692:	bdb0      	pop	{r4, r5, r7, pc}
 8005694:	0800ab48 	.word	0x0800ab48

08005698 <CCU8_SLICE_CONFIG_Init>:

  return (version);
}
/* This function initializes the CCU8 slice */
CCU8_SLICE_CONFIG_STATUS_t CCU8_SLICE_CONFIG_Init(const CCU8_SLICE_CONFIG_t *const handle_ptr)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b082      	sub	sp, #8
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  return handle_ptr->init();
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4798      	blx	r3
 80056a6:	4603      	mov	r3, r0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3708      	adds	r7, #8
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <XMC_CCU8_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_DisableClock()<BR>  XMC_CCU8_EnableMultipleClocks()<BR>  XMC_CCU8_StartPrescaler()<BR>  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_EnableClock(XMC_CCU8_MODULE_t *const module, const uint8_t slice_number)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	460b      	mov	r3, r1
 80056ba:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1 << slice_number);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	68da      	ldr	r2, [r3, #12]
 80056c0:	78fb      	ldrb	r3, [r7, #3]
 80056c2:	2101      	movs	r1, #1
 80056c4:	fa01 f303 	lsl.w	r3, r1, r3
 80056c8:	431a      	orrs	r2, r3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	60da      	str	r2, [r3, #12]
}
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <XMC_CCU8_SLICE_SetTimerCompareMatchChannel1>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_EnableShadowTransfer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_SetTimerCompareMatchChannel1(XMC_CCU8_SLICE_t *const slice, const uint16_t compare_val)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	460b      	mov	r3, r1
 80056e2:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatchChannel1:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->CR1S = (uint32_t) compare_val;
 80056e4:	887a      	ldrh	r2, [r7, #2]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <XMC_CCU8_SLICE_SetTimerCompareMatchChannel2>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_EnableShadowTransfer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_SetTimerCompareMatchChannel2(XMC_CCU8_SLICE_t *const slice, const uint16_t compare_val)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	460b      	mov	r3, r1
 80056fe:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatchChannel2:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->CR2S = (uint32_t) compare_val;
 8005700:	887a      	ldrh	r2, [r7, #2]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	645a      	str	r2, [r3, #68]	; 0x44
}
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <XMC_CCU8_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU8_EnableShadowTransfer(XMC_CCU8_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_EnableShadowTransfer:Invalid module Pointer", XMC_CCU8_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	683a      	ldr	r2, [r7, #0]
 800571e:	611a      	str	r2, [r3, #16]
}
 8005720:	370c      	adds	r7, #12
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop

0800572c <XMC_CCU8_SLICE_SetTimerValue>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_GetTimerValue().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_SetTimerValue(XMC_CCU8_SLICE_t *const slice, const uint16_t timer_val)
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	460b      	mov	r3, r1
 8005736:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerValue:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TIMER = (uint32_t) timer_val;
 8005738:	887a      	ldrh	r2, [r7, #2]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	671a      	str	r2, [r3, #112]	; 0x70
}
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <XMC_CCU8_SLICE_DisableCascadedShadowTransfer>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_EnableCascadedShadowTransfer()<BR>.
 * @note Not available for XMC4500 series 
 */
__STATIC_INLINE void XMC_CCU8_SLICE_DisableCascadedShadowTransfer(XMC_CCU8_SLICE_t *const slice)
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_DisableCascadedShadowTransfer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->STC &= ~(uint32_t) CCU8_CC8_STC_CSE_Msk;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005756:	f023 0201 	bic.w	r2, r3, #1
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 8005760:	370c      	adds	r7, #12
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
 800576a:	bf00      	nop

0800576c <CCU8_SLICE_CONFIG_0_lInit>:
  .level               = XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH,
  .duration            = XMC_CCU8_SLICE_EVENT_FILTER_DISABLED                               
 };
            /* Channel initialization function */
CCU8_SLICE_CONFIG_STATUS_t CCU8_SLICE_CONFIG_0_lInit(void)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	af00      	add	r7, sp, #0
 	
  (void)GLOBAL_CCU8_Init(&GLOBAL_CCU8_0);
 8005770:	4820      	ldr	r0, [pc, #128]	; (80057f4 <CCU8_SLICE_CONFIG_0_lInit+0x88>)
 8005772:	f7ff fdff 	bl	8005374 <GLOBAL_CCU8_Init>
   
  /* Configure CCU8x_CC8y slice as timer unit*/
  XMC_CCU8_SLICE_CompareInit(CCU80_CC83, &CCU8_SLICE_CONFIG_0_compare_config);
 8005776:	4820      	ldr	r0, [pc, #128]	; (80057f8 <CCU8_SLICE_CONFIG_0_lInit+0x8c>)
 8005778:	4920      	ldr	r1, [pc, #128]	; (80057fc <CCU8_SLICE_CONFIG_0_lInit+0x90>)
 800577a:	f7fb feaf 	bl	80014dc <XMC_CCU8_SLICE_CompareInit>
  /* Set timer compare register value */
  XMC_CCU8_SLICE_SetTimerCompareMatchChannel1(CCU80_CC83, (uint16_t)32768U); 
 800577e:	481e      	ldr	r0, [pc, #120]	; (80057f8 <CCU8_SLICE_CONFIG_0_lInit+0x8c>)
 8005780:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005784:	f7ff ffa8 	bl	80056d8 <XMC_CCU8_SLICE_SetTimerCompareMatchChannel1>
  XMC_CCU8_SLICE_SetTimerCompareMatchChannel2(CCU80_CC83, (uint16_t)32768U); 
 8005788:	481b      	ldr	r0, [pc, #108]	; (80057f8 <CCU8_SLICE_CONFIG_0_lInit+0x8c>)
 800578a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800578e:	f7ff ffb1 	bl	80056f4 <XMC_CCU8_SLICE_SetTimerCompareMatchChannel2>
  /* Set timer period register value */
  XMC_CCU8_SLICE_SetTimerPeriodMatch(CCU80_CC83, (uint16_t)65535U);	
 8005792:	4819      	ldr	r0, [pc, #100]	; (80057f8 <CCU8_SLICE_CONFIG_0_lInit+0x8c>)
 8005794:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005798:	f7fb fffe 	bl	8001798 <XMC_CCU8_SLICE_SetTimerPeriodMatch>
	  
  
  
  /* Register value update settings */
  
  XMC_CCU8_SetMultiChannelShadowTransferMode(CCU80, XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE3);
 800579c:	4818      	ldr	r0, [pc, #96]	; (8005800 <CCU8_SLICE_CONFIG_0_lInit+0x94>)
 800579e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 80057a2:	f7fb fef1 	bl	8001588 <XMC_CCU8_SetMultiChannelShadowTransferMode>
			   
  
  XMC_CCU8_SLICE_DisableCascadedShadowTransfer(CCU80_CC83);
 80057a6:	4814      	ldr	r0, [pc, #80]	; (80057f8 <CCU8_SLICE_CONFIG_0_lInit+0x8c>)
 80057a8:	f7ff ffce 	bl	8005748 <XMC_CCU8_SLICE_DisableCascadedShadowTransfer>
		
  
  
  
  /* Transfer value from shadow registers to actual timer registers */
  XMC_CCU8_EnableShadowTransfer(CCU80, XMC_CCU8_SHADOW_TRANSFER_SLICE_3 |
 80057ac:	4814      	ldr	r0, [pc, #80]	; (8005800 <CCU8_SLICE_CONFIG_0_lInit+0x94>)
 80057ae:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 80057b2:	f7ff ffad 	bl	8005710 <XMC_CCU8_EnableShadowTransfer>
                                               XMC_CCU8_SHADOW_TRANSFER_DITHER_SLICE_3 |
                                               XMC_CCU8_SHADOW_TRANSFER_PRESCALER_SLICE_3);
  /* Events and function settings */
  
  XMC_CCU8_SLICE_ConfigureEvent(CCU80_CC83, XMC_CCU8_SLICE_EVENT_0, &CCU8_SLICE_CONFIG_0_event0_config);
 80057b6:	4810      	ldr	r0, [pc, #64]	; (80057f8 <CCU8_SLICE_CONFIG_0_lInit+0x8c>)
 80057b8:	2101      	movs	r1, #1
 80057ba:	4a12      	ldr	r2, [pc, #72]	; (8005804 <CCU8_SLICE_CONFIG_0_lInit+0x98>)
 80057bc:	f7fb ff82 	bl	80016c4 <XMC_CCU8_SLICE_ConfigureEvent>
		
  XMC_CCU8_SLICE_ConfigureEvent(CCU80_CC83, XMC_CCU8_SLICE_EVENT_1, &CCU8_SLICE_CONFIG_0_event1_config);
 80057c0:	480d      	ldr	r0, [pc, #52]	; (80057f8 <CCU8_SLICE_CONFIG_0_lInit+0x8c>)
 80057c2:	2102      	movs	r1, #2
 80057c4:	4a10      	ldr	r2, [pc, #64]	; (8005808 <CCU8_SLICE_CONFIG_0_lInit+0x9c>)
 80057c6:	f7fb ff7d 	bl	80016c4 <XMC_CCU8_SLICE_ConfigureEvent>
		
  XMC_CCU8_SLICE_ConfigureEvent(CCU80_CC83, XMC_CCU8_SLICE_EVENT_2, &CCU8_SLICE_CONFIG_0_event2_config);
 80057ca:	480b      	ldr	r0, [pc, #44]	; (80057f8 <CCU8_SLICE_CONFIG_0_lInit+0x8c>)
 80057cc:	2103      	movs	r1, #3
 80057ce:	4a0f      	ldr	r2, [pc, #60]	; (800580c <CCU8_SLICE_CONFIG_0_lInit+0xa0>)
 80057d0:	f7fb ff78 	bl	80016c4 <XMC_CCU8_SLICE_ConfigureEvent>
		
  
  
  
  
  XMC_CCU8_SLICE_DirectionConfig(CCU80_CC83, XMC_CCU8_SLICE_EVENT_2);
 80057d4:	4808      	ldr	r0, [pc, #32]	; (80057f8 <CCU8_SLICE_CONFIG_0_lInit+0x8c>)
 80057d6:	2103      	movs	r1, #3
 80057d8:	f7fb ff20 	bl	800161c <XMC_CCU8_SLICE_DirectionConfig>
  
  
  
			
  /* clear IDLE mode for the slice*/
  XMC_CCU8_EnableClock(CCU80, 3);	
 80057dc:	4808      	ldr	r0, [pc, #32]	; (8005800 <CCU8_SLICE_CONFIG_0_lInit+0x94>)
 80057de:	2103      	movs	r1, #3
 80057e0:	f7ff ff66 	bl	80056b0 <XMC_CCU8_EnableClock>
  /* Set initial value of timer */
  XMC_CCU8_SLICE_SetTimerValue(CCU80_CC83, (uint16_t)0U);
 80057e4:	4804      	ldr	r0, [pc, #16]	; (80057f8 <CCU8_SLICE_CONFIG_0_lInit+0x8c>)
 80057e6:	2100      	movs	r1, #0
 80057e8:	f7ff ffa0 	bl	800572c <XMC_CCU8_SLICE_SetTimerValue>
	
  
  
  return CCU8_SLICE_CONFIG_STATUS_SUCCESS;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	1fffce94 	.word	0x1fffce94
 80057f8:	40020400 	.word	0x40020400
 80057fc:	0800ab6c 	.word	0x0800ab6c
 8005800:	40020000 	.word	0x40020000
 8005804:	0800ab7c 	.word	0x0800ab7c
 8005808:	0800ab80 	.word	0x0800ab80
 800580c:	0800ab84 	.word	0x0800ab84

08005810 <CCU4_SLICE_CONFIG_Init>:
  return (version);
}

/* API to initialize the CCU4 slice */
CCU4_SLICE_CONFIG_STATUS_t CCU4_SLICE_CONFIG_Init(const CCU4_SLICE_CONFIG_t *const handle_ptr)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  return handle_ptr->init();
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4798      	blx	r3
 800581e:	4603      	mov	r3, r0
}
 8005820:	4618      	mov	r0, r3
 8005822:	3708      	adds	r7, #8
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	460b      	mov	r3, r1
 8005832:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1) << slice_number;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	68da      	ldr	r2, [r3, #12]
 8005838:	78fb      	ldrb	r3, [r7, #3]
 800583a:	2101      	movs	r1, #1
 800583c:	fa01 f303 	lsl.w	r3, r1, r3
 8005840:	431a      	orrs	r2, r3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	60da      	str	r2, [r3, #12]
}
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	60da      	str	r2, [r3, #12]
}
 800585e:	370c      	adds	r7, #12
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	460b      	mov	r3, r1
 8005872:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 8005874:	887a      	ldrh	r2, [r7, #2]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	635a      	str	r2, [r3, #52]	; 0x34
}
 800587a:	370c      	adds	r7, #12
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr

08005884 <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	460b      	mov	r3, r1
 800588e:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 8005890:	887a      	ldrh	r2, [r7, #2]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005896:	370c      	adds	r7, #12
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	683a      	ldr	r2, [r7, #0]
 80058ae:	611a      	str	r2, [r3, #16]
}
 80058b0:	370c      	adds	r7, #12
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop

080058bc <XMC_CCU4_SLICE_SetTimerValue>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerValue().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerValue(XMC_CCU4_SLICE_t *const slice, const uint16_t timer_val)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	460b      	mov	r3, r1
 80058c6:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerValue:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TIMER = (uint32_t) timer_val;
 80058c8:	887a      	ldrh	r2, [r7, #2]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	671a      	str	r2, [r3, #112]	; 0x70
}
 80058ce:	370c      	adds	r7, #12
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <CCU4_SLICE_CONFIG_0_lInit>:
  .level               = XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH,
  .duration            = XMC_CCU4_SLICE_EVENT_FILTER_DISABLED                               
 };
            /* Channel initialization function */
CCU4_SLICE_CONFIG_STATUS_t CCU4_SLICE_CONFIG_0_lInit(void)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	af00      	add	r7, sp, #0
  GLOBAL_CCU4_Init(&GLOBAL_CCU4_2);
 80058dc:	481b      	ldr	r0, [pc, #108]	; (800594c <CCU4_SLICE_CONFIG_0_lInit+0x74>)
 80058de:	f7ff fd79 	bl	80053d4 <GLOBAL_CCU4_Init>
  /* Configure CCU4x_CC4y slice as timer unit */
  XMC_CCU4_SLICE_CompareInit(CCU43_CC43, &CCU4_SLICE_CONFIG_0_compare_config);
 80058e2:	481b      	ldr	r0, [pc, #108]	; (8005950 <CCU4_SLICE_CONFIG_0_lInit+0x78>)
 80058e4:	491b      	ldr	r1, [pc, #108]	; (8005954 <CCU4_SLICE_CONFIG_0_lInit+0x7c>)
 80058e6:	f7fb fac9 	bl	8000e7c <XMC_CCU4_SLICE_CompareInit>
  /* Set timer compare register value */
  XMC_CCU4_SLICE_SetTimerCompareMatch(CCU43_CC43, (uint16_t)32768U);
 80058ea:	4819      	ldr	r0, [pc, #100]	; (8005950 <CCU4_SLICE_CONFIG_0_lInit+0x78>)
 80058ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80058f0:	f7ff ffc8 	bl	8005884 <XMC_CCU4_SLICE_SetTimerCompareMatch>
  /* Set timer period register value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(CCU43_CC43, (uint16_t)65535U);	
 80058f4:	4816      	ldr	r0, [pc, #88]	; (8005950 <CCU4_SLICE_CONFIG_0_lInit+0x78>)
 80058f6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80058fa:	f7ff ffb5 	bl	8005868 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
  /* Register value update settings */
  XMC_CCU4_SetMultiChannelShadowTransferMode(CCU43, (uint32_t)XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE3);
 80058fe:	4816      	ldr	r0, [pc, #88]	; (8005958 <CCU4_SLICE_CONFIG_0_lInit+0x80>)
 8005900:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 8005904:	f7fb fa9e 	bl	8000e44 <XMC_CCU4_SetMultiChannelShadowTransferMode>
  /* Transfer value from shadow registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(CCU43, (uint32_t)XMC_CCU4_SHADOW_TRANSFER_SLICE_3 |
 8005908:	4813      	ldr	r0, [pc, #76]	; (8005958 <CCU4_SLICE_CONFIG_0_lInit+0x80>)
 800590a:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 800590e:	f7ff ffc7 	bl	80058a0 <XMC_CCU4_EnableShadowTransfer>
                                               (uint32_t)XMC_CCU4_SHADOW_TRANSFER_DITHER_SLICE_3 |
                                               (uint32_t)XMC_CCU4_SHADOW_TRANSFER_PRESCALER_SLICE_3);
  /* Events and function settings */
  XMC_CCU4_SLICE_ConfigureEvent(CCU43_CC43, XMC_CCU4_SLICE_EVENT_0, &CCU4_SLICE_CONFIG_0_event0_config);
 8005912:	480f      	ldr	r0, [pc, #60]	; (8005950 <CCU4_SLICE_CONFIG_0_lInit+0x78>)
 8005914:	2101      	movs	r1, #1
 8005916:	4a11      	ldr	r2, [pc, #68]	; (800595c <CCU4_SLICE_CONFIG_0_lInit+0x84>)
 8005918:	f7fb fc9c 	bl	8001254 <XMC_CCU4_SLICE_ConfigureEvent>
  XMC_CCU4_SLICE_ConfigureEvent(CCU43_CC43, XMC_CCU4_SLICE_EVENT_1, &CCU4_SLICE_CONFIG_0_event1_config);
 800591c:	480c      	ldr	r0, [pc, #48]	; (8005950 <CCU4_SLICE_CONFIG_0_lInit+0x78>)
 800591e:	2102      	movs	r1, #2
 8005920:	4a0f      	ldr	r2, [pc, #60]	; (8005960 <CCU4_SLICE_CONFIG_0_lInit+0x88>)
 8005922:	f7fb fc97 	bl	8001254 <XMC_CCU4_SLICE_ConfigureEvent>
  XMC_CCU4_SLICE_ConfigureEvent(CCU43_CC43, XMC_CCU4_SLICE_EVENT_2, &CCU4_SLICE_CONFIG_0_event2_config);
 8005926:	480a      	ldr	r0, [pc, #40]	; (8005950 <CCU4_SLICE_CONFIG_0_lInit+0x78>)
 8005928:	2103      	movs	r1, #3
 800592a:	4a0e      	ldr	r2, [pc, #56]	; (8005964 <CCU4_SLICE_CONFIG_0_lInit+0x8c>)
 800592c:	f7fb fc92 	bl	8001254 <XMC_CCU4_SLICE_ConfigureEvent>
  /* clear IDLE mode for the slice*/
  XMC_CCU4_EnableClock(CCU43, (uint8_t)3);	
 8005930:	4809      	ldr	r0, [pc, #36]	; (8005958 <CCU4_SLICE_CONFIG_0_lInit+0x80>)
 8005932:	2103      	movs	r1, #3
 8005934:	f7ff ff78 	bl	8005828 <XMC_CCU4_EnableClock>
  /* Set initial value of timer */
  XMC_CCU4_SLICE_SetTimerValue(CCU43_CC43, (uint16_t)0U);
 8005938:	4805      	ldr	r0, [pc, #20]	; (8005950 <CCU4_SLICE_CONFIG_0_lInit+0x78>)
 800593a:	2100      	movs	r1, #0
 800593c:	f7ff ffbe 	bl	80058bc <XMC_CCU4_SLICE_SetTimerValue>
  /* Start the timer */
  XMC_CCU4_SLICE_StartTimer(CCU43_CC43);
 8005940:	4803      	ldr	r0, [pc, #12]	; (8005950 <CCU4_SLICE_CONFIG_0_lInit+0x78>)
 8005942:	f7ff ff85 	bl	8005850 <XMC_CCU4_SLICE_StartTimer>
  return CCU4_SLICE_CONFIG_STATUS_SUCCESS;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	bd80      	pop	{r7, pc}
 800594c:	1fffceb4 	.word	0x1fffceb4
 8005950:	48004400 	.word	0x48004400
 8005954:	0800ab98 	.word	0x0800ab98
 8005958:	48004000 	.word	0x48004000
 800595c:	0800aba0 	.word	0x0800aba0
 8005960:	0800aba4 	.word	0x0800aba4
 8005964:	0800aba8 	.word	0x0800aba8

08005968 <CCU4_SLICE_CONFIG_1_lInit>:
  .level               = XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH,
  .duration            = XMC_CCU4_SLICE_EVENT_FILTER_DISABLED                               
 };
            /* Channel initialization function */
CCU4_SLICE_CONFIG_STATUS_t CCU4_SLICE_CONFIG_1_lInit(void)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	af00      	add	r7, sp, #0
  GLOBAL_CCU4_Init(&GLOBAL_CCU4_0);
 800596c:	481b      	ldr	r0, [pc, #108]	; (80059dc <CCU4_SLICE_CONFIG_1_lInit+0x74>)
 800596e:	f7ff fd31 	bl	80053d4 <GLOBAL_CCU4_Init>
  /* Configure CCU4x_CC4y slice as timer unit */
  XMC_CCU4_SLICE_CompareInit(CCU40_CC41, &CCU4_SLICE_CONFIG_1_compare_config);
 8005972:	481b      	ldr	r0, [pc, #108]	; (80059e0 <CCU4_SLICE_CONFIG_1_lInit+0x78>)
 8005974:	491b      	ldr	r1, [pc, #108]	; (80059e4 <CCU4_SLICE_CONFIG_1_lInit+0x7c>)
 8005976:	f7fb fa81 	bl	8000e7c <XMC_CCU4_SLICE_CompareInit>
  /* Set timer compare register value */
  XMC_CCU4_SLICE_SetTimerCompareMatch(CCU40_CC41, (uint16_t)32768U);
 800597a:	4819      	ldr	r0, [pc, #100]	; (80059e0 <CCU4_SLICE_CONFIG_1_lInit+0x78>)
 800597c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005980:	f7ff ff80 	bl	8005884 <XMC_CCU4_SLICE_SetTimerCompareMatch>
  /* Set timer period register value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(CCU40_CC41, (uint16_t)65535U);	
 8005984:	4816      	ldr	r0, [pc, #88]	; (80059e0 <CCU4_SLICE_CONFIG_1_lInit+0x78>)
 8005986:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800598a:	f7ff ff6d 	bl	8005868 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
  /* Register value update settings */
  XMC_CCU4_SetMultiChannelShadowTransferMode(CCU40, (uint32_t)XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE1);
 800598e:	4816      	ldr	r0, [pc, #88]	; (80059e8 <CCU4_SLICE_CONFIG_1_lInit+0x80>)
 8005990:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8005994:	f7fb fa56 	bl	8000e44 <XMC_CCU4_SetMultiChannelShadowTransferMode>
  /* Transfer value from shadow registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(CCU40, (uint32_t)XMC_CCU4_SHADOW_TRANSFER_SLICE_1 |
 8005998:	4813      	ldr	r0, [pc, #76]	; (80059e8 <CCU4_SLICE_CONFIG_1_lInit+0x80>)
 800599a:	2170      	movs	r1, #112	; 0x70
 800599c:	f7ff ff80 	bl	80058a0 <XMC_CCU4_EnableShadowTransfer>
                                               (uint32_t)XMC_CCU4_SHADOW_TRANSFER_DITHER_SLICE_1 |
                                               (uint32_t)XMC_CCU4_SHADOW_TRANSFER_PRESCALER_SLICE_1);
  /* Events and function settings */
  XMC_CCU4_SLICE_ConfigureEvent(CCU40_CC41, XMC_CCU4_SLICE_EVENT_0, &CCU4_SLICE_CONFIG_1_event0_config);
 80059a0:	480f      	ldr	r0, [pc, #60]	; (80059e0 <CCU4_SLICE_CONFIG_1_lInit+0x78>)
 80059a2:	2101      	movs	r1, #1
 80059a4:	4a11      	ldr	r2, [pc, #68]	; (80059ec <CCU4_SLICE_CONFIG_1_lInit+0x84>)
 80059a6:	f7fb fc55 	bl	8001254 <XMC_CCU4_SLICE_ConfigureEvent>
  XMC_CCU4_SLICE_ConfigureEvent(CCU40_CC41, XMC_CCU4_SLICE_EVENT_1, &CCU4_SLICE_CONFIG_1_event1_config);
 80059aa:	480d      	ldr	r0, [pc, #52]	; (80059e0 <CCU4_SLICE_CONFIG_1_lInit+0x78>)
 80059ac:	2102      	movs	r1, #2
 80059ae:	4a10      	ldr	r2, [pc, #64]	; (80059f0 <CCU4_SLICE_CONFIG_1_lInit+0x88>)
 80059b0:	f7fb fc50 	bl	8001254 <XMC_CCU4_SLICE_ConfigureEvent>
  XMC_CCU4_SLICE_ConfigureEvent(CCU40_CC41, XMC_CCU4_SLICE_EVENT_2, &CCU4_SLICE_CONFIG_1_event2_config);
 80059b4:	480a      	ldr	r0, [pc, #40]	; (80059e0 <CCU4_SLICE_CONFIG_1_lInit+0x78>)
 80059b6:	2103      	movs	r1, #3
 80059b8:	4a0e      	ldr	r2, [pc, #56]	; (80059f4 <CCU4_SLICE_CONFIG_1_lInit+0x8c>)
 80059ba:	f7fb fc4b 	bl	8001254 <XMC_CCU4_SLICE_ConfigureEvent>
  /* clear IDLE mode for the slice*/
  XMC_CCU4_EnableClock(CCU40, (uint8_t)1);	
 80059be:	480a      	ldr	r0, [pc, #40]	; (80059e8 <CCU4_SLICE_CONFIG_1_lInit+0x80>)
 80059c0:	2101      	movs	r1, #1
 80059c2:	f7ff ff31 	bl	8005828 <XMC_CCU4_EnableClock>
  /* Set initial value of timer */
  XMC_CCU4_SLICE_SetTimerValue(CCU40_CC41, (uint16_t)0U);
 80059c6:	4806      	ldr	r0, [pc, #24]	; (80059e0 <CCU4_SLICE_CONFIG_1_lInit+0x78>)
 80059c8:	2100      	movs	r1, #0
 80059ca:	f7ff ff77 	bl	80058bc <XMC_CCU4_SLICE_SetTimerValue>
  /* Start the timer */
  XMC_CCU4_SLICE_StartTimer(CCU40_CC41);
 80059ce:	4804      	ldr	r0, [pc, #16]	; (80059e0 <CCU4_SLICE_CONFIG_1_lInit+0x78>)
 80059d0:	f7ff ff3e 	bl	8005850 <XMC_CCU4_SLICE_StartTimer>
  return CCU4_SLICE_CONFIG_STATUS_SUCCESS;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	1fffcec4 	.word	0x1fffcec4
 80059e0:	4000c200 	.word	0x4000c200
 80059e4:	0800abbc 	.word	0x0800abbc
 80059e8:	4000c000 	.word	0x4000c000
 80059ec:	0800abc4 	.word	0x0800abc4
 80059f0:	0800abc8 	.word	0x0800abc8
 80059f4:	0800abcc 	.word	0x0800abcc

080059f8 <AUTOMATION_WriteBit>:

/**********************************************************************************************************************
* API IMPLEMENTATION
**********************************************************************************************************************/
static inline uint32_t AUTOMATION_WriteBit(uint32_t word, uint8_t pos, uint8_t data)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b085      	sub	sp, #20
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	460b      	mov	r3, r1
 8005a02:	70fb      	strb	r3, [r7, #3]
 8005a04:	4613      	mov	r3, r2
 8005a06:	70bb      	strb	r3, [r7, #2]
  uint32_t return_val;
  if (data == 0U)
 8005a08:	78bb      	ldrb	r3, [r7, #2]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d108      	bne.n	8005a20 <AUTOMATION_WriteBit+0x28>
  {
    /* Reset the bit */
    return_val = (word & (~((uint32_t) 1U << (uint32_t) pos)));
 8005a0e:	78fb      	ldrb	r3, [r7, #3]
 8005a10:	2201      	movs	r2, #1
 8005a12:	fa02 f303 	lsl.w	r3, r2, r3
 8005a16:	43da      	mvns	r2, r3
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	60fb      	str	r3, [r7, #12]
 8005a1e:	e005      	b.n	8005a2c <AUTOMATION_WriteBit+0x34>
  }
  else
  {
    /* Set the bit */
    return_val = (word | ((uint32_t) 1U << (uint32_t) pos));
 8005a20:	78fb      	ldrb	r3, [r7, #3]
 8005a22:	2201      	movs	r2, #1
 8005a24:	409a      	lsls	r2, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	60fb      	str	r3, [r7, #12]
  }
  return return_val;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3714      	adds	r7, #20
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr
 8005a3a:	bf00      	nop

08005a3c <AUTOMATION_Init>:
/**
 * This creates the error handler task and function block processor task
 * Initializes parameter handler
 */
AUTOMATION_STATUS_t AUTOMATION_Init(AUTOMATION_t* const handle_ptr)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  uint32_t status = 0U;
 8005a44:	2300      	movs	r3, #0
 8005a46:	60fb      	str	r3, [r7, #12]
  if (AUTOMATION_STATE_UNINITIALIZED == handle_ptr->state)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	7b1b      	ldrb	r3, [r3, #12]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d12d      	bne.n	8005aac <AUTOMATION_Init+0x70>
  {
    status = (uint32_t) SYSTIMER_Init(handle_ptr->systimer_ptr);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4618      	mov	r0, r3
 8005a56:	f7fd fcc7 	bl	80033e8 <SYSTIMER_Init>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	60fb      	str	r3, [r7, #12]

#if (AUTOMATION_EH_ENABLE == 1U)
    handle_ptr->eh_timer_id = SYSTIMER_CreateTimer(AUTOMATION_EH_PERIOD,
 8005a5e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005a62:	2101      	movs	r1, #1
 8005a64:	4a14      	ldr	r2, [pc, #80]	; (8005ab8 <AUTOMATION_Init+0x7c>)
 8005a66:	2300      	movs	r3, #0
 8005a68:	f7fd fcf8 	bl	800345c <SYSTIMER_CreateTimer>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	609a      	str	r2, [r3, #8]
    	SYSTIMER_MODE_PERIODIC,
        (SYSTIMER_CALLBACK_t)AUTOMATION_EH_ErrorSequencer,
        NULL);
    status |= (uint32_t)SYSTIMER_StartTimer(handle_ptr->eh_timer_id);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	4618      	mov	r0, r3
 8005a78:	f7fd fd8e 	bl	8003598 <SYSTIMER_StartTimer>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	461a      	mov	r2, r3
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	60fb      	str	r3, [r7, #12]
        NULL);
    status |= (uint32_t)SYSTIMER_StartTimer(handle_ptr->fb_timer_id);
#endif

#if (AUTOMATION_FB_RAMP_GEN_0_ENABLED == 1U)
    status |= (uint32_t)AUTOMATION_FB_RegisterFunctionBlock(&AUTOMATION_FB_RAMP_0);
 8005a86:	480d      	ldr	r0, [pc, #52]	; (8005abc <AUTOMATION_Init+0x80>)
 8005a88:	f000 fb60 	bl	800614c <AUTOMATION_FB_RegisterFunctionBlock>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	461a      	mov	r2, r3
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	60fb      	str	r3, [r7, #12]
#endif
#if (AUTOMATION_FB_RAMP_GEN_1_ENABLED == 1U)
    status |= (uint32_t)AUTOMATION_FB_RegisterFunctionBlock(&AUTOMATION_FB_RAMP_1);
 8005a96:	480a      	ldr	r0, [pc, #40]	; (8005ac0 <AUTOMATION_Init+0x84>)
 8005a98:	f000 fb58 	bl	800614c <AUTOMATION_FB_RegisterFunctionBlock>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	60fb      	str	r3, [r7, #12]
#endif

    handle_ptr->state = AUTOMATION_STATE_INITIALIZED;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	731a      	strb	r2, [r3, #12]
  }
  return ((AUTOMATION_STATUS_t) status);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	b2db      	uxtb	r3, r3
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3710      	adds	r7, #16
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	08005e19 	.word	0x08005e19
 8005abc:	1fffcf90 	.word	0x1fffcf90
 8005ac0:	1fffd000 	.word	0x1fffd000

08005ac4 <AUTOMATION_RegisterApp>:

/**
 * This function assigns the app_id to the app instance.
 */
AUTOMATION_STATUS_t AUTOMATION_RegisterApp(void* const app_handle_ptr, const char* const name, uint8_t* app_id)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b087      	sub	sp, #28
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	60b9      	str	r1, [r7, #8]
 8005ace:	607a      	str	r2, [r7, #4]
  AUTOMATION_STATUS_t status;

  if (AUTOMATION_NUM_APPS > AUTOMATION_Handle.app_id)
 8005ad0:	4b13      	ldr	r3, [pc, #76]	; (8005b20 <AUTOMATION_RegisterApp+0x5c>)
 8005ad2:	7b5b      	ldrb	r3, [r3, #13]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d11a      	bne.n	8005b0e <AUTOMATION_RegisterApp+0x4a>
  {
    /* Register and Assign App ID */
    AUTOMATION_App_Table[AUTOMATION_Handle.app_id].apphandle_ptr = (void*) app_handle_ptr;
 8005ad8:	4b11      	ldr	r3, [pc, #68]	; (8005b20 <AUTOMATION_RegisterApp+0x5c>)
 8005ada:	7b5b      	ldrb	r3, [r3, #13]
 8005adc:	4619      	mov	r1, r3
 8005ade:	4a11      	ldr	r2, [pc, #68]	; (8005b24 <AUTOMATION_RegisterApp+0x60>)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
    AUTOMATION_App_Table[AUTOMATION_Handle.app_id].app_name_ptr = name;
 8005ae6:	4b0e      	ldr	r3, [pc, #56]	; (8005b20 <AUTOMATION_RegisterApp+0x5c>)
 8005ae8:	7b5b      	ldrb	r3, [r3, #13]
 8005aea:	4a0e      	ldr	r2, [pc, #56]	; (8005b24 <AUTOMATION_RegisterApp+0x60>)
 8005aec:	00db      	lsls	r3, r3, #3
 8005aee:	4413      	add	r3, r2
 8005af0:	68ba      	ldr	r2, [r7, #8]
 8005af2:	605a      	str	r2, [r3, #4]
    *app_id = AUTOMATION_Handle.app_id;
 8005af4:	4b0a      	ldr	r3, [pc, #40]	; (8005b20 <AUTOMATION_RegisterApp+0x5c>)
 8005af6:	7b5a      	ldrb	r2, [r3, #13]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	701a      	strb	r2, [r3, #0]
    AUTOMATION_Handle.app_id++;
 8005afc:	4b08      	ldr	r3, [pc, #32]	; (8005b20 <AUTOMATION_RegisterApp+0x5c>)
 8005afe:	7b5b      	ldrb	r3, [r3, #13]
 8005b00:	3301      	adds	r3, #1
 8005b02:	b2da      	uxtb	r2, r3
 8005b04:	4b06      	ldr	r3, [pc, #24]	; (8005b20 <AUTOMATION_RegisterApp+0x5c>)
 8005b06:	735a      	strb	r2, [r3, #13]
    status = AUTOMATION_STATUS_SUCCESS;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	75fb      	strb	r3, [r7, #23]
 8005b0c:	e001      	b.n	8005b12 <AUTOMATION_RegisterApp+0x4e>
  }
  else
  {
    /* App table entries are reached to its Max. */
    status = AUTOMATION_STATUS_NUM_APPS_EXCEEDED;
 8005b0e:	2304      	movs	r3, #4
 8005b10:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005b12:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	371c      	adds	r7, #28
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr
 8005b20:	1fffd014 	.word	0x1fffd014
 8005b24:	1fffda78 	.word	0x1fffda78

08005b28 <AUTOMATION_RegisterTask>:
/**
 * Registers the task function to be called from the system timer interrupt
 */
AUTOMATION_STATUS_t AUTOMATION_RegisterTask(AUTOMATION_TASK_FUNCT_PTR_t task_ptr, void* callback_arg_ptr,
                                            uint32_t delay_count)
{
 8005b28:	b590      	push	{r4, r7, lr}
 8005b2a:	b087      	sub	sp, #28
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	607a      	str	r2, [r7, #4]
  AUTOMATION_STATUS_t status;
  if (AUTOMATION_NUM_TASKS > AUTOMATION_Handle.task_id)
 8005b34:	4b2c      	ldr	r3, [pc, #176]	; (8005be8 <AUTOMATION_RegisterTask+0xc0>)
 8005b36:	7c1b      	ldrb	r3, [r3, #16]
 8005b38:	2b05      	cmp	r3, #5
 8005b3a:	d84e      	bhi.n	8005bda <AUTOMATION_RegisterTask+0xb2>
  {
    /* Update the task table information */
    AUTOMATION_Task_Table[AUTOMATION_Handle.task_id].task_ptr = task_ptr;
 8005b3c:	4b2a      	ldr	r3, [pc, #168]	; (8005be8 <AUTOMATION_RegisterTask+0xc0>)
 8005b3e:	7c1b      	ldrb	r3, [r3, #16]
 8005b40:	4619      	mov	r1, r3
 8005b42:	4a2a      	ldr	r2, [pc, #168]	; (8005bec <AUTOMATION_RegisterTask+0xc4>)
 8005b44:	460b      	mov	r3, r1
 8005b46:	005b      	lsls	r3, r3, #1
 8005b48:	440b      	add	r3, r1
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	4413      	add	r3, r2
 8005b4e:	68fa      	ldr	r2, [r7, #12]
 8005b50:	601a      	str	r2, [r3, #0]
    AUTOMATION_Task_Table[AUTOMATION_Handle.task_id].period = delay_count;
 8005b52:	4b25      	ldr	r3, [pc, #148]	; (8005be8 <AUTOMATION_RegisterTask+0xc0>)
 8005b54:	7c1b      	ldrb	r3, [r3, #16]
 8005b56:	4619      	mov	r1, r3
 8005b58:	4a24      	ldr	r2, [pc, #144]	; (8005bec <AUTOMATION_RegisterTask+0xc4>)
 8005b5a:	460b      	mov	r3, r1
 8005b5c:	005b      	lsls	r3, r3, #1
 8005b5e:	440b      	add	r3, r1
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	4413      	add	r3, r2
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	605a      	str	r2, [r3, #4]

    /* Create the system timer with the given period */
    AUTOMATION_Task_Table[AUTOMATION_Handle.task_id].task_timer_id = SYSTIMER_CreateTimer(delay_count,
 8005b68:	4b1f      	ldr	r3, [pc, #124]	; (8005be8 <AUTOMATION_RegisterTask+0xc0>)
 8005b6a:	7c1b      	ldrb	r3, [r3, #16]
 8005b6c:	461c      	mov	r4, r3
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	2101      	movs	r1, #1
 8005b72:	68fa      	ldr	r2, [r7, #12]
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	f7fd fc71 	bl	800345c <SYSTIMER_CreateTimer>
 8005b7a:	4601      	mov	r1, r0
 8005b7c:	4a1b      	ldr	r2, [pc, #108]	; (8005bec <AUTOMATION_RegisterTask+0xc4>)
 8005b7e:	4623      	mov	r3, r4
 8005b80:	005b      	lsls	r3, r3, #1
 8005b82:	4423      	add	r3, r4
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	4413      	add	r3, r2
 8005b88:	3308      	adds	r3, #8
 8005b8a:	6019      	str	r1, [r3, #0]
        SYSTIMER_MODE_PERIODIC, (SYSTIMER_CALLBACK_t) task_ptr, callback_arg_ptr);
    /* check if system timer is created successfully */
    if (AUTOMATION_Task_Table[AUTOMATION_Handle.task_id].task_timer_id != (0U))
 8005b8c:	4b16      	ldr	r3, [pc, #88]	; (8005be8 <AUTOMATION_RegisterTask+0xc0>)
 8005b8e:	7c1b      	ldrb	r3, [r3, #16]
 8005b90:	4619      	mov	r1, r3
 8005b92:	4a16      	ldr	r2, [pc, #88]	; (8005bec <AUTOMATION_RegisterTask+0xc4>)
 8005b94:	460b      	mov	r3, r1
 8005b96:	005b      	lsls	r3, r3, #1
 8005b98:	440b      	add	r3, r1
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	4413      	add	r3, r2
 8005b9e:	3308      	adds	r3, #8
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d016      	beq.n	8005bd4 <AUTOMATION_RegisterTask+0xac>
    {
      /* start the task timer */
      status = (AUTOMATION_STATUS_t) SYSTIMER_StartTimer(
          AUTOMATION_Task_Table[AUTOMATION_Handle.task_id].task_timer_id);
 8005ba6:	4b10      	ldr	r3, [pc, #64]	; (8005be8 <AUTOMATION_RegisterTask+0xc0>)
 8005ba8:	7c1b      	ldrb	r3, [r3, #16]
        SYSTIMER_MODE_PERIODIC, (SYSTIMER_CALLBACK_t) task_ptr, callback_arg_ptr);
    /* check if system timer is created successfully */
    if (AUTOMATION_Task_Table[AUTOMATION_Handle.task_id].task_timer_id != (0U))
    {
      /* start the task timer */
      status = (AUTOMATION_STATUS_t) SYSTIMER_StartTimer(
 8005baa:	4619      	mov	r1, r3
 8005bac:	4a0f      	ldr	r2, [pc, #60]	; (8005bec <AUTOMATION_RegisterTask+0xc4>)
 8005bae:	460b      	mov	r3, r1
 8005bb0:	005b      	lsls	r3, r3, #1
 8005bb2:	440b      	add	r3, r1
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	4413      	add	r3, r2
 8005bb8:	3308      	adds	r3, #8
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f7fd fceb 	bl	8003598 <SYSTIMER_StartTimer>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	75fb      	strb	r3, [r7, #23]
          AUTOMATION_Task_Table[AUTOMATION_Handle.task_id].task_timer_id);
      AUTOMATION_Handle.task_id++;
 8005bc6:	4b08      	ldr	r3, [pc, #32]	; (8005be8 <AUTOMATION_RegisterTask+0xc0>)
 8005bc8:	7c1b      	ldrb	r3, [r3, #16]
 8005bca:	3301      	adds	r3, #1
 8005bcc:	b2da      	uxtb	r2, r3
 8005bce:	4b06      	ldr	r3, [pc, #24]	; (8005be8 <AUTOMATION_RegisterTask+0xc0>)
 8005bd0:	741a      	strb	r2, [r3, #16]
 8005bd2:	e004      	b.n	8005bde <AUTOMATION_RegisterTask+0xb6>
    }
    else
    {
      status = AUTOMATION_STATUS_FAILURE;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	75fb      	strb	r3, [r7, #23]
 8005bd8:	e001      	b.n	8005bde <AUTOMATION_RegisterTask+0xb6>
    }
  }
  else
  {
    status = AUTOMATION_STATUS_FAILURE;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005bde:	7dfb      	ldrb	r3, [r7, #23]
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	371c      	adds	r7, #28
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd90      	pop	{r4, r7, pc}
 8005be8:	1fffd014 	.word	0x1fffd014
 8005bec:	1fffdc38 	.word	0x1fffdc38

08005bf0 <AUTOMATION_DeregisterTask>:
/**
 * De-registers task function.
 * Task table is adjusted for this deleted entry.
 */
AUTOMATION_STATUS_t AUTOMATION_DeregisterTask(AUTOMATION_TASK_FUNCT_PTR_t task_ptr)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  AUTOMATION_STATUS_t status;
  uint8_t count;
  uint8_t match_index = AUTOMATION_NUM_TASKS + 1U;
 8005bf8:	2307      	movs	r3, #7
 8005bfa:	737b      	strb	r3, [r7, #13]

  /* Find the entry in the task table based on the task_ptr */
  for (count = 0U; count < AUTOMATION_NUM_TASKS; count++)
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	73bb      	strb	r3, [r7, #14]
 8005c00:	e010      	b.n	8005c24 <AUTOMATION_DeregisterTask+0x34>
  {
    if (AUTOMATION_Task_Table[count].task_ptr == task_ptr)
 8005c02:	7bba      	ldrb	r2, [r7, #14]
 8005c04:	4942      	ldr	r1, [pc, #264]	; (8005d10 <AUTOMATION_DeregisterTask+0x120>)
 8005c06:	4613      	mov	r3, r2
 8005c08:	005b      	lsls	r3, r3, #1
 8005c0a:	4413      	add	r3, r2
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	440b      	add	r3, r1
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d102      	bne.n	8005c1e <AUTOMATION_DeregisterTask+0x2e>
    {
      match_index = count;
 8005c18:	7bbb      	ldrb	r3, [r7, #14]
 8005c1a:	737b      	strb	r3, [r7, #13]
      break;
 8005c1c:	e005      	b.n	8005c2a <AUTOMATION_DeregisterTask+0x3a>
  AUTOMATION_STATUS_t status;
  uint8_t count;
  uint8_t match_index = AUTOMATION_NUM_TASKS + 1U;

  /* Find the entry in the task table based on the task_ptr */
  for (count = 0U; count < AUTOMATION_NUM_TASKS; count++)
 8005c1e:	7bbb      	ldrb	r3, [r7, #14]
 8005c20:	3301      	adds	r3, #1
 8005c22:	73bb      	strb	r3, [r7, #14]
 8005c24:	7bbb      	ldrb	r3, [r7, #14]
 8005c26:	2b05      	cmp	r3, #5
 8005c28:	d9eb      	bls.n	8005c02 <AUTOMATION_DeregisterTask+0x12>
      break;
    }
  }

  /* Delete the task and remove from the task table */
  if ((AUTOMATION_NUM_TASKS + 1U) != match_index)
 8005c2a:	7b7b      	ldrb	r3, [r7, #13]
 8005c2c:	2b07      	cmp	r3, #7
 8005c2e:	d068      	beq.n	8005d02 <AUTOMATION_DeregisterTask+0x112>
  {
    status = (AUTOMATION_STATUS_t) SYSTIMER_StopTimer(AUTOMATION_Task_Table[match_index].task_timer_id);
 8005c30:	7b7a      	ldrb	r2, [r7, #13]
 8005c32:	4937      	ldr	r1, [pc, #220]	; (8005d10 <AUTOMATION_DeregisterTask+0x120>)
 8005c34:	4613      	mov	r3, r2
 8005c36:	005b      	lsls	r3, r3, #1
 8005c38:	4413      	add	r3, r2
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	440b      	add	r3, r1
 8005c3e:	3308      	adds	r3, #8
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4618      	mov	r0, r3
 8005c44:	f7fd fce8 	bl	8003618 <SYSTIMER_StopTimer>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	73fb      	strb	r3, [r7, #15]
    if (AUTOMATION_STATUS_SUCCESS == status)
 8005c4c:	7bfb      	ldrb	r3, [r7, #15]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d154      	bne.n	8005cfc <AUTOMATION_DeregisterTask+0x10c>
    {
      status = (AUTOMATION_STATUS_t) SYSTIMER_DeleteTimer(AUTOMATION_Task_Table[match_index].task_timer_id);
 8005c52:	7b7a      	ldrb	r2, [r7, #13]
 8005c54:	492e      	ldr	r1, [pc, #184]	; (8005d10 <AUTOMATION_DeregisterTask+0x120>)
 8005c56:	4613      	mov	r3, r2
 8005c58:	005b      	lsls	r3, r3, #1
 8005c5a:	4413      	add	r3, r2
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	440b      	add	r3, r1
 8005c60:	3308      	adds	r3, #8
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4618      	mov	r0, r3
 8005c66:	f7fd fd0f 	bl	8003688 <SYSTIMER_DeleteTimer>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	73fb      	strb	r3, [r7, #15]
      AUTOMATION_Handle.task_id--;
 8005c6e:	4b29      	ldr	r3, [pc, #164]	; (8005d14 <AUTOMATION_DeregisterTask+0x124>)
 8005c70:	7c1b      	ldrb	r3, [r3, #16]
 8005c72:	3b01      	subs	r3, #1
 8005c74:	b2da      	uxtb	r2, r3
 8005c76:	4b27      	ldr	r3, [pc, #156]	; (8005d14 <AUTOMATION_DeregisterTask+0x124>)
 8005c78:	741a      	strb	r2, [r3, #16]
      for (count = match_index; count <= AUTOMATION_Handle.task_id; count++)
 8005c7a:	7b7b      	ldrb	r3, [r7, #13]
 8005c7c:	73bb      	strb	r3, [r7, #14]
 8005c7e:	e037      	b.n	8005cf0 <AUTOMATION_DeregisterTask+0x100>
      {
        AUTOMATION_Task_Table[count].task_ptr = AUTOMATION_Task_Table[count + 1U].task_ptr;
 8005c80:	7bba      	ldrb	r2, [r7, #14]
 8005c82:	7bbb      	ldrb	r3, [r7, #14]
 8005c84:	1c59      	adds	r1, r3, #1
 8005c86:	4822      	ldr	r0, [pc, #136]	; (8005d10 <AUTOMATION_DeregisterTask+0x120>)
 8005c88:	460b      	mov	r3, r1
 8005c8a:	005b      	lsls	r3, r3, #1
 8005c8c:	440b      	add	r3, r1
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	4403      	add	r3, r0
 8005c92:	6819      	ldr	r1, [r3, #0]
 8005c94:	481e      	ldr	r0, [pc, #120]	; (8005d10 <AUTOMATION_DeregisterTask+0x120>)
 8005c96:	4613      	mov	r3, r2
 8005c98:	005b      	lsls	r3, r3, #1
 8005c9a:	4413      	add	r3, r2
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	4403      	add	r3, r0
 8005ca0:	6019      	str	r1, [r3, #0]
        AUTOMATION_Task_Table[count].period = AUTOMATION_Task_Table[count + 1U].period;
 8005ca2:	7bba      	ldrb	r2, [r7, #14]
 8005ca4:	7bbb      	ldrb	r3, [r7, #14]
 8005ca6:	1c59      	adds	r1, r3, #1
 8005ca8:	4819      	ldr	r0, [pc, #100]	; (8005d10 <AUTOMATION_DeregisterTask+0x120>)
 8005caa:	460b      	mov	r3, r1
 8005cac:	005b      	lsls	r3, r3, #1
 8005cae:	440b      	add	r3, r1
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	4403      	add	r3, r0
 8005cb4:	6859      	ldr	r1, [r3, #4]
 8005cb6:	4816      	ldr	r0, [pc, #88]	; (8005d10 <AUTOMATION_DeregisterTask+0x120>)
 8005cb8:	4613      	mov	r3, r2
 8005cba:	005b      	lsls	r3, r3, #1
 8005cbc:	4413      	add	r3, r2
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	4403      	add	r3, r0
 8005cc2:	6059      	str	r1, [r3, #4]
        AUTOMATION_Task_Table[count].task_timer_id = AUTOMATION_Task_Table[count + 1U].task_timer_id;
 8005cc4:	7bba      	ldrb	r2, [r7, #14]
 8005cc6:	7bbb      	ldrb	r3, [r7, #14]
 8005cc8:	1c59      	adds	r1, r3, #1
 8005cca:	4811      	ldr	r0, [pc, #68]	; (8005d10 <AUTOMATION_DeregisterTask+0x120>)
 8005ccc:	460b      	mov	r3, r1
 8005cce:	005b      	lsls	r3, r3, #1
 8005cd0:	440b      	add	r3, r1
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	4403      	add	r3, r0
 8005cd6:	3308      	adds	r3, #8
 8005cd8:	6819      	ldr	r1, [r3, #0]
 8005cda:	480d      	ldr	r0, [pc, #52]	; (8005d10 <AUTOMATION_DeregisterTask+0x120>)
 8005cdc:	4613      	mov	r3, r2
 8005cde:	005b      	lsls	r3, r3, #1
 8005ce0:	4413      	add	r3, r2
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	4403      	add	r3, r0
 8005ce6:	3308      	adds	r3, #8
 8005ce8:	6019      	str	r1, [r3, #0]
    status = (AUTOMATION_STATUS_t) SYSTIMER_StopTimer(AUTOMATION_Task_Table[match_index].task_timer_id);
    if (AUTOMATION_STATUS_SUCCESS == status)
    {
      status = (AUTOMATION_STATUS_t) SYSTIMER_DeleteTimer(AUTOMATION_Task_Table[match_index].task_timer_id);
      AUTOMATION_Handle.task_id--;
      for (count = match_index; count <= AUTOMATION_Handle.task_id; count++)
 8005cea:	7bbb      	ldrb	r3, [r7, #14]
 8005cec:	3301      	adds	r3, #1
 8005cee:	73bb      	strb	r3, [r7, #14]
 8005cf0:	4b08      	ldr	r3, [pc, #32]	; (8005d14 <AUTOMATION_DeregisterTask+0x124>)
 8005cf2:	7c1b      	ldrb	r3, [r3, #16]
 8005cf4:	7bba      	ldrb	r2, [r7, #14]
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d9c2      	bls.n	8005c80 <AUTOMATION_DeregisterTask+0x90>
 8005cfa:	e004      	b.n	8005d06 <AUTOMATION_DeregisterTask+0x116>
        AUTOMATION_Task_Table[count].task_timer_id = AUTOMATION_Task_Table[count + 1U].task_timer_id;
      }
    }
    else
    {
      status = AUTOMATION_STATUS_FAILURE;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	73fb      	strb	r3, [r7, #15]
 8005d00:	e001      	b.n	8005d06 <AUTOMATION_DeregisterTask+0x116>
    }
  }
  else
  {
    status = AUTOMATION_STATUS_FAILURE;
 8005d02:	2301      	movs	r3, #1
 8005d04:	73fb      	strb	r3, [r7, #15]
  }
  return (status);
 8005d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3710      	adds	r7, #16
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	1fffdc38 	.word	0x1fffdc38
 8005d14:	1fffd014 	.word	0x1fffd014

08005d18 <AUTOMATION_PH_RegisterParamTable>:
 * This function will save the app parameter table pointer in the AUTOMATION_PH_PARAMHANDLE.
 * It maintains the relation between app_id and parameter table pointer.
 */
AUTOMATION_STATUS_t AUTOMATION_PH_RegisterParamTable(uint8_t app_id,
    AUTOMATION_PH_PARAM_ENTRY_t* app_param_table_ptr)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b085      	sub	sp, #20
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	4603      	mov	r3, r0
 8005d20:	6039      	str	r1, [r7, #0]
 8005d22:	71fb      	strb	r3, [r7, #7]
  AUTOMATION_STATUS_t status;

  if (AUTOMATION_NUM_APPS > app_id)
 8005d24:	79fb      	ldrb	r3, [r7, #7]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d107      	bne.n	8005d3a <AUTOMATION_PH_RegisterParamTable+0x22>
  {
    /* App param table pointer */
    AUTOMATION_PH_Param_Table[app_id] = app_param_table_ptr;
 8005d2a:	79fb      	ldrb	r3, [r7, #7]
 8005d2c:	4907      	ldr	r1, [pc, #28]	; (8005d4c <AUTOMATION_PH_RegisterParamTable+0x34>)
 8005d2e:	683a      	ldr	r2, [r7, #0]
 8005d30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    status = AUTOMATION_STATUS_SUCCESS;
 8005d34:	2300      	movs	r3, #0
 8005d36:	73fb      	strb	r3, [r7, #15]
 8005d38:	e001      	b.n	8005d3e <AUTOMATION_PH_RegisterParamTable+0x26>
  }
  else
  {
    status = AUTOMATION_STATUS_NUM_PARAM_EXCEEDED;
 8005d3a:	2306      	movs	r3, #6
 8005d3c:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8005d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3714      	adds	r7, #20
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr
 8005d4c:	1fffdab8 	.word	0x1fffdab8

08005d50 <AUTOMATION_AppInterface_ReadReportedErrors>:
  return (status);
}

/* Read errors reported by App from temporary buffer and log it in log book and send through communication interface */
static void AUTOMATION_AppInterface_ReadReportedErrors(void)
{
 8005d50:	b590      	push	{r4, r7, lr}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
  uint8_t temp_buf_index;
  AUTOMATION_EH_LOGBOOK_ENTRY_t * temp_logbook_entry;
  for (temp_buf_index = 0U; temp_buf_index < AUTOMATION_EH_AppErrorBuf.data_length; temp_buf_index++)
 8005d56:	2300      	movs	r3, #0
 8005d58:	71fb      	strb	r3, [r7, #7]
 8005d5a:	e02e      	b.n	8005dba <AUTOMATION_AppInterface_ReadReportedErrors+0x6a>
  {
    /* Read request for error log book Info/Warning section */
    temp_logbook_entry = &AUTOMATION_EH_AppErrorBuf.error_logbook_ptr[AUTOMATION_EH_AppErrorBuf.read_index++];
 8005d5c:	4b1b      	ldr	r3, [pc, #108]	; (8005dcc <AUTOMATION_AppInterface_ReadReportedErrors+0x7c>)
 8005d5e:	685a      	ldr	r2, [r3, #4]
 8005d60:	4b1a      	ldr	r3, [pc, #104]	; (8005dcc <AUTOMATION_AppInterface_ReadReportedErrors+0x7c>)
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	1c59      	adds	r1, r3, #1
 8005d66:	b2c8      	uxtb	r0, r1
 8005d68:	4918      	ldr	r1, [pc, #96]	; (8005dcc <AUTOMATION_AppInterface_ReadReportedErrors+0x7c>)
 8005d6a:	7008      	strb	r0, [r1, #0]
 8005d6c:	00db      	lsls	r3, r3, #3
 8005d6e:	4413      	add	r3, r2
 8005d70:	603b      	str	r3, [r7, #0]
    if (AUTOMATION_EH_AppErrorBuf.read_index == AUTOMATION_EH_APPBUF_SIZE)
 8005d72:	4b16      	ldr	r3, [pc, #88]	; (8005dcc <AUTOMATION_AppInterface_ReadReportedErrors+0x7c>)
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	2b05      	cmp	r3, #5
 8005d78:	d102      	bne.n	8005d80 <AUTOMATION_AppInterface_ReadReportedErrors+0x30>
    {
      /* Ring buffer */
      AUTOMATION_EH_AppErrorBuf.read_index = 0U;
 8005d7a:	4b14      	ldr	r3, [pc, #80]	; (8005dcc <AUTOMATION_AppInterface_ReadReportedErrors+0x7c>)
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	701a      	strb	r2, [r3, #0]
    }
    AUTOMATION_EH_AppErrorBuf.data_length--;
 8005d80:	4b12      	ldr	r3, [pc, #72]	; (8005dcc <AUTOMATION_AppInterface_ReadReportedErrors+0x7c>)
 8005d82:	789b      	ldrb	r3, [r3, #2]
 8005d84:	3b01      	subs	r3, #1
 8005d86:	b2da      	uxtb	r2, r3
 8005d88:	4b10      	ldr	r3, [pc, #64]	; (8005dcc <AUTOMATION_AppInterface_ReadReportedErrors+0x7c>)
 8005d8a:	709a      	strb	r2, [r3, #2]

    /* record to log book */
    AUTOMATION_EH_WriteLogbook(*temp_logbook_entry);
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005d92:	f000 f96d 	bl	8006070 <AUTOMATION_EH_WriteLogbook>

    if (AUTOMATION_EH_ReportingInterface.eh_report_callback_ptr != NULL)
 8005d96:	4b0e      	ldr	r3, [pc, #56]	; (8005dd0 <AUTOMATION_AppInterface_ReadReportedErrors+0x80>)
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d00a      	beq.n	8005db4 <AUTOMATION_AppInterface_ReadReportedErrors+0x64>
    {
      /* Report on communication interface */
      AUTOMATION_EH_ReportingInterface.eh_report_callback_ptr
 8005d9e:	4b0c      	ldr	r3, [pc, #48]	; (8005dd0 <AUTOMATION_AppInterface_ReadReportedErrors+0x80>)
 8005da0:	685c      	ldr	r4, [r3, #4]
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	7918      	ldrb	r0, [r3, #4]
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	7959      	ldrb	r1, [r3, #5]
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	799a      	ldrb	r2, [r3, #6]
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	79db      	ldrb	r3, [r3, #7]
 8005db2:	47a0      	blx	r4
/* Read errors reported by App from temporary buffer and log it in log book and send through communication interface */
static void AUTOMATION_AppInterface_ReadReportedErrors(void)
{
  uint8_t temp_buf_index;
  AUTOMATION_EH_LOGBOOK_ENTRY_t * temp_logbook_entry;
  for (temp_buf_index = 0U; temp_buf_index < AUTOMATION_EH_AppErrorBuf.data_length; temp_buf_index++)
 8005db4:	79fb      	ldrb	r3, [r7, #7]
 8005db6:	3301      	adds	r3, #1
 8005db8:	71fb      	strb	r3, [r7, #7]
 8005dba:	4b04      	ldr	r3, [pc, #16]	; (8005dcc <AUTOMATION_AppInterface_ReadReportedErrors+0x7c>)
 8005dbc:	789b      	ldrb	r3, [r3, #2]
 8005dbe:	79fa      	ldrb	r2, [r7, #7]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d3cb      	bcc.n	8005d5c <AUTOMATION_AppInterface_ReadReportedErrors+0xc>
          temp_logbook_entry->error_id,
          temp_logbook_entry->error_severity,
          temp_logbook_entry->error_status);
    }
  }
}
 8005dc4:	370c      	adds	r7, #12
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd90      	pop	{r4, r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	1fffcf2c 	.word	0x1fffcf2c
 8005dd0:	1fffd7ac 	.word	0x1fffd7ac

08005dd4 <AUTOMATION_EH_ProcessError>:

static void AUTOMATION_EH_ProcessError(AUTOMATION_EH_BIT_ERROR_TABLE_t* const error_table_entry_ptr)
{
 8005dd4:	b590      	push	{r4, r7, lr}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  if (AUTOMATION_EH_ReportingInterface.eh_report_callback_ptr != NULL)
 8005ddc:	4b0d      	ldr	r3, [pc, #52]	; (8005e14 <AUTOMATION_EH_ProcessError+0x40>)
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d00a      	beq.n	8005dfa <AUTOMATION_EH_ProcessError+0x26>
  {
    /* Report error on interface */
    AUTOMATION_EH_ReportingInterface.eh_report_callback_ptr
 8005de4:	4b0b      	ldr	r3, [pc, #44]	; (8005e14 <AUTOMATION_EH_ProcessError+0x40>)
 8005de6:	685c      	ldr	r4, [r3, #4]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	7a1a      	ldrb	r2, [r3, #8]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	7a9b      	ldrb	r3, [r3, #10]
 8005df0:	20ff      	movs	r0, #255	; 0xff
 8005df2:	4611      	mov	r1, r2
 8005df4:	461a      	mov	r2, r3
 8005df6:	2301      	movs	r3, #1
 8005df8:	47a0      	blx	r4
        error_table_entry_ptr->error_id,
        error_table_entry_ptr->error_severity,
        (uint8_t)AUTOMATION_EH_ERROR_STATUS_SET);
  }

  if (error_table_entry_ptr->error_functptr != NULL)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d005      	beq.n	8005e0e <AUTOMATION_EH_ProcessError+0x3a>
  {
    /* Call registered call back function */
    (error_table_entry_ptr->error_functptr)(error_table_entry_ptr->error_callbackarg);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	6852      	ldr	r2, [r2, #4]
 8005e0a:	4610      	mov	r0, r2
 8005e0c:	4798      	blx	r3
  }

}
 8005e0e:	370c      	adds	r7, #12
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd90      	pop	{r4, r7, pc}
 8005e14:	1fffd7ac 	.word	0x1fffd7ac

08005e18 <AUTOMATION_EH_ErrorSequencer>:

/**
 * This function will scan errors from the BitInterface Word and take action.
 */
void AUTOMATION_EH_ErrorSequencer (void)
{
 8005e18:	b590      	push	{r4, r7, lr}
 8005e1a:	b085      	sub	sp, #20
 8005e1c:	af00      	add	r7, sp, #0
  uint8_t error_words_count,bit_count;
  AUTOMATION_EH_BIT_ERROR_TABLE_t *error_table_entry_ptr;
  AUTOMATION_EH_LOGBOOK_ENTRY_t logbook_entry;

  /* Loop to scan all registered bit interface error words */
  for(error_words_count=0U; error_words_count < AUTOMATION_NUM_INTERFACES; error_words_count++)
 8005e1e:	2300      	movs	r3, #0
 8005e20:	73fb      	strb	r3, [r7, #15]
 8005e22:	e0ae      	b.n	8005f82 <AUTOMATION_EH_ErrorSequencer+0x16a>
  {
    if ((AUTOMATION_EH_BitInterface_Word[error_words_count].error_word != 0U) ||
 8005e24:	7bfb      	ldrb	r3, [r7, #15]
 8005e26:	4a5b      	ldr	r2, [pc, #364]	; (8005f94 <AUTOMATION_EH_ErrorSequencer+0x17c>)
 8005e28:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d107      	bne.n	8005e40 <AUTOMATION_EH_ErrorSequencer+0x28>
        (AUTOMATION_EH_BitInterface_Word[error_words_count].status_word != 0U))
 8005e30:	7bfb      	ldrb	r3, [r7, #15]
 8005e32:	4a58      	ldr	r2, [pc, #352]	; (8005f94 <AUTOMATION_EH_ErrorSequencer+0x17c>)
 8005e34:	00db      	lsls	r3, r3, #3
 8005e36:	4413      	add	r3, r2
 8005e38:	685b      	ldr	r3, [r3, #4]
  AUTOMATION_EH_LOGBOOK_ENTRY_t logbook_entry;

  /* Loop to scan all registered bit interface error words */
  for(error_words_count=0U; error_words_count < AUTOMATION_NUM_INTERFACES; error_words_count++)
  {
    if ((AUTOMATION_EH_BitInterface_Word[error_words_count].error_word != 0U) ||
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	f000 809e 	beq.w	8005f7c <AUTOMATION_EH_ErrorSequencer+0x164>
        (AUTOMATION_EH_BitInterface_Word[error_words_count].status_word != 0U))
    {
      /* Loop to scan all registered bits insider error word */
      for(bit_count = 0U; bit_count < 32U; bit_count++)
 8005e40:	2300      	movs	r3, #0
 8005e42:	73bb      	strb	r3, [r7, #14]
 8005e44:	e096      	b.n	8005f74 <AUTOMATION_EH_ErrorSequencer+0x15c>
      {
        /* Check if any error bit is set */
        if ((AUTOMATION_EH_BitInterface_Word[error_words_count].error_word>>bit_count) & 1U)
 8005e46:	7bfb      	ldrb	r3, [r7, #15]
 8005e48:	4a52      	ldr	r2, [pc, #328]	; (8005f94 <AUTOMATION_EH_ErrorSequencer+0x17c>)
 8005e4a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8005e4e:	7bbb      	ldrb	r3, [r7, #14]
 8005e50:	fa22 f303 	lsr.w	r3, r2, r3
 8005e54:	f003 0301 	and.w	r3, r3, #1
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d034      	beq.n	8005ec6 <AUTOMATION_EH_ErrorSequencer+0xae>
        {
          /* Error bit is set */
          /* Check if any action is already taken */
          if ((AUTOMATION_EH_BitInterface_Word[error_words_count].status_word>>bit_count) & 1U)
 8005e5c:	7bfb      	ldrb	r3, [r7, #15]
 8005e5e:	4a4d      	ldr	r2, [pc, #308]	; (8005f94 <AUTOMATION_EH_ErrorSequencer+0x17c>)
 8005e60:	00db      	lsls	r3, r3, #3
 8005e62:	4413      	add	r3, r2
 8005e64:	685a      	ldr	r2, [r3, #4]
 8005e66:	7bbb      	ldrb	r3, [r7, #14]
 8005e68:	fa22 f303 	lsr.w	r3, r2, r3
 8005e6c:	f003 0301 	and.w	r3, r3, #1
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d002      	beq.n	8005e7a <AUTOMATION_EH_ErrorSequencer+0x62>
          {
            /* Action is already taken */
            error_table_entry_ptr = NULL;
 8005e74:	2300      	movs	r3, #0
 8005e76:	60bb      	str	r3, [r7, #8]
 8005e78:	e065      	b.n	8005f46 <AUTOMATION_EH_ErrorSequencer+0x12e>
          }
          else
          {
            /* Action need to take */
            error_table_entry_ptr = &AUTOMATION_EH_BitErrorTable[error_words_count][bit_count];
 8005e7a:	7bf9      	ldrb	r1, [r7, #15]
 8005e7c:	7bbb      	ldrb	r3, [r7, #14]
 8005e7e:	461a      	mov	r2, r3
 8005e80:	0052      	lsls	r2, r2, #1
 8005e82:	441a      	add	r2, r3
 8005e84:	0093      	lsls	r3, r2, #2
 8005e86:	461a      	mov	r2, r3
 8005e88:	460b      	mov	r3, r1
 8005e8a:	005b      	lsls	r3, r3, #1
 8005e8c:	440b      	add	r3, r1
 8005e8e:	01db      	lsls	r3, r3, #7
 8005e90:	4413      	add	r3, r2
 8005e92:	4a41      	ldr	r2, [pc, #260]	; (8005f98 <AUTOMATION_EH_ErrorSequencer+0x180>)
 8005e94:	4413      	add	r3, r2
 8005e96:	60bb      	str	r3, [r7, #8]
            AUTOMATION_EH_ProcessError(error_table_entry_ptr);
 8005e98:	68b8      	ldr	r0, [r7, #8]
 8005e9a:	f7ff ff9b 	bl	8005dd4 <AUTOMATION_EH_ProcessError>
            /* Set corresponding bit in status word to indicate action is taken */
            AUTOMATION_EH_BitInterface_Word[error_words_count].status_word =
 8005e9e:	7bfc      	ldrb	r4, [r7, #15]
            AUTOMATION_WriteBit(AUTOMATION_EH_BitInterface_Word[error_words_count].status_word, bit_count, AUTOMATION_EH_SET_BIT);
 8005ea0:	7bfb      	ldrb	r3, [r7, #15]
 8005ea2:	4a3c      	ldr	r2, [pc, #240]	; (8005f94 <AUTOMATION_EH_ErrorSequencer+0x17c>)
 8005ea4:	00db      	lsls	r3, r3, #3
 8005ea6:	4413      	add	r3, r2
 8005ea8:	685a      	ldr	r2, [r3, #4]
 8005eaa:	7bbb      	ldrb	r3, [r7, #14]
 8005eac:	4610      	mov	r0, r2
 8005eae:	4619      	mov	r1, r3
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	f7ff fda1 	bl	80059f8 <AUTOMATION_WriteBit>
 8005eb6:	4601      	mov	r1, r0
          {
            /* Action need to take */
            error_table_entry_ptr = &AUTOMATION_EH_BitErrorTable[error_words_count][bit_count];
            AUTOMATION_EH_ProcessError(error_table_entry_ptr);
            /* Set corresponding bit in status word to indicate action is taken */
            AUTOMATION_EH_BitInterface_Word[error_words_count].status_word =
 8005eb8:	4a36      	ldr	r2, [pc, #216]	; (8005f94 <AUTOMATION_EH_ErrorSequencer+0x17c>)
 8005eba:	00e3      	lsls	r3, r4, #3
 8005ebc:	4413      	add	r3, r2
 8005ebe:	6059      	str	r1, [r3, #4]
            AUTOMATION_WriteBit(AUTOMATION_EH_BitInterface_Word[error_words_count].status_word, bit_count, AUTOMATION_EH_SET_BIT);

            /* Record in log book */
            logbook_entry.error_status = (uint8_t)AUTOMATION_EH_ERROR_STATUS_SET;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	71fb      	strb	r3, [r7, #7]
 8005ec4:	e03f      	b.n	8005f46 <AUTOMATION_EH_ErrorSequencer+0x12e>
        }
        else
        {
          /* Error bit reseted */
          /* Check if status bit still set then reset it */
          if ((AUTOMATION_EH_BitInterface_Word[error_words_count].status_word>>bit_count) & 1U)
 8005ec6:	7bfb      	ldrb	r3, [r7, #15]
 8005ec8:	4a32      	ldr	r2, [pc, #200]	; (8005f94 <AUTOMATION_EH_ErrorSequencer+0x17c>)
 8005eca:	00db      	lsls	r3, r3, #3
 8005ecc:	4413      	add	r3, r2
 8005ece:	685a      	ldr	r2, [r3, #4]
 8005ed0:	7bbb      	ldrb	r3, [r7, #14]
 8005ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ed6:	f003 0301 	and.w	r3, r3, #1
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d031      	beq.n	8005f42 <AUTOMATION_EH_ErrorSequencer+0x12a>
          {
            /* Reset corresponding status bit in status word */
            AUTOMATION_EH_BitInterface_Word[error_words_count].status_word =
 8005ede:	7bfc      	ldrb	r4, [r7, #15]
            AUTOMATION_WriteBit(AUTOMATION_EH_BitInterface_Word[error_words_count].status_word,bit_count,AUTOMATION_EH_RESET_BIT);
 8005ee0:	7bfb      	ldrb	r3, [r7, #15]
 8005ee2:	4a2c      	ldr	r2, [pc, #176]	; (8005f94 <AUTOMATION_EH_ErrorSequencer+0x17c>)
 8005ee4:	00db      	lsls	r3, r3, #3
 8005ee6:	4413      	add	r3, r2
 8005ee8:	685a      	ldr	r2, [r3, #4]
 8005eea:	7bbb      	ldrb	r3, [r7, #14]
 8005eec:	4610      	mov	r0, r2
 8005eee:	4619      	mov	r1, r3
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f7ff fd81 	bl	80059f8 <AUTOMATION_WriteBit>
 8005ef6:	4601      	mov	r1, r0
          /* Error bit reseted */
          /* Check if status bit still set then reset it */
          if ((AUTOMATION_EH_BitInterface_Word[error_words_count].status_word>>bit_count) & 1U)
          {
            /* Reset corresponding status bit in status word */
            AUTOMATION_EH_BitInterface_Word[error_words_count].status_word =
 8005ef8:	4a26      	ldr	r2, [pc, #152]	; (8005f94 <AUTOMATION_EH_ErrorSequencer+0x17c>)
 8005efa:	00e3      	lsls	r3, r4, #3
 8005efc:	4413      	add	r3, r2
 8005efe:	6059      	str	r1, [r3, #4]
            AUTOMATION_WriteBit(AUTOMATION_EH_BitInterface_Word[error_words_count].status_word,bit_count,AUTOMATION_EH_RESET_BIT);

            /* Error table pointer */
            error_table_entry_ptr = &AUTOMATION_EH_BitErrorTable[error_words_count][bit_count];
 8005f00:	7bf9      	ldrb	r1, [r7, #15]
 8005f02:	7bbb      	ldrb	r3, [r7, #14]
 8005f04:	461a      	mov	r2, r3
 8005f06:	0052      	lsls	r2, r2, #1
 8005f08:	441a      	add	r2, r3
 8005f0a:	0093      	lsls	r3, r2, #2
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	460b      	mov	r3, r1
 8005f10:	005b      	lsls	r3, r3, #1
 8005f12:	440b      	add	r3, r1
 8005f14:	01db      	lsls	r3, r3, #7
 8005f16:	4413      	add	r3, r2
 8005f18:	4a1f      	ldr	r2, [pc, #124]	; (8005f98 <AUTOMATION_EH_ErrorSequencer+0x180>)
 8005f1a:	4413      	add	r3, r2
 8005f1c:	60bb      	str	r3, [r7, #8]
            /* Report error is cleared */
            if (AUTOMATION_EH_ReportingInterface.eh_report_callback_ptr != NULL)
 8005f1e:	4b1f      	ldr	r3, [pc, #124]	; (8005f9c <AUTOMATION_EH_ErrorSequencer+0x184>)
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d00a      	beq.n	8005f3c <AUTOMATION_EH_ErrorSequencer+0x124>
            {
              /* Report error on interface */
              AUTOMATION_EH_ReportingInterface.eh_report_callback_ptr
 8005f26:	4b1d      	ldr	r3, [pc, #116]	; (8005f9c <AUTOMATION_EH_ErrorSequencer+0x184>)
 8005f28:	685c      	ldr	r4, [r3, #4]
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	7a1a      	ldrb	r2, [r3, #8]
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	7a9b      	ldrb	r3, [r3, #10]
 8005f32:	20ff      	movs	r0, #255	; 0xff
 8005f34:	4611      	mov	r1, r2
 8005f36:	461a      	mov	r2, r3
 8005f38:	2301      	movs	r3, #1
 8005f3a:	47a0      	blx	r4
                  error_table_entry_ptr->error_id,
                  error_table_entry_ptr->error_severity,
                  (uint8_t)AUTOMATION_EH_ERROR_STATUS_SET);
            }
            /* Record in log book */
            logbook_entry.error_status = (uint8_t)AUTOMATION_EH_ERROR_STATUS_CLEARED;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	71fb      	strb	r3, [r7, #7]
 8005f40:	e001      	b.n	8005f46 <AUTOMATION_EH_ErrorSequencer+0x12e>
          }
          else
          {
            /* Both error bit and status is in reset - No need to take any action */
            error_table_entry_ptr = NULL;
 8005f42:	2300      	movs	r3, #0
 8005f44:	60bb      	str	r3, [r7, #8]
          }
        }
        /* Record in log book */
        if (error_table_entry_ptr != NULL)
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d010      	beq.n	8005f6e <AUTOMATION_EH_ErrorSequencer+0x156>
        {
          logbook_entry.app_id = (uint8_t)AUTOMATION_EH_BIT_INTERFACE_ID;
 8005f4c:	23ff      	movs	r3, #255	; 0xff
 8005f4e:	713b      	strb	r3, [r7, #4]
          logbook_entry.error_id = error_table_entry_ptr->error_id;
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	7a1b      	ldrb	r3, [r3, #8]
 8005f54:	717b      	strb	r3, [r7, #5]
          logbook_entry.error_severity = error_table_entry_ptr->error_severity;
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	7a9b      	ldrb	r3, [r3, #10]
 8005f5a:	71bb      	strb	r3, [r7, #6]
          /* Gives the current system time in microsecond since start of counter.*/
          logbook_entry.timestamp = SYSTIMER_GetTime();
 8005f5c:	f7fd fbe2 	bl	8003724 <SYSTIMER_GetTime>
 8005f60:	4603      	mov	r3, r0
 8005f62:	603b      	str	r3, [r7, #0]
          AUTOMATION_EH_WriteLogbook(logbook_entry);
 8005f64:	463b      	mov	r3, r7
 8005f66:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005f6a:	f000 f881 	bl	8006070 <AUTOMATION_EH_WriteLogbook>
  {
    if ((AUTOMATION_EH_BitInterface_Word[error_words_count].error_word != 0U) ||
        (AUTOMATION_EH_BitInterface_Word[error_words_count].status_word != 0U))
    {
      /* Loop to scan all registered bits insider error word */
      for(bit_count = 0U; bit_count < 32U; bit_count++)
 8005f6e:	7bbb      	ldrb	r3, [r7, #14]
 8005f70:	3301      	adds	r3, #1
 8005f72:	73bb      	strb	r3, [r7, #14]
 8005f74:	7bbb      	ldrb	r3, [r7, #14]
 8005f76:	2b1f      	cmp	r3, #31
 8005f78:	f67f af65 	bls.w	8005e46 <AUTOMATION_EH_ErrorSequencer+0x2e>
  uint8_t error_words_count,bit_count;
  AUTOMATION_EH_BIT_ERROR_TABLE_t *error_table_entry_ptr;
  AUTOMATION_EH_LOGBOOK_ENTRY_t logbook_entry;

  /* Loop to scan all registered bit interface error words */
  for(error_words_count=0U; error_words_count < AUTOMATION_NUM_INTERFACES; error_words_count++)
 8005f7c:	7bfb      	ldrb	r3, [r7, #15]
 8005f7e:	3301      	adds	r3, #1
 8005f80:	73fb      	strb	r3, [r7, #15]
 8005f82:	7bfb      	ldrb	r3, [r7, #15]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	f43f af4d 	beq.w	8005e24 <AUTOMATION_EH_ErrorSequencer+0xc>
      } /* END Loop to scan all registered bits insider error word */
    } /* Error word or corresponding status word not set  */
  } /* END Loop to scan all registered bit interface error words */

  /* Read errors reported by App from temporary buffer and log it in log book and send through communication interface */
  AUTOMATION_AppInterface_ReadReportedErrors();
 8005f8a:	f7ff fee1 	bl	8005d50 <AUTOMATION_AppInterface_ReadReportedErrors>
}
 8005f8e:	3714      	adds	r7, #20
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd90      	pop	{r4, r7, pc}
 8005f94:	1fffd7a4 	.word	0x1fffd7a4
 8005f98:	1fffd8f8 	.word	0x1fffd8f8
 8005f9c:	1fffd7ac 	.word	0x1fffd7ac

08005fa0 <AUTOMATION_EH_AppInterface_ReportError>:

/**
 * Automation Parameter set response in corresponding response buffer
 */
void AUTOMATION_EH_AppInterface_ReportError(uint8_t app_id, uint8_t error_id, AUTOMATION_EH_ERROR_SEVERITY_t error_severity,AUTOMATION_EH_ERROR_STATUS_t status)
{
 8005fa0:	b590      	push	{r4, r7, lr}
 8005fa2:	b087      	sub	sp, #28
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	4604      	mov	r4, r0
 8005fa8:	4608      	mov	r0, r1
 8005faa:	4611      	mov	r1, r2
 8005fac:	461a      	mov	r2, r3
 8005fae:	4623      	mov	r3, r4
 8005fb0:	71fb      	strb	r3, [r7, #7]
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	71bb      	strb	r3, [r7, #6]
 8005fb6:	460b      	mov	r3, r1
 8005fb8:	717b      	strb	r3, [r7, #5]
 8005fba:	4613      	mov	r3, r2
 8005fbc:	713b      	strb	r3, [r7, #4]
  AUTOMATION_EH_LOGBOOK_ENTRY_t error;
  AUTOMATION_EH_LOGBOOK_ENTRY_t *logbook;
  if ((error_severity == AUTOMATION_EH_ERROR_SEVERITY_CRITICAL) ||
 8005fbe:	797b      	ldrb	r3, [r7, #5]
 8005fc0:	2b03      	cmp	r3, #3
 8005fc2:	d002      	beq.n	8005fca <AUTOMATION_EH_AppInterface_ReportError+0x2a>
 8005fc4:	797b      	ldrb	r3, [r7, #5]
 8005fc6:	2b04      	cmp	r3, #4
 8005fc8:	d11d      	bne.n	8006006 <AUTOMATION_EH_AppInterface_ReportError+0x66>
      (error_severity == AUTOMATION_EH_ERROR_SEVERITY_SAFETY_CRITICAL))
  {
    /* Critical error occurred - Need to report immediately */
    if (AUTOMATION_EH_ReportingInterface.eh_report_callback_ptr != NULL)
 8005fca:	4b27      	ldr	r3, [pc, #156]	; (8006068 <AUTOMATION_EH_AppInterface_ReportError+0xc8>)
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d006      	beq.n	8005fe0 <AUTOMATION_EH_AppInterface_ReportError+0x40>
    {
      AUTOMATION_EH_ReportingInterface.eh_report_callback_ptr(app_id,error_id,(uint8_t)error_severity,(uint8_t)status);
 8005fd2:	4b25      	ldr	r3, [pc, #148]	; (8006068 <AUTOMATION_EH_AppInterface_ReportError+0xc8>)
 8005fd4:	685c      	ldr	r4, [r3, #4]
 8005fd6:	79f8      	ldrb	r0, [r7, #7]
 8005fd8:	79b9      	ldrb	r1, [r7, #6]
 8005fda:	797a      	ldrb	r2, [r7, #5]
 8005fdc:	793b      	ldrb	r3, [r7, #4]
 8005fde:	47a0      	blx	r4
    }
    /* Record error in log book */
    error.app_id = app_id;
 8005fe0:	79fb      	ldrb	r3, [r7, #7]
 8005fe2:	743b      	strb	r3, [r7, #16]
    error.error_id = error_id;
 8005fe4:	79bb      	ldrb	r3, [r7, #6]
 8005fe6:	747b      	strb	r3, [r7, #17]
    error.error_severity = (uint8_t)error_severity;
 8005fe8:	797b      	ldrb	r3, [r7, #5]
 8005fea:	74bb      	strb	r3, [r7, #18]
    error.error_status = (uint8_t)status;
 8005fec:	793b      	ldrb	r3, [r7, #4]
 8005fee:	74fb      	strb	r3, [r7, #19]
    error.timestamp = SYSTIMER_GetTime();
 8005ff0:	f7fd fb98 	bl	8003724 <SYSTIMER_GetTime>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	60fb      	str	r3, [r7, #12]
    AUTOMATION_EH_WriteLogbook(error);
 8005ff8:	f107 030c 	add.w	r3, r7, #12
 8005ffc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006000:	f000 f836 	bl	8006070 <AUTOMATION_EH_WriteLogbook>
 8006004:	e02c      	b.n	8006060 <AUTOMATION_EH_AppInterface_ReportError+0xc0>
  }
  else
  {
    /* Non critical error occurred - buffer it for processing */
    /* Overwriting can be possible */
    logbook = &AUTOMATION_EH_AppErrorBuf.error_logbook_ptr[AUTOMATION_EH_AppErrorBuf.write_index++];
 8006006:	4b19      	ldr	r3, [pc, #100]	; (800606c <AUTOMATION_EH_AppInterface_ReportError+0xcc>)
 8006008:	685a      	ldr	r2, [r3, #4]
 800600a:	4b18      	ldr	r3, [pc, #96]	; (800606c <AUTOMATION_EH_AppInterface_ReportError+0xcc>)
 800600c:	785b      	ldrb	r3, [r3, #1]
 800600e:	1c59      	adds	r1, r3, #1
 8006010:	b2c8      	uxtb	r0, r1
 8006012:	4916      	ldr	r1, [pc, #88]	; (800606c <AUTOMATION_EH_AppInterface_ReportError+0xcc>)
 8006014:	7048      	strb	r0, [r1, #1]
 8006016:	00db      	lsls	r3, r3, #3
 8006018:	4413      	add	r3, r2
 800601a:	617b      	str	r3, [r7, #20]
    if (AUTOMATION_EH_AppErrorBuf.write_index == AUTOMATION_EH_APPBUF_SIZE)
 800601c:	4b13      	ldr	r3, [pc, #76]	; (800606c <AUTOMATION_EH_AppInterface_ReportError+0xcc>)
 800601e:	785b      	ldrb	r3, [r3, #1]
 8006020:	2b05      	cmp	r3, #5
 8006022:	d102      	bne.n	800602a <AUTOMATION_EH_AppInterface_ReportError+0x8a>
    {
      /* Temporary buffer is ring buffer */
      AUTOMATION_EH_AppErrorBuf.write_index = 0U;
 8006024:	4b11      	ldr	r3, [pc, #68]	; (800606c <AUTOMATION_EH_AppInterface_ReportError+0xcc>)
 8006026:	2200      	movs	r2, #0
 8006028:	705a      	strb	r2, [r3, #1]
    }
    if (AUTOMATION_EH_AppErrorBuf.data_length < AUTOMATION_EH_APPBUF_SIZE)
 800602a:	4b10      	ldr	r3, [pc, #64]	; (800606c <AUTOMATION_EH_AppInterface_ReportError+0xcc>)
 800602c:	789b      	ldrb	r3, [r3, #2]
 800602e:	2b04      	cmp	r3, #4
 8006030:	d805      	bhi.n	800603e <AUTOMATION_EH_AppInterface_ReportError+0x9e>
    {
      AUTOMATION_EH_AppErrorBuf.data_length++;
 8006032:	4b0e      	ldr	r3, [pc, #56]	; (800606c <AUTOMATION_EH_AppInterface_ReportError+0xcc>)
 8006034:	789b      	ldrb	r3, [r3, #2]
 8006036:	3301      	adds	r3, #1
 8006038:	b2da      	uxtb	r2, r3
 800603a:	4b0c      	ldr	r3, [pc, #48]	; (800606c <AUTOMATION_EH_AppInterface_ReportError+0xcc>)
 800603c:	709a      	strb	r2, [r3, #2]
    }
    logbook->app_id = app_id;
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	79fa      	ldrb	r2, [r7, #7]
 8006042:	711a      	strb	r2, [r3, #4]
    logbook->error_id = (uint8_t)error_id;
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	79ba      	ldrb	r2, [r7, #6]
 8006048:	715a      	strb	r2, [r3, #5]
    logbook->error_severity = (uint8_t)error_severity;
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	797a      	ldrb	r2, [r7, #5]
 800604e:	719a      	strb	r2, [r3, #6]
    logbook->error_status = (uint8_t)status;
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	793a      	ldrb	r2, [r7, #4]
 8006054:	71da      	strb	r2, [r3, #7]
    logbook->timestamp = SYSTIMER_GetTime();
 8006056:	f7fd fb65 	bl	8003724 <SYSTIMER_GetTime>
 800605a:	4602      	mov	r2, r0
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	601a      	str	r2, [r3, #0]
  }
}
 8006060:	371c      	adds	r7, #28
 8006062:	46bd      	mov	sp, r7
 8006064:	bd90      	pop	{r4, r7, pc}
 8006066:	bf00      	nop
 8006068:	1fffd7ac 	.word	0x1fffd7ac
 800606c:	1fffcf2c 	.word	0x1fffcf2c

08006070 <AUTOMATION_EH_WriteLogbook>:
 * This API will record error entry in Error Log book
 * Critical errors     - logged in Log book Critical section     - Overwrite not possible
 * Info/Warning errors - logged in Log book Info/Warning section - Overwrite possible
 */
void AUTOMATION_EH_WriteLogbook(AUTOMATION_EH_LOGBOOK_ENTRY_t error)
{
 8006070:	b590      	push	{r4, r7, lr}
 8006072:	b085      	sub	sp, #20
 8006074:	af00      	add	r7, sp, #0
 8006076:	463b      	mov	r3, r7
 8006078:	e883 0003 	stmia.w	r3, {r0, r1}
  AUTOMATION_EH_LOGBOOK_ENTRY_t * logbook;
  /* Check error severity & place accordingly in Log book */
  if ((error.error_severity == (uint8_t)AUTOMATION_EH_ERROR_SEVERITY_CRITICAL)||
 800607c:	79bb      	ldrb	r3, [r7, #6]
 800607e:	2b03      	cmp	r3, #3
 8006080:	d002      	beq.n	8006088 <AUTOMATION_EH_WriteLogbook+0x18>
      (error.error_severity == (uint8_t)AUTOMATION_EH_ERROR_SEVERITY_SAFETY_CRITICAL))
 8006082:	79bb      	ldrb	r3, [r7, #6]
 */
void AUTOMATION_EH_WriteLogbook(AUTOMATION_EH_LOGBOOK_ENTRY_t error)
{
  AUTOMATION_EH_LOGBOOK_ENTRY_t * logbook;
  /* Check error severity & place accordingly in Log book */
  if ((error.error_severity == (uint8_t)AUTOMATION_EH_ERROR_SEVERITY_CRITICAL)||
 8006084:	2b04      	cmp	r3, #4
 8006086:	d12b      	bne.n	80060e0 <AUTOMATION_EH_WriteLogbook+0x70>
      (error.error_severity == (uint8_t)AUTOMATION_EH_ERROR_SEVERITY_SAFETY_CRITICAL))
  {
    if (AUTOMATION_EH_ErrorLogbook.cs_data_length < AUTOMATION_EH_LOGBOOK_CS_SIZE)
 8006088:	4b2e      	ldr	r3, [pc, #184]	; (8006144 <AUTOMATION_EH_WriteLogbook+0xd4>)
 800608a:	789b      	ldrb	r3, [r3, #2]
 800608c:	2b09      	cmp	r3, #9
 800608e:	d818      	bhi.n	80060c2 <AUTOMATION_EH_WriteLogbook+0x52>
    {
      /* Successfully logged the error */
      logbook = &AUTOMATION_EH_ErrorLogbook.error_logbook_ptr[AUTOMATION_EH_ErrorLogbook.cs_write_index++];
 8006090:	4b2c      	ldr	r3, [pc, #176]	; (8006144 <AUTOMATION_EH_WriteLogbook+0xd4>)
 8006092:	689a      	ldr	r2, [r3, #8]
 8006094:	4b2b      	ldr	r3, [pc, #172]	; (8006144 <AUTOMATION_EH_WriteLogbook+0xd4>)
 8006096:	785b      	ldrb	r3, [r3, #1]
 8006098:	1c59      	adds	r1, r3, #1
 800609a:	b2c8      	uxtb	r0, r1
 800609c:	4929      	ldr	r1, [pc, #164]	; (8006144 <AUTOMATION_EH_WriteLogbook+0xd4>)
 800609e:	7048      	strb	r0, [r1, #1]
 80060a0:	00db      	lsls	r3, r3, #3
 80060a2:	4413      	add	r3, r2
 80060a4:	60fb      	str	r3, [r7, #12]
      AUTOMATION_EH_ErrorLogbook.cs_data_length++;
 80060a6:	4b27      	ldr	r3, [pc, #156]	; (8006144 <AUTOMATION_EH_WriteLogbook+0xd4>)
 80060a8:	789b      	ldrb	r3, [r3, #2]
 80060aa:	3301      	adds	r3, #1
 80060ac:	b2da      	uxtb	r2, r3
 80060ae:	4b25      	ldr	r3, [pc, #148]	; (8006144 <AUTOMATION_EH_WriteLogbook+0xd4>)
 80060b0:	709a      	strb	r2, [r3, #2]
      if (AUTOMATION_EH_ErrorLogbook.cs_write_index == AUTOMATION_EH_LOGBOOK_CS_SIZE)
 80060b2:	4b24      	ldr	r3, [pc, #144]	; (8006144 <AUTOMATION_EH_WriteLogbook+0xd4>)
 80060b4:	785b      	ldrb	r3, [r3, #1]
 80060b6:	2b0a      	cmp	r3, #10
 80060b8:	d111      	bne.n	80060de <AUTOMATION_EH_WriteLogbook+0x6e>
      {
        /* Log book Critical section ring buffer */
        AUTOMATION_EH_ErrorLogbook.cs_write_index = 0U;
 80060ba:	4b22      	ldr	r3, [pc, #136]	; (8006144 <AUTOMATION_EH_WriteLogbook+0xd4>)
 80060bc:	2200      	movs	r2, #0
 80060be:	705a      	strb	r2, [r3, #1]
  AUTOMATION_EH_LOGBOOK_ENTRY_t * logbook;
  /* Check error severity & place accordingly in Log book */
  if ((error.error_severity == (uint8_t)AUTOMATION_EH_ERROR_SEVERITY_CRITICAL)||
      (error.error_severity == (uint8_t)AUTOMATION_EH_ERROR_SEVERITY_SAFETY_CRITICAL))
  {
    if (AUTOMATION_EH_ErrorLogbook.cs_data_length < AUTOMATION_EH_LOGBOOK_CS_SIZE)
 80060c0:	e02a      	b.n	8006118 <AUTOMATION_EH_WriteLogbook+0xa8>
        AUTOMATION_EH_ErrorLogbook.cs_write_index = 0U;
      }
    }
    else
    {
      if (AUTOMATION_EH_ReportingInterface.eh_report_callback_ptr != NULL)
 80060c2:	4b21      	ldr	r3, [pc, #132]	; (8006148 <AUTOMATION_EH_WriteLogbook+0xd8>)
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d006      	beq.n	80060d8 <AUTOMATION_EH_WriteLogbook+0x68>
      {
        /* No Space to store new error entries - Report error on interface */
        AUTOMATION_EH_ReportingInterface.eh_report_callback_ptr((uint8_t)AUTOMATION_EH_BIT_INTERFACE_ID,
 80060ca:	4b1f      	ldr	r3, [pc, #124]	; (8006148 <AUTOMATION_EH_WriteLogbook+0xd8>)
 80060cc:	685c      	ldr	r4, [r3, #4]
 80060ce:	20ff      	movs	r0, #255	; 0xff
 80060d0:	2109      	movs	r1, #9
 80060d2:	2200      	movs	r2, #0
 80060d4:	2301      	movs	r3, #1
 80060d6:	47a0      	blx	r4
            (uint8_t)AUTOMATION_STATUS_LOGBOOK_CS_FULL,
            (uint8_t)AUTOMATION_EH_ERROR_SEVERITY_INFO,
            (uint8_t)AUTOMATION_EH_ERROR_STATUS_SET);
      }
      logbook = NULL;
 80060d8:	2300      	movs	r3, #0
 80060da:	60fb      	str	r3, [r7, #12]
  AUTOMATION_EH_LOGBOOK_ENTRY_t * logbook;
  /* Check error severity & place accordingly in Log book */
  if ((error.error_severity == (uint8_t)AUTOMATION_EH_ERROR_SEVERITY_CRITICAL)||
      (error.error_severity == (uint8_t)AUTOMATION_EH_ERROR_SEVERITY_SAFETY_CRITICAL))
  {
    if (AUTOMATION_EH_ErrorLogbook.cs_data_length < AUTOMATION_EH_LOGBOOK_CS_SIZE)
 80060dc:	e01c      	b.n	8006118 <AUTOMATION_EH_WriteLogbook+0xa8>
 80060de:	e01b      	b.n	8006118 <AUTOMATION_EH_WriteLogbook+0xa8>
      logbook = NULL;
    }
  }
  else
  {
    logbook = &AUTOMATION_EH_ErrorLogbook.error_logbook_ptr[AUTOMATION_EH_ErrorLogbook.info_write_index++];
 80060e0:	4b18      	ldr	r3, [pc, #96]	; (8006144 <AUTOMATION_EH_WriteLogbook+0xd4>)
 80060e2:	689a      	ldr	r2, [r3, #8]
 80060e4:	4b17      	ldr	r3, [pc, #92]	; (8006144 <AUTOMATION_EH_WriteLogbook+0xd4>)
 80060e6:	791b      	ldrb	r3, [r3, #4]
 80060e8:	1c59      	adds	r1, r3, #1
 80060ea:	b2c8      	uxtb	r0, r1
 80060ec:	4915      	ldr	r1, [pc, #84]	; (8006144 <AUTOMATION_EH_WriteLogbook+0xd4>)
 80060ee:	7108      	strb	r0, [r1, #4]
 80060f0:	00db      	lsls	r3, r3, #3
 80060f2:	4413      	add	r3, r2
 80060f4:	60fb      	str	r3, [r7, #12]
    if (AUTOMATION_EH_ErrorLogbook.info_write_index == ((uint32_t)AUTOMATION_EH_LOGBOOK_INFO_SIZE << 1U))
 80060f6:	4b13      	ldr	r3, [pc, #76]	; (8006144 <AUTOMATION_EH_WriteLogbook+0xd4>)
 80060f8:	791b      	ldrb	r3, [r3, #4]
 80060fa:	2b14      	cmp	r3, #20
 80060fc:	d102      	bne.n	8006104 <AUTOMATION_EH_WriteLogbook+0x94>
    {
      /* Log book info section ring buffer */
      AUTOMATION_EH_ErrorLogbook.info_write_index = AUTOMATION_EH_LOGBOOK_CS_SIZE;
 80060fe:	4b11      	ldr	r3, [pc, #68]	; (8006144 <AUTOMATION_EH_WriteLogbook+0xd4>)
 8006100:	220a      	movs	r2, #10
 8006102:	711a      	strb	r2, [r3, #4]
    }
    if (AUTOMATION_EH_ErrorLogbook.info_data_length < AUTOMATION_EH_LOGBOOK_INFO_SIZE)
 8006104:	4b0f      	ldr	r3, [pc, #60]	; (8006144 <AUTOMATION_EH_WriteLogbook+0xd4>)
 8006106:	795b      	ldrb	r3, [r3, #5]
 8006108:	2b09      	cmp	r3, #9
 800610a:	d805      	bhi.n	8006118 <AUTOMATION_EH_WriteLogbook+0xa8>
    {
      AUTOMATION_EH_ErrorLogbook.info_data_length++;
 800610c:	4b0d      	ldr	r3, [pc, #52]	; (8006144 <AUTOMATION_EH_WriteLogbook+0xd4>)
 800610e:	795b      	ldrb	r3, [r3, #5]
 8006110:	3301      	adds	r3, #1
 8006112:	b2da      	uxtb	r2, r3
 8006114:	4b0b      	ldr	r3, [pc, #44]	; (8006144 <AUTOMATION_EH_WriteLogbook+0xd4>)
 8006116:	715a      	strb	r2, [r3, #5]
    }
  }

  if (logbook != NULL)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d00e      	beq.n	800613c <AUTOMATION_EH_WriteLogbook+0xcc>
  {
    logbook->app_id = error.app_id;
 800611e:	793a      	ldrb	r2, [r7, #4]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	711a      	strb	r2, [r3, #4]
    logbook->error_id = error.error_id;
 8006124:	797a      	ldrb	r2, [r7, #5]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	715a      	strb	r2, [r3, #5]
    logbook->error_severity = error.error_severity;
 800612a:	79ba      	ldrb	r2, [r7, #6]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	719a      	strb	r2, [r3, #6]
    logbook->error_status = error.error_status;
 8006130:	79fa      	ldrb	r2, [r7, #7]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	71da      	strb	r2, [r3, #7]
    logbook->timestamp = error.timestamp;
 8006136:	683a      	ldr	r2, [r7, #0]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	601a      	str	r2, [r3, #0]
  }
}
 800613c:	3714      	adds	r7, #20
 800613e:	46bd      	mov	sp, r7
 8006140:	bd90      	pop	{r4, r7, pc}
 8006142:	bf00      	nop
 8006144:	1fffcf20 	.word	0x1fffcf20
 8006148:	1fffd7ac 	.word	0x1fffd7ac

0800614c <AUTOMATION_FB_RegisterFunctionBlock>:
#endif


/* register function block pointer */
AUTOMATION_STATUS_t AUTOMATION_FB_RegisterFunctionBlock(AUTOMATION_FB_HANDLE_t* const frame)
{
 800614c:	b480      	push	{r7}
 800614e:	b085      	sub	sp, #20
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  AUTOMATION_STATUS_t status;
  if (AUTOMATION_Handle.fb_id >= (AUTOMATION_FB_APP_FUNCTION_BLOCKS + AUTOMATION_FB_ENABLED_FUNCTION_BLOCKS))
 8006154:	4b0d      	ldr	r3, [pc, #52]	; (800618c <AUTOMATION_FB_RegisterFunctionBlock+0x40>)
 8006156:	7bdb      	ldrb	r3, [r3, #15]
 8006158:	2b02      	cmp	r3, #2
 800615a:	d902      	bls.n	8006162 <AUTOMATION_FB_RegisterFunctionBlock+0x16>
  {
    status = AUTOMATION_STATUS_NUM_FB_EXCEEDED;
 800615c:	2307      	movs	r3, #7
 800615e:	73fb      	strb	r3, [r7, #15]
 8006160:	e00c      	b.n	800617c <AUTOMATION_FB_RegisterFunctionBlock+0x30>
  }
  else
  {
    AUTOMATION_FB_Table[AUTOMATION_Handle.fb_id++] = frame;
 8006162:	4b0a      	ldr	r3, [pc, #40]	; (800618c <AUTOMATION_FB_RegisterFunctionBlock+0x40>)
 8006164:	7bdb      	ldrb	r3, [r3, #15]
 8006166:	1c5a      	adds	r2, r3, #1
 8006168:	b2d1      	uxtb	r1, r2
 800616a:	4a08      	ldr	r2, [pc, #32]	; (800618c <AUTOMATION_FB_RegisterFunctionBlock+0x40>)
 800616c:	73d1      	strb	r1, [r2, #15]
 800616e:	4619      	mov	r1, r3
 8006170:	4a07      	ldr	r2, [pc, #28]	; (8006190 <AUTOMATION_FB_RegisterFunctionBlock+0x44>)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    status = AUTOMATION_STATUS_SUCCESS;
 8006178:	2300      	movs	r3, #0
 800617a:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800617c:	7bfb      	ldrb	r3, [r7, #15]
}
 800617e:	4618      	mov	r0, r3
 8006180:	3714      	adds	r7, #20
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr
 800618a:	bf00      	nop
 800618c:	1fffd014 	.word	0x1fffd014
 8006190:	1fffd8e8 	.word	0x1fffd8e8

08006194 <AUTOMATION_FB_AddConnectionEntry>:
 */
AUTOMATION_STATUS_t AUTOMATION_FB_AddConnectionEntry(AUTOMATION_FB_HANDLE_t* const source_fb,
                                                     const uint8_t out_signal_num,
                                                     AUTOMATION_FB_HANDLE_t* const destination_fb,
                                                     const uint8_t in_signal_num)
{
 8006194:	b480      	push	{r7}
 8006196:	b087      	sub	sp, #28
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	607a      	str	r2, [r7, #4]
 800619e:	461a      	mov	r2, r3
 80061a0:	460b      	mov	r3, r1
 80061a2:	72fb      	strb	r3, [r7, #11]
 80061a4:	4613      	mov	r3, r2
 80061a6:	72bb      	strb	r3, [r7, #10]
  AUTOMATION_STATUS_t status = AUTOMATION_STATUS_SUCCESS;
 80061a8:	2300      	movs	r3, #0
 80061aa:	75fb      	strb	r3, [r7, #23]
  if (0U == AUTOMATION_Handle.fb_connect_table_data_length)
 80061ac:	4b27      	ldr	r3, [pc, #156]	; (800624c <AUTOMATION_FB_AddConnectionEntry+0xb8>)
 80061ae:	7cdb      	ldrb	r3, [r3, #19]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d102      	bne.n	80061ba <AUTOMATION_FB_AddConnectionEntry+0x26>
  {
    status = AUTOMATION_STATUS_CONNECT_TABLE_OVERFLOW;
 80061b4:	2308      	movs	r3, #8
 80061b6:	75fb      	strb	r3, [r7, #23]
 80061b8:	e040      	b.n	800623c <AUTOMATION_FB_AddConnectionEntry+0xa8>

  }
  else
  {
    if ((uint8_t) AUTOMATION_FB_CONNECT_TABLE_SIZE <= AUTOMATION_Handle.fb_connect_table_write_index)
 80061ba:	4b24      	ldr	r3, [pc, #144]	; (800624c <AUTOMATION_FB_AddConnectionEntry+0xb8>)
 80061bc:	7c5b      	ldrb	r3, [r3, #17]
 80061be:	2b11      	cmp	r3, #17
 80061c0:	d902      	bls.n	80061c8 <AUTOMATION_FB_AddConnectionEntry+0x34>
    {
      AUTOMATION_Handle.fb_connect_table_write_index = 0U;
 80061c2:	4b22      	ldr	r3, [pc, #136]	; (800624c <AUTOMATION_FB_AddConnectionEntry+0xb8>)
 80061c4:	2200      	movs	r2, #0
 80061c6:	745a      	strb	r2, [r3, #17]
    }
    AUTOMATION_FB_Connect_Table[AUTOMATION_Handle.fb_connect_table_write_index].source_fb = source_fb;
 80061c8:	4b20      	ldr	r3, [pc, #128]	; (800624c <AUTOMATION_FB_AddConnectionEntry+0xb8>)
 80061ca:	7c5b      	ldrb	r3, [r3, #17]
 80061cc:	4619      	mov	r1, r3
 80061ce:	4a20      	ldr	r2, [pc, #128]	; (8006250 <AUTOMATION_FB_AddConnectionEntry+0xbc>)
 80061d0:	460b      	mov	r3, r1
 80061d2:	005b      	lsls	r3, r3, #1
 80061d4:	440b      	add	r3, r1
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	4413      	add	r3, r2
 80061da:	68fa      	ldr	r2, [r7, #12]
 80061dc:	601a      	str	r2, [r3, #0]
    AUTOMATION_FB_Connect_Table[AUTOMATION_Handle.fb_connect_table_write_index].out_signal_num = out_signal_num;
 80061de:	4b1b      	ldr	r3, [pc, #108]	; (800624c <AUTOMATION_FB_AddConnectionEntry+0xb8>)
 80061e0:	7c5b      	ldrb	r3, [r3, #17]
 80061e2:	4619      	mov	r1, r3
 80061e4:	4a1a      	ldr	r2, [pc, #104]	; (8006250 <AUTOMATION_FB_AddConnectionEntry+0xbc>)
 80061e6:	460b      	mov	r3, r1
 80061e8:	005b      	lsls	r3, r3, #1
 80061ea:	440b      	add	r3, r1
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	4413      	add	r3, r2
 80061f0:	3308      	adds	r3, #8
 80061f2:	7afa      	ldrb	r2, [r7, #11]
 80061f4:	701a      	strb	r2, [r3, #0]
    AUTOMATION_FB_Connect_Table[AUTOMATION_Handle.fb_connect_table_write_index].destination_fb = destination_fb;
 80061f6:	4b15      	ldr	r3, [pc, #84]	; (800624c <AUTOMATION_FB_AddConnectionEntry+0xb8>)
 80061f8:	7c5b      	ldrb	r3, [r3, #17]
 80061fa:	4619      	mov	r1, r3
 80061fc:	4a14      	ldr	r2, [pc, #80]	; (8006250 <AUTOMATION_FB_AddConnectionEntry+0xbc>)
 80061fe:	460b      	mov	r3, r1
 8006200:	005b      	lsls	r3, r3, #1
 8006202:	440b      	add	r3, r1
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	4413      	add	r3, r2
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	605a      	str	r2, [r3, #4]
    AUTOMATION_FB_Connect_Table[AUTOMATION_Handle.fb_connect_table_write_index].in_signal_num = in_signal_num;
 800620c:	4b0f      	ldr	r3, [pc, #60]	; (800624c <AUTOMATION_FB_AddConnectionEntry+0xb8>)
 800620e:	7c5b      	ldrb	r3, [r3, #17]
 8006210:	4619      	mov	r1, r3
 8006212:	4a0f      	ldr	r2, [pc, #60]	; (8006250 <AUTOMATION_FB_AddConnectionEntry+0xbc>)
 8006214:	460b      	mov	r3, r1
 8006216:	005b      	lsls	r3, r3, #1
 8006218:	440b      	add	r3, r1
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	4413      	add	r3, r2
 800621e:	3308      	adds	r3, #8
 8006220:	7aba      	ldrb	r2, [r7, #10]
 8006222:	705a      	strb	r2, [r3, #1]

    AUTOMATION_Handle.fb_connect_table_write_index++;
 8006224:	4b09      	ldr	r3, [pc, #36]	; (800624c <AUTOMATION_FB_AddConnectionEntry+0xb8>)
 8006226:	7c5b      	ldrb	r3, [r3, #17]
 8006228:	3301      	adds	r3, #1
 800622a:	b2da      	uxtb	r2, r3
 800622c:	4b07      	ldr	r3, [pc, #28]	; (800624c <AUTOMATION_FB_AddConnectionEntry+0xb8>)
 800622e:	745a      	strb	r2, [r3, #17]
    AUTOMATION_Handle.fb_connect_table_data_length--;
 8006230:	4b06      	ldr	r3, [pc, #24]	; (800624c <AUTOMATION_FB_AddConnectionEntry+0xb8>)
 8006232:	7cdb      	ldrb	r3, [r3, #19]
 8006234:	3b01      	subs	r3, #1
 8006236:	b2da      	uxtb	r2, r3
 8006238:	4b04      	ldr	r3, [pc, #16]	; (800624c <AUTOMATION_FB_AddConnectionEntry+0xb8>)
 800623a:	74da      	strb	r2, [r3, #19]
  }
  return (status);
 800623c:	7dfb      	ldrb	r3, [r7, #23]
}
 800623e:	4618      	mov	r0, r3
 8006240:	371c      	adds	r7, #28
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr
 800624a:	bf00      	nop
 800624c:	1fffd014 	.word	0x1fffd014
 8006250:	1fffdb60 	.word	0x1fffdb60

08006254 <AUTOMATION_FB_Connect>:

/*
 * Connect the the function block connection entries
 */
void AUTOMATION_FB_Connect()
{
 8006254:	b490      	push	{r4, r7}
 8006256:	b082      	sub	sp, #8
 8006258:	af00      	add	r7, sp, #0
  uint8_t read_index = AUTOMATION_Handle.fb_connect_table_read_index;
 800625a:	4b24      	ldr	r3, [pc, #144]	; (80062ec <AUTOMATION_FB_Connect+0x98>)
 800625c:	7c9b      	ldrb	r3, [r3, #18]
 800625e:	71fb      	strb	r3, [r7, #7]

  while (AUTOMATION_Handle.fb_connect_table_data_length != AUTOMATION_FB_CONNECT_TABLE_SIZE)
 8006260:	e038      	b.n	80062d4 <AUTOMATION_FB_Connect+0x80>
  {
    *AUTOMATION_FB_Connect_Table[read_index].destination_fb->input_ptr[AUTOMATION_FB_Connect_Table[read_index].in_signal_num] =
 8006262:	79fa      	ldrb	r2, [r7, #7]
 8006264:	4922      	ldr	r1, [pc, #136]	; (80062f0 <AUTOMATION_FB_Connect+0x9c>)
 8006266:	4613      	mov	r3, r2
 8006268:	005b      	lsls	r3, r3, #1
 800626a:	4413      	add	r3, r2
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	440b      	add	r3, r1
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	6819      	ldr	r1, [r3, #0]
 8006274:	79fa      	ldrb	r2, [r7, #7]
 8006276:	481e      	ldr	r0, [pc, #120]	; (80062f0 <AUTOMATION_FB_Connect+0x9c>)
 8006278:	4613      	mov	r3, r2
 800627a:	005b      	lsls	r3, r3, #1
 800627c:	4413      	add	r3, r2
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	4403      	add	r3, r0
 8006282:	3308      	adds	r3, #8
 8006284:	785b      	ldrb	r3, [r3, #1]
 8006286:	009b      	lsls	r3, r3, #2
 8006288:	440b      	add	r3, r1
 800628a:	6819      	ldr	r1, [r3, #0]
        AUTOMATION_FB_Connect_Table[read_index].source_fb->output_ptr[AUTOMATION_FB_Connect_Table[read_index].out_signal_num];
 800628c:	79fa      	ldrb	r2, [r7, #7]
 800628e:	4818      	ldr	r0, [pc, #96]	; (80062f0 <AUTOMATION_FB_Connect+0x9c>)
 8006290:	4613      	mov	r3, r2
 8006292:	005b      	lsls	r3, r3, #1
 8006294:	4413      	add	r3, r2
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	4403      	add	r3, r0
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	6858      	ldr	r0, [r3, #4]
 800629e:	79fa      	ldrb	r2, [r7, #7]
 80062a0:	4c13      	ldr	r4, [pc, #76]	; (80062f0 <AUTOMATION_FB_Connect+0x9c>)
 80062a2:	4613      	mov	r3, r2
 80062a4:	005b      	lsls	r3, r3, #1
 80062a6:	4413      	add	r3, r2
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	4423      	add	r3, r4
 80062ac:	3308      	adds	r3, #8
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	4403      	add	r3, r0
 80062b4:	681b      	ldr	r3, [r3, #0]
{
  uint8_t read_index = AUTOMATION_Handle.fb_connect_table_read_index;

  while (AUTOMATION_Handle.fb_connect_table_data_length != AUTOMATION_FB_CONNECT_TABLE_SIZE)
  {
    *AUTOMATION_FB_Connect_Table[read_index].destination_fb->input_ptr[AUTOMATION_FB_Connect_Table[read_index].in_signal_num] =
 80062b6:	600b      	str	r3, [r1, #0]
        AUTOMATION_FB_Connect_Table[read_index].source_fb->output_ptr[AUTOMATION_FB_Connect_Table[read_index].out_signal_num];
    read_index++;
 80062b8:	79fb      	ldrb	r3, [r7, #7]
 80062ba:	3301      	adds	r3, #1
 80062bc:	71fb      	strb	r3, [r7, #7]
    AUTOMATION_Handle.fb_connect_table_data_length++;
 80062be:	4b0b      	ldr	r3, [pc, #44]	; (80062ec <AUTOMATION_FB_Connect+0x98>)
 80062c0:	7cdb      	ldrb	r3, [r3, #19]
 80062c2:	3301      	adds	r3, #1
 80062c4:	b2da      	uxtb	r2, r3
 80062c6:	4b09      	ldr	r3, [pc, #36]	; (80062ec <AUTOMATION_FB_Connect+0x98>)
 80062c8:	74da      	strb	r2, [r3, #19]
    if ((uint8_t) AUTOMATION_FB_CONNECT_TABLE_SIZE <= read_index)
 80062ca:	79fb      	ldrb	r3, [r7, #7]
 80062cc:	2b11      	cmp	r3, #17
 80062ce:	d901      	bls.n	80062d4 <AUTOMATION_FB_Connect+0x80>
    {
      read_index = 0U;
 80062d0:	2300      	movs	r3, #0
 80062d2:	71fb      	strb	r3, [r7, #7]
 */
void AUTOMATION_FB_Connect()
{
  uint8_t read_index = AUTOMATION_Handle.fb_connect_table_read_index;

  while (AUTOMATION_Handle.fb_connect_table_data_length != AUTOMATION_FB_CONNECT_TABLE_SIZE)
 80062d4:	4b05      	ldr	r3, [pc, #20]	; (80062ec <AUTOMATION_FB_Connect+0x98>)
 80062d6:	7cdb      	ldrb	r3, [r3, #19]
 80062d8:	2b12      	cmp	r3, #18
 80062da:	d1c2      	bne.n	8006262 <AUTOMATION_FB_Connect+0xe>
    if ((uint8_t) AUTOMATION_FB_CONNECT_TABLE_SIZE <= read_index)
    {
      read_index = 0U;
    }
  }
  AUTOMATION_Handle.fb_connect_table_read_index = read_index;
 80062dc:	4a03      	ldr	r2, [pc, #12]	; (80062ec <AUTOMATION_FB_Connect+0x98>)
 80062de:	79fb      	ldrb	r3, [r7, #7]
 80062e0:	7493      	strb	r3, [r2, #18]
}
 80062e2:	3708      	adds	r7, #8
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bc90      	pop	{r4, r7}
 80062e8:	4770      	bx	lr
 80062ea:	bf00      	nop
 80062ec:	1fffd014 	.word	0x1fffd014
 80062f0:	1fffdb60 	.word	0x1fffdb60

080062f4 <AUTOMATION_FB_RampInit>:
  ramphandle_ptr->slewrate_end = ramphandle_ptr->slewrate_endset_t;
}

/* initialize ramp generator target values*/
void AUTOMATION_FB_RampInit(AUTOMATION_FB_HANDLE_t* const rampfb_ptr)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b085      	sub	sp, #20
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  AUTOMATION_FB_RAMPGEN_t* ramphandle_ptr = rampfb_ptr->config_ptr;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	60fb      	str	r3, [r7, #12]
  ramphandle_ptr->out_set_t = ramphandle_ptr->startset_t;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	689a      	ldr	r2, [r3, #8]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	60da      	str	r2, [r3, #12]
}
 800630a:	3714      	adds	r7, #20
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr

08006314 <AUTOMATION_FB_LinearRamp>:

/*
 * generates the linear ramp
 */
void AUTOMATION_FB_LinearRamp(AUTOMATION_FB_RAMPGEN_t* const ramphandle_ptr)
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  ramphandle_ptr->counter_t = (ramphandle_ptr->counter * (*(ramphandle_ptr->scale_ptr))) >> AUTOMATION_Q15;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	699b      	ldr	r3, [r3, #24]
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	6952      	ldr	r2, [r2, #20]
 8006324:	6812      	ldr	r2, [r2, #0]
 8006326:	fb02 f303 	mul.w	r3, r2, r3
 800632a:	0bda      	lsrs	r2, r3, #15
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	61da      	str	r2, [r3, #28]
  /*Update the velocity reference value.*/
  if (ramphandle_ptr->index > ramphandle_ptr->counter_t)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6a1a      	ldr	r2, [r3, #32]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	69db      	ldr	r3, [r3, #28]
 8006338:	429a      	cmp	r2, r3
 800633a:	d91b      	bls.n	8006374 <AUTOMATION_FB_LinearRamp+0x60>
  {
    if (*(ramphandle_ptr->endset_ptr) > ramphandle_ptr->out_set_t)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	429a      	cmp	r2, r3
 8006348:	dd05      	ble.n	8006356 <AUTOMATION_FB_LinearRamp+0x42>
    {
      ramphandle_ptr->out_set_t++;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	1c5a      	adds	r2, r3, #1
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	60da      	str	r2, [r3, #12]
 8006354:	e00b      	b.n	800636e <AUTOMATION_FB_LinearRamp+0x5a>
    }
    else if (*(ramphandle_ptr->endset_ptr) < ramphandle_ptr->out_set_t)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	429a      	cmp	r2, r3
 8006362:	da04      	bge.n	800636e <AUTOMATION_FB_LinearRamp+0x5a>
    {
      ramphandle_ptr->out_set_t--;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	1e5a      	subs	r2, r3, #1
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	60da      	str	r2, [r3, #12]
    }
    else
    {

    }
    ramphandle_ptr->index = 0U;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	621a      	str	r2, [r3, #32]
  }
  ramphandle_ptr->index++;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6a1b      	ldr	r3, [r3, #32]
 8006378:	1c5a      	adds	r2, r3, #1
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	621a      	str	r2, [r3, #32]
}
 800637e:	370c      	adds	r7, #12
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <AUTOMATION_SM_RegisterStateMachine>:

/**
 * This function register Drive state machine handler.
 */
AUTOMATION_STATUS_t AUTOMATION_SM_RegisterStateMachine(AUTOMATION_SM_t* statemachine, uint8_t app_id)
{
 8006388:	b480      	push	{r7}
 800638a:	b085      	sub	sp, #20
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	460b      	mov	r3, r1
 8006392:	70fb      	strb	r3, [r7, #3]
  AUTOMATION_STATUS_t status;
  if (app_id > AUTOMATION_NUM_APPS)
 8006394:	78fb      	ldrb	r3, [r7, #3]
 8006396:	2b01      	cmp	r3, #1
 8006398:	d902      	bls.n	80063a0 <AUTOMATION_SM_RegisterStateMachine+0x18>
  {
    status = AUTOMATION_STATUS_FAILURE;
 800639a:	2301      	movs	r3, #1
 800639c:	73fb      	strb	r3, [r7, #15]
 800639e:	e006      	b.n	80063ae <AUTOMATION_SM_RegisterStateMachine+0x26>
  }
  else
  {
    /* Register Drive Statemachine interface */
    AUTOMATION_SM_Table[app_id] = statemachine;
 80063a0:	78fb      	ldrb	r3, [r7, #3]
 80063a2:	4906      	ldr	r1, [pc, #24]	; (80063bc <AUTOMATION_SM_RegisterStateMachine+0x34>)
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    status = AUTOMATION_STATUS_SUCCESS;
 80063aa:	2300      	movs	r3, #0
 80063ac:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80063ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3714      	adds	r7, #20
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr
 80063bc:	1fffd8f4 	.word	0x1fffd8f4

080063c0 <AUTOMATION_SM_RequestState>:
  return state;
}

/* request to change the state */
void AUTOMATION_SM_RequestState(AUTOMATION_SM_t* statemachine, uint8_t new_state)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b083      	sub	sp, #12
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	460b      	mov	r3, r1
 80063ca:	70fb      	strb	r3, [r7, #3]
  statemachine->requested_state = new_state;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	78fa      	ldrb	r2, [r7, #3]
 80063d0:	725a      	strb	r2, [r3, #9]
  statemachine->transition_request = 1U;
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	7a93      	ldrb	r3, [r2, #10]
 80063d6:	f043 0301 	orr.w	r3, r3, #1
 80063da:	7293      	strb	r3, [r2, #10]
}
 80063dc:	370c      	adds	r7, #12
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr
 80063e6:	bf00      	nop

080063e8 <AUTOMATION_SM_Handler>:

/* Drive State machine scheduler */
void AUTOMATION_SM_Handler(AUTOMATION_SM_t * statemachine)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  if (NULL != statemachine)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d06f      	beq.n	80064d6 <AUTOMATION_SM_Handler+0xee>
  {
    if (statemachine->transition_request)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	0c1b      	lsrs	r3, r3, #16
 80063fc:	f003 0301 	and.w	r3, r3, #1
 8006400:	b2db      	uxtb	r3, r3
 8006402:	2b00      	cmp	r3, #0
 8006404:	d053      	beq.n	80064ae <AUTOMATION_SM_Handler+0xc6>
    {
      /* New state was requested - execute the exit function of old state */
      if (NULL != statemachine->states[statemachine->current_state].state_exit_call)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	7a1b      	ldrb	r3, [r3, #8]
 800640e:	011b      	lsls	r3, r3, #4
 8006410:	4413      	add	r3, r2
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d00a      	beq.n	800642e <AUTOMATION_SM_Handler+0x46>
      {
        statemachine->states[statemachine->current_state].state_exit_call((void*) statemachine->app_handler);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	7a1b      	ldrb	r3, [r3, #8]
 8006420:	011b      	lsls	r3, r3, #4
 8006422:	4413      	add	r3, r2
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	6852      	ldr	r2, [r2, #4]
 800642a:	4610      	mov	r0, r2
 800642c:	4798      	blx	r3
      }

      if (statemachine->current_state != statemachine->requested_state)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	7a1a      	ldrb	r2, [r3, #8]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	7a5b      	ldrb	r3, [r3, #9]
 8006436:	429a      	cmp	r2, r3
 8006438:	d033      	beq.n	80064a2 <AUTOMATION_SM_Handler+0xba>
      {
        /* change state */
        statemachine->current_state = statemachine->requested_state;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	7a5a      	ldrb	r2, [r3, #9]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	721a      	strb	r2, [r3, #8]
        /* execute the entry function of new state */
        if (NULL != statemachine->states[statemachine->current_state].state_entry_call)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	7a1b      	ldrb	r3, [r3, #8]
 800644a:	011b      	lsls	r3, r3, #4
 800644c:	4413      	add	r3, r2
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d00a      	beq.n	800646a <AUTOMATION_SM_Handler+0x82>
        {
          statemachine->states[statemachine->current_state].state_entry_call((void*) statemachine->app_handler);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	7a1b      	ldrb	r3, [r3, #8]
 800645c:	011b      	lsls	r3, r3, #4
 800645e:	4413      	add	r3, r2
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	6852      	ldr	r2, [r2, #4]
 8006466:	4610      	mov	r0, r2
 8006468:	4798      	blx	r3
        }

        if (NULL != statemachine->states[statemachine->current_state].state_action_call)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	7a1b      	ldrb	r3, [r3, #8]
 8006472:	011b      	lsls	r3, r3, #4
 8006474:	4413      	add	r3, r2
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d012      	beq.n	80064a2 <AUTOMATION_SM_Handler+0xba>
        {
          if (statemachine->execute_action)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	0c5b      	lsrs	r3, r3, #17
 8006482:	f003 0301 	and.w	r3, r3, #1
 8006486:	b2db      	uxtb	r3, r3
 8006488:	2b00      	cmp	r3, #0
 800648a:	d00a      	beq.n	80064a2 <AUTOMATION_SM_Handler+0xba>
          {
            /* immediate execution of action function was requested
             execute the action function of new state */
            statemachine->states[statemachine->current_state].state_action_call((void*) statemachine->app_handler);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	7a1b      	ldrb	r3, [r3, #8]
 8006494:	011b      	lsls	r3, r3, #4
 8006496:	4413      	add	r3, r2
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	6852      	ldr	r2, [r2, #4]
 800649e:	4610      	mov	r0, r2
 80064a0:	4798      	blx	r3
          }
        }
      }
      statemachine->transition_request = 0U;
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	7a93      	ldrb	r3, [r2, #10]
 80064a6:	f36f 0300 	bfc	r3, #0, #1
 80064aa:	7293      	strb	r3, [r2, #10]
 80064ac:	e013      	b.n	80064d6 <AUTOMATION_SM_Handler+0xee>
    }
    else
    {
      if (NULL != statemachine->states[statemachine->current_state].state_action_call)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	7a1b      	ldrb	r3, [r3, #8]
 80064b6:	011b      	lsls	r3, r3, #4
 80064b8:	4413      	add	r3, r2
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d00a      	beq.n	80064d6 <AUTOMATION_SM_Handler+0xee>
      {
        statemachine->states[statemachine->current_state].state_action_call((void*) statemachine->app_handler);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	7a1b      	ldrb	r3, [r3, #8]
 80064c8:	011b      	lsls	r3, r3, #4
 80064ca:	4413      	add	r3, r2
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	6852      	ldr	r2, [r2, #4]
 80064d2:	4610      	mov	r0, r2
 80064d4:	4798      	blx	r3
      }
    }

  }
}
 80064d6:	3708      	adds	r7, #8
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <ANALOG_IO_Init>:
 * Input Parameter  : Handler Pointer pointing to APP data structure.
 * Output Parameter : ANALOG_IO_STATUS_t (ANALOG_IO APP initialization status).
 */

ANALOG_IO_STATUS_t ANALOG_IO_Init(const ANALOG_IO_t *const handle)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b082      	sub	sp, #8
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("ANALOG_IO_Init: Passed handler is a null pointer", handler != NULL);
  if (*(handle->state) == ANALOG_IO_STATE_NOT_INITIALIZED)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d10a      	bne.n	8006504 <ANALOG_IO_Init+0x28>
  {
    if (handle->config_ptr != NULL)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d002      	beq.n	80064fc <ANALOG_IO_Init+0x20>
    {
      /* Instance specific initialization function call*/
      handle->config_ptr();
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4798      	blx	r3
    }
    /* Set the state variable to initialized state*/
    *(handle->state) = ANALOG_IO_STATE_INITIALIZED;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	2201      	movs	r2, #1
 8006502:	701a      	strb	r2, [r3, #0]
  }
  return (ANALOG_IO_STATUS_OK);
 8006504:	2300      	movs	r3, #0
}
 8006506:	4618      	mov	r0, r3
 8006508:	3708      	adds	r7, #8
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop

08006510 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006510:	b480      	push	{r7}
 8006512:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006514:	4b04      	ldr	r3, [pc, #16]	; (8006528 <__NVIC_GetPriorityGrouping+0x18>)
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800651c:	0a1b      	lsrs	r3, r3, #8
}
 800651e:	4618      	mov	r0, r3
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr
 8006528:	e000ed00 	.word	0xe000ed00

0800652c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800652c:	b480      	push	{r7}
 800652e:	b083      	sub	sp, #12
 8006530:	af00      	add	r7, sp, #0
 8006532:	4603      	mov	r3, r0
 8006534:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800653a:	2b00      	cmp	r3, #0
 800653c:	db0b      	blt.n	8006556 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800653e:	4908      	ldr	r1, [pc, #32]	; (8006560 <__NVIC_EnableIRQ+0x34>)
 8006540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006544:	095b      	lsrs	r3, r3, #5
 8006546:	79fa      	ldrb	r2, [r7, #7]
 8006548:	f002 021f 	and.w	r2, r2, #31
 800654c:	2001      	movs	r0, #1
 800654e:	fa00 f202 	lsl.w	r2, r0, r2
 8006552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr
 8006560:	e000e100 	.word	0xe000e100

08006564 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	4603      	mov	r3, r0
 800656c:	6039      	str	r1, [r7, #0]
 800656e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006574:	2b00      	cmp	r3, #0
 8006576:	db0a      	blt.n	800658e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006578:	490d      	ldr	r1, [pc, #52]	; (80065b0 <__NVIC_SetPriority+0x4c>)
 800657a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800657e:	683a      	ldr	r2, [r7, #0]
 8006580:	b2d2      	uxtb	r2, r2
 8006582:	0092      	lsls	r2, r2, #2
 8006584:	b2d2      	uxtb	r2, r2
 8006586:	440b      	add	r3, r1
 8006588:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 800658c:	e00a      	b.n	80065a4 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800658e:	4909      	ldr	r1, [pc, #36]	; (80065b4 <__NVIC_SetPriority+0x50>)
 8006590:	79fb      	ldrb	r3, [r7, #7]
 8006592:	f003 030f 	and.w	r3, r3, #15
 8006596:	3b04      	subs	r3, #4
 8006598:	683a      	ldr	r2, [r7, #0]
 800659a:	b2d2      	uxtb	r2, r2
 800659c:	0092      	lsls	r2, r2, #2
 800659e:	b2d2      	uxtb	r2, r2
 80065a0:	440b      	add	r3, r1
 80065a2:	761a      	strb	r2, [r3, #24]
  }
}
 80065a4:	370c      	adds	r7, #12
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr
 80065ae:	bf00      	nop
 80065b0:	e000e100 	.word	0xe000e100
 80065b4:	e000ed00 	.word	0xe000ed00

080065b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b089      	sub	sp, #36	; 0x24
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f003 0307 	and.w	r3, r3, #7
 80065ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80065cc:	69fb      	ldr	r3, [r7, #28]
 80065ce:	f1c3 0307 	rsb	r3, r3, #7
 80065d2:	2b06      	cmp	r3, #6
 80065d4:	bf28      	it	cs
 80065d6:	2306      	movcs	r3, #6
 80065d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80065da:	69fb      	ldr	r3, [r7, #28]
 80065dc:	3306      	adds	r3, #6
 80065de:	2b06      	cmp	r3, #6
 80065e0:	d902      	bls.n	80065e8 <NVIC_EncodePriority+0x30>
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	3b01      	subs	r3, #1
 80065e6:	e000      	b.n	80065ea <NVIC_EncodePriority+0x32>
 80065e8:	2300      	movs	r3, #0
 80065ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80065ec:	69bb      	ldr	r3, [r7, #24]
 80065ee:	2201      	movs	r2, #1
 80065f0:	fa02 f303 	lsl.w	r3, r2, r3
 80065f4:	1e5a      	subs	r2, r3, #1
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	401a      	ands	r2, r3
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	2101      	movs	r1, #1
 8006602:	fa01 f303 	lsl.w	r3, r1, r3
 8006606:	1e59      	subs	r1, r3, #1
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 800660c:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 800660e:	4618      	mov	r0, r3
 8006610:	3724      	adds	r7, #36	; 0x24
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr
 800661a:	bf00      	nop

0800661c <XMC_VADC_GLOBAL_BackgroundTriggerConversion>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundTriggerConversion(XMC_VADC_GLOBAL_t *const global_ptr)
{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundTriggerConversion:Wrong Module Pointer", (global_ptr == VADC))
  global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_LDEV_Msk;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800662a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 8006634:	370c      	adds	r7, #12
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop

08006640 <XMC_VADC_GLOBAL_BackgroundAddChannelToSequence>:
 *  XMC_VADC_GLOBAL_BackgroundAddMultipleChannels()<BR>
 */
__STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(XMC_VADC_GLOBAL_t *const global_ptr,
                                                                    const uint32_t grp_num,
                                                                    const uint32_t ch_num)
{
 8006640:	b480      	push	{r7}
 8006642:	b085      	sub	sp, #20
 8006644:	af00      	add	r7, sp, #0
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	60b9      	str	r1, [r7, #8]
 800664a:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Group Number",((grp_num) < XMC_VADC_MAXIMUM_NUM_GROUPS))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Channel Number",
             ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))

  global_ptr->BRSSEL[grp_num] |= (uint32_t)((uint32_t)1 << ch_num);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	68ba      	ldr	r2, [r7, #8]
 8006650:	3260      	adds	r2, #96	; 0x60
 8006652:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2101      	movs	r1, #1
 800665a:	fa01 f303 	lsl.w	r3, r1, r3
 800665e:	ea42 0103 	orr.w	r1, r2, r3
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	68ba      	ldr	r2, [r7, #8]
 8006666:	3260      	adds	r2, #96	; 0x60
 8006668:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800666c:	3714      	adds	r7, #20
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr
 8006676:	bf00      	nop

08006678 <XMC_VADC_GROUP_ResultInit>:
 * XMC_VADC_GROUP_AddResultToFifo()<BR> XMC_VADC_GROUP_EnableResultEvent()<br> XMC_VADC_GROUP_DisableResultEvent()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_ResultInit(XMC_VADC_GROUP_t *const group_ptr,
                                               const uint32_t res_reg_num,
                                               const XMC_VADC_RESULT_CONFIG_t *config)
{
 8006678:	b480      	push	{r7}
 800667a:	b085      	sub	sp, #20
 800667c:	af00      	add	r7, sp, #0
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	60b9      	str	r1, [r7, #8]
 8006682:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_ResultInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->RCR[res_reg_num] = config->g_rcr;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6819      	ldr	r1, [r3, #0]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	68ba      	ldr	r2, [r7, #8]
 800668c:	32a0      	adds	r2, #160	; 0xa0
 800668e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 8006692:	3714      	adds	r7, #20
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr

0800669c <XMC_VADC_GROUP_GetResult>:
 * \par<b>Related APIs:</b><br>
 * XMC_VADC_GROUP_GetDetailedResult().
 */
__STATIC_INLINE XMC_VADC_RESULT_SIZE_t XMC_VADC_GROUP_GetResult(XMC_VADC_GROUP_t *const group_ptr, 
                                                                const uint32_t res_reg)
{
 800669c:	b480      	push	{r7}
 800669e:	b083      	sub	sp, #12
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))

  return ((XMC_VADC_RESULT_SIZE_t)group_ptr->RES[res_reg]);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	683a      	ldr	r2, [r7, #0]
 80066aa:	32c0      	adds	r2, #192	; 0xc0
 80066ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066b0:	b29b      	uxth	r3, r3
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	370c      	adds	r7, #12
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr
 80066be:	bf00      	nop

080066c0 <ADC_MEASUREMENT_Init>:
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Initialization routine to call ADC LLD API's */
ADC_MEASUREMENT_STATUS_t ADC_MEASUREMENT_Init(ADC_MEASUREMENT_t *const handle_ptr)
{
 80066c0:	b590      	push	{r4, r7, lr}
 80066c2:	b085      	sub	sp, #20
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  uint8_t j;
  ADC_MEASUREMENT_STATUS_t status;

  XMC_ASSERT("ADC_MEASUREMENT_Init:Invalid handle_ptr", (handle_ptr != NULL))

  if (ADC_MEASUREMENT_STATUS_UNINITIALIZED == handle_ptr->init_state)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	7e1b      	ldrb	r3, [r3, #24]
 80066cc:	2b02      	cmp	r3, #2
 80066ce:	f040 80a7 	bne.w	8006820 <ADC_MEASUREMENT_Init+0x160>
  {
    /* Call the function to initialise Clock and ADC global functional units*/
    status = (ADC_MEASUREMENT_STATUS_t) GLOBAL_ADC_Init(handle_ptr->global_handle);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	4618      	mov	r0, r3
 80066d8:	f7fe feb2 	bl	8005440 <GLOBAL_ADC_Init>
 80066dc:	4603      	mov	r3, r0
 80066de:	73bb      	strb	r3, [r7, #14]
  
    /*Initialize the Global Conversion class 0*/
    XMC_VADC_GLOBAL_InputClassInit(handle_ptr->global_handle->module_ptr,*handle_ptr->iclass_config_handle,
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	695a      	ldr	r2, [r3, #20]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	4610      	mov	r0, r2
 80066ec:	6819      	ldr	r1, [r3, #0]
 80066ee:	2200      	movs	r2, #0
 80066f0:	2300      	movs	r3, #0
 80066f2:	f7fb fd5f 	bl	80021b4 <XMC_VADC_GLOBAL_InputClassInit>
    XMC_VADC_GLOBAL_InputClassInit(handle_ptr->global_handle->module_ptr,*handle_ptr->iclass_config_handle,
    		                              XMC_VADC_GROUP_CONV_STD,ADC_MEASUREMENT_ICLASS_NUM_XMC11);
#endif
  
    /* Initialize the Background Scan hardware */
    XMC_VADC_GLOBAL_BackgroundInit(handle_ptr->global_handle->module_ptr, handle_ptr->backgnd_config_handle);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	695a      	ldr	r2, [r3, #20]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	4610      	mov	r0, r2
 8006702:	4619      	mov	r1, r3
 8006704:	f7fb fe7a 	bl	80023fc <XMC_VADC_GLOBAL_BackgroundInit>
#if (XMC_VADC_GROUP_AVAILABLE == 0U)
    /* Initialize the global result register */
    XMC_VADC_GLOBAL_ResultInit(handle_ptr->global_handle->module_ptr,handle_ptr->array->res_handle);
#endif

    for (j = (uint8_t)0; j < (uint8_t)ADC_MEASUREMENT_MAXCHANNELS; j++)
 8006708:	2300      	movs	r3, #0
 800670a:	73fb      	strb	r3, [r7, #15]
 800670c:	e03c      	b.n	8006788 <ADC_MEASUREMENT_Init+0xc8>
    {
      indexed = handle_ptr->array->channel_array[j];
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	7bfa      	ldrb	r2, [r7, #15]
 8006714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006718:	60bb      	str	r3, [r7, #8]
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
      /* Initialize for configured channels*/
      XMC_VADC_GROUP_ChannelInit(indexed->group_handle,(uint32_t)indexed->ch_num, indexed->ch_handle);
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	689a      	ldr	r2, [r3, #8]
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	7c5b      	ldrb	r3, [r3, #17]
 8006722:	4619      	mov	r1, r3
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4610      	mov	r0, r2
 800672a:	461a      	mov	r2, r3
 800672c:	f7fb fee4 	bl	80024f8 <XMC_VADC_GROUP_ChannelInit>
  
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	689a      	ldr	r2, [r3, #8]
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	789b      	ldrb	r3, [r3, #2]
 800673a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800673e:	b2db      	uxtb	r3, r3
 8006740:	4619      	mov	r1, r3
                                indexed->res_handle);
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	685b      	ldr	r3, [r3, #4]
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
      /* Initialize for configured channels*/
      XMC_VADC_GROUP_ChannelInit(indexed->group_handle,(uint32_t)indexed->ch_num, indexed->ch_handle);
  
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
 8006746:	4610      	mov	r0, r2
 8006748:	461a      	mov	r2, r3
 800674a:	f7ff ff95 	bl	8006678 <XMC_VADC_GROUP_ResultInit>
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	68db      	ldr	r3, [r3, #12]
 8006752:	695a      	ldr	r2, [r3, #20]
                                                     (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	7c1b      	ldrb	r3, [r3, #16]
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 8006758:	4619      	mov	r1, r3
                                                     (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	7c5b      	ldrb	r3, [r3, #17]
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 800675e:	4610      	mov	r0, r2
 8006760:	461a      	mov	r2, r3
 8006762:	f7ff ff6d 	bl	8006640 <XMC_VADC_GLOBAL_BackgroundAddChannelToSequence>
                                                     (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);

#ifdef ADC_MEASUREMENT_ANALOG_IO_USED
      /* ANALOG_IO initialization for the channel*/
      if(indexed->analog_io_config != NULL)
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d009      	beq.n	8006782 <ADC_MEASUREMENT_Init+0xc2>
      {
        status |= (ADC_MEASUREMENT_STATUS_t) ANALOG_IO_Init(indexed->analog_io_config);
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	68db      	ldr	r3, [r3, #12]
 8006772:	4618      	mov	r0, r3
 8006774:	f7ff feb2 	bl	80064dc <ANALOG_IO_Init>
 8006778:	4603      	mov	r3, r0
 800677a:	461a      	mov	r2, r3
 800677c:	7bbb      	ldrb	r3, [r7, #14]
 800677e:	4313      	orrs	r3, r2
 8006780:	73bb      	strb	r3, [r7, #14]
#if (XMC_VADC_GROUP_AVAILABLE == 0U)
    /* Initialize the global result register */
    XMC_VADC_GLOBAL_ResultInit(handle_ptr->global_handle->module_ptr,handle_ptr->array->res_handle);
#endif

    for (j = (uint8_t)0; j < (uint8_t)ADC_MEASUREMENT_MAXCHANNELS; j++)
 8006782:	7bfb      	ldrb	r3, [r7, #15]
 8006784:	3301      	adds	r3, #1
 8006786:	73fb      	strb	r3, [r7, #15]
 8006788:	7bfb      	ldrb	r3, [r7, #15]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d0bf      	beq.n	800670e <ADC_MEASUREMENT_Init+0x4e>
        status |= (ADC_MEASUREMENT_STATUS_t) ANALOG_IO_Init(indexed->analog_io_config);
      }
#endif
    }
#if(UC_SERIES != XMC11)
    if ((handle_ptr->backgnd_config_handle->req_src_interrupt) && (handle_ptr->req_src_intr_handle != NULL ))
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	7a1b      	ldrb	r3, [r3, #8]
 8006794:	f003 0308 	and.w	r3, r3, #8
 8006798:	b2db      	uxtb	r3, r3
 800679a:	2b00      	cmp	r3, #0
 800679c:	d02c      	beq.n	80067f8 <ADC_MEASUREMENT_Init+0x138>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d028      	beq.n	80067f8 <ADC_MEASUREMENT_Init+0x138>
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	691b      	ldr	r3, [r3, #16]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	b2dc      	uxtb	r4, r3
 80067ae:	f7ff feaf 	bl	8006510 <__NVIC_GetPriorityGrouping>
 80067b2:	4601      	mov	r1, r0
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	691b      	ldr	r3, [r3, #16]
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 80067b8:	685a      	ldr	r2, [r3, #4]
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	691b      	ldr	r3, [r3, #16]
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	4608      	mov	r0, r1
 80067c2:	4611      	mov	r1, r2
 80067c4:	461a      	mov	r2, r3
 80067c6:	f7ff fef7 	bl	80065b8 <NVIC_EncodePriority>
 80067ca:	4602      	mov	r2, r0
 80067cc:	b263      	sxtb	r3, r4
 80067ce:	4618      	mov	r0, r3
 80067d0:	4611      	mov	r1, r2
 80067d2:	f7ff fec7 	bl	8006564 <__NVIC_SetPriority>
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
#endif
      /* Connect background Request Source Event to NVIC node */
      XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(handle_ptr->global_handle->module_ptr,
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	68db      	ldr	r3, [r3, #12]
 80067da:	695a      	ldr	r2, [r3, #20]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	7e5b      	ldrb	r3, [r3, #25]
 80067e0:	4610      	mov	r0, r2
 80067e2:	4619      	mov	r1, r3
 80067e4:	f7fb fd3a 	bl	800225c <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode>
    		                                         (XMC_VADC_SR_t) handle_ptr->srv_req_node);
    
      /* Enable Background Scan Request source IRQ */
      NVIC_EnableIRQ((IRQn_Type)handle_ptr->req_src_intr_handle->node_id);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	691b      	ldr	r3, [r3, #16]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	b25b      	sxtb	r3, r3
 80067f2:	4618      	mov	r0, r3
 80067f4:	f7ff fe9a 	bl	800652c <__NVIC_EnableIRQ>
    /* Enable Background Scan Request source IRQ */
    NVIC_EnableIRQ((IRQn_Type)handle_ptr->result_intr_handle->node_id);
#endif
#endif
    /* Mux Configuration is done*/
    if (handle_ptr->mux_config != NULL)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	695b      	ldr	r3, [r3, #20]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d002      	beq.n	8006806 <ADC_MEASUREMENT_Init+0x146>
    {
    	(handle_ptr->mux_config)();
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	695b      	ldr	r3, [r3, #20]
 8006804:	4798      	blx	r3
    }
  
    if (handle_ptr->start_conversion != (bool)false)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	7e9b      	ldrb	r3, [r3, #26]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d005      	beq.n	800681a <ADC_MEASUREMENT_Init+0x15a>
    {
      /* Start conversion manually using load event trigger*/
      XMC_VADC_GLOBAL_BackgroundTriggerConversion(handle_ptr->global_handle->module_ptr);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	695b      	ldr	r3, [r3, #20]
 8006814:	4618      	mov	r0, r3
 8006816:	f7ff ff01 	bl	800661c <XMC_VADC_GLOBAL_BackgroundTriggerConversion>
    }
    handle_ptr->init_state = status;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	7bba      	ldrb	r2, [r7, #14]
 800681e:	761a      	strb	r2, [r3, #24]
  }
  return (handle_ptr->init_state);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	7e1b      	ldrb	r3, [r3, #24]
}
 8006824:	4618      	mov	r0, r3
 8006826:	3714      	adds	r7, #20
 8006828:	46bd      	mov	sp, r7
 800682a:	bd90      	pop	{r4, r7, pc}

0800682c <ADC_MEASUREMENT_GetResult>:
}
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
#if(XMC_VADC_GROUP_AVAILABLE == 1U)
/* This API will get the result of a conversion for a specific channel*/
XMC_VADC_RESULT_SIZE_t ADC_MEASUREMENT_GetResult(ADC_MEASUREMENT_CHANNEL_t *const handle_ptr)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  XMC_VADC_RESULT_SIZE_t result;

  XMC_ASSERT("ADC_MEASUREMENT_GetResult:Invalid handle_ptr", (handle_ptr != NULL))

  result = XMC_VADC_GROUP_GetResult(handle_ptr->group_handle, handle_ptr->ch_handle->result_reg_number);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	689a      	ldr	r2, [r3, #8]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	789b      	ldrb	r3, [r3, #2]
 800683e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8006842:	b2db      	uxtb	r3, r3
 8006844:	4610      	mov	r0, r2
 8006846:	4619      	mov	r1, r3
 8006848:	f7ff ff28 	bl	800669c <XMC_VADC_GROUP_GetResult>
 800684c:	4603      	mov	r3, r0
 800684e:	81fb      	strh	r3, [r7, #14]

  return (result);
 8006850:	89fb      	ldrh	r3, [r7, #14]
}
 8006852:	4618      	mov	r0, r3
 8006854:	3710      	adds	r7, #16
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop

0800685c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800685c:	b480      	push	{r7}
 800685e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006860:	4b04      	ldr	r3, [pc, #16]	; (8006874 <__NVIC_GetPriorityGrouping+0x18>)
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006868:	0a1b      	lsrs	r3, r3, #8
}
 800686a:	4618      	mov	r0, r3
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr
 8006874:	e000ed00 	.word	0xe000ed00

08006878 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	4603      	mov	r3, r0
 8006880:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006886:	2b00      	cmp	r3, #0
 8006888:	db0b      	blt.n	80068a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800688a:	4908      	ldr	r1, [pc, #32]	; (80068ac <__NVIC_EnableIRQ+0x34>)
 800688c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006890:	095b      	lsrs	r3, r3, #5
 8006892:	79fa      	ldrb	r2, [r7, #7]
 8006894:	f002 021f 	and.w	r2, r2, #31
 8006898:	2001      	movs	r0, #1
 800689a:	fa00 f202 	lsl.w	r2, r0, r2
 800689e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr
 80068ac:	e000e100 	.word	0xe000e100

080068b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b083      	sub	sp, #12
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	4603      	mov	r3, r0
 80068b8:	6039      	str	r1, [r7, #0]
 80068ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80068bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	db0a      	blt.n	80068da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80068c4:	490d      	ldr	r1, [pc, #52]	; (80068fc <__NVIC_SetPriority+0x4c>)
 80068c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068ca:	683a      	ldr	r2, [r7, #0]
 80068cc:	b2d2      	uxtb	r2, r2
 80068ce:	0092      	lsls	r2, r2, #2
 80068d0:	b2d2      	uxtb	r2, r2
 80068d2:	440b      	add	r3, r1
 80068d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80068d8:	e00a      	b.n	80068f0 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80068da:	4909      	ldr	r1, [pc, #36]	; (8006900 <__NVIC_SetPriority+0x50>)
 80068dc:	79fb      	ldrb	r3, [r7, #7]
 80068de:	f003 030f 	and.w	r3, r3, #15
 80068e2:	3b04      	subs	r3, #4
 80068e4:	683a      	ldr	r2, [r7, #0]
 80068e6:	b2d2      	uxtb	r2, r2
 80068e8:	0092      	lsls	r2, r2, #2
 80068ea:	b2d2      	uxtb	r2, r2
 80068ec:	440b      	add	r3, r1
 80068ee:	761a      	strb	r2, [r3, #24]
  }
}
 80068f0:	370c      	adds	r7, #12
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr
 80068fa:	bf00      	nop
 80068fc:	e000e100 	.word	0xe000e100
 8006900:	e000ed00 	.word	0xe000ed00

08006904 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006904:	b480      	push	{r7}
 8006906:	b089      	sub	sp, #36	; 0x24
 8006908:	af00      	add	r7, sp, #0
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f003 0307 	and.w	r3, r3, #7
 8006916:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	f1c3 0307 	rsb	r3, r3, #7
 800691e:	2b06      	cmp	r3, #6
 8006920:	bf28      	it	cs
 8006922:	2306      	movcs	r3, #6
 8006924:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	3306      	adds	r3, #6
 800692a:	2b06      	cmp	r3, #6
 800692c:	d902      	bls.n	8006934 <NVIC_EncodePriority+0x30>
 800692e:	69fb      	ldr	r3, [r7, #28]
 8006930:	3b01      	subs	r3, #1
 8006932:	e000      	b.n	8006936 <NVIC_EncodePriority+0x32>
 8006934:	2300      	movs	r3, #0
 8006936:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006938:	69bb      	ldr	r3, [r7, #24]
 800693a:	2201      	movs	r2, #1
 800693c:	fa02 f303 	lsl.w	r3, r2, r3
 8006940:	1e5a      	subs	r2, r3, #1
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	401a      	ands	r2, r3
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	2101      	movs	r1, #1
 800694e:	fa01 f303 	lsl.w	r3, r1, r3
 8006952:	1e59      	subs	r1, r3, #1
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8006958:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 800695a:	4618      	mov	r0, r3
 800695c:	3724      	adds	r7, #36	; 0x24
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr
 8006966:	bf00      	nop

08006968 <XMC_CCU8_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU8_EnableShadowTransfer(XMC_CCU8_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_EnableShadowTransfer:Invalid module Pointer", XMC_CCU8_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	683a      	ldr	r2, [r7, #0]
 8006976:	611a      	str	r2, [r3, #16]
}
 8006978:	370c      	adds	r7, #12
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr
 8006982:	bf00      	nop

08006984 <XMC_SCU_SetCcuTriggerHigh>:
 * the timer using this API.<BR>
 * \par<b>Related APIs:</b><BR>
 * XMC_CCU4_SLICE_StartConfig(), XMC_CCU4_SLICE_SetInput(), XMC_SCU_SetCcuTriggerLow()\n\n\n
 */
__STATIC_INLINE void XMC_SCU_SetCcuTriggerHigh(const uint32_t trigger)
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  SCU_GENERAL->CCUCON |= (uint32_t)trigger;
 800698c:	4905      	ldr	r1, [pc, #20]	; (80069a4 <XMC_SCU_SetCcuTriggerHigh+0x20>)
 800698e:	4b05      	ldr	r3, [pc, #20]	; (80069a4 <XMC_SCU_SetCcuTriggerHigh+0x20>)
 8006990:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4313      	orrs	r3, r2
 8006996:	64cb      	str	r3, [r1, #76]	; 0x4c
}
 8006998:	370c      	adds	r7, #12
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr
 80069a2:	bf00      	nop
 80069a4:	50004000 	.word	0x50004000

080069a8 <XMC_SCU_SetCcuTriggerLow>:
 * the timer using this API.<BR>
 * \par<b>Related APIs:</b><BR>
 * XMC_CCU4_SLICE_StartConfig(), XMC_CCU4_SLICE_SetInput(), XMC_SCU_SetCcuTriggerHigh()\n\n\n
 */
__STATIC_INLINE void XMC_SCU_SetCcuTriggerLow(const uint32_t trigger)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b083      	sub	sp, #12
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  SCU_GENERAL->CCUCON &= (uint32_t)~trigger;
 80069b0:	4905      	ldr	r1, [pc, #20]	; (80069c8 <XMC_SCU_SetCcuTriggerLow+0x20>)
 80069b2:	4b05      	ldr	r3, [pc, #20]	; (80069c8 <XMC_SCU_SetCcuTriggerLow+0x20>)
 80069b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	43db      	mvns	r3, r3
 80069ba:	4013      	ands	r3, r2
 80069bc:	64cb      	str	r3, [r1, #76]	; 0x4c
}
 80069be:	370c      	adds	r7, #12
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr
 80069c8:	50004000 	.word	0x50004000

080069cc <ACIM_FREQ_CTRL_lInitializeVarAfterInit>:

/**********************************************************************************************************************
* API IMPLEMENTATION
**********************************************************************************************************************/
void ACIM_FREQ_CTRL_lInitializeVarAfterInit(ACIM_FREQ_CTRL_t* const HandlePtr)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  /* Initialize current limit input if current limit is enabled */
  if ((HandlePtr->acim_config_ptr->enable_iavg_actcurrent == (uint16_t) 1)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	7e1b      	ldrb	r3, [r3, #24]
 80069da:	f003 0304 	and.w	r3, r3, #4
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d00c      	beq.n	80069fe <ACIM_FREQ_CTRL_lInitializeVarAfterInit+0x32>
      && (HandlePtr->acim_config_ptr->enable_current_limit == (uint16_t) 1))
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	7ddb      	ldrb	r3, [r3, #23]
 80069ea:	f003 0308 	and.w	r3, r3, #8
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d004      	beq.n	80069fe <ACIM_FREQ_CTRL_lInitializeVarAfterInit+0x32>
  {
    /* Initialize current control actual input */
    HandlePtr->current_limit_ptr->input_ptr = &HandlePtr->motor_current;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	695b      	ldr	r3, [r3, #20]
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	3298      	adds	r2, #152	; 0x98
 80069fc:	609a      	str	r2, [r3, #8]
  }
  /* Initialize position input and speed reference, if position control is enabled */
  if (HandlePtr->acim_config_ptr->enable_position_control == (uint16_t) 1)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	7ddb      	ldrb	r3, [r3, #23]
 8006a04:	f003 0302 	and.w	r3, r3, #2
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d005      	beq.n	8006a1a <ACIM_FREQ_CTRL_lInitializeVarAfterInit+0x4e>
  {
    HandlePtr->speed_set_ptr = &HandlePtr->position_control_ptr->output;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	f103 020c 	add.w	r2, r3, #12
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	671a      	str	r2, [r3, #112]	; 0x70
  }
}
 8006a1a:	370c      	adds	r7, #12
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr

08006a24 <ACIM_FREQ_CTRL_lISRInit>:
void ACIM_FREQ_CTRL_lISRInit(ACIM_FREQ_CTRL_t* const HandlePtr)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b082      	sub	sp, #8
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  /* ISR Init for fast control loop */
  ACIM_FREQ_CTRL_ISRInit(HandlePtr->fcl_config_ptr);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6a1b      	ldr	r3, [r3, #32]
 8006a30:	4618      	mov	r0, r3
 8006a32:	f000 f80d 	bl	8006a50 <ACIM_FREQ_CTRL_ISRInit>

  if (HandlePtr->acim_config_ptr->pcl_task_conf == (uint8_t) ACIM_FREQ_CTRL_TS_PCL_ISR)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	7c5b      	ldrb	r3, [r3, #17]
 8006a3c:	2b02      	cmp	r3, #2
 8006a3e:	d104      	bne.n	8006a4a <ACIM_FREQ_CTRL_lISRInit+0x26>
  {
    /* ISR Init for primary control loop */
    ACIM_FREQ_CTRL_ISRInit(HandlePtr->pcl_config_ptr);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a44:	4618      	mov	r0, r3
 8006a46:	f000 f803 	bl	8006a50 <ACIM_FREQ_CTRL_ISRInit>
  }
}
 8006a4a:	3708      	adds	r7, #8
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <ACIM_FREQ_CTRL_ISRInit>:
/*
 * This function configure the the NVIC Node.
 */
static void ACIM_FREQ_CTRL_ISRInit(ACIM_FREQ_CTRL_ISRHandle_t* const HandlePtr)
{
 8006a50:	b590      	push	{r4, r7, lr}
 8006a52:	b083      	sub	sp, #12
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  /*set the priority and sub priority*/
#if (UC_FAMILY == XMC1)
  NVIC_SetPriority((IRQn_Type) HandlePtr->node_id, (uint32_t) HandlePtr->priority);
#else
  NVIC_SetPriority((IRQn_Type)HandlePtr->node_id,
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	b2dc      	uxtb	r4, r3
 8006a5e:	f7ff fefd 	bl	800685c <__NVIC_GetPriorityGrouping>
 8006a62:	4601      	mov	r1, r0
      NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
          (uint32_t)HandlePtr->priority,(uint32_t)HandlePtr->sub_priority));
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	785b      	ldrb	r3, [r3, #1]
{
  /*set the priority and sub priority*/
#if (UC_FAMILY == XMC1)
  NVIC_SetPriority((IRQn_Type) HandlePtr->node_id, (uint32_t) HandlePtr->priority);
#else
  NVIC_SetPriority((IRQn_Type)HandlePtr->node_id,
 8006a68:	461a      	mov	r2, r3
      NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
          (uint32_t)HandlePtr->priority,(uint32_t)HandlePtr->sub_priority));
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	789b      	ldrb	r3, [r3, #2]
{
  /*set the priority and sub priority*/
#if (UC_FAMILY == XMC1)
  NVIC_SetPriority((IRQn_Type) HandlePtr->node_id, (uint32_t) HandlePtr->priority);
#else
  NVIC_SetPriority((IRQn_Type)HandlePtr->node_id,
 8006a6e:	4608      	mov	r0, r1
 8006a70:	4611      	mov	r1, r2
 8006a72:	461a      	mov	r2, r3
 8006a74:	f7ff ff46 	bl	8006904 <NVIC_EncodePriority>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	b263      	sxtb	r3, r4
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	4611      	mov	r1, r2
 8006a80:	f7ff ff16 	bl	80068b0 <__NVIC_SetPriority>
      NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
          (uint32_t)HandlePtr->priority,(uint32_t)HandlePtr->sub_priority));
#endif
  /*Enable the IRQ*/
  NVIC_EnableIRQ((IRQn_Type) HandlePtr->node_id);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	b25b      	sxtb	r3, r3
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f7ff fef3 	bl	8006878 <__NVIC_EnableIRQ>
}
 8006a92:	370c      	adds	r7, #12
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd90      	pop	{r4, r7, pc}

08006a98 <ACIM_FREQ_CTRL_MotorParamInit>:

static void ACIM_FREQ_CTRL_MotorParamInit(ACIM_FREQ_CTRL_t* const HandlePtr)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  HandlePtr->amplitude = 0U;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	679a      	str	r2, [r3, #120]	; 0x78
  HandlePtr->angle = 0U;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	67da      	str	r2, [r3, #124]	; 0x7c
  HandlePtr->overcurrent_counter = 0U;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  HandlePtr->bootstrap_index = 0U;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
  if (HandlePtr->acim_config_ptr->enable_slip_control == 1U)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	7ddb      	ldrb	r3, [r3, #23]
 8006ac2:	f003 0304 	and.w	r3, r3, #4
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d004      	beq.n	8006ad6 <ACIM_FREQ_CTRL_MotorParamInit+0x3e>
  {
    HandlePtr->slip_control_ptr->pi_ptr->i_buf = 0;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	691b      	ldr	r3, [r3, #16]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	609a      	str	r2, [r3, #8]
  }
  if (HandlePtr->acim_config_ptr->enable_current_limit == 1U)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	7ddb      	ldrb	r3, [r3, #23]
 8006adc:	f003 0308 	and.w	r3, r3, #8
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d004      	beq.n	8006af0 <ACIM_FREQ_CTRL_MotorParamInit+0x58>
  {
    HandlePtr->current_limit_ptr->pi_ptr->i_buf = 0;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	695b      	ldr	r3, [r3, #20]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2200      	movs	r2, #0
 8006aee:	609a      	str	r2, [r3, #8]
  }
  if (HandlePtr->acim_config_ptr->enable_position_control == 1U)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	7ddb      	ldrb	r3, [r3, #23]
 8006af6:	f003 0302 	and.w	r3, r3, #2
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d004      	beq.n	8006b0a <ACIM_FREQ_CTRL_MotorParamInit+0x72>
  {
    HandlePtr->position_control_ptr->pi_ptr->i_buf = 0;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	2200      	movs	r2, #0
 8006b08:	609a      	str	r2, [r3, #8]
  }

  /*Changing write access for pwm frequency to not allowed*/
  HandlePtr->param_table_ptr[ACIM_FREQ_CTRL_PID_PWM_FREQUENCY].write_access =
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	699b      	ldr	r3, [r3, #24]
 8006b0e:	338c      	adds	r3, #140	; 0x8c
 8006b10:	2200      	movs	r2, #0
 8006b12:	761a      	strb	r2, [r3, #24]
      (uint8_t) ACIM_FREQ_CTRL_PH_WA_NOT_ALLOWED;

#if (ACIM_FREQ_CTRL_IS_AUTOMATION_AVAILABLE == 1U)
  /*Ramp parameter Init*/
  if (NULL != HandlePtr->ramp_fb_ptr)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d004      	beq.n	8006b26 <ACIM_FREQ_CTRL_MotorParamInit+0x8e>
  {
    AUTOMATION_FB_RampInit (HandlePtr->ramp_fb_ptr);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b20:	4618      	mov	r0, r3
 8006b22:	f7ff fbe7 	bl	80062f4 <AUTOMATION_FB_RampInit>
  }
#endif
}
 8006b26:	3708      	adds	r7, #8
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <ACIM_FREQ_CTRL_Automation_Init>:

#if (ACIM_FREQ_CTRL_IS_AUTOMATION_AVAILABLE == 1U)
static ACIM_FREQ_CTRL_STATUS_t ACIM_FREQ_CTRL_Automation_Init(ACIM_FREQ_CTRL_t*const HandlePtr)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  uint32_t status;
  uint32_t fb_connect_status = (uint32_t)ACIM_FREQ_CTRL_STATUS_SUCCESS;
 8006b34:	2300      	movs	r3, #0
 8006b36:	60bb      	str	r3, [r7, #8]

  status = (uint32_t)AUTOMATION_Init(HandlePtr->automation_ptr);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f7fe ff7d 	bl	8005a3c <AUTOMATION_Init>
 8006b42:	4603      	mov	r3, r0
 8006b44:	60fb      	str	r3, [r7, #12]

  /* Register App */
  status |= (uint32_t)AUTOMATION_RegisterApp (HandlePtr, HandlePtr->acim_freq_ctrl_fb_ptr->name, &HandlePtr->app_id);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b4a:	691a      	ldr	r2, [r3, #16]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	33a5      	adds	r3, #165	; 0xa5
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	4611      	mov	r1, r2
 8006b54:	461a      	mov	r2, r3
 8006b56:	f7fe ffb5 	bl	8005ac4 <AUTOMATION_RegisterApp>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	4313      	orrs	r3, r2
 8006b62:	60fb      	str	r3, [r7, #12]

  /* register task */
  if ((uint32_t)ACIM_FREQ_CTRL_STATUS_SUCCESS == status)
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d17c      	bne.n	8006c64 <ACIM_FREQ_CTRL_Automation_Init+0x138>
  {
#if (ACIM_FREQ_CTRL_IS_DSM_AVAILABLE == 1U)
    if (HandlePtr->acim_config_ptr->dsm_task_conf == (uint8_t)ACIM_FREQ_CTRL_TS_AUTOMATION)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	7cdb      	ldrb	r3, [r3, #19]
 8006b70:	2b04      	cmp	r3, #4
 8006b72:	d11e      	bne.n	8006bb2 <ACIM_FREQ_CTRL_Automation_Init+0x86>
    {
      status |=(uint32_t)AUTOMATION_SM_RegisterStateMachine( HandlePtr->acim_statemachine ,HandlePtr->app_id);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006b7e:	4610      	mov	r0, r2
 8006b80:	4619      	mov	r1, r3
 8006b82:	f7ff fc01 	bl	8006388 <AUTOMATION_SM_RegisterStateMachine>
 8006b86:	4603      	mov	r3, r0
 8006b88:	461a      	mov	r2, r3
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	60fb      	str	r3, [r7, #12]
      status |= (uint32_t)AUTOMATION_RegisterTask((AUTOMATION_TASK_FUNCT_PTR_t)HandlePtr->dsm_function_ptr,
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6c99      	ldr	r1, [r3, #72]	; 0x48
          (AUTOMATION_SM_t*)(void*)HandlePtr->acim_statemachine,HandlePtr->dsm_time);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  {
#if (ACIM_FREQ_CTRL_IS_DSM_AVAILABLE == 1U)
    if (HandlePtr->acim_config_ptr->dsm_task_conf == (uint8_t)ACIM_FREQ_CTRL_TS_AUTOMATION)
    {
      status |=(uint32_t)AUTOMATION_SM_RegisterStateMachine( HandlePtr->acim_statemachine ,HandlePtr->app_id);
      status |= (uint32_t)AUTOMATION_RegisterTask((AUTOMATION_TASK_FUNCT_PTR_t)HandlePtr->dsm_function_ptr,
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b9e:	4608      	mov	r0, r1
 8006ba0:	4611      	mov	r1, r2
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	f7fe ffc0 	bl	8005b28 <AUTOMATION_RegisterTask>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	461a      	mov	r2, r3
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	60fb      	str	r3, [r7, #12]
    }
#endif

#if (AUTOMATION_PH_ENABLE == 1U)
    /* register app parameter table in automation framework*/
    status |= (uint32_t)AUTOMATION_PH_RegisterParamTable(HandlePtr->app_id,
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f893 20a5 	ldrb.w	r2, [r3, #165]	; 0xa5
        (AUTOMATION_PH_PARAM_ENTRY_t*)(void*)HandlePtr->param_table_ptr);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	699b      	ldr	r3, [r3, #24]
    }
#endif

#if (AUTOMATION_PH_ENABLE == 1U)
    /* register app parameter table in automation framework*/
    status |= (uint32_t)AUTOMATION_PH_RegisterParamTable(HandlePtr->app_id,
 8006bbc:	4610      	mov	r0, r2
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	f7ff f8aa 	bl	8005d18 <AUTOMATION_PH_RegisterParamTable>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	60fb      	str	r3, [r7, #12]
        (AUTOMATION_PH_PARAM_ENTRY_t*)(void*)HandlePtr->param_table_ptr);
#endif

    /* Function block */
    status |= (uint32_t)AUTOMATION_FB_RegisterFunctionBlock(HandlePtr->acim_freq_ctrl_fb_ptr);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f7ff faba 	bl	800614c <AUTOMATION_FB_RegisterFunctionBlock>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	461a      	mov	r2, r3
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	60fb      	str	r3, [r7, #12]

    if (NULL != HandlePtr->ramp_fb_ptr)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d03c      	beq.n	8006c64 <ACIM_FREQ_CTRL_Automation_Init+0x138>
    {
      /* Connect ramp function block with ACIM_FREQ function block */
      fb_connect_status = (uint32_t)AUTOMATION_FB_AddConnectionEntry(HandlePtr->acim_freq_ctrl_fb_ptr, (uint8_t)ACIM_FREQ_CTRL_FB_OUT_USER_SPEED,
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bf2:	4610      	mov	r0, r2
 8006bf4:	2100      	movs	r1, #0
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	f7ff facb 	bl	8006194 <AUTOMATION_FB_AddConnectionEntry>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	60bb      	str	r3, [r7, #8]
          HandlePtr->ramp_fb_ptr, (uint8_t)AUTOMATION_FB_IN_SIGNAL_ENDREF);
      if ((uint32_t)ACIM_FREQ_CTRL_STATUS_SUCCESS != fb_connect_status)
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d00d      	beq.n	8006c24 <ACIM_FREQ_CTRL_Automation_Init+0xf8>
      {
        AUTOMATION_FB_Connect();
 8006c08:	f7ff fb24 	bl	8006254 <AUTOMATION_FB_Connect>
        fb_connect_status = (uint32_t)AUTOMATION_FB_AddConnectionEntry(HandlePtr->acim_freq_ctrl_fb_ptr, (uint8_t)ACIM_FREQ_CTRL_FB_OUT_USER_SPEED,
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c14:	4610      	mov	r0, r2
 8006c16:	2100      	movs	r1, #0
 8006c18:	461a      	mov	r2, r3
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	f7ff faba 	bl	8006194 <AUTOMATION_FB_AddConnectionEntry>
 8006c20:	4603      	mov	r3, r0
 8006c22:	60bb      	str	r3, [r7, #8]
            HandlePtr->ramp_fb_ptr, (uint8_t)AUTOMATION_FB_IN_SIGNAL_ENDREF);
      }

      fb_connect_status |= (uint32_t)AUTOMATION_FB_AddConnectionEntry(HandlePtr->acim_freq_ctrl_fb_ptr, (uint8_t)ACIM_FREQ_CTRL_FB_OUT_SPEED_SCALE,
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c2c:	4610      	mov	r0, r2
 8006c2e:	2101      	movs	r1, #1
 8006c30:	461a      	mov	r2, r3
 8006c32:	2301      	movs	r3, #1
 8006c34:	f7ff faae 	bl	8006194 <AUTOMATION_FB_AddConnectionEntry>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	60bb      	str	r3, [r7, #8]
          HandlePtr->ramp_fb_ptr, (uint8_t)AUTOMATION_FB_IN_SIGNAL_SCALE);

      fb_connect_status |= (uint32_t)AUTOMATION_FB_AddConnectionEntry(HandlePtr->ramp_fb_ptr, (uint8_t)AUTOMATION_FB_OUT_SIGNAL_REF,
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c4a:	4610      	mov	r0, r2
 8006c4c:	2100      	movs	r1, #0
 8006c4e:	461a      	mov	r2, r3
 8006c50:	2300      	movs	r3, #0
 8006c52:	f7ff fa9f 	bl	8006194 <AUTOMATION_FB_AddConnectionEntry>
 8006c56:	4603      	mov	r3, r0
 8006c58:	461a      	mov	r2, r3
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	60bb      	str	r3, [r7, #8]
          HandlePtr->acim_freq_ctrl_fb_ptr, (uint8_t)ACIM_FREQ_CTRL_FB_IN_SPEED_REF);
      AUTOMATION_FB_Connect();
 8006c60:	f7ff faf8 	bl	8006254 <AUTOMATION_FB_Connect>
    }
  }

  return (ACIM_FREQ_CTRL_STATUS_t)(status | fb_connect_status);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	b2da      	uxtb	r2, r3
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	b2db      	uxtb	r3, r3
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3710      	adds	r7, #16
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <ACIM_FREQ_CTRL_Init>:
  return version;
}

/* Initialise ACIM_FREQ_CTRL app parameters and low level apps*/
ACIM_FREQ_CTRL_STATUS_t ACIM_FREQ_CTRL_Init(ACIM_FREQ_CTRL_t* const HandlePtr)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b084      	sub	sp, #16
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  ACIM_FREQ_CTRL_STATUS_t status = ACIM_FREQ_CTRL_STATUS_SUCCESS;
 8006c80:	2300      	movs	r3, #0
 8006c82:	73fb      	strb	r3, [r7, #15]

  if ((uint8_t) ACIM_FREQ_CTRL_UNINITIALISED == HandlePtr->state)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d12b      	bne.n	8006ce6 <ACIM_FREQ_CTRL_Init+0x6e>
      }
    }
#endif
    /* AUTOMATION app initialisation */
#if (ACIM_FREQ_CTRL_IS_AUTOMATION_AVAILABLE == 1U)
    if (1U == HandlePtr->acim_config_ptr->enable_automation)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	7ddb      	ldrb	r3, [r3, #23]
 8006c94:	f003 0301 	and.w	r3, r3, #1
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d007      	beq.n	8006cae <ACIM_FREQ_CTRL_Init+0x36>
    {
      if ((uint8_t)ACIM_FREQ_CTRL_STATUS_FAILURE == (uint8_t)ACIM_FREQ_CTRL_Automation_Init(HandlePtr))
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f7ff ff44 	bl	8006b2c <ACIM_FREQ_CTRL_Automation_Init>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d101      	bne.n	8006cae <ACIM_FREQ_CTRL_Init+0x36>
      {
        status = ACIM_FREQ_CTRL_STATUS_FAILURE;
 8006caa:	2301      	movs	r3, #1
 8006cac:	73fb      	strb	r3, [r7, #15]
      }
    }
#endif
    ACIM_FREQ_CTRL_lISRInit(HandlePtr);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f7ff feb8 	bl	8006a24 <ACIM_FREQ_CTRL_lISRInit>

    /* PWM SVM Init */
    if ((uint8_t) ACIM_FREQ_CTRL_STATUS_FAILURE == (uint8_t) PWM_SVM_Init(HandlePtr->pwm_svm_ptr))
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f7fc fe83 	bl	80039c4 <PWM_SVM_Init>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d101      	bne.n	8006cc8 <ACIM_FREQ_CTRL_Init+0x50>
    {
      status = ACIM_FREQ_CTRL_STATUS_FAILURE;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	73fb      	strb	r3, [r7, #15]
    }
    if (status != ACIM_FREQ_CTRL_STATUS_FAILURE)
 8006cc8:	7bfb      	ldrb	r3, [r7, #15]
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d007      	beq.n	8006cde <ACIM_FREQ_CTRL_Init+0x66>
    {
      ACIM_FREQ_CTRL_lInitializeVarAfterInit(HandlePtr);
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f7ff fe7c 	bl	80069cc <ACIM_FREQ_CTRL_lInitializeVarAfterInit>
      HandlePtr->state = (uint8_t) ACIM_FREQ_CTRL_INITIALISED;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
 8006cdc:	e003      	b.n	8006ce6 <ACIM_FREQ_CTRL_Init+0x6e>
    }
    else
    {
      ACIM_FREQ_CTRL_UpdateError(HandlePtr, ACIM_FREQ_CTRL_EID_INIT_FAILED);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	2100      	movs	r1, #0
 8006ce2:	f000 f805 	bl	8006cf0 <ACIM_FREQ_CTRL_UpdateError>
    }
  }
  return (status);
 8006ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3710      	adds	r7, #16
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <ACIM_FREQ_CTRL_UpdateError>:
  return (adc_status);
}
#endif
/* Report error */
void ACIM_FREQ_CTRL_UpdateError(ACIM_FREQ_CTRL_t* const HandlePtr, const ACIM_FREQ_CTRL_EID_t error_num)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b082      	sub	sp, #8
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	460b      	mov	r3, r1
 8006cfa:	70fb      	strb	r3, [r7, #3]
  /* Log the operational error */
  HandlePtr->operational_error |= ((uint32_t) 1 << (uint32_t) error_num);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d00:	78fb      	ldrb	r3, [r7, #3]
 8006d02:	2101      	movs	r1, #1
 8006d04:	fa01 f303 	lsl.w	r3, r1, r3
 8006d08:	431a      	orrs	r2, r3
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	655a      	str	r2, [r3, #84]	; 0x54
  /* Set the error status in error table */
  HandlePtr->error_table_ptr[error_num].error_status = (uint8_t) ACIM_FREQ_CTRL_ERROR_SET;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	69da      	ldr	r2, [r3, #28]
 8006d12:	78fb      	ldrb	r3, [r7, #3]
 8006d14:	00db      	lsls	r3, r3, #3
 8006d16:	4413      	add	r3, r2
 8006d18:	2201      	movs	r2, #1
 8006d1a:	715a      	strb	r2, [r3, #5]
  if (HandlePtr->error_table_ptr[error_num].error_handler_ptr_t != NULL)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	69da      	ldr	r2, [r3, #28]
 8006d20:	78fb      	ldrb	r3, [r7, #3]
 8006d22:	00db      	lsls	r3, r3, #3
 8006d24:	4413      	add	r3, r2
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d007      	beq.n	8006d3c <ACIM_FREQ_CTRL_UpdateError+0x4c>
  {
    /* Call the function to take action for timeout */
    (HandlePtr->error_table_ptr[error_num].error_handler_ptr_t)(HandlePtr);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	69da      	ldr	r2, [r3, #28]
 8006d30:	78fb      	ldrb	r3, [r7, #3]
 8006d32:	00db      	lsls	r3, r3, #3
 8006d34:	4413      	add	r3, r2
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	4798      	blx	r3
  }
}
 8006d3c:	3708      	adds	r7, #8
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}
 8006d42:	bf00      	nop

08006d44 <ACIM_FREQ_CTRL_lTaskSchedulerRegisteration>:
#if (ACIM_FREQ_CTRL_IS_AUTOMATION_AVAILABLE == 1U)
void ACIM_FREQ_CTRL_lTaskSchedulerRegisteration(ACIM_FREQ_CTRL_t*const HandlePtr,ACIM_FREQ_CTRL_TASKREGISTER_PTR_t task_function_ptr,
    const ACIM_FREQ_CTRL_EID_t error_num,uint32_t task_time)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b084      	sub	sp, #16
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	60b9      	str	r1, [r7, #8]
 8006d4e:	603b      	str	r3, [r7, #0]
 8006d50:	4613      	mov	r3, r2
 8006d52:	71fb      	strb	r3, [r7, #7]
  if ((uint32_t)ACIM_FREQ_CTRL_STATUS_FAILURE == (uint32_t)AUTOMATION_RegisterTask((AUTOMATION_TASK_FUNCT_PTR_t)task_function_ptr,(ACIM_FREQ_CTRL_t*)HandlePtr,
 8006d54:	68b8      	ldr	r0, [r7, #8]
 8006d56:	68f9      	ldr	r1, [r7, #12]
 8006d58:	683a      	ldr	r2, [r7, #0]
 8006d5a:	f7fe fee5 	bl	8005b28 <AUTOMATION_RegisterTask>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d105      	bne.n	8006d70 <ACIM_FREQ_CTRL_lTaskSchedulerRegisteration+0x2c>
          task_time))
  {
    ACIM_FREQ_CTRL_UpdateError(HandlePtr,error_num);
 8006d64:	79fb      	ldrb	r3, [r7, #7]
 8006d66:	68f8      	ldr	r0, [r7, #12]
 8006d68:	4619      	mov	r1, r3
 8006d6a:	f7ff ffc1 	bl	8006cf0 <ACIM_FREQ_CTRL_UpdateError>
 8006d6e:	e00e      	b.n	8006d8e <ACIM_FREQ_CTRL_lTaskSchedulerRegisteration+0x4a>
  }
  else
  {
    if (error_num == ACIM_FREQ_CTRL_EID_SVP_REG_FAILED)
 8006d70:	79fb      	ldrb	r3, [r7, #7]
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d104      	bne.n	8006d80 <ACIM_FREQ_CTRL_lTaskSchedulerRegisteration+0x3c>
    {
      HandlePtr->registered_task_svp = 1U;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
 8006d7e:	e006      	b.n	8006d8e <ACIM_FREQ_CTRL_lTaskSchedulerRegisteration+0x4a>
    }
    else if (error_num == ACIM_FREQ_CTRL_EID_PCL_REG_FAILED)
 8006d80:	79fb      	ldrb	r3, [r7, #7]
 8006d82:	2b02      	cmp	r3, #2
 8006d84:	d103      	bne.n	8006d8e <ACIM_FREQ_CTRL_lTaskSchedulerRegisteration+0x4a>
    {
      HandlePtr->registered_task_pcl = 1U;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
    }
  }
}
 8006d8e:	3710      	adds	r7, #16
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}

08006d94 <ACIM_FREQ_CTRL_MotorStart>:
#endif
void ACIM_FREQ_CTRL_MotorStart(ACIM_FREQ_CTRL_t* const HandlePtr)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b082      	sub	sp, #8
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  /* Motor State machine should be in STOP state to start the motor.
   * In case of any error, motor start function won't be started
   * until clear all the errors.
   */
  if (HandlePtr->msm_state == ACIM_FREQ_CTRL_MSM_STOP)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d14b      	bne.n	8006e3e <ACIM_FREQ_CTRL_MotorStart+0xaa>
  {
#if (ACIM_FREQ_CTRL_IS_DSM_AVAILABLE == 1U)
    if ((HandlePtr->acim_config_ptr->dsm_task_conf == (uint8_t)ACIM_FREQ_CTRL_TS_DISABLED)||
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	7cdb      	ldrb	r3, [r3, #19]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d004      	beq.n	8006dba <ACIM_FREQ_CTRL_MotorStart+0x26>
        ( HandlePtr->acim_statemachine->current_state == (uint8_t)ACIM_FREQ_CTRL_DSM_OPERATION))
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006db4:	7a1b      	ldrb	r3, [r3, #8]
   * until clear all the errors.
   */
  if (HandlePtr->msm_state == ACIM_FREQ_CTRL_MSM_STOP)
  {
#if (ACIM_FREQ_CTRL_IS_DSM_AVAILABLE == 1U)
    if ((HandlePtr->acim_config_ptr->dsm_task_conf == (uint8_t)ACIM_FREQ_CTRL_TS_DISABLED)||
 8006db6:	2b03      	cmp	r3, #3
 8006db8:	d103      	bne.n	8006dc2 <ACIM_FREQ_CTRL_MotorStart+0x2e>
        ( HandlePtr->acim_statemachine->current_state == (uint8_t)ACIM_FREQ_CTRL_DSM_OPERATION))
    {
      /*Start the motor, if Drive State machine is in Operation state*/
      HandlePtr->msm_state = ACIM_FREQ_CTRL_MSM_INIT_INVERTER;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    }
    if ((HandlePtr->acim_config_ptr->dsm_task_conf != (uint8_t)ACIM_FREQ_CTRL_TS_DISABLED) &&
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	7cdb      	ldrb	r3, [r3, #19]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d008      	beq.n	8006dde <ACIM_FREQ_CTRL_MotorStart+0x4a>
        ( HandlePtr->acim_statemachine->current_state != (uint8_t)ACIM_FREQ_CTRL_DSM_OPERATION))
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dd0:	7a1b      	ldrb	r3, [r3, #8]
        ( HandlePtr->acim_statemachine->current_state == (uint8_t)ACIM_FREQ_CTRL_DSM_OPERATION))
    {
      /*Start the motor, if Drive State machine is in Operation state*/
      HandlePtr->msm_state = ACIM_FREQ_CTRL_MSM_INIT_INVERTER;
    }
    if ((HandlePtr->acim_config_ptr->dsm_task_conf != (uint8_t)ACIM_FREQ_CTRL_TS_DISABLED) &&
 8006dd2:	2b03      	cmp	r3, #3
 8006dd4:	d003      	beq.n	8006dde <ACIM_FREQ_CTRL_MotorStart+0x4a>
        ( HandlePtr->acim_statemachine->current_state != (uint8_t)ACIM_FREQ_CTRL_DSM_OPERATION))
    {
      HandlePtr->cw_state =ACIM_FREQ_CTRL_CW_AUTOMATIC_ON;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2208      	movs	r2, #8
 8006dda:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
#else
    HandlePtr->msm_state = ACIM_FREQ_CTRL_MSM_INIT_INVERTER;
#endif
    /* check the MSM state */
    if (HandlePtr->msm_state == ACIM_FREQ_CTRL_MSM_INIT_INVERTER)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d12a      	bne.n	8006e3e <ACIM_FREQ_CTRL_MotorStart+0xaa>
    {
#if (ACIM_FREQ_CTRL_IS_AUTOMATION_AVAILABLE == 1U)
      /* Register set value process function to automation framework, based on user configuration */
      if ((HandlePtr->acim_config_ptr->svp_task_conf == (uint8_t)ACIM_FREQ_CTRL_TS_AUTOMATION ) &&
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	7c9b      	ldrb	r3, [r3, #18]
 8006dee:	2b04      	cmp	r3, #4
 8006df0:	d10e      	bne.n	8006e10 <ACIM_FREQ_CTRL_MotorStart+0x7c>
          (HandlePtr->registered_task_svp == 0U))
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
    /* check the MSM state */
    if (HandlePtr->msm_state == ACIM_FREQ_CTRL_MSM_INIT_INVERTER)
    {
#if (ACIM_FREQ_CTRL_IS_AUTOMATION_AVAILABLE == 1U)
      /* Register set value process function to automation framework, based on user configuration */
      if ((HandlePtr->acim_config_ptr->svp_task_conf == (uint8_t)ACIM_FREQ_CTRL_TS_AUTOMATION ) &&
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d109      	bne.n	8006e10 <ACIM_FREQ_CTRL_MotorStart+0x7c>
          (HandlePtr->registered_task_svp == 0U))
      {
        ACIM_FREQ_CTRL_lTaskSchedulerRegisteration(HandlePtr,HandlePtr->svp_function_ptr,ACIM_FREQ_CTRL_EID_SVP_REG_FAILED,
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	4611      	mov	r1, r2
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f7ff ff9a 	bl	8006d44 <ACIM_FREQ_CTRL_lTaskSchedulerRegisteration>
            HandlePtr->svp_time);
      }
      /* Register primary control loop function to automation framework, based on user configuration */
      if ((HandlePtr->acim_config_ptr->pcl_task_conf == (uint8_t)ACIM_FREQ_CTRL_TS_AUTOMATION) &&
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	7c5b      	ldrb	r3, [r3, #17]
 8006e16:	2b04      	cmp	r3, #4
 8006e18:	d10e      	bne.n	8006e38 <ACIM_FREQ_CTRL_MotorStart+0xa4>
          (HandlePtr->registered_task_pcl == 0U))
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
      {
        ACIM_FREQ_CTRL_lTaskSchedulerRegisteration(HandlePtr,HandlePtr->svp_function_ptr,ACIM_FREQ_CTRL_EID_SVP_REG_FAILED,
            HandlePtr->svp_time);
      }
      /* Register primary control loop function to automation framework, based on user configuration */
      if ((HandlePtr->acim_config_ptr->pcl_task_conf == (uint8_t)ACIM_FREQ_CTRL_TS_AUTOMATION) &&
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d109      	bne.n	8006e38 <ACIM_FREQ_CTRL_MotorStart+0xa4>
          (HandlePtr->registered_task_pcl == 0U))
      {
        ACIM_FREQ_CTRL_lTaskSchedulerRegisteration(HandlePtr,HandlePtr->pcl_function_ptr,ACIM_FREQ_CTRL_EID_PCL_REG_FAILED,
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	4611      	mov	r1, r2
 8006e32:	2202      	movs	r2, #2
 8006e34:	f7ff ff86 	bl	8006d44 <ACIM_FREQ_CTRL_lTaskSchedulerRegisteration>
            HandlePtr->pcl_time);
      }
#endif
      ACIM_FREQ_CTRL_MSM(HandlePtr);
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f000 fb09 	bl	8007450 <ACIM_FREQ_CTRL_MSM>
    }
  }
}
 8006e3e:	3708      	adds	r7, #8
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <ACIM_FREQ_CTRL_MotorStop>:

void ACIM_FREQ_CTRL_MotorStop(ACIM_FREQ_CTRL_t* const HandlePtr)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
#if (ACIM_FREQ_CTRL_IS_AUTOMATION_AVAILABLE == 1U)
  uint8_t status = (uint8_t)ACIM_FREQ_CTRL_STATUS_SUCCESS;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	73fb      	strb	r3, [r7, #15]
#endif
  /*stop pwm svm*/
  PWM_SVM_Stop(HandlePtr->pwm_svm_ptr);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	4618      	mov	r0, r3
 8006e56:	f7fd f84b 	bl	8003ef0 <PWM_SVM_Stop>
  /*disable inverter*/
  PWM_SVM_InverterDisable(HandlePtr->pwm_svm_ptr);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f7fc fd64 	bl	800392c <PWM_SVM_InverterDisable>

  /*Changing write access for pwm frequency to allowed*/
  HandlePtr->param_table_ptr[ACIM_FREQ_CTRL_PID_PWM_FREQUENCY].write_access = (uint8_t) ACIM_FREQ_CTRL_PH_WA_ALLOWED;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	699b      	ldr	r3, [r3, #24]
 8006e68:	338c      	adds	r3, #140	; 0x8c
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	761a      	strb	r2, [r3, #24]

#if (ACIM_FREQ_CTRL_IS_AUTOMATION_AVAILABLE == 1U)
  /* deregister Primary Control Loop function to automation framework, based on user configuration */
  if ((HandlePtr->acim_config_ptr->pcl_task_conf == (uint8_t)ACIM_FREQ_CTRL_TS_AUTOMATION)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	7c5b      	ldrb	r3, [r3, #17]
 8006e74:	2b04      	cmp	r3, #4
 8006e76:	d117      	bne.n	8006ea8 <ACIM_FREQ_CTRL_MotorStop+0x64>
      &&(HandlePtr->registered_task_pcl == 1U))
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	d112      	bne.n	8006ea8 <ACIM_FREQ_CTRL_MotorStop+0x64>
  {
    status = (uint8_t)AUTOMATION_DeregisterTask((AUTOMATION_TASK_FUNCT_PTR_t)HandlePtr->pcl_function_ptr);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e86:	4618      	mov	r0, r3
 8006e88:	f7fe feb2 	bl	8005bf0 <AUTOMATION_DeregisterTask>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	73fb      	strb	r3, [r7, #15]
    if ((uint8_t)ACIM_FREQ_CTRL_STATUS_FAILURE == status)
 8006e90:	7bfb      	ldrb	r3, [r7, #15]
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	d104      	bne.n	8006ea0 <ACIM_FREQ_CTRL_MotorStop+0x5c>
    {
      ACIM_FREQ_CTRL_UpdateError(HandlePtr, ACIM_FREQ_CTRL_EID_PCL_REG_FAILED);
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	2102      	movs	r1, #2
 8006e9a:	f7ff ff29 	bl	8006cf0 <ACIM_FREQ_CTRL_UpdateError>
 8006e9e:	e003      	b.n	8006ea8 <ACIM_FREQ_CTRL_MotorStop+0x64>
    }
    else
    {
      HandlePtr->registered_task_pcl = 0U;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
    }

  }
  /* deregister Set value process function to automation framework, based on user configuration */
  if ((HandlePtr->acim_config_ptr->svp_task_conf == (uint8_t)ACIM_FREQ_CTRL_TS_AUTOMATION)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	7c9b      	ldrb	r3, [r3, #18]
 8006eae:	2b04      	cmp	r3, #4
 8006eb0:	d117      	bne.n	8006ee2 <ACIM_FREQ_CTRL_MotorStop+0x9e>
      &&(HandlePtr->registered_task_svp == 1U))
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d112      	bne.n	8006ee2 <ACIM_FREQ_CTRL_MotorStop+0x9e>
  {
    status = (uint8_t)AUTOMATION_DeregisterTask((AUTOMATION_TASK_FUNCT_PTR_t)HandlePtr->svp_function_ptr);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f7fe fe95 	bl	8005bf0 <AUTOMATION_DeregisterTask>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	73fb      	strb	r3, [r7, #15]
    if ((uint8_t)ACIM_FREQ_CTRL_STATUS_FAILURE == status)
 8006eca:	7bfb      	ldrb	r3, [r7, #15]
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d104      	bne.n	8006eda <ACIM_FREQ_CTRL_MotorStop+0x96>
    {
      ACIM_FREQ_CTRL_UpdateError(HandlePtr, ACIM_FREQ_CTRL_EID_SVP_REG_FAILED);
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	2101      	movs	r1, #1
 8006ed4:	f7ff ff0c 	bl	8006cf0 <ACIM_FREQ_CTRL_UpdateError>
 8006ed8:	e003      	b.n	8006ee2 <ACIM_FREQ_CTRL_MotorStop+0x9e>
    }
    else
    {
      HandlePtr->registered_task_svp = 0U;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
    }
  }
#endif
  if (((HandlePtr->operational_error & 0x1FU) != 0U))
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ee6:	f003 031f 	and.w	r3, r3, #31
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d007      	beq.n	8006efe <ACIM_FREQ_CTRL_MotorStop+0xba>
  {
    HandlePtr->msm_state = ACIM_FREQ_CTRL_MSM_ERROR;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	220f      	movs	r2, #15
 8006ef2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    /*call the motor state machine, to report the error*/
    ACIM_FREQ_CTRL_MSM(HandlePtr);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 faaa 	bl	8007450 <ACIM_FREQ_CTRL_MSM>
 8006efc:	e003      	b.n	8006f06 <ACIM_FREQ_CTRL_MotorStop+0xc2>
  }
  else
  {
    /* Change motor control state machine to stop */
    HandlePtr->msm_state = ACIM_FREQ_CTRL_MSM_STOP;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  }
}
 8006f06:	3710      	adds	r7, #16
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <ACIM_FREQ_CTRL_SetParameter>:

ACIM_FREQ_CTRL_STATUS_t ACIM_FREQ_CTRL_SetParameter(ACIM_FREQ_CTRL_t* const HandlePtr, int32_t param_value,
                                                    ACIM_FREQ_CTRL_PID_t param_id)
{
 8006f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f0e:	b087      	sub	sp, #28
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	60f8      	str	r0, [r7, #12]
 8006f14:	60b9      	str	r1, [r7, #8]
 8006f16:	4613      	mov	r3, r2
 8006f18:	71fb      	strb	r3, [r7, #7]
  ACIM_FREQ_CTRL_PT_ENTRY_t *param_ptr = &HandlePtr->param_table_ptr[param_id];
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	6999      	ldr	r1, [r3, #24]
 8006f1e:	79fa      	ldrb	r2, [r7, #7]
 8006f20:	4613      	mov	r3, r2
 8006f22:	00db      	lsls	r3, r3, #3
 8006f24:	1a9b      	subs	r3, r3, r2
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	440b      	add	r3, r1
 8006f2a:	613b      	str	r3, [r7, #16]
  ACIM_FREQ_CTRL_STATUS_t status = ACIM_FREQ_CTRL_STATUS_SUCCESS;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	75fb      	strb	r3, [r7, #23]
  if (param_ptr->write_access == (uint8_t) ACIM_FREQ_CTRL_PH_WA_ALLOWED)
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	7e1b      	ldrb	r3, [r3, #24]
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d12d      	bne.n	8006f94 <ACIM_FREQ_CTRL_SetParameter+0x88>
  {
    if ((param_value >= param_ptr->minval) && (param_value <= param_ptr->maxval))
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	685a      	ldr	r2, [r3, #4]
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	dc25      	bgt.n	8006f8e <ACIM_FREQ_CTRL_SetParameter+0x82>
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	689a      	ldr	r2, [r3, #8]
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	db20      	blt.n	8006f8e <ACIM_FREQ_CTRL_SetParameter+0x82>
    {
      *param_ptr->param_value = (int32_t)(
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	681c      	ldr	r4, [r3, #0]
          ((int64_t) param_value * (int64_t) param_ptr->inv_scale) / (int64_t) ACIM_FREQ_CTRL_POWER215);
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	4618      	mov	r0, r3
 8006f54:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	691b      	ldr	r3, [r3, #16]
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	f04f 0300 	mov.w	r3, #0
 8006f62:	fb02 f601 	mul.w	r6, r2, r1
 8006f66:	fb00 f503 	mul.w	r5, r0, r3
 8006f6a:	4435      	add	r5, r6
 8006f6c:	fba0 2302 	umull	r2, r3, r0, r2
 8006f70:	18e9      	adds	r1, r5, r3
 8006f72:	460b      	mov	r3, r1
 8006f74:	4610      	mov	r0, r2
 8006f76:	4619      	mov	r1, r3
 8006f78:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006f7c:	f04f 0300 	mov.w	r3, #0
 8006f80:	f002 fb80 	bl	8009684 <__aeabi_ldivmod>
 8006f84:	4602      	mov	r2, r0
 8006f86:	460b      	mov	r3, r1
  ACIM_FREQ_CTRL_STATUS_t status = ACIM_FREQ_CTRL_STATUS_SUCCESS;
  if (param_ptr->write_access == (uint8_t) ACIM_FREQ_CTRL_PH_WA_ALLOWED)
  {
    if ((param_value >= param_ptr->minval) && (param_value <= param_ptr->maxval))
    {
      *param_ptr->param_value = (int32_t)(
 8006f88:	4613      	mov	r3, r2
 8006f8a:	6023      	str	r3, [r4, #0]
 8006f8c:	e004      	b.n	8006f98 <ACIM_FREQ_CTRL_SetParameter+0x8c>
          ((int64_t) param_value * (int64_t) param_ptr->inv_scale) / (int64_t) ACIM_FREQ_CTRL_POWER215);
    }
    else
    {
      status = ACIM_FREQ_CTRL_STATUS_INVALID_PARAM;
 8006f8e:	2302      	movs	r3, #2
 8006f90:	75fb      	strb	r3, [r7, #23]
 8006f92:	e001      	b.n	8006f98 <ACIM_FREQ_CTRL_SetParameter+0x8c>
    }
  }
  else
  {
    status = ACIM_FREQ_CTRL_STATUS_PERMISSION_DENIED;
 8006f94:	2304      	movs	r3, #4
 8006f96:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006f98:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	371c      	adds	r7, #28
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fa2:	bf00      	nop

08006fa4 <ACIM_FREQ_CTRL_SetSpeed>:

/* This API update the end speed of the motor */
ACIM_FREQ_CTRL_STATUS_t ACIM_FREQ_CTRL_SetSpeed(ACIM_FREQ_CTRL_t* const HandlePtr, int32_t speed)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]
  ACIM_FREQ_CTRL_STATUS_t status;
  /*set the speed and return the status*/
  status = ACIM_FREQ_CTRL_SetParameter(HandlePtr, speed, ACIM_FREQ_CTRL_PID_SPEED_REF);
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	6839      	ldr	r1, [r7, #0]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f7ff ffaa 	bl	8006f0c <ACIM_FREQ_CTRL_SetParameter>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	73fb      	strb	r3, [r7, #15]
  /*set the motor direction based on the speed*/
  if (HandlePtr->user_speed_set < 0)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	da04      	bge.n	8006fce <ACIM_FREQ_CTRL_SetSpeed+0x2a>
  {
    HandlePtr->motor_direction = (int8_t) ACIM_FREQ_CTRL_ANTICLOCKWISE_DIR;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	22ff      	movs	r2, #255	; 0xff
 8006fc8:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
 8006fcc:	e003      	b.n	8006fd6 <ACIM_FREQ_CTRL_SetSpeed+0x32>
  }
  else
  {
    HandlePtr->motor_direction = (int8_t) ACIM_FREQ_CTRL_CLOCKWISE_DIR;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
  }
  return status;
 8006fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3710      	adds	r7, #16
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <ACIM_FREQ_CTRL_SetMotorDirection>:
}

/* This API direction of the motor */
ACIM_FREQ_CTRL_STATUS_t ACIM_FREQ_CTRL_SetMotorDirection(ACIM_FREQ_CTRL_t* const HandlePtr,
                                                         ACIM_FREQ_CTRL_MD_t direction)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b085      	sub	sp, #20
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	460b      	mov	r3, r1
 8006fea:	70fb      	strb	r3, [r7, #3]
  ACIM_FREQ_CTRL_STATUS_t status = ACIM_FREQ_CTRL_STATUS_SUCCESS;
 8006fec:	2300      	movs	r3, #0
 8006fee:	73fb      	strb	r3, [r7, #15]
  if (HandlePtr->param_table_ptr[ACIM_FREQ_CTRL_PID_MOTOR_DIR].write_access == (uint8_t) ACIM_FREQ_CTRL_PH_WA_ALLOWED)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	699b      	ldr	r3, [r3, #24]
 8006ff4:	3370      	adds	r3, #112	; 0x70
 8006ff6:	7e1b      	ldrb	r3, [r3, #24]
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d131      	bne.n	8007060 <ACIM_FREQ_CTRL_SetMotorDirection+0x80>
  {
    if ((direction == ACIM_FREQ_CTRL_CLOCKWISE_DIR) || (direction == ACIM_FREQ_CTRL_ANTICLOCKWISE_DIR))
 8006ffc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007000:	2b01      	cmp	r3, #1
 8007002:	d004      	beq.n	800700e <ACIM_FREQ_CTRL_SetMotorDirection+0x2e>
 8007004:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800700c:	d125      	bne.n	800705a <ACIM_FREQ_CTRL_SetMotorDirection+0x7a>
    {
      HandlePtr->motor_direction = (int8_t) direction;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	78fa      	ldrb	r2, [r7, #3]
 8007012:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

      if ((HandlePtr->user_speed_set < 0) && (HandlePtr->motor_direction == (int8_t) ACIM_FREQ_CTRL_CLOCKWISE_DIR))
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800701a:	2b00      	cmp	r3, #0
 800701c:	da0b      	bge.n	8007036 <ACIM_FREQ_CTRL_SetMotorDirection+0x56>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8007024:	b25b      	sxtb	r3, r3
 8007026:	2b01      	cmp	r3, #1
 8007028:	d105      	bne.n	8007036 <ACIM_FREQ_CTRL_SetMotorDirection+0x56>
      {
        HandlePtr->user_speed_set = (int32_t)(-1 * HandlePtr->user_speed_set);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800702e:	425a      	negs	r2, r3
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	669a      	str	r2, [r3, #104]	; 0x68
 8007034:	e00f      	b.n	8007056 <ACIM_FREQ_CTRL_SetMotorDirection+0x76>
      }
      else if ((HandlePtr->user_speed_set > 0)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800703a:	2b00      	cmp	r3, #0
 800703c:	dd0b      	ble.n	8007056 <ACIM_FREQ_CTRL_SetMotorDirection+0x76>
          && (HandlePtr->motor_direction == (int8_t) ACIM_FREQ_CTRL_ANTICLOCKWISE_DIR))
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8007044:	b25b      	sxtb	r3, r3
 8007046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800704a:	d104      	bne.n	8007056 <ACIM_FREQ_CTRL_SetMotorDirection+0x76>
      {
        HandlePtr->user_speed_set = (int32_t)(-1 * HandlePtr->user_speed_set);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007050:	425a      	negs	r2, r3
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	669a      	str	r2, [r3, #104]	; 0x68
  {
    if ((direction == ACIM_FREQ_CTRL_CLOCKWISE_DIR) || (direction == ACIM_FREQ_CTRL_ANTICLOCKWISE_DIR))
    {
      HandlePtr->motor_direction = (int8_t) direction;

      if ((HandlePtr->user_speed_set < 0) && (HandlePtr->motor_direction == (int8_t) ACIM_FREQ_CTRL_CLOCKWISE_DIR))
 8007056:	bf00      	nop
 8007058:	e004      	b.n	8007064 <ACIM_FREQ_CTRL_SetMotorDirection+0x84>
      {
      }
    }
    else
    {
      status = ACIM_FREQ_CTRL_STATUS_INVALID_PARAM;
 800705a:	2302      	movs	r3, #2
 800705c:	73fb      	strb	r3, [r7, #15]
 800705e:	e001      	b.n	8007064 <ACIM_FREQ_CTRL_SetMotorDirection+0x84>
    }
  }
  else
  {
    status = ACIM_FREQ_CTRL_STATUS_PERMISSION_DENIED;
 8007060:	2304      	movs	r3, #4
 8007062:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8007064:	7bfb      	ldrb	r3, [r7, #15]
}
 8007066:	4618      	mov	r0, r3
 8007068:	3714      	adds	r7, #20
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr
 8007072:	bf00      	nop

08007074 <ACIM_FREQ_CTRL_SetControlWordState>:
  return (int32_t)(HandlePtr->motor_direction);
}

/* This API set the control word state */
ACIM_FREQ_CTRL_STATUS_t ACIM_FREQ_CTRL_SetControlWordState(ACIM_FREQ_CTRL_t* const HandlePtr, uint32_t control_word)
{
 8007074:	b480      	push	{r7}
 8007076:	b085      	sub	sp, #20
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	6039      	str	r1, [r7, #0]
  ACIM_FREQ_CTRL_STATUS_t status = ACIM_FREQ_CTRL_STATUS_SUCCESS;
 800707e:	2300      	movs	r3, #0
 8007080:	73fb      	strb	r3, [r7, #15]
  ACIM_FREQ_CTRL_PT_ENTRY_t* param_ptr = &HandlePtr->param_table_ptr[ACIM_FREQ_CTRL_PID_CW_STATE];
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	699b      	ldr	r3, [r3, #24]
 8007086:	60bb      	str	r3, [r7, #8]
  if (param_ptr->write_access == (uint8_t) ACIM_FREQ_CTRL_PH_WA_ALLOWED)
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	7e1b      	ldrb	r3, [r3, #24]
 800708c:	2b01      	cmp	r3, #1
 800708e:	d114      	bne.n	80070ba <ACIM_FREQ_CTRL_SetControlWordState+0x46>
  {
    if ((control_word >= (uint32_t) param_ptr->minval) && (control_word <= (uint32_t) param_ptr->maxval))
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	461a      	mov	r2, r3
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	429a      	cmp	r2, r3
 800709a:	d80b      	bhi.n	80070b4 <ACIM_FREQ_CTRL_SetControlWordState+0x40>
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	461a      	mov	r2, r3
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d305      	bcc.n	80070b4 <ACIM_FREQ_CTRL_SetControlWordState+0x40>
    {
      HandlePtr->cw_state = (ACIM_FREQ_CTRL_CW_t) control_word;
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	b2da      	uxtb	r2, r3
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 80070b2:	e004      	b.n	80070be <ACIM_FREQ_CTRL_SetControlWordState+0x4a>
    }
    else
    {
      status = ACIM_FREQ_CTRL_STATUS_INVALID_PARAM;
 80070b4:	2302      	movs	r3, #2
 80070b6:	73fb      	strb	r3, [r7, #15]
 80070b8:	e001      	b.n	80070be <ACIM_FREQ_CTRL_SetControlWordState+0x4a>
    }

  }
  else
  {
    status = ACIM_FREQ_CTRL_STATUS_PERMISSION_DENIED;
 80070ba:	2304      	movs	r3, #4
 80070bc:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80070be:	7bfb      	ldrb	r3, [r7, #15]
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3714      	adds	r7, #20
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr

080070cc <ACIM_FREQ_CTRL_lTaskSchedulerTimeUpdate>:
  return (uint32_t)(
      ((uint64_t) HandlePtr->current_limit_ptr->current_limit
          * HandlePtr->param_table_ptr[ACIM_FREQ_CTRL_PID_CURRENT_LIMIT].scale) >> ACIM_FREQ_CTRL_Q15);
}
void ACIM_FREQ_CTRL_lTaskSchedulerTimeUpdate(ACIM_FREQ_CTRL_t* const HandlePtr, uint32_t frequency_value)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b083      	sub	sp, #12
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
  /*Update pcl and msm time */
  if ((HandlePtr->acim_config_ptr->pcl_task_conf == (uint8_t) ACIM_FREQ_CTRL_TS_DISABLED)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	7c5b      	ldrb	r3, [r3, #17]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d009      	beq.n	80070f4 <ACIM_FREQ_CTRL_lTaskSchedulerTimeUpdate+0x28>
      || (HandlePtr->acim_config_ptr->pcl_task_conf == (uint8_t) ACIM_FREQ_CTRL_TS_SW_DIV)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	7c5b      	ldrb	r3, [r3, #17]
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d004      	beq.n	80070f4 <ACIM_FREQ_CTRL_lTaskSchedulerTimeUpdate+0x28>
      || (HandlePtr->acim_config_ptr->pcl_task_conf == (uint8_t) ACIM_FREQ_CTRL_TS_PCL_ISR))
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	7c5b      	ldrb	r3, [r3, #17]
 80070f0:	2b02      	cmp	r3, #2
 80070f2:	d11d      	bne.n	8007130 <ACIM_FREQ_CTRL_lTaskSchedulerTimeUpdate+0x64>
  {
    /*Update pcl time */
    HandlePtr->pcl_time = ((1000000U * HandlePtr->acim_config_ptr->pcl_divider) / frequency_value);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	7d5b      	ldrb	r3, [r3, #21]
 80070fa:	461a      	mov	r2, r3
 80070fc:	4b1a      	ldr	r3, [pc, #104]	; (8007168 <ACIM_FREQ_CTRL_lTaskSchedulerTimeUpdate+0x9c>)
 80070fe:	fb03 f202 	mul.w	r2, r3, r2
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	fbb2 f2f3 	udiv	r2, r2, r3
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /*Update msm time */
    HandlePtr->msm_time = HandlePtr->pcl_time;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    /*Update svp time */
    if (HandlePtr->acim_config_ptr->svp_task_conf == (uint8_t) ACIM_FREQ_CTRL_TS_PCL_TASK)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	7c9b      	ldrb	r3, [r3, #18]
 8007120:	2b05      	cmp	r3, #5
 8007122:	d105      	bne.n	8007130 <ACIM_FREQ_CTRL_lTaskSchedulerTimeUpdate+0x64>
    {
      HandlePtr->svp_time = HandlePtr->pcl_time;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }
  }

  /*Update svp time if it dont use PCL_ISR time*/
  if ((HandlePtr->acim_config_ptr->svp_task_conf == (uint8_t) ACIM_FREQ_CTRL_TS_DISABLED)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	7c9b      	ldrb	r3, [r3, #18]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d004      	beq.n	8007144 <ACIM_FREQ_CTRL_lTaskSchedulerTimeUpdate+0x78>
      || (HandlePtr->acim_config_ptr->svp_task_conf == (uint8_t) ACIM_FREQ_CTRL_TS_SW_DIV))
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	7c9b      	ldrb	r3, [r3, #18]
 8007140:	2b01      	cmp	r3, #1
 8007142:	d10c      	bne.n	800715e <ACIM_FREQ_CTRL_lTaskSchedulerTimeUpdate+0x92>
  {
    /*Update svp time */
    HandlePtr->svp_time = ((1000000U * HandlePtr->acim_config_ptr->svp_divider) / frequency_value);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	7d9b      	ldrb	r3, [r3, #22]
 800714a:	461a      	mov	r2, r3
 800714c:	4b06      	ldr	r3, [pc, #24]	; (8007168 <ACIM_FREQ_CTRL_lTaskSchedulerTimeUpdate+0x9c>)
 800714e:	fb03 f202 	mul.w	r2, r3, r2
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	fbb2 f2f3 	udiv	r2, r2, r3
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
}
 800715e:	370c      	adds	r7, #12
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr
 8007168:	000f4240 	.word	0x000f4240

0800716c <ACIM_FREQ_CTRL_SetPWMFrequency>:
/* This API set the PWM frequency and update the related parameters(angle_scale and bootstrap_count). */
ACIM_FREQ_CTRL_STATUS_t ACIM_FREQ_CTRL_SetPWMFrequency(ACIM_FREQ_CTRL_t* const HandlePtr, uint32_t frequency_value)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b084      	sub	sp, #16
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
  ACIM_FREQ_CTRL_PT_ENTRY_t* param_ptr = &HandlePtr->param_table_ptr[ACIM_FREQ_CTRL_PID_PWM_FREQUENCY];
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	699b      	ldr	r3, [r3, #24]
 800717a:	338c      	adds	r3, #140	; 0x8c
 800717c:	60bb      	str	r3, [r7, #8]
  uint32_t status = (uint32_t) ACIM_FREQ_CTRL_STATUS_SUCCESS;
 800717e:	2300      	movs	r3, #0
 8007180:	60fb      	str	r3, [r7, #12]
  if (param_ptr->write_access == (uint8_t) ACIM_FREQ_CTRL_PH_WA_ALLOWED)
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	7e1b      	ldrb	r3, [r3, #24]
 8007186:	2b01      	cmp	r3, #1
 8007188:	d151      	bne.n	800722e <ACIM_FREQ_CTRL_SetPWMFrequency+0xc2>
  {
    if (HandlePtr->msm_state == ACIM_FREQ_CTRL_MSM_STOP)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007190:	2b00      	cmp	r3, #0
 8007192:	d149      	bne.n	8007228 <ACIM_FREQ_CTRL_SetPWMFrequency+0xbc>
    {
      if ((frequency_value >= (uint32_t) param_ptr->minval) && (frequency_value <= (uint32_t) param_ptr->maxval))
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	461a      	mov	r2, r3
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	429a      	cmp	r2, r3
 800719e:	d840      	bhi.n	8007222 <ACIM_FREQ_CTRL_SetPWMFrequency+0xb6>
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	461a      	mov	r2, r3
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d33a      	bcc.n	8007222 <ACIM_FREQ_CTRL_SetPWMFrequency+0xb6>
      {
        /* Update the pwm frequency */
        HandlePtr->pwm_frequency = frequency_value;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	683a      	ldr	r2, [r7, #0]
 80071b0:	651a      	str	r2, [r3, #80]	; 0x50
        status = (uint32_t) PWM_SVM_SetPWMFrequency(HandlePtr->pwm_svm_ptr, frequency_value);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	4618      	mov	r0, r3
 80071b8:	6839      	ldr	r1, [r7, #0]
 80071ba:	f7fc ff0f 	bl	8003fdc <PWM_SVM_SetPWMFrequency>
 80071be:	4603      	mov	r3, r0
 80071c0:	60fb      	str	r3, [r7, #12]
        if (frequency_value != 0U)
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d01c      	beq.n	8007202 <ACIM_FREQ_CTRL_SetPWMFrequency+0x96>
        {
          /* Update angle scale */
          HandlePtr->angle_scale = ((((HandlePtr->acim_config_ptr->nominal_speed
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	681b      	ldr	r3, [r3, #0]
              * HandlePtr->acim_config_ptr->fcl_divider * HandlePtr->acim_config_ptr->pole_pair) <<
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	6812      	ldr	r2, [r2, #0]
 80071d2:	7d12      	ldrb	r2, [r2, #20]
 80071d4:	fb02 f303 	mul.w	r3, r2, r3
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	6812      	ldr	r2, [r2, #0]
 80071dc:	7c12      	ldrb	r2, [r2, #16]
 80071de:	fb02 f303 	mul.w	r3, r2, r3
 80071e2:	0299      	lsls	r1, r3, #10
          ACIM_FREQ_CTRL_VFSCALE) / (frequency_value * 60U)) << 8U);
 80071e4:	683a      	ldr	r2, [r7, #0]
 80071e6:	4613      	mov	r3, r2
 80071e8:	011b      	lsls	r3, r3, #4
 80071ea:	1a9b      	subs	r3, r3, r2
 80071ec:	009b      	lsls	r3, r3, #2
 80071ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80071f2:	021a      	lsls	r2, r3, #8
        HandlePtr->pwm_frequency = frequency_value;
        status = (uint32_t) PWM_SVM_SetPWMFrequency(HandlePtr->pwm_svm_ptr, frequency_value);
        if (frequency_value != 0U)
        {
          /* Update angle scale */
          HandlePtr->angle_scale = ((((HandlePtr->acim_config_ptr->nominal_speed
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
              * HandlePtr->acim_config_ptr->fcl_divider * HandlePtr->acim_config_ptr->pole_pair) <<
          ACIM_FREQ_CTRL_VFSCALE) / (frequency_value * 60U)) << 8U);

          ACIM_FREQ_CTRL_lTaskSchedulerTimeUpdate(HandlePtr, frequency_value);
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	6839      	ldr	r1, [r7, #0]
 80071fe:	f7ff ff65 	bl	80070cc <ACIM_FREQ_CTRL_lTaskSchedulerTimeUpdate>

        }
        /* Update bootstrap count*/
        HandlePtr->bootstrap_count = (uint16_t)(
            ((uint32_t) HandlePtr->acim_config_ptr->bootstrap_time * frequency_value) / 1000U);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	899b      	ldrh	r3, [r3, #12]
 8007208:	461a      	mov	r2, r3
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	fb03 f302 	mul.w	r3, r3, r2
 8007210:	4a0b      	ldr	r2, [pc, #44]	; (8007240 <ACIM_FREQ_CTRL_SetPWMFrequency+0xd4>)
 8007212:	fba2 2303 	umull	r2, r3, r2, r3
 8007216:	099b      	lsrs	r3, r3, #6

          ACIM_FREQ_CTRL_lTaskSchedulerTimeUpdate(HandlePtr, frequency_value);

        }
        /* Update bootstrap count*/
        HandlePtr->bootstrap_count = (uint16_t)(
 8007218:	b29a      	uxth	r2, r3
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 8007220:	e007      	b.n	8007232 <ACIM_FREQ_CTRL_SetPWMFrequency+0xc6>
            ((uint32_t) HandlePtr->acim_config_ptr->bootstrap_time * frequency_value) / 1000U);

      }
      else
      {
        status = (uint32_t) ACIM_FREQ_CTRL_STATUS_INVALID_PARAM;
 8007222:	2302      	movs	r3, #2
 8007224:	60fb      	str	r3, [r7, #12]
 8007226:	e004      	b.n	8007232 <ACIM_FREQ_CTRL_SetPWMFrequency+0xc6>
      }
    }
    else
    {
      status = (uint32_t) ACIM_FREQ_CTRL_STATUS_OPERATION_NOT_ALLOWED;
 8007228:	2303      	movs	r3, #3
 800722a:	60fb      	str	r3, [r7, #12]
 800722c:	e001      	b.n	8007232 <ACIM_FREQ_CTRL_SetPWMFrequency+0xc6>
    }
  }
  else
  {
    status = (uint32_t) ACIM_FREQ_CTRL_STATUS_PERMISSION_DENIED;
 800722e:	2304      	movs	r3, #4
 8007230:	60fb      	str	r3, [r7, #12]
  }
  return (ACIM_FREQ_CTRL_STATUS_t) status;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	b2db      	uxtb	r3, r3
}
 8007236:	4618      	mov	r0, r3
 8007238:	3710      	adds	r7, #16
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
 800723e:	bf00      	nop
 8007240:	10624dd3 	.word	0x10624dd3

08007244 <ACIM_FREQ_CTRL_SetAngleoffset>:
{
  return (uint32_t)(PWM_SVM_GetPWMFrequency(HandlePtr->pwm_svm_ptr));
}

ACIM_FREQ_CTRL_STATUS_t ACIM_FREQ_CTRL_SetAngleoffset(ACIM_FREQ_CTRL_t* const HandlePtr, uint32_t angle_value)
{
 8007244:	b480      	push	{r7}
 8007246:	b085      	sub	sp, #20
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
  ACIM_FREQ_CTRL_STATUS_t status = ACIM_FREQ_CTRL_STATUS_SUCCESS;
 800724e:	2300      	movs	r3, #0
 8007250:	73fb      	strb	r3, [r7, #15]
  ACIM_FREQ_CTRL_PT_ENTRY_t* param_ptr = &HandlePtr->param_table_ptr[ACIM_FREQ_CTRL_PID_ANGLE_OFFSET];
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	699b      	ldr	r3, [r3, #24]
 8007256:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 800725a:	60bb      	str	r3, [r7, #8]
  if (param_ptr->write_access == (uint8_t) ACIM_FREQ_CTRL_PH_WA_ALLOWED)
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	7e1b      	ldrb	r3, [r3, #24]
 8007260:	2b01      	cmp	r3, #1
 8007262:	d116      	bne.n	8007292 <ACIM_FREQ_CTRL_SetAngleoffset+0x4e>
  {
    if ((angle_value >= (uint32_t) param_ptr->minval) && (angle_value <= (uint32_t) param_ptr->maxval))
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	461a      	mov	r2, r3
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	429a      	cmp	r2, r3
 800726e:	d80d      	bhi.n	800728c <ACIM_FREQ_CTRL_SetAngleoffset+0x48>
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	461a      	mov	r2, r3
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	429a      	cmp	r2, r3
 800727a:	d307      	bcc.n	800728c <ACIM_FREQ_CTRL_SetAngleoffset+0x48>
    {
      HandlePtr->angle_offset = (angle_value * param_ptr->inv_scale);
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	691b      	ldr	r3, [r3, #16]
 8007280:	683a      	ldr	r2, [r7, #0]
 8007282:	fb02 f203 	mul.w	r2, r2, r3
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	659a      	str	r2, [r3, #88]	; 0x58
 800728a:	e004      	b.n	8007296 <ACIM_FREQ_CTRL_SetAngleoffset+0x52>
    }
    else
    {
      status = ACIM_FREQ_CTRL_STATUS_INVALID_PARAM;
 800728c:	2302      	movs	r3, #2
 800728e:	73fb      	strb	r3, [r7, #15]
 8007290:	e001      	b.n	8007296 <ACIM_FREQ_CTRL_SetAngleoffset+0x52>
    }
  }
  else
  {
    status = ACIM_FREQ_CTRL_STATUS_PERMISSION_DENIED;
 8007292:	2304      	movs	r3, #4
 8007294:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8007296:	7bfb      	ldrb	r3, [r7, #15]
}
 8007298:	4618      	mov	r0, r3
 800729a:	3714      	adds	r7, #20
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr

080072a4 <ACIM_FREQ_CTRL_Amplitude_Calculation>:
  HandlePtr->current_limit_ptr->input_ptr = ref_address;
}


void ACIM_FREQ_CTRL_Amplitude_Calculation(ACIM_FREQ_CTRL_t* const HandlePtr)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b087      	sub	sp, #28
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  int32_t temp_speed_ref;
  uint32_t temp_speed_value;
  ACIM_FREQ_CTRL_VF_t * const module_ptr = HandlePtr->vf_control_ptr;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	613b      	str	r3, [r7, #16]

  /*Amplitude Calculation*/
  temp_speed_ref = module_ptr->input;
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	617b      	str	r3, [r7, #20]

  if (temp_speed_ref < 0)
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	da02      	bge.n	80072c4 <ACIM_FREQ_CTRL_Amplitude_Calculation+0x20>
  {
    temp_speed_ref = -1 * temp_speed_ref;
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	425b      	negs	r3, r3
 80072c2:	617b      	str	r3, [r7, #20]
  }
  temp_speed_value = (uint32_t) temp_speed_ref;
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	60fb      	str	r3, [r7, #12]

  module_ptr->output_amplitude = (uint32_t)(
      ((temp_speed_value * (module_ptr->vf_constant)) >> ACIM_FREQ_CTRL_VFSCALE) + (module_ptr->vf_offset));
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	68fa      	ldr	r2, [r7, #12]
 80072ce:	fb02 f303 	mul.w	r3, r2, r3
 80072d2:	0a9a      	lsrs	r2, r3, #10
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	685b      	ldr	r3, [r3, #4]
  {
    temp_speed_ref = -1 * temp_speed_ref;
  }
  temp_speed_value = (uint32_t) temp_speed_ref;

  module_ptr->output_amplitude = (uint32_t)(
 80072d8:	441a      	add	r2, r3
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	611a      	str	r2, [r3, #16]
      ((temp_speed_value * (module_ptr->vf_constant)) >> ACIM_FREQ_CTRL_VFSCALE) + (module_ptr->vf_offset));

  if (module_ptr->output_amplitude > HandlePtr->voltage_limit)
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	691a      	ldr	r2, [r3, #16]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d903      	bls.n	80072f2 <ACIM_FREQ_CTRL_Amplitude_Calculation+0x4e>
  {
    module_ptr->output_amplitude = HandlePtr->voltage_limit;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	611a      	str	r2, [r3, #16]
  }
}
 80072f2:	371c      	adds	r7, #28
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr

080072fc <ACIM_FREQ_CTRL_AngleRamp>:
void ACIM_FREQ_CTRL_AngleRamp(ACIM_FREQ_CTRL_t* const HandlePtr)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b085      	sub	sp, #20
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  uint32_t temp_input;
  temp_input = (uint32_t) HandlePtr->vf_control_ptr->input;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	689b      	ldr	r3, [r3, #8]
 800730a:	60fb      	str	r3, [r7, #12]
  temp_input = (HandlePtr->angle_scale * temp_input) >> 8U;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007312:	68fa      	ldr	r2, [r7, #12]
 8007314:	fb02 f303 	mul.w	r3, r2, r3
 8007318:	0a1b      	lsrs	r3, r3, #8
 800731a:	60fb      	str	r3, [r7, #12]
  /*Angle Calculation*/
  HandlePtr->vf_control_ptr->output_angle += (int32_t) temp_input;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	6892      	ldr	r2, [r2, #8]
 8007324:	68d1      	ldr	r1, [r2, #12]
 8007326:	68fa      	ldr	r2, [r7, #12]
 8007328:	440a      	add	r2, r1
 800732a:	60da      	str	r2, [r3, #12]
}
 800732c:	3714      	adds	r7, #20
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr
 8007336:	bf00      	nop

08007338 <ACIM_FREQ_CTRL_BootStrapConfiguration>:
    }
  }
}

void ACIM_FREQ_CTRL_BootStrapConfiguration(ACIM_FREQ_CTRL_t* const HandlePtr)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b084      	sub	sp, #16
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  volatile uint8_t phase_count;
  PWM_SVM_t * const module_ptr = HandlePtr->pwm_svm_ptr;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	60fb      	str	r3, [r7, #12]

  /*BootStrapping*/
  for (phase_count = (uint8_t) 0; phase_count < (uint8_t) 3; phase_count++)
 8007346:	2300      	movs	r3, #0
 8007348:	72fb      	strb	r3, [r7, #11]
 800734a:	e01e      	b.n	800738a <ACIM_FREQ_CTRL_BootStrapConfiguration+0x52>
  {
    /* Update channel 1 compare value (CR1) of slice */
    XMC_CCU8_SLICE_SetTimerCompareMatch(module_ptr->phase_ptr[phase_count]->slice_ptr,
 800734c:	7afb      	ldrb	r3, [r7, #11]
 800734e:	b2db      	uxtb	r3, r3
 8007350:	461a      	mov	r2, r3
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	3202      	adds	r2, #2
 8007356:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4618      	mov	r0, r3
 800735e:	2100      	movs	r1, #0
 8007360:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007364:	f7fa fa26 	bl	80017b4 <XMC_CCU8_SLICE_SetTimerCompareMatch>
        (XMC_CCU8_SLICE_COMPARE_CHANNEL_t) XMC_CCU8_SLICE_COMPARE_CHANNEL_1, (uint16_t) 0xFFFFU);
    /*Disable PWM Asymmetrical, if this is enabled*/
    XMC_CCU8_SLICE_SetOutPath(HandlePtr->pwm_svm_ptr->phase_ptr[phase_count]->slice_ptr, 0x1E0014U);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	7afa      	ldrb	r2, [r7, #11]
 800736e:	b2d2      	uxtb	r2, r2
 8007370:	3202      	adds	r2, #2
 8007372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4618      	mov	r0, r3
 800737a:	490c      	ldr	r1, [pc, #48]	; (80073ac <ACIM_FREQ_CTRL_BootStrapConfiguration+0x74>)
 800737c:	f7fa f8e8 	bl	8001550 <XMC_CCU8_SLICE_SetOutPath>
{
  volatile uint8_t phase_count;
  PWM_SVM_t * const module_ptr = HandlePtr->pwm_svm_ptr;

  /*BootStrapping*/
  for (phase_count = (uint8_t) 0; phase_count < (uint8_t) 3; phase_count++)
 8007380:	7afb      	ldrb	r3, [r7, #11]
 8007382:	b2db      	uxtb	r3, r3
 8007384:	3301      	adds	r3, #1
 8007386:	b2db      	uxtb	r3, r3
 8007388:	72fb      	strb	r3, [r7, #11]
 800738a:	7afb      	ldrb	r3, [r7, #11]
 800738c:	b2db      	uxtb	r3, r3
 800738e:	2b02      	cmp	r3, #2
 8007390:	d9dc      	bls.n	800734c <ACIM_FREQ_CTRL_BootStrapConfiguration+0x14>
    /*Disable PWM Asymmetrical, if this is enabled*/
    XMC_CCU8_SLICE_SetOutPath(HandlePtr->pwm_svm_ptr->phase_ptr[phase_count]->slice_ptr, 0x1E0014U);
  }

  /*Enable the shadow transfer for all three consumed slice*/
  XMC_CCU8_EnableShadowTransfer(module_ptr->global_ptr, module_ptr->confighandle_ptr->shadow_transfer_mask);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	685a      	ldr	r2, [r3, #4]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739c:	4610      	mov	r0, r2
 800739e:	4619      	mov	r1, r3
 80073a0:	f7ff fae2 	bl	8006968 <XMC_CCU8_EnableShadowTransfer>
}
 80073a4:	3710      	adds	r7, #16
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	001e0014 	.word	0x001e0014

080073b0 <ACIM_FREQ_CTRL_StartPWMTimer>:
  }
}
#endif

void ACIM_FREQ_CTRL_StartPWMTimer(ACIM_FREQ_CTRL_t* const HandlePtr)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b084      	sub	sp, #16
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  volatile uint8_t phase_count;
  PWM_SVM_t* const module_ptr = HandlePtr->pwm_svm_ptr;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	60fb      	str	r3, [r7, #12]

  for (phase_count = (uint8_t) 0; phase_count < (uint8_t) 3; phase_count++)
 80073be:	2300      	movs	r3, #0
 80073c0:	72fb      	strb	r3, [r7, #11]
 80073c2:	e011      	b.n	80073e8 <ACIM_FREQ_CTRL_StartPWMTimer+0x38>
  {
    /* configure the Start trigger function*/
    XMC_CCU8_SLICE_StartConfig(module_ptr->phase_ptr[phase_count]->slice_ptr,
 80073c4:	7afb      	ldrb	r3, [r7, #11]
 80073c6:	b2db      	uxtb	r3, r3
 80073c8:	461a      	mov	r2, r3
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	3202      	adds	r2, #2
 80073ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4618      	mov	r0, r3
 80073d6:	2101      	movs	r1, #1
 80073d8:	2201      	movs	r2, #1
 80073da:	f7fa f8f1 	bl	80015c0 <XMC_CCU8_SLICE_StartConfig>
void ACIM_FREQ_CTRL_StartPWMTimer(ACIM_FREQ_CTRL_t* const HandlePtr)
{
  volatile uint8_t phase_count;
  PWM_SVM_t* const module_ptr = HandlePtr->pwm_svm_ptr;

  for (phase_count = (uint8_t) 0; phase_count < (uint8_t) 3; phase_count++)
 80073de:	7afb      	ldrb	r3, [r7, #11]
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	3301      	adds	r3, #1
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	72fb      	strb	r3, [r7, #11]
 80073e8:	7afb      	ldrb	r3, [r7, #11]
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	2b02      	cmp	r3, #2
 80073ee:	d9e9      	bls.n	80073c4 <ACIM_FREQ_CTRL_StartPWMTimer+0x14>
    XMC_CCU8_SLICE_StartConfig(module_ptr->phase_ptr[phase_count]->slice_ptr,
        (XMC_CCU8_SLICE_EVENT_t) XMC_CCU8_SLICE_EVENT_0,
        (XMC_CCU8_SLICE_START_MODE_t) XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR);
  }
  /* synchronous start of CCU8 slices */
  XMC_SCU_SetCcuTriggerHigh(module_ptr->confighandle_ptr->sync_start_mask);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	6a1b      	ldr	r3, [r3, #32]
 80073f6:	4618      	mov	r0, r3
 80073f8:	f7ff fac4 	bl	8006984 <XMC_SCU_SetCcuTriggerHigh>
  for (phase_count = (uint8_t) 0; phase_count < (uint8_t) 3; phase_count++)
 80073fc:	2300      	movs	r3, #0
 80073fe:	72fb      	strb	r3, [r7, #11]
 8007400:	e011      	b.n	8007426 <ACIM_FREQ_CTRL_StartPWMTimer+0x76>
  {
    /* configure the Start trigger function*/
    XMC_CCU8_SLICE_StartConfig(module_ptr->phase_ptr[phase_count]->slice_ptr,
 8007402:	7afb      	ldrb	r3, [r7, #11]
 8007404:	b2db      	uxtb	r3, r3
 8007406:	461a      	mov	r2, r3
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	3202      	adds	r2, #2
 800740c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4618      	mov	r0, r3
 8007414:	2100      	movs	r1, #0
 8007416:	2201      	movs	r2, #1
 8007418:	f7fa f8d2 	bl	80015c0 <XMC_CCU8_SLICE_StartConfig>
        (XMC_CCU8_SLICE_EVENT_t) XMC_CCU8_SLICE_EVENT_0,
        (XMC_CCU8_SLICE_START_MODE_t) XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR);
  }
  /* synchronous start of CCU8 slices */
  XMC_SCU_SetCcuTriggerHigh(module_ptr->confighandle_ptr->sync_start_mask);
  for (phase_count = (uint8_t) 0; phase_count < (uint8_t) 3; phase_count++)
 800741c:	7afb      	ldrb	r3, [r7, #11]
 800741e:	b2db      	uxtb	r3, r3
 8007420:	3301      	adds	r3, #1
 8007422:	b2db      	uxtb	r3, r3
 8007424:	72fb      	strb	r3, [r7, #11]
 8007426:	7afb      	ldrb	r3, [r7, #11]
 8007428:	b2db      	uxtb	r3, r3
 800742a:	2b02      	cmp	r3, #2
 800742c:	d9e9      	bls.n	8007402 <ACIM_FREQ_CTRL_StartPWMTimer+0x52>
    /* configure the Start trigger function*/
    XMC_CCU8_SLICE_StartConfig(module_ptr->phase_ptr[phase_count]->slice_ptr,
        (XMC_CCU8_SLICE_EVENT_t) XMC_CCU8_SLICE_EVENT_NONE,
        (XMC_CCU8_SLICE_START_MODE_t) XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR);
  }
}
 800742e:	3710      	adds	r7, #16
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}

08007434 <ACIM_FREQ_CTRL_StopPWMTimer>:

void ACIM_FREQ_CTRL_StopPWMTimer(ACIM_FREQ_CTRL_t* const HandlePtr)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b082      	sub	sp, #8
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  /* synchronous stop of CCU8 slices */
  XMC_SCU_SetCcuTriggerLow(HandlePtr->pwm_svm_ptr->confighandle_ptr->sync_start_mask);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	6a1b      	ldr	r3, [r3, #32]
 8007444:	4618      	mov	r0, r3
 8007446:	f7ff faaf 	bl	80069a8 <XMC_SCU_SetCcuTriggerLow>
}
 800744a:	3708      	adds	r7, #8
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}

08007450 <ACIM_FREQ_CTRL_MSM>:
  module_ptr->output = module_ptr->pi_ptr->pi_out_val;
}

/* Motot control state machine*/
void ACIM_FREQ_CTRL_MSM(ACIM_FREQ_CTRL_t* const HandlePtr)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b082      	sub	sp, #8
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  switch (HandlePtr->msm_state)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800745e:	2b0f      	cmp	r3, #15
 8007460:	d878      	bhi.n	8007554 <ACIM_FREQ_CTRL_MSM+0x104>
 8007462:	a201      	add	r2, pc, #4	; (adr r2, 8007468 <ACIM_FREQ_CTRL_MSM+0x18>)
 8007464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007468:	0800754d 	.word	0x0800754d
 800746c:	080074a9 	.word	0x080074a9
 8007470:	080074fb 	.word	0x080074fb
 8007474:	08007555 	.word	0x08007555
 8007478:	08007555 	.word	0x08007555
 800747c:	08007515 	.word	0x08007515
 8007480:	08007555 	.word	0x08007555
 8007484:	08007555 	.word	0x08007555
 8007488:	08007555 	.word	0x08007555
 800748c:	080074e3 	.word	0x080074e3
 8007490:	08007555 	.word	0x08007555
 8007494:	08007555 	.word	0x08007555
 8007498:	08007555 	.word	0x08007555
 800749c:	08007555 	.word	0x08007555
 80074a0:	08007555 	.word	0x08007555
 80074a4:	0800752d 	.word	0x0800752d
  {
    case ACIM_FREQ_CTRL_MSM_INIT_INVERTER:

      /*Initialize all run time parameters*/
      ACIM_FREQ_CTRL_MotorParamInit(HandlePtr);
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f7ff faf5 	bl	8006a98 <ACIM_FREQ_CTRL_MotorParamInit>
#if (ACIM_FREQ_CTRL_IS_ADC_AVAILABLE == 1U)
      ACIM_FREQ_CTRL_AmpBiasVoltCalibration(HandlePtr);
#endif

      /*Start PWM Timer to run the Motor State Machine*/
      ACIM_FREQ_CTRL_StartPWMTimer(HandlePtr);
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f7ff ff7e 	bl	80073b0 <ACIM_FREQ_CTRL_StartPWMTimer>

      /*Enable inverter*/
      PWM_SVM_InverterEnable(HandlePtr->pwm_svm_ptr);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	4618      	mov	r0, r3
 80074ba:	f7fc fa5d 	bl	8003978 <PWM_SVM_InverterEnable>

      if (HandlePtr->bootstrap_count != 0U)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d007      	beq.n	80074d8 <ACIM_FREQ_CTRL_MSM+0x88>
      {
        /*Boot strap Configuration */
        ACIM_FREQ_CTRL_BootStrapConfiguration(HandlePtr);
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f7ff ff35 	bl	8007338 <ACIM_FREQ_CTRL_BootStrapConfiguration>
        /*Change Motor Control State Machine to Boot Strap*/
        HandlePtr->msm_state = ACIM_FREQ_CTRL_MSM_BOOTSTRAP;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2209      	movs	r2, #9
 80074d2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      }
      else
      {
        HandlePtr->msm_state = ACIM_FREQ_CTRL_MSM_START_UP;
      }
      break;
 80074d6:	e03e      	b.n	8007556 <ACIM_FREQ_CTRL_MSM+0x106>
        /*Change Motor Control State Machine to Boot Strap*/
        HandlePtr->msm_state = ACIM_FREQ_CTRL_MSM_BOOTSTRAP;
      }
      else
      {
        HandlePtr->msm_state = ACIM_FREQ_CTRL_MSM_START_UP;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2202      	movs	r2, #2
 80074dc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      }
      break;
 80074e0:	e039      	b.n	8007556 <ACIM_FREQ_CTRL_MSM+0x106>

    case ACIM_FREQ_CTRL_MSM_BOOTSTRAP:
      if (ACIM_FREQ_CTRL_BOOTSTRAP_COMPLETED == ACIM_FREQ_CTRL_BootStrap(HandlePtr))
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 f86a 	bl	80075bc <ACIM_FREQ_CTRL_BootStrap>
 80074e8:	4603      	mov	r3, r0
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d104      	bne.n	80074f8 <ACIM_FREQ_CTRL_MSM+0xa8>
      {
        HandlePtr->msm_state = ACIM_FREQ_CTRL_MSM_START_UP;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2202      	movs	r2, #2
 80074f2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

      }
      break;
 80074f6:	e02e      	b.n	8007556 <ACIM_FREQ_CTRL_MSM+0x106>
 80074f8:	e02d      	b.n	8007556 <ACIM_FREQ_CTRL_MSM+0x106>

    case ACIM_FREQ_CTRL_MSM_START_UP:

      /*Stop the PWM timer*/
      ACIM_FREQ_CTRL_StopPWMTimer(HandlePtr);
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f7ff ff9a 	bl	8007434 <ACIM_FREQ_CTRL_StopPWMTimer>

      /*Start SVM*/
      PWM_SVM_Start(HandlePtr->pwm_svm_ptr);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	4618      	mov	r0, r3
 8007506:	f7fc fba9 	bl	8003c5c <PWM_SVM_Start>

      /*Change Motor Control State Machine to Operation*/
      HandlePtr->msm_state = ACIM_FREQ_CTRL_MSM_NORMAL_OPERATION;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2205      	movs	r2, #5
 800750e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007512:	e020      	b.n	8007556 <ACIM_FREQ_CTRL_MSM+0x106>
    case ACIM_FREQ_CTRL_MSM_TRANSITION:
      break;

    case ACIM_FREQ_CTRL_MSM_NORMAL_OPERATION:

      if ((HandlePtr->operational_error & 0x1FU) != 0U)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007518:	f003 031f 	and.w	r3, r3, #31
 800751c:	2b00      	cmp	r3, #0
 800751e:	d004      	beq.n	800752a <ACIM_FREQ_CTRL_MSM+0xda>
      {
        HandlePtr->msm_state = ACIM_FREQ_CTRL_MSM_ERROR;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	220f      	movs	r2, #15
 8007524:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      }
      break;
 8007528:	e015      	b.n	8007556 <ACIM_FREQ_CTRL_MSM+0x106>
 800752a:	e014      	b.n	8007556 <ACIM_FREQ_CTRL_MSM+0x106>

    case ACIM_FREQ_CTRL_MSM_ERROR:
      /*Report error to error handler*/
      ACIM_FREQ_CTRL_ReportError(HandlePtr);
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 f815 	bl	800755c <ACIM_FREQ_CTRL_ReportError>
#if (ACIM_FREQ_CTRL_IS_DSM_AVAILABLE == 1U)
      if ((uint8_t)ACIM_FREQ_CTRL_TS_DISABLED != HandlePtr->acim_config_ptr->dsm_task_conf)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	7cdb      	ldrb	r3, [r3, #19]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d006      	beq.n	800754a <ACIM_FREQ_CTRL_MSM+0xfa>
      {
        AUTOMATION_SM_RequestState(HandlePtr->acim_statemachine,(uint8_t)ACIM_FREQ_CTRL_DSM_ERROR);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007540:	4618      	mov	r0, r3
 8007542:	2107      	movs	r1, #7
 8007544:	f7fe ff3c 	bl	80063c0 <AUTOMATION_SM_RequestState>
      }
#endif
      break;
 8007548:	e005      	b.n	8007556 <ACIM_FREQ_CTRL_MSM+0x106>
 800754a:	e004      	b.n	8007556 <ACIM_FREQ_CTRL_MSM+0x106>

    case ACIM_FREQ_CTRL_MSM_STOP:
      ACIM_FREQ_CTRL_MotorStop(HandlePtr);
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f7ff fc79 	bl	8006e44 <ACIM_FREQ_CTRL_MotorStop>
      break;
 8007552:	e000      	b.n	8007556 <ACIM_FREQ_CTRL_MSM+0x106>

    default:
      break;
 8007554:	bf00      	nop
  }
}
 8007556:	3708      	adds	r7, #8
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <ACIM_FREQ_CTRL_ReportError>:

void ACIM_FREQ_CTRL_ReportError(ACIM_FREQ_CTRL_t* const HandlePtr)
{
 800755c:	b590      	push	{r4, r7, lr}
 800755e:	b085      	sub	sp, #20
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  uint8_t count;
  for (count = (uint8_t) 0; count < (uint8_t) ACIM_FREQ_CTRL_EID_MAX; count++)
 8007564:	2300      	movs	r3, #0
 8007566:	73fb      	strb	r3, [r7, #15]
 8007568:	e022      	b.n	80075b0 <ACIM_FREQ_CTRL_ReportError+0x54>
  {
    if (HandlePtr->error_table_ptr[count].error_status == (uint8_t) ACIM_FREQ_CTRL_ERROR_SET)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	69da      	ldr	r2, [r3, #28]
 800756e:	7bfb      	ldrb	r3, [r7, #15]
 8007570:	00db      	lsls	r3, r3, #3
 8007572:	4413      	add	r3, r2
 8007574:	795b      	ldrb	r3, [r3, #5]
 8007576:	2b01      	cmp	r3, #1
 8007578:	d117      	bne.n	80075aa <ACIM_FREQ_CTRL_ReportError+0x4e>
    {
#if ((ACIM_FREQ_CTRL_IS_AUTOMATION_AVAILABLE == 1U) && (AUTOMATION_EH_ENABLE == 1U))
      AUTOMATION_EH_AppInterface_ReportError(HandlePtr->app_id, HandlePtr->error_table_ptr[count].error_id,
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f893 00a5 	ldrb.w	r0, [r3, #165]	; 0xa5
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	69da      	ldr	r2, [r3, #28]
 8007584:	7bfb      	ldrb	r3, [r7, #15]
 8007586:	00db      	lsls	r3, r3, #3
 8007588:	4413      	add	r3, r2
 800758a:	7919      	ldrb	r1, [r3, #4]
          (AUTOMATION_EH_ERROR_SEVERITY_t)HandlePtr->error_table_ptr[count].error_severity,(AUTOMATION_EH_ERROR_STATUS_t)HandlePtr->error_table_ptr[count].error_status);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	69da      	ldr	r2, [r3, #28]
 8007590:	7bfb      	ldrb	r3, [r7, #15]
 8007592:	00db      	lsls	r3, r3, #3
 8007594:	4413      	add	r3, r2
 8007596:	799c      	ldrb	r4, [r3, #6]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	69da      	ldr	r2, [r3, #28]
 800759c:	7bfb      	ldrb	r3, [r7, #15]
 800759e:	00db      	lsls	r3, r3, #3
 80075a0:	4413      	add	r3, r2
 80075a2:	795b      	ldrb	r3, [r3, #5]
  for (count = (uint8_t) 0; count < (uint8_t) ACIM_FREQ_CTRL_EID_MAX; count++)
  {
    if (HandlePtr->error_table_ptr[count].error_status == (uint8_t) ACIM_FREQ_CTRL_ERROR_SET)
    {
#if ((ACIM_FREQ_CTRL_IS_AUTOMATION_AVAILABLE == 1U) && (AUTOMATION_EH_ENABLE == 1U))
      AUTOMATION_EH_AppInterface_ReportError(HandlePtr->app_id, HandlePtr->error_table_ptr[count].error_id,
 80075a4:	4622      	mov	r2, r4
 80075a6:	f7fe fcfb 	bl	8005fa0 <AUTOMATION_EH_AppInterface_ReportError>
}

void ACIM_FREQ_CTRL_ReportError(ACIM_FREQ_CTRL_t* const HandlePtr)
{
  uint8_t count;
  for (count = (uint8_t) 0; count < (uint8_t) ACIM_FREQ_CTRL_EID_MAX; count++)
 80075aa:	7bfb      	ldrb	r3, [r7, #15]
 80075ac:	3301      	adds	r3, #1
 80075ae:	73fb      	strb	r3, [r7, #15]
 80075b0:	7bfb      	ldrb	r3, [r7, #15]
 80075b2:	2b04      	cmp	r3, #4
 80075b4:	d9d9      	bls.n	800756a <ACIM_FREQ_CTRL_ReportError+0xe>
  if ((uint16_t)1 == HandlePtr->acim_config_ptr->enable_error_callback)
  {
    ACIM_FREQ_CTRL_UserCodeErrorHandler(HandlePtr);
  }
#endif
}
 80075b6:	3714      	adds	r7, #20
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd90      	pop	{r4, r7, pc}

080075bc <ACIM_FREQ_CTRL_BootStrap>:

ACIM_FREQ_CTRL_BOOTSTRAP_STATUS_t ACIM_FREQ_CTRL_BootStrap(ACIM_FREQ_CTRL_t* const HandlePtr)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b084      	sub	sp, #16
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  ACIM_FREQ_CTRL_BOOTSTRAP_STATUS_t status = ACIM_FREQ_CTRL_BOOTSTRAP_ACTIVE;
 80075c4:	2300      	movs	r3, #0
 80075c6:	73fb      	strb	r3, [r7, #15]

  /*Enable Bootstrap for Phase U*/
  if (HandlePtr->bootstrap_index < HandlePtr->bootstrap_count)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	; 0xa0
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d21b      	bcs.n	8007610 <ACIM_FREQ_CTRL_BootStrap+0x54>
  {
    XMC_CCU8_SLICE_SetOutPath(HandlePtr->pwm_svm_ptr->phase_ptr[0U]->slice_ptr, 0x1E0000U);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4618      	mov	r0, r3
 80075e2:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 80075e6:	f7f9 ffb3 	bl	8001550 <XMC_CCU8_SLICE_SetOutPath>
    XMC_CCU8_SLICE_SetOutPath(HandlePtr->pwm_svm_ptr->phase_ptr[1U]->slice_ptr, 0x1E0000U);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	68db      	ldr	r3, [r3, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4618      	mov	r0, r3
 80075f4:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 80075f8:	f7f9 ffaa 	bl	8001550 <XMC_CCU8_SLICE_SetOutPath>
    XMC_CCU8_SLICE_SetOutPath(HandlePtr->pwm_svm_ptr->phase_ptr[2U]->slice_ptr, 0x1E0000U);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	691b      	ldr	r3, [r3, #16]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4618      	mov	r0, r3
 8007606:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800760a:	f7f9 ffa1 	bl	8001550 <XMC_CCU8_SLICE_SetOutPath>
 800760e:	e06b      	b.n	80076e8 <ACIM_FREQ_CTRL_BootStrap+0x12c>
  }
  /*Enable Bootstrap for Phase V*/
  else if (HandlePtr->bootstrap_index < (HandlePtr->bootstrap_count * 2U))
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8007616:	461a      	mov	r2, r3
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800761e:	005b      	lsls	r3, r3, #1
 8007620:	429a      	cmp	r2, r3
 8007622:	d21b      	bcs.n	800765c <ACIM_FREQ_CTRL_BootStrap+0xa0>
  {
    XMC_CCU8_SLICE_SetOutPath(HandlePtr->pwm_svm_ptr->phase_ptr[0U]->slice_ptr, 0x1E0000U);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4618      	mov	r0, r3
 800762e:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8007632:	f7f9 ff8d 	bl	8001550 <XMC_CCU8_SLICE_SetOutPath>
    XMC_CCU8_SLICE_SetOutPath(HandlePtr->pwm_svm_ptr->phase_ptr[1U]->slice_ptr, 0x170000U);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	68db      	ldr	r3, [r3, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4618      	mov	r0, r3
 8007640:	f44f 11b8 	mov.w	r1, #1507328	; 0x170000
 8007644:	f7f9 ff84 	bl	8001550 <XMC_CCU8_SLICE_SetOutPath>
    XMC_CCU8_SLICE_SetOutPath(HandlePtr->pwm_svm_ptr->phase_ptr[2U]->slice_ptr, 0x1E0000U);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	691b      	ldr	r3, [r3, #16]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4618      	mov	r0, r3
 8007652:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8007656:	f7f9 ff7b 	bl	8001550 <XMC_CCU8_SLICE_SetOutPath>
 800765a:	e045      	b.n	80076e8 <ACIM_FREQ_CTRL_BootStrap+0x12c>
  }
  /*Enable Bootstrap for Phase W*/
  else if (HandlePtr->bootstrap_index < (HandlePtr->bootstrap_count * 3U))
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8007662:	4619      	mov	r1, r3
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800766a:	461a      	mov	r2, r3
 800766c:	4613      	mov	r3, r2
 800766e:	005b      	lsls	r3, r3, #1
 8007670:	4413      	add	r3, r2
 8007672:	4299      	cmp	r1, r3
 8007674:	d21b      	bcs.n	80076ae <ACIM_FREQ_CTRL_BootStrap+0xf2>
  {
    XMC_CCU8_SLICE_SetOutPath(HandlePtr->pwm_svm_ptr->phase_ptr[0U]->slice_ptr, 0x1E0000U);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4618      	mov	r0, r3
 8007680:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8007684:	f7f9 ff64 	bl	8001550 <XMC_CCU8_SLICE_SetOutPath>
    XMC_CCU8_SLICE_SetOutPath(HandlePtr->pwm_svm_ptr->phase_ptr[1U]->slice_ptr, 0x1E0000U);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	68db      	ldr	r3, [r3, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4618      	mov	r0, r3
 8007692:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8007696:	f7f9 ff5b 	bl	8001550 <XMC_CCU8_SLICE_SetOutPath>
    XMC_CCU8_SLICE_SetOutPath(HandlePtr->pwm_svm_ptr->phase_ptr[2U]->slice_ptr, 0x170000U);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	691b      	ldr	r3, [r3, #16]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4618      	mov	r0, r3
 80076a4:	f44f 11b8 	mov.w	r1, #1507328	; 0x170000
 80076a8:	f7f9 ff52 	bl	8001550 <XMC_CCU8_SLICE_SetOutPath>
 80076ac:	e01c      	b.n	80076e8 <ACIM_FREQ_CTRL_BootStrap+0x12c>
  }
  else
  {
    /*Configure default value*/
    XMC_CCU8_SLICE_SetOutPath(HandlePtr->pwm_svm_ptr->phase_ptr[0U]->slice_ptr, 0x170000U);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4618      	mov	r0, r3
 80076b8:	f44f 11b8 	mov.w	r1, #1507328	; 0x170000
 80076bc:	f7f9 ff48 	bl	8001550 <XMC_CCU8_SLICE_SetOutPath>
    XMC_CCU8_SLICE_SetOutPath(HandlePtr->pwm_svm_ptr->phase_ptr[1U]->slice_ptr, 0x170000U);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	68db      	ldr	r3, [r3, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4618      	mov	r0, r3
 80076ca:	f44f 11b8 	mov.w	r1, #1507328	; 0x170000
 80076ce:	f7f9 ff3f 	bl	8001550 <XMC_CCU8_SLICE_SetOutPath>
    XMC_CCU8_SLICE_SetOutPath(HandlePtr->pwm_svm_ptr->phase_ptr[2U]->slice_ptr, 0x170000U);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	691b      	ldr	r3, [r3, #16]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4618      	mov	r0, r3
 80076dc:	f44f 11b8 	mov.w	r1, #1507328	; 0x170000
 80076e0:	f7f9 ff36 	bl	8001550 <XMC_CCU8_SLICE_SetOutPath>
    status = ACIM_FREQ_CTRL_BOOTSTRAP_COMPLETED;
 80076e4:	2301      	movs	r3, #1
 80076e6:	73fb      	strb	r3, [r7, #15]
  }
  HandlePtr->bootstrap_index++;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 80076ee:	3301      	adds	r3, #1
 80076f0:	b29a      	uxth	r2, r3
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
  return (status);
 80076f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3710      	adds	r7, #16
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
 8007702:	bf00      	nop

08007704 <ACIM_FREQ_CTRL_ClearErrorState>:

void ACIM_FREQ_CTRL_ClearErrorState(ACIM_FREQ_CTRL_t* const HandlePtr)
{
 8007704:	b590      	push	{r4, r7, lr}
 8007706:	b085      	sub	sp, #20
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  uint8_t count;
  for (count = (uint8_t) 0; count < (uint8_t) ACIM_FREQ_CTRL_EID_MAX; count++)
 800770c:	2300      	movs	r3, #0
 800770e:	73fb      	strb	r3, [r7, #15]
 8007710:	e029      	b.n	8007766 <ACIM_FREQ_CTRL_ClearErrorState+0x62>
  {
    if (HandlePtr->error_table_ptr[count].error_status == (uint8_t) ACIM_FREQ_CTRL_ERROR_SET)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	69da      	ldr	r2, [r3, #28]
 8007716:	7bfb      	ldrb	r3, [r7, #15]
 8007718:	00db      	lsls	r3, r3, #3
 800771a:	4413      	add	r3, r2
 800771c:	795b      	ldrb	r3, [r3, #5]
 800771e:	2b01      	cmp	r3, #1
 8007720:	d11e      	bne.n	8007760 <ACIM_FREQ_CTRL_ClearErrorState+0x5c>
    {
      HandlePtr->error_table_ptr[count].error_status = (uint8_t) ACIM_FREQ_CTRL_ERROR_CLEARED;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	69da      	ldr	r2, [r3, #28]
 8007726:	7bfb      	ldrb	r3, [r7, #15]
 8007728:	00db      	lsls	r3, r3, #3
 800772a:	4413      	add	r3, r2
 800772c:	2200      	movs	r2, #0
 800772e:	715a      	strb	r2, [r3, #5]
#if ((ACIM_FREQ_CTRL_IS_AUTOMATION_AVAILABLE == 1U) && (AUTOMATION_EH_ENABLE == 1U))
      AUTOMATION_EH_AppInterface_ReportError(HandlePtr->app_id, HandlePtr->error_table_ptr[count].error_id,
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f893 00a5 	ldrb.w	r0, [r3, #165]	; 0xa5
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	69da      	ldr	r2, [r3, #28]
 800773a:	7bfb      	ldrb	r3, [r7, #15]
 800773c:	00db      	lsls	r3, r3, #3
 800773e:	4413      	add	r3, r2
 8007740:	7919      	ldrb	r1, [r3, #4]
          (AUTOMATION_EH_ERROR_SEVERITY_t)HandlePtr->error_table_ptr[count].error_severity,(AUTOMATION_EH_ERROR_STATUS_t)HandlePtr->error_table_ptr[count].error_status);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	69da      	ldr	r2, [r3, #28]
 8007746:	7bfb      	ldrb	r3, [r7, #15]
 8007748:	00db      	lsls	r3, r3, #3
 800774a:	4413      	add	r3, r2
 800774c:	799c      	ldrb	r4, [r3, #6]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	69da      	ldr	r2, [r3, #28]
 8007752:	7bfb      	ldrb	r3, [r7, #15]
 8007754:	00db      	lsls	r3, r3, #3
 8007756:	4413      	add	r3, r2
 8007758:	795b      	ldrb	r3, [r3, #5]
  {
    if (HandlePtr->error_table_ptr[count].error_status == (uint8_t) ACIM_FREQ_CTRL_ERROR_SET)
    {
      HandlePtr->error_table_ptr[count].error_status = (uint8_t) ACIM_FREQ_CTRL_ERROR_CLEARED;
#if ((ACIM_FREQ_CTRL_IS_AUTOMATION_AVAILABLE == 1U) && (AUTOMATION_EH_ENABLE == 1U))
      AUTOMATION_EH_AppInterface_ReportError(HandlePtr->app_id, HandlePtr->error_table_ptr[count].error_id,
 800775a:	4622      	mov	r2, r4
 800775c:	f7fe fc20 	bl	8005fa0 <AUTOMATION_EH_AppInterface_ReportError>
}

void ACIM_FREQ_CTRL_ClearErrorState(ACIM_FREQ_CTRL_t* const HandlePtr)
{
  uint8_t count;
  for (count = (uint8_t) 0; count < (uint8_t) ACIM_FREQ_CTRL_EID_MAX; count++)
 8007760:	7bfb      	ldrb	r3, [r7, #15]
 8007762:	3301      	adds	r3, #1
 8007764:	73fb      	strb	r3, [r7, #15]
 8007766:	7bfb      	ldrb	r3, [r7, #15]
 8007768:	2b04      	cmp	r3, #4
 800776a:	d9d2      	bls.n	8007712 <ACIM_FREQ_CTRL_ClearErrorState+0xe>
      AUTOMATION_EH_AppInterface_ReportError(HandlePtr->app_id, HandlePtr->error_table_ptr[count].error_id,
          (AUTOMATION_EH_ERROR_SEVERITY_t)HandlePtr->error_table_ptr[count].error_severity,(AUTOMATION_EH_ERROR_STATUS_t)HandlePtr->error_table_ptr[count].error_status);
#endif
    }
  }
  HandlePtr->operational_error = 0U;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2200      	movs	r2, #0
 8007770:	655a      	str	r2, [r3, #84]	; 0x54

  HandlePtr->msm_state = ACIM_FREQ_CTRL_MSM_STOP;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
}
 800777a:	3714      	adds	r7, #20
 800777c:	46bd      	mov	sp, r7
 800777e:	bd90      	pop	{r4, r7, pc}

08007780 <ACIM_FREQ_CTRL_DSM_SwitchedOff_Entry>:
#if (ACIM_FREQ_CTRL_IS_DSM_AVAILABLE == 1U)
void ACIM_FREQ_CTRL_DSM_SwitchedOff_Entry (void* HandlePtr)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b082      	sub	sp, #8
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  ACIM_FREQ_CTRL_MotorStop((ACIM_FREQ_CTRL_t*)HandlePtr);
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f7ff fb5b 	bl	8006e44 <ACIM_FREQ_CTRL_MotorStop>
}
 800778e:	3708      	adds	r7, #8
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <ACIM_FREQ_CTRL_DSM_SwitchedOff_Action>:
void ACIM_FREQ_CTRL_DSM_SwitchedOff_Action (void* HandlePtr)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b084      	sub	sp, #16
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  ACIM_FREQ_CTRL_t* AppHandler = (ACIM_FREQ_CTRL_t*)HandlePtr;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	60fb      	str	r3, [r7, #12]
  if (AppHandler->state == (uint8_t)ACIM_FREQ_CTRL_UNINITIALISED)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d106      	bne.n	80077b8 <ACIM_FREQ_CTRL_DSM_SwitchedOff_Action+0x24>
  {
    AUTOMATION_SM_RequestState(AppHandler->acim_statemachine,(uint8_t)ACIM_FREQ_CTRL_DSM_ERROR);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077ae:	4618      	mov	r0, r3
 80077b0:	2107      	movs	r1, #7
 80077b2:	f7fe fe05 	bl	80063c0 <AUTOMATION_SM_RequestState>
 80077b6:	e005      	b.n	80077c4 <ACIM_FREQ_CTRL_DSM_SwitchedOff_Action+0x30>
  }
  else
  {
    AUTOMATION_SM_RequestState(AppHandler->acim_statemachine,(uint8_t)ACIM_FREQ_CTRL_DSM_SAFE_TORQUE_OFF);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077bc:	4618      	mov	r0, r3
 80077be:	2108      	movs	r1, #8
 80077c0:	f7fe fdfe 	bl	80063c0 <AUTOMATION_SM_RequestState>
  }
}
 80077c4:	3710      	adds	r7, #16
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}
 80077ca:	bf00      	nop

080077cc <ACIM_FREQ_CTRL_DSM_SwitchedOff_Exit>:
void ACIM_FREQ_CTRL_DSM_SwitchedOff_Exit(void* HandlePtr)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b085      	sub	sp, #20
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  ACIM_FREQ_CTRL_t* AppHandler = (ACIM_FREQ_CTRL_t*)HandlePtr;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	60fb      	str	r3, [r7, #12]
  if ((AppHandler->acim_statemachine->requested_state ==(uint8_t)ACIM_FREQ_CTRL_DSM_OPERATION )||
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077dc:	7a5b      	ldrb	r3, [r3, #9]
 80077de:	2b03      	cmp	r3, #3
 80077e0:	d004      	beq.n	80077ec <ACIM_FREQ_CTRL_DSM_SwitchedOff_Exit+0x20>
      (AppHandler->acim_statemachine->requested_state ==(uint8_t)ACIM_FREQ_CTRL_DSM_SWITCHED_ON ))
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077e6:	7a5b      	ldrb	r3, [r3, #9]
  }
}
void ACIM_FREQ_CTRL_DSM_SwitchedOff_Exit(void* HandlePtr)
{
  ACIM_FREQ_CTRL_t* AppHandler = (ACIM_FREQ_CTRL_t*)HandlePtr;
  if ((AppHandler->acim_statemachine->requested_state ==(uint8_t)ACIM_FREQ_CTRL_DSM_OPERATION )||
 80077e8:	2b02      	cmp	r3, #2
 80077ea:	d105      	bne.n	80077f8 <ACIM_FREQ_CTRL_DSM_SwitchedOff_Exit+0x2c>
      (AppHandler->acim_statemachine->requested_state ==(uint8_t)ACIM_FREQ_CTRL_DSM_SWITCHED_ON ))
  {
    AppHandler->acim_statemachine->requested_state = AppHandler->acim_statemachine->current_state;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077f0:	68fa      	ldr	r2, [r7, #12]
 80077f2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80077f4:	7a12      	ldrb	r2, [r2, #8]
 80077f6:	725a      	strb	r2, [r3, #9]
  }
}
 80077f8:	3714      	adds	r7, #20
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr
 8007802:	bf00      	nop

08007804 <ACIM_FREQ_CTRL_DSM_Safe_Torque_Off_Entry>:
void ACIM_FREQ_CTRL_DSM_Safe_Torque_Off_Entry (void* HandlePtr)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b082      	sub	sp, #8
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  ACIM_FREQ_CTRL_MotorStop((ACIM_FREQ_CTRL_t*)HandlePtr);
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f7ff fb19 	bl	8006e44 <ACIM_FREQ_CTRL_MotorStop>
}
 8007812:	3708      	adds	r7, #8
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}

08007818 <ACIM_FREQ_CTRL_DSM_Safe_Torque_Off_Action>:
void ACIM_FREQ_CTRL_DSM_Safe_Torque_Off_Action (void* HandlePtr)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b084      	sub	sp, #16
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  ACIM_FREQ_CTRL_t* AppHandler = (ACIM_FREQ_CTRL_t*)HandlePtr;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	60fb      	str	r3, [r7, #12]
  if (ACIM_FREQ_CTRL_CW_AUTOMATIC_ON == AppHandler->cw_state )
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800782a:	2b08      	cmp	r3, #8
 800782c:	d105      	bne.n	800783a <ACIM_FREQ_CTRL_DSM_Safe_Torque_Off_Action+0x22>
  {
    AUTOMATION_SM_RequestState(AppHandler->acim_statemachine,(uint8_t)ACIM_FREQ_CTRL_DSM_ENABLED);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007832:	4618      	mov	r0, r3
 8007834:	2101      	movs	r1, #1
 8007836:	f7fe fdc3 	bl	80063c0 <AUTOMATION_SM_RequestState>
  }
}
 800783a:	3710      	adds	r7, #16
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <ACIM_FREQ_CTRL_DSM_Safe_Torque_Off_Exit>:
void ACIM_FREQ_CTRL_DSM_Safe_Torque_Off_Exit(void* HandlePtr)
{
 8007840:	b480      	push	{r7}
 8007842:	b085      	sub	sp, #20
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  ACIM_FREQ_CTRL_t* AppHandler = (ACIM_FREQ_CTRL_t*)HandlePtr;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	60fb      	str	r3, [r7, #12]
  if ((AppHandler->acim_statemachine->requested_state ==(uint8_t)ACIM_FREQ_CTRL_DSM_OPERATION )||
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007850:	7a5b      	ldrb	r3, [r3, #9]
 8007852:	2b03      	cmp	r3, #3
 8007854:	d004      	beq.n	8007860 <ACIM_FREQ_CTRL_DSM_Safe_Torque_Off_Exit+0x20>
      (AppHandler->acim_statemachine->requested_state ==(uint8_t)ACIM_FREQ_CTRL_DSM_SWITCHED_ON ))
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800785a:	7a5b      	ldrb	r3, [r3, #9]
  }
}
void ACIM_FREQ_CTRL_DSM_Safe_Torque_Off_Exit(void* HandlePtr)
{
  ACIM_FREQ_CTRL_t* AppHandler = (ACIM_FREQ_CTRL_t*)HandlePtr;
  if ((AppHandler->acim_statemachine->requested_state ==(uint8_t)ACIM_FREQ_CTRL_DSM_OPERATION )||
 800785c:	2b02      	cmp	r3, #2
 800785e:	d105      	bne.n	800786c <ACIM_FREQ_CTRL_DSM_Safe_Torque_Off_Exit+0x2c>
      (AppHandler->acim_statemachine->requested_state ==(uint8_t)ACIM_FREQ_CTRL_DSM_SWITCHED_ON ))
  {
    AppHandler->acim_statemachine->requested_state = AppHandler->acim_statemachine->current_state;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007864:	68fa      	ldr	r2, [r7, #12]
 8007866:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007868:	7a12      	ldrb	r2, [r2, #8]
 800786a:	725a      	strb	r2, [r3, #9]
  }
}
 800786c:	3714      	adds	r7, #20
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr
 8007876:	bf00      	nop

08007878 <ACIM_FREQ_CTRL_DSM_Enabled_Action>:
void ACIM_FREQ_CTRL_DSM_Enabled_Action (void* HandlePtr)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b084      	sub	sp, #16
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  ACIM_FREQ_CTRL_t* AppHandler = (ACIM_FREQ_CTRL_t*)HandlePtr;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	60fb      	str	r3, [r7, #12]
  if ((ACIM_FREQ_CTRL_CW_AUTOMATIC_ON == AppHandler->cw_state )||
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800788a:	2b08      	cmp	r3, #8
 800788c:	d004      	beq.n	8007898 <ACIM_FREQ_CTRL_DSM_Enabled_Action+0x20>
      (ACIM_FREQ_CTRL_CW_ENABLE== AppHandler->cw_state))
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  }
}
void ACIM_FREQ_CTRL_DSM_Enabled_Action (void* HandlePtr)
{
  ACIM_FREQ_CTRL_t* AppHandler = (ACIM_FREQ_CTRL_t*)HandlePtr;
  if ((ACIM_FREQ_CTRL_CW_AUTOMATIC_ON == AppHandler->cw_state )||
 8007894:	2b01      	cmp	r3, #1
 8007896:	d105      	bne.n	80078a4 <ACIM_FREQ_CTRL_DSM_Enabled_Action+0x2c>
      (ACIM_FREQ_CTRL_CW_ENABLE== AppHandler->cw_state))
  {
    AUTOMATION_SM_RequestState(AppHandler->acim_statemachine,(uint8_t)ACIM_FREQ_CTRL_DSM_SWITCHED_ON);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800789c:	4618      	mov	r0, r3
 800789e:	2102      	movs	r1, #2
 80078a0:	f7fe fd8e 	bl	80063c0 <AUTOMATION_SM_RequestState>
  }
}
 80078a4:	3710      	adds	r7, #16
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
 80078aa:	bf00      	nop

080078ac <ACIM_FREQ_CTRL_DSM_Enabled_Exit>:
void ACIM_FREQ_CTRL_DSM_Enabled_Exit(void* HandlePtr)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b085      	sub	sp, #20
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  ACIM_FREQ_CTRL_t* AppHandler = (ACIM_FREQ_CTRL_t*)HandlePtr;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	60fb      	str	r3, [r7, #12]
  if (AppHandler->acim_statemachine->requested_state ==(uint8_t)ACIM_FREQ_CTRL_DSM_OPERATION )
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078bc:	7a5b      	ldrb	r3, [r3, #9]
 80078be:	2b03      	cmp	r3, #3
 80078c0:	d105      	bne.n	80078ce <ACIM_FREQ_CTRL_DSM_Enabled_Exit+0x22>
  {
    AppHandler->acim_statemachine->requested_state = AppHandler->acim_statemachine->current_state;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078c6:	68fa      	ldr	r2, [r7, #12]
 80078c8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80078ca:	7a12      	ldrb	r2, [r2, #8]
 80078cc:	725a      	strb	r2, [r3, #9]
  }
}
 80078ce:	3714      	adds	r7, #20
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <ACIM_FREQ_CTRL_DSM_Switched_On_Action>:
void ACIM_FREQ_CTRL_DSM_Switched_On_Action (void* HandlePtr)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  ACIM_FREQ_CTRL_t* AppHandler = (ACIM_FREQ_CTRL_t*)HandlePtr;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	60fb      	str	r3, [r7, #12]
  if ((ACIM_FREQ_CTRL_CW_AUTOMATIC_ON == AppHandler->cw_state )||
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80078ea:	2b08      	cmp	r3, #8
 80078ec:	d004      	beq.n	80078f8 <ACIM_FREQ_CTRL_DSM_Switched_On_Action+0x20>
      (ACIM_FREQ_CTRL_CW_OPERATE == AppHandler->cw_state))
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  }
}
void ACIM_FREQ_CTRL_DSM_Switched_On_Action (void* HandlePtr)
{
  ACIM_FREQ_CTRL_t* AppHandler = (ACIM_FREQ_CTRL_t*)HandlePtr;
  if ((ACIM_FREQ_CTRL_CW_AUTOMATIC_ON == AppHandler->cw_state )||
 80078f4:	2b03      	cmp	r3, #3
 80078f6:	d105      	bne.n	8007904 <ACIM_FREQ_CTRL_DSM_Switched_On_Action+0x2c>
      (ACIM_FREQ_CTRL_CW_OPERATE == AppHandler->cw_state))
  {
    AUTOMATION_SM_RequestState(AppHandler->acim_statemachine,(uint8_t)ACIM_FREQ_CTRL_DSM_OPERATION );
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078fc:	4618      	mov	r0, r3
 80078fe:	2103      	movs	r1, #3
 8007900:	f7fe fd5e 	bl	80063c0 <AUTOMATION_SM_RequestState>
  }
}
 8007904:	3710      	adds	r7, #16
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
 800790a:	bf00      	nop

0800790c <ACIM_FREQ_CTRL_DSM_Operation_Entry>:
void ACIM_FREQ_CTRL_DSM_Operation_Entry (void* HandlePtr)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b082      	sub	sp, #8
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  ACIM_FREQ_CTRL_MotorStart((ACIM_FREQ_CTRL_t*)HandlePtr);
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f7ff fa3d 	bl	8006d94 <ACIM_FREQ_CTRL_MotorStart>
}
 800791a:	3708      	adds	r7, #8
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <ACIM_FREQ_CTRL_DSM_Operation_Action>:
void ACIM_FREQ_CTRL_DSM_Operation_Action(void* HandlePtr)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b084      	sub	sp, #16
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  ACIM_FREQ_CTRL_t* AppHandler = (ACIM_FREQ_CTRL_t*)HandlePtr;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	60fb      	str	r3, [r7, #12]
  if (AppHandler->cw_state == ACIM_FREQ_CTRL_CW_RAMP_DOWN)
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007932:	2b06      	cmp	r3, #6
 8007934:	d106      	bne.n	8007944 <ACIM_FREQ_CTRL_DSM_Operation_Action+0x24>
  {
    AUTOMATION_SM_RequestState(AppHandler->acim_statemachine,(uint8_t)ACIM_FREQ_CTRL_DSM_RAMP_DOWN);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800793a:	4618      	mov	r0, r3
 800793c:	2106      	movs	r1, #6
 800793e:	f7fe fd3f 	bl	80063c0 <AUTOMATION_SM_RequestState>
 8007942:	e022      	b.n	800798a <ACIM_FREQ_CTRL_DSM_Operation_Action+0x6a>
  }
  else if (AppHandler->cw_state == ACIM_FREQ_CTRL_CW_COAST_STOP)
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800794a:	2b04      	cmp	r3, #4
 800794c:	d106      	bne.n	800795c <ACIM_FREQ_CTRL_DSM_Operation_Action+0x3c>
  {
    AUTOMATION_SM_RequestState(AppHandler->acim_statemachine,(uint8_t)ACIM_FREQ_CTRL_DSM_COAST_STOP);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007952:	4618      	mov	r0, r3
 8007954:	2104      	movs	r1, #4
 8007956:	f7fe fd33 	bl	80063c0 <AUTOMATION_SM_RequestState>
 800795a:	e016      	b.n	800798a <ACIM_FREQ_CTRL_DSM_Operation_Action+0x6a>
  }
  else if (AppHandler->cw_state == ACIM_FREQ_CTRL_CW_QUICK_STOP)
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007962:	2b05      	cmp	r3, #5
 8007964:	d106      	bne.n	8007974 <ACIM_FREQ_CTRL_DSM_Operation_Action+0x54>
  {
    AUTOMATION_SM_RequestState(AppHandler->acim_statemachine,(uint8_t)ACIM_FREQ_CTRL_DSM_QUICK_STOP);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800796a:	4618      	mov	r0, r3
 800796c:	2105      	movs	r1, #5
 800796e:	f7fe fd27 	bl	80063c0 <AUTOMATION_SM_RequestState>
 8007972:	e00a      	b.n	800798a <ACIM_FREQ_CTRL_DSM_Operation_Action+0x6a>
  }
  else if (AppHandler->cw_state == ACIM_FREQ_CTRL_CW_SWITCH_ON)
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800797a:	2b02      	cmp	r3, #2
 800797c:	d105      	bne.n	800798a <ACIM_FREQ_CTRL_DSM_Operation_Action+0x6a>
  {
    AUTOMATION_SM_RequestState(AppHandler->acim_statemachine,(uint8_t)ACIM_FREQ_CTRL_DSM_SWITCHED_ON);
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007982:	4618      	mov	r0, r3
 8007984:	2102      	movs	r1, #2
 8007986:	f7fe fd1b 	bl	80063c0 <AUTOMATION_SM_RequestState>
  }
  else
  {
  }
}
 800798a:	3710      	adds	r7, #16
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}

08007990 <ACIM_FREQ_CTRL_DSM_Operation_Exit>:
void ACIM_FREQ_CTRL_DSM_Operation_Exit(void* HandlePtr)
{
 8007990:	b480      	push	{r7}
 8007992:	b085      	sub	sp, #20
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  ACIM_FREQ_CTRL_t* AppHandler = (ACIM_FREQ_CTRL_t*)HandlePtr;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	60fb      	str	r3, [r7, #12]
  if ((AppHandler->acim_statemachine->requested_state ==(uint8_t)ACIM_FREQ_CTRL_DSM_ENABLED )||
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079a0:	7a5b      	ldrb	r3, [r3, #9]
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	d004      	beq.n	80079b0 <ACIM_FREQ_CTRL_DSM_Operation_Exit+0x20>
      (AppHandler->acim_statemachine->requested_state ==(uint8_t)ACIM_FREQ_CTRL_DSM_SWITCHED_ON ))
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079aa:	7a5b      	ldrb	r3, [r3, #9]
  }
}
void ACIM_FREQ_CTRL_DSM_Operation_Exit(void* HandlePtr)
{
  ACIM_FREQ_CTRL_t* AppHandler = (ACIM_FREQ_CTRL_t*)HandlePtr;
  if ((AppHandler->acim_statemachine->requested_state ==(uint8_t)ACIM_FREQ_CTRL_DSM_ENABLED )||
 80079ac:	2b02      	cmp	r3, #2
 80079ae:	d105      	bne.n	80079bc <ACIM_FREQ_CTRL_DSM_Operation_Exit+0x2c>
      (AppHandler->acim_statemachine->requested_state ==(uint8_t)ACIM_FREQ_CTRL_DSM_SWITCHED_ON ))
  {
    AppHandler->acim_statemachine->requested_state = AppHandler->acim_statemachine->current_state;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079b4:	68fa      	ldr	r2, [r7, #12]
 80079b6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80079b8:	7a12      	ldrb	r2, [r2, #8]
 80079ba:	725a      	strb	r2, [r3, #9]
  }
}
 80079bc:	3714      	adds	r7, #20
 80079be:	46bd      	mov	sp, r7
 80079c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c4:	4770      	bx	lr
 80079c6:	bf00      	nop

080079c8 <ACIM_FREQ_CTRL_DSM_Coast_Stop_Entry>:
void ACIM_FREQ_CTRL_DSM_Coast_Stop_Entry (void* HandlePtr)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  ACIM_FREQ_CTRL_MotorStop((ACIM_FREQ_CTRL_t*)HandlePtr);
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f7ff fa37 	bl	8006e44 <ACIM_FREQ_CTRL_MotorStop>
}
 80079d6:	3708      	adds	r7, #8
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}

080079dc <ACIM_FREQ_CTRL_DSM_Coast_Stop_Action>:
void ACIM_FREQ_CTRL_DSM_Coast_Stop_Action (void* HandlePtr)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b084      	sub	sp, #16
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  ACIM_FREQ_CTRL_t* AppHandler = (ACIM_FREQ_CTRL_t*)HandlePtr;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	60fb      	str	r3, [r7, #12]
  if (AppHandler->cw_state == ACIM_FREQ_CTRL_CW_SWITCHED_OFF)
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d105      	bne.n	80079fe <ACIM_FREQ_CTRL_DSM_Coast_Stop_Action+0x22>
  {
    AUTOMATION_SM_RequestState(AppHandler->acim_statemachine,(uint8_t)ACIM_FREQ_CTRL_DSM_SWITCHED_OFF);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079f6:	4618      	mov	r0, r3
 80079f8:	2100      	movs	r1, #0
 80079fa:	f7fe fce1 	bl	80063c0 <AUTOMATION_SM_RequestState>
  }
}
 80079fe:	3710      	adds	r7, #16
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <ACIM_FREQ_CTRL_DSM_Coast_Stop_Exit>:
void ACIM_FREQ_CTRL_DSM_Coast_Stop_Exit(void* HandlePtr)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b085      	sub	sp, #20
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  ACIM_FREQ_CTRL_t* AppHandler = (ACIM_FREQ_CTRL_t*)HandlePtr;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	60fb      	str	r3, [r7, #12]
  if ((AppHandler->acim_statemachine->requested_state ==(uint8_t)ACIM_FREQ_CTRL_DSM_ENABLED )||
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a14:	7a5b      	ldrb	r3, [r3, #9]
 8007a16:	2b01      	cmp	r3, #1
 8007a18:	d009      	beq.n	8007a2e <ACIM_FREQ_CTRL_DSM_Coast_Stop_Exit+0x2a>
      (AppHandler->acim_statemachine->requested_state ==(uint8_t)ACIM_FREQ_CTRL_DSM_SWITCHED_ON )||
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a1e:	7a5b      	ldrb	r3, [r3, #9]
  }
}
void ACIM_FREQ_CTRL_DSM_Coast_Stop_Exit(void* HandlePtr)
{
  ACIM_FREQ_CTRL_t* AppHandler = (ACIM_FREQ_CTRL_t*)HandlePtr;
  if ((AppHandler->acim_statemachine->requested_state ==(uint8_t)ACIM_FREQ_CTRL_DSM_ENABLED )||
 8007a20:	2b02      	cmp	r3, #2
 8007a22:	d004      	beq.n	8007a2e <ACIM_FREQ_CTRL_DSM_Coast_Stop_Exit+0x2a>
      (AppHandler->acim_statemachine->requested_state ==(uint8_t)ACIM_FREQ_CTRL_DSM_SWITCHED_ON )||
      (AppHandler->acim_statemachine->requested_state ==(uint8_t)ACIM_FREQ_CTRL_DSM_OPERATION ) )
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a28:	7a5b      	ldrb	r3, [r3, #9]
}
void ACIM_FREQ_CTRL_DSM_Coast_Stop_Exit(void* HandlePtr)
{
  ACIM_FREQ_CTRL_t* AppHandler = (ACIM_FREQ_CTRL_t*)HandlePtr;
  if ((AppHandler->acim_statemachine->requested_state ==(uint8_t)ACIM_FREQ_CTRL_DSM_ENABLED )||
      (AppHandler->acim_statemachine->requested_state ==(uint8_t)ACIM_FREQ_CTRL_DSM_SWITCHED_ON )||
 8007a2a:	2b03      	cmp	r3, #3
 8007a2c:	d105      	bne.n	8007a3a <ACIM_FREQ_CTRL_DSM_Coast_Stop_Exit+0x36>
      (AppHandler->acim_statemachine->requested_state ==(uint8_t)ACIM_FREQ_CTRL_DSM_OPERATION ) )
  {
    AppHandler->acim_statemachine->requested_state = AppHandler->acim_statemachine->current_state;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a32:	68fa      	ldr	r2, [r7, #12]
 8007a34:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007a36:	7a12      	ldrb	r2, [r2, #8]
 8007a38:	725a      	strb	r2, [r3, #9]
  }
}
 8007a3a:	3714      	adds	r7, #20
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr

08007a44 <ACIM_FREQ_CTRL_DSM_Quick_Stop_Entry>:
void ACIM_FREQ_CTRL_DSM_Quick_Stop_Entry (void* HandlePtr)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b082      	sub	sp, #8
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  ACIM_FREQ_CTRL_MotorStop((ACIM_FREQ_CTRL_t*)HandlePtr);
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f7ff f9f9 	bl	8006e44 <ACIM_FREQ_CTRL_MotorStop>
}
 8007a52:	3708      	adds	r7, #8
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}

08007a58 <ACIM_FREQ_CTRL_DSM_Quick_Stop_Action>:
void ACIM_FREQ_CTRL_DSM_Quick_Stop_Action (void* HandlePtr)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b084      	sub	sp, #16
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  ACIM_FREQ_CTRL_t* AppHandler = (ACIM_FREQ_CTRL_t*)HandlePtr;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	60fb      	str	r3, [r7, #12]
  if (AppHandler->cw_state == ACIM_FREQ_CTRL_CW_SWITCHED_OFF )
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d105      	bne.n	8007a7a <ACIM_FREQ_CTRL_DSM_Quick_Stop_Action+0x22>
  {
    AUTOMATION_SM_RequestState(AppHandler->acim_statemachine,(uint8_t)ACIM_FREQ_CTRL_DSM_SWITCHED_OFF);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a72:	4618      	mov	r0, r3
 8007a74:	2100      	movs	r1, #0
 8007a76:	f7fe fca3 	bl	80063c0 <AUTOMATION_SM_RequestState>
  }
}
 8007a7a:	3710      	adds	r7, #16
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <ACIM_FREQ_CTRL_DSM_Quick_Stop_Exit>:
void ACIM_FREQ_CTRL_DSM_Quick_Stop_Exit(void* HandlePtr)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b085      	sub	sp, #20
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  ACIM_FREQ_CTRL_t* AppHandler = (ACIM_FREQ_CTRL_t*)HandlePtr;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	60fb      	str	r3, [r7, #12]
  if ((AppHandler->acim_statemachine->requested_state ==(uint8_t)ACIM_FREQ_CTRL_DSM_ENABLED )||
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a90:	7a5b      	ldrb	r3, [r3, #9]
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d009      	beq.n	8007aaa <ACIM_FREQ_CTRL_DSM_Quick_Stop_Exit+0x2a>
      (AppHandler->acim_statemachine->requested_state ==(uint8_t)ACIM_FREQ_CTRL_DSM_SWITCHED_ON )||
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a9a:	7a5b      	ldrb	r3, [r3, #9]
  }
}
void ACIM_FREQ_CTRL_DSM_Quick_Stop_Exit(void* HandlePtr)
{
  ACIM_FREQ_CTRL_t* AppHandler = (ACIM_FREQ_CTRL_t*)HandlePtr;
  if ((AppHandler->acim_statemachine->requested_state ==(uint8_t)ACIM_FREQ_CTRL_DSM_ENABLED )||
 8007a9c:	2b02      	cmp	r3, #2
 8007a9e:	d004      	beq.n	8007aaa <ACIM_FREQ_CTRL_DSM_Quick_Stop_Exit+0x2a>
      (AppHandler->acim_statemachine->requested_state ==(uint8_t)ACIM_FREQ_CTRL_DSM_SWITCHED_ON )||
      (AppHandler->acim_statemachine->requested_state ==(uint8_t)ACIM_FREQ_CTRL_DSM_OPERATION ) )
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aa4:	7a5b      	ldrb	r3, [r3, #9]
}
void ACIM_FREQ_CTRL_DSM_Quick_Stop_Exit(void* HandlePtr)
{
  ACIM_FREQ_CTRL_t* AppHandler = (ACIM_FREQ_CTRL_t*)HandlePtr;
  if ((AppHandler->acim_statemachine->requested_state ==(uint8_t)ACIM_FREQ_CTRL_DSM_ENABLED )||
      (AppHandler->acim_statemachine->requested_state ==(uint8_t)ACIM_FREQ_CTRL_DSM_SWITCHED_ON )||
 8007aa6:	2b03      	cmp	r3, #3
 8007aa8:	d105      	bne.n	8007ab6 <ACIM_FREQ_CTRL_DSM_Quick_Stop_Exit+0x36>
      (AppHandler->acim_statemachine->requested_state ==(uint8_t)ACIM_FREQ_CTRL_DSM_OPERATION ) )
  {
    AppHandler->acim_statemachine->requested_state = AppHandler->acim_statemachine->current_state;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aae:	68fa      	ldr	r2, [r7, #12]
 8007ab0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007ab2:	7a12      	ldrb	r2, [r2, #8]
 8007ab4:	725a      	strb	r2, [r3, #9]
  }
}
 8007ab6:	3714      	adds	r7, #20
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr

08007ac0 <ACIM_FREQ_CTRL_DSM_Rampdown_Entry>:
void ACIM_FREQ_CTRL_DSM_Rampdown_Entry (void* HandlePtr)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b084      	sub	sp, #16
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  ACIM_FREQ_CTRL_STATUS_t status;
  ACIM_FREQ_CTRL_t* AppHandler = (ACIM_FREQ_CTRL_t*)HandlePtr;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	60fb      	str	r3, [r7, #12]

  status = ACIM_FREQ_CTRL_SetSpeed((ACIM_FREQ_CTRL_t*)HandlePtr,0);
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	2100      	movs	r1, #0
 8007ad0:	f7ff fa68 	bl	8006fa4 <ACIM_FREQ_CTRL_SetSpeed>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	72fb      	strb	r3, [r7, #11]

  if (status != ACIM_FREQ_CTRL_STATUS_SUCCESS)
 8007ad8:	7afb      	ldrb	r3, [r7, #11]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d005      	beq.n	8007aea <ACIM_FREQ_CTRL_DSM_Rampdown_Entry+0x2a>
  {
    AUTOMATION_SM_RequestState(AppHandler->acim_statemachine,(uint8_t)ACIM_FREQ_CTRL_DSM_ERROR);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	2107      	movs	r1, #7
 8007ae6:	f7fe fc6b 	bl	80063c0 <AUTOMATION_SM_RequestState>
  }
}
 8007aea:	3710      	adds	r7, #16
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <ACIM_FREQ_CTRL_DSM_Rampdown_Action>:
void ACIM_FREQ_CTRL_DSM_Rampdown_Action (void* HandlePtr)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b084      	sub	sp, #16
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  ACIM_FREQ_CTRL_t* AppHandler = (ACIM_FREQ_CTRL_t*)HandlePtr;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	60fb      	str	r3, [r7, #12]
  if (*AppHandler->speed_set_ptr == 0)
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d105      	bne.n	8007b12 <ACIM_FREQ_CTRL_DSM_Rampdown_Action+0x22>
  {
    AUTOMATION_SM_RequestState(AppHandler->acim_statemachine,(uint8_t)ACIM_FREQ_CTRL_DSM_COAST_STOP);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	2104      	movs	r1, #4
 8007b0e:	f7fe fc57 	bl	80063c0 <AUTOMATION_SM_RequestState>
  }
}
 8007b12:	3710      	adds	r7, #16
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <ACIM_FREQ_CTRL_DSM_Error_Entry>:
void ACIM_FREQ_CTRL_DSM_Error_Entry (void* HandlePtr)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b082      	sub	sp, #8
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  ACIM_FREQ_CTRL_MotorStop((ACIM_FREQ_CTRL_t*)HandlePtr);
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f7ff f98f 	bl	8006e44 <ACIM_FREQ_CTRL_MotorStop>
}
 8007b26:	3708      	adds	r7, #8
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}

08007b2c <ACIM_FREQ_CTRL_DSM_Error_Action>:
void ACIM_FREQ_CTRL_DSM_Error_Action (void* HandlePtr)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b084      	sub	sp, #16
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  ACIM_FREQ_CTRL_t* AppHandler = (ACIM_FREQ_CTRL_t*)HandlePtr;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	60fb      	str	r3, [r7, #12]
  if (ACIM_FREQ_CTRL_CW_ERROR_RESET ==AppHandler->cw_state )
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007b3e:	2b09      	cmp	r3, #9
 8007b40:	d108      	bne.n	8007b54 <ACIM_FREQ_CTRL_DSM_Error_Action+0x28>
  {
    ACIM_FREQ_CTRL_ClearErrorState(AppHandler);
 8007b42:	68f8      	ldr	r0, [r7, #12]
 8007b44:	f7ff fdde 	bl	8007704 <ACIM_FREQ_CTRL_ClearErrorState>
    AUTOMATION_SM_RequestState(AppHandler->acim_statemachine,(uint8_t)ACIM_FREQ_CTRL_DSM_SWITCHED_OFF);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	2100      	movs	r1, #0
 8007b50:	f7fe fc36 	bl	80063c0 <AUTOMATION_SM_RequestState>
  }
}
 8007b54:	3710      	adds	r7, #16
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
 8007b5a:	bf00      	nop

08007b5c <ACIM_FREQ_CTRL_DSM_Error_Exit>:
void ACIM_FREQ_CTRL_DSM_Error_Exit(void* HandlePtr)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b084      	sub	sp, #16
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  ACIM_FREQ_CTRL_t* AppHandler = (ACIM_FREQ_CTRL_t*)HandlePtr;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	60fb      	str	r3, [r7, #12]
  if ((AppHandler->acim_statemachine->requested_state != (uint8_t)ACIM_FREQ_CTRL_DSM_SWITCHED_OFF ) &&
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b6c:	7a5b      	ldrb	r3, [r3, #9]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d010      	beq.n	8007b94 <ACIM_FREQ_CTRL_DSM_Error_Exit+0x38>
      (AppHandler->acim_statemachine->requested_state != (uint8_t)ACIM_FREQ_CTRL_DSM_USER_DEFINE_11 ) &&
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b76:	7a5b      	ldrb	r3, [r3, #9]
  }
}
void ACIM_FREQ_CTRL_DSM_Error_Exit(void* HandlePtr)
{
  ACIM_FREQ_CTRL_t* AppHandler = (ACIM_FREQ_CTRL_t*)HandlePtr;
  if ((AppHandler->acim_statemachine->requested_state != (uint8_t)ACIM_FREQ_CTRL_DSM_SWITCHED_OFF ) &&
 8007b78:	2b0b      	cmp	r3, #11
 8007b7a:	d00b      	beq.n	8007b94 <ACIM_FREQ_CTRL_DSM_Error_Exit+0x38>
      (AppHandler->acim_statemachine->requested_state != (uint8_t)ACIM_FREQ_CTRL_DSM_USER_DEFINE_11 ) &&
      (AppHandler->acim_statemachine->requested_state != (uint8_t)ACIM_FREQ_CTRL_DSM_USER_DEFINE_12 ))
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b80:	7a5b      	ldrb	r3, [r3, #9]
}
void ACIM_FREQ_CTRL_DSM_Error_Exit(void* HandlePtr)
{
  ACIM_FREQ_CTRL_t* AppHandler = (ACIM_FREQ_CTRL_t*)HandlePtr;
  if ((AppHandler->acim_statemachine->requested_state != (uint8_t)ACIM_FREQ_CTRL_DSM_SWITCHED_OFF ) &&
      (AppHandler->acim_statemachine->requested_state != (uint8_t)ACIM_FREQ_CTRL_DSM_USER_DEFINE_11 ) &&
 8007b82:	2b0c      	cmp	r3, #12
 8007b84:	d006      	beq.n	8007b94 <ACIM_FREQ_CTRL_DSM_Error_Exit+0x38>
      (AppHandler->acim_statemachine->requested_state != (uint8_t)ACIM_FREQ_CTRL_DSM_USER_DEFINE_12 ))
  {
    AppHandler->acim_statemachine->requested_state = AppHandler->acim_statemachine->current_state;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b8a:	68fa      	ldr	r2, [r7, #12]
 8007b8c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007b8e:	7a12      	ldrb	r2, [r2, #8]
 8007b90:	725a      	strb	r2, [r3, #9]
 8007b92:	e00b      	b.n	8007bac <ACIM_FREQ_CTRL_DSM_Error_Exit+0x50>
  }
  else
  {
    if (AppHandler->acim_statemachine->transition_request ==1U)
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	0c1b      	lsrs	r3, r3, #16
 8007b9c:	f003 0301 	and.w	r3, r3, #1
 8007ba0:	b2db      	uxtb	r3, r3
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	d102      	bne.n	8007bac <ACIM_FREQ_CTRL_DSM_Error_Exit+0x50>
    {
      ACIM_FREQ_CTRL_ClearErrorState(AppHandler);
 8007ba6:	68f8      	ldr	r0, [r7, #12]
 8007ba8:	f7ff fdac 	bl	8007704 <ACIM_FREQ_CTRL_ClearErrorState>
    }
  }
}
 8007bac:	3710      	adds	r7, #16
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
 8007bb2:	bf00      	nop

08007bb4 <ACIM_FREQ_CTRL_DSM_Trouble_Action>:
void ACIM_FREQ_CTRL_DSM_Trouble_Action(void* HandlePtr)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b084      	sub	sp, #16
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  ACIM_FREQ_CTRL_t* AppHandler = (ACIM_FREQ_CTRL_t*)HandlePtr;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	60fb      	str	r3, [r7, #12]
  if (AppHandler->cw_state == ACIM_FREQ_CTRL_CW_ERROR)
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007bc6:	2b07      	cmp	r3, #7
 8007bc8:	d106      	bne.n	8007bd8 <ACIM_FREQ_CTRL_DSM_Trouble_Action+0x24>
  {
    AUTOMATION_SM_RequestState(AppHandler->acim_statemachine,(uint8_t)ACIM_FREQ_CTRL_DSM_ERROR);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bce:	4618      	mov	r0, r3
 8007bd0:	2107      	movs	r1, #7
 8007bd2:	f7fe fbf5 	bl	80063c0 <AUTOMATION_SM_RequestState>
 8007bd6:	e022      	b.n	8007c1e <ACIM_FREQ_CTRL_DSM_Trouble_Action+0x6a>
  }
  else if (AppHandler->cw_state == ACIM_FREQ_CTRL_CW_RESUME_OPERATION)
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007bde:	2b0a      	cmp	r3, #10
 8007be0:	d106      	bne.n	8007bf0 <ACIM_FREQ_CTRL_DSM_Trouble_Action+0x3c>
  {
    AUTOMATION_SM_RequestState(AppHandler->acim_statemachine,(uint8_t)ACIM_FREQ_CTRL_DSM_OPERATION);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007be6:	4618      	mov	r0, r3
 8007be8:	2103      	movs	r1, #3
 8007bea:	f7fe fbe9 	bl	80063c0 <AUTOMATION_SM_RequestState>
 8007bee:	e016      	b.n	8007c1e <ACIM_FREQ_CTRL_DSM_Trouble_Action+0x6a>
  }
  else if (AppHandler->cw_state == ACIM_FREQ_CTRL_CW_RESUME_SWITCHED_ON)
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007bf6:	2b0b      	cmp	r3, #11
 8007bf8:	d106      	bne.n	8007c08 <ACIM_FREQ_CTRL_DSM_Trouble_Action+0x54>
  {
    AUTOMATION_SM_RequestState(AppHandler->acim_statemachine,(uint8_t)ACIM_FREQ_CTRL_DSM_SWITCHED_ON);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bfe:	4618      	mov	r0, r3
 8007c00:	2102      	movs	r1, #2
 8007c02:	f7fe fbdd 	bl	80063c0 <AUTOMATION_SM_RequestState>
 8007c06:	e00a      	b.n	8007c1e <ACIM_FREQ_CTRL_DSM_Trouble_Action+0x6a>
  }
  else if (AppHandler->cw_state == ACIM_FREQ_CTRL_CW_RESUME_ENABLED)
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007c0e:	2b0c      	cmp	r3, #12
 8007c10:	d105      	bne.n	8007c1e <ACIM_FREQ_CTRL_DSM_Trouble_Action+0x6a>
  {
    AUTOMATION_SM_RequestState(AppHandler->acim_statemachine,(uint8_t)ACIM_FREQ_CTRL_DSM_ENABLED);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c16:	4618      	mov	r0, r3
 8007c18:	2101      	movs	r1, #1
 8007c1a:	f7fe fbd1 	bl	80063c0 <AUTOMATION_SM_RequestState>
  }
  else
  {
  }
}
 8007c1e:	3710      	adds	r7, #16
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}

08007c24 <CCU80_3_IRQHandler>:

void ACIM_FREQ_CTRL_0_PrimaryControlLoop(ACIM_FREQ_CTRL_t*const HandlePtr);  
void ACIM_FREQ_CTRL_0_SetValueProcessing(ACIM_FREQ_CTRL_t*const HandlePtr);

void ACIM_FREQ_CTRL_0_FastControlLoop_ISR()
{  
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b082      	sub	sp, #8
 8007c28:	af00      	add	r7, sp, #0
  int32_t temp_angle;
/************************* Fast Control Loop ***************************/

    if(ACIM_FREQ_CTRL_0.fcl_div_value == ACIM_FREQ_CTRL_0.acim_config_ptr->fcl_divider)
 8007c2a:	4b35      	ldr	r3, [pc, #212]	; (8007d00 <CCU80_3_IRQHandler+0xdc>)
 8007c2c:	f893 20a6 	ldrb.w	r2, [r3, #166]	; 0xa6
 8007c30:	4b33      	ldr	r3, [pc, #204]	; (8007d00 <CCU80_3_IRQHandler+0xdc>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	7d1b      	ldrb	r3, [r3, #20]
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d13b      	bne.n	8007cb2 <CCU80_3_IRQHandler+0x8e>
    {
      ACIM_FREQ_CTRL_0.fcl_div_value = 1;
 8007c3a:	4b31      	ldr	r3, [pc, #196]	; (8007d00 <CCU80_3_IRQHandler+0xdc>)
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6

      if(ACIM_FREQ_CTRL_0.msm_state != ACIM_FREQ_CTRL_MSM_BOOTSTRAP)
 8007c42:	4b2f      	ldr	r3, [pc, #188]	; (8007d00 <CCU80_3_IRQHandler+0xdc>)
 8007c44:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007c48:	2b09      	cmp	r3, #9
 8007c4a:	d03a      	beq.n	8007cc2 <CCU80_3_IRQHandler+0x9e>
      {

        /*Current is 0 because current measurement is disabled.*/
        ACIM_FREQ_CTRL_0.motor_current = 0U;
 8007c4c:	4b2c      	ldr	r3, [pc, #176]	; (8007d00 <CCU80_3_IRQHandler+0xdc>)
 8007c4e:	2200      	movs	r2, #0
 8007c50:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        /*Updating input of v/f control*/
        ACIM_FREQ_CTRL_0.vf_control_ptr->input = (int32_t)*ACIM_FREQ_CTRL_0.speed_set_ptr;
 8007c54:	4b2a      	ldr	r3, [pc, #168]	; (8007d00 <CCU80_3_IRQHandler+0xdc>)
 8007c56:	689b      	ldr	r3, [r3, #8]
 8007c58:	4a29      	ldr	r2, [pc, #164]	; (8007d00 <CCU80_3_IRQHandler+0xdc>)
 8007c5a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8007c5c:	6812      	ldr	r2, [r2, #0]
 8007c5e:	609a      	str	r2, [r3, #8]

        /*amplitude calculation*/
        ACIM_FREQ_CTRL_Amplitude_Calculation(&ACIM_FREQ_CTRL_0);
 8007c60:	4827      	ldr	r0, [pc, #156]	; (8007d00 <CCU80_3_IRQHandler+0xdc>)
 8007c62:	f7ff fb1f 	bl	80072a4 <ACIM_FREQ_CTRL_Amplitude_Calculation>

        /*angle calculation*/
        ACIM_FREQ_CTRL_AngleRamp(&ACIM_FREQ_CTRL_0);
 8007c66:	4826      	ldr	r0, [pc, #152]	; (8007d00 <CCU80_3_IRQHandler+0xdc>)
 8007c68:	f7ff fb48 	bl	80072fc <ACIM_FREQ_CTRL_AngleRamp>


        /*Update Modulation Angle and Amplitude before calling svm*/
        temp_angle = ACIM_FREQ_CTRL_0.vf_control_ptr->output_angle + (ACIM_FREQ_CTRL_0.angle_offset * ACIM_FREQ_CTRL_0.motor_direction);
 8007c6c:	4b24      	ldr	r3, [pc, #144]	; (8007d00 <CCU80_3_IRQHandler+0xdc>)
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	68db      	ldr	r3, [r3, #12]
 8007c72:	4619      	mov	r1, r3
 8007c74:	4b22      	ldr	r3, [pc, #136]	; (8007d00 <CCU80_3_IRQHandler+0xdc>)
 8007c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c78:	4a21      	ldr	r2, [pc, #132]	; (8007d00 <CCU80_3_IRQHandler+0xdc>)
 8007c7a:	f892 20a4 	ldrb.w	r2, [r2, #164]	; 0xa4
 8007c7e:	b252      	sxtb	r2, r2
 8007c80:	fb02 f303 	mul.w	r3, r2, r3
 8007c84:	440b      	add	r3, r1
 8007c86:	607b      	str	r3, [r7, #4]
        ACIM_FREQ_CTRL_0.angle     = (uint32_t)(temp_angle);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	4a1d      	ldr	r2, [pc, #116]	; (8007d00 <CCU80_3_IRQHandler+0xdc>)
 8007c8c:	67d3      	str	r3, [r2, #124]	; 0x7c
        ACIM_FREQ_CTRL_0.amplitude = ACIM_FREQ_CTRL_0.vf_control_ptr->output_amplitude;
 8007c8e:	4b1c      	ldr	r3, [pc, #112]	; (8007d00 <CCU80_3_IRQHandler+0xdc>)
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	691b      	ldr	r3, [r3, #16]
 8007c94:	4a1a      	ldr	r2, [pc, #104]	; (8007d00 <CCU80_3_IRQHandler+0xdc>)
 8007c96:	6793      	str	r3, [r2, #120]	; 0x78

        /*Call SVM*/
        PWM_SVM_SVMUpdate(ACIM_FREQ_CTRL_0.pwm_svm_ptr,(uint16_t)ACIM_FREQ_CTRL_0.amplitude,ACIM_FREQ_CTRL_0.angle);
 8007c98:	4b19      	ldr	r3, [pc, #100]	; (8007d00 <CCU80_3_IRQHandler+0xdc>)
 8007c9a:	6859      	ldr	r1, [r3, #4]
 8007c9c:	4b18      	ldr	r3, [pc, #96]	; (8007d00 <CCU80_3_IRQHandler+0xdc>)
 8007c9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ca0:	b29a      	uxth	r2, r3
 8007ca2:	4b17      	ldr	r3, [pc, #92]	; (8007d00 <CCU80_3_IRQHandler+0xdc>)
 8007ca4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ca6:	4608      	mov	r0, r1
 8007ca8:	4611      	mov	r1, r2
 8007caa:	461a      	mov	r2, r3
 8007cac:	f001 ffe8 	bl	8009c80 <__PWM_SVM_SVMUpdate_veneer>
 8007cb0:	e007      	b.n	8007cc2 <CCU80_3_IRQHandler+0x9e>
      }

    }
    else
    {
      ACIM_FREQ_CTRL_0.fcl_div_value++;
 8007cb2:	4b13      	ldr	r3, [pc, #76]	; (8007d00 <CCU80_3_IRQHandler+0xdc>)
 8007cb4:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8007cb8:	3301      	adds	r3, #1
 8007cba:	b2da      	uxtb	r2, r3
 8007cbc:	4b10      	ldr	r3, [pc, #64]	; (8007d00 <CCU80_3_IRQHandler+0xdc>)
 8007cbe:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
    }

/************************* calling control loops ***************************/

    if(ACIM_FREQ_CTRL_0.pcl_div_value == ACIM_FREQ_CTRL_0.acim_config_ptr->pcl_divider)
 8007cc2:	4b0f      	ldr	r3, [pc, #60]	; (8007d00 <CCU80_3_IRQHandler+0xdc>)
 8007cc4:	f893 20a7 	ldrb.w	r2, [r3, #167]	; 0xa7
 8007cc8:	4b0d      	ldr	r3, [pc, #52]	; (8007d00 <CCU80_3_IRQHandler+0xdc>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	7d5b      	ldrb	r3, [r3, #21]
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d10a      	bne.n	8007ce8 <CCU80_3_IRQHandler+0xc4>
    {
      ACIM_FREQ_CTRL_0_SetValueProcessing(&ACIM_FREQ_CTRL_0);
 8007cd2:	480b      	ldr	r0, [pc, #44]	; (8007d00 <CCU80_3_IRQHandler+0xdc>)
 8007cd4:	f000 f820 	bl	8007d18 <ACIM_FREQ_CTRL_0_SetValueProcessing>

	  ACIM_FREQ_CTRL_0_PrimaryControlLoop(&ACIM_FREQ_CTRL_0); 
 8007cd8:	4809      	ldr	r0, [pc, #36]	; (8007d00 <CCU80_3_IRQHandler+0xdc>)
 8007cda:	f000 f813 	bl	8007d04 <ACIM_FREQ_CTRL_0_PrimaryControlLoop>
      ACIM_FREQ_CTRL_0.pcl_div_value =(uint8_t)1;
 8007cde:	4b08      	ldr	r3, [pc, #32]	; (8007d00 <CCU80_3_IRQHandler+0xdc>)
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
 8007ce6:	e007      	b.n	8007cf8 <CCU80_3_IRQHandler+0xd4>
    }
    else
    {
      ACIM_FREQ_CTRL_0.pcl_div_value++;
 8007ce8:	4b05      	ldr	r3, [pc, #20]	; (8007d00 <CCU80_3_IRQHandler+0xdc>)
 8007cea:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 8007cee:	3301      	adds	r3, #1
 8007cf0:	b2da      	uxtb	r2, r3
 8007cf2:	4b03      	ldr	r3, [pc, #12]	; (8007d00 <CCU80_3_IRQHandler+0xdc>)
 8007cf4:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
    }

}
 8007cf8:	3708      	adds	r7, #8
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}
 8007cfe:	bf00      	nop
 8007d00:	1fffd090 	.word	0x1fffd090

08007d04 <ACIM_FREQ_CTRL_0_PrimaryControlLoop>:

/*************** Primary control loop Functions ****************************/
 /* This Function execute primary control loop functionality*/
void ACIM_FREQ_CTRL_0_PrimaryControlLoop(ACIM_FREQ_CTRL_t*const HandlePtr)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b082      	sub	sp, #8
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  if(HandlePtr->msm_state != ACIM_FREQ_CTRL_MSM_BOOTSTRAP)
  {

  }
  /* Call motor control state machine */
  ACIM_FREQ_CTRL_MSM(HandlePtr);
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f7ff fb9f 	bl	8007450 <ACIM_FREQ_CTRL_MSM>
}
 8007d12:	3708      	adds	r7, #8
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <ACIM_FREQ_CTRL_0_SetValueProcessing>:

/*************** Set Value Processing Function ****************************/
/* This Function execute set value processing control loop functionality*/
void ACIM_FREQ_CTRL_0_SetValueProcessing(ACIM_FREQ_CTRL_t*const HandlePtr)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b083      	sub	sp, #12
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]

}
 8007d20:	370c      	adds	r7, #12
 8007d22:	46bd      	mov	sp, r7
 8007d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d28:	4770      	bx	lr
 8007d2a:	bf00      	nop

08007d2c <CCU81_0_IRQHandler>:

void ACIM_FREQ_CTRL_1_PrimaryControlLoop(ACIM_FREQ_CTRL_t*const HandlePtr);  
void ACIM_FREQ_CTRL_1_SetValueProcessing(ACIM_FREQ_CTRL_t*const HandlePtr);

void ACIM_FREQ_CTRL_1_FastControlLoop_ISR()
{  
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b082      	sub	sp, #8
 8007d30:	af00      	add	r7, sp, #0
  int32_t temp_angle;
/************************* Fast Control Loop ***************************/

    if(ACIM_FREQ_CTRL_1.fcl_div_value == ACIM_FREQ_CTRL_1.acim_config_ptr->fcl_divider)
 8007d32:	4b35      	ldr	r3, [pc, #212]	; (8007e08 <CCU81_0_IRQHandler+0xdc>)
 8007d34:	f893 20a6 	ldrb.w	r2, [r3, #166]	; 0xa6
 8007d38:	4b33      	ldr	r3, [pc, #204]	; (8007e08 <CCU81_0_IRQHandler+0xdc>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	7d1b      	ldrb	r3, [r3, #20]
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	d13b      	bne.n	8007dba <CCU81_0_IRQHandler+0x8e>
    {
      ACIM_FREQ_CTRL_1.fcl_div_value = 1;
 8007d42:	4b31      	ldr	r3, [pc, #196]	; (8007e08 <CCU81_0_IRQHandler+0xdc>)
 8007d44:	2201      	movs	r2, #1
 8007d46:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6

      if(ACIM_FREQ_CTRL_1.msm_state != ACIM_FREQ_CTRL_MSM_BOOTSTRAP)
 8007d4a:	4b2f      	ldr	r3, [pc, #188]	; (8007e08 <CCU81_0_IRQHandler+0xdc>)
 8007d4c:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007d50:	2b09      	cmp	r3, #9
 8007d52:	d03a      	beq.n	8007dca <CCU81_0_IRQHandler+0x9e>
      {

        /*Current is 0 because current measurement is disabled.*/
        ACIM_FREQ_CTRL_1.motor_current = 0U;
 8007d54:	4b2c      	ldr	r3, [pc, #176]	; (8007e08 <CCU81_0_IRQHandler+0xdc>)
 8007d56:	2200      	movs	r2, #0
 8007d58:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        /*Updating input of v/f control*/
        ACIM_FREQ_CTRL_1.vf_control_ptr->input = (int32_t)*ACIM_FREQ_CTRL_1.speed_set_ptr;
 8007d5c:	4b2a      	ldr	r3, [pc, #168]	; (8007e08 <CCU81_0_IRQHandler+0xdc>)
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	4a29      	ldr	r2, [pc, #164]	; (8007e08 <CCU81_0_IRQHandler+0xdc>)
 8007d62:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8007d64:	6812      	ldr	r2, [r2, #0]
 8007d66:	609a      	str	r2, [r3, #8]

        /*amplitude calculation*/
        ACIM_FREQ_CTRL_Amplitude_Calculation(&ACIM_FREQ_CTRL_1);
 8007d68:	4827      	ldr	r0, [pc, #156]	; (8007e08 <CCU81_0_IRQHandler+0xdc>)
 8007d6a:	f7ff fa9b 	bl	80072a4 <ACIM_FREQ_CTRL_Amplitude_Calculation>

        /*angle calculation*/
        ACIM_FREQ_CTRL_AngleRamp(&ACIM_FREQ_CTRL_1);
 8007d6e:	4826      	ldr	r0, [pc, #152]	; (8007e08 <CCU81_0_IRQHandler+0xdc>)
 8007d70:	f7ff fac4 	bl	80072fc <ACIM_FREQ_CTRL_AngleRamp>


        /*Update Modulation Angle and Amplitude before calling svm*/
        temp_angle = ACIM_FREQ_CTRL_1.vf_control_ptr->output_angle + (ACIM_FREQ_CTRL_1.angle_offset * ACIM_FREQ_CTRL_1.motor_direction);
 8007d74:	4b24      	ldr	r3, [pc, #144]	; (8007e08 <CCU81_0_IRQHandler+0xdc>)
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	68db      	ldr	r3, [r3, #12]
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	4b22      	ldr	r3, [pc, #136]	; (8007e08 <CCU81_0_IRQHandler+0xdc>)
 8007d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d80:	4a21      	ldr	r2, [pc, #132]	; (8007e08 <CCU81_0_IRQHandler+0xdc>)
 8007d82:	f892 20a4 	ldrb.w	r2, [r2, #164]	; 0xa4
 8007d86:	b252      	sxtb	r2, r2
 8007d88:	fb02 f303 	mul.w	r3, r2, r3
 8007d8c:	440b      	add	r3, r1
 8007d8e:	607b      	str	r3, [r7, #4]
        ACIM_FREQ_CTRL_1.angle     = (uint32_t)(temp_angle);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	4a1d      	ldr	r2, [pc, #116]	; (8007e08 <CCU81_0_IRQHandler+0xdc>)
 8007d94:	67d3      	str	r3, [r2, #124]	; 0x7c
        ACIM_FREQ_CTRL_1.amplitude = ACIM_FREQ_CTRL_1.vf_control_ptr->output_amplitude;
 8007d96:	4b1c      	ldr	r3, [pc, #112]	; (8007e08 <CCU81_0_IRQHandler+0xdc>)
 8007d98:	689b      	ldr	r3, [r3, #8]
 8007d9a:	691b      	ldr	r3, [r3, #16]
 8007d9c:	4a1a      	ldr	r2, [pc, #104]	; (8007e08 <CCU81_0_IRQHandler+0xdc>)
 8007d9e:	6793      	str	r3, [r2, #120]	; 0x78

        /*Call SVM*/
        PWM_SVM_SVMUpdate(ACIM_FREQ_CTRL_1.pwm_svm_ptr,(uint16_t)ACIM_FREQ_CTRL_1.amplitude,ACIM_FREQ_CTRL_1.angle);
 8007da0:	4b19      	ldr	r3, [pc, #100]	; (8007e08 <CCU81_0_IRQHandler+0xdc>)
 8007da2:	6859      	ldr	r1, [r3, #4]
 8007da4:	4b18      	ldr	r3, [pc, #96]	; (8007e08 <CCU81_0_IRQHandler+0xdc>)
 8007da6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007da8:	b29a      	uxth	r2, r3
 8007daa:	4b17      	ldr	r3, [pc, #92]	; (8007e08 <CCU81_0_IRQHandler+0xdc>)
 8007dac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dae:	4608      	mov	r0, r1
 8007db0:	4611      	mov	r1, r2
 8007db2:	461a      	mov	r2, r3
 8007db4:	f001 ff64 	bl	8009c80 <__PWM_SVM_SVMUpdate_veneer>
 8007db8:	e007      	b.n	8007dca <CCU81_0_IRQHandler+0x9e>
      }

    }
    else
    {
      ACIM_FREQ_CTRL_1.fcl_div_value++;
 8007dba:	4b13      	ldr	r3, [pc, #76]	; (8007e08 <CCU81_0_IRQHandler+0xdc>)
 8007dbc:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8007dc0:	3301      	adds	r3, #1
 8007dc2:	b2da      	uxtb	r2, r3
 8007dc4:	4b10      	ldr	r3, [pc, #64]	; (8007e08 <CCU81_0_IRQHandler+0xdc>)
 8007dc6:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
    }

/************************* calling control loops ***************************/

    if(ACIM_FREQ_CTRL_1.pcl_div_value == ACIM_FREQ_CTRL_1.acim_config_ptr->pcl_divider)
 8007dca:	4b0f      	ldr	r3, [pc, #60]	; (8007e08 <CCU81_0_IRQHandler+0xdc>)
 8007dcc:	f893 20a7 	ldrb.w	r2, [r3, #167]	; 0xa7
 8007dd0:	4b0d      	ldr	r3, [pc, #52]	; (8007e08 <CCU81_0_IRQHandler+0xdc>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	7d5b      	ldrb	r3, [r3, #21]
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	d10a      	bne.n	8007df0 <CCU81_0_IRQHandler+0xc4>
    {
      ACIM_FREQ_CTRL_1_SetValueProcessing(&ACIM_FREQ_CTRL_1);
 8007dda:	480b      	ldr	r0, [pc, #44]	; (8007e08 <CCU81_0_IRQHandler+0xdc>)
 8007ddc:	f000 f820 	bl	8007e20 <ACIM_FREQ_CTRL_1_SetValueProcessing>

	  ACIM_FREQ_CTRL_1_PrimaryControlLoop(&ACIM_FREQ_CTRL_1); 
 8007de0:	4809      	ldr	r0, [pc, #36]	; (8007e08 <CCU81_0_IRQHandler+0xdc>)
 8007de2:	f000 f813 	bl	8007e0c <ACIM_FREQ_CTRL_1_PrimaryControlLoop>
      ACIM_FREQ_CTRL_1.pcl_div_value =(uint8_t)1;
 8007de6:	4b08      	ldr	r3, [pc, #32]	; (8007e08 <CCU81_0_IRQHandler+0xdc>)
 8007de8:	2201      	movs	r2, #1
 8007dea:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
 8007dee:	e007      	b.n	8007e00 <CCU81_0_IRQHandler+0xd4>
    }
    else
    {
      ACIM_FREQ_CTRL_1.pcl_div_value++;
 8007df0:	4b05      	ldr	r3, [pc, #20]	; (8007e08 <CCU81_0_IRQHandler+0xdc>)
 8007df2:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 8007df6:	3301      	adds	r3, #1
 8007df8:	b2da      	uxtb	r2, r3
 8007dfa:	4b03      	ldr	r3, [pc, #12]	; (8007e08 <CCU81_0_IRQHandler+0xdc>)
 8007dfc:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
    }

}
 8007e00:	3708      	adds	r7, #8
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop
 8007e08:	1fffd3e0 	.word	0x1fffd3e0

08007e0c <ACIM_FREQ_CTRL_1_PrimaryControlLoop>:

/*************** Primary control loop Functions ****************************/
 /* This Function execute primary control loop functionality*/
void ACIM_FREQ_CTRL_1_PrimaryControlLoop(ACIM_FREQ_CTRL_t*const HandlePtr)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b082      	sub	sp, #8
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  if(HandlePtr->msm_state != ACIM_FREQ_CTRL_MSM_BOOTSTRAP)
  {

  }
  /* Call motor control state machine */
  ACIM_FREQ_CTRL_MSM(HandlePtr);
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f7ff fb1b 	bl	8007450 <ACIM_FREQ_CTRL_MSM>
}
 8007e1a:	3708      	adds	r7, #8
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}

08007e20 <ACIM_FREQ_CTRL_1_SetValueProcessing>:

/*************** Set Value Processing Function ****************************/
/* This Function execute set value processing control loop functionality*/
void ACIM_FREQ_CTRL_1_SetValueProcessing(ACIM_FREQ_CTRL_t*const HandlePtr)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b083      	sub	sp, #12
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]

}
 8007e28:	370c      	adds	r7, #12
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e30:	4770      	bx	lr
 8007e32:	bf00      	nop

08007e34 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
DAVE_STATUS_t DAVE_Init(void)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b082      	sub	sp, #8
 8007e38:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 8007e3e:	48b1      	ldr	r0, [pc, #708]	; (8008104 <DAVE_Init+0x2d0>)
 8007e40:	f7fd fbea 	bl	8005618 <CLOCK_XMC4_Init>
 8007e44:	4603      	mov	r3, r0
 8007e46:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 8007e48:	79fb      	ldrb	r3, [r7, #7]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d104      	bne.n	8007e58 <DAVE_Init+0x24>
  {
	 /**  Initialization of ACIM_FREQ_CTRL APP instance ACIM_FREQ_CTRL_0 */
	 init_status = (DAVE_STATUS_t)ACIM_FREQ_CTRL_Init(&ACIM_FREQ_CTRL_0); 
 8007e4e:	48ae      	ldr	r0, [pc, #696]	; (8008108 <DAVE_Init+0x2d4>)
 8007e50:	f7fe ff12 	bl	8006c78 <ACIM_FREQ_CTRL_Init>
 8007e54:	4603      	mov	r3, r0
 8007e56:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8007e58:	79fb      	ldrb	r3, [r7, #7]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d104      	bne.n	8007e68 <DAVE_Init+0x34>
  {
	 /**  Initialization of ACIM_FREQ_CTRL APP instance ACIM_FREQ_CTRL_1 */
	 init_status = (DAVE_STATUS_t)ACIM_FREQ_CTRL_Init(&ACIM_FREQ_CTRL_1); 
 8007e5e:	48ab      	ldr	r0, [pc, #684]	; (800810c <DAVE_Init+0x2d8>)
 8007e60:	f7fe ff0a 	bl	8006c78 <ACIM_FREQ_CTRL_Init>
 8007e64:	4603      	mov	r3, r0
 8007e66:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8007e68:	79fb      	ldrb	r3, [r7, #7]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d104      	bne.n	8007e78 <DAVE_Init+0x44>
  {
	 /**  Initialization of DIGITAL_IO APP instance Cooling_FAN */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&Cooling_FAN); 
 8007e6e:	48a8      	ldr	r0, [pc, #672]	; (8008110 <DAVE_Init+0x2dc>)
 8007e70:	f7fd fb3e 	bl	80054f0 <DIGITAL_IO_Init>
 8007e74:	4603      	mov	r3, r0
 8007e76:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8007e78:	79fb      	ldrb	r3, [r7, #7]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d104      	bne.n	8007e88 <DAVE_Init+0x54>
  {
	 /**  Initialization of DIGITAL_IO APP instance Disable_Gate_Driver_M3 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&Disable_Gate_Driver_M3); 
 8007e7e:	48a5      	ldr	r0, [pc, #660]	; (8008114 <DAVE_Init+0x2e0>)
 8007e80:	f7fd fb36 	bl	80054f0 <DIGITAL_IO_Init>
 8007e84:	4603      	mov	r3, r0
 8007e86:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8007e88:	79fb      	ldrb	r3, [r7, #7]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d104      	bne.n	8007e98 <DAVE_Init+0x64>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_2 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_2); 
 8007e8e:	48a2      	ldr	r0, [pc, #648]	; (8008118 <DAVE_Init+0x2e4>)
 8007e90:	f7fd fb2e 	bl	80054f0 <DIGITAL_IO_Init>
 8007e94:	4603      	mov	r3, r0
 8007e96:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8007e98:	79fb      	ldrb	r3, [r7, #7]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d104      	bne.n	8007ea8 <DAVE_Init+0x74>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_3 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_3); 
 8007e9e:	489f      	ldr	r0, [pc, #636]	; (800811c <DAVE_Init+0x2e8>)
 8007ea0:	f7fd fb26 	bl	80054f0 <DIGITAL_IO_Init>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8007ea8:	79fb      	ldrb	r3, [r7, #7]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d104      	bne.n	8007eb8 <DAVE_Init+0x84>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_4 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_4); 
 8007eae:	489c      	ldr	r0, [pc, #624]	; (8008120 <DAVE_Init+0x2ec>)
 8007eb0:	f7fd fb1e 	bl	80054f0 <DIGITAL_IO_Init>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8007eb8:	79fb      	ldrb	r3, [r7, #7]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d104      	bne.n	8007ec8 <DAVE_Init+0x94>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_5 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_5); 
 8007ebe:	4899      	ldr	r0, [pc, #612]	; (8008124 <DAVE_Init+0x2f0>)
 8007ec0:	f7fd fb16 	bl	80054f0 <DIGITAL_IO_Init>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8007ec8:	79fb      	ldrb	r3, [r7, #7]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d104      	bne.n	8007ed8 <DAVE_Init+0xa4>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_6 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_6); 
 8007ece:	4896      	ldr	r0, [pc, #600]	; (8008128 <DAVE_Init+0x2f4>)
 8007ed0:	f7fd fb0e 	bl	80054f0 <DIGITAL_IO_Init>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8007ed8:	79fb      	ldrb	r3, [r7, #7]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d104      	bne.n	8007ee8 <DAVE_Init+0xb4>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_7 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_7); 
 8007ede:	4893      	ldr	r0, [pc, #588]	; (800812c <DAVE_Init+0x2f8>)
 8007ee0:	f7fd fb06 	bl	80054f0 <DIGITAL_IO_Init>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8007ee8:	79fb      	ldrb	r3, [r7, #7]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d104      	bne.n	8007ef8 <DAVE_Init+0xc4>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_8 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_8); 
 8007eee:	4890      	ldr	r0, [pc, #576]	; (8008130 <DAVE_Init+0x2fc>)
 8007ef0:	f7fd fafe 	bl	80054f0 <DIGITAL_IO_Init>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8007ef8:	79fb      	ldrb	r3, [r7, #7]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d104      	bne.n	8007f08 <DAVE_Init+0xd4>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_9 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_9); 
 8007efe:	488d      	ldr	r0, [pc, #564]	; (8008134 <DAVE_Init+0x300>)
 8007f00:	f7fd faf6 	bl	80054f0 <DIGITAL_IO_Init>
 8007f04:	4603      	mov	r3, r0
 8007f06:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8007f08:	79fb      	ldrb	r3, [r7, #7]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d104      	bne.n	8007f18 <DAVE_Init+0xe4>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_10 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_10); 
 8007f0e:	488a      	ldr	r0, [pc, #552]	; (8008138 <DAVE_Init+0x304>)
 8007f10:	f7fd faee 	bl	80054f0 <DIGITAL_IO_Init>
 8007f14:	4603      	mov	r3, r0
 8007f16:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8007f18:	79fb      	ldrb	r3, [r7, #7]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d104      	bne.n	8007f28 <DAVE_Init+0xf4>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_11 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_11); 
 8007f1e:	4887      	ldr	r0, [pc, #540]	; (800813c <DAVE_Init+0x308>)
 8007f20:	f7fd fae6 	bl	80054f0 <DIGITAL_IO_Init>
 8007f24:	4603      	mov	r3, r0
 8007f26:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8007f28:	79fb      	ldrb	r3, [r7, #7]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d104      	bne.n	8007f38 <DAVE_Init+0x104>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_12 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_12); 
 8007f2e:	4884      	ldr	r0, [pc, #528]	; (8008140 <DAVE_Init+0x30c>)
 8007f30:	f7fd fade 	bl	80054f0 <DIGITAL_IO_Init>
 8007f34:	4603      	mov	r3, r0
 8007f36:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8007f38:	79fb      	ldrb	r3, [r7, #7]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d104      	bne.n	8007f48 <DAVE_Init+0x114>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_13 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_13); 
 8007f3e:	4881      	ldr	r0, [pc, #516]	; (8008144 <DAVE_Init+0x310>)
 8007f40:	f7fd fad6 	bl	80054f0 <DIGITAL_IO_Init>
 8007f44:	4603      	mov	r3, r0
 8007f46:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8007f48:	79fb      	ldrb	r3, [r7, #7]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d104      	bne.n	8007f58 <DAVE_Init+0x124>
  {
	 /**  Initialization of DIGITAL_IO APP instance RS485_DIR */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&RS485_DIR); 
 8007f4e:	487e      	ldr	r0, [pc, #504]	; (8008148 <DAVE_Init+0x314>)
 8007f50:	f7fd face 	bl	80054f0 <DIGITAL_IO_Init>
 8007f54:	4603      	mov	r3, r0
 8007f56:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8007f58:	79fb      	ldrb	r3, [r7, #7]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d104      	bne.n	8007f68 <DAVE_Init+0x134>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_15 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_15); 
 8007f5e:	487b      	ldr	r0, [pc, #492]	; (800814c <DAVE_Init+0x318>)
 8007f60:	f7fd fac6 	bl	80054f0 <DIGITAL_IO_Init>
 8007f64:	4603      	mov	r3, r0
 8007f66:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8007f68:	79fb      	ldrb	r3, [r7, #7]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d104      	bne.n	8007f78 <DAVE_Init+0x144>
  {
	 /**  Initialization of DIGITAL_IO APP instance IO_Bit1_DIR */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&IO_Bit1_DIR); 
 8007f6e:	4878      	ldr	r0, [pc, #480]	; (8008150 <DAVE_Init+0x31c>)
 8007f70:	f7fd fabe 	bl	80054f0 <DIGITAL_IO_Init>
 8007f74:	4603      	mov	r3, r0
 8007f76:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8007f78:	79fb      	ldrb	r3, [r7, #7]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d104      	bne.n	8007f88 <DAVE_Init+0x154>
  {
	 /**  Initialization of DIGITAL_IO APP instance IO_Bit0_DIR */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&IO_Bit0_DIR); 
 8007f7e:	4875      	ldr	r0, [pc, #468]	; (8008154 <DAVE_Init+0x320>)
 8007f80:	f7fd fab6 	bl	80054f0 <DIGITAL_IO_Init>
 8007f84:	4603      	mov	r3, r0
 8007f86:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8007f88:	79fb      	ldrb	r3, [r7, #7]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d104      	bne.n	8007f98 <DAVE_Init+0x164>
  {
	 /**  Initialization of DIGITAL_IO APP instance HS_Overtemp */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&HS_Overtemp); 
 8007f8e:	4872      	ldr	r0, [pc, #456]	; (8008158 <DAVE_Init+0x324>)
 8007f90:	f7fd faae 	bl	80054f0 <DIGITAL_IO_Init>
 8007f94:	4603      	mov	r3, r0
 8007f96:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8007f98:	79fb      	ldrb	r3, [r7, #7]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d104      	bne.n	8007fa8 <DAVE_Init+0x174>
  {
	 /**  Initialization of DIGITAL_IO APP instance IO_Bit3_DIR */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&IO_Bit3_DIR); 
 8007f9e:	486f      	ldr	r0, [pc, #444]	; (800815c <DAVE_Init+0x328>)
 8007fa0:	f7fd faa6 	bl	80054f0 <DIGITAL_IO_Init>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8007fa8:	79fb      	ldrb	r3, [r7, #7]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d104      	bne.n	8007fb8 <DAVE_Init+0x184>
  {
	 /**  Initialization of DIGITAL_IO APP instance IO_Bit2_DIR */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&IO_Bit2_DIR); 
 8007fae:	486c      	ldr	r0, [pc, #432]	; (8008160 <DAVE_Init+0x32c>)
 8007fb0:	f7fd fa9e 	bl	80054f0 <DIGITAL_IO_Init>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8007fb8:	79fb      	ldrb	r3, [r7, #7]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d104      	bne.n	8007fc8 <DAVE_Init+0x194>
  {
	 /**  Initialization of DIGITAL_IO APP instance IO_Bit2 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&IO_Bit2); 
 8007fbe:	4869      	ldr	r0, [pc, #420]	; (8008164 <DAVE_Init+0x330>)
 8007fc0:	f7fd fa96 	bl	80054f0 <DIGITAL_IO_Init>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8007fc8:	79fb      	ldrb	r3, [r7, #7]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d104      	bne.n	8007fd8 <DAVE_Init+0x1a4>
  {
	 /**  Initialization of DIGITAL_IO APP instance IO_Bit1 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&IO_Bit1); 
 8007fce:	4866      	ldr	r0, [pc, #408]	; (8008168 <DAVE_Init+0x334>)
 8007fd0:	f7fd fa8e 	bl	80054f0 <DIGITAL_IO_Init>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8007fd8:	79fb      	ldrb	r3, [r7, #7]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d104      	bne.n	8007fe8 <DAVE_Init+0x1b4>
  {
	 /**  Initialization of DIGITAL_IO APP instance IO_Bit0 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&IO_Bit0); 
 8007fde:	4863      	ldr	r0, [pc, #396]	; (800816c <DAVE_Init+0x338>)
 8007fe0:	f7fd fa86 	bl	80054f0 <DIGITAL_IO_Init>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8007fe8:	79fb      	ldrb	r3, [r7, #7]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d104      	bne.n	8007ff8 <DAVE_Init+0x1c4>
  {
	 /**  Initialization of DIGITAL_IO APP instance IO_Bit3 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&IO_Bit3); 
 8007fee:	4860      	ldr	r0, [pc, #384]	; (8008170 <DAVE_Init+0x33c>)
 8007ff0:	f7fd fa7e 	bl	80054f0 <DIGITAL_IO_Init>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8007ff8:	79fb      	ldrb	r3, [r7, #7]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d104      	bne.n	8008008 <DAVE_Init+0x1d4>
  {
	 /**  Initialization of DIGITAL_IO APP instance Disable_Gate_Driver_M1_M2 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&Disable_Gate_Driver_M1_M2); 
 8007ffe:	485d      	ldr	r0, [pc, #372]	; (8008174 <DAVE_Init+0x340>)
 8008000:	f7fd fa76 	bl	80054f0 <DIGITAL_IO_Init>
 8008004:	4603      	mov	r3, r0
 8008006:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008008:	79fb      	ldrb	r3, [r7, #7]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d104      	bne.n	8008018 <DAVE_Init+0x1e4>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_26 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_26); 
 800800e:	485a      	ldr	r0, [pc, #360]	; (8008178 <DAVE_Init+0x344>)
 8008010:	f7fd fa6e 	bl	80054f0 <DIGITAL_IO_Init>
 8008014:	4603      	mov	r3, r0
 8008016:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008018:	79fb      	ldrb	r3, [r7, #7]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d104      	bne.n	8008028 <DAVE_Init+0x1f4>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_27 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_27); 
 800801e:	4857      	ldr	r0, [pc, #348]	; (800817c <DAVE_Init+0x348>)
 8008020:	f7fd fa66 	bl	80054f0 <DIGITAL_IO_Init>
 8008024:	4603      	mov	r3, r0
 8008026:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008028:	79fb      	ldrb	r3, [r7, #7]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d104      	bne.n	8008038 <DAVE_Init+0x204>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_28 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_28); 
 800802e:	4854      	ldr	r0, [pc, #336]	; (8008180 <DAVE_Init+0x34c>)
 8008030:	f7fd fa5e 	bl	80054f0 <DIGITAL_IO_Init>
 8008034:	4603      	mov	r3, r0
 8008036:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008038:	79fb      	ldrb	r3, [r7, #7]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d104      	bne.n	8008048 <DAVE_Init+0x214>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_29 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_29); 
 800803e:	4851      	ldr	r0, [pc, #324]	; (8008184 <DAVE_Init+0x350>)
 8008040:	f7fd fa56 	bl	80054f0 <DIGITAL_IO_Init>
 8008044:	4603      	mov	r3, r0
 8008046:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008048:	79fb      	ldrb	r3, [r7, #7]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d104      	bne.n	8008058 <DAVE_Init+0x224>
  {
	 /**  Initialization of UART APP instance UART_0 */
	 init_status = (DAVE_STATUS_t)UART_Init(&UART_0); 
 800804e:	484e      	ldr	r0, [pc, #312]	; (8008188 <DAVE_Init+0x354>)
 8008050:	f7fa fc08 	bl	8002864 <UART_Init>
 8008054:	4603      	mov	r3, r0
 8008056:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008058:	79fb      	ldrb	r3, [r7, #7]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d104      	bne.n	8008068 <DAVE_Init+0x234>
  {
	 /**  Initialization of ADC_MEASUREMENT APP instance ADC_MEASUREMENT_0 */
	 init_status = (DAVE_STATUS_t)ADC_MEASUREMENT_Init(&ADC_MEASUREMENT_0); 
 800805e:	484b      	ldr	r0, [pc, #300]	; (800818c <DAVE_Init+0x358>)
 8008060:	f7fe fb2e 	bl	80066c0 <ADC_MEASUREMENT_Init>
 8008064:	4603      	mov	r3, r0
 8008066:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008068:	79fb      	ldrb	r3, [r7, #7]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d104      	bne.n	8008078 <DAVE_Init+0x244>
  {
	 /**  Initialization of ANALOG_IO APP instance ANALOG_IO_1 */
	 init_status = (DAVE_STATUS_t)ANALOG_IO_Init(&ANALOG_IO_1); 
 800806e:	4848      	ldr	r0, [pc, #288]	; (8008190 <DAVE_Init+0x35c>)
 8008070:	f7fe fa34 	bl	80064dc <ANALOG_IO_Init>
 8008074:	4603      	mov	r3, r0
 8008076:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008078:	79fb      	ldrb	r3, [r7, #7]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d104      	bne.n	8008088 <DAVE_Init+0x254>
  {
	 /**  Initialization of UART_CONFIG APP instance UART_CONFIG_0 */
	 init_status = (DAVE_STATUS_t)UART_CONFIG_Init(&UART_CONFIG_0); 
 800807e:	4845      	ldr	r0, [pc, #276]	; (8008194 <DAVE_Init+0x360>)
 8008080:	f7fa faae 	bl	80025e0 <UART_CONFIG_Init>
 8008084:	4603      	mov	r3, r0
 8008086:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008088:	79fb      	ldrb	r3, [r7, #7]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d104      	bne.n	8008098 <DAVE_Init+0x264>
  {
	 /**  Initialization of CCU8_SLICE_CONFIG APP instance CCU8_SLICE_CONFIG_0 */
	 init_status = (DAVE_STATUS_t)CCU8_SLICE_CONFIG_Init(&CCU8_SLICE_CONFIG_0); 
 800808e:	4842      	ldr	r0, [pc, #264]	; (8008198 <DAVE_Init+0x364>)
 8008090:	f7fd fb02 	bl	8005698 <CCU8_SLICE_CONFIG_Init>
 8008094:	4603      	mov	r3, r0
 8008096:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008098:	79fb      	ldrb	r3, [r7, #7]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d104      	bne.n	80080a8 <DAVE_Init+0x274>
  {
	 /**  Initialization of PWM_CCU4 APP instance PWM_CCU4_2 */
	 init_status = (DAVE_STATUS_t)PWM_CCU4_Init(&PWM_CCU4_2); 
 800809e:	483f      	ldr	r0, [pc, #252]	; (800819c <DAVE_Init+0x368>)
 80080a0:	f7fc f8a4 	bl	80041ec <PWM_CCU4_Init>
 80080a4:	4603      	mov	r3, r0
 80080a6:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80080a8:	79fb      	ldrb	r3, [r7, #7]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d104      	bne.n	80080b8 <DAVE_Init+0x284>
  {
	 /**  Initialization of I2C_MASTER APP instance I2C_MASTER_0 */
	 init_status = (DAVE_STATUS_t)I2C_MASTER_Init(&I2C_MASTER_0); 
 80080ae:	483c      	ldr	r0, [pc, #240]	; (80081a0 <DAVE_Init+0x36c>)
 80080b0:	f7fc fc52 	bl	8004958 <I2C_MASTER_Init>
 80080b4:	4603      	mov	r3, r0
 80080b6:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80080b8:	79fb      	ldrb	r3, [r7, #7]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d104      	bne.n	80080c8 <DAVE_Init+0x294>
  {
	 /**  Initialization of ANALOG_IO APP instance ANALOG_IO_2 */
	 init_status = (DAVE_STATUS_t)ANALOG_IO_Init(&ANALOG_IO_2); 
 80080be:	4839      	ldr	r0, [pc, #228]	; (80081a4 <DAVE_Init+0x370>)
 80080c0:	f7fe fa0c 	bl	80064dc <ANALOG_IO_Init>
 80080c4:	4603      	mov	r3, r0
 80080c6:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80080c8:	79fb      	ldrb	r3, [r7, #7]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d104      	bne.n	80080d8 <DAVE_Init+0x2a4>
  {
	 /**  Initialization of CCU4_SLICE_CONFIG APP instance CCU4_SLICE_CONFIG_0 */
	 init_status = (DAVE_STATUS_t)CCU4_SLICE_CONFIG_Init(&CCU4_SLICE_CONFIG_0); 
 80080ce:	4836      	ldr	r0, [pc, #216]	; (80081a8 <DAVE_Init+0x374>)
 80080d0:	f7fd fb9e 	bl	8005810 <CCU4_SLICE_CONFIG_Init>
 80080d4:	4603      	mov	r3, r0
 80080d6:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80080d8:	79fb      	ldrb	r3, [r7, #7]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d104      	bne.n	80080e8 <DAVE_Init+0x2b4>
  {
	 /**  Initialization of PWM_CCU4 APP instance PWM_CCU4_0 */
	 init_status = (DAVE_STATUS_t)PWM_CCU4_Init(&PWM_CCU4_0); 
 80080de:	4833      	ldr	r0, [pc, #204]	; (80081ac <DAVE_Init+0x378>)
 80080e0:	f7fc f884 	bl	80041ec <PWM_CCU4_Init>
 80080e4:	4603      	mov	r3, r0
 80080e6:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80080e8:	79fb      	ldrb	r3, [r7, #7]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d104      	bne.n	80080f8 <DAVE_Init+0x2c4>
  {
	 /**  Initialization of CCU4_SLICE_CONFIG APP instance CCU4_SLICE_CONFIG_1 */
	 init_status = (DAVE_STATUS_t)CCU4_SLICE_CONFIG_Init(&CCU4_SLICE_CONFIG_1); 
 80080ee:	4830      	ldr	r0, [pc, #192]	; (80081b0 <DAVE_Init+0x37c>)
 80080f0:	f7fd fb8e 	bl	8005810 <CCU4_SLICE_CONFIG_Init>
 80080f4:	4603      	mov	r3, r0
 80080f6:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 80080f8:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 80080fa:	4618      	mov	r0, r3
 80080fc:	3708      	adds	r7, #8
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}
 8008102:	bf00      	nop
 8008104:	1fffd7a0 	.word	0x1fffd7a0
 8008108:	1fffd090 	.word	0x1fffd090
 800810c:	1fffd3e0 	.word	0x1fffd3e0
 8008110:	0800a8f0 	.word	0x0800a8f0
 8008114:	0800a904 	.word	0x0800a904
 8008118:	0800a918 	.word	0x0800a918
 800811c:	0800a92c 	.word	0x0800a92c
 8008120:	0800a940 	.word	0x0800a940
 8008124:	0800a954 	.word	0x0800a954
 8008128:	0800a968 	.word	0x0800a968
 800812c:	0800a97c 	.word	0x0800a97c
 8008130:	0800a990 	.word	0x0800a990
 8008134:	0800a9a4 	.word	0x0800a9a4
 8008138:	0800a9b8 	.word	0x0800a9b8
 800813c:	0800a9cc 	.word	0x0800a9cc
 8008140:	0800a9e0 	.word	0x0800a9e0
 8008144:	0800a9f4 	.word	0x0800a9f4
 8008148:	0800aa08 	.word	0x0800aa08
 800814c:	0800aa1c 	.word	0x0800aa1c
 8008150:	0800aa30 	.word	0x0800aa30
 8008154:	0800aa44 	.word	0x0800aa44
 8008158:	0800aa58 	.word	0x0800aa58
 800815c:	0800aa6c 	.word	0x0800aa6c
 8008160:	0800aa80 	.word	0x0800aa80
 8008164:	0800aa94 	.word	0x0800aa94
 8008168:	0800aaa8 	.word	0x0800aaa8
 800816c:	0800aabc 	.word	0x0800aabc
 8008170:	0800aad0 	.word	0x0800aad0
 8008174:	0800aae4 	.word	0x0800aae4
 8008178:	0800aaf8 	.word	0x0800aaf8
 800817c:	0800ab0c 	.word	0x0800ab0c
 8008180:	0800ab20 	.word	0x0800ab20
 8008184:	0800ab34 	.word	0x0800ab34
 8008188:	1fffcc50 	.word	0x1fffcc50
 800818c:	1fffd050 	.word	0x1fffd050
 8008190:	0800ac40 	.word	0x0800ac40
 8008194:	1fffcc48 	.word	0x1fffcc48
 8008198:	0800ab5c 	.word	0x0800ab5c
 800819c:	1fffce0c 	.word	0x1fffce0c
 80081a0:	1fffce88 	.word	0x1fffce88
 80081a4:	0800ac50 	.word	0x0800ac50
 80081a8:	0800ab88 	.word	0x0800ab88
 80081ac:	1fffce34 	.word	0x1fffce34
 80081b0:	0800abac 	.word	0x0800abac

080081b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b083      	sub	sp, #12
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	4603      	mov	r3, r0
 80081bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80081be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	db0b      	blt.n	80081de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80081c6:	4908      	ldr	r1, [pc, #32]	; (80081e8 <__NVIC_EnableIRQ+0x34>)
 80081c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081cc:	095b      	lsrs	r3, r3, #5
 80081ce:	79fa      	ldrb	r2, [r7, #7]
 80081d0:	f002 021f 	and.w	r2, r2, #31
 80081d4:	2001      	movs	r0, #1
 80081d6:	fa00 f202 	lsl.w	r2, r0, r2
 80081da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80081de:	370c      	adds	r7, #12
 80081e0:	46bd      	mov	sp, r7
 80081e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e6:	4770      	bx	lr
 80081e8:	e000e100 	.word	0xe000e100

080081ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b083      	sub	sp, #12
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	4603      	mov	r3, r0
 80081f4:	6039      	str	r1, [r7, #0]
 80081f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80081f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	db0a      	blt.n	8008216 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008200:	490d      	ldr	r1, [pc, #52]	; (8008238 <__NVIC_SetPriority+0x4c>)
 8008202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008206:	683a      	ldr	r2, [r7, #0]
 8008208:	b2d2      	uxtb	r2, r2
 800820a:	0092      	lsls	r2, r2, #2
 800820c:	b2d2      	uxtb	r2, r2
 800820e:	440b      	add	r3, r1
 8008210:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8008214:	e00a      	b.n	800822c <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008216:	4909      	ldr	r1, [pc, #36]	; (800823c <__NVIC_SetPriority+0x50>)
 8008218:	79fb      	ldrb	r3, [r7, #7]
 800821a:	f003 030f 	and.w	r3, r3, #15
 800821e:	3b04      	subs	r3, #4
 8008220:	683a      	ldr	r2, [r7, #0]
 8008222:	b2d2      	uxtb	r2, r2
 8008224:	0092      	lsls	r2, r2, #2
 8008226:	b2d2      	uxtb	r2, r2
 8008228:	440b      	add	r3, r1
 800822a:	761a      	strb	r2, [r3, #24]
  }
}
 800822c:	370c      	adds	r7, #12
 800822e:	46bd      	mov	sp, r7
 8008230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008234:	4770      	bx	lr
 8008236:	bf00      	nop
 8008238:	e000e100 	.word	0xe000e100
 800823c:	e000ed00 	.word	0xe000ed00

08008240 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8008240:	b480      	push	{r7}
 8008242:	b083      	sub	sp, #12
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	460b      	mov	r3, r1
 800824a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 800824c:	78fb      	ldrb	r3, [r7, #3]
 800824e:	2201      	movs	r2, #1
 8008250:	409a      	lsls	r2, r3
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	605a      	str	r2, [r3, #4]
}
 8008256:	370c      	adds	r7, #12
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr

08008260 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8008260:	b480      	push	{r7}
 8008262:	b083      	sub	sp, #12
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	460b      	mov	r3, r1
 800826a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 800826c:	78fb      	ldrb	r3, [r7, #3]
 800826e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008272:	409a      	lsls	r2, r3
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	605a      	str	r2, [r3, #4]
}
 8008278:	370c      	adds	r7, #12
 800827a:	46bd      	mov	sp, r7
 800827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008280:	4770      	bx	lr
 8008282:	bf00      	nop

08008284 <XMC_GPIO_ToggleOutput>:
 * and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_ToggleOutput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8008284:	b480      	push	{r7}
 8008286:	b083      	sub	sp, #12
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	460b      	mov	r3, r1
 800828e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_ToggleOutput: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10001U << pin;
 8008290:	78fb      	ldrb	r3, [r7, #3]
 8008292:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8008296:	409a      	lsls	r2, r3
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	605a      	str	r2, [r3, #4]
}
 800829c:	370c      	adds	r7, #12
 800829e:	46bd      	mov	sp, r7
 80082a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a4:	4770      	bx	lr
 80082a6:	bf00      	nop

080082a8 <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b083      	sub	sp, #12
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
 80082b0:	460b      	mov	r3, r1
 80082b2:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80082b8:	78fb      	ldrb	r3, [r7, #3]
 80082ba:	fa22 f303 	lsr.w	r3, r2, r3
 80082be:	f003 0301 	and.w	r3, r3, #1
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	370c      	adds	r7, #12
 80082c6:	46bd      	mov	sp, r7
 80082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082cc:	4770      	bx	lr
 80082ce:	bf00      	nop

080082d0 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b082      	sub	sp, #8
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681a      	ldr	r2, [r3, #0]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	7c1b      	ldrb	r3, [r3, #16]
 80082e0:	4610      	mov	r0, r2
 80082e2:	4619      	mov	r1, r3
 80082e4:	f7ff ffac 	bl	8008240 <XMC_GPIO_SetOutputHigh>
}
 80082e8:	3708      	adds	r7, #8
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}
 80082ee:	bf00      	nop

080082f0 <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b082      	sub	sp, #8
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681a      	ldr	r2, [r3, #0]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	7c1b      	ldrb	r3, [r3, #16]
 8008300:	4610      	mov	r0, r2
 8008302:	4619      	mov	r1, r3
 8008304:	f7ff ffac 	bl	8008260 <XMC_GPIO_SetOutputLow>
}
 8008308:	3708      	adds	r7, #8
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
 800830e:	bf00      	nop

08008310 <DIGITAL_IO_ToggleOutput>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_ToggleOutput(const DIGITAL_IO_t *const handler)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b082      	sub	sp, #8
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_ToggleOutput: handler null pointer", handler != NULL);
  XMC_GPIO_ToggleOutput(handler->gpio_port, handler->gpio_pin);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	7c1b      	ldrb	r3, [r3, #16]
 8008320:	4610      	mov	r0, r2
 8008322:	4619      	mov	r1, r3
 8008324:	f7ff ffae 	bl	8008284 <XMC_GPIO_ToggleOutput>
}
 8008328:	3708      	adds	r7, #8
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
 800832e:	bf00      	nop

08008330 <DIGITAL_IO_GetInput>:
* }
*  @endcode
*/

__STATIC_INLINE uint32_t DIGITAL_IO_GetInput(const DIGITAL_IO_t *const handler)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b082      	sub	sp, #8
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_GetInput: handler null pointer", handler != NULL);
  return XMC_GPIO_GetInput(handler->gpio_port, handler->gpio_pin);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	7c1b      	ldrb	r3, [r3, #16]
 8008340:	4610      	mov	r0, r2
 8008342:	4619      	mov	r1, r3
 8008344:	f7ff ffb0 	bl	80082a8 <XMC_GPIO_GetInput>
 8008348:	4603      	mov	r3, r0
}
 800834a:	4618      	mov	r0, r3
 800834c:	3708      	adds	r7, #8
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}
 8008352:	bf00      	nop

08008354 <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 8008354:	b480      	push	{r7}
 8008356:	b083      	sub	sp, #12
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	460b      	mov	r3, r1
 800835e:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 8008360:	887a      	ldrh	r2, [r7, #2]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8008366:	370c      	adds	r7, #12
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr

08008370 <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 8008370:	b480      	push	{r7}
 8008372:	b083      	sub	sp, #12
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	683a      	ldr	r2, [r7, #0]
 800837e:	611a      	str	r2, [r3, #16]
}
 8008380:	370c      	adds	r7, #12
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr
 800838a:	bf00      	nop

0800838c <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 800838c:	b480      	push	{r7}
 800838e:	b083      	sub	sp, #12
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	460b      	mov	r3, r1
 8008396:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800839e:	78fb      	ldrb	r3, [r7, #3]
 80083a0:	2101      	movs	r1, #1
 80083a2:	fa01 f303 	lsl.w	r3, r1, r3
 80083a6:	431a      	orrs	r2, r3
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 80083ae:	370c      	adds	r7, #12
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr

080083b8 <XMC_CCU4_SLICE_ClearEvent>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_EnableEvent()<BR> XMC_CCU4_SLICE_SetEvent()<BR> XMC_CCU4_SLICE_GetEvent().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearEvent(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b083      	sub	sp, #12
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	460b      	mov	r3, r1
 80083c2:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_ClearEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->SWR |= ((uint32_t) 1) << ((uint32_t) event);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80083ca:	78fb      	ldrb	r3, [r7, #3]
 80083cc:	2101      	movs	r1, #1
 80083ce:	fa01 f303 	lsl.w	r3, r1, r3
 80083d2:	431a      	orrs	r2, r3
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80083da:	370c      	adds	r7, #12
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr

080083e4 <CCU42_0_IRQHandler>:
XMC_GPIO_CONFIG_t SLICE0_OUTPUT_config = { .mode =
		XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT3, .output_level =
		XMC_GPIO_OUTPUT_LEVEL_LOW, .output_strength =
		XMC_GPIO_OUTPUT_STRENGTH_MEDIUM };

void CCU42_0_IRQHandler(void) {
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b086      	sub	sp, #24
 80083e8:	af00      	add	r7, sp, #0
	/* Clear pending interrupt */
	XMC_CCU4_SLICE_ClearEvent(SLICE0_PTR,
 80083ea:	4822      	ldr	r0, [pc, #136]	; (8008474 <CCU42_0_IRQHandler+0x90>)
 80083ec:	2102      	movs	r1, #2
 80083ee:	f7ff ffe3 	bl	80083b8 <XMC_CCU4_SLICE_ClearEvent>
			XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP);
	/* Set new duty cycle value */
	float Modulationsgrad = 100;
 80083f2:	4b21      	ldr	r3, [pc, #132]	; (8008478 <CCU42_0_IRQHandler+0x94>)
 80083f4:	617b      	str	r3, [r7, #20]
	uint16_t frequenz = 20;
 80083f6:	2314      	movs	r3, #20
 80083f8:	827b      	strh	r3, [r7, #18]
	//uint16_t value = 2400;
	int32_t temp1 =(int32_t)(comparevalue[count]-300);
 80083fa:	4b20      	ldr	r3, [pc, #128]	; (800847c <CCU42_0_IRQHandler+0x98>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a20      	ldr	r2, [pc, #128]	; (8008480 <CCU42_0_IRQHandler+0x9c>)
 8008400:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008404:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008408:	60fb      	str	r3, [r7, #12]
	int32_t temp2 =  (temp1*Modulationsgrad)/100;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	ee07 3a90 	vmov	s15, r3
 8008410:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008414:	edd7 7a05 	vldr	s15, [r7, #20]
 8008418:	ee67 7a27 	vmul.f32	s15, s14, s15
 800841c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8008484 <CCU42_0_IRQHandler+0xa0>
 8008420:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8008424:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008428:	ee17 3a90 	vmov	r3, s15
 800842c:	60bb      	str	r3, [r7, #8]
	int32_t value = temp2 +300;
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8008434:	607b      	str	r3, [r7, #4]



	//(Modulationsgrad*comparevalue[count]);
	XMC_CCU4_SLICE_SetTimerCompareMatch(SLICE0_PTR, value);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	b29b      	uxth	r3, r3
 800843a:	480e      	ldr	r0, [pc, #56]	; (8008474 <CCU42_0_IRQHandler+0x90>)
 800843c:	4619      	mov	r1, r3
 800843e:	f7ff ff89 	bl	8008354 <XMC_CCU4_SLICE_SetTimerCompareMatch>
	count = count + frequenz;
 8008442:	8a7a      	ldrh	r2, [r7, #18]
 8008444:	4b0d      	ldr	r3, [pc, #52]	; (800847c <CCU42_0_IRQHandler+0x98>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4413      	add	r3, r2
 800844a:	4a0c      	ldr	r2, [pc, #48]	; (800847c <CCU42_0_IRQHandler+0x98>)
 800844c:	6013      	str	r3, [r2, #0]
	if (count >= 100000) {
 800844e:	4b0b      	ldr	r3, [pc, #44]	; (800847c <CCU42_0_IRQHandler+0x98>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4a0d      	ldr	r2, [pc, #52]	; (8008488 <CCU42_0_IRQHandler+0xa4>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d905      	bls.n	8008464 <CCU42_0_IRQHandler+0x80>
		count = 0;
 8008458:	4b08      	ldr	r3, [pc, #32]	; (800847c <CCU42_0_IRQHandler+0x98>)
 800845a:	2200      	movs	r2, #0
 800845c:	601a      	str	r2, [r3, #0]
		DIGITAL_IO_ToggleOutput(&IO_Bit2);
 800845e:	480b      	ldr	r0, [pc, #44]	; (800848c <CCU42_0_IRQHandler+0xa8>)
 8008460:	f7ff ff56 	bl	8008310 <DIGITAL_IO_ToggleOutput>
	}
	/* Enable shadow transfer for the new PWM value update */
	XMC_CCU4_EnableShadowTransfer(MODULE_PTR, XMC_CCU4_SHADOW_TRANSFER_SLICE_0);
 8008464:	480a      	ldr	r0, [pc, #40]	; (8008490 <CCU42_0_IRQHandler+0xac>)
 8008466:	2101      	movs	r1, #1
 8008468:	f7ff ff82 	bl	8008370 <XMC_CCU4_EnableShadowTransfer>
}
 800846c:	3718      	adds	r7, #24
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}
 8008472:	bf00      	nop
 8008474:	40014100 	.word	0x40014100
 8008478:	42c80000 	.word	0x42c80000
 800847c:	1fffd7bc 	.word	0x1fffd7bc
 8008480:	0800af48 	.word	0x0800af48
 8008484:	42c80000 	.word	0x42c80000
 8008488:	0001869f 	.word	0x0001869f
 800848c:	0800aa94 	.word	0x0800aa94
 8008490:	40014000 	.word	0x40014000

08008494 <CCU40_3_IRQHandler>:



void CCU40_3_IRQHandler(void) {
 8008494:	b580      	push	{r7, lr}
 8008496:	b086      	sub	sp, #24
 8008498:	af00      	add	r7, sp, #0
	/* Clear pending interrupt */
	XMC_CCU4_SLICE_ClearEvent(SLICE1_PTR,
 800849a:	4822      	ldr	r0, [pc, #136]	; (8008524 <CCU40_3_IRQHandler+0x90>)
 800849c:	2102      	movs	r1, #2
 800849e:	f7ff ff8b 	bl	80083b8 <XMC_CCU4_SLICE_ClearEvent>
			XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP);
	/* Set new duty cycle value */
	float Modulationsgrad = 100;
 80084a2:	4b21      	ldr	r3, [pc, #132]	; (8008528 <CCU40_3_IRQHandler+0x94>)
 80084a4:	617b      	str	r3, [r7, #20]
	uint16_t frequenz = 10;
 80084a6:	230a      	movs	r3, #10
 80084a8:	827b      	strh	r3, [r7, #18]
	//uint16_t value = 2400;
	int32_t temp1 =(int32_t)(comparevalue[count1]-300);
 80084aa:	4b20      	ldr	r3, [pc, #128]	; (800852c <CCU40_3_IRQHandler+0x98>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a20      	ldr	r2, [pc, #128]	; (8008530 <CCU40_3_IRQHandler+0x9c>)
 80084b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80084b8:	60fb      	str	r3, [r7, #12]
	int32_t temp2 =  (temp1*Modulationsgrad)/100;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	ee07 3a90 	vmov	s15, r3
 80084c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80084c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80084c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084cc:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8008534 <CCU40_3_IRQHandler+0xa0>
 80084d0:	eec7 7a87 	vdiv.f32	s15, s15, s14
 80084d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80084d8:	ee17 3a90 	vmov	r3, s15
 80084dc:	60bb      	str	r3, [r7, #8]
	int32_t value = temp2 +300;
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 80084e4:	607b      	str	r3, [r7, #4]



	//(Modulationsgrad*comparevalue[count]);
	XMC_CCU4_SLICE_SetTimerCompareMatch(SLICE1_PTR, value);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	480e      	ldr	r0, [pc, #56]	; (8008524 <CCU40_3_IRQHandler+0x90>)
 80084ec:	4619      	mov	r1, r3
 80084ee:	f7ff ff31 	bl	8008354 <XMC_CCU4_SLICE_SetTimerCompareMatch>
	count1 = count1 + frequenz;
 80084f2:	8a7a      	ldrh	r2, [r7, #18]
 80084f4:	4b0d      	ldr	r3, [pc, #52]	; (800852c <CCU40_3_IRQHandler+0x98>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4413      	add	r3, r2
 80084fa:	4a0c      	ldr	r2, [pc, #48]	; (800852c <CCU40_3_IRQHandler+0x98>)
 80084fc:	6013      	str	r3, [r2, #0]
	if (count1 >= 100000) {
 80084fe:	4b0b      	ldr	r3, [pc, #44]	; (800852c <CCU40_3_IRQHandler+0x98>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4a0d      	ldr	r2, [pc, #52]	; (8008538 <CCU40_3_IRQHandler+0xa4>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d905      	bls.n	8008514 <CCU40_3_IRQHandler+0x80>
		count1 = 0;
 8008508:	4b08      	ldr	r3, [pc, #32]	; (800852c <CCU40_3_IRQHandler+0x98>)
 800850a:	2200      	movs	r2, #0
 800850c:	601a      	str	r2, [r3, #0]
		DIGITAL_IO_ToggleOutput(&IO_Bit3);
 800850e:	480b      	ldr	r0, [pc, #44]	; (800853c <CCU40_3_IRQHandler+0xa8>)
 8008510:	f7ff fefe 	bl	8008310 <DIGITAL_IO_ToggleOutput>
	}
	/* Enable shadow transfer for the new PWM value update */
	XMC_CCU4_EnableShadowTransfer(MODULE1_PTR, XMC_CCU4_SHADOW_TRANSFER_SLICE_3);
 8008514:	480a      	ldr	r0, [pc, #40]	; (8008540 <CCU40_3_IRQHandler+0xac>)
 8008516:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800851a:	f7ff ff29 	bl	8008370 <XMC_CCU4_EnableShadowTransfer>

}
 800851e:	3718      	adds	r7, #24
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}
 8008524:	4000c400 	.word	0x4000c400
 8008528:	42c80000 	.word	0x42c80000
 800852c:	1fffd7c0 	.word	0x1fffd7c0
 8008530:	0800af48 	.word	0x0800af48
 8008534:	42c80000 	.word	0x42c80000
 8008538:	0001869f 	.word	0x0001869f
 800853c:	0800aad0 	.word	0x0800aad0
 8008540:	4000c000 	.word	0x4000c000
 8008544:	00000000 	.word	0x00000000

08008548 <VADC0_C0_2_IRQHandler>:

XMC_VADC_RESULT_SIZE_t result;
void Adc_Measurement_Handler() {
 8008548:	b580      	push	{r7, lr}
 800854a:	ed2d 8b02 	vpush	{d8}
 800854e:	b084      	sub	sp, #16
 8008550:	af00      	add	r7, sp, #0
#if(UC_SERIES != XMC11)
	result = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_A);
 8008552:	4849      	ldr	r0, [pc, #292]	; (8008678 <VADC0_C0_2_IRQHandler+0x130>)
 8008554:	f7fe f96a 	bl	800682c <ADC_MEASUREMENT_GetResult>
 8008558:	4603      	mov	r3, r0
 800855a:	461a      	mov	r2, r3
 800855c:	4b47      	ldr	r3, [pc, #284]	; (800867c <VADC0_C0_2_IRQHandler+0x134>)
 800855e:	801a      	strh	r2, [r3, #0]
	float resistor = 10000 * (pow(2, 12) / result - 1);
 8008560:	4b46      	ldr	r3, [pc, #280]	; (800867c <VADC0_C0_2_IRQHandler+0x134>)
 8008562:	881b      	ldrh	r3, [r3, #0]
 8008564:	4618      	mov	r0, r3
 8008566:	f000 fd3d 	bl	8008fe4 <__aeabi_i2d>
 800856a:	4602      	mov	r2, r0
 800856c:	460b      	mov	r3, r1
 800856e:	f04f 0000 	mov.w	r0, #0
 8008572:	4943      	ldr	r1, [pc, #268]	; (8008680 <VADC0_C0_2_IRQHandler+0x138>)
 8008574:	f000 fec6 	bl	8009304 <__aeabi_ddiv>
 8008578:	4602      	mov	r2, r0
 800857a:	460b      	mov	r3, r1
 800857c:	4610      	mov	r0, r2
 800857e:	4619      	mov	r1, r3
 8008580:	f04f 0200 	mov.w	r2, #0
 8008584:	4b3f      	ldr	r3, [pc, #252]	; (8008684 <VADC0_C0_2_IRQHandler+0x13c>)
 8008586:	f000 fbdf 	bl	8008d48 <__aeabi_dsub>
 800858a:	4602      	mov	r2, r0
 800858c:	460b      	mov	r3, r1
 800858e:	4610      	mov	r0, r2
 8008590:	4619      	mov	r1, r3
 8008592:	a333      	add	r3, pc, #204	; (adr r3, 8008660 <VADC0_C0_2_IRQHandler+0x118>)
 8008594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008598:	f000 fd8a 	bl	80090b0 <__aeabi_dmul>
 800859c:	4602      	mov	r2, r0
 800859e:	460b      	mov	r3, r1
 80085a0:	4610      	mov	r0, r2
 80085a2:	4619      	mov	r1, r3
 80085a4:	f001 f81e 	bl	80095e4 <__aeabi_d2f>
 80085a8:	4603      	mov	r3, r0
 80085aa:	60fb      	str	r3, [r7, #12]
	float beta = 601.3;
 80085ac:	4b36      	ldr	r3, [pc, #216]	; (8008688 <VADC0_C0_2_IRQHandler+0x140>)
 80085ae:	60bb      	str	r3, [r7, #8]
	float T = (((float) (beta * 298.15))
 80085b0:	68b8      	ldr	r0, [r7, #8]
 80085b2:	f000 fd29 	bl	8009008 <__aeabi_f2d>
 80085b6:	4602      	mov	r2, r0
 80085b8:	460b      	mov	r3, r1
 80085ba:	4610      	mov	r0, r2
 80085bc:	4619      	mov	r1, r3
 80085be:	a32a      	add	r3, pc, #168	; (adr r3, 8008668 <VADC0_C0_2_IRQHandler+0x120>)
 80085c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c4:	f000 fd74 	bl	80090b0 <__aeabi_dmul>
 80085c8:	4602      	mov	r2, r0
 80085ca:	460b      	mov	r3, r1
 80085cc:	4610      	mov	r0, r2
 80085ce:	4619      	mov	r1, r3
 80085d0:	f001 f808 	bl	80095e4 <__aeabi_d2f>
 80085d4:	ee08 0a10 	vmov	s16, r0
			/ (((float) (298.15 * log(resistor / 10000))) + beta)) - 273.15;
 80085d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80085dc:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800868c <VADC0_C0_2_IRQHandler+0x144>
 80085e0:	eec7 7a87 	vdiv.f32	s15, s15, s14
 80085e4:	ee17 0a90 	vmov	r0, s15
 80085e8:	f000 fd0e 	bl	8009008 <__aeabi_f2d>
 80085ec:	4602      	mov	r2, r0
 80085ee:	460b      	mov	r3, r1
 80085f0:	4610      	mov	r0, r2
 80085f2:	4619      	mov	r1, r3
 80085f4:	f000 f908 	bl	8008808 <log>
 80085f8:	4602      	mov	r2, r0
 80085fa:	460b      	mov	r3, r1
 80085fc:	4610      	mov	r0, r2
 80085fe:	4619      	mov	r1, r3
 8008600:	a319      	add	r3, pc, #100	; (adr r3, 8008668 <VADC0_C0_2_IRQHandler+0x120>)
 8008602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008606:	f000 fd53 	bl	80090b0 <__aeabi_dmul>
 800860a:	4602      	mov	r2, r0
 800860c:	460b      	mov	r3, r1
 800860e:	4610      	mov	r0, r2
 8008610:	4619      	mov	r1, r3
 8008612:	f000 ffe7 	bl	80095e4 <__aeabi_d2f>
 8008616:	ee07 0a10 	vmov	s14, r0
 800861a:	edd7 7a02 	vldr	s15, [r7, #8]
 800861e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008622:	eec8 7a27 	vdiv.f32	s15, s16, s15
 8008626:	ee17 0a90 	vmov	r0, s15
 800862a:	f000 fced 	bl	8009008 <__aeabi_f2d>
 800862e:	4602      	mov	r2, r0
 8008630:	460b      	mov	r3, r1
 8008632:	4610      	mov	r0, r2
 8008634:	4619      	mov	r1, r3
 8008636:	a30e      	add	r3, pc, #56	; (adr r3, 8008670 <VADC0_C0_2_IRQHandler+0x128>)
 8008638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800863c:	f000 fb84 	bl	8008d48 <__aeabi_dsub>
 8008640:	4602      	mov	r2, r0
 8008642:	460b      	mov	r3, r1
void Adc_Measurement_Handler() {
#if(UC_SERIES != XMC11)
	result = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_A);
	float resistor = 10000 * (pow(2, 12) / result - 1);
	float beta = 601.3;
	float T = (((float) (beta * 298.15))
 8008644:	4610      	mov	r0, r2
 8008646:	4619      	mov	r1, r3
 8008648:	f000 ffcc 	bl	80095e4 <__aeabi_d2f>
 800864c:	4603      	mov	r3, r0
 800864e:	607b      	str	r3, [r7, #4]
	if (result >= 2048) {
		//   DIGITAL_IO_SetOutputLow(&DIGITAL_IO_0);
	} else {
		// DIGITAL_IO_SetOutputHigh(&DIGITAL_IO_0);
	}
}
 8008650:	3710      	adds	r7, #16
 8008652:	46bd      	mov	sp, r7
 8008654:	ecbd 8b02 	vpop	{d8}
 8008658:	bd80      	pop	{r7, pc}
 800865a:	bf00      	nop
 800865c:	f3af 8000 	nop.w
 8008660:	00000000 	.word	0x00000000
 8008664:	40c38800 	.word	0x40c38800
 8008668:	66666666 	.word	0x66666666
 800866c:	4072a266 	.word	0x4072a266
 8008670:	66666666 	.word	0x66666666
 8008674:	40711266 	.word	0x40711266
 8008678:	1fffd038 	.word	0x1fffd038
 800867c:	1fffdc84 	.word	0x1fffdc84
 8008680:	40b00000 	.word	0x40b00000
 8008684:	3ff00000 	.word	0x3ff00000
 8008688:	44165333 	.word	0x44165333
 800868c:	461c4000 	.word	0x461c4000

08008690 <EndofTransmit>:

uint8_t rec_data[10];

void EndofTransmit() //Callback function for "End of transmit" event.

{
 8008690:	b580      	push	{r7, lr}
 8008692:	af00      	add	r7, sp, #0
	UART_Receive(&UART_0, rec_data, sizeof(rec_data));
 8008694:	4804      	ldr	r0, [pc, #16]	; (80086a8 <EndofTransmit+0x18>)
 8008696:	4905      	ldr	r1, [pc, #20]	; (80086ac <EndofTransmit+0x1c>)
 8008698:	220a      	movs	r2, #10
 800869a:	f7fa f911 	bl	80028c0 <UART_Receive>
	DIGITAL_IO_SetOutputLow(&RS485_DIR); // ready to receive
 800869e:	4804      	ldr	r0, [pc, #16]	; (80086b0 <EndofTransmit+0x20>)
 80086a0:	f7ff fe26 	bl	80082f0 <DIGITAL_IO_SetOutputLow>
}
 80086a4:	bd80      	pop	{r7, pc}
 80086a6:	bf00      	nop
 80086a8:	1fffcc50 	.word	0x1fffcc50
 80086ac:	1fffdc88 	.word	0x1fffdc88
 80086b0:	0800aa08 	.word	0x0800aa08

080086b4 <EndofReceive>:

void EndofReceive() //Callback function for "End of receive" event.

{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b082      	sub	sp, #8
 80086b8:	af00      	add	r7, sp, #0
	DIGITAL_IO_SetOutputHigh(&RS485_DIR);
 80086ba:	4809      	ldr	r0, [pc, #36]	; (80086e0 <EndofReceive+0x2c>)
 80086bc:	f7ff fe08 	bl	80082d0 <DIGITAL_IO_SetOutputHigh>
	char value = rec_data[0];
 80086c0:	4b08      	ldr	r3, [pc, #32]	; (80086e4 <EndofReceive+0x30>)
 80086c2:	781b      	ldrb	r3, [r3, #0]
 80086c4:	71fb      	strb	r3, [r7, #7]
	if (value = 'a') {
 80086c6:	2361      	movs	r3, #97	; 0x61
 80086c8:	71fb      	strb	r3, [r7, #7]
		DIGITAL_IO_SetOutputHigh(&IO_Bit2);
 80086ca:	4807      	ldr	r0, [pc, #28]	; (80086e8 <EndofReceive+0x34>)
 80086cc:	f7ff fe00 	bl	80082d0 <DIGITAL_IO_SetOutputHigh>
	}
	UART_Transmit(&UART_0, rec_data, sizeof(rec_data));
 80086d0:	4806      	ldr	r0, [pc, #24]	; (80086ec <EndofReceive+0x38>)
 80086d2:	4904      	ldr	r1, [pc, #16]	; (80086e4 <EndofReceive+0x30>)
 80086d4:	220a      	movs	r2, #10
 80086d6:	f7fa f8d7 	bl	8002888 <UART_Transmit>
}
 80086da:	3708      	adds	r7, #8
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}
 80086e0:	0800aa08 	.word	0x0800aa08
 80086e4:	1fffdc88 	.word	0x1fffdc88
 80086e8:	0800aa94 	.word	0x0800aa94
 80086ec:	1fffcc50 	.word	0x1fffcc50

080086f0 <main>:
}

float temp;
int fan_flag = 0;
int io_status = -1;
int main(void) {
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b082      	sub	sp, #8
 80086f4:	af00      	add	r7, sp, #0
	DAVE_STATUS_t status;
	uint32_t pin_status;
	uint32_t delay_count;

	status = DAVE_Init(); /* Initialization of DAVE APPs  */
 80086f6:	f7ff fb9d 	bl	8007e34 <DAVE_Init>
 80086fa:	4603      	mov	r3, r0
 80086fc:	71fb      	strb	r3, [r7, #7]

	if (status != DAVE_STATUS_SUCCESS) {
 80086fe:	79fb      	ldrb	r3, [r7, #7]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d000      	beq.n	8008706 <main+0x16>
		/* Placeholder for error handler code. The while loop below can be replaced with an user error handler. */
		XMC_DEBUG("DAVE APPs initialization failed\n");

		while (1U) {

		}
 8008704:	e7fe      	b.n	8008704 <main+0x14>
	}

	DIGITAL_IO_SetOutputHigh(&DIGITAL_IO_6); // Enable RS485 Pin
 8008706:	4831      	ldr	r0, [pc, #196]	; (80087cc <main+0xdc>)
 8008708:	f7ff fde2 	bl	80082d0 <DIGITAL_IO_SetOutputHigh>
	DIGITAL_IO_SetOutputHigh(&RS485_DIR); // Direction RS485 Pin set to High to indicate that MCU wants to send data
 800870c:	4830      	ldr	r0, [pc, #192]	; (80087d0 <main+0xe0>)
 800870e:	f7ff fddf 	bl	80082d0 <DIGITAL_IO_SetOutputHigh>
//UART_Transmit(&UART_0, data, sizeof(data) - 1); //Transmit the string "Infineon Technologies".

//DIGITAL_IO_SetOutputHigh(&DIGITAL_IO_4); // Power up Main heating
//DIGITAL_IO_SetOutputHigh(&DIGITAL_IO_5); // Power up aux heating

	DIGITAL_IO_SetOutputLow(&IO_Bit0_DIR); // Set Input enable for IO Pin 0
 8008712:	4830      	ldr	r0, [pc, #192]	; (80087d4 <main+0xe4>)
 8008714:	f7ff fdec 	bl	80082f0 <DIGITAL_IO_SetOutputLow>
	DIGITAL_IO_SetOutputLow(&IO_Bit1_DIR); // Set Input enable for IO Pin 1
 8008718:	482f      	ldr	r0, [pc, #188]	; (80087d8 <main+0xe8>)
 800871a:	f7ff fde9 	bl	80082f0 <DIGITAL_IO_SetOutputLow>
	DIGITAL_IO_SetOutputHigh(&IO_Bit3_DIR); // Set Input enable for IO Pin 3
 800871e:	482f      	ldr	r0, [pc, #188]	; (80087dc <main+0xec>)
 8008720:	f7ff fdd6 	bl	80082d0 <DIGITAL_IO_SetOutputHigh>
	DIGITAL_IO_SetOutputHigh(&IO_Bit2_DIR); // Set Input enable for IO Pin 2
 8008724:	482e      	ldr	r0, [pc, #184]	; (80087e0 <main+0xf0>)
 8008726:	f7ff fdd3 	bl	80082d0 <DIGITAL_IO_SetOutputHigh>
//DIGITAL_IO_SetOutputHigh(&DIGITAL_IO_23);// Set Output Pin 0 high
//DIGITAL_IO_SetOutputHigh(&DIGITAL_IO_22); // Set Output Pin 1 high
//DIGITAL_IO_SetOutputHigh(&DIGITAL_IO_21); // Set Output Pin 2 high
//DIGITAL_IO_SetOutputHigh(&DIGITAL_IO_24); // Set Output Pin 3 high

	delay_count = 0;
 800872a:	2300      	movs	r3, #0
 800872c:	603b      	str	r3, [r7, #0]

//ACIM_FREQ_CTRL_MotorStart(&ACIM_FREQ_CTRL_1);

	/* Placeholder for user application code. The while loop below can be replaced with user application code. */

	DIGITAL_IO_SetOutputHigh(&Disable_Gate_Driver_M1_M2); // Set Output Pin 0 high
 800872e:	482d      	ldr	r0, [pc, #180]	; (80087e4 <main+0xf4>)
 8008730:	f7ff fdce 	bl	80082d0 <DIGITAL_IO_SetOutputHigh>
	DIGITAL_IO_SetOutputHigh(&Disable_Gate_Driver_M3); // Set Output Pin 0 high
 8008734:	482c      	ldr	r0, [pc, #176]	; (80087e8 <main+0xf8>)
 8008736:	f7ff fdcb 	bl	80082d0 <DIGITAL_IO_SetOutputHigh>




	XMC_CCU4_SLICE_EnableEvent(SLICE0_PTR, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 800873a:	482c      	ldr	r0, [pc, #176]	; (80087ec <main+0xfc>)
 800873c:	2100      	movs	r1, #0
 800873e:	f7ff fe25 	bl	800838c <XMC_CCU4_SLICE_EnableEvent>
	/* Connect compare match event to SR0 */
	XMC_CCU4_SLICE_SetInterruptNode(SLICE0_PTR,
 8008742:	482a      	ldr	r0, [pc, #168]	; (80087ec <main+0xfc>)
 8008744:	2100      	movs	r1, #0
 8008746:	2200      	movs	r2, #0
 8008748:	f7f8 fdee 	bl	8001328 <XMC_CCU4_SLICE_SetInterruptNode>
			XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH, XMC_CCU4_SLICE_SR_ID_0);

	/* Set NVIC priority */
	NVIC_SetPriority(CCU42_0_IRQn, 3U);
 800874c:	2034      	movs	r0, #52	; 0x34
 800874e:	2103      	movs	r1, #3
 8008750:	f7ff fd4c 	bl	80081ec <__NVIC_SetPriority>
	/* Enable IRQ */
	NVIC_EnableIRQ(CCU42_0_IRQn);
 8008754:	2034      	movs	r0, #52	; 0x34
 8008756:	f7ff fd2d 	bl	80081b4 <__NVIC_EnableIRQ>





	XMC_CCU4_SLICE_EnableEvent(SLICE1_PTR, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 800875a:	4825      	ldr	r0, [pc, #148]	; (80087f0 <main+0x100>)
 800875c:	2100      	movs	r1, #0
 800875e:	f7ff fe15 	bl	800838c <XMC_CCU4_SLICE_EnableEvent>
	/* Connect compare match event to SR0 */
	XMC_CCU4_SLICE_SetInterruptNode(SLICE1_PTR,
 8008762:	4823      	ldr	r0, [pc, #140]	; (80087f0 <main+0x100>)
 8008764:	2100      	movs	r1, #0
 8008766:	2203      	movs	r2, #3
 8008768:	f7f8 fdde 	bl	8001328 <XMC_CCU4_SLICE_SetInterruptNode>
			XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH, XMC_CCU4_SLICE_SR_ID_3);

	/* Set NVIC priority */
	NVIC_SetPriority(CCU40_3_IRQn, 3U);
 800876c:	202f      	movs	r0, #47	; 0x2f
 800876e:	2103      	movs	r1, #3
 8008770:	f7ff fd3c 	bl	80081ec <__NVIC_SetPriority>
	/* Enable IRQ */
	NVIC_EnableIRQ(CCU40_3_IRQn);
 8008774:	202f      	movs	r0, #47	; 0x2f
 8008776:	f7ff fd1d 	bl	80081b4 <__NVIC_EnableIRQ>
		// DIGITAL_IO_ToggleOutput(&DIGITAL_IO_0);
		// for(delay_count = 0;delay_count<0xfffff;delay_count++);
		//    delay_count = delay_count + 10;
		// pin_status = DIGITAL_IO_GetInput(&DIGITAL_IO_23);

		if (((!fan_flag) && DIGITAL_IO_GetInput(&IO_Bit0))
 800877a:	4b1e      	ldr	r3, [pc, #120]	; (80087f4 <main+0x104>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d105      	bne.n	800878e <main+0x9e>
 8008782:	481d      	ldr	r0, [pc, #116]	; (80087f8 <main+0x108>)
 8008784:	f7ff fdd4 	bl	8008330 <DIGITAL_IO_GetInput>
 8008788:	4603      	mov	r3, r0
 800878a:	2b00      	cmp	r3, #0
 800878c:	d105      	bne.n	800879a <main+0xaa>
				|| (DIGITAL_IO_GetInput(&HS_Overtemp))) {
 800878e:	481b      	ldr	r0, [pc, #108]	; (80087fc <main+0x10c>)
 8008790:	f7ff fdce 	bl	8008330 <DIGITAL_IO_GetInput>
 8008794:	4603      	mov	r3, r0
 8008796:	2b00      	cmp	r3, #0
 8008798:	d006      	beq.n	80087a8 <main+0xb8>
			fan_flag = 1;
 800879a:	4b16      	ldr	r3, [pc, #88]	; (80087f4 <main+0x104>)
 800879c:	2201      	movs	r2, #1
 800879e:	601a      	str	r2, [r3, #0]
			DIGITAL_IO_SetOutputHigh(&Cooling_FAN); // Power up cooling fan
 80087a0:	4817      	ldr	r0, [pc, #92]	; (8008800 <main+0x110>)
 80087a2:	f7ff fd95 	bl	80082d0 <DIGITAL_IO_SetOutputHigh>
 80087a6:	e00f      	b.n	80087c8 <main+0xd8>
		}

		else if (fan_flag && DIGITAL_IO_GetInput(&IO_Bit1)) {
 80087a8:	4b12      	ldr	r3, [pc, #72]	; (80087f4 <main+0x104>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d00b      	beq.n	80087c8 <main+0xd8>
 80087b0:	4814      	ldr	r0, [pc, #80]	; (8008804 <main+0x114>)
 80087b2:	f7ff fdbd 	bl	8008330 <DIGITAL_IO_GetInput>
 80087b6:	4603      	mov	r3, r0
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d005      	beq.n	80087c8 <main+0xd8>
			fan_flag = 0;
 80087bc:	4b0d      	ldr	r3, [pc, #52]	; (80087f4 <main+0x104>)
 80087be:	2200      	movs	r2, #0
 80087c0:	601a      	str	r2, [r3, #0]
			DIGITAL_IO_SetOutputLow(&Cooling_FAN); // Power down cooling fan
 80087c2:	480f      	ldr	r0, [pc, #60]	; (8008800 <main+0x110>)
 80087c4:	f7ff fd94 	bl	80082f0 <DIGITAL_IO_SetOutputLow>

		//ADC_MEASUREMENT_StartConversion(&ADC_MEASUREMENT_0);

		//temp = calculate_T_Amb();

	}
 80087c8:	e7d7      	b.n	800877a <main+0x8a>
 80087ca:	bf00      	nop
 80087cc:	0800a968 	.word	0x0800a968
 80087d0:	0800aa08 	.word	0x0800aa08
 80087d4:	0800aa44 	.word	0x0800aa44
 80087d8:	0800aa30 	.word	0x0800aa30
 80087dc:	0800aa6c 	.word	0x0800aa6c
 80087e0:	0800aa80 	.word	0x0800aa80
 80087e4:	0800aae4 	.word	0x0800aae4
 80087e8:	0800a904 	.word	0x0800a904
 80087ec:	40014100 	.word	0x40014100
 80087f0:	4000c400 	.word	0x4000c400
 80087f4:	1fffd7c4 	.word	0x1fffd7c4
 80087f8:	0800aabc 	.word	0x0800aabc
 80087fc:	0800aa58 	.word	0x0800aa58
 8008800:	0800a8f0 	.word	0x0800a8f0
 8008804:	0800aaa8 	.word	0x0800aaa8

08008808 <log>:
 8008808:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800880c:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8008900 <log+0xf8>
 8008810:	b08b      	sub	sp, #44	; 0x2c
 8008812:	4606      	mov	r6, r0
 8008814:	460f      	mov	r7, r1
 8008816:	f000 f877 	bl	8008908 <__ieee754_log>
 800881a:	f998 3000 	ldrsb.w	r3, [r8]
 800881e:	3301      	adds	r3, #1
 8008820:	4604      	mov	r4, r0
 8008822:	460d      	mov	r5, r1
 8008824:	d00b      	beq.n	800883e <log+0x36>
 8008826:	4630      	mov	r0, r6
 8008828:	4639      	mov	r1, r7
 800882a:	f000 fa55 	bl	8008cd8 <__fpclassifyd>
 800882e:	b130      	cbz	r0, 800883e <log+0x36>
 8008830:	4630      	mov	r0, r6
 8008832:	4639      	mov	r1, r7
 8008834:	2200      	movs	r2, #0
 8008836:	2300      	movs	r3, #0
 8008838:	f000 feca 	bl	80095d0 <__aeabi_dcmpgt>
 800883c:	b120      	cbz	r0, 8008848 <log+0x40>
 800883e:	4620      	mov	r0, r4
 8008840:	4629      	mov	r1, r5
 8008842:	b00b      	add	sp, #44	; 0x2c
 8008844:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008848:	f898 4000 	ldrb.w	r4, [r8]
 800884c:	4b29      	ldr	r3, [pc, #164]	; (80088f4 <log+0xec>)
 800884e:	9008      	str	r0, [sp, #32]
 8008850:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008854:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008858:	9301      	str	r3, [sp, #4]
 800885a:	b99c      	cbnz	r4, 8008884 <log+0x7c>
 800885c:	4d26      	ldr	r5, [pc, #152]	; (80088f8 <log+0xf0>)
 800885e:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
 8008862:	4630      	mov	r0, r6
 8008864:	4639      	mov	r1, r7
 8008866:	2200      	movs	r2, #0
 8008868:	2300      	movs	r3, #0
 800886a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800886e:	f000 fe87 	bl	8009580 <__aeabi_dcmpeq>
 8008872:	2800      	cmp	r0, #0
 8008874:	d135      	bne.n	80088e2 <log+0xda>
 8008876:	2301      	movs	r3, #1
 8008878:	9300      	str	r3, [sp, #0]
 800887a:	4668      	mov	r0, sp
 800887c:	f000 fa58 	bl	8008d30 <matherr>
 8008880:	b9a8      	cbnz	r0, 80088ae <log+0xa6>
 8008882:	e010      	b.n	80088a6 <log+0x9e>
 8008884:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8008904 <log+0xfc>
 8008888:	f04f 0800 	mov.w	r8, #0
 800888c:	4630      	mov	r0, r6
 800888e:	4639      	mov	r1, r7
 8008890:	2200      	movs	r2, #0
 8008892:	2300      	movs	r3, #0
 8008894:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8008898:	f000 fe72 	bl	8009580 <__aeabi_dcmpeq>
 800889c:	b998      	cbnz	r0, 80088c6 <log+0xbe>
 800889e:	2301      	movs	r3, #1
 80088a0:	2c02      	cmp	r4, #2
 80088a2:	9300      	str	r3, [sp, #0]
 80088a4:	d1e9      	bne.n	800887a <log+0x72>
 80088a6:	f001 f9bf 	bl	8009c28 <__errno>
 80088aa:	2321      	movs	r3, #33	; 0x21
 80088ac:	6003      	str	r3, [r0, #0]
 80088ae:	4813      	ldr	r0, [pc, #76]	; (80088fc <log+0xf4>)
 80088b0:	f000 fa40 	bl	8008d34 <nan>
 80088b4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80088b8:	9b08      	ldr	r3, [sp, #32]
 80088ba:	b9ab      	cbnz	r3, 80088e8 <log+0xe0>
 80088bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80088c0:	b00b      	add	sp, #44	; 0x2c
 80088c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80088c6:	2302      	movs	r3, #2
 80088c8:	429c      	cmp	r4, r3
 80088ca:	9300      	str	r3, [sp, #0]
 80088cc:	d004      	beq.n	80088d8 <log+0xd0>
 80088ce:	4668      	mov	r0, sp
 80088d0:	f000 fa2e 	bl	8008d30 <matherr>
 80088d4:	2800      	cmp	r0, #0
 80088d6:	d1ef      	bne.n	80088b8 <log+0xb0>
 80088d8:	f001 f9a6 	bl	8009c28 <__errno>
 80088dc:	2322      	movs	r3, #34	; 0x22
 80088de:	6003      	str	r3, [r0, #0]
 80088e0:	e7ea      	b.n	80088b8 <log+0xb0>
 80088e2:	2302      	movs	r3, #2
 80088e4:	9300      	str	r3, [sp, #0]
 80088e6:	e7f2      	b.n	80088ce <log+0xc6>
 80088e8:	f001 f99e 	bl	8009c28 <__errno>
 80088ec:	9b08      	ldr	r3, [sp, #32]
 80088ee:	6003      	str	r3, [r0, #0]
 80088f0:	e7e4      	b.n	80088bc <log+0xb4>
 80088f2:	bf00      	nop
 80088f4:	0803bc88 	.word	0x0803bc88
 80088f8:	c7efffff 	.word	0xc7efffff
 80088fc:	0803bc8c 	.word	0x0803bc8c
 8008900:	1fffd70c 	.word	0x1fffd70c
 8008904:	fff00000 	.word	0xfff00000

08008908 <__ieee754_log>:
 8008908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800890c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8008910:	b085      	sub	sp, #20
 8008912:	4606      	mov	r6, r0
 8008914:	460f      	mov	r7, r1
 8008916:	460b      	mov	r3, r1
 8008918:	da5a      	bge.n	80089d0 <__ieee754_log+0xc8>
 800891a:	4602      	mov	r2, r0
 800891c:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8008920:	4322      	orrs	r2, r4
 8008922:	f000 80f6 	beq.w	8008b12 <__ieee754_log+0x20a>
 8008926:	2900      	cmp	r1, #0
 8008928:	f2c0 8172 	blt.w	8008c10 <__ieee754_log+0x308>
 800892c:	2200      	movs	r2, #0
 800892e:	4bde      	ldr	r3, [pc, #888]	; (8008ca8 <__ieee754_log+0x3a0>)
 8008930:	f000 fbbe 	bl	80090b0 <__aeabi_dmul>
 8008934:	460b      	mov	r3, r1
 8008936:	460f      	mov	r7, r1
 8008938:	49dc      	ldr	r1, [pc, #880]	; (8008cac <__ieee754_log+0x3a4>)
 800893a:	428b      	cmp	r3, r1
 800893c:	4606      	mov	r6, r0
 800893e:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8008942:	dc4a      	bgt.n	80089da <__ieee754_log+0xd2>
 8008944:	f3c3 0513 	ubfx	r5, r3, #0, #20
 8008948:	f505 2415 	add.w	r4, r5, #610304	; 0x95000
 800894c:	f604 7464 	addw	r4, r4, #3940	; 0xf64
 8008950:	f404 1e80 	and.w	lr, r4, #1048576	; 0x100000
 8008954:	f08e 517f 	eor.w	r1, lr, #1069547520	; 0x3fc00000
 8008958:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 800895c:	151b      	asrs	r3, r3, #20
 800895e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008962:	ea41 0705 	orr.w	r7, r1, r5
 8008966:	189c      	adds	r4, r3, r2
 8008968:	4630      	mov	r0, r6
 800896a:	2200      	movs	r2, #0
 800896c:	4bd0      	ldr	r3, [pc, #832]	; (8008cb0 <__ieee754_log+0x3a8>)
 800896e:	4639      	mov	r1, r7
 8008970:	eb04 541e 	add.w	r4, r4, lr, lsr #20
 8008974:	f000 f9e8 	bl	8008d48 <__aeabi_dsub>
 8008978:	1cab      	adds	r3, r5, #2
 800897a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800897e:	2b02      	cmp	r3, #2
 8008980:	4682      	mov	sl, r0
 8008982:	468b      	mov	fp, r1
 8008984:	f04f 0200 	mov.w	r2, #0
 8008988:	dc30      	bgt.n	80089ec <__ieee754_log+0xe4>
 800898a:	2300      	movs	r3, #0
 800898c:	f000 fdf8 	bl	8009580 <__aeabi_dcmpeq>
 8008990:	2800      	cmp	r0, #0
 8008992:	f000 80c7 	beq.w	8008b24 <__ieee754_log+0x21c>
 8008996:	2c00      	cmp	r4, #0
 8008998:	f000 8143 	beq.w	8008c22 <__ieee754_log+0x31a>
 800899c:	4620      	mov	r0, r4
 800899e:	f000 fb21 	bl	8008fe4 <__aeabi_i2d>
 80089a2:	a3ad      	add	r3, pc, #692	; (adr r3, 8008c58 <__ieee754_log+0x350>)
 80089a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a8:	4606      	mov	r6, r0
 80089aa:	460f      	mov	r7, r1
 80089ac:	f000 fb80 	bl	80090b0 <__aeabi_dmul>
 80089b0:	a3ab      	add	r3, pc, #684	; (adr r3, 8008c60 <__ieee754_log+0x358>)
 80089b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b6:	4604      	mov	r4, r0
 80089b8:	460d      	mov	r5, r1
 80089ba:	4630      	mov	r0, r6
 80089bc:	4639      	mov	r1, r7
 80089be:	f000 fb77 	bl	80090b0 <__aeabi_dmul>
 80089c2:	4602      	mov	r2, r0
 80089c4:	460b      	mov	r3, r1
 80089c6:	4620      	mov	r0, r4
 80089c8:	4629      	mov	r1, r5
 80089ca:	f000 f9bf 	bl	8008d4c <__adddf3>
 80089ce:	e00a      	b.n	80089e6 <__ieee754_log+0xde>
 80089d0:	49b6      	ldr	r1, [pc, #728]	; (8008cac <__ieee754_log+0x3a4>)
 80089d2:	428b      	cmp	r3, r1
 80089d4:	f04f 0200 	mov.w	r2, #0
 80089d8:	ddb4      	ble.n	8008944 <__ieee754_log+0x3c>
 80089da:	4630      	mov	r0, r6
 80089dc:	4639      	mov	r1, r7
 80089de:	4632      	mov	r2, r6
 80089e0:	463b      	mov	r3, r7
 80089e2:	f000 f9b3 	bl	8008d4c <__adddf3>
 80089e6:	b005      	add	sp, #20
 80089e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80089f0:	f000 f9ac 	bl	8008d4c <__adddf3>
 80089f4:	4602      	mov	r2, r0
 80089f6:	460b      	mov	r3, r1
 80089f8:	4650      	mov	r0, sl
 80089fa:	4659      	mov	r1, fp
 80089fc:	f000 fc82 	bl	8009304 <__aeabi_ddiv>
 8008a00:	4606      	mov	r6, r0
 8008a02:	460f      	mov	r7, r1
 8008a04:	4620      	mov	r0, r4
 8008a06:	e9cd 6700 	strd	r6, r7, [sp]
 8008a0a:	f000 faeb 	bl	8008fe4 <__aeabi_i2d>
 8008a0e:	4632      	mov	r2, r6
 8008a10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a14:	463b      	mov	r3, r7
 8008a16:	4630      	mov	r0, r6
 8008a18:	4639      	mov	r1, r7
 8008a1a:	f000 fb49 	bl	80090b0 <__aeabi_dmul>
 8008a1e:	4602      	mov	r2, r0
 8008a20:	460b      	mov	r3, r1
 8008a22:	4680      	mov	r8, r0
 8008a24:	4689      	mov	r9, r1
 8008a26:	f000 fb43 	bl	80090b0 <__aeabi_dmul>
 8008a2a:	a38f      	add	r3, pc, #572	; (adr r3, 8008c68 <__ieee754_log+0x360>)
 8008a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a30:	4606      	mov	r6, r0
 8008a32:	460f      	mov	r7, r1
 8008a34:	f000 fb3c 	bl	80090b0 <__aeabi_dmul>
 8008a38:	a38d      	add	r3, pc, #564	; (adr r3, 8008c70 <__ieee754_log+0x368>)
 8008a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a3e:	f000 f985 	bl	8008d4c <__adddf3>
 8008a42:	4632      	mov	r2, r6
 8008a44:	463b      	mov	r3, r7
 8008a46:	f000 fb33 	bl	80090b0 <__aeabi_dmul>
 8008a4a:	a38b      	add	r3, pc, #556	; (adr r3, 8008c78 <__ieee754_log+0x370>)
 8008a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a50:	f000 f97c 	bl	8008d4c <__adddf3>
 8008a54:	4632      	mov	r2, r6
 8008a56:	463b      	mov	r3, r7
 8008a58:	f000 fb2a 	bl	80090b0 <__aeabi_dmul>
 8008a5c:	a388      	add	r3, pc, #544	; (adr r3, 8008c80 <__ieee754_log+0x378>)
 8008a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a62:	f000 f973 	bl	8008d4c <__adddf3>
 8008a66:	4642      	mov	r2, r8
 8008a68:	464b      	mov	r3, r9
 8008a6a:	f000 fb21 	bl	80090b0 <__aeabi_dmul>
 8008a6e:	a386      	add	r3, pc, #536	; (adr r3, 8008c88 <__ieee754_log+0x380>)
 8008a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a74:	4680      	mov	r8, r0
 8008a76:	4689      	mov	r9, r1
 8008a78:	4630      	mov	r0, r6
 8008a7a:	4639      	mov	r1, r7
 8008a7c:	f000 fb18 	bl	80090b0 <__aeabi_dmul>
 8008a80:	a383      	add	r3, pc, #524	; (adr r3, 8008c90 <__ieee754_log+0x388>)
 8008a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a86:	f000 f961 	bl	8008d4c <__adddf3>
 8008a8a:	4632      	mov	r2, r6
 8008a8c:	463b      	mov	r3, r7
 8008a8e:	f000 fb0f 	bl	80090b0 <__aeabi_dmul>
 8008a92:	a381      	add	r3, pc, #516	; (adr r3, 8008c98 <__ieee754_log+0x390>)
 8008a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a98:	f000 f958 	bl	8008d4c <__adddf3>
 8008a9c:	4632      	mov	r2, r6
 8008a9e:	463b      	mov	r3, r7
 8008aa0:	f000 fb06 	bl	80090b0 <__aeabi_dmul>
 8008aa4:	460b      	mov	r3, r1
 8008aa6:	4602      	mov	r2, r0
 8008aa8:	4649      	mov	r1, r9
 8008aaa:	4640      	mov	r0, r8
 8008aac:	f000 f94e 	bl	8008d4c <__adddf3>
 8008ab0:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8008ab4:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8008ab8:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8008abc:	3551      	adds	r5, #81	; 0x51
 8008abe:	431d      	orrs	r5, r3
 8008ac0:	2d00      	cmp	r5, #0
 8008ac2:	4606      	mov	r6, r0
 8008ac4:	460f      	mov	r7, r1
 8008ac6:	dd53      	ble.n	8008b70 <__ieee754_log+0x268>
 8008ac8:	2200      	movs	r2, #0
 8008aca:	4b7a      	ldr	r3, [pc, #488]	; (8008cb4 <__ieee754_log+0x3ac>)
 8008acc:	4650      	mov	r0, sl
 8008ace:	4659      	mov	r1, fp
 8008ad0:	f000 faee 	bl	80090b0 <__aeabi_dmul>
 8008ad4:	4652      	mov	r2, sl
 8008ad6:	465b      	mov	r3, fp
 8008ad8:	f000 faea 	bl	80090b0 <__aeabi_dmul>
 8008adc:	4680      	mov	r8, r0
 8008ade:	4689      	mov	r9, r1
 8008ae0:	2c00      	cmp	r4, #0
 8008ae2:	d160      	bne.n	8008ba6 <__ieee754_log+0x29e>
 8008ae4:	4632      	mov	r2, r6
 8008ae6:	463b      	mov	r3, r7
 8008ae8:	f000 f930 	bl	8008d4c <__adddf3>
 8008aec:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008af0:	f000 fade 	bl	80090b0 <__aeabi_dmul>
 8008af4:	4602      	mov	r2, r0
 8008af6:	460b      	mov	r3, r1
 8008af8:	4640      	mov	r0, r8
 8008afa:	4649      	mov	r1, r9
 8008afc:	f000 f924 	bl	8008d48 <__aeabi_dsub>
 8008b00:	4602      	mov	r2, r0
 8008b02:	460b      	mov	r3, r1
 8008b04:	4650      	mov	r0, sl
 8008b06:	4659      	mov	r1, fp
 8008b08:	f000 f91e 	bl	8008d48 <__aeabi_dsub>
 8008b0c:	b005      	add	sp, #20
 8008b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b12:	2200      	movs	r2, #0
 8008b14:	2300      	movs	r3, #0
 8008b16:	2000      	movs	r0, #0
 8008b18:	4967      	ldr	r1, [pc, #412]	; (8008cb8 <__ieee754_log+0x3b0>)
 8008b1a:	f000 fbf3 	bl	8009304 <__aeabi_ddiv>
 8008b1e:	b005      	add	sp, #20
 8008b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b24:	4652      	mov	r2, sl
 8008b26:	465b      	mov	r3, fp
 8008b28:	4650      	mov	r0, sl
 8008b2a:	4659      	mov	r1, fp
 8008b2c:	f000 fac0 	bl	80090b0 <__aeabi_dmul>
 8008b30:	a35b      	add	r3, pc, #364	; (adr r3, 8008ca0 <__ieee754_log+0x398>)
 8008b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b36:	4606      	mov	r6, r0
 8008b38:	460f      	mov	r7, r1
 8008b3a:	4650      	mov	r0, sl
 8008b3c:	4659      	mov	r1, fp
 8008b3e:	f000 fab7 	bl	80090b0 <__aeabi_dmul>
 8008b42:	4602      	mov	r2, r0
 8008b44:	460b      	mov	r3, r1
 8008b46:	2000      	movs	r0, #0
 8008b48:	495a      	ldr	r1, [pc, #360]	; (8008cb4 <__ieee754_log+0x3ac>)
 8008b4a:	f000 f8fd 	bl	8008d48 <__aeabi_dsub>
 8008b4e:	4602      	mov	r2, r0
 8008b50:	460b      	mov	r3, r1
 8008b52:	4630      	mov	r0, r6
 8008b54:	4639      	mov	r1, r7
 8008b56:	f000 faab 	bl	80090b0 <__aeabi_dmul>
 8008b5a:	4606      	mov	r6, r0
 8008b5c:	460f      	mov	r7, r1
 8008b5e:	2c00      	cmp	r4, #0
 8008b60:	d162      	bne.n	8008c28 <__ieee754_log+0x320>
 8008b62:	4650      	mov	r0, sl
 8008b64:	4659      	mov	r1, fp
 8008b66:	4632      	mov	r2, r6
 8008b68:	463b      	mov	r3, r7
 8008b6a:	f000 f8ed 	bl	8008d48 <__aeabi_dsub>
 8008b6e:	e73a      	b.n	80089e6 <__ieee754_log+0xde>
 8008b70:	2c00      	cmp	r4, #0
 8008b72:	f000 80a3 	beq.w	8008cbc <__ieee754_log+0x3b4>
 8008b76:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008b7a:	a337      	add	r3, pc, #220	; (adr r3, 8008c58 <__ieee754_log+0x350>)
 8008b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b80:	4640      	mov	r0, r8
 8008b82:	4649      	mov	r1, r9
 8008b84:	f000 fa94 	bl	80090b0 <__aeabi_dmul>
 8008b88:	4632      	mov	r2, r6
 8008b8a:	463b      	mov	r3, r7
 8008b8c:	4604      	mov	r4, r0
 8008b8e:	460d      	mov	r5, r1
 8008b90:	4650      	mov	r0, sl
 8008b92:	4659      	mov	r1, fp
 8008b94:	f000 f8d8 	bl	8008d48 <__aeabi_dsub>
 8008b98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b9c:	f000 fa88 	bl	80090b0 <__aeabi_dmul>
 8008ba0:	4606      	mov	r6, r0
 8008ba2:	460f      	mov	r7, r1
 8008ba4:	e04c      	b.n	8008c40 <__ieee754_log+0x338>
 8008ba6:	a32c      	add	r3, pc, #176	; (adr r3, 8008c58 <__ieee754_log+0x350>)
 8008ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bb0:	f000 fa7e 	bl	80090b0 <__aeabi_dmul>
 8008bb4:	4632      	mov	r2, r6
 8008bb6:	463b      	mov	r3, r7
 8008bb8:	4604      	mov	r4, r0
 8008bba:	460d      	mov	r5, r1
 8008bbc:	4640      	mov	r0, r8
 8008bbe:	4649      	mov	r1, r9
 8008bc0:	f000 f8c4 	bl	8008d4c <__adddf3>
 8008bc4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008bc8:	f000 fa72 	bl	80090b0 <__aeabi_dmul>
 8008bcc:	a324      	add	r3, pc, #144	; (adr r3, 8008c60 <__ieee754_log+0x358>)
 8008bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd2:	4606      	mov	r6, r0
 8008bd4:	460f      	mov	r7, r1
 8008bd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bda:	f000 fa69 	bl	80090b0 <__aeabi_dmul>
 8008bde:	4602      	mov	r2, r0
 8008be0:	460b      	mov	r3, r1
 8008be2:	4630      	mov	r0, r6
 8008be4:	4639      	mov	r1, r7
 8008be6:	f000 f8b1 	bl	8008d4c <__adddf3>
 8008bea:	4602      	mov	r2, r0
 8008bec:	460b      	mov	r3, r1
 8008bee:	4640      	mov	r0, r8
 8008bf0:	4649      	mov	r1, r9
 8008bf2:	f000 f8a9 	bl	8008d48 <__aeabi_dsub>
 8008bf6:	4652      	mov	r2, sl
 8008bf8:	465b      	mov	r3, fp
 8008bfa:	f000 f8a5 	bl	8008d48 <__aeabi_dsub>
 8008bfe:	4602      	mov	r2, r0
 8008c00:	460b      	mov	r3, r1
 8008c02:	4620      	mov	r0, r4
 8008c04:	4629      	mov	r1, r5
 8008c06:	f000 f89f 	bl	8008d48 <__aeabi_dsub>
 8008c0a:	b005      	add	sp, #20
 8008c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c10:	4602      	mov	r2, r0
 8008c12:	460b      	mov	r3, r1
 8008c14:	f000 f898 	bl	8008d48 <__aeabi_dsub>
 8008c18:	2200      	movs	r2, #0
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	f000 fb72 	bl	8009304 <__aeabi_ddiv>
 8008c20:	e6e1      	b.n	80089e6 <__ieee754_log+0xde>
 8008c22:	2000      	movs	r0, #0
 8008c24:	2100      	movs	r1, #0
 8008c26:	e6de      	b.n	80089e6 <__ieee754_log+0xde>
 8008c28:	4620      	mov	r0, r4
 8008c2a:	f000 f9db 	bl	8008fe4 <__aeabi_i2d>
 8008c2e:	a30a      	add	r3, pc, #40	; (adr r3, 8008c58 <__ieee754_log+0x350>)
 8008c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c34:	4680      	mov	r8, r0
 8008c36:	4689      	mov	r9, r1
 8008c38:	f000 fa3a 	bl	80090b0 <__aeabi_dmul>
 8008c3c:	4604      	mov	r4, r0
 8008c3e:	460d      	mov	r5, r1
 8008c40:	a307      	add	r3, pc, #28	; (adr r3, 8008c60 <__ieee754_log+0x358>)
 8008c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c46:	4640      	mov	r0, r8
 8008c48:	4649      	mov	r1, r9
 8008c4a:	f000 fa31 	bl	80090b0 <__aeabi_dmul>
 8008c4e:	4602      	mov	r2, r0
 8008c50:	460b      	mov	r3, r1
 8008c52:	4630      	mov	r0, r6
 8008c54:	4639      	mov	r1, r7
 8008c56:	e7cc      	b.n	8008bf2 <__ieee754_log+0x2ea>
 8008c58:	fee00000 	.word	0xfee00000
 8008c5c:	3fe62e42 	.word	0x3fe62e42
 8008c60:	35793c76 	.word	0x35793c76
 8008c64:	3dea39ef 	.word	0x3dea39ef
 8008c68:	df3e5244 	.word	0xdf3e5244
 8008c6c:	3fc2f112 	.word	0x3fc2f112
 8008c70:	96cb03de 	.word	0x96cb03de
 8008c74:	3fc74664 	.word	0x3fc74664
 8008c78:	94229359 	.word	0x94229359
 8008c7c:	3fd24924 	.word	0x3fd24924
 8008c80:	55555593 	.word	0x55555593
 8008c84:	3fe55555 	.word	0x3fe55555
 8008c88:	d078c69f 	.word	0xd078c69f
 8008c8c:	3fc39a09 	.word	0x3fc39a09
 8008c90:	1d8e78af 	.word	0x1d8e78af
 8008c94:	3fcc71c5 	.word	0x3fcc71c5
 8008c98:	9997fa04 	.word	0x9997fa04
 8008c9c:	3fd99999 	.word	0x3fd99999
 8008ca0:	55555555 	.word	0x55555555
 8008ca4:	3fd55555 	.word	0x3fd55555
 8008ca8:	43500000 	.word	0x43500000
 8008cac:	7fefffff 	.word	0x7fefffff
 8008cb0:	3ff00000 	.word	0x3ff00000
 8008cb4:	3fe00000 	.word	0x3fe00000
 8008cb8:	c3500000 	.word	0xc3500000
 8008cbc:	4602      	mov	r2, r0
 8008cbe:	460b      	mov	r3, r1
 8008cc0:	4650      	mov	r0, sl
 8008cc2:	4659      	mov	r1, fp
 8008cc4:	f000 f840 	bl	8008d48 <__aeabi_dsub>
 8008cc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ccc:	f000 f9f0 	bl	80090b0 <__aeabi_dmul>
 8008cd0:	e716      	b.n	8008b00 <__ieee754_log+0x1f8>
 8008cd2:	bf00      	nop
 8008cd4:	f3af 8000 	nop.w

08008cd8 <__fpclassifyd>:
 8008cd8:	b410      	push	{r4}
 8008cda:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 8008cde:	460b      	mov	r3, r1
 8008ce0:	d008      	beq.n	8008cf4 <__fpclassifyd+0x1c>
 8008ce2:	4a11      	ldr	r2, [pc, #68]	; (8008d28 <__fpclassifyd+0x50>)
 8008ce4:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008ce8:	4291      	cmp	r1, r2
 8008cea:	d808      	bhi.n	8008cfe <__fpclassifyd+0x26>
 8008cec:	2004      	movs	r0, #4
 8008cee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cf2:	4770      	bx	lr
 8008cf4:	b918      	cbnz	r0, 8008cfe <__fpclassifyd+0x26>
 8008cf6:	2002      	movs	r0, #2
 8008cf8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cfc:	4770      	bx	lr
 8008cfe:	f103 43ff 	add.w	r3, r3, #2139095040	; 0x7f800000
 8008d02:	4a09      	ldr	r2, [pc, #36]	; (8008d28 <__fpclassifyd+0x50>)
 8008d04:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d9ef      	bls.n	8008cec <__fpclassifyd+0x14>
 8008d0c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008d10:	d201      	bcs.n	8008d16 <__fpclassifyd+0x3e>
 8008d12:	2003      	movs	r0, #3
 8008d14:	e7eb      	b.n	8008cee <__fpclassifyd+0x16>
 8008d16:	4b05      	ldr	r3, [pc, #20]	; (8008d2c <__fpclassifyd+0x54>)
 8008d18:	429c      	cmp	r4, r3
 8008d1a:	d001      	beq.n	8008d20 <__fpclassifyd+0x48>
 8008d1c:	2000      	movs	r0, #0
 8008d1e:	e7e6      	b.n	8008cee <__fpclassifyd+0x16>
 8008d20:	fab0 f080 	clz	r0, r0
 8008d24:	0940      	lsrs	r0, r0, #5
 8008d26:	e7e2      	b.n	8008cee <__fpclassifyd+0x16>
 8008d28:	7fdfffff 	.word	0x7fdfffff
 8008d2c:	7ff00000 	.word	0x7ff00000

08008d30 <matherr>:
 8008d30:	2000      	movs	r0, #0
 8008d32:	4770      	bx	lr

08008d34 <nan>:
 8008d34:	2000      	movs	r0, #0
 8008d36:	4901      	ldr	r1, [pc, #4]	; (8008d3c <nan+0x8>)
 8008d38:	4770      	bx	lr
 8008d3a:	bf00      	nop
 8008d3c:	7ff80000 	.word	0x7ff80000

08008d40 <__aeabi_drsub>:
 8008d40:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8008d44:	e002      	b.n	8008d4c <__adddf3>
 8008d46:	bf00      	nop

08008d48 <__aeabi_dsub>:
 8008d48:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08008d4c <__adddf3>:
 8008d4c:	b530      	push	{r4, r5, lr}
 8008d4e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008d52:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008d56:	ea94 0f05 	teq	r4, r5
 8008d5a:	bf08      	it	eq
 8008d5c:	ea90 0f02 	teqeq	r0, r2
 8008d60:	bf1f      	itttt	ne
 8008d62:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008d66:	ea55 0c02 	orrsne.w	ip, r5, r2
 8008d6a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8008d6e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008d72:	f000 80e2 	beq.w	8008f3a <__adddf3+0x1ee>
 8008d76:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8008d7a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8008d7e:	bfb8      	it	lt
 8008d80:	426d      	neglt	r5, r5
 8008d82:	dd0c      	ble.n	8008d9e <__adddf3+0x52>
 8008d84:	442c      	add	r4, r5
 8008d86:	ea80 0202 	eor.w	r2, r0, r2
 8008d8a:	ea81 0303 	eor.w	r3, r1, r3
 8008d8e:	ea82 0000 	eor.w	r0, r2, r0
 8008d92:	ea83 0101 	eor.w	r1, r3, r1
 8008d96:	ea80 0202 	eor.w	r2, r0, r2
 8008d9a:	ea81 0303 	eor.w	r3, r1, r3
 8008d9e:	2d36      	cmp	r5, #54	; 0x36
 8008da0:	bf88      	it	hi
 8008da2:	bd30      	pophi	{r4, r5, pc}
 8008da4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008da8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8008dac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008db0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008db4:	d002      	beq.n	8008dbc <__adddf3+0x70>
 8008db6:	4240      	negs	r0, r0
 8008db8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008dbc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008dc0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008dc4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008dc8:	d002      	beq.n	8008dd0 <__adddf3+0x84>
 8008dca:	4252      	negs	r2, r2
 8008dcc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008dd0:	ea94 0f05 	teq	r4, r5
 8008dd4:	f000 80a7 	beq.w	8008f26 <__adddf3+0x1da>
 8008dd8:	f1a4 0401 	sub.w	r4, r4, #1
 8008ddc:	f1d5 0e20 	rsbs	lr, r5, #32
 8008de0:	db0d      	blt.n	8008dfe <__adddf3+0xb2>
 8008de2:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008de6:	fa22 f205 	lsr.w	r2, r2, r5
 8008dea:	1880      	adds	r0, r0, r2
 8008dec:	f141 0100 	adc.w	r1, r1, #0
 8008df0:	fa03 f20e 	lsl.w	r2, r3, lr
 8008df4:	1880      	adds	r0, r0, r2
 8008df6:	fa43 f305 	asr.w	r3, r3, r5
 8008dfa:	4159      	adcs	r1, r3
 8008dfc:	e00e      	b.n	8008e1c <__adddf3+0xd0>
 8008dfe:	f1a5 0520 	sub.w	r5, r5, #32
 8008e02:	f10e 0e20 	add.w	lr, lr, #32
 8008e06:	2a01      	cmp	r2, #1
 8008e08:	fa03 fc0e 	lsl.w	ip, r3, lr
 8008e0c:	bf28      	it	cs
 8008e0e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8008e12:	fa43 f305 	asr.w	r3, r3, r5
 8008e16:	18c0      	adds	r0, r0, r3
 8008e18:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8008e1c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008e20:	d507      	bpl.n	8008e32 <__adddf3+0xe6>
 8008e22:	f04f 0e00 	mov.w	lr, #0
 8008e26:	f1dc 0c00 	rsbs	ip, ip, #0
 8008e2a:	eb7e 0000 	sbcs.w	r0, lr, r0
 8008e2e:	eb6e 0101 	sbc.w	r1, lr, r1
 8008e32:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8008e36:	d31b      	bcc.n	8008e70 <__adddf3+0x124>
 8008e38:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8008e3c:	d30c      	bcc.n	8008e58 <__adddf3+0x10c>
 8008e3e:	0849      	lsrs	r1, r1, #1
 8008e40:	ea5f 0030 	movs.w	r0, r0, rrx
 8008e44:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8008e48:	f104 0401 	add.w	r4, r4, #1
 8008e4c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008e50:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008e54:	f080 809a 	bcs.w	8008f8c <__adddf3+0x240>
 8008e58:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8008e5c:	bf08      	it	eq
 8008e5e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008e62:	f150 0000 	adcs.w	r0, r0, #0
 8008e66:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8008e6a:	ea41 0105 	orr.w	r1, r1, r5
 8008e6e:	bd30      	pop	{r4, r5, pc}
 8008e70:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008e74:	4140      	adcs	r0, r0
 8008e76:	eb41 0101 	adc.w	r1, r1, r1
 8008e7a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008e7e:	f1a4 0401 	sub.w	r4, r4, #1
 8008e82:	d1e9      	bne.n	8008e58 <__adddf3+0x10c>
 8008e84:	f091 0f00 	teq	r1, #0
 8008e88:	bf04      	itt	eq
 8008e8a:	4601      	moveq	r1, r0
 8008e8c:	2000      	moveq	r0, #0
 8008e8e:	fab1 f381 	clz	r3, r1
 8008e92:	bf08      	it	eq
 8008e94:	3320      	addeq	r3, #32
 8008e96:	f1a3 030b 	sub.w	r3, r3, #11
 8008e9a:	f1b3 0220 	subs.w	r2, r3, #32
 8008e9e:	da0c      	bge.n	8008eba <__adddf3+0x16e>
 8008ea0:	320c      	adds	r2, #12
 8008ea2:	dd08      	ble.n	8008eb6 <__adddf3+0x16a>
 8008ea4:	f102 0c14 	add.w	ip, r2, #20
 8008ea8:	f1c2 020c 	rsb	r2, r2, #12
 8008eac:	fa01 f00c 	lsl.w	r0, r1, ip
 8008eb0:	fa21 f102 	lsr.w	r1, r1, r2
 8008eb4:	e00c      	b.n	8008ed0 <__adddf3+0x184>
 8008eb6:	f102 0214 	add.w	r2, r2, #20
 8008eba:	bfd8      	it	le
 8008ebc:	f1c2 0c20 	rsble	ip, r2, #32
 8008ec0:	fa01 f102 	lsl.w	r1, r1, r2
 8008ec4:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008ec8:	bfdc      	itt	le
 8008eca:	ea41 010c 	orrle.w	r1, r1, ip
 8008ece:	4090      	lslle	r0, r2
 8008ed0:	1ae4      	subs	r4, r4, r3
 8008ed2:	bfa2      	ittt	ge
 8008ed4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008ed8:	4329      	orrge	r1, r5
 8008eda:	bd30      	popge	{r4, r5, pc}
 8008edc:	ea6f 0404 	mvn.w	r4, r4
 8008ee0:	3c1f      	subs	r4, #31
 8008ee2:	da1c      	bge.n	8008f1e <__adddf3+0x1d2>
 8008ee4:	340c      	adds	r4, #12
 8008ee6:	dc0e      	bgt.n	8008f06 <__adddf3+0x1ba>
 8008ee8:	f104 0414 	add.w	r4, r4, #20
 8008eec:	f1c4 0220 	rsb	r2, r4, #32
 8008ef0:	fa20 f004 	lsr.w	r0, r0, r4
 8008ef4:	fa01 f302 	lsl.w	r3, r1, r2
 8008ef8:	ea40 0003 	orr.w	r0, r0, r3
 8008efc:	fa21 f304 	lsr.w	r3, r1, r4
 8008f00:	ea45 0103 	orr.w	r1, r5, r3
 8008f04:	bd30      	pop	{r4, r5, pc}
 8008f06:	f1c4 040c 	rsb	r4, r4, #12
 8008f0a:	f1c4 0220 	rsb	r2, r4, #32
 8008f0e:	fa20 f002 	lsr.w	r0, r0, r2
 8008f12:	fa01 f304 	lsl.w	r3, r1, r4
 8008f16:	ea40 0003 	orr.w	r0, r0, r3
 8008f1a:	4629      	mov	r1, r5
 8008f1c:	bd30      	pop	{r4, r5, pc}
 8008f1e:	fa21 f004 	lsr.w	r0, r1, r4
 8008f22:	4629      	mov	r1, r5
 8008f24:	bd30      	pop	{r4, r5, pc}
 8008f26:	f094 0f00 	teq	r4, #0
 8008f2a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8008f2e:	bf06      	itte	eq
 8008f30:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8008f34:	3401      	addeq	r4, #1
 8008f36:	3d01      	subne	r5, #1
 8008f38:	e74e      	b.n	8008dd8 <__adddf3+0x8c>
 8008f3a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8008f3e:	bf18      	it	ne
 8008f40:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008f44:	d029      	beq.n	8008f9a <__adddf3+0x24e>
 8008f46:	ea94 0f05 	teq	r4, r5
 8008f4a:	bf08      	it	eq
 8008f4c:	ea90 0f02 	teqeq	r0, r2
 8008f50:	d005      	beq.n	8008f5e <__adddf3+0x212>
 8008f52:	ea54 0c00 	orrs.w	ip, r4, r0
 8008f56:	bf04      	itt	eq
 8008f58:	4619      	moveq	r1, r3
 8008f5a:	4610      	moveq	r0, r2
 8008f5c:	bd30      	pop	{r4, r5, pc}
 8008f5e:	ea91 0f03 	teq	r1, r3
 8008f62:	bf1e      	ittt	ne
 8008f64:	2100      	movne	r1, #0
 8008f66:	2000      	movne	r0, #0
 8008f68:	bd30      	popne	{r4, r5, pc}
 8008f6a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8008f6e:	d105      	bne.n	8008f7c <__adddf3+0x230>
 8008f70:	0040      	lsls	r0, r0, #1
 8008f72:	4149      	adcs	r1, r1
 8008f74:	bf28      	it	cs
 8008f76:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8008f7a:	bd30      	pop	{r4, r5, pc}
 8008f7c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008f80:	bf3c      	itt	cc
 8008f82:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008f86:	bd30      	popcc	{r4, r5, pc}
 8008f88:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008f8c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008f90:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008f94:	f04f 0000 	mov.w	r0, #0
 8008f98:	bd30      	pop	{r4, r5, pc}
 8008f9a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8008f9e:	bf1a      	itte	ne
 8008fa0:	4619      	movne	r1, r3
 8008fa2:	4610      	movne	r0, r2
 8008fa4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008fa8:	bf1c      	itt	ne
 8008faa:	460b      	movne	r3, r1
 8008fac:	4602      	movne	r2, r0
 8008fae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008fb2:	bf06      	itte	eq
 8008fb4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008fb8:	ea91 0f03 	teqeq	r1, r3
 8008fbc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008fc0:	bd30      	pop	{r4, r5, pc}
 8008fc2:	bf00      	nop

08008fc4 <__aeabi_ui2d>:
 8008fc4:	f090 0f00 	teq	r0, #0
 8008fc8:	bf04      	itt	eq
 8008fca:	2100      	moveq	r1, #0
 8008fcc:	4770      	bxeq	lr
 8008fce:	b530      	push	{r4, r5, lr}
 8008fd0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008fd4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008fd8:	f04f 0500 	mov.w	r5, #0
 8008fdc:	f04f 0100 	mov.w	r1, #0
 8008fe0:	e750      	b.n	8008e84 <__adddf3+0x138>
 8008fe2:	bf00      	nop

08008fe4 <__aeabi_i2d>:
 8008fe4:	f090 0f00 	teq	r0, #0
 8008fe8:	bf04      	itt	eq
 8008fea:	2100      	moveq	r1, #0
 8008fec:	4770      	bxeq	lr
 8008fee:	b530      	push	{r4, r5, lr}
 8008ff0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008ff4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008ff8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8008ffc:	bf48      	it	mi
 8008ffe:	4240      	negmi	r0, r0
 8009000:	f04f 0100 	mov.w	r1, #0
 8009004:	e73e      	b.n	8008e84 <__adddf3+0x138>
 8009006:	bf00      	nop

08009008 <__aeabi_f2d>:
 8009008:	0042      	lsls	r2, r0, #1
 800900a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800900e:	ea4f 0131 	mov.w	r1, r1, rrx
 8009012:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8009016:	bf1f      	itttt	ne
 8009018:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800901c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8009020:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8009024:	4770      	bxne	lr
 8009026:	f092 0f00 	teq	r2, #0
 800902a:	bf14      	ite	ne
 800902c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8009030:	4770      	bxeq	lr
 8009032:	b530      	push	{r4, r5, lr}
 8009034:	f44f 7460 	mov.w	r4, #896	; 0x380
 8009038:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800903c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009040:	e720      	b.n	8008e84 <__adddf3+0x138>
 8009042:	bf00      	nop

08009044 <__aeabi_ul2d>:
 8009044:	ea50 0201 	orrs.w	r2, r0, r1
 8009048:	bf08      	it	eq
 800904a:	4770      	bxeq	lr
 800904c:	b530      	push	{r4, r5, lr}
 800904e:	f04f 0500 	mov.w	r5, #0
 8009052:	e00a      	b.n	800906a <__aeabi_l2d+0x16>

08009054 <__aeabi_l2d>:
 8009054:	ea50 0201 	orrs.w	r2, r0, r1
 8009058:	bf08      	it	eq
 800905a:	4770      	bxeq	lr
 800905c:	b530      	push	{r4, r5, lr}
 800905e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8009062:	d502      	bpl.n	800906a <__aeabi_l2d+0x16>
 8009064:	4240      	negs	r0, r0
 8009066:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800906a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800906e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8009072:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8009076:	f43f aedc 	beq.w	8008e32 <__adddf3+0xe6>
 800907a:	f04f 0203 	mov.w	r2, #3
 800907e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8009082:	bf18      	it	ne
 8009084:	3203      	addne	r2, #3
 8009086:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800908a:	bf18      	it	ne
 800908c:	3203      	addne	r2, #3
 800908e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8009092:	f1c2 0320 	rsb	r3, r2, #32
 8009096:	fa00 fc03 	lsl.w	ip, r0, r3
 800909a:	fa20 f002 	lsr.w	r0, r0, r2
 800909e:	fa01 fe03 	lsl.w	lr, r1, r3
 80090a2:	ea40 000e 	orr.w	r0, r0, lr
 80090a6:	fa21 f102 	lsr.w	r1, r1, r2
 80090aa:	4414      	add	r4, r2
 80090ac:	e6c1      	b.n	8008e32 <__adddf3+0xe6>
 80090ae:	bf00      	nop

080090b0 <__aeabi_dmul>:
 80090b0:	b570      	push	{r4, r5, r6, lr}
 80090b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80090b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80090ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80090be:	bf1d      	ittte	ne
 80090c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80090c4:	ea94 0f0c 	teqne	r4, ip
 80090c8:	ea95 0f0c 	teqne	r5, ip
 80090cc:	f000 f8de 	bleq	800928c <__aeabi_dmul+0x1dc>
 80090d0:	442c      	add	r4, r5
 80090d2:	ea81 0603 	eor.w	r6, r1, r3
 80090d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80090da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80090de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80090e2:	bf18      	it	ne
 80090e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80090e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80090ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80090f0:	d038      	beq.n	8009164 <__aeabi_dmul+0xb4>
 80090f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80090f6:	f04f 0500 	mov.w	r5, #0
 80090fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80090fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8009102:	fbe0 e503 	umlal	lr, r5, r0, r3
 8009106:	f04f 0600 	mov.w	r6, #0
 800910a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800910e:	f09c 0f00 	teq	ip, #0
 8009112:	bf18      	it	ne
 8009114:	f04e 0e01 	orrne.w	lr, lr, #1
 8009118:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800911c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8009120:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8009124:	d204      	bcs.n	8009130 <__aeabi_dmul+0x80>
 8009126:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800912a:	416d      	adcs	r5, r5
 800912c:	eb46 0606 	adc.w	r6, r6, r6
 8009130:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8009134:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8009138:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800913c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8009140:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8009144:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8009148:	bf88      	it	hi
 800914a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800914e:	d81e      	bhi.n	800918e <__aeabi_dmul+0xde>
 8009150:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8009154:	bf08      	it	eq
 8009156:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800915a:	f150 0000 	adcs.w	r0, r0, #0
 800915e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8009162:	bd70      	pop	{r4, r5, r6, pc}
 8009164:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8009168:	ea46 0101 	orr.w	r1, r6, r1
 800916c:	ea40 0002 	orr.w	r0, r0, r2
 8009170:	ea81 0103 	eor.w	r1, r1, r3
 8009174:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8009178:	bfc2      	ittt	gt
 800917a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800917e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8009182:	bd70      	popgt	{r4, r5, r6, pc}
 8009184:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009188:	f04f 0e00 	mov.w	lr, #0
 800918c:	3c01      	subs	r4, #1
 800918e:	f300 80ab 	bgt.w	80092e8 <__aeabi_dmul+0x238>
 8009192:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8009196:	bfde      	ittt	le
 8009198:	2000      	movle	r0, #0
 800919a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800919e:	bd70      	pople	{r4, r5, r6, pc}
 80091a0:	f1c4 0400 	rsb	r4, r4, #0
 80091a4:	3c20      	subs	r4, #32
 80091a6:	da35      	bge.n	8009214 <__aeabi_dmul+0x164>
 80091a8:	340c      	adds	r4, #12
 80091aa:	dc1b      	bgt.n	80091e4 <__aeabi_dmul+0x134>
 80091ac:	f104 0414 	add.w	r4, r4, #20
 80091b0:	f1c4 0520 	rsb	r5, r4, #32
 80091b4:	fa00 f305 	lsl.w	r3, r0, r5
 80091b8:	fa20 f004 	lsr.w	r0, r0, r4
 80091bc:	fa01 f205 	lsl.w	r2, r1, r5
 80091c0:	ea40 0002 	orr.w	r0, r0, r2
 80091c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80091c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80091cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80091d0:	fa21 f604 	lsr.w	r6, r1, r4
 80091d4:	eb42 0106 	adc.w	r1, r2, r6
 80091d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80091dc:	bf08      	it	eq
 80091de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80091e2:	bd70      	pop	{r4, r5, r6, pc}
 80091e4:	f1c4 040c 	rsb	r4, r4, #12
 80091e8:	f1c4 0520 	rsb	r5, r4, #32
 80091ec:	fa00 f304 	lsl.w	r3, r0, r4
 80091f0:	fa20 f005 	lsr.w	r0, r0, r5
 80091f4:	fa01 f204 	lsl.w	r2, r1, r4
 80091f8:	ea40 0002 	orr.w	r0, r0, r2
 80091fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8009200:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8009204:	f141 0100 	adc.w	r1, r1, #0
 8009208:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800920c:	bf08      	it	eq
 800920e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8009212:	bd70      	pop	{r4, r5, r6, pc}
 8009214:	f1c4 0520 	rsb	r5, r4, #32
 8009218:	fa00 f205 	lsl.w	r2, r0, r5
 800921c:	ea4e 0e02 	orr.w	lr, lr, r2
 8009220:	fa20 f304 	lsr.w	r3, r0, r4
 8009224:	fa01 f205 	lsl.w	r2, r1, r5
 8009228:	ea43 0302 	orr.w	r3, r3, r2
 800922c:	fa21 f004 	lsr.w	r0, r1, r4
 8009230:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8009234:	fa21 f204 	lsr.w	r2, r1, r4
 8009238:	ea20 0002 	bic.w	r0, r0, r2
 800923c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8009240:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8009244:	bf08      	it	eq
 8009246:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800924a:	bd70      	pop	{r4, r5, r6, pc}
 800924c:	f094 0f00 	teq	r4, #0
 8009250:	d10f      	bne.n	8009272 <__aeabi_dmul+0x1c2>
 8009252:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8009256:	0040      	lsls	r0, r0, #1
 8009258:	eb41 0101 	adc.w	r1, r1, r1
 800925c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8009260:	bf08      	it	eq
 8009262:	3c01      	subeq	r4, #1
 8009264:	d0f7      	beq.n	8009256 <__aeabi_dmul+0x1a6>
 8009266:	ea41 0106 	orr.w	r1, r1, r6
 800926a:	f095 0f00 	teq	r5, #0
 800926e:	bf18      	it	ne
 8009270:	4770      	bxne	lr
 8009272:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8009276:	0052      	lsls	r2, r2, #1
 8009278:	eb43 0303 	adc.w	r3, r3, r3
 800927c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8009280:	bf08      	it	eq
 8009282:	3d01      	subeq	r5, #1
 8009284:	d0f7      	beq.n	8009276 <__aeabi_dmul+0x1c6>
 8009286:	ea43 0306 	orr.w	r3, r3, r6
 800928a:	4770      	bx	lr
 800928c:	ea94 0f0c 	teq	r4, ip
 8009290:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8009294:	bf18      	it	ne
 8009296:	ea95 0f0c 	teqne	r5, ip
 800929a:	d00c      	beq.n	80092b6 <__aeabi_dmul+0x206>
 800929c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80092a0:	bf18      	it	ne
 80092a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80092a6:	d1d1      	bne.n	800924c <__aeabi_dmul+0x19c>
 80092a8:	ea81 0103 	eor.w	r1, r1, r3
 80092ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80092b0:	f04f 0000 	mov.w	r0, #0
 80092b4:	bd70      	pop	{r4, r5, r6, pc}
 80092b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80092ba:	bf06      	itte	eq
 80092bc:	4610      	moveq	r0, r2
 80092be:	4619      	moveq	r1, r3
 80092c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80092c4:	d019      	beq.n	80092fa <__aeabi_dmul+0x24a>
 80092c6:	ea94 0f0c 	teq	r4, ip
 80092ca:	d102      	bne.n	80092d2 <__aeabi_dmul+0x222>
 80092cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80092d0:	d113      	bne.n	80092fa <__aeabi_dmul+0x24a>
 80092d2:	ea95 0f0c 	teq	r5, ip
 80092d6:	d105      	bne.n	80092e4 <__aeabi_dmul+0x234>
 80092d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80092dc:	bf1c      	itt	ne
 80092de:	4610      	movne	r0, r2
 80092e0:	4619      	movne	r1, r3
 80092e2:	d10a      	bne.n	80092fa <__aeabi_dmul+0x24a>
 80092e4:	ea81 0103 	eor.w	r1, r1, r3
 80092e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80092ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80092f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80092f4:	f04f 0000 	mov.w	r0, #0
 80092f8:	bd70      	pop	{r4, r5, r6, pc}
 80092fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80092fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8009302:	bd70      	pop	{r4, r5, r6, pc}

08009304 <__aeabi_ddiv>:
 8009304:	b570      	push	{r4, r5, r6, lr}
 8009306:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800930a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800930e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8009312:	bf1d      	ittte	ne
 8009314:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8009318:	ea94 0f0c 	teqne	r4, ip
 800931c:	ea95 0f0c 	teqne	r5, ip
 8009320:	f000 f8a7 	bleq	8009472 <__aeabi_ddiv+0x16e>
 8009324:	eba4 0405 	sub.w	r4, r4, r5
 8009328:	ea81 0e03 	eor.w	lr, r1, r3
 800932c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8009330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8009334:	f000 8088 	beq.w	8009448 <__aeabi_ddiv+0x144>
 8009338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800933c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8009340:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8009344:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8009348:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800934c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8009350:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8009354:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8009358:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800935c:	429d      	cmp	r5, r3
 800935e:	bf08      	it	eq
 8009360:	4296      	cmpeq	r6, r2
 8009362:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8009366:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800936a:	d202      	bcs.n	8009372 <__aeabi_ddiv+0x6e>
 800936c:	085b      	lsrs	r3, r3, #1
 800936e:	ea4f 0232 	mov.w	r2, r2, rrx
 8009372:	1ab6      	subs	r6, r6, r2
 8009374:	eb65 0503 	sbc.w	r5, r5, r3
 8009378:	085b      	lsrs	r3, r3, #1
 800937a:	ea4f 0232 	mov.w	r2, r2, rrx
 800937e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8009382:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8009386:	ebb6 0e02 	subs.w	lr, r6, r2
 800938a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800938e:	bf22      	ittt	cs
 8009390:	1ab6      	subcs	r6, r6, r2
 8009392:	4675      	movcs	r5, lr
 8009394:	ea40 000c 	orrcs.w	r0, r0, ip
 8009398:	085b      	lsrs	r3, r3, #1
 800939a:	ea4f 0232 	mov.w	r2, r2, rrx
 800939e:	ebb6 0e02 	subs.w	lr, r6, r2
 80093a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80093a6:	bf22      	ittt	cs
 80093a8:	1ab6      	subcs	r6, r6, r2
 80093aa:	4675      	movcs	r5, lr
 80093ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80093b0:	085b      	lsrs	r3, r3, #1
 80093b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80093b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80093ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80093be:	bf22      	ittt	cs
 80093c0:	1ab6      	subcs	r6, r6, r2
 80093c2:	4675      	movcs	r5, lr
 80093c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80093c8:	085b      	lsrs	r3, r3, #1
 80093ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80093ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80093d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80093d6:	bf22      	ittt	cs
 80093d8:	1ab6      	subcs	r6, r6, r2
 80093da:	4675      	movcs	r5, lr
 80093dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80093e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80093e4:	d018      	beq.n	8009418 <__aeabi_ddiv+0x114>
 80093e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80093ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80093ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80093f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80093f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80093fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80093fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8009402:	d1c0      	bne.n	8009386 <__aeabi_ddiv+0x82>
 8009404:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8009408:	d10b      	bne.n	8009422 <__aeabi_ddiv+0x11e>
 800940a:	ea41 0100 	orr.w	r1, r1, r0
 800940e:	f04f 0000 	mov.w	r0, #0
 8009412:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8009416:	e7b6      	b.n	8009386 <__aeabi_ddiv+0x82>
 8009418:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800941c:	bf04      	itt	eq
 800941e:	4301      	orreq	r1, r0
 8009420:	2000      	moveq	r0, #0
 8009422:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8009426:	bf88      	it	hi
 8009428:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800942c:	f63f aeaf 	bhi.w	800918e <__aeabi_dmul+0xde>
 8009430:	ebb5 0c03 	subs.w	ip, r5, r3
 8009434:	bf04      	itt	eq
 8009436:	ebb6 0c02 	subseq.w	ip, r6, r2
 800943a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800943e:	f150 0000 	adcs.w	r0, r0, #0
 8009442:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8009446:	bd70      	pop	{r4, r5, r6, pc}
 8009448:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800944c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8009450:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8009454:	bfc2      	ittt	gt
 8009456:	ebd4 050c 	rsbsgt	r5, r4, ip
 800945a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800945e:	bd70      	popgt	{r4, r5, r6, pc}
 8009460:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009464:	f04f 0e00 	mov.w	lr, #0
 8009468:	3c01      	subs	r4, #1
 800946a:	e690      	b.n	800918e <__aeabi_dmul+0xde>
 800946c:	ea45 0e06 	orr.w	lr, r5, r6
 8009470:	e68d      	b.n	800918e <__aeabi_dmul+0xde>
 8009472:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8009476:	ea94 0f0c 	teq	r4, ip
 800947a:	bf08      	it	eq
 800947c:	ea95 0f0c 	teqeq	r5, ip
 8009480:	f43f af3b 	beq.w	80092fa <__aeabi_dmul+0x24a>
 8009484:	ea94 0f0c 	teq	r4, ip
 8009488:	d10a      	bne.n	80094a0 <__aeabi_ddiv+0x19c>
 800948a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800948e:	f47f af34 	bne.w	80092fa <__aeabi_dmul+0x24a>
 8009492:	ea95 0f0c 	teq	r5, ip
 8009496:	f47f af25 	bne.w	80092e4 <__aeabi_dmul+0x234>
 800949a:	4610      	mov	r0, r2
 800949c:	4619      	mov	r1, r3
 800949e:	e72c      	b.n	80092fa <__aeabi_dmul+0x24a>
 80094a0:	ea95 0f0c 	teq	r5, ip
 80094a4:	d106      	bne.n	80094b4 <__aeabi_ddiv+0x1b0>
 80094a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80094aa:	f43f aefd 	beq.w	80092a8 <__aeabi_dmul+0x1f8>
 80094ae:	4610      	mov	r0, r2
 80094b0:	4619      	mov	r1, r3
 80094b2:	e722      	b.n	80092fa <__aeabi_dmul+0x24a>
 80094b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80094b8:	bf18      	it	ne
 80094ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80094be:	f47f aec5 	bne.w	800924c <__aeabi_dmul+0x19c>
 80094c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80094c6:	f47f af0d 	bne.w	80092e4 <__aeabi_dmul+0x234>
 80094ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80094ce:	f47f aeeb 	bne.w	80092a8 <__aeabi_dmul+0x1f8>
 80094d2:	e712      	b.n	80092fa <__aeabi_dmul+0x24a>

080094d4 <__gedf2>:
 80094d4:	f04f 3cff 	mov.w	ip, #4294967295
 80094d8:	e006      	b.n	80094e8 <__cmpdf2+0x4>
 80094da:	bf00      	nop

080094dc <__ledf2>:
 80094dc:	f04f 0c01 	mov.w	ip, #1
 80094e0:	e002      	b.n	80094e8 <__cmpdf2+0x4>
 80094e2:	bf00      	nop

080094e4 <__cmpdf2>:
 80094e4:	f04f 0c01 	mov.w	ip, #1
 80094e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80094ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80094f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80094f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80094f8:	bf18      	it	ne
 80094fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80094fe:	d01b      	beq.n	8009538 <__cmpdf2+0x54>
 8009500:	b001      	add	sp, #4
 8009502:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8009506:	bf0c      	ite	eq
 8009508:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800950c:	ea91 0f03 	teqne	r1, r3
 8009510:	bf02      	ittt	eq
 8009512:	ea90 0f02 	teqeq	r0, r2
 8009516:	2000      	moveq	r0, #0
 8009518:	4770      	bxeq	lr
 800951a:	f110 0f00 	cmn.w	r0, #0
 800951e:	ea91 0f03 	teq	r1, r3
 8009522:	bf58      	it	pl
 8009524:	4299      	cmppl	r1, r3
 8009526:	bf08      	it	eq
 8009528:	4290      	cmpeq	r0, r2
 800952a:	bf2c      	ite	cs
 800952c:	17d8      	asrcs	r0, r3, #31
 800952e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8009532:	f040 0001 	orr.w	r0, r0, #1
 8009536:	4770      	bx	lr
 8009538:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800953c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8009540:	d102      	bne.n	8009548 <__cmpdf2+0x64>
 8009542:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8009546:	d107      	bne.n	8009558 <__cmpdf2+0x74>
 8009548:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800954c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8009550:	d1d6      	bne.n	8009500 <__cmpdf2+0x1c>
 8009552:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8009556:	d0d3      	beq.n	8009500 <__cmpdf2+0x1c>
 8009558:	f85d 0b04 	ldr.w	r0, [sp], #4
 800955c:	4770      	bx	lr
 800955e:	bf00      	nop

08009560 <__aeabi_cdrcmple>:
 8009560:	4684      	mov	ip, r0
 8009562:	4610      	mov	r0, r2
 8009564:	4662      	mov	r2, ip
 8009566:	468c      	mov	ip, r1
 8009568:	4619      	mov	r1, r3
 800956a:	4663      	mov	r3, ip
 800956c:	e000      	b.n	8009570 <__aeabi_cdcmpeq>
 800956e:	bf00      	nop

08009570 <__aeabi_cdcmpeq>:
 8009570:	b501      	push	{r0, lr}
 8009572:	f7ff ffb7 	bl	80094e4 <__cmpdf2>
 8009576:	2800      	cmp	r0, #0
 8009578:	bf48      	it	mi
 800957a:	f110 0f00 	cmnmi.w	r0, #0
 800957e:	bd01      	pop	{r0, pc}

08009580 <__aeabi_dcmpeq>:
 8009580:	f84d ed08 	str.w	lr, [sp, #-8]!
 8009584:	f7ff fff4 	bl	8009570 <__aeabi_cdcmpeq>
 8009588:	bf0c      	ite	eq
 800958a:	2001      	moveq	r0, #1
 800958c:	2000      	movne	r0, #0
 800958e:	f85d fb08 	ldr.w	pc, [sp], #8
 8009592:	bf00      	nop

08009594 <__aeabi_dcmplt>:
 8009594:	f84d ed08 	str.w	lr, [sp, #-8]!
 8009598:	f7ff ffea 	bl	8009570 <__aeabi_cdcmpeq>
 800959c:	bf34      	ite	cc
 800959e:	2001      	movcc	r0, #1
 80095a0:	2000      	movcs	r0, #0
 80095a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80095a6:	bf00      	nop

080095a8 <__aeabi_dcmple>:
 80095a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80095ac:	f7ff ffe0 	bl	8009570 <__aeabi_cdcmpeq>
 80095b0:	bf94      	ite	ls
 80095b2:	2001      	movls	r0, #1
 80095b4:	2000      	movhi	r0, #0
 80095b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80095ba:	bf00      	nop

080095bc <__aeabi_dcmpge>:
 80095bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80095c0:	f7ff ffce 	bl	8009560 <__aeabi_cdrcmple>
 80095c4:	bf94      	ite	ls
 80095c6:	2001      	movls	r0, #1
 80095c8:	2000      	movhi	r0, #0
 80095ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80095ce:	bf00      	nop

080095d0 <__aeabi_dcmpgt>:
 80095d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80095d4:	f7ff ffc4 	bl	8009560 <__aeabi_cdrcmple>
 80095d8:	bf34      	ite	cc
 80095da:	2001      	movcc	r0, #1
 80095dc:	2000      	movcs	r0, #0
 80095de:	f85d fb08 	ldr.w	pc, [sp], #8
 80095e2:	bf00      	nop

080095e4 <__aeabi_d2f>:
 80095e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80095e8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80095ec:	bf24      	itt	cs
 80095ee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80095f2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80095f6:	d90d      	bls.n	8009614 <__aeabi_d2f+0x30>
 80095f8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80095fc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8009600:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8009604:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8009608:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800960c:	bf08      	it	eq
 800960e:	f020 0001 	biceq.w	r0, r0, #1
 8009612:	4770      	bx	lr
 8009614:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8009618:	d121      	bne.n	800965e <__aeabi_d2f+0x7a>
 800961a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800961e:	bfbc      	itt	lt
 8009620:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8009624:	4770      	bxlt	lr
 8009626:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800962a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800962e:	f1c2 0218 	rsb	r2, r2, #24
 8009632:	f1c2 0c20 	rsb	ip, r2, #32
 8009636:	fa10 f30c 	lsls.w	r3, r0, ip
 800963a:	fa20 f002 	lsr.w	r0, r0, r2
 800963e:	bf18      	it	ne
 8009640:	f040 0001 	orrne.w	r0, r0, #1
 8009644:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8009648:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800964c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8009650:	ea40 000c 	orr.w	r0, r0, ip
 8009654:	fa23 f302 	lsr.w	r3, r3, r2
 8009658:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800965c:	e7cc      	b.n	80095f8 <__aeabi_d2f+0x14>
 800965e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8009662:	d107      	bne.n	8009674 <__aeabi_d2f+0x90>
 8009664:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8009668:	bf1e      	ittt	ne
 800966a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800966e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8009672:	4770      	bxne	lr
 8009674:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8009678:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800967c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8009680:	4770      	bx	lr
 8009682:	bf00      	nop

08009684 <__aeabi_ldivmod>:
 8009684:	b973      	cbnz	r3, 80096a4 <__aeabi_ldivmod+0x20>
 8009686:	b96a      	cbnz	r2, 80096a4 <__aeabi_ldivmod+0x20>
 8009688:	2900      	cmp	r1, #0
 800968a:	bf08      	it	eq
 800968c:	2800      	cmpeq	r0, #0
 800968e:	bfbc      	itt	lt
 8009690:	2000      	movlt	r0, #0
 8009692:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8009696:	bfc4      	itt	gt
 8009698:	f06f 4100 	mvngt.w	r1, #2147483648	; 0x80000000
 800969c:	f04f 30ff 	movgt.w	r0, #4294967295
 80096a0:	f000 b83c 	b.w	800971c <__aeabi_idiv0>
 80096a4:	b082      	sub	sp, #8
 80096a6:	46ec      	mov	ip, sp
 80096a8:	e92d 5000 	stmdb	sp!, {ip, lr}
 80096ac:	f000 f806 	bl	80096bc <__gnu_ldivmod_helper>
 80096b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80096b4:	b002      	add	sp, #8
 80096b6:	bc0c      	pop	{r2, r3}
 80096b8:	4770      	bx	lr
 80096ba:	bf00      	nop

080096bc <__gnu_ldivmod_helper>:
 80096bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096c0:	9c06      	ldr	r4, [sp, #24]
 80096c2:	4615      	mov	r5, r2
 80096c4:	4606      	mov	r6, r0
 80096c6:	460f      	mov	r7, r1
 80096c8:	4698      	mov	r8, r3
 80096ca:	f000 f829 	bl	8009720 <__divdi3>
 80096ce:	fb05 f301 	mul.w	r3, r5, r1
 80096d2:	fb00 3808 	mla	r8, r0, r8, r3
 80096d6:	fba5 2300 	umull	r2, r3, r5, r0
 80096da:	1ab2      	subs	r2, r6, r2
 80096dc:	4443      	add	r3, r8
 80096de:	eb67 0303 	sbc.w	r3, r7, r3
 80096e2:	e9c4 2300 	strd	r2, r3, [r4]
 80096e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096ea:	bf00      	nop

080096ec <__gnu_uldivmod_helper>:
 80096ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096f0:	9c06      	ldr	r4, [sp, #24]
 80096f2:	4690      	mov	r8, r2
 80096f4:	4606      	mov	r6, r0
 80096f6:	460f      	mov	r7, r1
 80096f8:	461d      	mov	r5, r3
 80096fa:	f000 f95f 	bl	80099bc <__udivdi3>
 80096fe:	fb00 f505 	mul.w	r5, r0, r5
 8009702:	fba0 2308 	umull	r2, r3, r0, r8
 8009706:	fb08 5501 	mla	r5, r8, r1, r5
 800970a:	1ab2      	subs	r2, r6, r2
 800970c:	442b      	add	r3, r5
 800970e:	eb67 0303 	sbc.w	r3, r7, r3
 8009712:	e9c4 2300 	strd	r2, r3, [r4]
 8009716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800971a:	bf00      	nop

0800971c <__aeabi_idiv0>:
 800971c:	4770      	bx	lr
 800971e:	bf00      	nop

08009720 <__divdi3>:
 8009720:	2900      	cmp	r1, #0
 8009722:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009726:	f2c0 80a6 	blt.w	8009876 <__divdi3+0x156>
 800972a:	2600      	movs	r6, #0
 800972c:	2b00      	cmp	r3, #0
 800972e:	f2c0 809c 	blt.w	800986a <__divdi3+0x14a>
 8009732:	4688      	mov	r8, r1
 8009734:	4694      	mov	ip, r2
 8009736:	469e      	mov	lr, r3
 8009738:	4615      	mov	r5, r2
 800973a:	4604      	mov	r4, r0
 800973c:	460f      	mov	r7, r1
 800973e:	2b00      	cmp	r3, #0
 8009740:	d13d      	bne.n	80097be <__divdi3+0x9e>
 8009742:	428a      	cmp	r2, r1
 8009744:	d959      	bls.n	80097fa <__divdi3+0xda>
 8009746:	fab2 f382 	clz	r3, r2
 800974a:	b13b      	cbz	r3, 800975c <__divdi3+0x3c>
 800974c:	f1c3 0220 	rsb	r2, r3, #32
 8009750:	409f      	lsls	r7, r3
 8009752:	fa20 f202 	lsr.w	r2, r0, r2
 8009756:	409d      	lsls	r5, r3
 8009758:	4317      	orrs	r7, r2
 800975a:	409c      	lsls	r4, r3
 800975c:	0c29      	lsrs	r1, r5, #16
 800975e:	0c22      	lsrs	r2, r4, #16
 8009760:	fbb7 fef1 	udiv	lr, r7, r1
 8009764:	b2a8      	uxth	r0, r5
 8009766:	fb01 771e 	mls	r7, r1, lr, r7
 800976a:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 800976e:	fb00 f30e 	mul.w	r3, r0, lr
 8009772:	42bb      	cmp	r3, r7
 8009774:	d90a      	bls.n	800978c <__divdi3+0x6c>
 8009776:	197f      	adds	r7, r7, r5
 8009778:	f10e 32ff 	add.w	r2, lr, #4294967295
 800977c:	f080 8105 	bcs.w	800998a <__divdi3+0x26a>
 8009780:	42bb      	cmp	r3, r7
 8009782:	f240 8102 	bls.w	800998a <__divdi3+0x26a>
 8009786:	f1ae 0e02 	sub.w	lr, lr, #2
 800978a:	442f      	add	r7, r5
 800978c:	1aff      	subs	r7, r7, r3
 800978e:	b2a4      	uxth	r4, r4
 8009790:	fbb7 f3f1 	udiv	r3, r7, r1
 8009794:	fb01 7713 	mls	r7, r1, r3, r7
 8009798:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800979c:	fb00 f003 	mul.w	r0, r0, r3
 80097a0:	42b8      	cmp	r0, r7
 80097a2:	d908      	bls.n	80097b6 <__divdi3+0x96>
 80097a4:	197f      	adds	r7, r7, r5
 80097a6:	f103 32ff 	add.w	r2, r3, #4294967295
 80097aa:	f080 80f0 	bcs.w	800998e <__divdi3+0x26e>
 80097ae:	42b8      	cmp	r0, r7
 80097b0:	f240 80ed 	bls.w	800998e <__divdi3+0x26e>
 80097b4:	3b02      	subs	r3, #2
 80097b6:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80097ba:	2200      	movs	r2, #0
 80097bc:	e003      	b.n	80097c6 <__divdi3+0xa6>
 80097be:	428b      	cmp	r3, r1
 80097c0:	d90f      	bls.n	80097e2 <__divdi3+0xc2>
 80097c2:	2200      	movs	r2, #0
 80097c4:	4613      	mov	r3, r2
 80097c6:	1c34      	adds	r4, r6, #0
 80097c8:	bf18      	it	ne
 80097ca:	2401      	movne	r4, #1
 80097cc:	4260      	negs	r0, r4
 80097ce:	f04f 0500 	mov.w	r5, #0
 80097d2:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
 80097d6:	4058      	eors	r0, r3
 80097d8:	4051      	eors	r1, r2
 80097da:	1900      	adds	r0, r0, r4
 80097dc:	4169      	adcs	r1, r5
 80097de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80097e2:	fab3 f283 	clz	r2, r3
 80097e6:	2a00      	cmp	r2, #0
 80097e8:	f040 8086 	bne.w	80098f8 <__divdi3+0x1d8>
 80097ec:	428b      	cmp	r3, r1
 80097ee:	d302      	bcc.n	80097f6 <__divdi3+0xd6>
 80097f0:	4584      	cmp	ip, r0
 80097f2:	f200 80db 	bhi.w	80099ac <__divdi3+0x28c>
 80097f6:	2301      	movs	r3, #1
 80097f8:	e7e5      	b.n	80097c6 <__divdi3+0xa6>
 80097fa:	b912      	cbnz	r2, 8009802 <__divdi3+0xe2>
 80097fc:	2301      	movs	r3, #1
 80097fe:	fbb3 f5f2 	udiv	r5, r3, r2
 8009802:	fab5 f085 	clz	r0, r5
 8009806:	2800      	cmp	r0, #0
 8009808:	d13b      	bne.n	8009882 <__divdi3+0x162>
 800980a:	1b78      	subs	r0, r7, r5
 800980c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8009810:	fa1f fc85 	uxth.w	ip, r5
 8009814:	2201      	movs	r2, #1
 8009816:	fbb0 f8fe 	udiv	r8, r0, lr
 800981a:	0c21      	lsrs	r1, r4, #16
 800981c:	fb0e 0718 	mls	r7, lr, r8, r0
 8009820:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
 8009824:	fb0c f308 	mul.w	r3, ip, r8
 8009828:	42bb      	cmp	r3, r7
 800982a:	d907      	bls.n	800983c <__divdi3+0x11c>
 800982c:	197f      	adds	r7, r7, r5
 800982e:	f108 31ff 	add.w	r1, r8, #4294967295
 8009832:	d202      	bcs.n	800983a <__divdi3+0x11a>
 8009834:	42bb      	cmp	r3, r7
 8009836:	f200 80bd 	bhi.w	80099b4 <__divdi3+0x294>
 800983a:	4688      	mov	r8, r1
 800983c:	1aff      	subs	r7, r7, r3
 800983e:	b2a4      	uxth	r4, r4
 8009840:	fbb7 f3fe 	udiv	r3, r7, lr
 8009844:	fb0e 7713 	mls	r7, lr, r3, r7
 8009848:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800984c:	fb0c fc03 	mul.w	ip, ip, r3
 8009850:	45bc      	cmp	ip, r7
 8009852:	d907      	bls.n	8009864 <__divdi3+0x144>
 8009854:	197f      	adds	r7, r7, r5
 8009856:	f103 31ff 	add.w	r1, r3, #4294967295
 800985a:	d202      	bcs.n	8009862 <__divdi3+0x142>
 800985c:	45bc      	cmp	ip, r7
 800985e:	f200 80a7 	bhi.w	80099b0 <__divdi3+0x290>
 8009862:	460b      	mov	r3, r1
 8009864:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8009868:	e7ad      	b.n	80097c6 <__divdi3+0xa6>
 800986a:	4252      	negs	r2, r2
 800986c:	ea6f 0606 	mvn.w	r6, r6
 8009870:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8009874:	e75d      	b.n	8009732 <__divdi3+0x12>
 8009876:	4240      	negs	r0, r0
 8009878:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800987c:	f04f 36ff 	mov.w	r6, #4294967295
 8009880:	e754      	b.n	800972c <__divdi3+0xc>
 8009882:	f1c0 0220 	rsb	r2, r0, #32
 8009886:	fa24 f102 	lsr.w	r1, r4, r2
 800988a:	fa07 f300 	lsl.w	r3, r7, r0
 800988e:	4085      	lsls	r5, r0
 8009890:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8009894:	40d7      	lsrs	r7, r2
 8009896:	4319      	orrs	r1, r3
 8009898:	fbb7 f2fe 	udiv	r2, r7, lr
 800989c:	0c0b      	lsrs	r3, r1, #16
 800989e:	fb0e 7712 	mls	r7, lr, r2, r7
 80098a2:	fa1f fc85 	uxth.w	ip, r5
 80098a6:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80098aa:	fb0c f702 	mul.w	r7, ip, r2
 80098ae:	429f      	cmp	r7, r3
 80098b0:	fa04 f400 	lsl.w	r4, r4, r0
 80098b4:	d907      	bls.n	80098c6 <__divdi3+0x1a6>
 80098b6:	195b      	adds	r3, r3, r5
 80098b8:	f102 30ff 	add.w	r0, r2, #4294967295
 80098bc:	d274      	bcs.n	80099a8 <__divdi3+0x288>
 80098be:	429f      	cmp	r7, r3
 80098c0:	d972      	bls.n	80099a8 <__divdi3+0x288>
 80098c2:	3a02      	subs	r2, #2
 80098c4:	442b      	add	r3, r5
 80098c6:	1bdf      	subs	r7, r3, r7
 80098c8:	b289      	uxth	r1, r1
 80098ca:	fbb7 f8fe 	udiv	r8, r7, lr
 80098ce:	fb0e 7318 	mls	r3, lr, r8, r7
 80098d2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80098d6:	fb0c f708 	mul.w	r7, ip, r8
 80098da:	429f      	cmp	r7, r3
 80098dc:	d908      	bls.n	80098f0 <__divdi3+0x1d0>
 80098de:	195b      	adds	r3, r3, r5
 80098e0:	f108 31ff 	add.w	r1, r8, #4294967295
 80098e4:	d25c      	bcs.n	80099a0 <__divdi3+0x280>
 80098e6:	429f      	cmp	r7, r3
 80098e8:	d95a      	bls.n	80099a0 <__divdi3+0x280>
 80098ea:	f1a8 0802 	sub.w	r8, r8, #2
 80098ee:	442b      	add	r3, r5
 80098f0:	1bd8      	subs	r0, r3, r7
 80098f2:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
 80098f6:	e78e      	b.n	8009816 <__divdi3+0xf6>
 80098f8:	f1c2 0320 	rsb	r3, r2, #32
 80098fc:	fa2c f103 	lsr.w	r1, ip, r3
 8009900:	fa0e fe02 	lsl.w	lr, lr, r2
 8009904:	fa20 f703 	lsr.w	r7, r0, r3
 8009908:	ea41 0e0e 	orr.w	lr, r1, lr
 800990c:	fa08 f002 	lsl.w	r0, r8, r2
 8009910:	fa28 f103 	lsr.w	r1, r8, r3
 8009914:	ea4f 451e 	mov.w	r5, lr, lsr #16
 8009918:	4338      	orrs	r0, r7
 800991a:	fbb1 f8f5 	udiv	r8, r1, r5
 800991e:	0c03      	lsrs	r3, r0, #16
 8009920:	fb05 1118 	mls	r1, r5, r8, r1
 8009924:	fa1f f78e 	uxth.w	r7, lr
 8009928:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800992c:	fb07 f308 	mul.w	r3, r7, r8
 8009930:	428b      	cmp	r3, r1
 8009932:	fa0c fc02 	lsl.w	ip, ip, r2
 8009936:	d909      	bls.n	800994c <__divdi3+0x22c>
 8009938:	eb11 010e 	adds.w	r1, r1, lr
 800993c:	f108 39ff 	add.w	r9, r8, #4294967295
 8009940:	d230      	bcs.n	80099a4 <__divdi3+0x284>
 8009942:	428b      	cmp	r3, r1
 8009944:	d92e      	bls.n	80099a4 <__divdi3+0x284>
 8009946:	f1a8 0802 	sub.w	r8, r8, #2
 800994a:	4471      	add	r1, lr
 800994c:	1ac9      	subs	r1, r1, r3
 800994e:	b280      	uxth	r0, r0
 8009950:	fbb1 f3f5 	udiv	r3, r1, r5
 8009954:	fb05 1113 	mls	r1, r5, r3, r1
 8009958:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800995c:	fb07 f703 	mul.w	r7, r7, r3
 8009960:	428f      	cmp	r7, r1
 8009962:	d908      	bls.n	8009976 <__divdi3+0x256>
 8009964:	eb11 010e 	adds.w	r1, r1, lr
 8009968:	f103 30ff 	add.w	r0, r3, #4294967295
 800996c:	d216      	bcs.n	800999c <__divdi3+0x27c>
 800996e:	428f      	cmp	r7, r1
 8009970:	d914      	bls.n	800999c <__divdi3+0x27c>
 8009972:	3b02      	subs	r3, #2
 8009974:	4471      	add	r1, lr
 8009976:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800997a:	1bc9      	subs	r1, r1, r7
 800997c:	fba3 890c 	umull	r8, r9, r3, ip
 8009980:	4549      	cmp	r1, r9
 8009982:	d309      	bcc.n	8009998 <__divdi3+0x278>
 8009984:	d005      	beq.n	8009992 <__divdi3+0x272>
 8009986:	2200      	movs	r2, #0
 8009988:	e71d      	b.n	80097c6 <__divdi3+0xa6>
 800998a:	4696      	mov	lr, r2
 800998c:	e6fe      	b.n	800978c <__divdi3+0x6c>
 800998e:	4613      	mov	r3, r2
 8009990:	e711      	b.n	80097b6 <__divdi3+0x96>
 8009992:	4094      	lsls	r4, r2
 8009994:	4544      	cmp	r4, r8
 8009996:	d2f6      	bcs.n	8009986 <__divdi3+0x266>
 8009998:	3b01      	subs	r3, #1
 800999a:	e7f4      	b.n	8009986 <__divdi3+0x266>
 800999c:	4603      	mov	r3, r0
 800999e:	e7ea      	b.n	8009976 <__divdi3+0x256>
 80099a0:	4688      	mov	r8, r1
 80099a2:	e7a5      	b.n	80098f0 <__divdi3+0x1d0>
 80099a4:	46c8      	mov	r8, r9
 80099a6:	e7d1      	b.n	800994c <__divdi3+0x22c>
 80099a8:	4602      	mov	r2, r0
 80099aa:	e78c      	b.n	80098c6 <__divdi3+0x1a6>
 80099ac:	4613      	mov	r3, r2
 80099ae:	e70a      	b.n	80097c6 <__divdi3+0xa6>
 80099b0:	3b02      	subs	r3, #2
 80099b2:	e757      	b.n	8009864 <__divdi3+0x144>
 80099b4:	f1a8 0802 	sub.w	r8, r8, #2
 80099b8:	442f      	add	r7, r5
 80099ba:	e73f      	b.n	800983c <__divdi3+0x11c>

080099bc <__udivdi3>:
 80099bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d144      	bne.n	8009a4e <__udivdi3+0x92>
 80099c4:	428a      	cmp	r2, r1
 80099c6:	4615      	mov	r5, r2
 80099c8:	4604      	mov	r4, r0
 80099ca:	d94f      	bls.n	8009a6c <__udivdi3+0xb0>
 80099cc:	fab2 f782 	clz	r7, r2
 80099d0:	460e      	mov	r6, r1
 80099d2:	b14f      	cbz	r7, 80099e8 <__udivdi3+0x2c>
 80099d4:	f1c7 0320 	rsb	r3, r7, #32
 80099d8:	40b9      	lsls	r1, r7
 80099da:	fa20 f603 	lsr.w	r6, r0, r3
 80099de:	fa02 f507 	lsl.w	r5, r2, r7
 80099e2:	430e      	orrs	r6, r1
 80099e4:	fa00 f407 	lsl.w	r4, r0, r7
 80099e8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80099ec:	0c23      	lsrs	r3, r4, #16
 80099ee:	fbb6 f0fe 	udiv	r0, r6, lr
 80099f2:	b2af      	uxth	r7, r5
 80099f4:	fb0e 6110 	mls	r1, lr, r0, r6
 80099f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80099fc:	fb07 f100 	mul.w	r1, r7, r0
 8009a00:	4299      	cmp	r1, r3
 8009a02:	d909      	bls.n	8009a18 <__udivdi3+0x5c>
 8009a04:	195b      	adds	r3, r3, r5
 8009a06:	f100 32ff 	add.w	r2, r0, #4294967295
 8009a0a:	f080 80ec 	bcs.w	8009be6 <__udivdi3+0x22a>
 8009a0e:	4299      	cmp	r1, r3
 8009a10:	f240 80e9 	bls.w	8009be6 <__udivdi3+0x22a>
 8009a14:	3802      	subs	r0, #2
 8009a16:	442b      	add	r3, r5
 8009a18:	1a5a      	subs	r2, r3, r1
 8009a1a:	b2a4      	uxth	r4, r4
 8009a1c:	fbb2 f3fe 	udiv	r3, r2, lr
 8009a20:	fb0e 2213 	mls	r2, lr, r3, r2
 8009a24:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 8009a28:	fb07 f703 	mul.w	r7, r7, r3
 8009a2c:	4297      	cmp	r7, r2
 8009a2e:	d908      	bls.n	8009a42 <__udivdi3+0x86>
 8009a30:	1952      	adds	r2, r2, r5
 8009a32:	f103 31ff 	add.w	r1, r3, #4294967295
 8009a36:	f080 80d8 	bcs.w	8009bea <__udivdi3+0x22e>
 8009a3a:	4297      	cmp	r7, r2
 8009a3c:	f240 80d5 	bls.w	8009bea <__udivdi3+0x22e>
 8009a40:	3b02      	subs	r3, #2
 8009a42:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8009a46:	2600      	movs	r6, #0
 8009a48:	4631      	mov	r1, r6
 8009a4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a4e:	428b      	cmp	r3, r1
 8009a50:	d847      	bhi.n	8009ae2 <__udivdi3+0x126>
 8009a52:	fab3 f683 	clz	r6, r3
 8009a56:	2e00      	cmp	r6, #0
 8009a58:	d148      	bne.n	8009aec <__udivdi3+0x130>
 8009a5a:	428b      	cmp	r3, r1
 8009a5c:	d302      	bcc.n	8009a64 <__udivdi3+0xa8>
 8009a5e:	4282      	cmp	r2, r0
 8009a60:	f200 80cd 	bhi.w	8009bfe <__udivdi3+0x242>
 8009a64:	2001      	movs	r0, #1
 8009a66:	4631      	mov	r1, r6
 8009a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a6c:	b912      	cbnz	r2, 8009a74 <__udivdi3+0xb8>
 8009a6e:	2501      	movs	r5, #1
 8009a70:	fbb5 f5f2 	udiv	r5, r5, r2
 8009a74:	fab5 f885 	clz	r8, r5
 8009a78:	f1b8 0f00 	cmp.w	r8, #0
 8009a7c:	d177      	bne.n	8009b6e <__udivdi3+0x1b2>
 8009a7e:	1b4a      	subs	r2, r1, r5
 8009a80:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8009a84:	b2af      	uxth	r7, r5
 8009a86:	2601      	movs	r6, #1
 8009a88:	fbb2 f0fe 	udiv	r0, r2, lr
 8009a8c:	0c23      	lsrs	r3, r4, #16
 8009a8e:	fb0e 2110 	mls	r1, lr, r0, r2
 8009a92:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8009a96:	fb07 f300 	mul.w	r3, r7, r0
 8009a9a:	428b      	cmp	r3, r1
 8009a9c:	d907      	bls.n	8009aae <__udivdi3+0xf2>
 8009a9e:	1949      	adds	r1, r1, r5
 8009aa0:	f100 32ff 	add.w	r2, r0, #4294967295
 8009aa4:	d202      	bcs.n	8009aac <__udivdi3+0xf0>
 8009aa6:	428b      	cmp	r3, r1
 8009aa8:	f200 80ba 	bhi.w	8009c20 <__udivdi3+0x264>
 8009aac:	4610      	mov	r0, r2
 8009aae:	1ac9      	subs	r1, r1, r3
 8009ab0:	b2a4      	uxth	r4, r4
 8009ab2:	fbb1 f3fe 	udiv	r3, r1, lr
 8009ab6:	fb0e 1113 	mls	r1, lr, r3, r1
 8009aba:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8009abe:	fb07 f703 	mul.w	r7, r7, r3
 8009ac2:	42a7      	cmp	r7, r4
 8009ac4:	d908      	bls.n	8009ad8 <__udivdi3+0x11c>
 8009ac6:	1964      	adds	r4, r4, r5
 8009ac8:	f103 32ff 	add.w	r2, r3, #4294967295
 8009acc:	f080 808f 	bcs.w	8009bee <__udivdi3+0x232>
 8009ad0:	42a7      	cmp	r7, r4
 8009ad2:	f240 808c 	bls.w	8009bee <__udivdi3+0x232>
 8009ad6:	3b02      	subs	r3, #2
 8009ad8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8009adc:	4631      	mov	r1, r6
 8009ade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ae2:	2600      	movs	r6, #0
 8009ae4:	4630      	mov	r0, r6
 8009ae6:	4631      	mov	r1, r6
 8009ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009aec:	f1c6 0420 	rsb	r4, r6, #32
 8009af0:	fa22 f504 	lsr.w	r5, r2, r4
 8009af4:	40b3      	lsls	r3, r6
 8009af6:	432b      	orrs	r3, r5
 8009af8:	fa20 fc04 	lsr.w	ip, r0, r4
 8009afc:	fa01 f706 	lsl.w	r7, r1, r6
 8009b00:	fa21 f504 	lsr.w	r5, r1, r4
 8009b04:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009b08:	ea4c 0707 	orr.w	r7, ip, r7
 8009b0c:	fbb5 f8fe 	udiv	r8, r5, lr
 8009b10:	0c39      	lsrs	r1, r7, #16
 8009b12:	fb0e 5518 	mls	r5, lr, r8, r5
 8009b16:	fa1f fc83 	uxth.w	ip, r3
 8009b1a:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
 8009b1e:	fb0c f108 	mul.w	r1, ip, r8
 8009b22:	42a9      	cmp	r1, r5
 8009b24:	fa02 f206 	lsl.w	r2, r2, r6
 8009b28:	d904      	bls.n	8009b34 <__udivdi3+0x178>
 8009b2a:	18ed      	adds	r5, r5, r3
 8009b2c:	f108 34ff 	add.w	r4, r8, #4294967295
 8009b30:	d367      	bcc.n	8009c02 <__udivdi3+0x246>
 8009b32:	46a0      	mov	r8, r4
 8009b34:	1a6d      	subs	r5, r5, r1
 8009b36:	b2bf      	uxth	r7, r7
 8009b38:	fbb5 f4fe 	udiv	r4, r5, lr
 8009b3c:	fb0e 5514 	mls	r5, lr, r4, r5
 8009b40:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
 8009b44:	fb0c fc04 	mul.w	ip, ip, r4
 8009b48:	458c      	cmp	ip, r1
 8009b4a:	d904      	bls.n	8009b56 <__udivdi3+0x19a>
 8009b4c:	18c9      	adds	r1, r1, r3
 8009b4e:	f104 35ff 	add.w	r5, r4, #4294967295
 8009b52:	d35c      	bcc.n	8009c0e <__udivdi3+0x252>
 8009b54:	462c      	mov	r4, r5
 8009b56:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8009b5a:	ebcc 0101 	rsb	r1, ip, r1
 8009b5e:	fba4 2302 	umull	r2, r3, r4, r2
 8009b62:	4299      	cmp	r1, r3
 8009b64:	d348      	bcc.n	8009bf8 <__udivdi3+0x23c>
 8009b66:	d044      	beq.n	8009bf2 <__udivdi3+0x236>
 8009b68:	4620      	mov	r0, r4
 8009b6a:	2600      	movs	r6, #0
 8009b6c:	e76c      	b.n	8009a48 <__udivdi3+0x8c>
 8009b6e:	f1c8 0420 	rsb	r4, r8, #32
 8009b72:	fa01 f308 	lsl.w	r3, r1, r8
 8009b76:	fa05 f508 	lsl.w	r5, r5, r8
 8009b7a:	fa20 f704 	lsr.w	r7, r0, r4
 8009b7e:	40e1      	lsrs	r1, r4
 8009b80:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8009b84:	431f      	orrs	r7, r3
 8009b86:	fbb1 f6fe 	udiv	r6, r1, lr
 8009b8a:	0c3a      	lsrs	r2, r7, #16
 8009b8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8009b90:	fa1f fc85 	uxth.w	ip, r5
 8009b94:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
 8009b98:	fb0c f206 	mul.w	r2, ip, r6
 8009b9c:	429a      	cmp	r2, r3
 8009b9e:	fa00 f408 	lsl.w	r4, r0, r8
 8009ba2:	d907      	bls.n	8009bb4 <__udivdi3+0x1f8>
 8009ba4:	195b      	adds	r3, r3, r5
 8009ba6:	f106 31ff 	add.w	r1, r6, #4294967295
 8009baa:	d237      	bcs.n	8009c1c <__udivdi3+0x260>
 8009bac:	429a      	cmp	r2, r3
 8009bae:	d935      	bls.n	8009c1c <__udivdi3+0x260>
 8009bb0:	3e02      	subs	r6, #2
 8009bb2:	442b      	add	r3, r5
 8009bb4:	1a9b      	subs	r3, r3, r2
 8009bb6:	b2bf      	uxth	r7, r7
 8009bb8:	fbb3 f0fe 	udiv	r0, r3, lr
 8009bbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8009bc0:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8009bc4:	fb0c f100 	mul.w	r1, ip, r0
 8009bc8:	4299      	cmp	r1, r3
 8009bca:	d907      	bls.n	8009bdc <__udivdi3+0x220>
 8009bcc:	195b      	adds	r3, r3, r5
 8009bce:	f100 32ff 	add.w	r2, r0, #4294967295
 8009bd2:	d221      	bcs.n	8009c18 <__udivdi3+0x25c>
 8009bd4:	4299      	cmp	r1, r3
 8009bd6:	d91f      	bls.n	8009c18 <__udivdi3+0x25c>
 8009bd8:	3802      	subs	r0, #2
 8009bda:	442b      	add	r3, r5
 8009bdc:	1a5a      	subs	r2, r3, r1
 8009bde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8009be2:	4667      	mov	r7, ip
 8009be4:	e750      	b.n	8009a88 <__udivdi3+0xcc>
 8009be6:	4610      	mov	r0, r2
 8009be8:	e716      	b.n	8009a18 <__udivdi3+0x5c>
 8009bea:	460b      	mov	r3, r1
 8009bec:	e729      	b.n	8009a42 <__udivdi3+0x86>
 8009bee:	4613      	mov	r3, r2
 8009bf0:	e772      	b.n	8009ad8 <__udivdi3+0x11c>
 8009bf2:	40b0      	lsls	r0, r6
 8009bf4:	4290      	cmp	r0, r2
 8009bf6:	d2b7      	bcs.n	8009b68 <__udivdi3+0x1ac>
 8009bf8:	1e60      	subs	r0, r4, #1
 8009bfa:	2600      	movs	r6, #0
 8009bfc:	e724      	b.n	8009a48 <__udivdi3+0x8c>
 8009bfe:	4630      	mov	r0, r6
 8009c00:	e722      	b.n	8009a48 <__udivdi3+0x8c>
 8009c02:	42a9      	cmp	r1, r5
 8009c04:	d995      	bls.n	8009b32 <__udivdi3+0x176>
 8009c06:	f1a8 0802 	sub.w	r8, r8, #2
 8009c0a:	441d      	add	r5, r3
 8009c0c:	e792      	b.n	8009b34 <__udivdi3+0x178>
 8009c0e:	458c      	cmp	ip, r1
 8009c10:	d9a0      	bls.n	8009b54 <__udivdi3+0x198>
 8009c12:	3c02      	subs	r4, #2
 8009c14:	4419      	add	r1, r3
 8009c16:	e79e      	b.n	8009b56 <__udivdi3+0x19a>
 8009c18:	4610      	mov	r0, r2
 8009c1a:	e7df      	b.n	8009bdc <__udivdi3+0x220>
 8009c1c:	460e      	mov	r6, r1
 8009c1e:	e7c9      	b.n	8009bb4 <__udivdi3+0x1f8>
 8009c20:	3802      	subs	r0, #2
 8009c22:	4429      	add	r1, r5
 8009c24:	e743      	b.n	8009aae <__udivdi3+0xf2>
 8009c26:	bf00      	nop

08009c28 <__errno>:
 8009c28:	4b01      	ldr	r3, [pc, #4]	; (8009c30 <__errno+0x8>)
 8009c2a:	6818      	ldr	r0, [r3, #0]
 8009c2c:	4770      	bx	lr
 8009c2e:	bf00      	nop
 8009c30:	1fffd770 	.word	0x1fffd770

08009c34 <__libc_init_array>:
 8009c34:	b570      	push	{r4, r5, r6, lr}
 8009c36:	4b0e      	ldr	r3, [pc, #56]	; (8009c70 <__libc_init_array+0x3c>)
 8009c38:	4c0e      	ldr	r4, [pc, #56]	; (8009c74 <__libc_init_array+0x40>)
 8009c3a:	1ae4      	subs	r4, r4, r3
 8009c3c:	10a4      	asrs	r4, r4, #2
 8009c3e:	2500      	movs	r5, #0
 8009c40:	461e      	mov	r6, r3
 8009c42:	42a5      	cmp	r5, r4
 8009c44:	d004      	beq.n	8009c50 <__libc_init_array+0x1c>
 8009c46:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009c4a:	4798      	blx	r3
 8009c4c:	3501      	adds	r5, #1
 8009c4e:	e7f8      	b.n	8009c42 <__libc_init_array+0xe>
 8009c50:	f7f8 fcc0 	bl	80025d4 <_init>
 8009c54:	4c08      	ldr	r4, [pc, #32]	; (8009c78 <__libc_init_array+0x44>)
 8009c56:	4b09      	ldr	r3, [pc, #36]	; (8009c7c <__libc_init_array+0x48>)
 8009c58:	1ae4      	subs	r4, r4, r3
 8009c5a:	10a4      	asrs	r4, r4, #2
 8009c5c:	2500      	movs	r5, #0
 8009c5e:	461e      	mov	r6, r3
 8009c60:	42a5      	cmp	r5, r4
 8009c62:	d004      	beq.n	8009c6e <__libc_init_array+0x3a>
 8009c64:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009c68:	4798      	blx	r3
 8009c6a:	3501      	adds	r5, #1
 8009c6c:	e7f8      	b.n	8009c60 <__libc_init_array+0x2c>
 8009c6e:	bd70      	pop	{r4, r5, r6, pc}
 8009c70:	1fffd774 	.word	0x1fffd774
 8009c74:	1fffd774 	.word	0x1fffd774
 8009c78:	1fffd774 	.word	0x1fffd774
 8009c7c:	1fffd774 	.word	0x1fffd774

08009c80 <__PWM_SVM_SVMUpdate_veneer>:
 8009c80:	b401      	push	{r0}
 8009c82:	4802      	ldr	r0, [pc, #8]	; (8009c8c <__PWM_SVM_SVMUpdate_veneer+0xc>)
 8009c84:	4684      	mov	ip, r0
 8009c86:	bc01      	pop	{r0}
 8009c88:	4760      	bx	ip
 8009c8a:	bf00      	nop
 8009c8c:	1fffcc01 	.word	0x1fffcc01

08009c90 <g_xmc_vadc_group_array>:
 8009c90:	40004400 40004800 40004c00 40005000     .D.@.H.@.L.@.P.@

08009ca0 <UART_CONFIG_0_channel_config>:
 8009ca0:	00004b00 10020808 00000000              .K..........

08009cac <UART_CONFIG_0_config>:
 8009cac:	08009ca0 00000008 08002665 00000000     ........e&......
 8009cbc:	00000000                                ....

08009cc0 <UART_0_channel_config>:
 8009cc0:	00002580 10010808 00000000              .%..........

08009ccc <UART_0_tx_pin_config>:
 8009ccc:	00000090 00000001 00000002              ............

08009cd8 <UART_0_tx_pin>:
 8009cd8:	48028000 00000001 08009ccc              ...H........

08009ce4 <UART_0_config>:
 8009ce4:	08009cc0 08002e45 08008691 080086b5     ....E...........
	...
 8009d08:	08009cd8 05000000 00000105              ............

08009d14 <UART_0_rx_pin_config>:
 8009d14:	00000000 00000001 00000002              ............

08009d20 <PWM_SVM_0_PhUHighPin>:
 8009d20:	48028000 00000003                       ...H....

08009d28 <PWM_SVM_0_PhULowPin>:
 8009d28:	48028200 0000000e                       ...H....

08009d30 <PWM_SVM_0_PhVHighPin>:
 8009d30:	48028000 00000004                       ...H....

08009d38 <PWM_SVM_0_PhVLowPin>:
 8009d38:	48028200 0000000f                       ...H....

08009d40 <PWM_SVM_0_PhWHighPin>:
 8009d40:	48028000 00000005                       ...H....

08009d48 <PWM_SVM_0_PhWLowPin>:
 8009d48:	48028000 00000002                       ...H....

08009d50 <PWM_SVM_0_PhUHiOutPinConf>:
 8009d50:	00000098 00010000 00000000              ............

08009d5c <PWM_SVM_0_PhULoOutPinConf>:
 8009d5c:	00000098 00010000 00000000              ............

08009d68 <PWM_SVM_0_PhVHiOutPinConf>:
 8009d68:	00000098 00010000 00000000              ............

08009d74 <PWM_SVM_0_PhVLoOutPinConf>:
 8009d74:	00000098 00010000 00000000              ............

08009d80 <PWM_SVM_0_PhWHiOutPinConf>:
 8009d80:	00000098 00010000 00000000              ............

08009d8c <PWM_SVM_0_PhWLoOutPinConf>:
 8009d8c:	00000098 00010000 00000000              ............

08009d98 <PWM_SVM_0_InverterPin>:
 8009d98:	48028000 00000008                       ...H....

08009da0 <PWM_SVM_0_InvPinConf>:
 8009da0:	00000080 00010000 00000000              ............

08009dac <PWM_SVM_0_PhU>:
 8009dac:	40020300 00000002                       ...@....

08009db4 <PWM_SVM_0_PhV>:
 8009db4:	40020200 00000001                       ...@....

08009dbc <PWM_SVM_0_PhW>:
 8009dbc:	40020100 00000000                       ...@....

08009dc4 <PWM_SVM_0_CurrentTrig>:
 8009dc4:	40020100 00000000                       ...@....

08009dcc <PWM_SVM_0_StartConfig>:
 8009dcc:	00000107                                ....

08009dd0 <PWM_SVM_0_TimerInitHandle>:
 8009dd0:	00000001 00000000 00000014 00000000     ................

08009de0 <PWM_SVM_0_TimerInit_CurrentTrig>:
 8009de0:	20000001 0000000f 00000000 00000000     ... ............

08009df0 <PWM_SVM_0_AppConfig>:
 8009df0:	4002023c 4002013c 01000000 01000000     <..@<..@........
 8009e00:	02000000 00010101 000186a0 07270e00     ..............'.
 8009e10:	00000100 00000111 00000003 00000000     ................
	...
 8009e28:	03938700 00000727 00250000 00000001     ....'.....%.....
 8009e38:	00000000                                ....

08009e3c <PWM_SVM_1_PhUHighPin>:
 8009e3c:	48028100 00000004                       ...H....

08009e44 <PWM_SVM_1_PhULowPin>:
 8009e44:	48028100 0000000a                       ...H....

08009e4c <PWM_SVM_1_PhVHighPin>:
 8009e4c:	48028100 00000005                       ...H....

08009e54 <PWM_SVM_1_PhVLowPin>:
 8009e54:	48028100 0000000b                       ...H....

08009e5c <PWM_SVM_1_PhWHighPin>:
 8009e5c:	48028100 0000000f                       ...H....

08009e64 <PWM_SVM_1_PhWLowPin>:
 8009e64:	48028100 0000000c                       ...H....

08009e6c <PWM_SVM_1_PhUHiOutPinConf>:
 8009e6c:	000000a0 00010000 00000000              ............

08009e78 <PWM_SVM_1_PhULoOutPinConf>:
 8009e78:	00000098 00010000 00000000              ............

08009e84 <PWM_SVM_1_PhVHiOutPinConf>:
 8009e84:	000000a0 00010000 00000000              ............

08009e90 <PWM_SVM_1_PhVLoOutPinConf>:
 8009e90:	00000098 00010000 00000000              ............

08009e9c <PWM_SVM_1_PhWHiOutPinConf>:
 8009e9c:	00000098 00010000 00000000              ............

08009ea8 <PWM_SVM_1_PhWLoOutPinConf>:
 8009ea8:	00000098 00010000 00000000              ............

08009eb4 <PWM_SVM_1_InverterPin>:
 8009eb4:	48028f00 00000009                       ...H....

08009ebc <PWM_SVM_1_InvPinConf>:
 8009ebc:	00000080 00010000 00000000              ............

08009ec8 <PWM_SVM_1_PhU>:
 8009ec8:	40024300 00000002                       .C.@....

08009ed0 <PWM_SVM_1_PhV>:
 8009ed0:	40024200 00000001                       .B.@....

08009ed8 <PWM_SVM_1_PhW>:
 8009ed8:	40024100 00000000                       .A.@....

08009ee0 <PWM_SVM_1_CurrentTrig>:
 8009ee0:	40024100 00000000                       .A.@....

08009ee8 <PWM_SVM_1_StartConfig>:
 8009ee8:	00000107                                ....

08009eec <PWM_SVM_1_TimerInitHandle>:
 8009eec:	00000001 00000000 00000014 00000000     ................

08009efc <PWM_SVM_1_TimerInit_CurrentTrig>:
 8009efc:	20000001 0000000f 00000000 00000000     ... ............

08009f0c <PWM_SVM_1_AppConfig>:
 8009f0c:	4002423c 4002413c 01000000 01000000     <B.@<A.@........
 8009f1c:	02000000 00010101 000186a0 07270e00     ..............'.
 8009f2c:	00000200 00000111 00000004 00000005     ................
 8009f3c:	00001005 00000000 03938700 00000727     ............'...
 8009f4c:	00250000 00000001 00000000              ..%.........

08009f58 <Sinus60_tab>:
 8009f58:	00210000 00640043 00a70086 00ea00c9     ..!.C.d.........
 8009f68:	012d010c 0170014f 01b30192 01f601d5     ..-.O.p.........
 8009f78:	02390218 027c025b 02bf029e 030202e1     ..9.[.|.........
 8009f88:	03450324 03880367 03cb03aa 040e03ed     $.E.g...........
 8009f98:	04510430 04940473 04d704b6 051a04f9     0.Q.s...........
 8009fa8:	055d053b 05a0057e 05e305c1 06260604     ;.].~.........&.
 8009fb8:	06690647 06ac068a 06ef06cd 07320710     G.i...........2.
 8009fc8:	07740753 07b70796 07fa07d9 083d081c     S.t...........=.
 8009fd8:	0880085f 08c308a1 090608e4 09490927     _...........'.I.
 8009fe8:	098b096a 09ce09ad 0a1109f0 0a540a32     j...........2.T.
 8009ff8:	0a970a75 0ad90ab8 0b1c0afb 0b5f0b3e     u...........>._.
 800a008:	0ba20b80 0be40bc3 0c270c06 0c6a0c49     ..........'.I.j.
 800a018:	0cad0c8b 0cef0cce 0d320d11 0d750d53     ..........2.S.u.
 800a028:	0db70d96 0dfa0dd9 0e3c0e1b 0e7f0e5e     ..........<.^...
 800a038:	0ec20ea0 0f040ee3 0f470f25 0f890f68     ........%.G.h...
 800a048:	0fcc0fab 100e0fed 10511030 10931072     ........0.Q.r...
 800a058:	10d610b4 111810f7 115b1139 119d117c     ........9.[.|...
 800a068:	11df11be 12221200 12641243 12a61285     ......".C.d.....
 800a078:	12e912c7 132b130a 136d134c 13af138e     ......+.L.m.....
 800a088:	13f213d0 14341413 14761455 14b81497     ......4.U.v.....
 800a098:	14fa14d9 153c151b 157e155d 15c0159f     ......<.].~.....
 800a0a8:	160215e1 16441623 16861665 16c816a7     ....#.D.e.......
 800a0b8:	170a16e9 174c172b 178e176d 17d017af     ....+.L.m.......
 800a0c8:	181217f1 18541833 18951875 18d718b6     ....3.T.u.......
 800a0d8:	191918f8 195b193a 199c197b 19de19bd     ....:.[.{.......
 800a0e8:	1a2019ff 1a611a40 1aa31a82 1ae41ac3     .. .@.a.........
 800a0f8:	1b261b05 1b671b46 1ba91b88 1bea1bc9     ..&.F.g.........
 800a108:	1c2b1c0b 1c6d1c4c 1cae1c8e 1cef1ccf     ..+.L.m.........
 800a118:	1d311d10 1d721d51 1db31d93 1df41dd4     ..1.Q.r.........
 800a128:	1e351e15 1e771e56 1eb81e97 1ef91ed8     ..5.V.w.........
 800a138:	1f3a1f19 1f7b1f5a 1fbc1f9b 1ffd1fdc     ..:.Z.{.........
 800a148:	203d201d 207e205e 20bf209f 210020df     . = ^ ~ . . . .!
 800a158:	21412120 21812161 21c221a2 220321e2      !A!a!.!.!.!.!."
 800a168:	22432223 22842263 22c422a4 230522e4     #"C"c".".".".".#
 800a178:	23452325 23862365 23c623a6 240623e6     %#E#e#.#.#.#.#.$
 800a188:	24472426 24872467 24c724a7 250724e7     &$G$g$.$.$.$.$.%
 800a198:	25472527 25872567 25c725a7 260725e7     '%G%g%.%.%.%.%.&
 800a1a8:	26472627 26872667 26c726a7 270726e7     '&G&g&.&.&.&.&.'
 800a1b8:	27472727 27872767 27c627a7 280627e6     ''G'g'.'.'.'.'.(
 800a1c8:	28462826 28852866 28c528a5 290428e5     &(F(f(.(.(.(.(.)
 800a1d8:	29442924 29832964 29c329a3 2a0229e2     $)D)d).).).).).*
 800a1e8:	2a412a22 2a802a61 2ac02aa0 2aff2adf     "*A*a*.*.*.*.*.*
 800a1f8:	2b3e2b1e 2b7d2b5d 2bbc2b9c 2bfb2bdb     .+>+]+}+.+.+.+.+
 800a208:	2c3a2c1a 2c792c59 2cb82c98 2cf62cd7     .,:,Y,y,.,.,.,.,
 800a218:	2d352d16 2d742d54 2db22d93 2df12dd2     .-5-T-t-.-.-.-.-
 800a228:	2e2f2e10 2e6e2e4f 2eac2e8d 2eeb2ecc     ../.O.n.........
 800a238:	2f292f0a 2f672f48 2fa62f86 2fe42fc5     ./)/H/g/././././
 800a248:	30223003 30603041 309e307f 30dc30bd     .0"0A0`0.0.0.0.0
 800a258:	311a30fb 31583139 31963177 31d331b4     .0.191X1w1.1.1.1
 800a268:	321131f2 324f3230 328c326d 32ca32ab     .1.202O2m2.2.2.2
 800a278:	330732e9 33453326 33823363 33bf33a1     .2.3&3E3c3.3.3.3
 800a288:	33fd33de 343a341b 34773458 34b43496     .3.3.4:4X4w4.4.4
 800a298:	34f134d3 352e3510 356b354d 35a8358a     .4.4.5.5M5k5.5.5
 800a2a8:	35e535c6 36223603 365e3640 369b367d     .5.5.6"6@6^6}6.6
 800a2b8:	36d736b9 371436f6 37503732 378d376f     .6.6.6.727P7o7.7
 800a2c8:	37c937ab 380637e7 38423824 387e3860     .7.7.7.8$8B8`8~8
 800a2d8:	38ba389c 38f638d8 39323914 396e3950     .8.8.8.8.929P9n9
 800a2e8:	39aa398c 39e639c8 3a213a04 3a5d3a3f     .9.9.9.9.:!:?:]:
 800a2f8:	3a993a7b 3ad43ab6 3b103af2 3b4b3b2d     {:.:.:.:.:.;-;K;
 800a308:	3b863b69 3bc23ba4 3bfd3bdf 3c383c1b     i;.;.;.;.;.;.<8<
 800a318:	3c733c56 3cae3c91 3ce93ccc 3d243d07     V<s<.<.<.<.<.=$=
 800a328:	3d5f3d42 3d9a3d7c 3dd53db7 3e0f3df2     B=_=|=.=.=.=.=.>
 800a338:	3e4a3e2c 3e843e67 3ebf3ea2 3ef93edc     ,>J>g>.>.>.>.>.>
 800a348:	3f333f16 3f6e3f51 3fa83f8b 3fe23fc5     .?3?Q?n?.?.?.?.?
 800a358:	401c3fff 40564039 40904073 40ca40ad     .?.@9@V@s@.@.@.@
 800a368:	410340e7 413d4120 4177415a 41b04194     .@.A A=AZAwA.A.A
 800a378:	41ea41cd 42234207 425d4240 42964279     .A.A.B#B@B]ByB.B
 800a388:	42cf42b2 430842ec 43414325 437a435e     .B.B.B.C%CAC^CzC
 800a398:	43b34397 43ec43d0 44254408 445d4441     .C.C.C.C.D%DAD]D
 800a3a8:	4496447a 44cf44b2 450744eb 453f4523     zD.D.D.D.D.E#E?E
 800a3b8:	4578455c 45b04594 45e845cc 46204604     \ExE.E.E.E.E.F F
 800a3c8:	4658463c 46904674 46c846ac 470046e4     <FXFtF.F.F.F.F.G
 800a3d8:	4738471c 476f4754 47a7478b 47de47c3     .G8GTGoG.G.G.G.G
 800a3e8:	481647fa 484d4832 48844869 48bc48a0     .G.H2HMHiH.H.H.H
 800a3f8:	48f348d7 492a490e 49614945 4998497c     .H.H.I*IEIaI|I.I
 800a408:	49ce49b3 4a0549ea 4a3c4a20 4a724a57     .I.I.I.J J<JWJrJ
 800a418:	4aa94a8e 4adf4ac4 4b154afa 4b4c4b31     .J.J.J.J.J.K1KLK
 800a428:	4b824b67 4bb84b9d 4bee4bd3 4c244c09     gK.K.K.K.K.K.L$L
 800a438:	4c5a4c3f 4c8f4c75 4cc54caa 4cfb4ce0     ?LZLuL.L.L.L.L.L
 800a448:	4d304d15 4d664d4b 4d9b4d80 4dd04db6     .M0MKMfM.M.M.M.M
 800a458:	4e054deb 4e3a4e20 4e6f4e55 4ea44e8a     .M.N N:NUNoN.N.N
 800a468:	4ed94ebf 4f0e4ef4 4f434f28 4f774f5d     .N.N.N.O(OCO]OwO
 800a478:	4fac4f91 4fe04fc6 50144ffa 5049502f     .O.O.O.O.O.P/PIP
 800a488:	507d5063 50b15097 50e550cb 511950ff     cP}P.P.P.P.P.P.Q
 800a498:	514d5133 51805166 51b4519a 51e751ce     3QMQfQ.Q.Q.Q.Q.Q
 800a4a8:	521b5201 524e5235 52825268 52b5529b     .R.R5RNRhR.R.R.R
 800a4b8:	52e852ce 531b5301 534e5334 53815367     .R.R.S.S4SNSgS.S
 800a4c8:	53b3539a 53e653cd 541953ff 544b5432     .S.S.S.S.S.T2TKT
 800a4d8:	547d5464 54b05497 54e254c9 551454fb     dT}T.T.T.T.T.T.U
 800a4e8:	5546552d 5578555f 55aa5591 55dc55c3     -UFU_UxU.U.U.U.U
 800a4f8:	560d55f4 563f5626 56705658 56a25689     .U.V&V?VXVpV.V.V
 800a508:	56d356ba 570456ec 5735571d 5766574e     .V.V.V.W.W5WNWfW
 800a518:	5797577f 57c857b0 57f957e0 58295811     .W.W.W.W.W.W.X)X
 800a528:	585a5842 588a5872 58bb58a3 58eb58d3     BXZXrX.X.X.X.X.X
 800a538:	591b5903 594b5933 597b5963 59ab5993     .Y.Y3YKYcY{Y.Y.Y
 800a548:	59db59c3 5a0a59f3 5a3a5a22 5a6a5a52     .Y.Y.Y.Z"Z:ZRZjZ
 800a558:	5a995a81 5ac85ab1 5af75ae0 5b275b0f     .Z.Z.Z.Z.Z.Z.['[
 800a568:	5b565b3e 5b845b6d 5bb35b9c 5be25bcb     >[V[m[.[.[.[.[.[
 800a578:	5c115bf9 5c3f5c28 5c6d5c56 5c9c5c85     .[.\(\?\V\m\.\.\
 800a588:	5cca5cb3 5cf85ce1 5d265d0f 5d545d3d     .\.\.\.\.]&]=]T]
 800a598:	5d825d6b 5db05d99 5ddd5dc6 5e0b5df4     k].].].].].].].^
 800a5a8:	5e385e21 5e655e4f 5e935e7c 5ec05ea9     !^8^O^e^|^.^.^.^
 800a5b8:	5eed5ed6 5f1a5f03 5f465f30 5f735f5d     .^.^._._0_F_]_s_
 800a5c8:	5fa05f89 5fcc5fb6 5ff95fe2 6025600f     ._._._._._._.`%`
 800a5d8:	6051603b 607d6067 60a96093 60d560bf     ;`Q`g`}`.`.`.`.`
 800a5e8:	610160eb 612c6117 61586142 6184616e     .`.a.a,aBaXana.a
 800a5f8:	61af6199 61da61c5 620561f0 6230621b     .a.a.a.a.a.b.b0b
 800a608:	625b6246 62866271 62b1629b 62db62c6     Fb[bqb.b.b.b.b.b
 800a618:	630662f1 6330631b 635b6346 63856370     .b.c.c0cFc[cpc.c
 800a628:	63af639a 63d963c4 640363ee 642d6418     .c.c.c.c.c.d.d-d
 800a638:	64566441 6480646b 64a96495 64d364be     AdVdkd.d.d.d.d.d
 800a648:	64fc64e7 65256510 654e6539 65776562     .d.d.e%e9eNebewe
 800a658:	65a0658b 65c865b4 65f165dd 66196605     .e.e.e.e.e.e.f.f
 800a668:	6642662e 666a6656 6692667e 66ba66a6     .fBfVfjf~f.f.f.f
 800a678:	66e266ce 670a66f6 6732671e 67596745     .f.f.f.g.g2gEgYg
 800a688:	6781676d 67a86794 67cf67bc 67f667e3     mg.g.g.g.g.g.g.g
 800a698:	681e680a 68446831 686b6858 6892687f     .h.h1hDhXhkh.h.h
 800a6a8:	68b968a5 68df68cc 690568f2 692c6919     .h.h.h.h.h.i.i,i
 800a6b8:	6952693f 69786965 699e698b 69c469b1     ?iRieixi.i.i.i.i
 800a6c8:	69e969d6 6a0f69fc 6a346a22 6a5a6a47     .i.i.i.j"j4jGjZj
 800a6d8:	6a7f6a6c 6aa46a91 6ac96ab6 6aee6adb     lj.j.j.j.j.j.j.j
 800a6e8:	6b136b00 6b376b25 6b5c6b4a 6b806b6e     .k.k%k7kJk\knk.k
 800a6f8:	6ba56b92 6bc96bb7 6bed6bdb 6c116bff     .k.k.k.k.k.k.k.l
 800a708:	6c356c23 6c586c47 6c7c6c6a 6ca06c8e     #l5lGlXljl|l.l.l
 800a718:	6cc36cb1 6ce66cd5 6d096cf8 6d2c6d1b     .l.l.l.l.l.m.m,m
 800a728:	6d4f6d3e 6d726d61 6d956d84 6db76da6     >mOmamrm.m.m.m.m
 800a738:	6dda6dc9 6dfc6deb 6e1e6e0d 6e416e30     .m.m.m.m.n.n0nAn
 800a748:	6e636e52 6e846e73 6ea66e95 6ec86eb7     Rncnsn.n.n.n.n.n
 800a758:	00006ed9                                .n..

0800a75c <PWM_CCU4_2_timer_handle>:
 800a75c:	00000000 00000001                       ........

0800a764 <PWM_CCU4_2_event0_config>:
 800a764:	00010000                                ....

0800a768 <PWM_CCU4_2_event1_config>:
 800a768:	00010000                                ....

0800a76c <PWM_CCU4_2_event2_config>:
 800a76c:	00010000                                ....

0800a770 <PWM_CCU4_2_ch1_out0_config>:
 800a770:	00000098 00010000 00000004              ............

0800a77c <PWM_CCU4_2_config_handle>:
 800a77c:	02570001 0000012c 00000000 00000000     ..W.,...........
 800a78c:	00000000 0800a764 0800a768 0800a76c     ....d...h...l...
	...
 800a7a8:	01000000 00000000 04000000 0800a75c     ............\...
 800a7b8:	00000001 48028300 00000000 0800a770     .......H....p...
 800a7c8:	1fffceb4                                ....

0800a7cc <PWM_CCU4_0_timer_handle>:
 800a7cc:	00000000 00000001                       ........

0800a7d4 <PWM_CCU4_0_event0_config>:
 800a7d4:	00010000                                ....

0800a7d8 <PWM_CCU4_0_event1_config>:
 800a7d8:	00010000                                ....

0800a7dc <PWM_CCU4_0_event2_config>:
 800a7dc:	00010000                                ....

0800a7e0 <PWM_CCU4_0_ch1_out0_config>:
 800a7e0:	00000098 00010000 00000004              ............

0800a7ec <PWM_CCU4_0_config_handle>:
 800a7ec:	02570001 0000012c 00000000 00000000     ..W.,...........
 800a7fc:	00000000 0800a7d4 0800a7d8 0800a7dc     ................
	...
 800a818:	01000000 00000000 20000000 0800a7cc     ........... ....
 800a828:	00000001 48028000 0000000c 0800a7e0     .......H........
 800a838:	1fffcec4                                ....

0800a83c <I2C_MASTER_0_sda_pin_config>:
 800a83c:	000000d0 00000001 00000000              ............

0800a848 <I2C_MASTER_0_scl_pin_config>:
 800a848:	000000d0 00000001 00000000              ............

0800a854 <I2C_MASTER_0_channel_config>:
 800a854:	000186a0 00000000                       ........

0800a85c <I2C_MASTER_0_config>:
 800a85c:	0800a854 08005245 08005221 08005201     T...ER..!R...R..
	...
 800a880:	04040000 00005957                       ....WY..

0800a888 <group_init_handle0>:
	...

0800a89c <group_init_handle1>:
	...

0800a8b0 <group_init_handle2>:
	...

0800a8c4 <group_init_handle3>:
	...

0800a8d8 <global_config>:
 800a8d8:	00000000 00000003 00000000 00000000     ................
	...

0800a8f0 <Cooling_FAN>:
 800a8f0:	48028000 00000080 00010000 00000000     ...H............
 800a900:	0000000a                                ....

0800a904 <Disable_Gate_Driver_M3>:
 800a904:	48028000 00000080 00010000 00000000     ...H............
 800a914:	0000000b                                ....

0800a918 <DIGITAL_IO_2>:
 800a918:	48028000 00000000 00000000 00000000     ...H............
 800a928:	00000009                                ....

0800a92c <DIGITAL_IO_3>:
 800a92c:	48028100 00000080 00010000 00000000     ...H............
 800a93c:	00000001                                ....

0800a940 <DIGITAL_IO_4>:
 800a940:	48028100 00000080 00010000 00000000     ...H............
 800a950:	0000000d                                ....

0800a954 <DIGITAL_IO_5>:
 800a954:	48028100 00000080 00010000 00000000     ...H............
 800a964:	0000000e                                ....

0800a968 <DIGITAL_IO_6>:
 800a968:	48028100 00000080 00010000 00000000     ...H............
 800a978:	00000002                                ....

0800a97c <DIGITAL_IO_7>:
 800a97c:	48028100 00000000 00000000 00000000     ...H............
 800a98c:	00000003                                ....

0800a990 <DIGITAL_IO_8>:
 800a990:	48028200 00000080 00000001 00000000     ...H............
 800a9a0:	00000000                                ....

0800a9a4 <DIGITAL_IO_9>:
 800a9a4:	48028200 00000080 00010000 00000000     ...H............
 800a9b4:	0000000a                                ....

0800a9b8 <DIGITAL_IO_10>:
 800a9b8:	48028200 00000000 00000000 00000000     ...H............
 800a9c8:	00000002                                ....

0800a9cc <DIGITAL_IO_11>:
 800a9cc:	48028200 00000000 00000000 00000000     ...H............
 800a9dc:	00000003                                ....

0800a9e0 <DIGITAL_IO_12>:
 800a9e0:	48028200 00000000 00000000 00000000     ...H............
 800a9f0:	00000006                                ....

0800a9f4 <DIGITAL_IO_13>:
 800a9f4:	48028200 00000000 00000000 00000000     ...H............
 800aa04:	00000007                                ....

0800aa08 <RS485_DIR>:
 800aa08:	48028300 00000080 00010000 00000000     ...H............
 800aa18:	00000001                                ....

0800aa1c <DIGITAL_IO_15>:
 800aa1c:	48028300 00000000 00000000 00000000     ...H............
 800aa2c:	00000002                                ....

0800aa30 <IO_Bit1_DIR>:
 800aa30:	48028300 00000080 00010000 00000000     ...H............
 800aa40:	00000003                                ....

0800aa44 <IO_Bit0_DIR>:
 800aa44:	48028300 00000080 00010000 00000000     ...H............
 800aa54:	00000004                                ....

0800aa58 <HS_Overtemp>:
 800aa58:	48028300 00000000 00000000 00000000     ...H............
 800aa68:	00000005                                ....

0800aa6c <IO_Bit3_DIR>:
 800aa6c:	48028400 00000080 00010000 00000000     ...H............
 800aa7c:	00000000                                ....

0800aa80 <IO_Bit2_DIR>:
 800aa80:	48028400 00000080 00010000 00000000     ...H............
 800aa90:	00000001                                ....

0800aa94 <IO_Bit2>:
 800aa94:	48028500 00000080 00010000 00000000     ...H............
 800aaa4:	00000001                                ....

0800aaa8 <IO_Bit1>:
 800aaa8:	48028500 00000000 00000000 00000000     ...H............
 800aab8:	00000002                                ....

0800aabc <IO_Bit0>:
 800aabc:	48028500 00000000 00000000 00000000     ...H............
 800aacc:	00000007                                ....

0800aad0 <IO_Bit3>:
 800aad0:	48028500 00000080 00010000 00000000     ...H............
 800aae0:	00000000                                ....

0800aae4 <Disable_Gate_Driver_M1_M2>:
 800aae4:	48028000 00000080 00010000 00000000     ...H............
 800aaf4:	00000006                                ....

0800aaf8 <DIGITAL_IO_26>:
 800aaf8:	48028f00 00000000 00000000 00000000     ...H............
 800ab08:	00000008                                ....

0800ab0c <DIGITAL_IO_27>:
 800ab0c:	48028100 00000000 00000000 00000000     ...H............
 800ab1c:	00000000                                ....

0800ab20 <DIGITAL_IO_28>:
 800ab20:	48028f00 00000000 00000000 00000000     ...H............
 800ab30:	00000003                                ....

0800ab34 <DIGITAL_IO_29>:
 800ab34:	48028100 00000000 00000000 00000000     ...H............
 800ab44:	00000009 01040250 01010000 00008000     ....P...........
 800ab54:	00010000 01010101                       ........

0800ab5c <CCU8_SLICE_CONFIG_0>:
 800ab5c:	0800576d 1fffce94 40020400 00000003     mW.........@....

0800ab6c <CCU8_SLICE_CONFIG_0_compare_config>:
	...
 800ab74:	00000014 000000f0                       ........

0800ab7c <CCU8_SLICE_CONFIG_0_event0_config>:
 800ab7c:	00000000                                ....

0800ab80 <CCU8_SLICE_CONFIG_0_event1_config>:
 800ab80:	00000000                                ....

0800ab84 <CCU8_SLICE_CONFIG_0_event2_config>:
 800ab84:	00000000                                ....

0800ab88 <CCU4_SLICE_CONFIG_0>:
 800ab88:	080058d9 1fffceb4 48004400 00000003     .X.......D.H....

0800ab98 <CCU4_SLICE_CONFIG_0_compare_config>:
 800ab98:	02000000 000000f0                       ........

0800aba0 <CCU4_SLICE_CONFIG_0_event0_config>:
 800aba0:	00000000                                ....

0800aba4 <CCU4_SLICE_CONFIG_0_event1_config>:
 800aba4:	00000000                                ....

0800aba8 <CCU4_SLICE_CONFIG_0_event2_config>:
 800aba8:	00000000                                ....

0800abac <CCU4_SLICE_CONFIG_1>:
 800abac:	08005969 1fffcec4 4000c200 00000001     iY.........@....

0800abbc <CCU4_SLICE_CONFIG_1_compare_config>:
 800abbc:	02000000 000000f0                       ........

0800abc4 <CCU4_SLICE_CONFIG_1_event0_config>:
 800abc4:	00000000                                ....

0800abc8 <CCU4_SLICE_CONFIG_1_event1_config>:
 800abc8:	00000000                                ....

0800abcc <CCU4_SLICE_CONFIG_1_event2_config>:
 800abcc:	00000000                                ....

0800abd0 <AUTOMATION_FB_Ramp0_Config>:
 800abd0:	00000000 000005dc 00000064 00001a0a     ........d.......
 800abe0:	0000012c 000004b0 0000029a 000000c8     ,...............
 800abf0:	00140000 525f4246 5f504d41 00000030     ....FB_RAMP_0...
 800ac00:	525f4246 5f504d41 00000031              FB_RAMP_1...

0800ac0c <AUTOMATION_FB_Ramp1_Config>:
 800ac0c:	00000000 000005dc 00000064 00001a0a     ........d.......
 800ac1c:	0000012c 000004b0 0000029a 000000c8     ,...............
 800ac2c:	00140000                                ....

0800ac30 <ANALOG_IO_0>:
 800ac30:	00000000 1fffd7b4 48028e00 00000001     ...........H....

0800ac40 <ANALOG_IO_1>:
 800ac40:	00000000 1fffd7b5 48028e00 00000000     ...........H....

0800ac50 <ANALOG_IO_2>:
 800ac50:	00000000 1fffd7b6 48028f00 00000002     ...........H....

0800ac60 <global_iclass_config>:
 800ac60:	00000000                                ....

0800ac64 <backgnd_rs_intr_handle>:
 800ac64:	00000010 0000003f 00000000              ....?.......

0800ac70 <backgnd_config>:
 800ac70:	00000005 00000000 00000018 0066666f     ............off.
 800ac80:	62616e65 0064656c 00006e6f 7265706f     enabled.on..oper
 800ac90:	6f697461 0000006e 73616f63 74732074     ation...coast st
 800aca0:	0000706f 63697571 7473206b 0000706f     op..quick stop..
 800acb0:	706d6172 776f6420 0000006e 6f727265     ramp down...erro
 800acc0:	00000072 65666173 00000000 65736572     r...safe....rese
 800acd0:	00657672 72657375 66656420 00656e69     rve.user define.
 800ace0:	756f7274 00656c62 4d494341 4552465f     trouble.ACIM_FRE
 800acf0:	54435f51 305f4c52 00000000 4d494341     Q_CTRL_0....ACIM
 800ad00:	4552465f 54435f51 315f4c52 00000000     _FREQ_CTRL_1....

0800ad10 <ACIM_FREQ_CTRL_0_STATES>:
 800ad10:	0800ac7c 08007781 08007795 080077cd     |....w...w...w..
 800ad20:	0800ac80 00000000 08007879 080078ad     ........yx...x..
 800ad30:	0800ac88 00000000 080078d9 00000000     .........x......
 800ad40:	0800ac8c 0800790d 08007921 08007991     .....y..!y...y..
 800ad50:	0800ac98 080079c9 080079dd 08007a05     .....y...y...z..
 800ad60:	0800aca4 08007a45 08007a59 08007a81     ....Ez..Yz...z..
 800ad70:	0800acb0 08007ac1 08007af1 00000000     .....z...z......
 800ad80:	0800acbc 08007b19 08007b2d 08007b5d     .....{..-{..]{..
 800ad90:	0800acc4 08007805 08007819 08007841     .....x...x..Ax..
 800ada0:	0800accc 00000000 00000000 00000000     ................
 800adb0:	0800accc 00000000 00000000 00000000     ................
 800adc0:	0800acd4 00000000 00000000 00000000     ................
 800add0:	0800acd4 00000000 00000000 00000000     ................
 800ade0:	0800accc 00000000 00000000 00000000     ................
 800adf0:	0800accc 00000000 00000000 00000000     ................
 800ae00:	0800ace0 00000000 08007bb5 00000000     .........{......

0800ae10 <ACIM_FREQ_CTRL_0_Config>:
 800ae10:	00000bb8 00016781 00000018 3fff0000     .....g.........?
 800ae20:	04050101 31190f05 00000000              .......1....

0800ae2c <ACIM_FREQ_CTRL_1_STATES>:
 800ae2c:	0800ac7c 08007781 08007795 080077cd     |....w...w...w..
 800ae3c:	0800ac80 00000000 08007879 080078ad     ........yx...x..
 800ae4c:	0800ac88 00000000 080078d9 00000000     .........x......
 800ae5c:	0800ac8c 0800790d 08007921 08007991     .....y..!y...y..
 800ae6c:	0800ac98 080079c9 080079dd 08007a05     .....y...y...z..
 800ae7c:	0800aca4 08007a45 08007a59 08007a81     ....Ez..Yz...z..
 800ae8c:	0800acb0 08007ac1 08007af1 00000000     .....z...z......
 800ae9c:	0800acbc 08007b19 08007b2d 08007b5d     .....{..-{..]{..
 800aeac:	0800acc4 08007805 08007819 08007841     .....x...x..Ax..
 800aebc:	0800accc 00000000 00000000 00000000     ................
 800aecc:	0800accc 00000000 00000000 00000000     ................
 800aedc:	0800acd4 00000000 00000000 00000000     ................
 800aeec:	0800acd4 00000000 00000000 00000000     ................
 800aefc:	0800accc 00000000 00000000 00000000     ................
 800af0c:	0800accc 00000000 00000000 00000000     ................
 800af1c:	0800ace0 00000000 08007bb5 00000000     .........{......

0800af2c <ACIM_FREQ_CTRL_1_Config>:
 800af2c:	00000bb8 00016781 00000018 3fff0000     .....g.........?
 800af3c:	04050101 1114140a 00000000              ............

0800af48 <comparevalue>:
 800af48:	012c012c 012c012c 012c012c 012c012c     ,.,.,.,.,.,.,.,.
 800af58:	012c012c 012c012c 012c012c 012c012c     ,.,.,.,.,.,.,.,.
 800af68:	012c012c 012c012c 012c012c 012c012c     ,.,.,.,.,.,.,.,.
 800af78:	012c012c 012c012c 012c012c 012c012c     ,.,.,.,.,.,.,.,.
 800af88:	012c012c 012c012c 012c012c 012c012c     ,.,.,.,.,.,.,.,.
 800af98:	012c012c 012c012c 012c012c 012c012c     ,.,.,.,.,.,.,.,.
 800afa8:	012c012c 012c012c 012c012c 012d012d     ,.,.,.,.,.,.-.-.
 800afb8:	012d012d 012d012d 012d012d 012d012d     -.-.-.-.-.-.-.-.
 800afc8:	012d012d 012d012d 012d012d 012d012d     -.-.-.-.-.-.-.-.
 800afd8:	012d012d 012d012d 012d012d 012d012d     -.-.-.-.-.-.-.-.
 800afe8:	012d012d 012d012d 012d012d 012d012d     -.-.-.-.-.-.-.-.
 800aff8:	012d012d 012d012d 012d012d 012d012d     -.-.-.-.-.-.-.-.
 800b008:	012d012d 012d012d 012d012d 012d012d     -.-.-.-.-.-.-.-.
 800b018:	012d012d 012e012d 012e012e 012e012e     -.-.-...........
 800b028:	012e012e 012e012e 012e012e 012e012e     ................
 800b038:	012e012e 012e012e 012e012e 012e012e     ................
 800b048:	012e012e 012e012e 012e012e 012e012e     ................
 800b058:	012e012e 012e012e 012e012e 012e012e     ................
 800b068:	012e012e 012e012e 012e012e 012e012e     ................
 800b078:	012e012e 012e012e 012e012e 012e012e     ................
 800b088:	012f012f 012f012f 012f012f 012f012f     /./././././././.
 800b098:	012f012f 012f012f 012f012f 012f012f     /./././././././.
 800b0a8:	012f012f 012f012f 012f012f 012f012f     /./././././././.
 800b0b8:	012f012f 012f012f 012f012f 012f012f     /./././././././.
 800b0c8:	012f012f 012f012f 012f012f 012f012f     /./././././././.
 800b0d8:	012f012f 012f012f 012f012f 012f012f     /./././././././.
 800b0e8:	012f012f 012f012f 0130012f 01300130     /././././.0.0.0.
 800b0f8:	01300130 01300130 01300130 01300130     0.0.0.0.0.0.0.0.
 800b108:	01300130 01300130 01300130 01300130     0.0.0.0.0.0.0.0.
 800b118:	01300130 01300130 01300130 01300130     0.0.0.0.0.0.0.0.
 800b128:	01300130 01300130 01300130 01300130     0.0.0.0.0.0.0.0.
 800b138:	01300130 01300130 01300130 01300130     0.0.0.0.0.0.0.0.
 800b148:	01300130 01300130 01300130 01300130     0.0.0.0.0.0.0.0.
 800b158:	01300130 01310131 01310131 01310131     0.0.1.1.1.1.1.1.
 800b168:	01310131 01310131 01310131 01310131     1.1.1.1.1.1.1.1.
 800b178:	01310131 01310131 01310131 01310131     1.1.1.1.1.1.1.1.
 800b188:	01310131 01310131 01310131 01310131     1.1.1.1.1.1.1.1.
 800b198:	01310131 01310131 01310131 01310131     1.1.1.1.1.1.1.1.
 800b1a8:	01310131 01310131 01310131 01310131     1.1.1.1.1.1.1.1.
 800b1b8:	01310131 01310131 01310131 01320131     1.1.1.1.1.1.1.2.
 800b1c8:	01320132 01320132 01320132 01320132     2.2.2.2.2.2.2.2.
 800b1d8:	01320132 01320132 01320132 01320132     2.2.2.2.2.2.2.2.
 800b1e8:	01320132 01320132 01320132 01320132     2.2.2.2.2.2.2.2.
 800b1f8:	01320132 01320132 01320132 01320132     2.2.2.2.2.2.2.2.
 800b208:	01320132 01320132 01320132 01320132     2.2.2.2.2.2.2.2.
 800b218:	01320132 01320132 01320132 01320132     2.2.2.2.2.2.2.2.
 800b228:	01320132 01320132 01330132 01330133     2.2.2.2.2.3.3.3.
 800b238:	01330133 01330133 01330133 01330133     3.3.3.3.3.3.3.3.
 800b248:	01330133 01330133 01330133 01330133     3.3.3.3.3.3.3.3.
 800b258:	01330133 01330133 01330133 01330133     3.3.3.3.3.3.3.3.
 800b268:	01330133 01330133 01330133 01330133     3.3.3.3.3.3.3.3.
 800b278:	01330133 01330133 01330133 01330133     3.3.3.3.3.3.3.3.
 800b288:	01330133 01330133 01330133 01330133     3.3.3.3.3.3.3.3.
 800b298:	01330133 01340134 01340134 01340134     3.3.4.4.4.4.4.4.
 800b2a8:	01340134 01340134 01340134 01340134     4.4.4.4.4.4.4.4.
 800b2b8:	01340134 01340134 01340134 01340134     4.4.4.4.4.4.4.4.
 800b2c8:	01340134 01340134 01340134 01340134     4.4.4.4.4.4.4.4.
 800b2d8:	01340134 01340134 01340134 01340134     4.4.4.4.4.4.4.4.
 800b2e8:	01340134 01340134 01340134 01340134     4.4.4.4.4.4.4.4.
 800b2f8:	01340134 01340134 01340134 01350134     4.4.4.4.4.4.4.5.
 800b308:	01350135 01350135 01350135 01350135     5.5.5.5.5.5.5.5.
 800b318:	01350135 01350135 01350135 01350135     5.5.5.5.5.5.5.5.
 800b328:	01350135 01350135 01350135 01350135     5.5.5.5.5.5.5.5.
 800b338:	01350135 01350135 01350135 01350135     5.5.5.5.5.5.5.5.
 800b348:	01350135 01350135 01350135 01350135     5.5.5.5.5.5.5.5.
 800b358:	01350135 01350135 01350135 01350135     5.5.5.5.5.5.5.5.
 800b368:	01350135 01350135 01360136 01360136     5.5.5.5.6.6.6.6.
 800b378:	01360136 01360136 01360136 01360136     6.6.6.6.6.6.6.6.
 800b388:	01360136 01360136 01360136 01360136     6.6.6.6.6.6.6.6.
 800b398:	01360136 01360136 01360136 01360136     6.6.6.6.6.6.6.6.
 800b3a8:	01360136 01360136 01360136 01360136     6.6.6.6.6.6.6.6.
 800b3b8:	01360136 01360136 01360136 01360136     6.6.6.6.6.6.6.6.
 800b3c8:	01360136 01360136 01360136 01360136     6.6.6.6.6.6.6.6.
 800b3d8:	01370136 01370137 01370137 01370137     6.7.7.7.7.7.7.7.
 800b3e8:	01370137 01370137 01370137 01370137     7.7.7.7.7.7.7.7.
 800b3f8:	01370137 01370137 01370137 01370137     7.7.7.7.7.7.7.7.
 800b408:	01370137 01370137 01370137 01370137     7.7.7.7.7.7.7.7.
 800b418:	01370137 01370137 01370137 01370137     7.7.7.7.7.7.7.7.
 800b428:	01370137 01370137 01370137 01370137     7.7.7.7.7.7.7.7.
 800b438:	01370137 01370137 01370137 01380138     7.7.7.7.7.7.8.8.
 800b448:	01380138 01380138 01380138 01380138     8.8.8.8.8.8.8.8.
 800b458:	01380138 01380138 01380138 01380138     8.8.8.8.8.8.8.8.
 800b468:	01380138 01380138 01380138 01380138     8.8.8.8.8.8.8.8.
 800b478:	01380138 01380138 01380138 01380138     8.8.8.8.8.8.8.8.
 800b488:	01380138 01380138 01380138 01380138     8.8.8.8.8.8.8.8.
 800b498:	01380138 01380138 01380138 01380138     8.8.8.8.8.8.8.8.
 800b4a8:	01380138 01380138 01390139 01390139     8.8.8.8.9.9.9.9.
 800b4b8:	01390139 01390139 01390139 01390139     9.9.9.9.9.9.9.9.
 800b4c8:	01390139 01390139 01390139 01390139     9.9.9.9.9.9.9.9.
 800b4d8:	01390139 01390139 01390139 01390139     9.9.9.9.9.9.9.9.
 800b4e8:	01390139 01390139 01390139 01390139     9.9.9.9.9.9.9.9.
 800b4f8:	01390139 01390139 01390139 01390139     9.9.9.9.9.9.9.9.
 800b508:	01390139 01390139 01390139 01390139     9.9.9.9.9.9.9.9.
 800b518:	013a0139 013a013a 013a013a 013a013a     9.:.:.:.:.:.:.:.
 800b528:	013a013a 013a013a 013a013a 013a013a     :.:.:.:.:.:.:.:.
 800b538:	013a013a 013a013a 013a013a 013a013a     :.:.:.:.:.:.:.:.
 800b548:	013a013a 013a013a 013a013a 013a013a     :.:.:.:.:.:.:.:.
 800b558:	013a013a 013a013a 013a013a 013a013a     :.:.:.:.:.:.:.:.
 800b568:	013a013a 013a013a 013a013a 013a013a     :.:.:.:.:.:.:.:.
 800b578:	013a013a 013a013a 013a013a 013b013b     :.:.:.:.:.:.;.;.
 800b588:	013b013b 013b013b 013b013b 013b013b     ;.;.;.;.;.;.;.;.
 800b598:	013b013b 013b013b 013b013b 013b013b     ;.;.;.;.;.;.;.;.
 800b5a8:	013b013b 013b013b 013b013b 013b013b     ;.;.;.;.;.;.;.;.
 800b5b8:	013b013b 013b013b 013b013b 013b013b     ;.;.;.;.;.;.;.;.
 800b5c8:	013b013b 013b013b 013b013b 013b013b     ;.;.;.;.;.;.;.;.
 800b5d8:	013b013b 013b013b 013b013b 013b013b     ;.;.;.;.;.;.;.;.
 800b5e8:	013b013b 013c013b 013c013c 013c013c     ;.;.;.<.<.<.<.<.
 800b5f8:	013c013c 013c013c 013c013c 013c013c     <.<.<.<.<.<.<.<.
 800b608:	013c013c 013c013c 013c013c 013c013c     <.<.<.<.<.<.<.<.
 800b618:	013c013c 013c013c 013c013c 013c013c     <.<.<.<.<.<.<.<.
 800b628:	013c013c 013c013c 013c013c 013c013c     <.<.<.<.<.<.<.<.
 800b638:	013c013c 013c013c 013c013c 013c013c     <.<.<.<.<.<.<.<.
 800b648:	013c013c 013c013c 013c013c 013c013c     <.<.<.<.<.<.<.<.
 800b658:	013d013d 013d013d 013d013d 013d013d     =.=.=.=.=.=.=.=.
 800b668:	013d013d 013d013d 013d013d 013d013d     =.=.=.=.=.=.=.=.
 800b678:	013d013d 013d013d 013d013d 013d013d     =.=.=.=.=.=.=.=.
 800b688:	013d013d 013d013d 013d013d 013d013d     =.=.=.=.=.=.=.=.
 800b698:	013d013d 013d013d 013d013d 013d013d     =.=.=.=.=.=.=.=.
 800b6a8:	013d013d 013d013d 013d013d 013d013d     =.=.=.=.=.=.=.=.
 800b6b8:	013d013d 013d013d 013d013d 013e013e     =.=.=.=.=.=.>.>.
 800b6c8:	013e013e 013e013e 013e013e 013e013e     >.>.>.>.>.>.>.>.
 800b6d8:	013e013e 013e013e 013e013e 013e013e     >.>.>.>.>.>.>.>.
 800b6e8:	013e013e 013e013e 013e013e 013e013e     >.>.>.>.>.>.>.>.
 800b6f8:	013e013e 013e013e 013e013e 013e013e     >.>.>.>.>.>.>.>.
 800b708:	013e013e 013e013e 013e013e 013e013e     >.>.>.>.>.>.>.>.
 800b718:	013e013e 013e013e 013e013e 013e013e     >.>.>.>.>.>.>.>.
 800b728:	013e013e 013f013e 013f013f 013f013f     >.>.>.?.?.?.?.?.
 800b738:	013f013f 013f013f 013f013f 013f013f     ?.?.?.?.?.?.?.?.
 800b748:	013f013f 013f013f 013f013f 013f013f     ?.?.?.?.?.?.?.?.
 800b758:	013f013f 013f013f 013f013f 013f013f     ?.?.?.?.?.?.?.?.
 800b768:	013f013f 013f013f 013f013f 013f013f     ?.?.?.?.?.?.?.?.
 800b778:	013f013f 013f013f 013f013f 013f013f     ?.?.?.?.?.?.?.?.
 800b788:	013f013f 013f013f 013f013f 013f013f     ?.?.?.?.?.?.?.?.
 800b798:	01400140 01400140 01400140 01400140     @.@.@.@.@.@.@.@.
 800b7a8:	01400140 01400140 01400140 01400140     @.@.@.@.@.@.@.@.
 800b7b8:	01400140 01400140 01400140 01400140     @.@.@.@.@.@.@.@.
 800b7c8:	01400140 01400140 01400140 01400140     @.@.@.@.@.@.@.@.
 800b7d8:	01400140 01400140 01400140 01400140     @.@.@.@.@.@.@.@.
 800b7e8:	01400140 01400140 01400140 01400140     @.@.@.@.@.@.@.@.
 800b7f8:	01400140 01400140 01410140 01410141     @.@.@.@.@.A.A.A.
 800b808:	01410141 01410141 01410141 01410141     A.A.A.A.A.A.A.A.
 800b818:	01410141 01410141 01410141 01410141     A.A.A.A.A.A.A.A.
 800b828:	01410141 01410141 01410141 01410141     A.A.A.A.A.A.A.A.
 800b838:	01410141 01410141 01410141 01410141     A.A.A.A.A.A.A.A.
 800b848:	01410141 01410141 01410141 01410141     A.A.A.A.A.A.A.A.
 800b858:	01410141 01410141 01410141 01410141     A.A.A.A.A.A.A.A.
 800b868:	01410141 01420141 01420142 01420142     A.A.A.B.B.B.B.B.
 800b878:	01420142 01420142 01420142 01420142     B.B.B.B.B.B.B.B.
 800b888:	01420142 01420142 01420142 01420142     B.B.B.B.B.B.B.B.
 800b898:	01420142 01420142 01420142 01420142     B.B.B.B.B.B.B.B.
 800b8a8:	01420142 01420142 01420142 01420142     B.B.B.B.B.B.B.B.
 800b8b8:	01420142 01420142 01420142 01420142     B.B.B.B.B.B.B.B.
 800b8c8:	01420142 01420142 01420142 01420142     B.B.B.B.B.B.B.B.
 800b8d8:	01430143 01430143 01430143 01430143     C.C.C.C.C.C.C.C.
 800b8e8:	01430143 01430143 01430143 01430143     C.C.C.C.C.C.C.C.
 800b8f8:	01430143 01430143 01430143 01430143     C.C.C.C.C.C.C.C.
 800b908:	01430143 01430143 01430143 01430143     C.C.C.C.C.C.C.C.
 800b918:	01430143 01430143 01430143 01430143     C.C.C.C.C.C.C.C.
 800b928:	01430143 01430143 01430143 01430143     C.C.C.C.C.C.C.C.
 800b938:	01430143 01430143 01440143 01440144     C.C.C.C.C.D.D.D.
 800b948:	01440144 01440144 01440144 01440144     D.D.D.D.D.D.D.D.
 800b958:	01440144 01440144 01440144 01440144     D.D.D.D.D.D.D.D.
 800b968:	01440144 01440144 01440144 01440144     D.D.D.D.D.D.D.D.
 800b978:	01440144 01440144 01440144 01440144     D.D.D.D.D.D.D.D.
 800b988:	01440144 01440144 01440144 01440144     D.D.D.D.D.D.D.D.
 800b998:	01440144 01440144 01440144 01440144     D.D.D.D.D.D.D.D.
 800b9a8:	01440144 01450144 01450145 01450145     D.D.D.E.E.E.E.E.
 800b9b8:	01450145 01450145 01450145 01450145     E.E.E.E.E.E.E.E.
 800b9c8:	01450145 01450145 01450145 01450145     E.E.E.E.E.E.E.E.
 800b9d8:	01450145 01450145 01450145 01450145     E.E.E.E.E.E.E.E.
 800b9e8:	01450145 01450145 01450145 01450145     E.E.E.E.E.E.E.E.
 800b9f8:	01450145 01450145 01450145 01450145     E.E.E.E.E.E.E.E.
 800ba08:	01450145 01450145 01450145 01450145     E.E.E.E.E.E.E.E.
 800ba18:	01460146 01460146 01460146 01460146     F.F.F.F.F.F.F.F.
 800ba28:	01460146 01460146 01460146 01460146     F.F.F.F.F.F.F.F.
 800ba38:	01460146 01460146 01460146 01460146     F.F.F.F.F.F.F.F.
 800ba48:	01460146 01460146 01460146 01460146     F.F.F.F.F.F.F.F.
 800ba58:	01460146 01460146 01460146 01460146     F.F.F.F.F.F.F.F.
 800ba68:	01460146 01460146 01460146 01460146     F.F.F.F.F.F.F.F.
 800ba78:	01460146 01460146 01470146 01470147     F.F.F.F.F.G.G.G.
 800ba88:	01470147 01470147 01470147 01470147     G.G.G.G.G.G.G.G.
 800ba98:	01470147 01470147 01470147 01470147     G.G.G.G.G.G.G.G.
 800baa8:	01470147 01470147 01470147 01470147     G.G.G.G.G.G.G.G.
 800bab8:	01470147 01470147 01470147 01470147     G.G.G.G.G.G.G.G.
 800bac8:	01470147 01470147 01470147 01470147     G.G.G.G.G.G.G.G.
 800bad8:	01470147 01470147 01470147 01470147     G.G.G.G.G.G.G.G.
 800bae8:	01470147 01480147 01480148 01480148     G.G.G.H.H.H.H.H.
 800baf8:	01480148 01480148 01480148 01480148     H.H.H.H.H.H.H.H.
 800bb08:	01480148 01480148 01480148 01480148     H.H.H.H.H.H.H.H.
 800bb18:	01480148 01480148 01480148 01480148     H.H.H.H.H.H.H.H.
 800bb28:	01480148 01480148 01480148 01480148     H.H.H.H.H.H.H.H.
 800bb38:	01480148 01480148 01480148 01480148     H.H.H.H.H.H.H.H.
 800bb48:	01480148 01480148 01480148 01480148     H.H.H.H.H.H.H.H.
 800bb58:	01490149 01490149 01490149 01490149     I.I.I.I.I.I.I.I.
 800bb68:	01490149 01490149 01490149 01490149     I.I.I.I.I.I.I.I.
 800bb78:	01490149 01490149 01490149 01490149     I.I.I.I.I.I.I.I.
 800bb88:	01490149 01490149 01490149 01490149     I.I.I.I.I.I.I.I.
 800bb98:	01490149 01490149 01490149 01490149     I.I.I.I.I.I.I.I.
 800bba8:	01490149 01490149 01490149 01490149     I.I.I.I.I.I.I.I.
 800bbb8:	01490149 01490149 014a0149 014a014a     I.I.I.I.I.J.J.J.
 800bbc8:	014a014a 014a014a 014a014a 014a014a     J.J.J.J.J.J.J.J.
 800bbd8:	014a014a 014a014a 014a014a 014a014a     J.J.J.J.J.J.J.J.
 800bbe8:	014a014a 014a014a 014a014a 014a014a     J.J.J.J.J.J.J.J.
 800bbf8:	014a014a 014a014a 014a014a 014a014a     J.J.J.J.J.J.J.J.
 800bc08:	014a014a 014a014a 014a014a 014a014a     J.J.J.J.J.J.J.J.
 800bc18:	014a014a 014a014a 014a014a 014a014a     J.J.J.J.J.J.J.J.
 800bc28:	014a014a 014b014a 014b014b 014b014b     J.J.J.K.K.K.K.K.
 800bc38:	014b014b 014b014b 014b014b 014b014b     K.K.K.K.K.K.K.K.
 800bc48:	014b014b 014b014b 014b014b 014b014b     K.K.K.K.K.K.K.K.
 800bc58:	014b014b 014b014b 014b014b 014b014b     K.K.K.K.K.K.K.K.
 800bc68:	014b014b 014b014b 014b014b 014b014b     K.K.K.K.K.K.K.K.
 800bc78:	014b014b 014b014b 014b014b 014b014b     K.K.K.K.K.K.K.K.
 800bc88:	014b014b 014b014b 014b014b 014b014b     K.K.K.K.K.K.K.K.
 800bc98:	014c014c 014c014c 014c014c 014c014c     L.L.L.L.L.L.L.L.
 800bca8:	014c014c 014c014c 014c014c 014c014c     L.L.L.L.L.L.L.L.
 800bcb8:	014c014c 014c014c 014c014c 014c014c     L.L.L.L.L.L.L.L.
 800bcc8:	014c014c 014c014c 014c014c 014c014c     L.L.L.L.L.L.L.L.
 800bcd8:	014c014c 014c014c 014c014c 014c014c     L.L.L.L.L.L.L.L.
 800bce8:	014c014c 014c014c 014c014c 014c014c     L.L.L.L.L.L.L.L.
 800bcf8:	014c014c 014c014c 014c014c 014d014d     L.L.L.L.L.L.M.M.
 800bd08:	014d014d 014d014d 014d014d 014d014d     M.M.M.M.M.M.M.M.
 800bd18:	014d014d 014d014d 014d014d 014d014d     M.M.M.M.M.M.M.M.
 800bd28:	014d014d 014d014d 014d014d 014d014d     M.M.M.M.M.M.M.M.
 800bd38:	014d014d 014d014d 014d014d 014d014d     M.M.M.M.M.M.M.M.
 800bd48:	014d014d 014d014d 014d014d 014d014d     M.M.M.M.M.M.M.M.
 800bd58:	014d014d 014d014d 014d014d 014d014d     M.M.M.M.M.M.M.M.
 800bd68:	014d014d 014e014d 014e014e 014e014e     M.M.M.N.N.N.N.N.
 800bd78:	014e014e 014e014e 014e014e 014e014e     N.N.N.N.N.N.N.N.
 800bd88:	014e014e 014e014e 014e014e 014e014e     N.N.N.N.N.N.N.N.
 800bd98:	014e014e 014e014e 014e014e 014e014e     N.N.N.N.N.N.N.N.
 800bda8:	014e014e 014e014e 014e014e 014e014e     N.N.N.N.N.N.N.N.
 800bdb8:	014e014e 014e014e 014e014e 014e014e     N.N.N.N.N.N.N.N.
 800bdc8:	014e014e 014e014e 014e014e 014e014e     N.N.N.N.N.N.N.N.
 800bdd8:	014f014e 014f014f 014f014f 014f014f     N.O.O.O.O.O.O.O.
 800bde8:	014f014f 014f014f 014f014f 014f014f     O.O.O.O.O.O.O.O.
 800bdf8:	014f014f 014f014f 014f014f 014f014f     O.O.O.O.O.O.O.O.
 800be08:	014f014f 014f014f 014f014f 014f014f     O.O.O.O.O.O.O.O.
 800be18:	014f014f 014f014f 014f014f 014f014f     O.O.O.O.O.O.O.O.
 800be28:	014f014f 014f014f 014f014f 014f014f     O.O.O.O.O.O.O.O.
 800be38:	014f014f 014f014f 014f014f 01500150     O.O.O.O.O.O.P.P.
 800be48:	01500150 01500150 01500150 01500150     P.P.P.P.P.P.P.P.
 800be58:	01500150 01500150 01500150 01500150     P.P.P.P.P.P.P.P.
 800be68:	01500150 01500150 01500150 01500150     P.P.P.P.P.P.P.P.
 800be78:	01500150 01500150 01500150 01500150     P.P.P.P.P.P.P.P.
 800be88:	01500150 01500150 01500150 01500150     P.P.P.P.P.P.P.P.
 800be98:	01500150 01500150 01500150 01500150     P.P.P.P.P.P.P.P.
 800bea8:	01500150 01500150 01510151 01510151     P.P.P.P.Q.Q.Q.Q.
 800beb8:	01510151 01510151 01510151 01510151     Q.Q.Q.Q.Q.Q.Q.Q.
 800bec8:	01510151 01510151 01510151 01510151     Q.Q.Q.Q.Q.Q.Q.Q.
 800bed8:	01510151 01510151 01510151 01510151     Q.Q.Q.Q.Q.Q.Q.Q.
 800bee8:	01510151 01510151 01510151 01510151     Q.Q.Q.Q.Q.Q.Q.Q.
 800bef8:	01510151 01510151 01510151 01510151     Q.Q.Q.Q.Q.Q.Q.Q.
 800bf08:	01510151 01510151 01510151 01510151     Q.Q.Q.Q.Q.Q.Q.Q.
 800bf18:	01520151 01520152 01520152 01520152     Q.R.R.R.R.R.R.R.
 800bf28:	01520152 01520152 01520152 01520152     R.R.R.R.R.R.R.R.
 800bf38:	01520152 01520152 01520152 01520152     R.R.R.R.R.R.R.R.
 800bf48:	01520152 01520152 01520152 01520152     R.R.R.R.R.R.R.R.
 800bf58:	01520152 01520152 01520152 01520152     R.R.R.R.R.R.R.R.
 800bf68:	01520152 01520152 01520152 01520152     R.R.R.R.R.R.R.R.
 800bf78:	01520152 01520152 01520152 01530152     R.R.R.R.R.R.R.S.
 800bf88:	01530153 01530153 01530153 01530153     S.S.S.S.S.S.S.S.
 800bf98:	01530153 01530153 01530153 01530153     S.S.S.S.S.S.S.S.
 800bfa8:	01530153 01530153 01530153 01530153     S.S.S.S.S.S.S.S.
 800bfb8:	01530153 01530153 01530153 01530153     S.S.S.S.S.S.S.S.
 800bfc8:	01530153 01530153 01530153 01530153     S.S.S.S.S.S.S.S.
 800bfd8:	01530153 01530153 01530153 01530153     S.S.S.S.S.S.S.S.
 800bfe8:	01530153 01530153 01540154 01540154     S.S.S.S.T.T.T.T.
 800bff8:	01540154 01540154 01540154 01540154     T.T.T.T.T.T.T.T.
 800c008:	01540154 01540154 01540154 01540154     T.T.T.T.T.T.T.T.
 800c018:	01540154 01540154 01540154 01540154     T.T.T.T.T.T.T.T.
 800c028:	01540154 01540154 01540154 01540154     T.T.T.T.T.T.T.T.
 800c038:	01540154 01540154 01540154 01540154     T.T.T.T.T.T.T.T.
 800c048:	01540154 01540154 01540154 01540154     T.T.T.T.T.T.T.T.
 800c058:	01540154 01550155 01550155 01550155     T.T.U.U.U.U.U.U.
 800c068:	01550155 01550155 01550155 01550155     U.U.U.U.U.U.U.U.
 800c078:	01550155 01550155 01550155 01550155     U.U.U.U.U.U.U.U.
 800c088:	01550155 01550155 01550155 01550155     U.U.U.U.U.U.U.U.
 800c098:	01550155 01550155 01550155 01550155     U.U.U.U.U.U.U.U.
 800c0a8:	01550155 01550155 01550155 01550155     U.U.U.U.U.U.U.U.
 800c0b8:	01550155 01550155 01550155 01550155     U.U.U.U.U.U.U.U.
 800c0c8:	01560156 01560156 01560156 01560156     V.V.V.V.V.V.V.V.
 800c0d8:	01560156 01560156 01560156 01560156     V.V.V.V.V.V.V.V.
 800c0e8:	01560156 01560156 01560156 01560156     V.V.V.V.V.V.V.V.
 800c0f8:	01560156 01560156 01560156 01560156     V.V.V.V.V.V.V.V.
 800c108:	01560156 01560156 01560156 01560156     V.V.V.V.V.V.V.V.
 800c118:	01560156 01560156 01560156 01560156     V.V.V.V.V.V.V.V.
 800c128:	01560156 01560156 01570156 01570157     V.V.V.V.V.W.W.W.
 800c138:	01570157 01570157 01570157 01570157     W.W.W.W.W.W.W.W.
 800c148:	01570157 01570157 01570157 01570157     W.W.W.W.W.W.W.W.
 800c158:	01570157 01570157 01570157 01570157     W.W.W.W.W.W.W.W.
 800c168:	01570157 01570157 01570157 01570157     W.W.W.W.W.W.W.W.
 800c178:	01570157 01570157 01570157 01570157     W.W.W.W.W.W.W.W.
 800c188:	01570157 01570157 01570157 01570157     W.W.W.W.W.W.W.W.
 800c198:	01570157 01580157 01580158 01580158     W.W.W.X.X.X.X.X.
 800c1a8:	01580158 01580158 01580158 01580158     X.X.X.X.X.X.X.X.
 800c1b8:	01580158 01580158 01580158 01580158     X.X.X.X.X.X.X.X.
 800c1c8:	01580158 01580158 01580158 01580158     X.X.X.X.X.X.X.X.
 800c1d8:	01580158 01580158 01580158 01580158     X.X.X.X.X.X.X.X.
 800c1e8:	01580158 01580158 01580158 01580158     X.X.X.X.X.X.X.X.
 800c1f8:	01580158 01580158 01580158 01580158     X.X.X.X.X.X.X.X.
 800c208:	01590158 01590159 01590159 01590159     X.Y.Y.Y.Y.Y.Y.Y.
 800c218:	01590159 01590159 01590159 01590159     Y.Y.Y.Y.Y.Y.Y.Y.
 800c228:	01590159 01590159 01590159 01590159     Y.Y.Y.Y.Y.Y.Y.Y.
 800c238:	01590159 01590159 01590159 01590159     Y.Y.Y.Y.Y.Y.Y.Y.
 800c248:	01590159 01590159 01590159 01590159     Y.Y.Y.Y.Y.Y.Y.Y.
 800c258:	01590159 01590159 01590159 01590159     Y.Y.Y.Y.Y.Y.Y.Y.
 800c268:	01590159 01590159 01590159 015a0159     Y.Y.Y.Y.Y.Y.Y.Z.
 800c278:	015a015a 015a015a 015a015a 015a015a     Z.Z.Z.Z.Z.Z.Z.Z.
 800c288:	015a015a 015a015a 015a015a 015a015a     Z.Z.Z.Z.Z.Z.Z.Z.
 800c298:	015a015a 015a015a 015a015a 015a015a     Z.Z.Z.Z.Z.Z.Z.Z.
 800c2a8:	015a015a 015a015a 015a015a 015a015a     Z.Z.Z.Z.Z.Z.Z.Z.
 800c2b8:	015a015a 015a015a 015a015a 015a015a     Z.Z.Z.Z.Z.Z.Z.Z.
 800c2c8:	015a015a 015a015a 015a015a 015a015a     Z.Z.Z.Z.Z.Z.Z.Z.
 800c2d8:	015a015a 015a015a 015b015b 015b015b     Z.Z.Z.Z.[.[.[.[.
 800c2e8:	015b015b 015b015b 015b015b 015b015b     [.[.[.[.[.[.[.[.
 800c2f8:	015b015b 015b015b 015b015b 015b015b     [.[.[.[.[.[.[.[.
 800c308:	015b015b 015b015b 015b015b 015b015b     [.[.[.[.[.[.[.[.
 800c318:	015b015b 015b015b 015b015b 015b015b     [.[.[.[.[.[.[.[.
 800c328:	015b015b 015b015b 015b015b 015b015b     [.[.[.[.[.[.[.[.
 800c338:	015b015b 015b015b 015b015b 015b015b     [.[.[.[.[.[.[.[.
 800c348:	015b015b 015c015c 015c015c 015c015c     [.[.\.\.\.\.\.\.
 800c358:	015c015c 015c015c 015c015c 015c015c     \.\.\.\.\.\.\.\.
 800c368:	015c015c 015c015c 015c015c 015c015c     \.\.\.\.\.\.\.\.
 800c378:	015c015c 015c015c 015c015c 015c015c     \.\.\.\.\.\.\.\.
 800c388:	015c015c 015c015c 015c015c 015c015c     \.\.\.\.\.\.\.\.
 800c398:	015c015c 015c015c 015c015c 015c015c     \.\.\.\.\.\.\.\.
 800c3a8:	015c015c 015c015c 015c015c 015c015c     \.\.\.\.\.\.\.\.
 800c3b8:	015d015d 015d015d 015d015d 015d015d     ].].].].].].].].
 800c3c8:	015d015d 015d015d 015d015d 015d015d     ].].].].].].].].
 800c3d8:	015d015d 015d015d 015d015d 015d015d     ].].].].].].].].
 800c3e8:	015d015d 015d015d 015d015d 015d015d     ].].].].].].].].
 800c3f8:	015d015d 015d015d 015d015d 015d015d     ].].].].].].].].
 800c408:	015d015d 015d015d 015d015d 015d015d     ].].].].].].].].
 800c418:	015d015d 015d015d 015d015d 015e015e     ].].].].].].^.^.
 800c428:	015e015e 015e015e 015e015e 015e015e     ^.^.^.^.^.^.^.^.
 800c438:	015e015e 015e015e 015e015e 015e015e     ^.^.^.^.^.^.^.^.
 800c448:	015e015e 015e015e 015e015e 015e015e     ^.^.^.^.^.^.^.^.
 800c458:	015e015e 015e015e 015e015e 015e015e     ^.^.^.^.^.^.^.^.
 800c468:	015e015e 015e015e 015e015e 015e015e     ^.^.^.^.^.^.^.^.
 800c478:	015e015e 015e015e 015e015e 015e015e     ^.^.^.^.^.^.^.^.
 800c488:	015e015e 015e015e 015f015f 015f015f     ^.^.^.^._._._._.
 800c498:	015f015f 015f015f 015f015f 015f015f     _._._._._._._._.
 800c4a8:	015f015f 015f015f 015f015f 015f015f     _._._._._._._._.
 800c4b8:	015f015f 015f015f 015f015f 015f015f     _._._._._._._._.
 800c4c8:	015f015f 015f015f 015f015f 015f015f     _._._._._._._._.
 800c4d8:	015f015f 015f015f 015f015f 015f015f     _._._._._._._._.
 800c4e8:	015f015f 015f015f 015f015f 015f015f     _._._._._._._._.
 800c4f8:	015f015f 01600160 01600160 01600160     _._.`.`.`.`.`.`.
 800c508:	01600160 01600160 01600160 01600160     `.`.`.`.`.`.`.`.
 800c518:	01600160 01600160 01600160 01600160     `.`.`.`.`.`.`.`.
 800c528:	01600160 01600160 01600160 01600160     `.`.`.`.`.`.`.`.
 800c538:	01600160 01600160 01600160 01600160     `.`.`.`.`.`.`.`.
 800c548:	01600160 01600160 01600160 01600160     `.`.`.`.`.`.`.`.
 800c558:	01600160 01600160 01600160 01600160     `.`.`.`.`.`.`.`.
 800c568:	01610161 01610161 01610161 01610161     a.a.a.a.a.a.a.a.
 800c578:	01610161 01610161 01610161 01610161     a.a.a.a.a.a.a.a.
 800c588:	01610161 01610161 01610161 01610161     a.a.a.a.a.a.a.a.
 800c598:	01610161 01610161 01610161 01610161     a.a.a.a.a.a.a.a.
 800c5a8:	01610161 01610161 01610161 01610161     a.a.a.a.a.a.a.a.
 800c5b8:	01610161 01610161 01610161 01610161     a.a.a.a.a.a.a.a.
 800c5c8:	01610161 01610161 01610161 01620162     a.a.a.a.a.a.b.b.
 800c5d8:	01620162 01620162 01620162 01620162     b.b.b.b.b.b.b.b.
 800c5e8:	01620162 01620162 01620162 01620162     b.b.b.b.b.b.b.b.
 800c5f8:	01620162 01620162 01620162 01620162     b.b.b.b.b.b.b.b.
 800c608:	01620162 01620162 01620162 01620162     b.b.b.b.b.b.b.b.
 800c618:	01620162 01620162 01620162 01620162     b.b.b.b.b.b.b.b.
 800c628:	01620162 01620162 01620162 01620162     b.b.b.b.b.b.b.b.
 800c638:	01620162 01620162 01630163 01630163     b.b.b.b.c.c.c.c.
 800c648:	01630163 01630163 01630163 01630163     c.c.c.c.c.c.c.c.
 800c658:	01630163 01630163 01630163 01630163     c.c.c.c.c.c.c.c.
 800c668:	01630163 01630163 01630163 01630163     c.c.c.c.c.c.c.c.
 800c678:	01630163 01630163 01630163 01630163     c.c.c.c.c.c.c.c.
 800c688:	01630163 01630163 01630163 01630163     c.c.c.c.c.c.c.c.
 800c698:	01630163 01630163 01630163 01630163     c.c.c.c.c.c.c.c.
 800c6a8:	01630163 01640164 01640164 01640164     c.c.d.d.d.d.d.d.
 800c6b8:	01640164 01640164 01640164 01640164     d.d.d.d.d.d.d.d.
 800c6c8:	01640164 01640164 01640164 01640164     d.d.d.d.d.d.d.d.
 800c6d8:	01640164 01640164 01640164 01640164     d.d.d.d.d.d.d.d.
 800c6e8:	01640164 01640164 01640164 01640164     d.d.d.d.d.d.d.d.
 800c6f8:	01640164 01640164 01640164 01640164     d.d.d.d.d.d.d.d.
 800c708:	01640164 01640164 01640164 01640164     d.d.d.d.d.d.d.d.
 800c718:	01650165 01650165 01650165 01650165     e.e.e.e.e.e.e.e.
 800c728:	01650165 01650165 01650165 01650165     e.e.e.e.e.e.e.e.
 800c738:	01650165 01650165 01650165 01650165     e.e.e.e.e.e.e.e.
 800c748:	01650165 01650165 01650165 01650165     e.e.e.e.e.e.e.e.
 800c758:	01650165 01650165 01650165 01650165     e.e.e.e.e.e.e.e.
 800c768:	01650165 01650165 01650165 01650165     e.e.e.e.e.e.e.e.
 800c778:	01650165 01650165 01650165 01660166     e.e.e.e.e.e.f.f.
 800c788:	01660166 01660166 01660166 01660166     f.f.f.f.f.f.f.f.
 800c798:	01660166 01660166 01660166 01660166     f.f.f.f.f.f.f.f.
 800c7a8:	01660166 01660166 01660166 01660166     f.f.f.f.f.f.f.f.
 800c7b8:	01660166 01660166 01660166 01660166     f.f.f.f.f.f.f.f.
 800c7c8:	01660166 01660166 01660166 01660166     f.f.f.f.f.f.f.f.
 800c7d8:	01660166 01660166 01660166 01660166     f.f.f.f.f.f.f.f.
 800c7e8:	01660166 01660166 01670167 01670167     f.f.f.f.g.g.g.g.
 800c7f8:	01670167 01670167 01670167 01670167     g.g.g.g.g.g.g.g.
 800c808:	01670167 01670167 01670167 01670167     g.g.g.g.g.g.g.g.
 800c818:	01670167 01670167 01670167 01670167     g.g.g.g.g.g.g.g.
 800c828:	01670167 01670167 01670167 01670167     g.g.g.g.g.g.g.g.
 800c838:	01670167 01670167 01670167 01670167     g.g.g.g.g.g.g.g.
 800c848:	01670167 01670167 01670167 01670167     g.g.g.g.g.g.g.g.
 800c858:	01670167 01680167 01680168 01680168     g.g.g.h.h.h.h.h.
 800c868:	01680168 01680168 01680168 01680168     h.h.h.h.h.h.h.h.
 800c878:	01680168 01680168 01680168 01680168     h.h.h.h.h.h.h.h.
 800c888:	01680168 01680168 01680168 01680168     h.h.h.h.h.h.h.h.
 800c898:	01680168 01680168 01680168 01680168     h.h.h.h.h.h.h.h.
 800c8a8:	01680168 01680168 01680168 01680168     h.h.h.h.h.h.h.h.
 800c8b8:	01680168 01680168 01680168 01680168     h.h.h.h.h.h.h.h.
 800c8c8:	01690168 01690169 01690169 01690169     h.i.i.i.i.i.i.i.
 800c8d8:	01690169 01690169 01690169 01690169     i.i.i.i.i.i.i.i.
 800c8e8:	01690169 01690169 01690169 01690169     i.i.i.i.i.i.i.i.
 800c8f8:	01690169 01690169 01690169 01690169     i.i.i.i.i.i.i.i.
 800c908:	01690169 01690169 01690169 01690169     i.i.i.i.i.i.i.i.
 800c918:	01690169 01690169 01690169 01690169     i.i.i.i.i.i.i.i.
 800c928:	01690169 01690169 01690169 016a0169     i.i.i.i.i.i.i.j.
 800c938:	016a016a 016a016a 016a016a 016a016a     j.j.j.j.j.j.j.j.
 800c948:	016a016a 016a016a 016a016a 016a016a     j.j.j.j.j.j.j.j.
 800c958:	016a016a 016a016a 016a016a 016a016a     j.j.j.j.j.j.j.j.
 800c968:	016a016a 016a016a 016a016a 016a016a     j.j.j.j.j.j.j.j.
 800c978:	016a016a 016a016a 016a016a 016a016a     j.j.j.j.j.j.j.j.
 800c988:	016a016a 016a016a 016a016a 016a016a     j.j.j.j.j.j.j.j.
 800c998:	016a016a 016a016a 016a016a 016b016b     j.j.j.j.j.j.k.k.
 800c9a8:	016b016b 016b016b 016b016b 016b016b     k.k.k.k.k.k.k.k.
 800c9b8:	016b016b 016b016b 016b016b 016b016b     k.k.k.k.k.k.k.k.
 800c9c8:	016b016b 016b016b 016b016b 016b016b     k.k.k.k.k.k.k.k.
 800c9d8:	016b016b 016b016b 016b016b 016b016b     k.k.k.k.k.k.k.k.
 800c9e8:	016b016b 016b016b 016b016b 016b016b     k.k.k.k.k.k.k.k.
 800c9f8:	016b016b 016b016b 016b016b 016b016b     k.k.k.k.k.k.k.k.
 800ca08:	016b016b 016b016b 016c016c 016c016c     k.k.k.k.l.l.l.l.
 800ca18:	016c016c 016c016c 016c016c 016c016c     l.l.l.l.l.l.l.l.
 800ca28:	016c016c 016c016c 016c016c 016c016c     l.l.l.l.l.l.l.l.
 800ca38:	016c016c 016c016c 016c016c 016c016c     l.l.l.l.l.l.l.l.
 800ca48:	016c016c 016c016c 016c016c 016c016c     l.l.l.l.l.l.l.l.
 800ca58:	016c016c 016c016c 016c016c 016c016c     l.l.l.l.l.l.l.l.
 800ca68:	016c016c 016c016c 016c016c 016c016c     l.l.l.l.l.l.l.l.
 800ca78:	016c016c 016d016d 016d016d 016d016d     l.l.m.m.m.m.m.m.
 800ca88:	016d016d 016d016d 016d016d 016d016d     m.m.m.m.m.m.m.m.
 800ca98:	016d016d 016d016d 016d016d 016d016d     m.m.m.m.m.m.m.m.
 800caa8:	016d016d 016d016d 016d016d 016d016d     m.m.m.m.m.m.m.m.
 800cab8:	016d016d 016d016d 016d016d 016d016d     m.m.m.m.m.m.m.m.
 800cac8:	016d016d 016d016d 016d016d 016d016d     m.m.m.m.m.m.m.m.
 800cad8:	016d016d 016d016d 016d016d 016d016d     m.m.m.m.m.m.m.m.
 800cae8:	016e016d 016e016e 016e016e 016e016e     m.n.n.n.n.n.n.n.
 800caf8:	016e016e 016e016e 016e016e 016e016e     n.n.n.n.n.n.n.n.
 800cb08:	016e016e 016e016e 016e016e 016e016e     n.n.n.n.n.n.n.n.
 800cb18:	016e016e 016e016e 016e016e 016e016e     n.n.n.n.n.n.n.n.
 800cb28:	016e016e 016e016e 016e016e 016e016e     n.n.n.n.n.n.n.n.
 800cb38:	016e016e 016e016e 016e016e 016e016e     n.n.n.n.n.n.n.n.
 800cb48:	016e016e 016e016e 016e016e 016f016e     n.n.n.n.n.n.n.o.
 800cb58:	016f016f 016f016f 016f016f 016f016f     o.o.o.o.o.o.o.o.
 800cb68:	016f016f 016f016f 016f016f 016f016f     o.o.o.o.o.o.o.o.
 800cb78:	016f016f 016f016f 016f016f 016f016f     o.o.o.o.o.o.o.o.
 800cb88:	016f016f 016f016f 016f016f 016f016f     o.o.o.o.o.o.o.o.
 800cb98:	016f016f 016f016f 016f016f 016f016f     o.o.o.o.o.o.o.o.
 800cba8:	016f016f 016f016f 016f016f 016f016f     o.o.o.o.o.o.o.o.
 800cbb8:	016f016f 016f016f 016f016f 01700170     o.o.o.o.o.o.p.p.
 800cbc8:	01700170 01700170 01700170 01700170     p.p.p.p.p.p.p.p.
 800cbd8:	01700170 01700170 01700170 01700170     p.p.p.p.p.p.p.p.
 800cbe8:	01700170 01700170 01700170 01700170     p.p.p.p.p.p.p.p.
 800cbf8:	01700170 01700170 01700170 01700170     p.p.p.p.p.p.p.p.
 800cc08:	01700170 01700170 01700170 01700170     p.p.p.p.p.p.p.p.
 800cc18:	01700170 01700170 01700170 01700170     p.p.p.p.p.p.p.p.
 800cc28:	01700170 01700170 01710171 01710171     p.p.p.p.q.q.q.q.
 800cc38:	01710171 01710171 01710171 01710171     q.q.q.q.q.q.q.q.
 800cc48:	01710171 01710171 01710171 01710171     q.q.q.q.q.q.q.q.
 800cc58:	01710171 01710171 01710171 01710171     q.q.q.q.q.q.q.q.
 800cc68:	01710171 01710171 01710171 01710171     q.q.q.q.q.q.q.q.
 800cc78:	01710171 01710171 01710171 01710171     q.q.q.q.q.q.q.q.
 800cc88:	01710171 01710171 01710171 01710171     q.q.q.q.q.q.q.q.
 800cc98:	01710171 01720171 01720172 01720172     q.q.q.r.r.r.r.r.
 800cca8:	01720172 01720172 01720172 01720172     r.r.r.r.r.r.r.r.
 800ccb8:	01720172 01720172 01720172 01720172     r.r.r.r.r.r.r.r.
 800ccc8:	01720172 01720172 01720172 01720172     r.r.r.r.r.r.r.r.
 800ccd8:	01720172 01720172 01720172 01720172     r.r.r.r.r.r.r.r.
 800cce8:	01720172 01720172 01720172 01720172     r.r.r.r.r.r.r.r.
 800ccf8:	01720172 01720172 01720172 01720172     r.r.r.r.r.r.r.r.
 800cd08:	01720172 01730173 01730173 01730173     r.r.s.s.s.s.s.s.
 800cd18:	01730173 01730173 01730173 01730173     s.s.s.s.s.s.s.s.
 800cd28:	01730173 01730173 01730173 01730173     s.s.s.s.s.s.s.s.
 800cd38:	01730173 01730173 01730173 01730173     s.s.s.s.s.s.s.s.
 800cd48:	01730173 01730173 01730173 01730173     s.s.s.s.s.s.s.s.
 800cd58:	01730173 01730173 01730173 01730173     s.s.s.s.s.s.s.s.
 800cd68:	01730173 01730173 01730173 01730173     s.s.s.s.s.s.s.s.
 800cd78:	01740174 01740174 01740174 01740174     t.t.t.t.t.t.t.t.
 800cd88:	01740174 01740174 01740174 01740174     t.t.t.t.t.t.t.t.
 800cd98:	01740174 01740174 01740174 01740174     t.t.t.t.t.t.t.t.
 800cda8:	01740174 01740174 01740174 01740174     t.t.t.t.t.t.t.t.
 800cdb8:	01740174 01740174 01740174 01740174     t.t.t.t.t.t.t.t.
 800cdc8:	01740174 01740174 01740174 01740174     t.t.t.t.t.t.t.t.
 800cdd8:	01740174 01740174 01740174 01750174     t.t.t.t.t.t.t.u.
 800cde8:	01750175 01750175 01750175 01750175     u.u.u.u.u.u.u.u.
 800cdf8:	01750175 01750175 01750175 01750175     u.u.u.u.u.u.u.u.
 800ce08:	01750175 01750175 01750175 01750175     u.u.u.u.u.u.u.u.
 800ce18:	01750175 01750175 01750175 01750175     u.u.u.u.u.u.u.u.
 800ce28:	01750175 01750175 01750175 01750175     u.u.u.u.u.u.u.u.
 800ce38:	01750175 01750175 01750175 01750175     u.u.u.u.u.u.u.u.
 800ce48:	01750175 01750175 01750175 01760176     u.u.u.u.u.u.v.v.
 800ce58:	01760176 01760176 01760176 01760176     v.v.v.v.v.v.v.v.
 800ce68:	01760176 01760176 01760176 01760176     v.v.v.v.v.v.v.v.
 800ce78:	01760176 01760176 01760176 01760176     v.v.v.v.v.v.v.v.
 800ce88:	01760176 01760176 01760176 01760176     v.v.v.v.v.v.v.v.
 800ce98:	01760176 01760176 01760176 01760176     v.v.v.v.v.v.v.v.
 800cea8:	01760176 01760176 01760176 01760176     v.v.v.v.v.v.v.v.
 800ceb8:	01760176 01760176 01770176 01770177     v.v.v.v.v.w.w.w.
 800cec8:	01770177 01770177 01770177 01770177     w.w.w.w.w.w.w.w.
 800ced8:	01770177 01770177 01770177 01770177     w.w.w.w.w.w.w.w.
 800cee8:	01770177 01770177 01770177 01770177     w.w.w.w.w.w.w.w.
 800cef8:	01770177 01770177 01770177 01770177     w.w.w.w.w.w.w.w.
 800cf08:	01770177 01770177 01770177 01770177     w.w.w.w.w.w.w.w.
 800cf18:	01770177 01770177 01770177 01770177     w.w.w.w.w.w.w.w.
 800cf28:	01770177 01770177 01780178 01780178     w.w.w.w.x.x.x.x.
 800cf38:	01780178 01780178 01780178 01780178     x.x.x.x.x.x.x.x.
 800cf48:	01780178 01780178 01780178 01780178     x.x.x.x.x.x.x.x.
 800cf58:	01780178 01780178 01780178 01780178     x.x.x.x.x.x.x.x.
 800cf68:	01780178 01780178 01780178 01780178     x.x.x.x.x.x.x.x.
 800cf78:	01780178 01780178 01780178 01780178     x.x.x.x.x.x.x.x.
 800cf88:	01780178 01780178 01780178 01780178     x.x.x.x.x.x.x.x.
 800cf98:	01780178 01790178 01790179 01790179     x.x.x.y.y.y.y.y.
 800cfa8:	01790179 01790179 01790179 01790179     y.y.y.y.y.y.y.y.
 800cfb8:	01790179 01790179 01790179 01790179     y.y.y.y.y.y.y.y.
 800cfc8:	01790179 01790179 01790179 01790179     y.y.y.y.y.y.y.y.
 800cfd8:	01790179 01790179 01790179 01790179     y.y.y.y.y.y.y.y.
 800cfe8:	01790179 01790179 01790179 01790179     y.y.y.y.y.y.y.y.
 800cff8:	01790179 01790179 01790179 01790179     y.y.y.y.y.y.y.y.
 800d008:	01790179 017a017a 017a017a 017a017a     y.y.z.z.z.z.z.z.
 800d018:	017a017a 017a017a 017a017a 017a017a     z.z.z.z.z.z.z.z.
 800d028:	017a017a 017a017a 017a017a 017a017a     z.z.z.z.z.z.z.z.
 800d038:	017a017a 017a017a 017a017a 017a017a     z.z.z.z.z.z.z.z.
 800d048:	017a017a 017a017a 017a017a 017a017a     z.z.z.z.z.z.z.z.
 800d058:	017a017a 017a017a 017a017a 017a017a     z.z.z.z.z.z.z.z.
 800d068:	017a017a 017a017a 017a017a 017a017a     z.z.z.z.z.z.z.z.
 800d078:	017b017a 017b017b 017b017b 017b017b     z.{.{.{.{.{.{.{.
 800d088:	017b017b 017b017b 017b017b 017b017b     {.{.{.{.{.{.{.{.
 800d098:	017b017b 017b017b 017b017b 017b017b     {.{.{.{.{.{.{.{.
 800d0a8:	017b017b 017b017b 017b017b 017b017b     {.{.{.{.{.{.{.{.
 800d0b8:	017b017b 017b017b 017b017b 017b017b     {.{.{.{.{.{.{.{.
 800d0c8:	017b017b 017b017b 017b017b 017b017b     {.{.{.{.{.{.{.{.
 800d0d8:	017b017b 017b017b 017b017b 017b017b     {.{.{.{.{.{.{.{.
 800d0e8:	017c017c 017c017c 017c017c 017c017c     |.|.|.|.|.|.|.|.
 800d0f8:	017c017c 017c017c 017c017c 017c017c     |.|.|.|.|.|.|.|.
 800d108:	017c017c 017c017c 017c017c 017c017c     |.|.|.|.|.|.|.|.
 800d118:	017c017c 017c017c 017c017c 017c017c     |.|.|.|.|.|.|.|.
 800d128:	017c017c 017c017c 017c017c 017c017c     |.|.|.|.|.|.|.|.
 800d138:	017c017c 017c017c 017c017c 017c017c     |.|.|.|.|.|.|.|.
 800d148:	017c017c 017c017c 017c017c 017d017c     |.|.|.|.|.|.|.}.
 800d158:	017d017d 017d017d 017d017d 017d017d     }.}.}.}.}.}.}.}.
 800d168:	017d017d 017d017d 017d017d 017d017d     }.}.}.}.}.}.}.}.
 800d178:	017d017d 017d017d 017d017d 017d017d     }.}.}.}.}.}.}.}.
 800d188:	017d017d 017d017d 017d017d 017d017d     }.}.}.}.}.}.}.}.
 800d198:	017d017d 017d017d 017d017d 017d017d     }.}.}.}.}.}.}.}.
 800d1a8:	017d017d 017d017d 017d017d 017d017d     }.}.}.}.}.}.}.}.
 800d1b8:	017d017d 017d017d 017d017d 017e017e     }.}.}.}.}.}.~.~.
 800d1c8:	017e017e 017e017e 017e017e 017e017e     ~.~.~.~.~.~.~.~.
 800d1d8:	017e017e 017e017e 017e017e 017e017e     ~.~.~.~.~.~.~.~.
 800d1e8:	017e017e 017e017e 017e017e 017e017e     ~.~.~.~.~.~.~.~.
 800d1f8:	017e017e 017e017e 017e017e 017e017e     ~.~.~.~.~.~.~.~.
 800d208:	017e017e 017e017e 017e017e 017e017e     ~.~.~.~.~.~.~.~.
 800d218:	017e017e 017e017e 017e017e 017e017e     ~.~.~.~.~.~.~.~.
 800d228:	017e017e 017e017e 017e017e 017f017f     ~.~.~.~.~.~.....
 800d238:	017f017f 017f017f 017f017f 017f017f     ................
 800d248:	017f017f 017f017f 017f017f 017f017f     ................
 800d258:	017f017f 017f017f 017f017f 017f017f     ................
 800d268:	017f017f 017f017f 017f017f 017f017f     ................
 800d278:	017f017f 017f017f 017f017f 017f017f     ................
 800d288:	017f017f 017f017f 017f017f 017f017f     ................
 800d298:	017f017f 017f017f 0180017f 01800180     ................
 800d2a8:	01800180 01800180 01800180 01800180     ................
 800d2b8:	01800180 01800180 01800180 01800180     ................
 800d2c8:	01800180 01800180 01800180 01800180     ................
 800d2d8:	01800180 01800180 01800180 01800180     ................
 800d2e8:	01800180 01800180 01800180 01800180     ................
 800d2f8:	01800180 01800180 01800180 01800180     ................
 800d308:	01800180 01800180 01810181 01810181     ................
 800d318:	01810181 01810181 01810181 01810181     ................
 800d328:	01810181 01810181 01810181 01810181     ................
 800d338:	01810181 01810181 01810181 01810181     ................
 800d348:	01810181 01810181 01810181 01810181     ................
 800d358:	01810181 01810181 01810181 01810181     ................
 800d368:	01810181 01810181 01810181 01810181     ................
 800d378:	01810181 01810181 01820182 01820182     ................
 800d388:	01820182 01820182 01820182 01820182     ................
 800d398:	01820182 01820182 01820182 01820182     ................
 800d3a8:	01820182 01820182 01820182 01820182     ................
 800d3b8:	01820182 01820182 01820182 01820182     ................
 800d3c8:	01820182 01820182 01820182 01820182     ................
 800d3d8:	01820182 01820182 01820182 01820182     ................
 800d3e8:	01820182 01830182 01830183 01830183     ................
 800d3f8:	01830183 01830183 01830183 01830183     ................
 800d408:	01830183 01830183 01830183 01830183     ................
 800d418:	01830183 01830183 01830183 01830183     ................
 800d428:	01830183 01830183 01830183 01830183     ................
 800d438:	01830183 01830183 01830183 01830183     ................
 800d448:	01830183 01830183 01830183 01830183     ................
 800d458:	01830183 01840183 01840184 01840184     ................
 800d468:	01840184 01840184 01840184 01840184     ................
 800d478:	01840184 01840184 01840184 01840184     ................
 800d488:	01840184 01840184 01840184 01840184     ................
 800d498:	01840184 01840184 01840184 01840184     ................
 800d4a8:	01840184 01840184 01840184 01840184     ................
 800d4b8:	01840184 01840184 01840184 01840184     ................
 800d4c8:	01840184 01850184 01850185 01850185     ................
 800d4d8:	01850185 01850185 01850185 01850185     ................
 800d4e8:	01850185 01850185 01850185 01850185     ................
 800d4f8:	01850185 01850185 01850185 01850185     ................
 800d508:	01850185 01850185 01850185 01850185     ................
 800d518:	01850185 01850185 01850185 01850185     ................
 800d528:	01850185 01850185 01850185 01850185     ................
 800d538:	01850185 01860186 01860186 01860186     ................
 800d548:	01860186 01860186 01860186 01860186     ................
 800d558:	01860186 01860186 01860186 01860186     ................
 800d568:	01860186 01860186 01860186 01860186     ................
 800d578:	01860186 01860186 01860186 01860186     ................
 800d588:	01860186 01860186 01860186 01860186     ................
 800d598:	01860186 01860186 01860186 01860186     ................
 800d5a8:	01860186 01870187 01870187 01870187     ................
 800d5b8:	01870187 01870187 01870187 01870187     ................
 800d5c8:	01870187 01870187 01870187 01870187     ................
 800d5d8:	01870187 01870187 01870187 01870187     ................
 800d5e8:	01870187 01870187 01870187 01870187     ................
 800d5f8:	01870187 01870187 01870187 01870187     ................
 800d608:	01870187 01870187 01870187 01870187     ................
 800d618:	01870187 01880188 01880188 01880188     ................
 800d628:	01880188 01880188 01880188 01880188     ................
 800d638:	01880188 01880188 01880188 01880188     ................
 800d648:	01880188 01880188 01880188 01880188     ................
 800d658:	01880188 01880188 01880188 01880188     ................
 800d668:	01880188 01880188 01880188 01880188     ................
 800d678:	01880188 01880188 01880188 01880188     ................
 800d688:	01880188 01890189 01890189 01890189     ................
 800d698:	01890189 01890189 01890189 01890189     ................
 800d6a8:	01890189 01890189 01890189 01890189     ................
 800d6b8:	01890189 01890189 01890189 01890189     ................
 800d6c8:	01890189 01890189 01890189 01890189     ................
 800d6d8:	01890189 01890189 01890189 01890189     ................
 800d6e8:	01890189 01890189 01890189 01890189     ................
 800d6f8:	01890189 018a018a 018a018a 018a018a     ................
 800d708:	018a018a 018a018a 018a018a 018a018a     ................
 800d718:	018a018a 018a018a 018a018a 018a018a     ................
 800d728:	018a018a 018a018a 018a018a 018a018a     ................
 800d738:	018a018a 018a018a 018a018a 018a018a     ................
 800d748:	018a018a 018a018a 018a018a 018a018a     ................
 800d758:	018a018a 018a018a 018a018a 018a018a     ................
 800d768:	018a018a 018b018b 018b018b 018b018b     ................
 800d778:	018b018b 018b018b 018b018b 018b018b     ................
 800d788:	018b018b 018b018b 018b018b 018b018b     ................
 800d798:	018b018b 018b018b 018b018b 018b018b     ................
 800d7a8:	018b018b 018b018b 018b018b 018b018b     ................
 800d7b8:	018b018b 018b018b 018b018b 018b018b     ................
 800d7c8:	018b018b 018b018b 018b018b 018b018b     ................
 800d7d8:	018b018b 018c018c 018c018c 018c018c     ................
 800d7e8:	018c018c 018c018c 018c018c 018c018c     ................
 800d7f8:	018c018c 018c018c 018c018c 018c018c     ................
 800d808:	018c018c 018c018c 018c018c 018c018c     ................
 800d818:	018c018c 018c018c 018c018c 018c018c     ................
 800d828:	018c018c 018c018c 018c018c 018c018c     ................
 800d838:	018c018c 018c018c 018c018c 018c018c     ................
 800d848:	018c018c 018d018d 018d018d 018d018d     ................
 800d858:	018d018d 018d018d 018d018d 018d018d     ................
 800d868:	018d018d 018d018d 018d018d 018d018d     ................
 800d878:	018d018d 018d018d 018d018d 018d018d     ................
 800d888:	018d018d 018d018d 018d018d 018d018d     ................
 800d898:	018d018d 018d018d 018d018d 018d018d     ................
 800d8a8:	018d018d 018d018d 018d018d 018d018d     ................
 800d8b8:	018d018d 018e018e 018e018e 018e018e     ................
 800d8c8:	018e018e 018e018e 018e018e 018e018e     ................
 800d8d8:	018e018e 018e018e 018e018e 018e018e     ................
 800d8e8:	018e018e 018e018e 018e018e 018e018e     ................
 800d8f8:	018e018e 018e018e 018e018e 018e018e     ................
 800d908:	018e018e 018e018e 018e018e 018e018e     ................
 800d918:	018e018e 018e018e 018e018e 018e018e     ................
 800d928:	018e018e 018f018f 018f018f 018f018f     ................
 800d938:	018f018f 018f018f 018f018f 018f018f     ................
 800d948:	018f018f 018f018f 018f018f 018f018f     ................
 800d958:	018f018f 018f018f 018f018f 018f018f     ................
 800d968:	018f018f 018f018f 018f018f 018f018f     ................
 800d978:	018f018f 018f018f 018f018f 018f018f     ................
 800d988:	018f018f 018f018f 018f018f 018f018f     ................
 800d998:	018f018f 0190018f 01900190 01900190     ................
 800d9a8:	01900190 01900190 01900190 01900190     ................
 800d9b8:	01900190 01900190 01900190 01900190     ................
 800d9c8:	01900190 01900190 01900190 01900190     ................
 800d9d8:	01900190 01900190 01900190 01900190     ................
 800d9e8:	01900190 01900190 01900190 01900190     ................
 800d9f8:	01900190 01900190 01900190 01900190     ................
 800da08:	01900190 01910190 01910191 01910191     ................
 800da18:	01910191 01910191 01910191 01910191     ................
 800da28:	01910191 01910191 01910191 01910191     ................
 800da38:	01910191 01910191 01910191 01910191     ................
 800da48:	01910191 01910191 01910191 01910191     ................
 800da58:	01910191 01910191 01910191 01910191     ................
 800da68:	01910191 01910191 01910191 01910191     ................
 800da78:	01910191 01920191 01920192 01920192     ................
 800da88:	01920192 01920192 01920192 01920192     ................
 800da98:	01920192 01920192 01920192 01920192     ................
 800daa8:	01920192 01920192 01920192 01920192     ................
 800dab8:	01920192 01920192 01920192 01920192     ................
 800dac8:	01920192 01920192 01920192 01920192     ................
 800dad8:	01920192 01920192 01920192 01920192     ................
 800dae8:	01920192 01920192 01930193 01930193     ................
 800daf8:	01930193 01930193 01930193 01930193     ................
 800db08:	01930193 01930193 01930193 01930193     ................
 800db18:	01930193 01930193 01930193 01930193     ................
 800db28:	01930193 01930193 01930193 01930193     ................
 800db38:	01930193 01930193 01930193 01930193     ................
 800db48:	01930193 01930193 01930193 01930193     ................
 800db58:	01930193 01930193 01940193 01940194     ................
 800db68:	01940194 01940194 01940194 01940194     ................
 800db78:	01940194 01940194 01940194 01940194     ................
 800db88:	01940194 01940194 01940194 01940194     ................
 800db98:	01940194 01940194 01940194 01940194     ................
 800dba8:	01940194 01940194 01940194 01940194     ................
 800dbb8:	01940194 01940194 01940194 01940194     ................
 800dbc8:	01940194 01940194 01950194 01950195     ................
 800dbd8:	01950195 01950195 01950195 01950195     ................
 800dbe8:	01950195 01950195 01950195 01950195     ................
 800dbf8:	01950195 01950195 01950195 01950195     ................
 800dc08:	01950195 01950195 01950195 01950195     ................
 800dc18:	01950195 01950195 01950195 01950195     ................
 800dc28:	01950195 01950195 01950195 01950195     ................
 800dc38:	01950195 01950195 01950195 01960196     ................
 800dc48:	01960196 01960196 01960196 01960196     ................
 800dc58:	01960196 01960196 01960196 01960196     ................
 800dc68:	01960196 01960196 01960196 01960196     ................
 800dc78:	01960196 01960196 01960196 01960196     ................
 800dc88:	01960196 01960196 01960196 01960196     ................
 800dc98:	01960196 01960196 01960196 01960196     ................
 800dca8:	01960196 01960196 01960196 01970196     ................
 800dcb8:	01970197 01970197 01970197 01970197     ................
 800dcc8:	01970197 01970197 01970197 01970197     ................
 800dcd8:	01970197 01970197 01970197 01970197     ................
 800dce8:	01970197 01970197 01970197 01970197     ................
 800dcf8:	01970197 01970197 01970197 01970197     ................
 800dd08:	01970197 01970197 01970197 01970197     ................
 800dd18:	01970197 01970197 01970197 01970197     ................
 800dd28:	01980198 01980198 01980198 01980198     ................
 800dd38:	01980198 01980198 01980198 01980198     ................
 800dd48:	01980198 01980198 01980198 01980198     ................
 800dd58:	01980198 01980198 01980198 01980198     ................
 800dd68:	01980198 01980198 01980198 01980198     ................
 800dd78:	01980198 01980198 01980198 01980198     ................
 800dd88:	01980198 01980198 01980198 01980198     ................
 800dd98:	01990198 01990199 01990199 01990199     ................
 800dda8:	01990199 01990199 01990199 01990199     ................
 800ddb8:	01990199 01990199 01990199 01990199     ................
 800ddc8:	01990199 01990199 01990199 01990199     ................
 800ddd8:	01990199 01990199 01990199 01990199     ................
 800dde8:	01990199 01990199 01990199 01990199     ................
 800ddf8:	01990199 01990199 01990199 01990199     ................
 800de08:	01990199 019a019a 019a019a 019a019a     ................
 800de18:	019a019a 019a019a 019a019a 019a019a     ................
 800de28:	019a019a 019a019a 019a019a 019a019a     ................
 800de38:	019a019a 019a019a 019a019a 019a019a     ................
 800de48:	019a019a 019a019a 019a019a 019a019a     ................
 800de58:	019a019a 019a019a 019a019a 019a019a     ................
 800de68:	019a019a 019a019a 019a019a 019a019a     ................
 800de78:	019a019a 019b019a 019b019b 019b019b     ................
 800de88:	019b019b 019b019b 019b019b 019b019b     ................
 800de98:	019b019b 019b019b 019b019b 019b019b     ................
 800dea8:	019b019b 019b019b 019b019b 019b019b     ................
 800deb8:	019b019b 019b019b 019b019b 019b019b     ................
 800dec8:	019b019b 019b019b 019b019b 019b019b     ................
 800ded8:	019b019b 019b019b 019b019b 019b019b     ................
 800dee8:	019b019b 019b019b 019c019c 019c019c     ................
 800def8:	019c019c 019c019c 019c019c 019c019c     ................
 800df08:	019c019c 019c019c 019c019c 019c019c     ................
 800df18:	019c019c 019c019c 019c019c 019c019c     ................
 800df28:	019c019c 019c019c 019c019c 019c019c     ................
 800df38:	019c019c 019c019c 019c019c 019c019c     ................
 800df48:	019c019c 019c019c 019c019c 019c019c     ................
 800df58:	019c019c 019c019c 019c019c 019d019d     ................
 800df68:	019d019d 019d019d 019d019d 019d019d     ................
 800df78:	019d019d 019d019d 019d019d 019d019d     ................
 800df88:	019d019d 019d019d 019d019d 019d019d     ................
 800df98:	019d019d 019d019d 019d019d 019d019d     ................
 800dfa8:	019d019d 019d019d 019d019d 019d019d     ................
 800dfb8:	019d019d 019d019d 019d019d 019d019d     ................
 800dfc8:	019d019d 019d019d 019d019d 019e019d     ................
 800dfd8:	019e019e 019e019e 019e019e 019e019e     ................
 800dfe8:	019e019e 019e019e 019e019e 019e019e     ................
 800dff8:	019e019e 019e019e 019e019e 019e019e     ................
 800e008:	019e019e 019e019e 019e019e 019e019e     ................
 800e018:	019e019e 019e019e 019e019e 019e019e     ................
 800e028:	019e019e 019e019e 019e019e 019e019e     ................
 800e038:	019e019e 019e019e 019e019e 019e019e     ................
 800e048:	019f019e 019f019f 019f019f 019f019f     ................
 800e058:	019f019f 019f019f 019f019f 019f019f     ................
 800e068:	019f019f 019f019f 019f019f 019f019f     ................
 800e078:	019f019f 019f019f 019f019f 019f019f     ................
 800e088:	019f019f 019f019f 019f019f 019f019f     ................
 800e098:	019f019f 019f019f 019f019f 019f019f     ................
 800e0a8:	019f019f 019f019f 019f019f 019f019f     ................
 800e0b8:	019f019f 01a001a0 01a001a0 01a001a0     ................
 800e0c8:	01a001a0 01a001a0 01a001a0 01a001a0     ................
 800e0d8:	01a001a0 01a001a0 01a001a0 01a001a0     ................
 800e0e8:	01a001a0 01a001a0 01a001a0 01a001a0     ................
 800e0f8:	01a001a0 01a001a0 01a001a0 01a001a0     ................
 800e108:	01a001a0 01a001a0 01a001a0 01a001a0     ................
 800e118:	01a001a0 01a001a0 01a001a0 01a001a0     ................
 800e128:	01a001a0 01a001a0 01a101a1 01a101a1     ................
 800e138:	01a101a1 01a101a1 01a101a1 01a101a1     ................
 800e148:	01a101a1 01a101a1 01a101a1 01a101a1     ................
 800e158:	01a101a1 01a101a1 01a101a1 01a101a1     ................
 800e168:	01a101a1 01a101a1 01a101a1 01a101a1     ................
 800e178:	01a101a1 01a101a1 01a101a1 01a101a1     ................
 800e188:	01a101a1 01a101a1 01a101a1 01a101a1     ................
 800e198:	01a101a1 01a101a1 01a101a1 01a201a2     ................
 800e1a8:	01a201a2 01a201a2 01a201a2 01a201a2     ................
 800e1b8:	01a201a2 01a201a2 01a201a2 01a201a2     ................
 800e1c8:	01a201a2 01a201a2 01a201a2 01a201a2     ................
 800e1d8:	01a201a2 01a201a2 01a201a2 01a201a2     ................
 800e1e8:	01a201a2 01a201a2 01a201a2 01a201a2     ................
 800e1f8:	01a201a2 01a201a2 01a201a2 01a201a2     ................
 800e208:	01a201a2 01a201a2 01a201a2 01a201a2     ................
 800e218:	01a301a3 01a301a3 01a301a3 01a301a3     ................
 800e228:	01a301a3 01a301a3 01a301a3 01a301a3     ................
 800e238:	01a301a3 01a301a3 01a301a3 01a301a3     ................
 800e248:	01a301a3 01a301a3 01a301a3 01a301a3     ................
 800e258:	01a301a3 01a301a3 01a301a3 01a301a3     ................
 800e268:	01a301a3 01a301a3 01a301a3 01a301a3     ................
 800e278:	01a301a3 01a301a3 01a301a3 01a301a3     ................
 800e288:	01a301a3 01a401a4 01a401a4 01a401a4     ................
 800e298:	01a401a4 01a401a4 01a401a4 01a401a4     ................
 800e2a8:	01a401a4 01a401a4 01a401a4 01a401a4     ................
 800e2b8:	01a401a4 01a401a4 01a401a4 01a401a4     ................
 800e2c8:	01a401a4 01a401a4 01a401a4 01a401a4     ................
 800e2d8:	01a401a4 01a401a4 01a401a4 01a401a4     ................
 800e2e8:	01a401a4 01a401a4 01a401a4 01a401a4     ................
 800e2f8:	01a401a4 01a401a4 01a501a5 01a501a5     ................
 800e308:	01a501a5 01a501a5 01a501a5 01a501a5     ................
 800e318:	01a501a5 01a501a5 01a501a5 01a501a5     ................
 800e328:	01a501a5 01a501a5 01a501a5 01a501a5     ................
 800e338:	01a501a5 01a501a5 01a501a5 01a501a5     ................
 800e348:	01a501a5 01a501a5 01a501a5 01a501a5     ................
 800e358:	01a501a5 01a501a5 01a501a5 01a501a5     ................
 800e368:	01a501a5 01a501a5 01a501a5 01a601a6     ................
 800e378:	01a601a6 01a601a6 01a601a6 01a601a6     ................
 800e388:	01a601a6 01a601a6 01a601a6 01a601a6     ................
 800e398:	01a601a6 01a601a6 01a601a6 01a601a6     ................
 800e3a8:	01a601a6 01a601a6 01a601a6 01a601a6     ................
 800e3b8:	01a601a6 01a601a6 01a601a6 01a601a6     ................
 800e3c8:	01a601a6 01a601a6 01a601a6 01a601a6     ................
 800e3d8:	01a601a6 01a601a6 01a601a6 01a601a6     ................
 800e3e8:	01a701a7 01a701a7 01a701a7 01a701a7     ................
 800e3f8:	01a701a7 01a701a7 01a701a7 01a701a7     ................
 800e408:	01a701a7 01a701a7 01a701a7 01a701a7     ................
 800e418:	01a701a7 01a701a7 01a701a7 01a701a7     ................
 800e428:	01a701a7 01a701a7 01a701a7 01a701a7     ................
 800e438:	01a701a7 01a701a7 01a701a7 01a701a7     ................
 800e448:	01a701a7 01a701a7 01a701a7 01a701a7     ................
 800e458:	01a701a7 01a801a8 01a801a8 01a801a8     ................
 800e468:	01a801a8 01a801a8 01a801a8 01a801a8     ................
 800e478:	01a801a8 01a801a8 01a801a8 01a801a8     ................
 800e488:	01a801a8 01a801a8 01a801a8 01a801a8     ................
 800e498:	01a801a8 01a801a8 01a801a8 01a801a8     ................
 800e4a8:	01a801a8 01a801a8 01a801a8 01a801a8     ................
 800e4b8:	01a801a8 01a801a8 01a801a8 01a801a8     ................
 800e4c8:	01a801a8 01a801a8 01a901a8 01a901a9     ................
 800e4d8:	01a901a9 01a901a9 01a901a9 01a901a9     ................
 800e4e8:	01a901a9 01a901a9 01a901a9 01a901a9     ................
 800e4f8:	01a901a9 01a901a9 01a901a9 01a901a9     ................
 800e508:	01a901a9 01a901a9 01a901a9 01a901a9     ................
 800e518:	01a901a9 01a901a9 01a901a9 01a901a9     ................
 800e528:	01a901a9 01a901a9 01a901a9 01a901a9     ................
 800e538:	01a901a9 01a901a9 01a901a9 01aa01a9     ................
 800e548:	01aa01aa 01aa01aa 01aa01aa 01aa01aa     ................
 800e558:	01aa01aa 01aa01aa 01aa01aa 01aa01aa     ................
 800e568:	01aa01aa 01aa01aa 01aa01aa 01aa01aa     ................
 800e578:	01aa01aa 01aa01aa 01aa01aa 01aa01aa     ................
 800e588:	01aa01aa 01aa01aa 01aa01aa 01aa01aa     ................
 800e598:	01aa01aa 01aa01aa 01aa01aa 01aa01aa     ................
 800e5a8:	01aa01aa 01aa01aa 01aa01aa 01aa01aa     ................
 800e5b8:	01aa01aa 01ab01ab 01ab01ab 01ab01ab     ................
 800e5c8:	01ab01ab 01ab01ab 01ab01ab 01ab01ab     ................
 800e5d8:	01ab01ab 01ab01ab 01ab01ab 01ab01ab     ................
 800e5e8:	01ab01ab 01ab01ab 01ab01ab 01ab01ab     ................
 800e5f8:	01ab01ab 01ab01ab 01ab01ab 01ab01ab     ................
 800e608:	01ab01ab 01ab01ab 01ab01ab 01ab01ab     ................
 800e618:	01ab01ab 01ab01ab 01ab01ab 01ab01ab     ................
 800e628:	01ab01ab 01ab01ab 01ac01ab 01ac01ac     ................
 800e638:	01ac01ac 01ac01ac 01ac01ac 01ac01ac     ................
 800e648:	01ac01ac 01ac01ac 01ac01ac 01ac01ac     ................
 800e658:	01ac01ac 01ac01ac 01ac01ac 01ac01ac     ................
 800e668:	01ac01ac 01ac01ac 01ac01ac 01ac01ac     ................
 800e678:	01ac01ac 01ac01ac 01ac01ac 01ac01ac     ................
 800e688:	01ac01ac 01ac01ac 01ac01ac 01ac01ac     ................
 800e698:	01ac01ac 01ac01ac 01ac01ac 01ad01ac     ................
 800e6a8:	01ad01ad 01ad01ad 01ad01ad 01ad01ad     ................
 800e6b8:	01ad01ad 01ad01ad 01ad01ad 01ad01ad     ................
 800e6c8:	01ad01ad 01ad01ad 01ad01ad 01ad01ad     ................
 800e6d8:	01ad01ad 01ad01ad 01ad01ad 01ad01ad     ................
 800e6e8:	01ad01ad 01ad01ad 01ad01ad 01ad01ad     ................
 800e6f8:	01ad01ad 01ad01ad 01ad01ad 01ad01ad     ................
 800e708:	01ad01ad 01ad01ad 01ad01ad 01ad01ad     ................
 800e718:	01ad01ad 01ae01ae 01ae01ae 01ae01ae     ................
 800e728:	01ae01ae 01ae01ae 01ae01ae 01ae01ae     ................
 800e738:	01ae01ae 01ae01ae 01ae01ae 01ae01ae     ................
 800e748:	01ae01ae 01ae01ae 01ae01ae 01ae01ae     ................
 800e758:	01ae01ae 01ae01ae 01ae01ae 01ae01ae     ................
 800e768:	01ae01ae 01ae01ae 01ae01ae 01ae01ae     ................
 800e778:	01ae01ae 01ae01ae 01ae01ae 01ae01ae     ................
 800e788:	01ae01ae 01ae01ae 01af01ae 01af01af     ................
 800e798:	01af01af 01af01af 01af01af 01af01af     ................
 800e7a8:	01af01af 01af01af 01af01af 01af01af     ................
 800e7b8:	01af01af 01af01af 01af01af 01af01af     ................
 800e7c8:	01af01af 01af01af 01af01af 01af01af     ................
 800e7d8:	01af01af 01af01af 01af01af 01af01af     ................
 800e7e8:	01af01af 01af01af 01af01af 01af01af     ................
 800e7f8:	01af01af 01af01af 01af01af 01af01af     ................
 800e808:	01b001af 01b001b0 01b001b0 01b001b0     ................
 800e818:	01b001b0 01b001b0 01b001b0 01b001b0     ................
 800e828:	01b001b0 01b001b0 01b001b0 01b001b0     ................
 800e838:	01b001b0 01b001b0 01b001b0 01b001b0     ................
 800e848:	01b001b0 01b001b0 01b001b0 01b001b0     ................
 800e858:	01b001b0 01b001b0 01b001b0 01b001b0     ................
 800e868:	01b001b0 01b001b0 01b001b0 01b001b0     ................
 800e878:	01b001b0 01b001b0 01b101b1 01b101b1     ................
 800e888:	01b101b1 01b101b1 01b101b1 01b101b1     ................
 800e898:	01b101b1 01b101b1 01b101b1 01b101b1     ................
 800e8a8:	01b101b1 01b101b1 01b101b1 01b101b1     ................
 800e8b8:	01b101b1 01b101b1 01b101b1 01b101b1     ................
 800e8c8:	01b101b1 01b101b1 01b101b1 01b101b1     ................
 800e8d8:	01b101b1 01b101b1 01b101b1 01b101b1     ................
 800e8e8:	01b101b1 01b101b1 01b101b1 01b201b1     ................
 800e8f8:	01b201b2 01b201b2 01b201b2 01b201b2     ................
 800e908:	01b201b2 01b201b2 01b201b2 01b201b2     ................
 800e918:	01b201b2 01b201b2 01b201b2 01b201b2     ................
 800e928:	01b201b2 01b201b2 01b201b2 01b201b2     ................
 800e938:	01b201b2 01b201b2 01b201b2 01b201b2     ................
 800e948:	01b201b2 01b201b2 01b201b2 01b201b2     ................
 800e958:	01b201b2 01b201b2 01b201b2 01b201b2     ................
 800e968:	01b201b2 01b301b2 01b301b3 01b301b3     ................
 800e978:	01b301b3 01b301b3 01b301b3 01b301b3     ................
 800e988:	01b301b3 01b301b3 01b301b3 01b301b3     ................
 800e998:	01b301b3 01b301b3 01b301b3 01b301b3     ................
 800e9a8:	01b301b3 01b301b3 01b301b3 01b301b3     ................
 800e9b8:	01b301b3 01b301b3 01b301b3 01b301b3     ................
 800e9c8:	01b301b3 01b301b3 01b301b3 01b301b3     ................
 800e9d8:	01b301b3 01b301b3 01b301b3 01b401b4     ................
 800e9e8:	01b401b4 01b401b4 01b401b4 01b401b4     ................
 800e9f8:	01b401b4 01b401b4 01b401b4 01b401b4     ................
 800ea08:	01b401b4 01b401b4 01b401b4 01b401b4     ................
 800ea18:	01b401b4 01b401b4 01b401b4 01b401b4     ................
 800ea28:	01b401b4 01b401b4 01b401b4 01b401b4     ................
 800ea38:	01b401b4 01b401b4 01b401b4 01b401b4     ................
 800ea48:	01b401b4 01b401b4 01b401b4 01b401b4     ................
 800ea58:	01b401b4 01b501b5 01b501b5 01b501b5     ................
 800ea68:	01b501b5 01b501b5 01b501b5 01b501b5     ................
 800ea78:	01b501b5 01b501b5 01b501b5 01b501b5     ................
 800ea88:	01b501b5 01b501b5 01b501b5 01b501b5     ................
 800ea98:	01b501b5 01b501b5 01b501b5 01b501b5     ................
 800eaa8:	01b501b5 01b501b5 01b501b5 01b501b5     ................
 800eab8:	01b501b5 01b501b5 01b501b5 01b501b5     ................
 800eac8:	01b501b5 01b501b5 01b501b5 01b601b6     ................
 800ead8:	01b601b6 01b601b6 01b601b6 01b601b6     ................
 800eae8:	01b601b6 01b601b6 01b601b6 01b601b6     ................
 800eaf8:	01b601b6 01b601b6 01b601b6 01b601b6     ................
 800eb08:	01b601b6 01b601b6 01b601b6 01b601b6     ................
 800eb18:	01b601b6 01b601b6 01b601b6 01b601b6     ................
 800eb28:	01b601b6 01b601b6 01b601b6 01b601b6     ................
 800eb38:	01b601b6 01b601b6 01b601b6 01b601b6     ................
 800eb48:	01b601b6 01b701b7 01b701b7 01b701b7     ................
 800eb58:	01b701b7 01b701b7 01b701b7 01b701b7     ................
 800eb68:	01b701b7 01b701b7 01b701b7 01b701b7     ................
 800eb78:	01b701b7 01b701b7 01b701b7 01b701b7     ................
 800eb88:	01b701b7 01b701b7 01b701b7 01b701b7     ................
 800eb98:	01b701b7 01b701b7 01b701b7 01b701b7     ................
 800eba8:	01b701b7 01b701b7 01b701b7 01b701b7     ................
 800ebb8:	01b701b7 01b701b7 01b701b7 01b801b8     ................
 800ebc8:	01b801b8 01b801b8 01b801b8 01b801b8     ................
 800ebd8:	01b801b8 01b801b8 01b801b8 01b801b8     ................
 800ebe8:	01b801b8 01b801b8 01b801b8 01b801b8     ................
 800ebf8:	01b801b8 01b801b8 01b801b8 01b801b8     ................
 800ec08:	01b801b8 01b801b8 01b801b8 01b801b8     ................
 800ec18:	01b801b8 01b801b8 01b801b8 01b801b8     ................
 800ec28:	01b801b8 01b801b8 01b801b8 01b801b8     ................
 800ec38:	01b801b8 01b901b9 01b901b9 01b901b9     ................
 800ec48:	01b901b9 01b901b9 01b901b9 01b901b9     ................
 800ec58:	01b901b9 01b901b9 01b901b9 01b901b9     ................
 800ec68:	01b901b9 01b901b9 01b901b9 01b901b9     ................
 800ec78:	01b901b9 01b901b9 01b901b9 01b901b9     ................
 800ec88:	01b901b9 01b901b9 01b901b9 01b901b9     ................
 800ec98:	01b901b9 01b901b9 01b901b9 01b901b9     ................
 800eca8:	01b901b9 01b901b9 01b901b9 01ba01ba     ................
 800ecb8:	01ba01ba 01ba01ba 01ba01ba 01ba01ba     ................
 800ecc8:	01ba01ba 01ba01ba 01ba01ba 01ba01ba     ................
 800ecd8:	01ba01ba 01ba01ba 01ba01ba 01ba01ba     ................
 800ece8:	01ba01ba 01ba01ba 01ba01ba 01ba01ba     ................
 800ecf8:	01ba01ba 01ba01ba 01ba01ba 01ba01ba     ................
 800ed08:	01ba01ba 01ba01ba 01ba01ba 01ba01ba     ................
 800ed18:	01ba01ba 01ba01ba 01ba01ba 01ba01ba     ................
 800ed28:	01ba01ba 01bb01ba 01bb01bb 01bb01bb     ................
 800ed38:	01bb01bb 01bb01bb 01bb01bb 01bb01bb     ................
 800ed48:	01bb01bb 01bb01bb 01bb01bb 01bb01bb     ................
 800ed58:	01bb01bb 01bb01bb 01bb01bb 01bb01bb     ................
 800ed68:	01bb01bb 01bb01bb 01bb01bb 01bb01bb     ................
 800ed78:	01bb01bb 01bb01bb 01bb01bb 01bb01bb     ................
 800ed88:	01bb01bb 01bb01bb 01bb01bb 01bb01bb     ................
 800ed98:	01bb01bb 01bb01bb 01bb01bb 01bc01bb     ................
 800eda8:	01bc01bc 01bc01bc 01bc01bc 01bc01bc     ................
 800edb8:	01bc01bc 01bc01bc 01bc01bc 01bc01bc     ................
 800edc8:	01bc01bc 01bc01bc 01bc01bc 01bc01bc     ................
 800edd8:	01bc01bc 01bc01bc 01bc01bc 01bc01bc     ................
 800ede8:	01bc01bc 01bc01bc 01bc01bc 01bc01bc     ................
 800edf8:	01bc01bc 01bc01bc 01bc01bc 01bc01bc     ................
 800ee08:	01bc01bc 01bc01bc 01bc01bc 01bc01bc     ................
 800ee18:	01bc01bc 01bc01bc 01bd01bd 01bd01bd     ................
 800ee28:	01bd01bd 01bd01bd 01bd01bd 01bd01bd     ................
 800ee38:	01bd01bd 01bd01bd 01bd01bd 01bd01bd     ................
 800ee48:	01bd01bd 01bd01bd 01bd01bd 01bd01bd     ................
 800ee58:	01bd01bd 01bd01bd 01bd01bd 01bd01bd     ................
 800ee68:	01bd01bd 01bd01bd 01bd01bd 01bd01bd     ................
 800ee78:	01bd01bd 01bd01bd 01bd01bd 01bd01bd     ................
 800ee88:	01bd01bd 01bd01bd 01bd01bd 01bd01bd     ................
 800ee98:	01be01bd 01be01be 01be01be 01be01be     ................
 800eea8:	01be01be 01be01be 01be01be 01be01be     ................
 800eeb8:	01be01be 01be01be 01be01be 01be01be     ................
 800eec8:	01be01be 01be01be 01be01be 01be01be     ................
 800eed8:	01be01be 01be01be 01be01be 01be01be     ................
 800eee8:	01be01be 01be01be 01be01be 01be01be     ................
 800eef8:	01be01be 01be01be 01be01be 01be01be     ................
 800ef08:	01be01be 01be01be 01be01be 01bf01bf     ................
 800ef18:	01bf01bf 01bf01bf 01bf01bf 01bf01bf     ................
 800ef28:	01bf01bf 01bf01bf 01bf01bf 01bf01bf     ................
 800ef38:	01bf01bf 01bf01bf 01bf01bf 01bf01bf     ................
 800ef48:	01bf01bf 01bf01bf 01bf01bf 01bf01bf     ................
 800ef58:	01bf01bf 01bf01bf 01bf01bf 01bf01bf     ................
 800ef68:	01bf01bf 01bf01bf 01bf01bf 01bf01bf     ................
 800ef78:	01bf01bf 01bf01bf 01bf01bf 01bf01bf     ................
 800ef88:	01bf01bf 01c001bf 01c001c0 01c001c0     ................
 800ef98:	01c001c0 01c001c0 01c001c0 01c001c0     ................
 800efa8:	01c001c0 01c001c0 01c001c0 01c001c0     ................
 800efb8:	01c001c0 01c001c0 01c001c0 01c001c0     ................
 800efc8:	01c001c0 01c001c0 01c001c0 01c001c0     ................
 800efd8:	01c001c0 01c001c0 01c001c0 01c001c0     ................
 800efe8:	01c001c0 01c001c0 01c001c0 01c001c0     ................
 800eff8:	01c001c0 01c001c0 01c001c0 01c001c0     ................
 800f008:	01c101c1 01c101c1 01c101c1 01c101c1     ................
 800f018:	01c101c1 01c101c1 01c101c1 01c101c1     ................
 800f028:	01c101c1 01c101c1 01c101c1 01c101c1     ................
 800f038:	01c101c1 01c101c1 01c101c1 01c101c1     ................
 800f048:	01c101c1 01c101c1 01c101c1 01c101c1     ................
 800f058:	01c101c1 01c101c1 01c101c1 01c101c1     ................
 800f068:	01c101c1 01c101c1 01c101c1 01c101c1     ................
 800f078:	01c101c1 01c101c1 01c201c1 01c201c2     ................
 800f088:	01c201c2 01c201c2 01c201c2 01c201c2     ................
 800f098:	01c201c2 01c201c2 01c201c2 01c201c2     ................
 800f0a8:	01c201c2 01c201c2 01c201c2 01c201c2     ................
 800f0b8:	01c201c2 01c201c2 01c201c2 01c201c2     ................
 800f0c8:	01c201c2 01c201c2 01c201c2 01c201c2     ................
 800f0d8:	01c201c2 01c201c2 01c201c2 01c201c2     ................
 800f0e8:	01c201c2 01c201c2 01c201c2 01c201c2     ................
 800f0f8:	01c201c2 01c301c2 01c301c3 01c301c3     ................
 800f108:	01c301c3 01c301c3 01c301c3 01c301c3     ................
 800f118:	01c301c3 01c301c3 01c301c3 01c301c3     ................
 800f128:	01c301c3 01c301c3 01c301c3 01c301c3     ................
 800f138:	01c301c3 01c301c3 01c301c3 01c301c3     ................
 800f148:	01c301c3 01c301c3 01c301c3 01c301c3     ................
 800f158:	01c301c3 01c301c3 01c301c3 01c301c3     ................
 800f168:	01c301c3 01c301c3 01c301c3 01c301c3     ................
 800f178:	01c401c4 01c401c4 01c401c4 01c401c4     ................
 800f188:	01c401c4 01c401c4 01c401c4 01c401c4     ................
 800f198:	01c401c4 01c401c4 01c401c4 01c401c4     ................
 800f1a8:	01c401c4 01c401c4 01c401c4 01c401c4     ................
 800f1b8:	01c401c4 01c401c4 01c401c4 01c401c4     ................
 800f1c8:	01c401c4 01c401c4 01c401c4 01c401c4     ................
 800f1d8:	01c401c4 01c401c4 01c401c4 01c401c4     ................
 800f1e8:	01c401c4 01c401c4 01c401c4 01c501c5     ................
 800f1f8:	01c501c5 01c501c5 01c501c5 01c501c5     ................
 800f208:	01c501c5 01c501c5 01c501c5 01c501c5     ................
 800f218:	01c501c5 01c501c5 01c501c5 01c501c5     ................
 800f228:	01c501c5 01c501c5 01c501c5 01c501c5     ................
 800f238:	01c501c5 01c501c5 01c501c5 01c501c5     ................
 800f248:	01c501c5 01c501c5 01c501c5 01c501c5     ................
 800f258:	01c501c5 01c501c5 01c501c5 01c501c5     ................
 800f268:	01c501c5 01c501c5 01c601c6 01c601c6     ................
 800f278:	01c601c6 01c601c6 01c601c6 01c601c6     ................
 800f288:	01c601c6 01c601c6 01c601c6 01c601c6     ................
 800f298:	01c601c6 01c601c6 01c601c6 01c601c6     ................
 800f2a8:	01c601c6 01c601c6 01c601c6 01c601c6     ................
 800f2b8:	01c601c6 01c601c6 01c601c6 01c601c6     ................
 800f2c8:	01c601c6 01c601c6 01c601c6 01c601c6     ................
 800f2d8:	01c601c6 01c601c6 01c601c6 01c601c6     ................
 800f2e8:	01c601c6 01c701c7 01c701c7 01c701c7     ................
 800f2f8:	01c701c7 01c701c7 01c701c7 01c701c7     ................
 800f308:	01c701c7 01c701c7 01c701c7 01c701c7     ................
 800f318:	01c701c7 01c701c7 01c701c7 01c701c7     ................
 800f328:	01c701c7 01c701c7 01c701c7 01c701c7     ................
 800f338:	01c701c7 01c701c7 01c701c7 01c701c7     ................
 800f348:	01c701c7 01c701c7 01c701c7 01c701c7     ................
 800f358:	01c701c7 01c701c7 01c701c7 01c701c7     ................
 800f368:	01c801c8 01c801c8 01c801c8 01c801c8     ................
 800f378:	01c801c8 01c801c8 01c801c8 01c801c8     ................
 800f388:	01c801c8 01c801c8 01c801c8 01c801c8     ................
 800f398:	01c801c8 01c801c8 01c801c8 01c801c8     ................
 800f3a8:	01c801c8 01c801c8 01c801c8 01c801c8     ................
 800f3b8:	01c801c8 01c801c8 01c801c8 01c801c8     ................
 800f3c8:	01c801c8 01c801c8 01c801c8 01c801c8     ................
 800f3d8:	01c801c8 01c801c8 01c801c8 01c901c9     ................
 800f3e8:	01c901c9 01c901c9 01c901c9 01c901c9     ................
 800f3f8:	01c901c9 01c901c9 01c901c9 01c901c9     ................
 800f408:	01c901c9 01c901c9 01c901c9 01c901c9     ................
 800f418:	01c901c9 01c901c9 01c901c9 01c901c9     ................
 800f428:	01c901c9 01c901c9 01c901c9 01c901c9     ................
 800f438:	01c901c9 01c901c9 01c901c9 01c901c9     ................
 800f448:	01c901c9 01c901c9 01c901c9 01c901c9     ................
 800f458:	01c901c9 01c901c9 01ca01c9 01ca01ca     ................
 800f468:	01ca01ca 01ca01ca 01ca01ca 01ca01ca     ................
 800f478:	01ca01ca 01ca01ca 01ca01ca 01ca01ca     ................
 800f488:	01ca01ca 01ca01ca 01ca01ca 01ca01ca     ................
 800f498:	01ca01ca 01ca01ca 01ca01ca 01ca01ca     ................
 800f4a8:	01ca01ca 01ca01ca 01ca01ca 01ca01ca     ................
 800f4b8:	01ca01ca 01ca01ca 01ca01ca 01ca01ca     ................
 800f4c8:	01ca01ca 01ca01ca 01ca01ca 01ca01ca     ................
 800f4d8:	01ca01ca 01ca01ca 01cb01cb 01cb01cb     ................
 800f4e8:	01cb01cb 01cb01cb 01cb01cb 01cb01cb     ................
 800f4f8:	01cb01cb 01cb01cb 01cb01cb 01cb01cb     ................
 800f508:	01cb01cb 01cb01cb 01cb01cb 01cb01cb     ................
 800f518:	01cb01cb 01cb01cb 01cb01cb 01cb01cb     ................
 800f528:	01cb01cb 01cb01cb 01cb01cb 01cb01cb     ................
 800f538:	01cb01cb 01cb01cb 01cb01cb 01cb01cb     ................
 800f548:	01cb01cb 01cb01cb 01cb01cb 01cb01cb     ................
 800f558:	01cb01cb 01cc01cc 01cc01cc 01cc01cc     ................
 800f568:	01cc01cc 01cc01cc 01cc01cc 01cc01cc     ................
 800f578:	01cc01cc 01cc01cc 01cc01cc 01cc01cc     ................
 800f588:	01cc01cc 01cc01cc 01cc01cc 01cc01cc     ................
 800f598:	01cc01cc 01cc01cc 01cc01cc 01cc01cc     ................
 800f5a8:	01cc01cc 01cc01cc 01cc01cc 01cc01cc     ................
 800f5b8:	01cc01cc 01cc01cc 01cc01cc 01cc01cc     ................
 800f5c8:	01cc01cc 01cc01cc 01cc01cc 01cc01cc     ................
 800f5d8:	01cd01cc 01cd01cd 01cd01cd 01cd01cd     ................
 800f5e8:	01cd01cd 01cd01cd 01cd01cd 01cd01cd     ................
 800f5f8:	01cd01cd 01cd01cd 01cd01cd 01cd01cd     ................
 800f608:	01cd01cd 01cd01cd 01cd01cd 01cd01cd     ................
 800f618:	01cd01cd 01cd01cd 01cd01cd 01cd01cd     ................
 800f628:	01cd01cd 01cd01cd 01cd01cd 01cd01cd     ................
 800f638:	01cd01cd 01cd01cd 01cd01cd 01cd01cd     ................
 800f648:	01cd01cd 01cd01cd 01cd01cd 01cd01cd     ................
 800f658:	01ce01ce 01ce01ce 01ce01ce 01ce01ce     ................
 800f668:	01ce01ce 01ce01ce 01ce01ce 01ce01ce     ................
 800f678:	01ce01ce 01ce01ce 01ce01ce 01ce01ce     ................
 800f688:	01ce01ce 01ce01ce 01ce01ce 01ce01ce     ................
 800f698:	01ce01ce 01ce01ce 01ce01ce 01ce01ce     ................
 800f6a8:	01ce01ce 01ce01ce 01ce01ce 01ce01ce     ................
 800f6b8:	01ce01ce 01ce01ce 01ce01ce 01ce01ce     ................
 800f6c8:	01ce01ce 01ce01ce 01ce01ce 01ce01ce     ................
 800f6d8:	01cf01cf 01cf01cf 01cf01cf 01cf01cf     ................
 800f6e8:	01cf01cf 01cf01cf 01cf01cf 01cf01cf     ................
 800f6f8:	01cf01cf 01cf01cf 01cf01cf 01cf01cf     ................
 800f708:	01cf01cf 01cf01cf 01cf01cf 01cf01cf     ................
 800f718:	01cf01cf 01cf01cf 01cf01cf 01cf01cf     ................
 800f728:	01cf01cf 01cf01cf 01cf01cf 01cf01cf     ................
 800f738:	01cf01cf 01cf01cf 01cf01cf 01cf01cf     ................
 800f748:	01cf01cf 01cf01cf 01cf01cf 01d001cf     ................
 800f758:	01d001d0 01d001d0 01d001d0 01d001d0     ................
 800f768:	01d001d0 01d001d0 01d001d0 01d001d0     ................
 800f778:	01d001d0 01d001d0 01d001d0 01d001d0     ................
 800f788:	01d001d0 01d001d0 01d001d0 01d001d0     ................
 800f798:	01d001d0 01d001d0 01d001d0 01d001d0     ................
 800f7a8:	01d001d0 01d001d0 01d001d0 01d001d0     ................
 800f7b8:	01d001d0 01d001d0 01d001d0 01d001d0     ................
 800f7c8:	01d001d0 01d001d0 01d001d0 01d101d0     ................
 800f7d8:	01d101d1 01d101d1 01d101d1 01d101d1     ................
 800f7e8:	01d101d1 01d101d1 01d101d1 01d101d1     ................
 800f7f8:	01d101d1 01d101d1 01d101d1 01d101d1     ................
 800f808:	01d101d1 01d101d1 01d101d1 01d101d1     ................
 800f818:	01d101d1 01d101d1 01d101d1 01d101d1     ................
 800f828:	01d101d1 01d101d1 01d101d1 01d101d1     ................
 800f838:	01d101d1 01d101d1 01d101d1 01d101d1     ................
 800f848:	01d101d1 01d101d1 01d101d1 01d201d2     ................
 800f858:	01d201d2 01d201d2 01d201d2 01d201d2     ................
 800f868:	01d201d2 01d201d2 01d201d2 01d201d2     ................
 800f878:	01d201d2 01d201d2 01d201d2 01d201d2     ................
 800f888:	01d201d2 01d201d2 01d201d2 01d201d2     ................
 800f898:	01d201d2 01d201d2 01d201d2 01d201d2     ................
 800f8a8:	01d201d2 01d201d2 01d201d2 01d201d2     ................
 800f8b8:	01d201d2 01d201d2 01d201d2 01d201d2     ................
 800f8c8:	01d201d2 01d201d2 01d201d2 01d301d3     ................
 800f8d8:	01d301d3 01d301d3 01d301d3 01d301d3     ................
 800f8e8:	01d301d3 01d301d3 01d301d3 01d301d3     ................
 800f8f8:	01d301d3 01d301d3 01d301d3 01d301d3     ................
 800f908:	01d301d3 01d301d3 01d301d3 01d301d3     ................
 800f918:	01d301d3 01d301d3 01d301d3 01d301d3     ................
 800f928:	01d301d3 01d301d3 01d301d3 01d301d3     ................
 800f938:	01d301d3 01d301d3 01d301d3 01d301d3     ................
 800f948:	01d301d3 01d301d3 01d301d3 01d401d4     ................
 800f958:	01d401d4 01d401d4 01d401d4 01d401d4     ................
 800f968:	01d401d4 01d401d4 01d401d4 01d401d4     ................
 800f978:	01d401d4 01d401d4 01d401d4 01d401d4     ................
 800f988:	01d401d4 01d401d4 01d401d4 01d401d4     ................
 800f998:	01d401d4 01d401d4 01d401d4 01d401d4     ................
 800f9a8:	01d401d4 01d401d4 01d401d4 01d401d4     ................
 800f9b8:	01d401d4 01d401d4 01d401d4 01d401d4     ................
 800f9c8:	01d401d4 01d401d4 01d401d4 01d501d4     ................
 800f9d8:	01d501d5 01d501d5 01d501d5 01d501d5     ................
 800f9e8:	01d501d5 01d501d5 01d501d5 01d501d5     ................
 800f9f8:	01d501d5 01d501d5 01d501d5 01d501d5     ................
 800fa08:	01d501d5 01d501d5 01d501d5 01d501d5     ................
 800fa18:	01d501d5 01d501d5 01d501d5 01d501d5     ................
 800fa28:	01d501d5 01d501d5 01d501d5 01d501d5     ................
 800fa38:	01d501d5 01d501d5 01d501d5 01d501d5     ................
 800fa48:	01d501d5 01d501d5 01d501d5 01d601d5     ................
 800fa58:	01d601d6 01d601d6 01d601d6 01d601d6     ................
 800fa68:	01d601d6 01d601d6 01d601d6 01d601d6     ................
 800fa78:	01d601d6 01d601d6 01d601d6 01d601d6     ................
 800fa88:	01d601d6 01d601d6 01d601d6 01d601d6     ................
 800fa98:	01d601d6 01d601d6 01d601d6 01d601d6     ................
 800faa8:	01d601d6 01d601d6 01d601d6 01d601d6     ................
 800fab8:	01d601d6 01d601d6 01d601d6 01d601d6     ................
 800fac8:	01d601d6 01d601d6 01d601d6 01d601d6     ................
 800fad8:	01d701d7 01d701d7 01d701d7 01d701d7     ................
 800fae8:	01d701d7 01d701d7 01d701d7 01d701d7     ................
 800faf8:	01d701d7 01d701d7 01d701d7 01d701d7     ................
 800fb08:	01d701d7 01d701d7 01d701d7 01d701d7     ................
 800fb18:	01d701d7 01d701d7 01d701d7 01d701d7     ................
 800fb28:	01d701d7 01d701d7 01d701d7 01d701d7     ................
 800fb38:	01d701d7 01d701d7 01d701d7 01d701d7     ................
 800fb48:	01d701d7 01d701d7 01d701d7 01d701d7     ................
 800fb58:	01d801d7 01d801d8 01d801d8 01d801d8     ................
 800fb68:	01d801d8 01d801d8 01d801d8 01d801d8     ................
 800fb78:	01d801d8 01d801d8 01d801d8 01d801d8     ................
 800fb88:	01d801d8 01d801d8 01d801d8 01d801d8     ................
 800fb98:	01d801d8 01d801d8 01d801d8 01d801d8     ................
 800fba8:	01d801d8 01d801d8 01d801d8 01d801d8     ................
 800fbb8:	01d801d8 01d801d8 01d801d8 01d801d8     ................
 800fbc8:	01d801d8 01d801d8 01d801d8 01d801d8     ................
 800fbd8:	01d801d8 01d901d9 01d901d9 01d901d9     ................
 800fbe8:	01d901d9 01d901d9 01d901d9 01d901d9     ................
 800fbf8:	01d901d9 01d901d9 01d901d9 01d901d9     ................
 800fc08:	01d901d9 01d901d9 01d901d9 01d901d9     ................
 800fc18:	01d901d9 01d901d9 01d901d9 01d901d9     ................
 800fc28:	01d901d9 01d901d9 01d901d9 01d901d9     ................
 800fc38:	01d901d9 01d901d9 01d901d9 01d901d9     ................
 800fc48:	01d901d9 01d901d9 01d901d9 01d901d9     ................
 800fc58:	01d901d9 01da01d9 01da01da 01da01da     ................
 800fc68:	01da01da 01da01da 01da01da 01da01da     ................
 800fc78:	01da01da 01da01da 01da01da 01da01da     ................
 800fc88:	01da01da 01da01da 01da01da 01da01da     ................
 800fc98:	01da01da 01da01da 01da01da 01da01da     ................
 800fca8:	01da01da 01da01da 01da01da 01da01da     ................
 800fcb8:	01da01da 01da01da 01da01da 01da01da     ................
 800fcc8:	01da01da 01da01da 01da01da 01da01da     ................
 800fcd8:	01da01da 01da01da 01db01db 01db01db     ................
 800fce8:	01db01db 01db01db 01db01db 01db01db     ................
 800fcf8:	01db01db 01db01db 01db01db 01db01db     ................
 800fd08:	01db01db 01db01db 01db01db 01db01db     ................
 800fd18:	01db01db 01db01db 01db01db 01db01db     ................
 800fd28:	01db01db 01db01db 01db01db 01db01db     ................
 800fd38:	01db01db 01db01db 01db01db 01db01db     ................
 800fd48:	01db01db 01db01db 01db01db 01db01db     ................
 800fd58:	01db01db 01db01db 01db01db 01dc01dc     ................
 800fd68:	01dc01dc 01dc01dc 01dc01dc 01dc01dc     ................
 800fd78:	01dc01dc 01dc01dc 01dc01dc 01dc01dc     ................
 800fd88:	01dc01dc 01dc01dc 01dc01dc 01dc01dc     ................
 800fd98:	01dc01dc 01dc01dc 01dc01dc 01dc01dc     ................
 800fda8:	01dc01dc 01dc01dc 01dc01dc 01dc01dc     ................
 800fdb8:	01dc01dc 01dc01dc 01dc01dc 01dc01dc     ................
 800fdc8:	01dc01dc 01dc01dc 01dc01dc 01dc01dc     ................
 800fdd8:	01dc01dc 01dc01dc 01dc01dc 01dc01dc     ................
 800fde8:	01dd01dd 01dd01dd 01dd01dd 01dd01dd     ................
 800fdf8:	01dd01dd 01dd01dd 01dd01dd 01dd01dd     ................
 800fe08:	01dd01dd 01dd01dd 01dd01dd 01dd01dd     ................
 800fe18:	01dd01dd 01dd01dd 01dd01dd 01dd01dd     ................
 800fe28:	01dd01dd 01dd01dd 01dd01dd 01dd01dd     ................
 800fe38:	01dd01dd 01dd01dd 01dd01dd 01dd01dd     ................
 800fe48:	01dd01dd 01dd01dd 01dd01dd 01dd01dd     ................
 800fe58:	01dd01dd 01dd01dd 01dd01dd 01dd01dd     ................
 800fe68:	01dd01dd 01de01de 01de01de 01de01de     ................
 800fe78:	01de01de 01de01de 01de01de 01de01de     ................
 800fe88:	01de01de 01de01de 01de01de 01de01de     ................
 800fe98:	01de01de 01de01de 01de01de 01de01de     ................
 800fea8:	01de01de 01de01de 01de01de 01de01de     ................
 800feb8:	01de01de 01de01de 01de01de 01de01de     ................
 800fec8:	01de01de 01de01de 01de01de 01de01de     ................
 800fed8:	01de01de 01de01de 01de01de 01de01de     ................
 800fee8:	01de01de 01de01de 01df01df 01df01df     ................
 800fef8:	01df01df 01df01df 01df01df 01df01df     ................
 800ff08:	01df01df 01df01df 01df01df 01df01df     ................
 800ff18:	01df01df 01df01df 01df01df 01df01df     ................
 800ff28:	01df01df 01df01df 01df01df 01df01df     ................
 800ff38:	01df01df 01df01df 01df01df 01df01df     ................
 800ff48:	01df01df 01df01df 01df01df 01df01df     ................
 800ff58:	01df01df 01df01df 01df01df 01df01df     ................
 800ff68:	01df01df 01df01df 01df01df 01e001e0     ................
 800ff78:	01e001e0 01e001e0 01e001e0 01e001e0     ................
 800ff88:	01e001e0 01e001e0 01e001e0 01e001e0     ................
 800ff98:	01e001e0 01e001e0 01e001e0 01e001e0     ................
 800ffa8:	01e001e0 01e001e0 01e001e0 01e001e0     ................
 800ffb8:	01e001e0 01e001e0 01e001e0 01e001e0     ................
 800ffc8:	01e001e0 01e001e0 01e001e0 01e001e0     ................
 800ffd8:	01e001e0 01e001e0 01e001e0 01e001e0     ................
 800ffe8:	01e001e0 01e001e0 01e001e0 01e001e0     ................
 800fff8:	01e101e0 01e101e1 01e101e1 01e101e1     ................
 8010008:	01e101e1 01e101e1 01e101e1 01e101e1     ................
 8010018:	01e101e1 01e101e1 01e101e1 01e101e1     ................
 8010028:	01e101e1 01e101e1 01e101e1 01e101e1     ................
 8010038:	01e101e1 01e101e1 01e101e1 01e101e1     ................
 8010048:	01e101e1 01e101e1 01e101e1 01e101e1     ................
 8010058:	01e101e1 01e101e1 01e101e1 01e101e1     ................
 8010068:	01e101e1 01e101e1 01e101e1 01e101e1     ................
 8010078:	01e101e1 01e201e1 01e201e2 01e201e2     ................
 8010088:	01e201e2 01e201e2 01e201e2 01e201e2     ................
 8010098:	01e201e2 01e201e2 01e201e2 01e201e2     ................
 80100a8:	01e201e2 01e201e2 01e201e2 01e201e2     ................
 80100b8:	01e201e2 01e201e2 01e201e2 01e201e2     ................
 80100c8:	01e201e2 01e201e2 01e201e2 01e201e2     ................
 80100d8:	01e201e2 01e201e2 01e201e2 01e201e2     ................
 80100e8:	01e201e2 01e201e2 01e201e2 01e201e2     ................
 80100f8:	01e201e2 01e201e2 01e201e2 01e301e3     ................
 8010108:	01e301e3 01e301e3 01e301e3 01e301e3     ................
 8010118:	01e301e3 01e301e3 01e301e3 01e301e3     ................
 8010128:	01e301e3 01e301e3 01e301e3 01e301e3     ................
 8010138:	01e301e3 01e301e3 01e301e3 01e301e3     ................
 8010148:	01e301e3 01e301e3 01e301e3 01e301e3     ................
 8010158:	01e301e3 01e301e3 01e301e3 01e301e3     ................
 8010168:	01e301e3 01e301e3 01e301e3 01e301e3     ................
 8010178:	01e301e3 01e301e3 01e301e3 01e301e3     ................
 8010188:	01e301e3 01e401e4 01e401e4 01e401e4     ................
 8010198:	01e401e4 01e401e4 01e401e4 01e401e4     ................
 80101a8:	01e401e4 01e401e4 01e401e4 01e401e4     ................
 80101b8:	01e401e4 01e401e4 01e401e4 01e401e4     ................
 80101c8:	01e401e4 01e401e4 01e401e4 01e401e4     ................
 80101d8:	01e401e4 01e401e4 01e401e4 01e401e4     ................
 80101e8:	01e401e4 01e401e4 01e401e4 01e401e4     ................
 80101f8:	01e401e4 01e401e4 01e401e4 01e401e4     ................
 8010208:	01e401e4 01e401e4 01e501e4 01e501e5     ................
 8010218:	01e501e5 01e501e5 01e501e5 01e501e5     ................
 8010228:	01e501e5 01e501e5 01e501e5 01e501e5     ................
 8010238:	01e501e5 01e501e5 01e501e5 01e501e5     ................
 8010248:	01e501e5 01e501e5 01e501e5 01e501e5     ................
 8010258:	01e501e5 01e501e5 01e501e5 01e501e5     ................
 8010268:	01e501e5 01e501e5 01e501e5 01e501e5     ................
 8010278:	01e501e5 01e501e5 01e501e5 01e501e5     ................
 8010288:	01e501e5 01e501e5 01e501e5 01e501e5     ................
 8010298:	01e601e5 01e601e6 01e601e6 01e601e6     ................
 80102a8:	01e601e6 01e601e6 01e601e6 01e601e6     ................
 80102b8:	01e601e6 01e601e6 01e601e6 01e601e6     ................
 80102c8:	01e601e6 01e601e6 01e601e6 01e601e6     ................
 80102d8:	01e601e6 01e601e6 01e601e6 01e601e6     ................
 80102e8:	01e601e6 01e601e6 01e601e6 01e601e6     ................
 80102f8:	01e601e6 01e601e6 01e601e6 01e601e6     ................
 8010308:	01e601e6 01e601e6 01e601e6 01e601e6     ................
 8010318:	01e601e6 01e601e6 01e701e6 01e701e7     ................
 8010328:	01e701e7 01e701e7 01e701e7 01e701e7     ................
 8010338:	01e701e7 01e701e7 01e701e7 01e701e7     ................
 8010348:	01e701e7 01e701e7 01e701e7 01e701e7     ................
 8010358:	01e701e7 01e701e7 01e701e7 01e701e7     ................
 8010368:	01e701e7 01e701e7 01e701e7 01e701e7     ................
 8010378:	01e701e7 01e701e7 01e701e7 01e701e7     ................
 8010388:	01e701e7 01e701e7 01e701e7 01e701e7     ................
 8010398:	01e701e7 01e701e7 01e701e7 01e701e7     ................
 80103a8:	01e801e7 01e801e8 01e801e8 01e801e8     ................
 80103b8:	01e801e8 01e801e8 01e801e8 01e801e8     ................
 80103c8:	01e801e8 01e801e8 01e801e8 01e801e8     ................
 80103d8:	01e801e8 01e801e8 01e801e8 01e801e8     ................
 80103e8:	01e801e8 01e801e8 01e801e8 01e801e8     ................
 80103f8:	01e801e8 01e801e8 01e801e8 01e801e8     ................
 8010408:	01e801e8 01e801e8 01e801e8 01e801e8     ................
 8010418:	01e801e8 01e801e8 01e801e8 01e801e8     ................
 8010428:	01e801e8 01e801e8 01e901e8 01e901e9     ................
 8010438:	01e901e9 01e901e9 01e901e9 01e901e9     ................
 8010448:	01e901e9 01e901e9 01e901e9 01e901e9     ................
 8010458:	01e901e9 01e901e9 01e901e9 01e901e9     ................
 8010468:	01e901e9 01e901e9 01e901e9 01e901e9     ................
 8010478:	01e901e9 01e901e9 01e901e9 01e901e9     ................
 8010488:	01e901e9 01e901e9 01e901e9 01e901e9     ................
 8010498:	01e901e9 01e901e9 01e901e9 01e901e9     ................
 80104a8:	01e901e9 01e901e9 01e901e9 01e901e9     ................
 80104b8:	01e901e9 01ea01ea 01ea01ea 01ea01ea     ................
 80104c8:	01ea01ea 01ea01ea 01ea01ea 01ea01ea     ................
 80104d8:	01ea01ea 01ea01ea 01ea01ea 01ea01ea     ................
 80104e8:	01ea01ea 01ea01ea 01ea01ea 01ea01ea     ................
 80104f8:	01ea01ea 01ea01ea 01ea01ea 01ea01ea     ................
 8010508:	01ea01ea 01ea01ea 01ea01ea 01ea01ea     ................
 8010518:	01ea01ea 01ea01ea 01ea01ea 01ea01ea     ................
 8010528:	01ea01ea 01ea01ea 01ea01ea 01ea01ea     ................
 8010538:	01ea01ea 01ea01ea 01ea01ea 01eb01ea     ................
 8010548:	01eb01eb 01eb01eb 01eb01eb 01eb01eb     ................
 8010558:	01eb01eb 01eb01eb 01eb01eb 01eb01eb     ................
 8010568:	01eb01eb 01eb01eb 01eb01eb 01eb01eb     ................
 8010578:	01eb01eb 01eb01eb 01eb01eb 01eb01eb     ................
 8010588:	01eb01eb 01eb01eb 01eb01eb 01eb01eb     ................
 8010598:	01eb01eb 01eb01eb 01eb01eb 01eb01eb     ................
 80105a8:	01eb01eb 01eb01eb 01eb01eb 01eb01eb     ................
 80105b8:	01eb01eb 01eb01eb 01eb01eb 01eb01eb     ................
 80105c8:	01eb01eb 01eb01eb 01ec01ec 01ec01ec     ................
 80105d8:	01ec01ec 01ec01ec 01ec01ec 01ec01ec     ................
 80105e8:	01ec01ec 01ec01ec 01ec01ec 01ec01ec     ................
 80105f8:	01ec01ec 01ec01ec 01ec01ec 01ec01ec     ................
 8010608:	01ec01ec 01ec01ec 01ec01ec 01ec01ec     ................
 8010618:	01ec01ec 01ec01ec 01ec01ec 01ec01ec     ................
 8010628:	01ec01ec 01ec01ec 01ec01ec 01ec01ec     ................
 8010638:	01ec01ec 01ec01ec 01ec01ec 01ec01ec     ................
 8010648:	01ec01ec 01ec01ec 01ec01ec 01ec01ec     ................
 8010658:	01ed01ec 01ed01ed 01ed01ed 01ed01ed     ................
 8010668:	01ed01ed 01ed01ed 01ed01ed 01ed01ed     ................
 8010678:	01ed01ed 01ed01ed 01ed01ed 01ed01ed     ................
 8010688:	01ed01ed 01ed01ed 01ed01ed 01ed01ed     ................
 8010698:	01ed01ed 01ed01ed 01ed01ed 01ed01ed     ................
 80106a8:	01ed01ed 01ed01ed 01ed01ed 01ed01ed     ................
 80106b8:	01ed01ed 01ed01ed 01ed01ed 01ed01ed     ................
 80106c8:	01ed01ed 01ed01ed 01ed01ed 01ed01ed     ................
 80106d8:	01ed01ed 01ed01ed 01ed01ed 01ee01ed     ................
 80106e8:	01ee01ee 01ee01ee 01ee01ee 01ee01ee     ................
 80106f8:	01ee01ee 01ee01ee 01ee01ee 01ee01ee     ................
 8010708:	01ee01ee 01ee01ee 01ee01ee 01ee01ee     ................
 8010718:	01ee01ee 01ee01ee 01ee01ee 01ee01ee     ................
 8010728:	01ee01ee 01ee01ee 01ee01ee 01ee01ee     ................
 8010738:	01ee01ee 01ee01ee 01ee01ee 01ee01ee     ................
 8010748:	01ee01ee 01ee01ee 01ee01ee 01ee01ee     ................
 8010758:	01ee01ee 01ee01ee 01ee01ee 01ee01ee     ................
 8010768:	01ee01ee 01ee01ee 01ef01ee 01ef01ef     ................
 8010778:	01ef01ef 01ef01ef 01ef01ef 01ef01ef     ................
 8010788:	01ef01ef 01ef01ef 01ef01ef 01ef01ef     ................
 8010798:	01ef01ef 01ef01ef 01ef01ef 01ef01ef     ................
 80107a8:	01ef01ef 01ef01ef 01ef01ef 01ef01ef     ................
 80107b8:	01ef01ef 01ef01ef 01ef01ef 01ef01ef     ................
 80107c8:	01ef01ef 01ef01ef 01ef01ef 01ef01ef     ................
 80107d8:	01ef01ef 01ef01ef 01ef01ef 01ef01ef     ................
 80107e8:	01ef01ef 01ef01ef 01ef01ef 01ef01ef     ................
 80107f8:	01ef01ef 01f001ef 01f001f0 01f001f0     ................
 8010808:	01f001f0 01f001f0 01f001f0 01f001f0     ................
 8010818:	01f001f0 01f001f0 01f001f0 01f001f0     ................
 8010828:	01f001f0 01f001f0 01f001f0 01f001f0     ................
 8010838:	01f001f0 01f001f0 01f001f0 01f001f0     ................
 8010848:	01f001f0 01f001f0 01f001f0 01f001f0     ................
 8010858:	01f001f0 01f001f0 01f001f0 01f001f0     ................
 8010868:	01f001f0 01f001f0 01f001f0 01f001f0     ................
 8010878:	01f001f0 01f001f0 01f001f0 01f001f0     ................
 8010888:	01f101f0 01f101f1 01f101f1 01f101f1     ................
 8010898:	01f101f1 01f101f1 01f101f1 01f101f1     ................
 80108a8:	01f101f1 01f101f1 01f101f1 01f101f1     ................
 80108b8:	01f101f1 01f101f1 01f101f1 01f101f1     ................
 80108c8:	01f101f1 01f101f1 01f101f1 01f101f1     ................
 80108d8:	01f101f1 01f101f1 01f101f1 01f101f1     ................
 80108e8:	01f101f1 01f101f1 01f101f1 01f101f1     ................
 80108f8:	01f101f1 01f101f1 01f101f1 01f101f1     ................
 8010908:	01f101f1 01f101f1 01f101f1 01f101f1     ................
 8010918:	01f201f2 01f201f2 01f201f2 01f201f2     ................
 8010928:	01f201f2 01f201f2 01f201f2 01f201f2     ................
 8010938:	01f201f2 01f201f2 01f201f2 01f201f2     ................
 8010948:	01f201f2 01f201f2 01f201f2 01f201f2     ................
 8010958:	01f201f2 01f201f2 01f201f2 01f201f2     ................
 8010968:	01f201f2 01f201f2 01f201f2 01f201f2     ................
 8010978:	01f201f2 01f201f2 01f201f2 01f201f2     ................
 8010988:	01f201f2 01f201f2 01f201f2 01f201f2     ................
 8010998:	01f201f2 01f201f2 01f201f2 01f301f2     ................
 80109a8:	01f301f3 01f301f3 01f301f3 01f301f3     ................
 80109b8:	01f301f3 01f301f3 01f301f3 01f301f3     ................
 80109c8:	01f301f3 01f301f3 01f301f3 01f301f3     ................
 80109d8:	01f301f3 01f301f3 01f301f3 01f301f3     ................
 80109e8:	01f301f3 01f301f3 01f301f3 01f301f3     ................
 80109f8:	01f301f3 01f301f3 01f301f3 01f301f3     ................
 8010a08:	01f301f3 01f301f3 01f301f3 01f301f3     ................
 8010a18:	01f301f3 01f301f3 01f301f3 01f301f3     ................
 8010a28:	01f301f3 01f301f3 01f301f3 01f401f4     ................
 8010a38:	01f401f4 01f401f4 01f401f4 01f401f4     ................
 8010a48:	01f401f4 01f401f4 01f401f4 01f401f4     ................
 8010a58:	01f401f4 01f401f4 01f401f4 01f401f4     ................
 8010a68:	01f401f4 01f401f4 01f401f4 01f401f4     ................
 8010a78:	01f401f4 01f401f4 01f401f4 01f401f4     ................
 8010a88:	01f401f4 01f401f4 01f401f4 01f401f4     ................
 8010a98:	01f401f4 01f401f4 01f401f4 01f401f4     ................
 8010aa8:	01f401f4 01f401f4 01f401f4 01f401f4     ................
 8010ab8:	01f401f4 01f401f4 01f401f4 01f501f5     ................
 8010ac8:	01f501f5 01f501f5 01f501f5 01f501f5     ................
 8010ad8:	01f501f5 01f501f5 01f501f5 01f501f5     ................
 8010ae8:	01f501f5 01f501f5 01f501f5 01f501f5     ................
 8010af8:	01f501f5 01f501f5 01f501f5 01f501f5     ................
 8010b08:	01f501f5 01f501f5 01f501f5 01f501f5     ................
 8010b18:	01f501f5 01f501f5 01f501f5 01f501f5     ................
 8010b28:	01f501f5 01f501f5 01f501f5 01f501f5     ................
 8010b38:	01f501f5 01f501f5 01f501f5 01f501f5     ................
 8010b48:	01f501f5 01f501f5 01f501f5 01f601f6     ................
 8010b58:	01f601f6 01f601f6 01f601f6 01f601f6     ................
 8010b68:	01f601f6 01f601f6 01f601f6 01f601f6     ................
 8010b78:	01f601f6 01f601f6 01f601f6 01f601f6     ................
 8010b88:	01f601f6 01f601f6 01f601f6 01f601f6     ................
 8010b98:	01f601f6 01f601f6 01f601f6 01f601f6     ................
 8010ba8:	01f601f6 01f601f6 01f601f6 01f601f6     ................
 8010bb8:	01f601f6 01f601f6 01f601f6 01f601f6     ................
 8010bc8:	01f601f6 01f601f6 01f601f6 01f601f6     ................
 8010bd8:	01f601f6 01f601f6 01f601f6 01f701f7     ................
 8010be8:	01f701f7 01f701f7 01f701f7 01f701f7     ................
 8010bf8:	01f701f7 01f701f7 01f701f7 01f701f7     ................
 8010c08:	01f701f7 01f701f7 01f701f7 01f701f7     ................
 8010c18:	01f701f7 01f701f7 01f701f7 01f701f7     ................
 8010c28:	01f701f7 01f701f7 01f701f7 01f701f7     ................
 8010c38:	01f701f7 01f701f7 01f701f7 01f701f7     ................
 8010c48:	01f701f7 01f701f7 01f701f7 01f701f7     ................
 8010c58:	01f701f7 01f701f7 01f701f7 01f701f7     ................
 8010c68:	01f701f7 01f701f7 01f701f7 01f801f8     ................
 8010c78:	01f801f8 01f801f8 01f801f8 01f801f8     ................
 8010c88:	01f801f8 01f801f8 01f801f8 01f801f8     ................
 8010c98:	01f801f8 01f801f8 01f801f8 01f801f8     ................
 8010ca8:	01f801f8 01f801f8 01f801f8 01f801f8     ................
 8010cb8:	01f801f8 01f801f8 01f801f8 01f801f8     ................
 8010cc8:	01f801f8 01f801f8 01f801f8 01f801f8     ................
 8010cd8:	01f801f8 01f801f8 01f801f8 01f801f8     ................
 8010ce8:	01f801f8 01f801f8 01f801f8 01f801f8     ................
 8010cf8:	01f801f8 01f801f8 01f801f8 01f901f8     ................
 8010d08:	01f901f9 01f901f9 01f901f9 01f901f9     ................
 8010d18:	01f901f9 01f901f9 01f901f9 01f901f9     ................
 8010d28:	01f901f9 01f901f9 01f901f9 01f901f9     ................
 8010d38:	01f901f9 01f901f9 01f901f9 01f901f9     ................
 8010d48:	01f901f9 01f901f9 01f901f9 01f901f9     ................
 8010d58:	01f901f9 01f901f9 01f901f9 01f901f9     ................
 8010d68:	01f901f9 01f901f9 01f901f9 01f901f9     ................
 8010d78:	01f901f9 01f901f9 01f901f9 01f901f9     ................
 8010d88:	01f901f9 01f901f9 01f901f9 01f901f9     ................
 8010d98:	01fa01fa 01fa01fa 01fa01fa 01fa01fa     ................
 8010da8:	01fa01fa 01fa01fa 01fa01fa 01fa01fa     ................
 8010db8:	01fa01fa 01fa01fa 01fa01fa 01fa01fa     ................
 8010dc8:	01fa01fa 01fa01fa 01fa01fa 01fa01fa     ................
 8010dd8:	01fa01fa 01fa01fa 01fa01fa 01fa01fa     ................
 8010de8:	01fa01fa 01fa01fa 01fa01fa 01fa01fa     ................
 8010df8:	01fa01fa 01fa01fa 01fa01fa 01fa01fa     ................
 8010e08:	01fa01fa 01fa01fa 01fa01fa 01fa01fa     ................
 8010e18:	01fa01fa 01fa01fa 01fa01fa 01fa01fa     ................
 8010e28:	01fb01fa 01fb01fb 01fb01fb 01fb01fb     ................
 8010e38:	01fb01fb 01fb01fb 01fb01fb 01fb01fb     ................
 8010e48:	01fb01fb 01fb01fb 01fb01fb 01fb01fb     ................
 8010e58:	01fb01fb 01fb01fb 01fb01fb 01fb01fb     ................
 8010e68:	01fb01fb 01fb01fb 01fb01fb 01fb01fb     ................
 8010e78:	01fb01fb 01fb01fb 01fb01fb 01fb01fb     ................
 8010e88:	01fb01fb 01fb01fb 01fb01fb 01fb01fb     ................
 8010e98:	01fb01fb 01fb01fb 01fb01fb 01fb01fb     ................
 8010ea8:	01fb01fb 01fb01fb 01fb01fb 01fb01fb     ................
 8010eb8:	01fb01fb 01fc01fb 01fc01fc 01fc01fc     ................
 8010ec8:	01fc01fc 01fc01fc 01fc01fc 01fc01fc     ................
 8010ed8:	01fc01fc 01fc01fc 01fc01fc 01fc01fc     ................
 8010ee8:	01fc01fc 01fc01fc 01fc01fc 01fc01fc     ................
 8010ef8:	01fc01fc 01fc01fc 01fc01fc 01fc01fc     ................
 8010f08:	01fc01fc 01fc01fc 01fc01fc 01fc01fc     ................
 8010f18:	01fc01fc 01fc01fc 01fc01fc 01fc01fc     ................
 8010f28:	01fc01fc 01fc01fc 01fc01fc 01fc01fc     ................
 8010f38:	01fc01fc 01fc01fc 01fc01fc 01fc01fc     ................
 8010f48:	01fc01fc 01fc01fc 01fd01fc 01fd01fd     ................
 8010f58:	01fd01fd 01fd01fd 01fd01fd 01fd01fd     ................
 8010f68:	01fd01fd 01fd01fd 01fd01fd 01fd01fd     ................
 8010f78:	01fd01fd 01fd01fd 01fd01fd 01fd01fd     ................
 8010f88:	01fd01fd 01fd01fd 01fd01fd 01fd01fd     ................
 8010f98:	01fd01fd 01fd01fd 01fd01fd 01fd01fd     ................
 8010fa8:	01fd01fd 01fd01fd 01fd01fd 01fd01fd     ................
 8010fb8:	01fd01fd 01fd01fd 01fd01fd 01fd01fd     ................
 8010fc8:	01fd01fd 01fd01fd 01fd01fd 01fd01fd     ................
 8010fd8:	01fd01fd 01fd01fd 01fd01fd 01fe01fd     ................
 8010fe8:	01fe01fe 01fe01fe 01fe01fe 01fe01fe     ................
 8010ff8:	01fe01fe 01fe01fe 01fe01fe 01fe01fe     ................
 8011008:	01fe01fe 01fe01fe 01fe01fe 01fe01fe     ................
 8011018:	01fe01fe 01fe01fe 01fe01fe 01fe01fe     ................
 8011028:	01fe01fe 01fe01fe 01fe01fe 01fe01fe     ................
 8011038:	01fe01fe 01fe01fe 01fe01fe 01fe01fe     ................
 8011048:	01fe01fe 01fe01fe 01fe01fe 01fe01fe     ................
 8011058:	01fe01fe 01fe01fe 01fe01fe 01fe01fe     ................
 8011068:	01fe01fe 01fe01fe 01fe01fe 01fe01fe     ................
 8011078:	01fe01fe 01ff01ff 01ff01ff 01ff01ff     ................
 8011088:	01ff01ff 01ff01ff 01ff01ff 01ff01ff     ................
 8011098:	01ff01ff 01ff01ff 01ff01ff 01ff01ff     ................
 80110a8:	01ff01ff 01ff01ff 01ff01ff 01ff01ff     ................
 80110b8:	01ff01ff 01ff01ff 01ff01ff 01ff01ff     ................
 80110c8:	01ff01ff 01ff01ff 01ff01ff 01ff01ff     ................
 80110d8:	01ff01ff 01ff01ff 01ff01ff 01ff01ff     ................
 80110e8:	01ff01ff 01ff01ff 01ff01ff 01ff01ff     ................
 80110f8:	01ff01ff 01ff01ff 01ff01ff 01ff01ff     ................
 8011108:	01ff01ff 01ff01ff 020001ff 02000200     ................
 8011118:	02000200 02000200 02000200 02000200     ................
 8011128:	02000200 02000200 02000200 02000200     ................
 8011138:	02000200 02000200 02000200 02000200     ................
 8011148:	02000200 02000200 02000200 02000200     ................
 8011158:	02000200 02000200 02000200 02000200     ................
 8011168:	02000200 02000200 02000200 02000200     ................
 8011178:	02000200 02000200 02000200 02000200     ................
 8011188:	02000200 02000200 02000200 02000200     ................
 8011198:	02000200 02000200 02000200 02000200     ................
 80111a8:	02010200 02010201 02010201 02010201     ................
 80111b8:	02010201 02010201 02010201 02010201     ................
 80111c8:	02010201 02010201 02010201 02010201     ................
 80111d8:	02010201 02010201 02010201 02010201     ................
 80111e8:	02010201 02010201 02010201 02010201     ................
 80111f8:	02010201 02010201 02010201 02010201     ................
 8011208:	02010201 02010201 02010201 02010201     ................
 8011218:	02010201 02010201 02010201 02010201     ................
 8011228:	02010201 02010201 02010201 02010201     ................
 8011238:	02010201 02010201 02020202 02020202     ................
 8011248:	02020202 02020202 02020202 02020202     ................
 8011258:	02020202 02020202 02020202 02020202     ................
 8011268:	02020202 02020202 02020202 02020202     ................
 8011278:	02020202 02020202 02020202 02020202     ................
 8011288:	02020202 02020202 02020202 02020202     ................
 8011298:	02020202 02020202 02020202 02020202     ................
 80112a8:	02020202 02020202 02020202 02020202     ................
 80112b8:	02020202 02020202 02020202 02020202     ................
 80112c8:	02020202 02020202 02020202 02020202     ................
 80112d8:	02030203 02030203 02030203 02030203     ................
 80112e8:	02030203 02030203 02030203 02030203     ................
 80112f8:	02030203 02030203 02030203 02030203     ................
 8011308:	02030203 02030203 02030203 02030203     ................
 8011318:	02030203 02030203 02030203 02030203     ................
 8011328:	02030203 02030203 02030203 02030203     ................
 8011338:	02030203 02030203 02030203 02030203     ................
 8011348:	02030203 02030203 02030203 02030203     ................
 8011358:	02030203 02030203 02030203 02030203     ................
 8011368:	02030203 02030203 02040203 02040204     ................
 8011378:	02040204 02040204 02040204 02040204     ................
 8011388:	02040204 02040204 02040204 02040204     ................
 8011398:	02040204 02040204 02040204 02040204     ................
 80113a8:	02040204 02040204 02040204 02040204     ................
 80113b8:	02040204 02040204 02040204 02040204     ................
 80113c8:	02040204 02040204 02040204 02040204     ................
 80113d8:	02040204 02040204 02040204 02040204     ................
 80113e8:	02040204 02040204 02040204 02040204     ................
 80113f8:	02040204 02040204 02040204 02040204     ................
 8011408:	02040204 02050205 02050205 02050205     ................
 8011418:	02050205 02050205 02050205 02050205     ................
 8011428:	02050205 02050205 02050205 02050205     ................
 8011438:	02050205 02050205 02050205 02050205     ................
 8011448:	02050205 02050205 02050205 02050205     ................
 8011458:	02050205 02050205 02050205 02050205     ................
 8011468:	02050205 02050205 02050205 02050205     ................
 8011478:	02050205 02050205 02050205 02050205     ................
 8011488:	02050205 02050205 02050205 02050205     ................
 8011498:	02050205 02050205 02050205 02060205     ................
 80114a8:	02060206 02060206 02060206 02060206     ................
 80114b8:	02060206 02060206 02060206 02060206     ................
 80114c8:	02060206 02060206 02060206 02060206     ................
 80114d8:	02060206 02060206 02060206 02060206     ................
 80114e8:	02060206 02060206 02060206 02060206     ................
 80114f8:	02060206 02060206 02060206 02060206     ................
 8011508:	02060206 02060206 02060206 02060206     ................
 8011518:	02060206 02060206 02060206 02060206     ................
 8011528:	02060206 02060206 02060206 02060206     ................
 8011538:	02060206 02060206 02070206 02070207     ................
 8011548:	02070207 02070207 02070207 02070207     ................
 8011558:	02070207 02070207 02070207 02070207     ................
 8011568:	02070207 02070207 02070207 02070207     ................
 8011578:	02070207 02070207 02070207 02070207     ................
 8011588:	02070207 02070207 02070207 02070207     ................
 8011598:	02070207 02070207 02070207 02070207     ................
 80115a8:	02070207 02070207 02070207 02070207     ................
 80115b8:	02070207 02070207 02070207 02070207     ................
 80115c8:	02070207 02070207 02070207 02070207     ................
 80115d8:	02070207 02080207 02080208 02080208     ................
 80115e8:	02080208 02080208 02080208 02080208     ................
 80115f8:	02080208 02080208 02080208 02080208     ................
 8011608:	02080208 02080208 02080208 02080208     ................
 8011618:	02080208 02080208 02080208 02080208     ................
 8011628:	02080208 02080208 02080208 02080208     ................
 8011638:	02080208 02080208 02080208 02080208     ................
 8011648:	02080208 02080208 02080208 02080208     ................
 8011658:	02080208 02080208 02080208 02080208     ................
 8011668:	02080208 02080208 02080208 02080208     ................
 8011678:	02080208 02090209 02090209 02090209     ................
 8011688:	02090209 02090209 02090209 02090209     ................
 8011698:	02090209 02090209 02090209 02090209     ................
 80116a8:	02090209 02090209 02090209 02090209     ................
 80116b8:	02090209 02090209 02090209 02090209     ................
 80116c8:	02090209 02090209 02090209 02090209     ................
 80116d8:	02090209 02090209 02090209 02090209     ................
 80116e8:	02090209 02090209 02090209 02090209     ................
 80116f8:	02090209 02090209 02090209 02090209     ................
 8011708:	02090209 02090209 02090209 02090209     ................
 8011718:	020a020a 020a020a 020a020a 020a020a     ................
 8011728:	020a020a 020a020a 020a020a 020a020a     ................
 8011738:	020a020a 020a020a 020a020a 020a020a     ................
 8011748:	020a020a 020a020a 020a020a 020a020a     ................
 8011758:	020a020a 020a020a 020a020a 020a020a     ................
 8011768:	020a020a 020a020a 020a020a 020a020a     ................
 8011778:	020a020a 020a020a 020a020a 020a020a     ................
 8011788:	020a020a 020a020a 020a020a 020a020a     ................
 8011798:	020a020a 020a020a 020a020a 020a020a     ................
 80117a8:	020a020a 020a020a 020a020a 020a020a     ................
 80117b8:	020b020b 020b020b 020b020b 020b020b     ................
 80117c8:	020b020b 020b020b 020b020b 020b020b     ................
 80117d8:	020b020b 020b020b 020b020b 020b020b     ................
 80117e8:	020b020b 020b020b 020b020b 020b020b     ................
 80117f8:	020b020b 020b020b 020b020b 020b020b     ................
 8011808:	020b020b 020b020b 020b020b 020b020b     ................
 8011818:	020b020b 020b020b 020b020b 020b020b     ................
 8011828:	020b020b 020b020b 020b020b 020b020b     ................
 8011838:	020b020b 020b020b 020b020b 020b020b     ................
 8011848:	020b020b 020b020b 020b020b 020b020b     ................
 8011858:	020c020c 020c020c 020c020c 020c020c     ................
 8011868:	020c020c 020c020c 020c020c 020c020c     ................
 8011878:	020c020c 020c020c 020c020c 020c020c     ................
 8011888:	020c020c 020c020c 020c020c 020c020c     ................
 8011898:	020c020c 020c020c 020c020c 020c020c     ................
 80118a8:	020c020c 020c020c 020c020c 020c020c     ................
 80118b8:	020c020c 020c020c 020c020c 020c020c     ................
 80118c8:	020c020c 020c020c 020c020c 020c020c     ................
 80118d8:	020c020c 020c020c 020c020c 020c020c     ................
 80118e8:	020c020c 020c020c 020c020c 020c020c     ................
 80118f8:	020d020d 020d020d 020d020d 020d020d     ................
 8011908:	020d020d 020d020d 020d020d 020d020d     ................
 8011918:	020d020d 020d020d 020d020d 020d020d     ................
 8011928:	020d020d 020d020d 020d020d 020d020d     ................
 8011938:	020d020d 020d020d 020d020d 020d020d     ................
 8011948:	020d020d 020d020d 020d020d 020d020d     ................
 8011958:	020d020d 020d020d 020d020d 020d020d     ................
 8011968:	020d020d 020d020d 020d020d 020d020d     ................
 8011978:	020d020d 020d020d 020d020d 020d020d     ................
 8011988:	020d020d 020d020d 020d020d 020d020d     ................
 8011998:	020e020d 020e020e 020e020e 020e020e     ................
 80119a8:	020e020e 020e020e 020e020e 020e020e     ................
 80119b8:	020e020e 020e020e 020e020e 020e020e     ................
 80119c8:	020e020e 020e020e 020e020e 020e020e     ................
 80119d8:	020e020e 020e020e 020e020e 020e020e     ................
 80119e8:	020e020e 020e020e 020e020e 020e020e     ................
 80119f8:	020e020e 020e020e 020e020e 020e020e     ................
 8011a08:	020e020e 020e020e 020e020e 020e020e     ................
 8011a18:	020e020e 020e020e 020e020e 020e020e     ................
 8011a28:	020e020e 020e020e 020e020e 020e020e     ................
 8011a38:	020e020e 020f020f 020f020f 020f020f     ................
 8011a48:	020f020f 020f020f 020f020f 020f020f     ................
 8011a58:	020f020f 020f020f 020f020f 020f020f     ................
 8011a68:	020f020f 020f020f 020f020f 020f020f     ................
 8011a78:	020f020f 020f020f 020f020f 020f020f     ................
 8011a88:	020f020f 020f020f 020f020f 020f020f     ................
 8011a98:	020f020f 020f020f 020f020f 020f020f     ................
 8011aa8:	020f020f 020f020f 020f020f 020f020f     ................
 8011ab8:	020f020f 020f020f 020f020f 020f020f     ................
 8011ac8:	020f020f 020f020f 020f020f 020f020f     ................
 8011ad8:	020f020f 020f020f 02100210 02100210     ................
 8011ae8:	02100210 02100210 02100210 02100210     ................
 8011af8:	02100210 02100210 02100210 02100210     ................
 8011b08:	02100210 02100210 02100210 02100210     ................
 8011b18:	02100210 02100210 02100210 02100210     ................
 8011b28:	02100210 02100210 02100210 02100210     ................
 8011b38:	02100210 02100210 02100210 02100210     ................
 8011b48:	02100210 02100210 02100210 02100210     ................
 8011b58:	02100210 02100210 02100210 02100210     ................
 8011b68:	02100210 02100210 02100210 02100210     ................
 8011b78:	02100210 02100210 02100210 02110211     ................
 8011b88:	02110211 02110211 02110211 02110211     ................
 8011b98:	02110211 02110211 02110211 02110211     ................
 8011ba8:	02110211 02110211 02110211 02110211     ................
 8011bb8:	02110211 02110211 02110211 02110211     ................
 8011bc8:	02110211 02110211 02110211 02110211     ................
 8011bd8:	02110211 02110211 02110211 02110211     ................
 8011be8:	02110211 02110211 02110211 02110211     ................
 8011bf8:	02110211 02110211 02110211 02110211     ................
 8011c08:	02110211 02110211 02110211 02110211     ................
 8011c18:	02110211 02110211 02110211 02110211     ................
 8011c28:	02120211 02120212 02120212 02120212     ................
 8011c38:	02120212 02120212 02120212 02120212     ................
 8011c48:	02120212 02120212 02120212 02120212     ................
 8011c58:	02120212 02120212 02120212 02120212     ................
 8011c68:	02120212 02120212 02120212 02120212     ................
 8011c78:	02120212 02120212 02120212 02120212     ................
 8011c88:	02120212 02120212 02120212 02120212     ................
 8011c98:	02120212 02120212 02120212 02120212     ................
 8011ca8:	02120212 02120212 02120212 02120212     ................
 8011cb8:	02120212 02120212 02120212 02120212     ................
 8011cc8:	02120212 02120212 02130213 02130213     ................
 8011cd8:	02130213 02130213 02130213 02130213     ................
 8011ce8:	02130213 02130213 02130213 02130213     ................
 8011cf8:	02130213 02130213 02130213 02130213     ................
 8011d08:	02130213 02130213 02130213 02130213     ................
 8011d18:	02130213 02130213 02130213 02130213     ................
 8011d28:	02130213 02130213 02130213 02130213     ................
 8011d38:	02130213 02130213 02130213 02130213     ................
 8011d48:	02130213 02130213 02130213 02130213     ................
 8011d58:	02130213 02130213 02130213 02130213     ................
 8011d68:	02130213 02130213 02130213 02130213     ................
 8011d78:	02140214 02140214 02140214 02140214     ................
 8011d88:	02140214 02140214 02140214 02140214     ................
 8011d98:	02140214 02140214 02140214 02140214     ................
 8011da8:	02140214 02140214 02140214 02140214     ................
 8011db8:	02140214 02140214 02140214 02140214     ................
 8011dc8:	02140214 02140214 02140214 02140214     ................
 8011dd8:	02140214 02140214 02140214 02140214     ................
 8011de8:	02140214 02140214 02140214 02140214     ................
 8011df8:	02140214 02140214 02140214 02140214     ................
 8011e08:	02140214 02140214 02140214 02140214     ................
 8011e18:	02140214 02140214 02150215 02150215     ................
 8011e28:	02150215 02150215 02150215 02150215     ................
 8011e38:	02150215 02150215 02150215 02150215     ................
 8011e48:	02150215 02150215 02150215 02150215     ................
 8011e58:	02150215 02150215 02150215 02150215     ................
 8011e68:	02150215 02150215 02150215 02150215     ................
 8011e78:	02150215 02150215 02150215 02150215     ................
 8011e88:	02150215 02150215 02150215 02150215     ................
 8011e98:	02150215 02150215 02150215 02150215     ................
 8011ea8:	02150215 02150215 02150215 02150215     ................
 8011eb8:	02150215 02150215 02150215 02150215     ................
 8011ec8:	02160215 02160216 02160216 02160216     ................
 8011ed8:	02160216 02160216 02160216 02160216     ................
 8011ee8:	02160216 02160216 02160216 02160216     ................
 8011ef8:	02160216 02160216 02160216 02160216     ................
 8011f08:	02160216 02160216 02160216 02160216     ................
 8011f18:	02160216 02160216 02160216 02160216     ................
 8011f28:	02160216 02160216 02160216 02160216     ................
 8011f38:	02160216 02160216 02160216 02160216     ................
 8011f48:	02160216 02160216 02160216 02160216     ................
 8011f58:	02160216 02160216 02160216 02160216     ................
 8011f68:	02160216 02160216 02160216 02170217     ................
 8011f78:	02170217 02170217 02170217 02170217     ................
 8011f88:	02170217 02170217 02170217 02170217     ................
 8011f98:	02170217 02170217 02170217 02170217     ................
 8011fa8:	02170217 02170217 02170217 02170217     ................
 8011fb8:	02170217 02170217 02170217 02170217     ................
 8011fc8:	02170217 02170217 02170217 02170217     ................
 8011fd8:	02170217 02170217 02170217 02170217     ................
 8011fe8:	02170217 02170217 02170217 02170217     ................
 8011ff8:	02170217 02170217 02170217 02170217     ................
 8012008:	02170217 02170217 02170217 02170217     ................
 8012018:	02170217 02170217 02180218 02180218     ................
 8012028:	02180218 02180218 02180218 02180218     ................
 8012038:	02180218 02180218 02180218 02180218     ................
 8012048:	02180218 02180218 02180218 02180218     ................
 8012058:	02180218 02180218 02180218 02180218     ................
 8012068:	02180218 02180218 02180218 02180218     ................
 8012078:	02180218 02180218 02180218 02180218     ................
 8012088:	02180218 02180218 02180218 02180218     ................
 8012098:	02180218 02180218 02180218 02180218     ................
 80120a8:	02180218 02180218 02180218 02180218     ................
 80120b8:	02180218 02180218 02180218 02180218     ................
 80120c8:	02180218 02190218 02190219 02190219     ................
 80120d8:	02190219 02190219 02190219 02190219     ................
 80120e8:	02190219 02190219 02190219 02190219     ................
 80120f8:	02190219 02190219 02190219 02190219     ................
 8012108:	02190219 02190219 02190219 02190219     ................
 8012118:	02190219 02190219 02190219 02190219     ................
 8012128:	02190219 02190219 02190219 02190219     ................
 8012138:	02190219 02190219 02190219 02190219     ................
 8012148:	02190219 02190219 02190219 02190219     ................
 8012158:	02190219 02190219 02190219 02190219     ................
 8012168:	02190219 02190219 02190219 02190219     ................
 8012178:	02190219 021a021a 021a021a 021a021a     ................
 8012188:	021a021a 021a021a 021a021a 021a021a     ................
 8012198:	021a021a 021a021a 021a021a 021a021a     ................
 80121a8:	021a021a 021a021a 021a021a 021a021a     ................
 80121b8:	021a021a 021a021a 021a021a 021a021a     ................
 80121c8:	021a021a 021a021a 021a021a 021a021a     ................
 80121d8:	021a021a 021a021a 021a021a 021a021a     ................
 80121e8:	021a021a 021a021a 021a021a 021a021a     ................
 80121f8:	021a021a 021a021a 021a021a 021a021a     ................
 8012208:	021a021a 021a021a 021a021a 021a021a     ................
 8012218:	021a021a 021a021a 021a021a 021a021a     ................
 8012228:	021a021a 021b021b 021b021b 021b021b     ................
 8012238:	021b021b 021b021b 021b021b 021b021b     ................
 8012248:	021b021b 021b021b 021b021b 021b021b     ................
 8012258:	021b021b 021b021b 021b021b 021b021b     ................
 8012268:	021b021b 021b021b 021b021b 021b021b     ................
 8012278:	021b021b 021b021b 021b021b 021b021b     ................
 8012288:	021b021b 021b021b 021b021b 021b021b     ................
 8012298:	021b021b 021b021b 021b021b 021b021b     ................
 80122a8:	021b021b 021b021b 021b021b 021b021b     ................
 80122b8:	021b021b 021b021b 021b021b 021b021b     ................
 80122c8:	021b021b 021b021b 021b021b 021b021b     ................
 80122d8:	021b021b 021c021c 021c021c 021c021c     ................
 80122e8:	021c021c 021c021c 021c021c 021c021c     ................
 80122f8:	021c021c 021c021c 021c021c 021c021c     ................
 8012308:	021c021c 021c021c 021c021c 021c021c     ................
 8012318:	021c021c 021c021c 021c021c 021c021c     ................
 8012328:	021c021c 021c021c 021c021c 021c021c     ................
 8012338:	021c021c 021c021c 021c021c 021c021c     ................
 8012348:	021c021c 021c021c 021c021c 021c021c     ................
 8012358:	021c021c 021c021c 021c021c 021c021c     ................
 8012368:	021c021c 021c021c 021c021c 021c021c     ................
 8012378:	021c021c 021c021c 021c021c 021c021c     ................
 8012388:	021c021c 021c021c 021d021d 021d021d     ................
 8012398:	021d021d 021d021d 021d021d 021d021d     ................
 80123a8:	021d021d 021d021d 021d021d 021d021d     ................
 80123b8:	021d021d 021d021d 021d021d 021d021d     ................
 80123c8:	021d021d 021d021d 021d021d 021d021d     ................
 80123d8:	021d021d 021d021d 021d021d 021d021d     ................
 80123e8:	021d021d 021d021d 021d021d 021d021d     ................
 80123f8:	021d021d 021d021d 021d021d 021d021d     ................
 8012408:	021d021d 021d021d 021d021d 021d021d     ................
 8012418:	021d021d 021d021d 021d021d 021d021d     ................
 8012428:	021d021d 021d021d 021d021d 021d021d     ................
 8012438:	021d021d 021d021d 021e021d 021e021e     ................
 8012448:	021e021e 021e021e 021e021e 021e021e     ................
 8012458:	021e021e 021e021e 021e021e 021e021e     ................
 8012468:	021e021e 021e021e 021e021e 021e021e     ................
 8012478:	021e021e 021e021e 021e021e 021e021e     ................
 8012488:	021e021e 021e021e 021e021e 021e021e     ................
 8012498:	021e021e 021e021e 021e021e 021e021e     ................
 80124a8:	021e021e 021e021e 021e021e 021e021e     ................
 80124b8:	021e021e 021e021e 021e021e 021e021e     ................
 80124c8:	021e021e 021e021e 021e021e 021e021e     ................
 80124d8:	021e021e 021e021e 021e021e 021e021e     ................
 80124e8:	021e021e 021e021e 021e021e 021e021e     ................
 80124f8:	021f021f 021f021f 021f021f 021f021f     ................
 8012508:	021f021f 021f021f 021f021f 021f021f     ................
 8012518:	021f021f 021f021f 021f021f 021f021f     ................
 8012528:	021f021f 021f021f 021f021f 021f021f     ................
 8012538:	021f021f 021f021f 021f021f 021f021f     ................
 8012548:	021f021f 021f021f 021f021f 021f021f     ................
 8012558:	021f021f 021f021f 021f021f 021f021f     ................
 8012568:	021f021f 021f021f 021f021f 021f021f     ................
 8012578:	021f021f 021f021f 021f021f 021f021f     ................
 8012588:	021f021f 021f021f 021f021f 021f021f     ................
 8012598:	021f021f 021f021f 021f021f 021f021f     ................
 80125a8:	021f021f 0220021f 02200220 02200220     ...... . . . . .
 80125b8:	02200220 02200220 02200220 02200220      . . . . . . . .
 80125c8:	02200220 02200220 02200220 02200220      . . . . . . . .
 80125d8:	02200220 02200220 02200220 02200220      . . . . . . . .
 80125e8:	02200220 02200220 02200220 02200220      . . . . . . . .
 80125f8:	02200220 02200220 02200220 02200220      . . . . . . . .
 8012608:	02200220 02200220 02200220 02200220      . . . . . . . .
 8012618:	02200220 02200220 02200220 02200220      . . . . . . . .
 8012628:	02200220 02200220 02200220 02200220      . . . . . . . .
 8012638:	02200220 02200220 02200220 02200220      . . . . . . . .
 8012648:	02200220 02200220 02200220 02200220      . . . . . . . .
 8012658:	02200220 02200220 02200220 02210220      . . . . . . .!.
 8012668:	02210221 02210221 02210221 02210221     !.!.!.!.!.!.!.!.
 8012678:	02210221 02210221 02210221 02210221     !.!.!.!.!.!.!.!.
 8012688:	02210221 02210221 02210221 02210221     !.!.!.!.!.!.!.!.
 8012698:	02210221 02210221 02210221 02210221     !.!.!.!.!.!.!.!.
 80126a8:	02210221 02210221 02210221 02210221     !.!.!.!.!.!.!.!.
 80126b8:	02210221 02210221 02210221 02210221     !.!.!.!.!.!.!.!.
 80126c8:	02210221 02210221 02210221 02210221     !.!.!.!.!.!.!.!.
 80126d8:	02210221 02210221 02210221 02210221     !.!.!.!.!.!.!.!.
 80126e8:	02210221 02210221 02210221 02210221     !.!.!.!.!.!.!.!.
 80126f8:	02210221 02210221 02210221 02210221     !.!.!.!.!.!.!.!.
 8012708:	02210221 02210221 02210221 02210221     !.!.!.!.!.!.!.!.
 8012718:	02210221 02210221 02220222 02220222     !.!.!.!.".".".".
 8012728:	02220222 02220222 02220222 02220222     ".".".".".".".".
 8012738:	02220222 02220222 02220222 02220222     ".".".".".".".".
 8012748:	02220222 02220222 02220222 02220222     ".".".".".".".".
 8012758:	02220222 02220222 02220222 02220222     ".".".".".".".".
 8012768:	02220222 02220222 02220222 02220222     ".".".".".".".".
 8012778:	02220222 02220222 02220222 02220222     ".".".".".".".".
 8012788:	02220222 02220222 02220222 02220222     ".".".".".".".".
 8012798:	02220222 02220222 02220222 02220222     ".".".".".".".".
 80127a8:	02220222 02220222 02220222 02220222     ".".".".".".".".
 80127b8:	02220222 02220222 02220222 02220222     ".".".".".".".".
 80127c8:	02220222 02220222 02220222 02220222     ".".".".".".".".
 80127d8:	02220222 02230223 02230223 02230223     ".".#.#.#.#.#.#.
 80127e8:	02230223 02230223 02230223 02230223     #.#.#.#.#.#.#.#.
 80127f8:	02230223 02230223 02230223 02230223     #.#.#.#.#.#.#.#.
 8012808:	02230223 02230223 02230223 02230223     #.#.#.#.#.#.#.#.
 8012818:	02230223 02230223 02230223 02230223     #.#.#.#.#.#.#.#.
 8012828:	02230223 02230223 02230223 02230223     #.#.#.#.#.#.#.#.
 8012838:	02230223 02230223 02230223 02230223     #.#.#.#.#.#.#.#.
 8012848:	02230223 02230223 02230223 02230223     #.#.#.#.#.#.#.#.
 8012858:	02230223 02230223 02230223 02230223     #.#.#.#.#.#.#.#.
 8012868:	02230223 02230223 02230223 02230223     #.#.#.#.#.#.#.#.
 8012878:	02230223 02230223 02230223 02230223     #.#.#.#.#.#.#.#.
 8012888:	02230223 02230223 02230223 02230223     #.#.#.#.#.#.#.#.
 8012898:	02240224 02240224 02240224 02240224     $.$.$.$.$.$.$.$.
 80128a8:	02240224 02240224 02240224 02240224     $.$.$.$.$.$.$.$.
 80128b8:	02240224 02240224 02240224 02240224     $.$.$.$.$.$.$.$.
 80128c8:	02240224 02240224 02240224 02240224     $.$.$.$.$.$.$.$.
 80128d8:	02240224 02240224 02240224 02240224     $.$.$.$.$.$.$.$.
 80128e8:	02240224 02240224 02240224 02240224     $.$.$.$.$.$.$.$.
 80128f8:	02240224 02240224 02240224 02240224     $.$.$.$.$.$.$.$.
 8012908:	02240224 02240224 02240224 02240224     $.$.$.$.$.$.$.$.
 8012918:	02240224 02240224 02240224 02240224     $.$.$.$.$.$.$.$.
 8012928:	02240224 02240224 02240224 02240224     $.$.$.$.$.$.$.$.
 8012938:	02240224 02240224 02240224 02240224     $.$.$.$.$.$.$.$.
 8012948:	02240224 02240224 02240224 02250224     $.$.$.$.$.$.$.%.
 8012958:	02250225 02250225 02250225 02250225     %.%.%.%.%.%.%.%.
 8012968:	02250225 02250225 02250225 02250225     %.%.%.%.%.%.%.%.
 8012978:	02250225 02250225 02250225 02250225     %.%.%.%.%.%.%.%.
 8012988:	02250225 02250225 02250225 02250225     %.%.%.%.%.%.%.%.
 8012998:	02250225 02250225 02250225 02250225     %.%.%.%.%.%.%.%.
 80129a8:	02250225 02250225 02250225 02250225     %.%.%.%.%.%.%.%.
 80129b8:	02250225 02250225 02250225 02250225     %.%.%.%.%.%.%.%.
 80129c8:	02250225 02250225 02250225 02250225     %.%.%.%.%.%.%.%.
 80129d8:	02250225 02250225 02250225 02250225     %.%.%.%.%.%.%.%.
 80129e8:	02250225 02250225 02250225 02250225     %.%.%.%.%.%.%.%.
 80129f8:	02250225 02250225 02250225 02250225     %.%.%.%.%.%.%.%.
 8012a08:	02250225 02250225 02250225 02260225     %.%.%.%.%.%.%.&.
 8012a18:	02260226 02260226 02260226 02260226     &.&.&.&.&.&.&.&.
 8012a28:	02260226 02260226 02260226 02260226     &.&.&.&.&.&.&.&.
 8012a38:	02260226 02260226 02260226 02260226     &.&.&.&.&.&.&.&.
 8012a48:	02260226 02260226 02260226 02260226     &.&.&.&.&.&.&.&.
 8012a58:	02260226 02260226 02260226 02260226     &.&.&.&.&.&.&.&.
 8012a68:	02260226 02260226 02260226 02260226     &.&.&.&.&.&.&.&.
 8012a78:	02260226 02260226 02260226 02260226     &.&.&.&.&.&.&.&.
 8012a88:	02260226 02260226 02260226 02260226     &.&.&.&.&.&.&.&.
 8012a98:	02260226 02260226 02260226 02260226     &.&.&.&.&.&.&.&.
 8012aa8:	02260226 02260226 02260226 02260226     &.&.&.&.&.&.&.&.
 8012ab8:	02260226 02260226 02260226 02260226     &.&.&.&.&.&.&.&.
 8012ac8:	02260226 02260226 02260226 02260226     &.&.&.&.&.&.&.&.
 8012ad8:	02270227 02270227 02270227 02270227     '.'.'.'.'.'.'.'.
 8012ae8:	02270227 02270227 02270227 02270227     '.'.'.'.'.'.'.'.
 8012af8:	02270227 02270227 02270227 02270227     '.'.'.'.'.'.'.'.
 8012b08:	02270227 02270227 02270227 02270227     '.'.'.'.'.'.'.'.
 8012b18:	02270227 02270227 02270227 02270227     '.'.'.'.'.'.'.'.
 8012b28:	02270227 02270227 02270227 02270227     '.'.'.'.'.'.'.'.
 8012b38:	02270227 02270227 02270227 02270227     '.'.'.'.'.'.'.'.
 8012b48:	02270227 02270227 02270227 02270227     '.'.'.'.'.'.'.'.
 8012b58:	02270227 02270227 02270227 02270227     '.'.'.'.'.'.'.'.
 8012b68:	02270227 02270227 02270227 02270227     '.'.'.'.'.'.'.'.
 8012b78:	02270227 02270227 02270227 02270227     '.'.'.'.'.'.'.'.
 8012b88:	02270227 02270227 02270227 02270227     '.'.'.'.'.'.'.'.
 8012b98:	02270227 02280228 02280228 02280228     '.'.(.(.(.(.(.(.
 8012ba8:	02280228 02280228 02280228 02280228     (.(.(.(.(.(.(.(.
 8012bb8:	02280228 02280228 02280228 02280228     (.(.(.(.(.(.(.(.
 8012bc8:	02280228 02280228 02280228 02280228     (.(.(.(.(.(.(.(.
 8012bd8:	02280228 02280228 02280228 02280228     (.(.(.(.(.(.(.(.
 8012be8:	02280228 02280228 02280228 02280228     (.(.(.(.(.(.(.(.
 8012bf8:	02280228 02280228 02280228 02280228     (.(.(.(.(.(.(.(.
 8012c08:	02280228 02280228 02280228 02280228     (.(.(.(.(.(.(.(.
 8012c18:	02280228 02280228 02280228 02280228     (.(.(.(.(.(.(.(.
 8012c28:	02280228 02280228 02280228 02280228     (.(.(.(.(.(.(.(.
 8012c38:	02280228 02280228 02280228 02280228     (.(.(.(.(.(.(.(.
 8012c48:	02280228 02280228 02280228 02280228     (.(.(.(.(.(.(.(.
 8012c58:	02280228 02280228 02290228 02290229     (.(.(.(.(.).).).
 8012c68:	02290229 02290229 02290229 02290229     ).).).).).).).).
 8012c78:	02290229 02290229 02290229 02290229     ).).).).).).).).
 8012c88:	02290229 02290229 02290229 02290229     ).).).).).).).).
 8012c98:	02290229 02290229 02290229 02290229     ).).).).).).).).
 8012ca8:	02290229 02290229 02290229 02290229     ).).).).).).).).
 8012cb8:	02290229 02290229 02290229 02290229     ).).).).).).).).
 8012cc8:	02290229 02290229 02290229 02290229     ).).).).).).).).
 8012cd8:	02290229 02290229 02290229 02290229     ).).).).).).).).
 8012ce8:	02290229 02290229 02290229 02290229     ).).).).).).).).
 8012cf8:	02290229 02290229 02290229 02290229     ).).).).).).).).
 8012d08:	02290229 02290229 02290229 02290229     ).).).).).).).).
 8012d18:	02290229 02290229 02290229 02290229     ).).).).).).).).
 8012d28:	022a0229 022a022a 022a022a 022a022a     ).*.*.*.*.*.*.*.
 8012d38:	022a022a 022a022a 022a022a 022a022a     *.*.*.*.*.*.*.*.
 8012d48:	022a022a 022a022a 022a022a 022a022a     *.*.*.*.*.*.*.*.
 8012d58:	022a022a 022a022a 022a022a 022a022a     *.*.*.*.*.*.*.*.
 8012d68:	022a022a 022a022a 022a022a 022a022a     *.*.*.*.*.*.*.*.
 8012d78:	022a022a 022a022a 022a022a 022a022a     *.*.*.*.*.*.*.*.
 8012d88:	022a022a 022a022a 022a022a 022a022a     *.*.*.*.*.*.*.*.
 8012d98:	022a022a 022a022a 022a022a 022a022a     *.*.*.*.*.*.*.*.
 8012da8:	022a022a 022a022a 022a022a 022a022a     *.*.*.*.*.*.*.*.
 8012db8:	022a022a 022a022a 022a022a 022a022a     *.*.*.*.*.*.*.*.
 8012dc8:	022a022a 022a022a 022a022a 022a022a     *.*.*.*.*.*.*.*.
 8012dd8:	022a022a 022a022a 022a022a 022a022a     *.*.*.*.*.*.*.*.
 8012de8:	022a022a 022a022a 022b022a 022b022b     *.*.*.*.*.+.+.+.
 8012df8:	022b022b 022b022b 022b022b 022b022b     +.+.+.+.+.+.+.+.
 8012e08:	022b022b 022b022b 022b022b 022b022b     +.+.+.+.+.+.+.+.
 8012e18:	022b022b 022b022b 022b022b 022b022b     +.+.+.+.+.+.+.+.
 8012e28:	022b022b 022b022b 022b022b 022b022b     +.+.+.+.+.+.+.+.
 8012e38:	022b022b 022b022b 022b022b 022b022b     +.+.+.+.+.+.+.+.
 8012e48:	022b022b 022b022b 022b022b 022b022b     +.+.+.+.+.+.+.+.
 8012e58:	022b022b 022b022b 022b022b 022b022b     +.+.+.+.+.+.+.+.
 8012e68:	022b022b 022b022b 022b022b 022b022b     +.+.+.+.+.+.+.+.
 8012e78:	022b022b 022b022b 022b022b 022b022b     +.+.+.+.+.+.+.+.
 8012e88:	022b022b 022b022b 022b022b 022b022b     +.+.+.+.+.+.+.+.
 8012e98:	022b022b 022b022b 022b022b 022b022b     +.+.+.+.+.+.+.+.
 8012ea8:	022b022b 022b022b 022b022b 022b022b     +.+.+.+.+.+.+.+.
 8012eb8:	022b022b 022c022b 022c022c 022c022c     +.+.+.,.,.,.,.,.
 8012ec8:	022c022c 022c022c 022c022c 022c022c     ,.,.,.,.,.,.,.,.
 8012ed8:	022c022c 022c022c 022c022c 022c022c     ,.,.,.,.,.,.,.,.
 8012ee8:	022c022c 022c022c 022c022c 022c022c     ,.,.,.,.,.,.,.,.
 8012ef8:	022c022c 022c022c 022c022c 022c022c     ,.,.,.,.,.,.,.,.
 8012f08:	022c022c 022c022c 022c022c 022c022c     ,.,.,.,.,.,.,.,.
 8012f18:	022c022c 022c022c 022c022c 022c022c     ,.,.,.,.,.,.,.,.
 8012f28:	022c022c 022c022c 022c022c 022c022c     ,.,.,.,.,.,.,.,.
 8012f38:	022c022c 022c022c 022c022c 022c022c     ,.,.,.,.,.,.,.,.
 8012f48:	022c022c 022c022c 022c022c 022c022c     ,.,.,.,.,.,.,.,.
 8012f58:	022c022c 022c022c 022c022c 022c022c     ,.,.,.,.,.,.,.,.
 8012f68:	022c022c 022c022c 022c022c 022c022c     ,.,.,.,.,.,.,.,.
 8012f78:	022c022c 022c022c 022c022c 022c022c     ,.,.,.,.,.,.,.,.
 8012f88:	022c022c 022d022d 022d022d 022d022d     ,.,.-.-.-.-.-.-.
 8012f98:	022d022d 022d022d 022d022d 022d022d     -.-.-.-.-.-.-.-.
 8012fa8:	022d022d 022d022d 022d022d 022d022d     -.-.-.-.-.-.-.-.
 8012fb8:	022d022d 022d022d 022d022d 022d022d     -.-.-.-.-.-.-.-.
 8012fc8:	022d022d 022d022d 022d022d 022d022d     -.-.-.-.-.-.-.-.
 8012fd8:	022d022d 022d022d 022d022d 022d022d     -.-.-.-.-.-.-.-.
 8012fe8:	022d022d 022d022d 022d022d 022d022d     -.-.-.-.-.-.-.-.
 8012ff8:	022d022d 022d022d 022d022d 022d022d     -.-.-.-.-.-.-.-.
 8013008:	022d022d 022d022d 022d022d 022d022d     -.-.-.-.-.-.-.-.
 8013018:	022d022d 022d022d 022d022d 022d022d     -.-.-.-.-.-.-.-.
 8013028:	022d022d 022d022d 022d022d 022d022d     -.-.-.-.-.-.-.-.
 8013038:	022d022d 022d022d 022d022d 022d022d     -.-.-.-.-.-.-.-.
 8013048:	022d022d 022d022d 022d022d 022d022d     -.-.-.-.-.-.-.-.
 8013058:	022d022d 022e022e 022e022e 022e022e     -.-.............
 8013068:	022e022e 022e022e 022e022e 022e022e     ................
 8013078:	022e022e 022e022e 022e022e 022e022e     ................
 8013088:	022e022e 022e022e 022e022e 022e022e     ................
 8013098:	022e022e 022e022e 022e022e 022e022e     ................
 80130a8:	022e022e 022e022e 022e022e 022e022e     ................
 80130b8:	022e022e 022e022e 022e022e 022e022e     ................
 80130c8:	022e022e 022e022e 022e022e 022e022e     ................
 80130d8:	022e022e 022e022e 022e022e 022e022e     ................
 80130e8:	022e022e 022e022e 022e022e 022e022e     ................
 80130f8:	022e022e 022e022e 022e022e 022e022e     ................
 8013108:	022e022e 022e022e 022e022e 022e022e     ................
 8013118:	022e022e 022e022e 022e022e 022e022e     ................
 8013128:	022e022e 022f022e 022f022f 022f022f     ....../././././.
 8013138:	022f022f 022f022f 022f022f 022f022f     /./././././././.
 8013148:	022f022f 022f022f 022f022f 022f022f     /./././././././.
 8013158:	022f022f 022f022f 022f022f 022f022f     /./././././././.
 8013168:	022f022f 022f022f 022f022f 022f022f     /./././././././.
 8013178:	022f022f 022f022f 022f022f 022f022f     /./././././././.
 8013188:	022f022f 022f022f 022f022f 022f022f     /./././././././.
 8013198:	022f022f 022f022f 022f022f 022f022f     /./././././././.
 80131a8:	022f022f 022f022f 022f022f 022f022f     /./././././././.
 80131b8:	022f022f 022f022f 022f022f 022f022f     /./././././././.
 80131c8:	022f022f 022f022f 022f022f 022f022f     /./././././././.
 80131d8:	022f022f 022f022f 022f022f 022f022f     /./././././././.
 80131e8:	022f022f 022f022f 022f022f 022f022f     /./././././././.
 80131f8:	022f022f 022f022f 022f022f 02300230     /./././././.0.0.
 8013208:	02300230 02300230 02300230 02300230     0.0.0.0.0.0.0.0.
 8013218:	02300230 02300230 02300230 02300230     0.0.0.0.0.0.0.0.
 8013228:	02300230 02300230 02300230 02300230     0.0.0.0.0.0.0.0.
 8013238:	02300230 02300230 02300230 02300230     0.0.0.0.0.0.0.0.
 8013248:	02300230 02300230 02300230 02300230     0.0.0.0.0.0.0.0.
 8013258:	02300230 02300230 02300230 02300230     0.0.0.0.0.0.0.0.
 8013268:	02300230 02300230 02300230 02300230     0.0.0.0.0.0.0.0.
 8013278:	02300230 02300230 02300230 02300230     0.0.0.0.0.0.0.0.
 8013288:	02300230 02300230 02300230 02300230     0.0.0.0.0.0.0.0.
 8013298:	02300230 02300230 02300230 02300230     0.0.0.0.0.0.0.0.
 80132a8:	02300230 02300230 02300230 02300230     0.0.0.0.0.0.0.0.
 80132b8:	02300230 02300230 02300230 02300230     0.0.0.0.0.0.0.0.
 80132c8:	02300230 02300230 02300230 02300230     0.0.0.0.0.0.0.0.
 80132d8:	02300230 02310231 02310231 02310231     0.0.1.1.1.1.1.1.
 80132e8:	02310231 02310231 02310231 02310231     1.1.1.1.1.1.1.1.
 80132f8:	02310231 02310231 02310231 02310231     1.1.1.1.1.1.1.1.
 8013308:	02310231 02310231 02310231 02310231     1.1.1.1.1.1.1.1.
 8013318:	02310231 02310231 02310231 02310231     1.1.1.1.1.1.1.1.
 8013328:	02310231 02310231 02310231 02310231     1.1.1.1.1.1.1.1.
 8013338:	02310231 02310231 02310231 02310231     1.1.1.1.1.1.1.1.
 8013348:	02310231 02310231 02310231 02310231     1.1.1.1.1.1.1.1.
 8013358:	02310231 02310231 02310231 02310231     1.1.1.1.1.1.1.1.
 8013368:	02310231 02310231 02310231 02310231     1.1.1.1.1.1.1.1.
 8013378:	02310231 02310231 02310231 02310231     1.1.1.1.1.1.1.1.
 8013388:	02310231 02310231 02310231 02310231     1.1.1.1.1.1.1.1.
 8013398:	02310231 02310231 02310231 02310231     1.1.1.1.1.1.1.1.
 80133a8:	02310231 02310231 02310231 02320231     1.1.1.1.1.1.1.2.
 80133b8:	02320232 02320232 02320232 02320232     2.2.2.2.2.2.2.2.
 80133c8:	02320232 02320232 02320232 02320232     2.2.2.2.2.2.2.2.
 80133d8:	02320232 02320232 02320232 02320232     2.2.2.2.2.2.2.2.
 80133e8:	02320232 02320232 02320232 02320232     2.2.2.2.2.2.2.2.
 80133f8:	02320232 02320232 02320232 02320232     2.2.2.2.2.2.2.2.
 8013408:	02320232 02320232 02320232 02320232     2.2.2.2.2.2.2.2.
 8013418:	02320232 02320232 02320232 02320232     2.2.2.2.2.2.2.2.
 8013428:	02320232 02320232 02320232 02320232     2.2.2.2.2.2.2.2.
 8013438:	02320232 02320232 02320232 02320232     2.2.2.2.2.2.2.2.
 8013448:	02320232 02320232 02320232 02320232     2.2.2.2.2.2.2.2.
 8013458:	02320232 02320232 02320232 02320232     2.2.2.2.2.2.2.2.
 8013468:	02320232 02320232 02320232 02320232     2.2.2.2.2.2.2.2.
 8013478:	02320232 02320232 02320232 02320232     2.2.2.2.2.2.2.2.
 8013488:	02320232 02320232 02330232 02330233     2.2.2.2.2.3.3.3.
 8013498:	02330233 02330233 02330233 02330233     3.3.3.3.3.3.3.3.
 80134a8:	02330233 02330233 02330233 02330233     3.3.3.3.3.3.3.3.
 80134b8:	02330233 02330233 02330233 02330233     3.3.3.3.3.3.3.3.
 80134c8:	02330233 02330233 02330233 02330233     3.3.3.3.3.3.3.3.
 80134d8:	02330233 02330233 02330233 02330233     3.3.3.3.3.3.3.3.
 80134e8:	02330233 02330233 02330233 02330233     3.3.3.3.3.3.3.3.
 80134f8:	02330233 02330233 02330233 02330233     3.3.3.3.3.3.3.3.
 8013508:	02330233 02330233 02330233 02330233     3.3.3.3.3.3.3.3.
 8013518:	02330233 02330233 02330233 02330233     3.3.3.3.3.3.3.3.
 8013528:	02330233 02330233 02330233 02330233     3.3.3.3.3.3.3.3.
 8013538:	02330233 02330233 02330233 02330233     3.3.3.3.3.3.3.3.
 8013548:	02330233 02330233 02330233 02330233     3.3.3.3.3.3.3.3.
 8013558:	02330233 02330233 02330233 02330233     3.3.3.3.3.3.3.3.
 8013568:	02330233 02330233 02340233 02340234     3.3.3.3.3.4.4.4.
 8013578:	02340234 02340234 02340234 02340234     4.4.4.4.4.4.4.4.
 8013588:	02340234 02340234 02340234 02340234     4.4.4.4.4.4.4.4.
 8013598:	02340234 02340234 02340234 02340234     4.4.4.4.4.4.4.4.
 80135a8:	02340234 02340234 02340234 02340234     4.4.4.4.4.4.4.4.
 80135b8:	02340234 02340234 02340234 02340234     4.4.4.4.4.4.4.4.
 80135c8:	02340234 02340234 02340234 02340234     4.4.4.4.4.4.4.4.
 80135d8:	02340234 02340234 02340234 02340234     4.4.4.4.4.4.4.4.
 80135e8:	02340234 02340234 02340234 02340234     4.4.4.4.4.4.4.4.
 80135f8:	02340234 02340234 02340234 02340234     4.4.4.4.4.4.4.4.
 8013608:	02340234 02340234 02340234 02340234     4.4.4.4.4.4.4.4.
 8013618:	02340234 02340234 02340234 02340234     4.4.4.4.4.4.4.4.
 8013628:	02340234 02340234 02340234 02340234     4.4.4.4.4.4.4.4.
 8013638:	02340234 02340234 02340234 02340234     4.4.4.4.4.4.4.4.
 8013648:	02340234 02340234 02340234 02350235     4.4.4.4.4.4.5.5.
 8013658:	02350235 02350235 02350235 02350235     5.5.5.5.5.5.5.5.
 8013668:	02350235 02350235 02350235 02350235     5.5.5.5.5.5.5.5.
 8013678:	02350235 02350235 02350235 02350235     5.5.5.5.5.5.5.5.
 8013688:	02350235 02350235 02350235 02350235     5.5.5.5.5.5.5.5.
 8013698:	02350235 02350235 02350235 02350235     5.5.5.5.5.5.5.5.
 80136a8:	02350235 02350235 02350235 02350235     5.5.5.5.5.5.5.5.
 80136b8:	02350235 02350235 02350235 02350235     5.5.5.5.5.5.5.5.
 80136c8:	02350235 02350235 02350235 02350235     5.5.5.5.5.5.5.5.
 80136d8:	02350235 02350235 02350235 02350235     5.5.5.5.5.5.5.5.
 80136e8:	02350235 02350235 02350235 02350235     5.5.5.5.5.5.5.5.
 80136f8:	02350235 02350235 02350235 02350235     5.5.5.5.5.5.5.5.
 8013708:	02350235 02350235 02350235 02350235     5.5.5.5.5.5.5.5.
 8013718:	02350235 02350235 02350235 02350235     5.5.5.5.5.5.5.5.
 8013728:	02350235 02350235 02350235 02350235     5.5.5.5.5.5.5.5.
 8013738:	02360235 02360236 02360236 02360236     5.6.6.6.6.6.6.6.
 8013748:	02360236 02360236 02360236 02360236     6.6.6.6.6.6.6.6.
 8013758:	02360236 02360236 02360236 02360236     6.6.6.6.6.6.6.6.
 8013768:	02360236 02360236 02360236 02360236     6.6.6.6.6.6.6.6.
 8013778:	02360236 02360236 02360236 02360236     6.6.6.6.6.6.6.6.
 8013788:	02360236 02360236 02360236 02360236     6.6.6.6.6.6.6.6.
 8013798:	02360236 02360236 02360236 02360236     6.6.6.6.6.6.6.6.
 80137a8:	02360236 02360236 02360236 02360236     6.6.6.6.6.6.6.6.
 80137b8:	02360236 02360236 02360236 02360236     6.6.6.6.6.6.6.6.
 80137c8:	02360236 02360236 02360236 02360236     6.6.6.6.6.6.6.6.
 80137d8:	02360236 02360236 02360236 02360236     6.6.6.6.6.6.6.6.
 80137e8:	02360236 02360236 02360236 02360236     6.6.6.6.6.6.6.6.
 80137f8:	02360236 02360236 02360236 02360236     6.6.6.6.6.6.6.6.
 8013808:	02360236 02360236 02360236 02360236     6.6.6.6.6.6.6.6.
 8013818:	02360236 02360236 02370236 02370237     6.6.6.6.6.7.7.7.
 8013828:	02370237 02370237 02370237 02370237     7.7.7.7.7.7.7.7.
 8013838:	02370237 02370237 02370237 02370237     7.7.7.7.7.7.7.7.
 8013848:	02370237 02370237 02370237 02370237     7.7.7.7.7.7.7.7.
 8013858:	02370237 02370237 02370237 02370237     7.7.7.7.7.7.7.7.
 8013868:	02370237 02370237 02370237 02370237     7.7.7.7.7.7.7.7.
 8013878:	02370237 02370237 02370237 02370237     7.7.7.7.7.7.7.7.
 8013888:	02370237 02370237 02370237 02370237     7.7.7.7.7.7.7.7.
 8013898:	02370237 02370237 02370237 02370237     7.7.7.7.7.7.7.7.
 80138a8:	02370237 02370237 02370237 02370237     7.7.7.7.7.7.7.7.
 80138b8:	02370237 02370237 02370237 02370237     7.7.7.7.7.7.7.7.
 80138c8:	02370237 02370237 02370237 02370237     7.7.7.7.7.7.7.7.
 80138d8:	02370237 02370237 02370237 02370237     7.7.7.7.7.7.7.7.
 80138e8:	02370237 02370237 02370237 02370237     7.7.7.7.7.7.7.7.
 80138f8:	02370237 02370237 02370237 02370237     7.7.7.7.7.7.7.7.
 8013908:	02370237 02380237 02380238 02380238     7.7.7.8.8.8.8.8.
 8013918:	02380238 02380238 02380238 02380238     8.8.8.8.8.8.8.8.
 8013928:	02380238 02380238 02380238 02380238     8.8.8.8.8.8.8.8.
 8013938:	02380238 02380238 02380238 02380238     8.8.8.8.8.8.8.8.
 8013948:	02380238 02380238 02380238 02380238     8.8.8.8.8.8.8.8.
 8013958:	02380238 02380238 02380238 02380238     8.8.8.8.8.8.8.8.
 8013968:	02380238 02380238 02380238 02380238     8.8.8.8.8.8.8.8.
 8013978:	02380238 02380238 02380238 02380238     8.8.8.8.8.8.8.8.
 8013988:	02380238 02380238 02380238 02380238     8.8.8.8.8.8.8.8.
 8013998:	02380238 02380238 02380238 02380238     8.8.8.8.8.8.8.8.
 80139a8:	02380238 02380238 02380238 02380238     8.8.8.8.8.8.8.8.
 80139b8:	02380238 02380238 02380238 02380238     8.8.8.8.8.8.8.8.
 80139c8:	02380238 02380238 02380238 02380238     8.8.8.8.8.8.8.8.
 80139d8:	02380238 02380238 02380238 02380238     8.8.8.8.8.8.8.8.
 80139e8:	02380238 02380238 02380238 02380238     8.8.8.8.8.8.8.8.
 80139f8:	02380238 02390238 02390239 02390239     8.8.8.9.9.9.9.9.
 8013a08:	02390239 02390239 02390239 02390239     9.9.9.9.9.9.9.9.
 8013a18:	02390239 02390239 02390239 02390239     9.9.9.9.9.9.9.9.
 8013a28:	02390239 02390239 02390239 02390239     9.9.9.9.9.9.9.9.
 8013a38:	02390239 02390239 02390239 02390239     9.9.9.9.9.9.9.9.
 8013a48:	02390239 02390239 02390239 02390239     9.9.9.9.9.9.9.9.
 8013a58:	02390239 02390239 02390239 02390239     9.9.9.9.9.9.9.9.
 8013a68:	02390239 02390239 02390239 02390239     9.9.9.9.9.9.9.9.
 8013a78:	02390239 02390239 02390239 02390239     9.9.9.9.9.9.9.9.
 8013a88:	02390239 02390239 02390239 02390239     9.9.9.9.9.9.9.9.
 8013a98:	02390239 02390239 02390239 02390239     9.9.9.9.9.9.9.9.
 8013aa8:	02390239 02390239 02390239 02390239     9.9.9.9.9.9.9.9.
 8013ab8:	02390239 02390239 02390239 02390239     9.9.9.9.9.9.9.9.
 8013ac8:	02390239 02390239 02390239 02390239     9.9.9.9.9.9.9.9.
 8013ad8:	02390239 02390239 02390239 02390239     9.9.9.9.9.9.9.9.
 8013ae8:	02390239 02390239 023a0239 023a023a     9.9.9.9.9.:.:.:.
 8013af8:	023a023a 023a023a 023a023a 023a023a     :.:.:.:.:.:.:.:.
 8013b08:	023a023a 023a023a 023a023a 023a023a     :.:.:.:.:.:.:.:.
 8013b18:	023a023a 023a023a 023a023a 023a023a     :.:.:.:.:.:.:.:.
 8013b28:	023a023a 023a023a 023a023a 023a023a     :.:.:.:.:.:.:.:.
 8013b38:	023a023a 023a023a 023a023a 023a023a     :.:.:.:.:.:.:.:.
 8013b48:	023a023a 023a023a 023a023a 023a023a     :.:.:.:.:.:.:.:.
 8013b58:	023a023a 023a023a 023a023a 023a023a     :.:.:.:.:.:.:.:.
 8013b68:	023a023a 023a023a 023a023a 023a023a     :.:.:.:.:.:.:.:.
 8013b78:	023a023a 023a023a 023a023a 023a023a     :.:.:.:.:.:.:.:.
 8013b88:	023a023a 023a023a 023a023a 023a023a     :.:.:.:.:.:.:.:.
 8013b98:	023a023a 023a023a 023a023a 023a023a     :.:.:.:.:.:.:.:.
 8013ba8:	023a023a 023a023a 023a023a 023a023a     :.:.:.:.:.:.:.:.
 8013bb8:	023a023a 023a023a 023a023a 023a023a     :.:.:.:.:.:.:.:.
 8013bc8:	023a023a 023a023a 023a023a 023a023a     :.:.:.:.:.:.:.:.
 8013bd8:	023a023a 023a023a 023a023a 023a023a     :.:.:.:.:.:.:.:.
 8013be8:	023b023a 023b023b 023b023b 023b023b     :.;.;.;.;.;.;.;.
 8013bf8:	023b023b 023b023b 023b023b 023b023b     ;.;.;.;.;.;.;.;.
 8013c08:	023b023b 023b023b 023b023b 023b023b     ;.;.;.;.;.;.;.;.
 8013c18:	023b023b 023b023b 023b023b 023b023b     ;.;.;.;.;.;.;.;.
 8013c28:	023b023b 023b023b 023b023b 023b023b     ;.;.;.;.;.;.;.;.
 8013c38:	023b023b 023b023b 023b023b 023b023b     ;.;.;.;.;.;.;.;.
 8013c48:	023b023b 023b023b 023b023b 023b023b     ;.;.;.;.;.;.;.;.
 8013c58:	023b023b 023b023b 023b023b 023b023b     ;.;.;.;.;.;.;.;.
 8013c68:	023b023b 023b023b 023b023b 023b023b     ;.;.;.;.;.;.;.;.
 8013c78:	023b023b 023b023b 023b023b 023b023b     ;.;.;.;.;.;.;.;.
 8013c88:	023b023b 023b023b 023b023b 023b023b     ;.;.;.;.;.;.;.;.
 8013c98:	023b023b 023b023b 023b023b 023b023b     ;.;.;.;.;.;.;.;.
 8013ca8:	023b023b 023b023b 023b023b 023b023b     ;.;.;.;.;.;.;.;.
 8013cb8:	023b023b 023b023b 023b023b 023b023b     ;.;.;.;.;.;.;.;.
 8013cc8:	023b023b 023b023b 023b023b 023b023b     ;.;.;.;.;.;.;.;.
 8013cd8:	023b023b 023b023b 023b023b 023c023b     ;.;.;.;.;.;.;.<.
 8013ce8:	023c023c 023c023c 023c023c 023c023c     <.<.<.<.<.<.<.<.
 8013cf8:	023c023c 023c023c 023c023c 023c023c     <.<.<.<.<.<.<.<.
 8013d08:	023c023c 023c023c 023c023c 023c023c     <.<.<.<.<.<.<.<.
 8013d18:	023c023c 023c023c 023c023c 023c023c     <.<.<.<.<.<.<.<.
 8013d28:	023c023c 023c023c 023c023c 023c023c     <.<.<.<.<.<.<.<.
 8013d38:	023c023c 023c023c 023c023c 023c023c     <.<.<.<.<.<.<.<.
 8013d48:	023c023c 023c023c 023c023c 023c023c     <.<.<.<.<.<.<.<.
 8013d58:	023c023c 023c023c 023c023c 023c023c     <.<.<.<.<.<.<.<.
 8013d68:	023c023c 023c023c 023c023c 023c023c     <.<.<.<.<.<.<.<.
 8013d78:	023c023c 023c023c 023c023c 023c023c     <.<.<.<.<.<.<.<.
 8013d88:	023c023c 023c023c 023c023c 023c023c     <.<.<.<.<.<.<.<.
 8013d98:	023c023c 023c023c 023c023c 023c023c     <.<.<.<.<.<.<.<.
 8013da8:	023c023c 023c023c 023c023c 023c023c     <.<.<.<.<.<.<.<.
 8013db8:	023c023c 023c023c 023c023c 023c023c     <.<.<.<.<.<.<.<.
 8013dc8:	023c023c 023c023c 023c023c 023c023c     <.<.<.<.<.<.<.<.
 8013dd8:	023c023c 023c023c 023c023c 023d023c     <.<.<.<.<.<.<.=.
 8013de8:	023d023d 023d023d 023d023d 023d023d     =.=.=.=.=.=.=.=.
 8013df8:	023d023d 023d023d 023d023d 023d023d     =.=.=.=.=.=.=.=.
 8013e08:	023d023d 023d023d 023d023d 023d023d     =.=.=.=.=.=.=.=.
 8013e18:	023d023d 023d023d 023d023d 023d023d     =.=.=.=.=.=.=.=.
 8013e28:	023d023d 023d023d 023d023d 023d023d     =.=.=.=.=.=.=.=.
 8013e38:	023d023d 023d023d 023d023d 023d023d     =.=.=.=.=.=.=.=.
 8013e48:	023d023d 023d023d 023d023d 023d023d     =.=.=.=.=.=.=.=.
 8013e58:	023d023d 023d023d 023d023d 023d023d     =.=.=.=.=.=.=.=.
 8013e68:	023d023d 023d023d 023d023d 023d023d     =.=.=.=.=.=.=.=.
 8013e78:	023d023d 023d023d 023d023d 023d023d     =.=.=.=.=.=.=.=.
 8013e88:	023d023d 023d023d 023d023d 023d023d     =.=.=.=.=.=.=.=.
 8013e98:	023d023d 023d023d 023d023d 023d023d     =.=.=.=.=.=.=.=.
 8013ea8:	023d023d 023d023d 023d023d 023d023d     =.=.=.=.=.=.=.=.
 8013eb8:	023d023d 023d023d 023d023d 023d023d     =.=.=.=.=.=.=.=.
 8013ec8:	023d023d 023d023d 023d023d 023d023d     =.=.=.=.=.=.=.=.
 8013ed8:	023d023d 023d023d 023d023d 023d023d     =.=.=.=.=.=.=.=.
 8013ee8:	023e023d 023e023e 023e023e 023e023e     =.>.>.>.>.>.>.>.
 8013ef8:	023e023e 023e023e 023e023e 023e023e     >.>.>.>.>.>.>.>.
 8013f08:	023e023e 023e023e 023e023e 023e023e     >.>.>.>.>.>.>.>.
 8013f18:	023e023e 023e023e 023e023e 023e023e     >.>.>.>.>.>.>.>.
 8013f28:	023e023e 023e023e 023e023e 023e023e     >.>.>.>.>.>.>.>.
 8013f38:	023e023e 023e023e 023e023e 023e023e     >.>.>.>.>.>.>.>.
 8013f48:	023e023e 023e023e 023e023e 023e023e     >.>.>.>.>.>.>.>.
 8013f58:	023e023e 023e023e 023e023e 023e023e     >.>.>.>.>.>.>.>.
 8013f68:	023e023e 023e023e 023e023e 023e023e     >.>.>.>.>.>.>.>.
 8013f78:	023e023e 023e023e 023e023e 023e023e     >.>.>.>.>.>.>.>.
 8013f88:	023e023e 023e023e 023e023e 023e023e     >.>.>.>.>.>.>.>.
 8013f98:	023e023e 023e023e 023e023e 023e023e     >.>.>.>.>.>.>.>.
 8013fa8:	023e023e 023e023e 023e023e 023e023e     >.>.>.>.>.>.>.>.
 8013fb8:	023e023e 023e023e 023e023e 023e023e     >.>.>.>.>.>.>.>.
 8013fc8:	023e023e 023e023e 023e023e 023e023e     >.>.>.>.>.>.>.>.
 8013fd8:	023e023e 023e023e 023e023e 023e023e     >.>.>.>.>.>.>.>.
 8013fe8:	023e023e 023e023e 023e023e 023f023f     >.>.>.>.>.>.?.?.
 8013ff8:	023f023f 023f023f 023f023f 023f023f     ?.?.?.?.?.?.?.?.
 8014008:	023f023f 023f023f 023f023f 023f023f     ?.?.?.?.?.?.?.?.
 8014018:	023f023f 023f023f 023f023f 023f023f     ?.?.?.?.?.?.?.?.
 8014028:	023f023f 023f023f 023f023f 023f023f     ?.?.?.?.?.?.?.?.
 8014038:	023f023f 023f023f 023f023f 023f023f     ?.?.?.?.?.?.?.?.
 8014048:	023f023f 023f023f 023f023f 023f023f     ?.?.?.?.?.?.?.?.
 8014058:	023f023f 023f023f 023f023f 023f023f     ?.?.?.?.?.?.?.?.
 8014068:	023f023f 023f023f 023f023f 023f023f     ?.?.?.?.?.?.?.?.
 8014078:	023f023f 023f023f 023f023f 023f023f     ?.?.?.?.?.?.?.?.
 8014088:	023f023f 023f023f 023f023f 023f023f     ?.?.?.?.?.?.?.?.
 8014098:	023f023f 023f023f 023f023f 023f023f     ?.?.?.?.?.?.?.?.
 80140a8:	023f023f 023f023f 023f023f 023f023f     ?.?.?.?.?.?.?.?.
 80140b8:	023f023f 023f023f 023f023f 023f023f     ?.?.?.?.?.?.?.?.
 80140c8:	023f023f 023f023f 023f023f 023f023f     ?.?.?.?.?.?.?.?.
 80140d8:	023f023f 023f023f 023f023f 023f023f     ?.?.?.?.?.?.?.?.
 80140e8:	023f023f 023f023f 023f023f 023f023f     ?.?.?.?.?.?.?.?.
 80140f8:	023f023f 023f023f 023f023f 02400240     ?.?.?.?.?.?.@.@.
 8014108:	02400240 02400240 02400240 02400240     @.@.@.@.@.@.@.@.
 8014118:	02400240 02400240 02400240 02400240     @.@.@.@.@.@.@.@.
 8014128:	02400240 02400240 02400240 02400240     @.@.@.@.@.@.@.@.
 8014138:	02400240 02400240 02400240 02400240     @.@.@.@.@.@.@.@.
 8014148:	02400240 02400240 02400240 02400240     @.@.@.@.@.@.@.@.
 8014158:	02400240 02400240 02400240 02400240     @.@.@.@.@.@.@.@.
 8014168:	02400240 02400240 02400240 02400240     @.@.@.@.@.@.@.@.
 8014178:	02400240 02400240 02400240 02400240     @.@.@.@.@.@.@.@.
 8014188:	02400240 02400240 02400240 02400240     @.@.@.@.@.@.@.@.
 8014198:	02400240 02400240 02400240 02400240     @.@.@.@.@.@.@.@.
 80141a8:	02400240 02400240 02400240 02400240     @.@.@.@.@.@.@.@.
 80141b8:	02400240 02400240 02400240 02400240     @.@.@.@.@.@.@.@.
 80141c8:	02400240 02400240 02400240 02400240     @.@.@.@.@.@.@.@.
 80141d8:	02400240 02400240 02400240 02400240     @.@.@.@.@.@.@.@.
 80141e8:	02400240 02400240 02400240 02400240     @.@.@.@.@.@.@.@.
 80141f8:	02400240 02400240 02400240 02400240     @.@.@.@.@.@.@.@.
 8014208:	02400240 02400240 02400240 02400240     @.@.@.@.@.@.@.@.
 8014218:	02410241 02410241 02410241 02410241     A.A.A.A.A.A.A.A.
 8014228:	02410241 02410241 02410241 02410241     A.A.A.A.A.A.A.A.
 8014238:	02410241 02410241 02410241 02410241     A.A.A.A.A.A.A.A.
 8014248:	02410241 02410241 02410241 02410241     A.A.A.A.A.A.A.A.
 8014258:	02410241 02410241 02410241 02410241     A.A.A.A.A.A.A.A.
 8014268:	02410241 02410241 02410241 02410241     A.A.A.A.A.A.A.A.
 8014278:	02410241 02410241 02410241 02410241     A.A.A.A.A.A.A.A.
 8014288:	02410241 02410241 02410241 02410241     A.A.A.A.A.A.A.A.
 8014298:	02410241 02410241 02410241 02410241     A.A.A.A.A.A.A.A.
 80142a8:	02410241 02410241 02410241 02410241     A.A.A.A.A.A.A.A.
 80142b8:	02410241 02410241 02410241 02410241     A.A.A.A.A.A.A.A.
 80142c8:	02410241 02410241 02410241 02410241     A.A.A.A.A.A.A.A.
 80142d8:	02410241 02410241 02410241 02410241     A.A.A.A.A.A.A.A.
 80142e8:	02410241 02410241 02410241 02410241     A.A.A.A.A.A.A.A.
 80142f8:	02410241 02410241 02410241 02410241     A.A.A.A.A.A.A.A.
 8014308:	02410241 02410241 02410241 02410241     A.A.A.A.A.A.A.A.
 8014318:	02410241 02410241 02410241 02410241     A.A.A.A.A.A.A.A.
 8014328:	02410241 02410241 02420241 02420242     A.A.A.A.A.B.B.B.
 8014338:	02420242 02420242 02420242 02420242     B.B.B.B.B.B.B.B.
 8014348:	02420242 02420242 02420242 02420242     B.B.B.B.B.B.B.B.
 8014358:	02420242 02420242 02420242 02420242     B.B.B.B.B.B.B.B.
 8014368:	02420242 02420242 02420242 02420242     B.B.B.B.B.B.B.B.
 8014378:	02420242 02420242 02420242 02420242     B.B.B.B.B.B.B.B.
 8014388:	02420242 02420242 02420242 02420242     B.B.B.B.B.B.B.B.
 8014398:	02420242 02420242 02420242 02420242     B.B.B.B.B.B.B.B.
 80143a8:	02420242 02420242 02420242 02420242     B.B.B.B.B.B.B.B.
 80143b8:	02420242 02420242 02420242 02420242     B.B.B.B.B.B.B.B.
 80143c8:	02420242 02420242 02420242 02420242     B.B.B.B.B.B.B.B.
 80143d8:	02420242 02420242 02420242 02420242     B.B.B.B.B.B.B.B.
 80143e8:	02420242 02420242 02420242 02420242     B.B.B.B.B.B.B.B.
 80143f8:	02420242 02420242 02420242 02420242     B.B.B.B.B.B.B.B.
 8014408:	02420242 02420242 02420242 02420242     B.B.B.B.B.B.B.B.
 8014418:	02420242 02420242 02420242 02420242     B.B.B.B.B.B.B.B.
 8014428:	02420242 02420242 02420242 02420242     B.B.B.B.B.B.B.B.
 8014438:	02420242 02420242 02420242 02420242     B.B.B.B.B.B.B.B.
 8014448:	02420242 02420242 02420242 02430243     B.B.B.B.B.B.C.C.
 8014458:	02430243 02430243 02430243 02430243     C.C.C.C.C.C.C.C.
 8014468:	02430243 02430243 02430243 02430243     C.C.C.C.C.C.C.C.
 8014478:	02430243 02430243 02430243 02430243     C.C.C.C.C.C.C.C.
 8014488:	02430243 02430243 02430243 02430243     C.C.C.C.C.C.C.C.
 8014498:	02430243 02430243 02430243 02430243     C.C.C.C.C.C.C.C.
 80144a8:	02430243 02430243 02430243 02430243     C.C.C.C.C.C.C.C.
 80144b8:	02430243 02430243 02430243 02430243     C.C.C.C.C.C.C.C.
 80144c8:	02430243 02430243 02430243 02430243     C.C.C.C.C.C.C.C.
 80144d8:	02430243 02430243 02430243 02430243     C.C.C.C.C.C.C.C.
 80144e8:	02430243 02430243 02430243 02430243     C.C.C.C.C.C.C.C.
 80144f8:	02430243 02430243 02430243 02430243     C.C.C.C.C.C.C.C.
 8014508:	02430243 02430243 02430243 02430243     C.C.C.C.C.C.C.C.
 8014518:	02430243 02430243 02430243 02430243     C.C.C.C.C.C.C.C.
 8014528:	02430243 02430243 02430243 02430243     C.C.C.C.C.C.C.C.
 8014538:	02430243 02430243 02430243 02430243     C.C.C.C.C.C.C.C.
 8014548:	02430243 02430243 02430243 02430243     C.C.C.C.C.C.C.C.
 8014558:	02430243 02430243 02430243 02430243     C.C.C.C.C.C.C.C.
 8014568:	02430243 02430243 02430243 02430243     C.C.C.C.C.C.C.C.
 8014578:	02430243 02440244 02440244 02440244     C.C.D.D.D.D.D.D.
 8014588:	02440244 02440244 02440244 02440244     D.D.D.D.D.D.D.D.
 8014598:	02440244 02440244 02440244 02440244     D.D.D.D.D.D.D.D.
 80145a8:	02440244 02440244 02440244 02440244     D.D.D.D.D.D.D.D.
 80145b8:	02440244 02440244 02440244 02440244     D.D.D.D.D.D.D.D.
 80145c8:	02440244 02440244 02440244 02440244     D.D.D.D.D.D.D.D.
 80145d8:	02440244 02440244 02440244 02440244     D.D.D.D.D.D.D.D.
 80145e8:	02440244 02440244 02440244 02440244     D.D.D.D.D.D.D.D.
 80145f8:	02440244 02440244 02440244 02440244     D.D.D.D.D.D.D.D.
 8014608:	02440244 02440244 02440244 02440244     D.D.D.D.D.D.D.D.
 8014618:	02440244 02440244 02440244 02440244     D.D.D.D.D.D.D.D.
 8014628:	02440244 02440244 02440244 02440244     D.D.D.D.D.D.D.D.
 8014638:	02440244 02440244 02440244 02440244     D.D.D.D.D.D.D.D.
 8014648:	02440244 02440244 02440244 02440244     D.D.D.D.D.D.D.D.
 8014658:	02440244 02440244 02440244 02440244     D.D.D.D.D.D.D.D.
 8014668:	02440244 02440244 02440244 02440244     D.D.D.D.D.D.D.D.
 8014678:	02440244 02440244 02440244 02440244     D.D.D.D.D.D.D.D.
 8014688:	02440244 02440244 02440244 02440244     D.D.D.D.D.D.D.D.
 8014698:	02440244 02440244 02440244 02440244     D.D.D.D.D.D.D.D.
 80146a8:	02450244 02450245 02450245 02450245     D.E.E.E.E.E.E.E.
 80146b8:	02450245 02450245 02450245 02450245     E.E.E.E.E.E.E.E.
 80146c8:	02450245 02450245 02450245 02450245     E.E.E.E.E.E.E.E.
 80146d8:	02450245 02450245 02450245 02450245     E.E.E.E.E.E.E.E.
 80146e8:	02450245 02450245 02450245 02450245     E.E.E.E.E.E.E.E.
 80146f8:	02450245 02450245 02450245 02450245     E.E.E.E.E.E.E.E.
 8014708:	02450245 02450245 02450245 02450245     E.E.E.E.E.E.E.E.
 8014718:	02450245 02450245 02450245 02450245     E.E.E.E.E.E.E.E.
 8014728:	02450245 02450245 02450245 02450245     E.E.E.E.E.E.E.E.
 8014738:	02450245 02450245 02450245 02450245     E.E.E.E.E.E.E.E.
 8014748:	02450245 02450245 02450245 02450245     E.E.E.E.E.E.E.E.
 8014758:	02450245 02450245 02450245 02450245     E.E.E.E.E.E.E.E.
 8014768:	02450245 02450245 02450245 02450245     E.E.E.E.E.E.E.E.
 8014778:	02450245 02450245 02450245 02450245     E.E.E.E.E.E.E.E.
 8014788:	02450245 02450245 02450245 02450245     E.E.E.E.E.E.E.E.
 8014798:	02450245 02450245 02450245 02450245     E.E.E.E.E.E.E.E.
 80147a8:	02450245 02450245 02450245 02450245     E.E.E.E.E.E.E.E.
 80147b8:	02450245 02450245 02450245 02450245     E.E.E.E.E.E.E.E.
 80147c8:	02450245 02450245 02450245 02450245     E.E.E.E.E.E.E.E.
 80147d8:	02450245 02450245 02460245 02460246     E.E.E.E.E.F.F.F.
 80147e8:	02460246 02460246 02460246 02460246     F.F.F.F.F.F.F.F.
 80147f8:	02460246 02460246 02460246 02460246     F.F.F.F.F.F.F.F.
 8014808:	02460246 02460246 02460246 02460246     F.F.F.F.F.F.F.F.
 8014818:	02460246 02460246 02460246 02460246     F.F.F.F.F.F.F.F.
 8014828:	02460246 02460246 02460246 02460246     F.F.F.F.F.F.F.F.
 8014838:	02460246 02460246 02460246 02460246     F.F.F.F.F.F.F.F.
 8014848:	02460246 02460246 02460246 02460246     F.F.F.F.F.F.F.F.
 8014858:	02460246 02460246 02460246 02460246     F.F.F.F.F.F.F.F.
 8014868:	02460246 02460246 02460246 02460246     F.F.F.F.F.F.F.F.
 8014878:	02460246 02460246 02460246 02460246     F.F.F.F.F.F.F.F.
 8014888:	02460246 02460246 02460246 02460246     F.F.F.F.F.F.F.F.
 8014898:	02460246 02460246 02460246 02460246     F.F.F.F.F.F.F.F.
 80148a8:	02460246 02460246 02460246 02460246     F.F.F.F.F.F.F.F.
 80148b8:	02460246 02460246 02460246 02460246     F.F.F.F.F.F.F.F.
 80148c8:	02460246 02460246 02460246 02460246     F.F.F.F.F.F.F.F.
 80148d8:	02460246 02460246 02460246 02460246     F.F.F.F.F.F.F.F.
 80148e8:	02460246 02460246 02460246 02460246     F.F.F.F.F.F.F.F.
 80148f8:	02460246 02460246 02460246 02460246     F.F.F.F.F.F.F.F.
 8014908:	02460246 02460246 02460246 02460246     F.F.F.F.F.F.F.F.
 8014918:	02460246 02460246 02470246 02470247     F.F.F.F.F.G.G.G.
 8014928:	02470247 02470247 02470247 02470247     G.G.G.G.G.G.G.G.
 8014938:	02470247 02470247 02470247 02470247     G.G.G.G.G.G.G.G.
 8014948:	02470247 02470247 02470247 02470247     G.G.G.G.G.G.G.G.
 8014958:	02470247 02470247 02470247 02470247     G.G.G.G.G.G.G.G.
 8014968:	02470247 02470247 02470247 02470247     G.G.G.G.G.G.G.G.
 8014978:	02470247 02470247 02470247 02470247     G.G.G.G.G.G.G.G.
 8014988:	02470247 02470247 02470247 02470247     G.G.G.G.G.G.G.G.
 8014998:	02470247 02470247 02470247 02470247     G.G.G.G.G.G.G.G.
 80149a8:	02470247 02470247 02470247 02470247     G.G.G.G.G.G.G.G.
 80149b8:	02470247 02470247 02470247 02470247     G.G.G.G.G.G.G.G.
 80149c8:	02470247 02470247 02470247 02470247     G.G.G.G.G.G.G.G.
 80149d8:	02470247 02470247 02470247 02470247     G.G.G.G.G.G.G.G.
 80149e8:	02470247 02470247 02470247 02470247     G.G.G.G.G.G.G.G.
 80149f8:	02470247 02470247 02470247 02470247     G.G.G.G.G.G.G.G.
 8014a08:	02470247 02470247 02470247 02470247     G.G.G.G.G.G.G.G.
 8014a18:	02470247 02470247 02470247 02470247     G.G.G.G.G.G.G.G.
 8014a28:	02470247 02470247 02470247 02470247     G.G.G.G.G.G.G.G.
 8014a38:	02470247 02470247 02470247 02470247     G.G.G.G.G.G.G.G.
 8014a48:	02470247 02470247 02470247 02470247     G.G.G.G.G.G.G.G.
 8014a58:	02470247 02470247 02470247 02470247     G.G.G.G.G.G.G.G.
 8014a68:	02470247 02480248 02480248 02480248     G.G.H.H.H.H.H.H.
 8014a78:	02480248 02480248 02480248 02480248     H.H.H.H.H.H.H.H.
 8014a88:	02480248 02480248 02480248 02480248     H.H.H.H.H.H.H.H.
 8014a98:	02480248 02480248 02480248 02480248     H.H.H.H.H.H.H.H.
 8014aa8:	02480248 02480248 02480248 02480248     H.H.H.H.H.H.H.H.
 8014ab8:	02480248 02480248 02480248 02480248     H.H.H.H.H.H.H.H.
 8014ac8:	02480248 02480248 02480248 02480248     H.H.H.H.H.H.H.H.
 8014ad8:	02480248 02480248 02480248 02480248     H.H.H.H.H.H.H.H.
 8014ae8:	02480248 02480248 02480248 02480248     H.H.H.H.H.H.H.H.
 8014af8:	02480248 02480248 02480248 02480248     H.H.H.H.H.H.H.H.
 8014b08:	02480248 02480248 02480248 02480248     H.H.H.H.H.H.H.H.
 8014b18:	02480248 02480248 02480248 02480248     H.H.H.H.H.H.H.H.
 8014b28:	02480248 02480248 02480248 02480248     H.H.H.H.H.H.H.H.
 8014b38:	02480248 02480248 02480248 02480248     H.H.H.H.H.H.H.H.
 8014b48:	02480248 02480248 02480248 02480248     H.H.H.H.H.H.H.H.
 8014b58:	02480248 02480248 02480248 02480248     H.H.H.H.H.H.H.H.
 8014b68:	02480248 02480248 02480248 02480248     H.H.H.H.H.H.H.H.
 8014b78:	02480248 02480248 02480248 02480248     H.H.H.H.H.H.H.H.
 8014b88:	02480248 02480248 02480248 02480248     H.H.H.H.H.H.H.H.
 8014b98:	02480248 02480248 02480248 02480248     H.H.H.H.H.H.H.H.
 8014ba8:	02480248 02480248 02480248 02480248     H.H.H.H.H.H.H.H.
 8014bb8:	02480248 02480248 02490249 02490249     H.H.H.H.I.I.I.I.
 8014bc8:	02490249 02490249 02490249 02490249     I.I.I.I.I.I.I.I.
 8014bd8:	02490249 02490249 02490249 02490249     I.I.I.I.I.I.I.I.
 8014be8:	02490249 02490249 02490249 02490249     I.I.I.I.I.I.I.I.
 8014bf8:	02490249 02490249 02490249 02490249     I.I.I.I.I.I.I.I.
 8014c08:	02490249 02490249 02490249 02490249     I.I.I.I.I.I.I.I.
 8014c18:	02490249 02490249 02490249 02490249     I.I.I.I.I.I.I.I.
 8014c28:	02490249 02490249 02490249 02490249     I.I.I.I.I.I.I.I.
 8014c38:	02490249 02490249 02490249 02490249     I.I.I.I.I.I.I.I.
 8014c48:	02490249 02490249 02490249 02490249     I.I.I.I.I.I.I.I.
 8014c58:	02490249 02490249 02490249 02490249     I.I.I.I.I.I.I.I.
 8014c68:	02490249 02490249 02490249 02490249     I.I.I.I.I.I.I.I.
 8014c78:	02490249 02490249 02490249 02490249     I.I.I.I.I.I.I.I.
 8014c88:	02490249 02490249 02490249 02490249     I.I.I.I.I.I.I.I.
 8014c98:	02490249 02490249 02490249 02490249     I.I.I.I.I.I.I.I.
 8014ca8:	02490249 02490249 02490249 02490249     I.I.I.I.I.I.I.I.
 8014cb8:	02490249 02490249 02490249 02490249     I.I.I.I.I.I.I.I.
 8014cc8:	02490249 02490249 02490249 02490249     I.I.I.I.I.I.I.I.
 8014cd8:	02490249 02490249 02490249 02490249     I.I.I.I.I.I.I.I.
 8014ce8:	02490249 02490249 02490249 02490249     I.I.I.I.I.I.I.I.
 8014cf8:	02490249 02490249 02490249 02490249     I.I.I.I.I.I.I.I.
 8014d08:	02490249 02490249 02490249 02490249     I.I.I.I.I.I.I.I.
 8014d18:	02490249 02490249 024a024a 024a024a     I.I.I.I.J.J.J.J.
 8014d28:	024a024a 024a024a 024a024a 024a024a     J.J.J.J.J.J.J.J.
 8014d38:	024a024a 024a024a 024a024a 024a024a     J.J.J.J.J.J.J.J.
 8014d48:	024a024a 024a024a 024a024a 024a024a     J.J.J.J.J.J.J.J.
 8014d58:	024a024a 024a024a 024a024a 024a024a     J.J.J.J.J.J.J.J.
 8014d68:	024a024a 024a024a 024a024a 024a024a     J.J.J.J.J.J.J.J.
 8014d78:	024a024a 024a024a 024a024a 024a024a     J.J.J.J.J.J.J.J.
 8014d88:	024a024a 024a024a 024a024a 024a024a     J.J.J.J.J.J.J.J.
 8014d98:	024a024a 024a024a 024a024a 024a024a     J.J.J.J.J.J.J.J.
 8014da8:	024a024a 024a024a 024a024a 024a024a     J.J.J.J.J.J.J.J.
 8014db8:	024a024a 024a024a 024a024a 024a024a     J.J.J.J.J.J.J.J.
 8014dc8:	024a024a 024a024a 024a024a 024a024a     J.J.J.J.J.J.J.J.
 8014dd8:	024a024a 024a024a 024a024a 024a024a     J.J.J.J.J.J.J.J.
 8014de8:	024a024a 024a024a 024a024a 024a024a     J.J.J.J.J.J.J.J.
 8014df8:	024a024a 024a024a 024a024a 024a024a     J.J.J.J.J.J.J.J.
 8014e08:	024a024a 024a024a 024a024a 024a024a     J.J.J.J.J.J.J.J.
 8014e18:	024a024a 024a024a 024a024a 024a024a     J.J.J.J.J.J.J.J.
 8014e28:	024a024a 024a024a 024a024a 024a024a     J.J.J.J.J.J.J.J.
 8014e38:	024a024a 024a024a 024a024a 024a024a     J.J.J.J.J.J.J.J.
 8014e48:	024a024a 024a024a 024a024a 024a024a     J.J.J.J.J.J.J.J.
 8014e58:	024a024a 024a024a 024a024a 024a024a     J.J.J.J.J.J.J.J.
 8014e68:	024a024a 024a024a 024a024a 024a024a     J.J.J.J.J.J.J.J.
 8014e78:	024a024a 024a024a 024a024a 024a024a     J.J.J.J.J.J.J.J.
 8014e88:	024a024a 024b024b 024b024b 024b024b     J.J.K.K.K.K.K.K.
 8014e98:	024b024b 024b024b 024b024b 024b024b     K.K.K.K.K.K.K.K.
 8014ea8:	024b024b 024b024b 024b024b 024b024b     K.K.K.K.K.K.K.K.
 8014eb8:	024b024b 024b024b 024b024b 024b024b     K.K.K.K.K.K.K.K.
 8014ec8:	024b024b 024b024b 024b024b 024b024b     K.K.K.K.K.K.K.K.
 8014ed8:	024b024b 024b024b 024b024b 024b024b     K.K.K.K.K.K.K.K.
 8014ee8:	024b024b 024b024b 024b024b 024b024b     K.K.K.K.K.K.K.K.
 8014ef8:	024b024b 024b024b 024b024b 024b024b     K.K.K.K.K.K.K.K.
 8014f08:	024b024b 024b024b 024b024b 024b024b     K.K.K.K.K.K.K.K.
 8014f18:	024b024b 024b024b 024b024b 024b024b     K.K.K.K.K.K.K.K.
 8014f28:	024b024b 024b024b 024b024b 024b024b     K.K.K.K.K.K.K.K.
 8014f38:	024b024b 024b024b 024b024b 024b024b     K.K.K.K.K.K.K.K.
 8014f48:	024b024b 024b024b 024b024b 024b024b     K.K.K.K.K.K.K.K.
 8014f58:	024b024b 024b024b 024b024b 024b024b     K.K.K.K.K.K.K.K.
 8014f68:	024b024b 024b024b 024b024b 024b024b     K.K.K.K.K.K.K.K.
 8014f78:	024b024b 024b024b 024b024b 024b024b     K.K.K.K.K.K.K.K.
 8014f88:	024b024b 024b024b 024b024b 024b024b     K.K.K.K.K.K.K.K.
 8014f98:	024b024b 024b024b 024b024b 024b024b     K.K.K.K.K.K.K.K.
 8014fa8:	024b024b 024b024b 024b024b 024b024b     K.K.K.K.K.K.K.K.
 8014fb8:	024b024b 024b024b 024b024b 024b024b     K.K.K.K.K.K.K.K.
 8014fc8:	024b024b 024b024b 024b024b 024b024b     K.K.K.K.K.K.K.K.
 8014fd8:	024b024b 024b024b 024b024b 024b024b     K.K.K.K.K.K.K.K.
 8014fe8:	024b024b 024b024b 024b024b 024b024b     K.K.K.K.K.K.K.K.
 8014ff8:	024b024b 024b024b 024b024b 024b024b     K.K.K.K.K.K.K.K.
 8015008:	024c024c 024c024c 024c024c 024c024c     L.L.L.L.L.L.L.L.
 8015018:	024c024c 024c024c 024c024c 024c024c     L.L.L.L.L.L.L.L.
 8015028:	024c024c 024c024c 024c024c 024c024c     L.L.L.L.L.L.L.L.
 8015038:	024c024c 024c024c 024c024c 024c024c     L.L.L.L.L.L.L.L.
 8015048:	024c024c 024c024c 024c024c 024c024c     L.L.L.L.L.L.L.L.
 8015058:	024c024c 024c024c 024c024c 024c024c     L.L.L.L.L.L.L.L.
 8015068:	024c024c 024c024c 024c024c 024c024c     L.L.L.L.L.L.L.L.
 8015078:	024c024c 024c024c 024c024c 024c024c     L.L.L.L.L.L.L.L.
 8015088:	024c024c 024c024c 024c024c 024c024c     L.L.L.L.L.L.L.L.
 8015098:	024c024c 024c024c 024c024c 024c024c     L.L.L.L.L.L.L.L.
 80150a8:	024c024c 024c024c 024c024c 024c024c     L.L.L.L.L.L.L.L.
 80150b8:	024c024c 024c024c 024c024c 024c024c     L.L.L.L.L.L.L.L.
 80150c8:	024c024c 024c024c 024c024c 024c024c     L.L.L.L.L.L.L.L.
 80150d8:	024c024c 024c024c 024c024c 024c024c     L.L.L.L.L.L.L.L.
 80150e8:	024c024c 024c024c 024c024c 024c024c     L.L.L.L.L.L.L.L.
 80150f8:	024c024c 024c024c 024c024c 024c024c     L.L.L.L.L.L.L.L.
 8015108:	024c024c 024c024c 024c024c 024c024c     L.L.L.L.L.L.L.L.
 8015118:	024c024c 024c024c 024c024c 024c024c     L.L.L.L.L.L.L.L.
 8015128:	024c024c 024c024c 024c024c 024c024c     L.L.L.L.L.L.L.L.
 8015138:	024c024c 024c024c 024c024c 024c024c     L.L.L.L.L.L.L.L.
 8015148:	024c024c 024c024c 024c024c 024c024c     L.L.L.L.L.L.L.L.
 8015158:	024c024c 024c024c 024c024c 024c024c     L.L.L.L.L.L.L.L.
 8015168:	024c024c 024c024c 024c024c 024c024c     L.L.L.L.L.L.L.L.
 8015178:	024c024c 024c024c 024c024c 024c024c     L.L.L.L.L.L.L.L.
 8015188:	024c024c 024c024c 024c024c 024d024d     L.L.L.L.L.L.M.M.
 8015198:	024d024d 024d024d 024d024d 024d024d     M.M.M.M.M.M.M.M.
 80151a8:	024d024d 024d024d 024d024d 024d024d     M.M.M.M.M.M.M.M.
 80151b8:	024d024d 024d024d 024d024d 024d024d     M.M.M.M.M.M.M.M.
 80151c8:	024d024d 024d024d 024d024d 024d024d     M.M.M.M.M.M.M.M.
 80151d8:	024d024d 024d024d 024d024d 024d024d     M.M.M.M.M.M.M.M.
 80151e8:	024d024d 024d024d 024d024d 024d024d     M.M.M.M.M.M.M.M.
 80151f8:	024d024d 024d024d 024d024d 024d024d     M.M.M.M.M.M.M.M.
 8015208:	024d024d 024d024d 024d024d 024d024d     M.M.M.M.M.M.M.M.
 8015218:	024d024d 024d024d 024d024d 024d024d     M.M.M.M.M.M.M.M.
 8015228:	024d024d 024d024d 024d024d 024d024d     M.M.M.M.M.M.M.M.
 8015238:	024d024d 024d024d 024d024d 024d024d     M.M.M.M.M.M.M.M.
 8015248:	024d024d 024d024d 024d024d 024d024d     M.M.M.M.M.M.M.M.
 8015258:	024d024d 024d024d 024d024d 024d024d     M.M.M.M.M.M.M.M.
 8015268:	024d024d 024d024d 024d024d 024d024d     M.M.M.M.M.M.M.M.
 8015278:	024d024d 024d024d 024d024d 024d024d     M.M.M.M.M.M.M.M.
 8015288:	024d024d 024d024d 024d024d 024d024d     M.M.M.M.M.M.M.M.
 8015298:	024d024d 024d024d 024d024d 024d024d     M.M.M.M.M.M.M.M.
 80152a8:	024d024d 024d024d 024d024d 024d024d     M.M.M.M.M.M.M.M.
 80152b8:	024d024d 024d024d 024d024d 024d024d     M.M.M.M.M.M.M.M.
 80152c8:	024d024d 024d024d 024d024d 024d024d     M.M.M.M.M.M.M.M.
 80152d8:	024d024d 024d024d 024d024d 024d024d     M.M.M.M.M.M.M.M.
 80152e8:	024d024d 024d024d 024d024d 024d024d     M.M.M.M.M.M.M.M.
 80152f8:	024d024d 024d024d 024d024d 024d024d     M.M.M.M.M.M.M.M.
 8015308:	024d024d 024d024d 024d024d 024d024d     M.M.M.M.M.M.M.M.
 8015318:	024d024d 024d024d 024d024d 024d024d     M.M.M.M.M.M.M.M.
 8015328:	024d024d 024d024d 024e024d 024e024e     M.M.M.M.M.N.N.N.
 8015338:	024e024e 024e024e 024e024e 024e024e     N.N.N.N.N.N.N.N.
 8015348:	024e024e 024e024e 024e024e 024e024e     N.N.N.N.N.N.N.N.
 8015358:	024e024e 024e024e 024e024e 024e024e     N.N.N.N.N.N.N.N.
 8015368:	024e024e 024e024e 024e024e 024e024e     N.N.N.N.N.N.N.N.
 8015378:	024e024e 024e024e 024e024e 024e024e     N.N.N.N.N.N.N.N.
 8015388:	024e024e 024e024e 024e024e 024e024e     N.N.N.N.N.N.N.N.
 8015398:	024e024e 024e024e 024e024e 024e024e     N.N.N.N.N.N.N.N.
 80153a8:	024e024e 024e024e 024e024e 024e024e     N.N.N.N.N.N.N.N.
 80153b8:	024e024e 024e024e 024e024e 024e024e     N.N.N.N.N.N.N.N.
 80153c8:	024e024e 024e024e 024e024e 024e024e     N.N.N.N.N.N.N.N.
 80153d8:	024e024e 024e024e 024e024e 024e024e     N.N.N.N.N.N.N.N.
 80153e8:	024e024e 024e024e 024e024e 024e024e     N.N.N.N.N.N.N.N.
 80153f8:	024e024e 024e024e 024e024e 024e024e     N.N.N.N.N.N.N.N.
 8015408:	024e024e 024e024e 024e024e 024e024e     N.N.N.N.N.N.N.N.
 8015418:	024e024e 024e024e 024e024e 024e024e     N.N.N.N.N.N.N.N.
 8015428:	024e024e 024e024e 024e024e 024e024e     N.N.N.N.N.N.N.N.
 8015438:	024e024e 024e024e 024e024e 024e024e     N.N.N.N.N.N.N.N.
 8015448:	024e024e 024e024e 024e024e 024e024e     N.N.N.N.N.N.N.N.
 8015458:	024e024e 024e024e 024e024e 024e024e     N.N.N.N.N.N.N.N.
 8015468:	024e024e 024e024e 024e024e 024e024e     N.N.N.N.N.N.N.N.
 8015478:	024e024e 024e024e 024e024e 024e024e     N.N.N.N.N.N.N.N.
 8015488:	024e024e 024e024e 024e024e 024e024e     N.N.N.N.N.N.N.N.
 8015498:	024e024e 024e024e 024e024e 024e024e     N.N.N.N.N.N.N.N.
 80154a8:	024e024e 024e024e 024e024e 024e024e     N.N.N.N.N.N.N.N.
 80154b8:	024e024e 024e024e 024e024e 024e024e     N.N.N.N.N.N.N.N.
 80154c8:	024e024e 024e024e 024e024e 024e024e     N.N.N.N.N.N.N.N.
 80154d8:	024e024e 024e024e 024e024e 024e024e     N.N.N.N.N.N.N.N.
 80154e8:	024f024f 024f024f 024f024f 024f024f     O.O.O.O.O.O.O.O.
 80154f8:	024f024f 024f024f 024f024f 024f024f     O.O.O.O.O.O.O.O.
 8015508:	024f024f 024f024f 024f024f 024f024f     O.O.O.O.O.O.O.O.
 8015518:	024f024f 024f024f 024f024f 024f024f     O.O.O.O.O.O.O.O.
 8015528:	024f024f 024f024f 024f024f 024f024f     O.O.O.O.O.O.O.O.
 8015538:	024f024f 024f024f 024f024f 024f024f     O.O.O.O.O.O.O.O.
 8015548:	024f024f 024f024f 024f024f 024f024f     O.O.O.O.O.O.O.O.
 8015558:	024f024f 024f024f 024f024f 024f024f     O.O.O.O.O.O.O.O.
 8015568:	024f024f 024f024f 024f024f 024f024f     O.O.O.O.O.O.O.O.
 8015578:	024f024f 024f024f 024f024f 024f024f     O.O.O.O.O.O.O.O.
 8015588:	024f024f 024f024f 024f024f 024f024f     O.O.O.O.O.O.O.O.
 8015598:	024f024f 024f024f 024f024f 024f024f     O.O.O.O.O.O.O.O.
 80155a8:	024f024f 024f024f 024f024f 024f024f     O.O.O.O.O.O.O.O.
 80155b8:	024f024f 024f024f 024f024f 024f024f     O.O.O.O.O.O.O.O.
 80155c8:	024f024f 024f024f 024f024f 024f024f     O.O.O.O.O.O.O.O.
 80155d8:	024f024f 024f024f 024f024f 024f024f     O.O.O.O.O.O.O.O.
 80155e8:	024f024f 024f024f 024f024f 024f024f     O.O.O.O.O.O.O.O.
 80155f8:	024f024f 024f024f 024f024f 024f024f     O.O.O.O.O.O.O.O.
 8015608:	024f024f 024f024f 024f024f 024f024f     O.O.O.O.O.O.O.O.
 8015618:	024f024f 024f024f 024f024f 024f024f     O.O.O.O.O.O.O.O.
 8015628:	024f024f 024f024f 024f024f 024f024f     O.O.O.O.O.O.O.O.
 8015638:	024f024f 024f024f 024f024f 024f024f     O.O.O.O.O.O.O.O.
 8015648:	024f024f 024f024f 024f024f 024f024f     O.O.O.O.O.O.O.O.
 8015658:	024f024f 024f024f 024f024f 024f024f     O.O.O.O.O.O.O.O.
 8015668:	024f024f 024f024f 024f024f 024f024f     O.O.O.O.O.O.O.O.
 8015678:	024f024f 024f024f 024f024f 024f024f     O.O.O.O.O.O.O.O.
 8015688:	024f024f 024f024f 024f024f 024f024f     O.O.O.O.O.O.O.O.
 8015698:	024f024f 024f024f 024f024f 024f024f     O.O.O.O.O.O.O.O.
 80156a8:	024f024f 024f024f 024f024f 0250024f     O.O.O.O.O.O.O.P.
 80156b8:	02500250 02500250 02500250 02500250     P.P.P.P.P.P.P.P.
 80156c8:	02500250 02500250 02500250 02500250     P.P.P.P.P.P.P.P.
 80156d8:	02500250 02500250 02500250 02500250     P.P.P.P.P.P.P.P.
 80156e8:	02500250 02500250 02500250 02500250     P.P.P.P.P.P.P.P.
 80156f8:	02500250 02500250 02500250 02500250     P.P.P.P.P.P.P.P.
 8015708:	02500250 02500250 02500250 02500250     P.P.P.P.P.P.P.P.
 8015718:	02500250 02500250 02500250 02500250     P.P.P.P.P.P.P.P.
 8015728:	02500250 02500250 02500250 02500250     P.P.P.P.P.P.P.P.
 8015738:	02500250 02500250 02500250 02500250     P.P.P.P.P.P.P.P.
 8015748:	02500250 02500250 02500250 02500250     P.P.P.P.P.P.P.P.
 8015758:	02500250 02500250 02500250 02500250     P.P.P.P.P.P.P.P.
 8015768:	02500250 02500250 02500250 02500250     P.P.P.P.P.P.P.P.
 8015778:	02500250 02500250 02500250 02500250     P.P.P.P.P.P.P.P.
 8015788:	02500250 02500250 02500250 02500250     P.P.P.P.P.P.P.P.
 8015798:	02500250 02500250 02500250 02500250     P.P.P.P.P.P.P.P.
 80157a8:	02500250 02500250 02500250 02500250     P.P.P.P.P.P.P.P.
 80157b8:	02500250 02500250 02500250 02500250     P.P.P.P.P.P.P.P.
 80157c8:	02500250 02500250 02500250 02500250     P.P.P.P.P.P.P.P.
 80157d8:	02500250 02500250 02500250 02500250     P.P.P.P.P.P.P.P.
 80157e8:	02500250 02500250 02500250 02500250     P.P.P.P.P.P.P.P.
 80157f8:	02500250 02500250 02500250 02500250     P.P.P.P.P.P.P.P.
 8015808:	02500250 02500250 02500250 02500250     P.P.P.P.P.P.P.P.
 8015818:	02500250 02500250 02500250 02500250     P.P.P.P.P.P.P.P.
 8015828:	02500250 02500250 02500250 02500250     P.P.P.P.P.P.P.P.
 8015838:	02500250 02500250 02500250 02500250     P.P.P.P.P.P.P.P.
 8015848:	02500250 02500250 02500250 02500250     P.P.P.P.P.P.P.P.
 8015858:	02500250 02500250 02500250 02500250     P.P.P.P.P.P.P.P.
 8015868:	02500250 02500250 02500250 02500250     P.P.P.P.P.P.P.P.
 8015878:	02500250 02500250 02500250 02500250     P.P.P.P.P.P.P.P.
 8015888:	02500250 02500250 02500250 02500250     P.P.P.P.P.P.P.P.
 8015898:	02500250 02500250 02500250 02510250     P.P.P.P.P.P.P.Q.
 80158a8:	02510251 02510251 02510251 02510251     Q.Q.Q.Q.Q.Q.Q.Q.
 80158b8:	02510251 02510251 02510251 02510251     Q.Q.Q.Q.Q.Q.Q.Q.
 80158c8:	02510251 02510251 02510251 02510251     Q.Q.Q.Q.Q.Q.Q.Q.
 80158d8:	02510251 02510251 02510251 02510251     Q.Q.Q.Q.Q.Q.Q.Q.
 80158e8:	02510251 02510251 02510251 02510251     Q.Q.Q.Q.Q.Q.Q.Q.
 80158f8:	02510251 02510251 02510251 02510251     Q.Q.Q.Q.Q.Q.Q.Q.
 8015908:	02510251 02510251 02510251 02510251     Q.Q.Q.Q.Q.Q.Q.Q.
 8015918:	02510251 02510251 02510251 02510251     Q.Q.Q.Q.Q.Q.Q.Q.
 8015928:	02510251 02510251 02510251 02510251     Q.Q.Q.Q.Q.Q.Q.Q.
 8015938:	02510251 02510251 02510251 02510251     Q.Q.Q.Q.Q.Q.Q.Q.
 8015948:	02510251 02510251 02510251 02510251     Q.Q.Q.Q.Q.Q.Q.Q.
 8015958:	02510251 02510251 02510251 02510251     Q.Q.Q.Q.Q.Q.Q.Q.
 8015968:	02510251 02510251 02510251 02510251     Q.Q.Q.Q.Q.Q.Q.Q.
 8015978:	02510251 02510251 02510251 02510251     Q.Q.Q.Q.Q.Q.Q.Q.
 8015988:	02510251 02510251 02510251 02510251     Q.Q.Q.Q.Q.Q.Q.Q.
 8015998:	02510251 02510251 02510251 02510251     Q.Q.Q.Q.Q.Q.Q.Q.
 80159a8:	02510251 02510251 02510251 02510251     Q.Q.Q.Q.Q.Q.Q.Q.
 80159b8:	02510251 02510251 02510251 02510251     Q.Q.Q.Q.Q.Q.Q.Q.
 80159c8:	02510251 02510251 02510251 02510251     Q.Q.Q.Q.Q.Q.Q.Q.
 80159d8:	02510251 02510251 02510251 02510251     Q.Q.Q.Q.Q.Q.Q.Q.
 80159e8:	02510251 02510251 02510251 02510251     Q.Q.Q.Q.Q.Q.Q.Q.
 80159f8:	02510251 02510251 02510251 02510251     Q.Q.Q.Q.Q.Q.Q.Q.
 8015a08:	02510251 02510251 02510251 02510251     Q.Q.Q.Q.Q.Q.Q.Q.
 8015a18:	02510251 02510251 02510251 02510251     Q.Q.Q.Q.Q.Q.Q.Q.
 8015a28:	02510251 02510251 02510251 02510251     Q.Q.Q.Q.Q.Q.Q.Q.
 8015a38:	02510251 02510251 02510251 02510251     Q.Q.Q.Q.Q.Q.Q.Q.
 8015a48:	02510251 02510251 02510251 02510251     Q.Q.Q.Q.Q.Q.Q.Q.
 8015a58:	02510251 02510251 02510251 02510251     Q.Q.Q.Q.Q.Q.Q.Q.
 8015a68:	02510251 02510251 02510251 02510251     Q.Q.Q.Q.Q.Q.Q.Q.
 8015a78:	02510251 02510251 02510251 02510251     Q.Q.Q.Q.Q.Q.Q.Q.
 8015a88:	02510251 02510251 02510251 02510251     Q.Q.Q.Q.Q.Q.Q.Q.
 8015a98:	02510251 02510251 02510251 02510251     Q.Q.Q.Q.Q.Q.Q.Q.
 8015aa8:	02510251 02510251 02510251 02510251     Q.Q.Q.Q.Q.Q.Q.Q.
 8015ab8:	02510251 02520252 02520252 02520252     Q.Q.R.R.R.R.R.R.
 8015ac8:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 8015ad8:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 8015ae8:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 8015af8:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 8015b08:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 8015b18:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 8015b28:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 8015b38:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 8015b48:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 8015b58:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 8015b68:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 8015b78:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 8015b88:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 8015b98:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 8015ba8:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 8015bb8:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 8015bc8:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 8015bd8:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 8015be8:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 8015bf8:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 8015c08:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 8015c18:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 8015c28:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 8015c38:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 8015c48:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 8015c58:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 8015c68:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 8015c78:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 8015c88:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 8015c98:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 8015ca8:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 8015cb8:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 8015cc8:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 8015cd8:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 8015ce8:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 8015cf8:	02520252 02520252 02520252 02530253     R.R.R.R.R.R.S.S.
 8015d08:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 8015d18:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 8015d28:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 8015d38:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 8015d48:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 8015d58:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 8015d68:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 8015d78:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 8015d88:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 8015d98:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 8015da8:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 8015db8:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 8015dc8:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 8015dd8:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 8015de8:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 8015df8:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 8015e08:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 8015e18:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 8015e28:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 8015e38:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 8015e48:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 8015e58:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 8015e68:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 8015e78:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 8015e88:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 8015e98:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 8015ea8:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 8015eb8:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 8015ec8:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 8015ed8:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 8015ee8:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 8015ef8:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 8015f08:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 8015f18:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 8015f28:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 8015f38:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 8015f48:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 8015f58:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 8015f68:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 8015f78:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 8015f88:	02530253 02530253 02540253 02540254     S.S.S.S.S.T.T.T.
 8015f98:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 8015fa8:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 8015fb8:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 8015fc8:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 8015fd8:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 8015fe8:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 8015ff8:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 8016008:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 8016018:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 8016028:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 8016038:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 8016048:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 8016058:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 8016068:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 8016078:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 8016088:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 8016098:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 80160a8:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 80160b8:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 80160c8:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 80160d8:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 80160e8:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 80160f8:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 8016108:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 8016118:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 8016128:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 8016138:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 8016148:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 8016158:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 8016168:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 8016178:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 8016188:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 8016198:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 80161a8:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 80161b8:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 80161c8:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 80161d8:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 80161e8:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 80161f8:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 8016208:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 8016218:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 8016228:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 8016238:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 8016248:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 8016258:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 8016268:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 8016278:	02540254 02540254 02540254 02550254     T.T.T.T.T.T.T.U.
 8016288:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8016298:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 80162a8:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 80162b8:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 80162c8:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 80162d8:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 80162e8:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 80162f8:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8016308:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8016318:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8016328:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8016338:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8016348:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8016358:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8016368:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8016378:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8016388:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8016398:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 80163a8:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 80163b8:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 80163c8:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 80163d8:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 80163e8:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 80163f8:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8016408:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8016418:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8016428:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8016438:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8016448:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8016458:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8016468:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8016478:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8016488:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8016498:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 80164a8:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 80164b8:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 80164c8:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 80164d8:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 80164e8:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 80164f8:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8016508:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8016518:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8016528:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8016538:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8016548:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8016558:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8016568:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8016578:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8016588:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8016598:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 80165a8:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 80165b8:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 80165c8:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 80165d8:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 80165e8:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 80165f8:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8016608:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8016618:	02550255 02550255 02550255 02560255     U.U.U.U.U.U.U.V.
 8016628:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8016638:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8016648:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8016658:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8016668:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8016678:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8016688:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8016698:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 80166a8:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 80166b8:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 80166c8:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 80166d8:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 80166e8:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 80166f8:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8016708:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8016718:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8016728:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8016738:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8016748:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8016758:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8016768:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8016778:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8016788:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8016798:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 80167a8:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 80167b8:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 80167c8:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 80167d8:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 80167e8:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 80167f8:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8016808:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8016818:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8016828:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8016838:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8016848:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8016858:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8016868:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8016878:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8016888:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8016898:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 80168a8:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 80168b8:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 80168c8:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 80168d8:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 80168e8:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 80168f8:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8016908:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8016918:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8016928:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8016938:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8016948:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8016958:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8016968:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8016978:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8016988:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8016998:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 80169a8:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 80169b8:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 80169c8:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 80169d8:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 80169e8:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 80169f8:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8016a08:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8016a18:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8016a28:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8016a38:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8016a48:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8016a58:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8016a68:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8016a78:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8016a88:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8016a98:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8016aa8:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8016ab8:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8016ac8:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8016ad8:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8016ae8:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8016af8:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8016b08:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8016b18:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8016b28:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8016b38:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8016b48:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8016b58:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8016b68:	02570256 02570257 02570257 02570257     V.W.W.W.W.W.W.W.
 8016b78:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016b88:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016b98:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016ba8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016bb8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016bc8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016bd8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016be8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016bf8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016c08:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016c18:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016c28:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016c38:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016c48:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016c58:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016c68:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016c78:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016c88:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016c98:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016ca8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016cb8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016cc8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016cd8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016ce8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016cf8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016d08:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016d18:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016d28:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016d38:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016d48:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016d58:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016d68:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016d78:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016d88:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016d98:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016da8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016db8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016dc8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016dd8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016de8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016df8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016e08:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016e18:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016e28:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016e38:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016e48:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016e58:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016e68:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016e78:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016e88:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016e98:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016ea8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016eb8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016ec8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016ed8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016ee8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016ef8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016f08:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016f18:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016f28:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016f38:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016f48:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016f58:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016f68:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016f78:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016f88:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016f98:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016fa8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016fb8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016fc8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016fd8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016fe8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8016ff8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017008:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017018:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017028:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017038:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017048:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017058:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017068:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017078:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017088:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017098:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 80170a8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 80170b8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 80170c8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 80170d8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 80170e8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 80170f8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017108:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017118:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017128:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017138:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017148:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017158:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017168:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017178:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017188:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017198:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 80171a8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 80171b8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 80171c8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 80171d8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 80171e8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 80171f8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017208:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017218:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017228:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017238:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017248:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017258:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017268:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017278:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017288:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017298:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 80172a8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 80172b8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 80172c8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 80172d8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 80172e8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 80172f8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017308:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017318:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017328:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017338:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017348:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017358:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017368:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017378:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017388:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017398:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 80173a8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 80173b8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 80173c8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 80173d8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 80173e8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 80173f8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017408:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017418:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017428:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017438:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017448:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017458:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017468:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017478:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017488:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017498:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 80174a8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 80174b8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 80174c8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 80174d8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 80174e8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 80174f8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017508:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017518:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017528:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017538:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017548:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017558:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017568:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017578:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017588:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017598:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 80175a8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 80175b8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 80175c8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 80175d8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 80175e8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 80175f8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017608:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017618:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017628:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017638:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017648:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017658:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017668:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017678:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017688:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017698:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 80176a8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 80176b8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 80176c8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 80176d8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 80176e8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 80176f8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017708:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017718:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017728:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017738:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017748:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017758:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017768:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017778:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017788:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017798:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 80177a8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 80177b8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 80177c8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 80177d8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 80177e8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 80177f8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017808:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017818:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017828:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017838:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017848:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017858:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017868:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017878:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017888:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017898:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 80178a8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 80178b8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 80178c8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 80178d8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 80178e8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 80178f8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017908:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017918:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017928:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017938:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017948:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017958:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017968:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017978:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017988:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 8017998:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 80179a8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 80179b8:	02570257 02570257 02570257 02570257     W.W.W.W.W.W.W.W.
 80179c8:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 80179d8:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 80179e8:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 80179f8:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017a08:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017a18:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017a28:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017a38:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017a48:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017a58:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017a68:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017a78:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017a88:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017a98:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017aa8:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017ab8:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017ac8:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017ad8:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017ae8:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017af8:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017b08:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017b18:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017b28:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017b38:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017b48:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017b58:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017b68:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017b78:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017b88:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017b98:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017ba8:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017bb8:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017bc8:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017bd8:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017be8:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017bf8:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017c08:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017c18:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017c28:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017c38:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017c48:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017c58:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017c68:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017c78:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017c88:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017c98:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017ca8:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017cb8:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017cc8:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017cd8:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017ce8:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017cf8:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017d08:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017d18:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017d28:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017d38:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017d48:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017d58:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017d68:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017d78:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017d88:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017d98:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017da8:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017db8:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017dc8:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017dd8:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017de8:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017df8:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017e08:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017e18:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017e28:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017e38:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017e48:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017e58:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017e68:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017e78:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017e88:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017e98:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017ea8:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017eb8:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017ec8:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017ed8:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017ee8:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017ef8:	02560256 02560256 02560256 02560256     V.V.V.V.V.V.V.V.
 8017f08:	02560256 02550255 02550255 02550255     V.V.U.U.U.U.U.U.
 8017f18:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8017f28:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8017f38:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8017f48:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8017f58:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8017f68:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8017f78:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8017f88:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8017f98:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8017fa8:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8017fb8:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8017fc8:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8017fd8:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8017fe8:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8017ff8:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8018008:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8018018:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8018028:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8018038:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8018048:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8018058:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8018068:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8018078:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8018088:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8018098:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 80180a8:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 80180b8:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 80180c8:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 80180d8:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 80180e8:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 80180f8:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8018108:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8018118:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8018128:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8018138:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8018148:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8018158:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8018168:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8018178:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8018188:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8018198:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 80181a8:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 80181b8:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 80181c8:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 80181d8:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 80181e8:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 80181f8:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8018208:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8018218:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8018228:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8018238:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8018248:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8018258:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8018268:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8018278:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8018288:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 8018298:	02550255 02550255 02550255 02550255     U.U.U.U.U.U.U.U.
 80182a8:	02550255 02540254 02540254 02540254     U.U.T.T.T.T.T.T.
 80182b8:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 80182c8:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 80182d8:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 80182e8:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 80182f8:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 8018308:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 8018318:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 8018328:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 8018338:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 8018348:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 8018358:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 8018368:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 8018378:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 8018388:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 8018398:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 80183a8:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 80183b8:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 80183c8:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 80183d8:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 80183e8:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 80183f8:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 8018408:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 8018418:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 8018428:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 8018438:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 8018448:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 8018458:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 8018468:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 8018478:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 8018488:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 8018498:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 80184a8:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 80184b8:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 80184c8:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 80184d8:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 80184e8:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 80184f8:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 8018508:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 8018518:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 8018528:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 8018538:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 8018548:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 8018558:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 8018568:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 8018578:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 8018588:	02540254 02540254 02540254 02540254     T.T.T.T.T.T.T.T.
 8018598:	02540254 02540254 02530253 02530253     T.T.T.T.S.S.S.S.
 80185a8:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 80185b8:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 80185c8:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 80185d8:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 80185e8:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 80185f8:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 8018608:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 8018618:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 8018628:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 8018638:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 8018648:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 8018658:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 8018668:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 8018678:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 8018688:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 8018698:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 80186a8:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 80186b8:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 80186c8:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 80186d8:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 80186e8:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 80186f8:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 8018708:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 8018718:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 8018728:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 8018738:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 8018748:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 8018758:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 8018768:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 8018778:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 8018788:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 8018798:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 80187a8:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 80187b8:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 80187c8:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 80187d8:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 80187e8:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 80187f8:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 8018808:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 8018818:	02530253 02530253 02530253 02530253     S.S.S.S.S.S.S.S.
 8018828:	02530253 02520253 02520252 02520252     S.S.S.R.R.R.R.R.
 8018838:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 8018848:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 8018858:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 8018868:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 8018878:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 8018888:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 8018898:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 80188a8:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 80188b8:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 80188c8:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 80188d8:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 80188e8:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 80188f8:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 8018908:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 8018918:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 8018928:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 8018938:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 8018948:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 8018958:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 8018968:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 8018978:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 8018988:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 8018998:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 80189a8:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 80189b8:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 80189c8:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 80189d8:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 80189e8:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 80189f8:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 8018a08:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 8018a18:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 8018a28:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 8018a38:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 8018a48:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 8018a58:	02520252 02520252 02520252 02520252     R.R.R.R.R.R.R.R.
 8018a68:	02520252 02520252 02520252 02510252     R.R.R.R.R.R.R.Q.
 8018a78:	02510251 02510251 02510251 02510251     Q.Q.Q.Q.Q.Q.Q.Q.
 8018a88:	02510251 02510251 02510251 02510251     Q.Q.Q.Q.Q.Q.Q.Q.
 8018a98:	02510251 02510251 02510251 02510251     Q.Q.Q.Q.Q.Q.Q.Q.
 8018aa8:	02510251 02510251 02510251 02510251     Q.Q.Q.Q.Q.Q.Q.Q.
 8018ab8:	02510251 02510251 02510251 02510251     Q.Q.Q.Q.Q.Q.Q.Q.
 8018ac8:	02510251 02510251 02510251 02510251     Q.Q.Q.Q.Q.Q.Q.Q.
 8018ad8:	02510251 02510251 02510251 02510251     Q.Q.Q.Q.Q.Q.Q.Q.
 8018ae8:	02510251 02510251 02510251 02510251     Q.Q.Q.Q.Q.Q.Q.Q.
 8018af8:	02510251 02510251 02510251 02510251     Q.Q.Q.Q.Q.Q.Q.Q.
 8018b08:	02510251 02510251 02510251 02510251     Q.Q.Q.Q.Q.Q.Q.Q.
 8018b18:	02510251 02510251 02510251 02510251     Q.Q.Q.Q.Q.Q.Q.Q.
 8018b28:	02510251 02510251 02510251 02510251     Q.Q.Q.Q.Q.Q.Q.Q.
 8018b38:	02510251 02510251 02510251 02510251     Q.Q.Q.Q.Q.Q.Q.Q.
 8018b48:	02510251 02510251 02510251 02510251     Q.Q.Q.Q.Q.Q.Q.Q.
 8018b58:	02510251 02510251 02510251 02510251     Q.Q.Q.Q.Q.Q.Q.Q.
 8018b68:	02510251 02510251 02510251 02510251     Q.Q.Q.Q.Q.Q.Q.Q.
 8018b78:	02510251 02510251 02510251 02510251     Q.Q.Q.Q.Q.Q.Q.Q.
 8018b88:	02510251 02510251 02510251 02510251     Q.Q.Q.Q.Q.Q.Q.Q.
 8018b98:	02510251 02510251 02510251 02510251     Q.Q.Q.Q.Q.Q.Q.Q.
 8018ba8:	02510251 02510251 02510251 02510251     Q.Q.Q.Q.Q.Q.Q.Q.
 8018bb8:	02510251 02510251 02510251 02510251     Q.Q.Q.Q.Q.Q.Q.Q.
 8018bc8:	02510251 02510251 02510251 02510251     Q.Q.Q.Q.Q.Q.Q.Q.
 8018bd8:	02510251 02510251 02510251 02510251     Q.Q.Q.Q.Q.Q.Q.Q.
 8018be8:	02510251 02510251 02510251 02510251     Q.Q.Q.Q.Q.Q.Q.Q.
 8018bf8:	02510251 02510251 02510251 02510251     Q.Q.Q.Q.Q.Q.Q.Q.
 8018c08:	02510251 02510251 02510251 02510251     Q.Q.Q.Q.Q.Q.Q.Q.
 8018c18:	02510251 02510251 02510251 02510251     Q.Q.Q.Q.Q.Q.Q.Q.
 8018c28:	02510251 02510251 02510251 02510251     Q.Q.Q.Q.Q.Q.Q.Q.
 8018c38:	02510251 02510251 02510251 02510251     Q.Q.Q.Q.Q.Q.Q.Q.
 8018c48:	02510251 02510251 02510251 02510251     Q.Q.Q.Q.Q.Q.Q.Q.
 8018c58:	02510251 02510251 02510251 02510251     Q.Q.Q.Q.Q.Q.Q.Q.
 8018c68:	02510251 02510251 02510251 02510251     Q.Q.Q.Q.Q.Q.Q.Q.
 8018c78:	02510251 02510251 02510251 02510251     Q.Q.Q.Q.Q.Q.Q.Q.
 8018c88:	02510251 02500250 02500250 02500250     Q.Q.P.P.P.P.P.P.
 8018c98:	02500250 02500250 02500250 02500250     P.P.P.P.P.P.P.P.
 8018ca8:	02500250 02500250 02500250 02500250     P.P.P.P.P.P.P.P.
 8018cb8:	02500250 02500250 02500250 02500250     P.P.P.P.P.P.P.P.
 8018cc8:	02500250 02500250 02500250 02500250     P.P.P.P.P.P.P.P.
 8018cd8:	02500250 02500250 02500250 02500250     P.P.P.P.P.P.P.P.
 8018ce8:	02500250 02500250 02500250 02500250     P.P.P.P.P.P.P.P.
 8018cf8:	02500250 02500250 02500250 02500250     P.P.P.P.P.P.P.P.
 8018d08:	02500250 02500250 02500250 02500250     P.P.P.P.P.P.P.P.
 8018d18:	02500250 02500250 02500250 02500250     P.P.P.P.P.P.P.P.
 8018d28:	02500250 02500250 02500250 02500250     P.P.P.P.P.P.P.P.
 8018d38:	02500250 02500250 02500250 02500250     P.P.P.P.P.P.P.P.
 8018d48:	02500250 02500250 02500250 02500250     P.P.P.P.P.P.P.P.
 8018d58:	02500250 02500250 02500250 02500250     P.P.P.P.P.P.P.P.
 8018d68:	02500250 02500250 02500250 02500250     P.P.P.P.P.P.P.P.
 8018d78:	02500250 02500250 02500250 02500250     P.P.P.P.P.P.P.P.
 8018d88:	02500250 02500250 02500250 02500250     P.P.P.P.P.P.P.P.
 8018d98:	02500250 02500250 02500250 02500250     P.P.P.P.P.P.P.P.
 8018da8:	02500250 02500250 02500250 02500250     P.P.P.P.P.P.P.P.
 8018db8:	02500250 02500250 02500250 02500250     P.P.P.P.P.P.P.P.
 8018dc8:	02500250 02500250 02500250 02500250     P.P.P.P.P.P.P.P.
 8018dd8:	02500250 02500250 02500250 02500250     P.P.P.P.P.P.P.P.
 8018de8:	02500250 02500250 02500250 02500250     P.P.P.P.P.P.P.P.
 8018df8:	02500250 02500250 02500250 02500250     P.P.P.P.P.P.P.P.
 8018e08:	02500250 02500250 02500250 02500250     P.P.P.P.P.P.P.P.
 8018e18:	02500250 02500250 02500250 02500250     P.P.P.P.P.P.P.P.
 8018e28:	02500250 02500250 02500250 02500250     P.P.P.P.P.P.P.P.
 8018e38:	02500250 02500250 02500250 02500250     P.P.P.P.P.P.P.P.
 8018e48:	02500250 02500250 02500250 02500250     P.P.P.P.P.P.P.P.
 8018e58:	02500250 02500250 02500250 02500250     P.P.P.P.P.P.P.P.
 8018e68:	02500250 02500250 02500250 02500250     P.P.P.P.P.P.P.P.
 8018e78:	02500250 024f024f 024f024f 024f024f     P.P.O.O.O.O.O.O.
 8018e88:	024f024f 024f024f 024f024f 024f024f     O.O.O.O.O.O.O.O.
 8018e98:	024f024f 024f024f 024f024f 024f024f     O.O.O.O.O.O.O.O.
 8018ea8:	024f024f 024f024f 024f024f 024f024f     O.O.O.O.O.O.O.O.
 8018eb8:	024f024f 024f024f 024f024f 024f024f     O.O.O.O.O.O.O.O.
 8018ec8:	024f024f 024f024f 024f024f 024f024f     O.O.O.O.O.O.O.O.
 8018ed8:	024f024f 024f024f 024f024f 024f024f     O.O.O.O.O.O.O.O.
 8018ee8:	024f024f 024f024f 024f024f 024f024f     O.O.O.O.O.O.O.O.
 8018ef8:	024f024f 024f024f 024f024f 024f024f     O.O.O.O.O.O.O.O.
 8018f08:	024f024f 024f024f 024f024f 024f024f     O.O.O.O.O.O.O.O.
 8018f18:	024f024f 024f024f 024f024f 024f024f     O.O.O.O.O.O.O.O.
 8018f28:	024f024f 024f024f 024f024f 024f024f     O.O.O.O.O.O.O.O.
 8018f38:	024f024f 024f024f 024f024f 024f024f     O.O.O.O.O.O.O.O.
 8018f48:	024f024f 024f024f 024f024f 024f024f     O.O.O.O.O.O.O.O.
 8018f58:	024f024f 024f024f 024f024f 024f024f     O.O.O.O.O.O.O.O.
 8018f68:	024f024f 024f024f 024f024f 024f024f     O.O.O.O.O.O.O.O.
 8018f78:	024f024f 024f024f 024f024f 024f024f     O.O.O.O.O.O.O.O.
 8018f88:	024f024f 024f024f 024f024f 024f024f     O.O.O.O.O.O.O.O.
 8018f98:	024f024f 024f024f 024f024f 024f024f     O.O.O.O.O.O.O.O.
 8018fa8:	024f024f 024f024f 024f024f 024f024f     O.O.O.O.O.O.O.O.
 8018fb8:	024f024f 024f024f 024f024f 024f024f     O.O.O.O.O.O.O.O.
 8018fc8:	024f024f 024f024f 024f024f 024f024f     O.O.O.O.O.O.O.O.
 8018fd8:	024f024f 024f024f 024f024f 024f024f     O.O.O.O.O.O.O.O.
 8018fe8:	024f024f 024f024f 024f024f 024f024f     O.O.O.O.O.O.O.O.
 8018ff8:	024f024f 024f024f 024f024f 024f024f     O.O.O.O.O.O.O.O.
 8019008:	024f024f 024f024f 024f024f 024f024f     O.O.O.O.O.O.O.O.
 8019018:	024f024f 024f024f 024f024f 024f024f     O.O.O.O.O.O.O.O.
 8019028:	024f024f 024f024f 024f024f 024f024f     O.O.O.O.O.O.O.O.
 8019038:	024f024f 024f024f 024f024f 024f024f     O.O.O.O.O.O.O.O.
 8019048:	024e024f 024e024e 024e024e 024e024e     O.N.N.N.N.N.N.N.
 8019058:	024e024e 024e024e 024e024e 024e024e     N.N.N.N.N.N.N.N.
 8019068:	024e024e 024e024e 024e024e 024e024e     N.N.N.N.N.N.N.N.
 8019078:	024e024e 024e024e 024e024e 024e024e     N.N.N.N.N.N.N.N.
 8019088:	024e024e 024e024e 024e024e 024e024e     N.N.N.N.N.N.N.N.
 8019098:	024e024e 024e024e 024e024e 024e024e     N.N.N.N.N.N.N.N.
 80190a8:	024e024e 024e024e 024e024e 024e024e     N.N.N.N.N.N.N.N.
 80190b8:	024e024e 024e024e 024e024e 024e024e     N.N.N.N.N.N.N.N.
 80190c8:	024e024e 024e024e 024e024e 024e024e     N.N.N.N.N.N.N.N.
 80190d8:	024e024e 024e024e 024e024e 024e024e     N.N.N.N.N.N.N.N.
 80190e8:	024e024e 024e024e 024e024e 024e024e     N.N.N.N.N.N.N.N.
 80190f8:	024e024e 024e024e 024e024e 024e024e     N.N.N.N.N.N.N.N.
 8019108:	024e024e 024e024e 024e024e 024e024e     N.N.N.N.N.N.N.N.
 8019118:	024e024e 024e024e 024e024e 024e024e     N.N.N.N.N.N.N.N.
 8019128:	024e024e 024e024e 024e024e 024e024e     N.N.N.N.N.N.N.N.
 8019138:	024e024e 024e024e 024e024e 024e024e     N.N.N.N.N.N.N.N.
 8019148:	024e024e 024e024e 024e024e 024e024e     N.N.N.N.N.N.N.N.
 8019158:	024e024e 024e024e 024e024e 024e024e     N.N.N.N.N.N.N.N.
 8019168:	024e024e 024e024e 024e024e 024e024e     N.N.N.N.N.N.N.N.
 8019178:	024e024e 024e024e 024e024e 024e024e     N.N.N.N.N.N.N.N.
 8019188:	024e024e 024e024e 024e024e 024e024e     N.N.N.N.N.N.N.N.
 8019198:	024e024e 024e024e 024e024e 024e024e     N.N.N.N.N.N.N.N.
 80191a8:	024e024e 024e024e 024e024e 024e024e     N.N.N.N.N.N.N.N.
 80191b8:	024e024e 024e024e 024e024e 024e024e     N.N.N.N.N.N.N.N.
 80191c8:	024e024e 024e024e 024e024e 024e024e     N.N.N.N.N.N.N.N.
 80191d8:	024e024e 024e024e 024e024e 024e024e     N.N.N.N.N.N.N.N.
 80191e8:	024e024e 024e024e 024e024e 024e024e     N.N.N.N.N.N.N.N.
 80191f8:	024e024e 024e024e 024d024d 024d024d     N.N.N.N.M.M.M.M.
 8019208:	024d024d 024d024d 024d024d 024d024d     M.M.M.M.M.M.M.M.
 8019218:	024d024d 024d024d 024d024d 024d024d     M.M.M.M.M.M.M.M.
 8019228:	024d024d 024d024d 024d024d 024d024d     M.M.M.M.M.M.M.M.
 8019238:	024d024d 024d024d 024d024d 024d024d     M.M.M.M.M.M.M.M.
 8019248:	024d024d 024d024d 024d024d 024d024d     M.M.M.M.M.M.M.M.
 8019258:	024d024d 024d024d 024d024d 024d024d     M.M.M.M.M.M.M.M.
 8019268:	024d024d 024d024d 024d024d 024d024d     M.M.M.M.M.M.M.M.
 8019278:	024d024d 024d024d 024d024d 024d024d     M.M.M.M.M.M.M.M.
 8019288:	024d024d 024d024d 024d024d 024d024d     M.M.M.M.M.M.M.M.
 8019298:	024d024d 024d024d 024d024d 024d024d     M.M.M.M.M.M.M.M.
 80192a8:	024d024d 024d024d 024d024d 024d024d     M.M.M.M.M.M.M.M.
 80192b8:	024d024d 024d024d 024d024d 024d024d     M.M.M.M.M.M.M.M.
 80192c8:	024d024d 024d024d 024d024d 024d024d     M.M.M.M.M.M.M.M.
 80192d8:	024d024d 024d024d 024d024d 024d024d     M.M.M.M.M.M.M.M.
 80192e8:	024d024d 024d024d 024d024d 024d024d     M.M.M.M.M.M.M.M.
 80192f8:	024d024d 024d024d 024d024d 024d024d     M.M.M.M.M.M.M.M.
 8019308:	024d024d 024d024d 024d024d 024d024d     M.M.M.M.M.M.M.M.
 8019318:	024d024d 024d024d 024d024d 024d024d     M.M.M.M.M.M.M.M.
 8019328:	024d024d 024d024d 024d024d 024d024d     M.M.M.M.M.M.M.M.
 8019338:	024d024d 024d024d 024d024d 024d024d     M.M.M.M.M.M.M.M.
 8019348:	024d024d 024d024d 024d024d 024d024d     M.M.M.M.M.M.M.M.
 8019358:	024d024d 024d024d 024d024d 024d024d     M.M.M.M.M.M.M.M.
 8019368:	024d024d 024d024d 024d024d 024d024d     M.M.M.M.M.M.M.M.
 8019378:	024d024d 024d024d 024d024d 024d024d     M.M.M.M.M.M.M.M.
 8019388:	024d024d 024d024d 024d024d 024d024d     M.M.M.M.M.M.M.M.
 8019398:	024d024d 024c024d 024c024c 024c024c     M.M.M.L.L.L.L.L.
 80193a8:	024c024c 024c024c 024c024c 024c024c     L.L.L.L.L.L.L.L.
 80193b8:	024c024c 024c024c 024c024c 024c024c     L.L.L.L.L.L.L.L.
 80193c8:	024c024c 024c024c 024c024c 024c024c     L.L.L.L.L.L.L.L.
 80193d8:	024c024c 024c024c 024c024c 024c024c     L.L.L.L.L.L.L.L.
 80193e8:	024c024c 024c024c 024c024c 024c024c     L.L.L.L.L.L.L.L.
 80193f8:	024c024c 024c024c 024c024c 024c024c     L.L.L.L.L.L.L.L.
 8019408:	024c024c 024c024c 024c024c 024c024c     L.L.L.L.L.L.L.L.
 8019418:	024c024c 024c024c 024c024c 024c024c     L.L.L.L.L.L.L.L.
 8019428:	024c024c 024c024c 024c024c 024c024c     L.L.L.L.L.L.L.L.
 8019438:	024c024c 024c024c 024c024c 024c024c     L.L.L.L.L.L.L.L.
 8019448:	024c024c 024c024c 024c024c 024c024c     L.L.L.L.L.L.L.L.
 8019458:	024c024c 024c024c 024c024c 024c024c     L.L.L.L.L.L.L.L.
 8019468:	024c024c 024c024c 024c024c 024c024c     L.L.L.L.L.L.L.L.
 8019478:	024c024c 024c024c 024c024c 024c024c     L.L.L.L.L.L.L.L.
 8019488:	024c024c 024c024c 024c024c 024c024c     L.L.L.L.L.L.L.L.
 8019498:	024c024c 024c024c 024c024c 024c024c     L.L.L.L.L.L.L.L.
 80194a8:	024c024c 024c024c 024c024c 024c024c     L.L.L.L.L.L.L.L.
 80194b8:	024c024c 024c024c 024c024c 024c024c     L.L.L.L.L.L.L.L.
 80194c8:	024c024c 024c024c 024c024c 024c024c     L.L.L.L.L.L.L.L.
 80194d8:	024c024c 024c024c 024c024c 024c024c     L.L.L.L.L.L.L.L.
 80194e8:	024c024c 024c024c 024c024c 024c024c     L.L.L.L.L.L.L.L.
 80194f8:	024c024c 024c024c 024c024c 024c024c     L.L.L.L.L.L.L.L.
 8019508:	024c024c 024c024c 024c024c 024c024c     L.L.L.L.L.L.L.L.
 8019518:	024c024c 024c024c 024c024c 024c024c     L.L.L.L.L.L.L.L.
 8019528:	024b024c 024b024b 024b024b 024b024b     L.K.K.K.K.K.K.K.
 8019538:	024b024b 024b024b 024b024b 024b024b     K.K.K.K.K.K.K.K.
 8019548:	024b024b 024b024b 024b024b 024b024b     K.K.K.K.K.K.K.K.
 8019558:	024b024b 024b024b 024b024b 024b024b     K.K.K.K.K.K.K.K.
 8019568:	024b024b 024b024b 024b024b 024b024b     K.K.K.K.K.K.K.K.
 8019578:	024b024b 024b024b 024b024b 024b024b     K.K.K.K.K.K.K.K.
 8019588:	024b024b 024b024b 024b024b 024b024b     K.K.K.K.K.K.K.K.
 8019598:	024b024b 024b024b 024b024b 024b024b     K.K.K.K.K.K.K.K.
 80195a8:	024b024b 024b024b 024b024b 024b024b     K.K.K.K.K.K.K.K.
 80195b8:	024b024b 024b024b 024b024b 024b024b     K.K.K.K.K.K.K.K.
 80195c8:	024b024b 024b024b 024b024b 024b024b     K.K.K.K.K.K.K.K.
 80195d8:	024b024b 024b024b 024b024b 024b024b     K.K.K.K.K.K.K.K.
 80195e8:	024b024b 024b024b 024b024b 024b024b     K.K.K.K.K.K.K.K.
 80195f8:	024b024b 024b024b 024b024b 024b024b     K.K.K.K.K.K.K.K.
 8019608:	024b024b 024b024b 024b024b 024b024b     K.K.K.K.K.K.K.K.
 8019618:	024b024b 024b024b 024b024b 024b024b     K.K.K.K.K.K.K.K.
 8019628:	024b024b 024b024b 024b024b 024b024b     K.K.K.K.K.K.K.K.
 8019638:	024b024b 024b024b 024b024b 024b024b     K.K.K.K.K.K.K.K.
 8019648:	024b024b 024b024b 024b024b 024b024b     K.K.K.K.K.K.K.K.
 8019658:	024b024b 024b024b 024b024b 024b024b     K.K.K.K.K.K.K.K.
 8019668:	024b024b 024b024b 024b024b 024b024b     K.K.K.K.K.K.K.K.
 8019678:	024b024b 024b024b 024b024b 024b024b     K.K.K.K.K.K.K.K.
 8019688:	024b024b 024b024b 024b024b 024b024b     K.K.K.K.K.K.K.K.
 8019698:	024b024b 024b024b 024b024b 024a024b     K.K.K.K.K.K.K.J.
 80196a8:	024a024a 024a024a 024a024a 024a024a     J.J.J.J.J.J.J.J.
 80196b8:	024a024a 024a024a 024a024a 024a024a     J.J.J.J.J.J.J.J.
 80196c8:	024a024a 024a024a 024a024a 024a024a     J.J.J.J.J.J.J.J.
 80196d8:	024a024a 024a024a 024a024a 024a024a     J.J.J.J.J.J.J.J.
 80196e8:	024a024a 024a024a 024a024a 024a024a     J.J.J.J.J.J.J.J.
 80196f8:	024a024a 024a024a 024a024a 024a024a     J.J.J.J.J.J.J.J.
 8019708:	024a024a 024a024a 024a024a 024a024a     J.J.J.J.J.J.J.J.
 8019718:	024a024a 024a024a 024a024a 024a024a     J.J.J.J.J.J.J.J.
 8019728:	024a024a 024a024a 024a024a 024a024a     J.J.J.J.J.J.J.J.
 8019738:	024a024a 024a024a 024a024a 024a024a     J.J.J.J.J.J.J.J.
 8019748:	024a024a 024a024a 024a024a 024a024a     J.J.J.J.J.J.J.J.
 8019758:	024a024a 024a024a 024a024a 024a024a     J.J.J.J.J.J.J.J.
 8019768:	024a024a 024a024a 024a024a 024a024a     J.J.J.J.J.J.J.J.
 8019778:	024a024a 024a024a 024a024a 024a024a     J.J.J.J.J.J.J.J.
 8019788:	024a024a 024a024a 024a024a 024a024a     J.J.J.J.J.J.J.J.
 8019798:	024a024a 024a024a 024a024a 024a024a     J.J.J.J.J.J.J.J.
 80197a8:	024a024a 024a024a 024a024a 024a024a     J.J.J.J.J.J.J.J.
 80197b8:	024a024a 024a024a 024a024a 024a024a     J.J.J.J.J.J.J.J.
 80197c8:	024a024a 024a024a 024a024a 024a024a     J.J.J.J.J.J.J.J.
 80197d8:	024a024a 024a024a 024a024a 024a024a     J.J.J.J.J.J.J.J.
 80197e8:	024a024a 024a024a 024a024a 024a024a     J.J.J.J.J.J.J.J.
 80197f8:	024a024a 024a024a 024a024a 024a024a     J.J.J.J.J.J.J.J.
 8019808:	024a024a 024a024a 0249024a 02490249     J.J.J.J.J.I.I.I.
 8019818:	02490249 02490249 02490249 02490249     I.I.I.I.I.I.I.I.
 8019828:	02490249 02490249 02490249 02490249     I.I.I.I.I.I.I.I.
 8019838:	02490249 02490249 02490249 02490249     I.I.I.I.I.I.I.I.
 8019848:	02490249 02490249 02490249 02490249     I.I.I.I.I.I.I.I.
 8019858:	02490249 02490249 02490249 02490249     I.I.I.I.I.I.I.I.
 8019868:	02490249 02490249 02490249 02490249     I.I.I.I.I.I.I.I.
 8019878:	02490249 02490249 02490249 02490249     I.I.I.I.I.I.I.I.
 8019888:	02490249 02490249 02490249 02490249     I.I.I.I.I.I.I.I.
 8019898:	02490249 02490249 02490249 02490249     I.I.I.I.I.I.I.I.
 80198a8:	02490249 02490249 02490249 02490249     I.I.I.I.I.I.I.I.
 80198b8:	02490249 02490249 02490249 02490249     I.I.I.I.I.I.I.I.
 80198c8:	02490249 02490249 02490249 02490249     I.I.I.I.I.I.I.I.
 80198d8:	02490249 02490249 02490249 02490249     I.I.I.I.I.I.I.I.
 80198e8:	02490249 02490249 02490249 02490249     I.I.I.I.I.I.I.I.
 80198f8:	02490249 02490249 02490249 02490249     I.I.I.I.I.I.I.I.
 8019908:	02490249 02490249 02490249 02490249     I.I.I.I.I.I.I.I.
 8019918:	02490249 02490249 02490249 02490249     I.I.I.I.I.I.I.I.
 8019928:	02490249 02490249 02490249 02490249     I.I.I.I.I.I.I.I.
 8019938:	02490249 02490249 02490249 02490249     I.I.I.I.I.I.I.I.
 8019948:	02490249 02490249 02490249 02490249     I.I.I.I.I.I.I.I.
 8019958:	02490249 02490249 02490249 02490249     I.I.I.I.I.I.I.I.
 8019968:	02490249 02490249 02480249 02480248     I.I.I.I.I.H.H.H.
 8019978:	02480248 02480248 02480248 02480248     H.H.H.H.H.H.H.H.
 8019988:	02480248 02480248 02480248 02480248     H.H.H.H.H.H.H.H.
 8019998:	02480248 02480248 02480248 02480248     H.H.H.H.H.H.H.H.
 80199a8:	02480248 02480248 02480248 02480248     H.H.H.H.H.H.H.H.
 80199b8:	02480248 02480248 02480248 02480248     H.H.H.H.H.H.H.H.
 80199c8:	02480248 02480248 02480248 02480248     H.H.H.H.H.H.H.H.
 80199d8:	02480248 02480248 02480248 02480248     H.H.H.H.H.H.H.H.
 80199e8:	02480248 02480248 02480248 02480248     H.H.H.H.H.H.H.H.
 80199f8:	02480248 02480248 02480248 02480248     H.H.H.H.H.H.H.H.
 8019a08:	02480248 02480248 02480248 02480248     H.H.H.H.H.H.H.H.
 8019a18:	02480248 02480248 02480248 02480248     H.H.H.H.H.H.H.H.
 8019a28:	02480248 02480248 02480248 02480248     H.H.H.H.H.H.H.H.
 8019a38:	02480248 02480248 02480248 02480248     H.H.H.H.H.H.H.H.
 8019a48:	02480248 02480248 02480248 02480248     H.H.H.H.H.H.H.H.
 8019a58:	02480248 02480248 02480248 02480248     H.H.H.H.H.H.H.H.
 8019a68:	02480248 02480248 02480248 02480248     H.H.H.H.H.H.H.H.
 8019a78:	02480248 02480248 02480248 02480248     H.H.H.H.H.H.H.H.
 8019a88:	02480248 02480248 02480248 02480248     H.H.H.H.H.H.H.H.
 8019a98:	02480248 02480248 02480248 02480248     H.H.H.H.H.H.H.H.
 8019aa8:	02480248 02480248 02480248 02480248     H.H.H.H.H.H.H.H.
 8019ab8:	02480248 02480248 02480248 02470248     H.H.H.H.H.H.H.G.
 8019ac8:	02470247 02470247 02470247 02470247     G.G.G.G.G.G.G.G.
 8019ad8:	02470247 02470247 02470247 02470247     G.G.G.G.G.G.G.G.
 8019ae8:	02470247 02470247 02470247 02470247     G.G.G.G.G.G.G.G.
 8019af8:	02470247 02470247 02470247 02470247     G.G.G.G.G.G.G.G.
 8019b08:	02470247 02470247 02470247 02470247     G.G.G.G.G.G.G.G.
 8019b18:	02470247 02470247 02470247 02470247     G.G.G.G.G.G.G.G.
 8019b28:	02470247 02470247 02470247 02470247     G.G.G.G.G.G.G.G.
 8019b38:	02470247 02470247 02470247 02470247     G.G.G.G.G.G.G.G.
 8019b48:	02470247 02470247 02470247 02470247     G.G.G.G.G.G.G.G.
 8019b58:	02470247 02470247 02470247 02470247     G.G.G.G.G.G.G.G.
 8019b68:	02470247 02470247 02470247 02470247     G.G.G.G.G.G.G.G.
 8019b78:	02470247 02470247 02470247 02470247     G.G.G.G.G.G.G.G.
 8019b88:	02470247 02470247 02470247 02470247     G.G.G.G.G.G.G.G.
 8019b98:	02470247 02470247 02470247 02470247     G.G.G.G.G.G.G.G.
 8019ba8:	02470247 02470247 02470247 02470247     G.G.G.G.G.G.G.G.
 8019bb8:	02470247 02470247 02470247 02470247     G.G.G.G.G.G.G.G.
 8019bc8:	02470247 02470247 02470247 02470247     G.G.G.G.G.G.G.G.
 8019bd8:	02470247 02470247 02470247 02470247     G.G.G.G.G.G.G.G.
 8019be8:	02470247 02470247 02470247 02470247     G.G.G.G.G.G.G.G.
 8019bf8:	02470247 02470247 02470247 02470247     G.G.G.G.G.G.G.G.
 8019c08:	02470247 02470247 02460246 02460246     G.G.G.G.F.F.F.F.
 8019c18:	02460246 02460246 02460246 02460246     F.F.F.F.F.F.F.F.
 8019c28:	02460246 02460246 02460246 02460246     F.F.F.F.F.F.F.F.
 8019c38:	02460246 02460246 02460246 02460246     F.F.F.F.F.F.F.F.
 8019c48:	02460246 02460246 02460246 02460246     F.F.F.F.F.F.F.F.
 8019c58:	02460246 02460246 02460246 02460246     F.F.F.F.F.F.F.F.
 8019c68:	02460246 02460246 02460246 02460246     F.F.F.F.F.F.F.F.
 8019c78:	02460246 02460246 02460246 02460246     F.F.F.F.F.F.F.F.
 8019c88:	02460246 02460246 02460246 02460246     F.F.F.F.F.F.F.F.
 8019c98:	02460246 02460246 02460246 02460246     F.F.F.F.F.F.F.F.
 8019ca8:	02460246 02460246 02460246 02460246     F.F.F.F.F.F.F.F.
 8019cb8:	02460246 02460246 02460246 02460246     F.F.F.F.F.F.F.F.
 8019cc8:	02460246 02460246 02460246 02460246     F.F.F.F.F.F.F.F.
 8019cd8:	02460246 02460246 02460246 02460246     F.F.F.F.F.F.F.F.
 8019ce8:	02460246 02460246 02460246 02460246     F.F.F.F.F.F.F.F.
 8019cf8:	02460246 02460246 02460246 02460246     F.F.F.F.F.F.F.F.
 8019d08:	02460246 02460246 02460246 02460246     F.F.F.F.F.F.F.F.
 8019d18:	02460246 02460246 02460246 02460246     F.F.F.F.F.F.F.F.
 8019d28:	02460246 02460246 02460246 02460246     F.F.F.F.F.F.F.F.
 8019d38:	02460246 02460246 02460246 02460246     F.F.F.F.F.F.F.F.
 8019d48:	02460246 02460246 02450245 02450245     F.F.F.F.E.E.E.E.
 8019d58:	02450245 02450245 02450245 02450245     E.E.E.E.E.E.E.E.
 8019d68:	02450245 02450245 02450245 02450245     E.E.E.E.E.E.E.E.
 8019d78:	02450245 02450245 02450245 02450245     E.E.E.E.E.E.E.E.
 8019d88:	02450245 02450245 02450245 02450245     E.E.E.E.E.E.E.E.
 8019d98:	02450245 02450245 02450245 02450245     E.E.E.E.E.E.E.E.
 8019da8:	02450245 02450245 02450245 02450245     E.E.E.E.E.E.E.E.
 8019db8:	02450245 02450245 02450245 02450245     E.E.E.E.E.E.E.E.
 8019dc8:	02450245 02450245 02450245 02450245     E.E.E.E.E.E.E.E.
 8019dd8:	02450245 02450245 02450245 02450245     E.E.E.E.E.E.E.E.
 8019de8:	02450245 02450245 02450245 02450245     E.E.E.E.E.E.E.E.
 8019df8:	02450245 02450245 02450245 02450245     E.E.E.E.E.E.E.E.
 8019e08:	02450245 02450245 02450245 02450245     E.E.E.E.E.E.E.E.
 8019e18:	02450245 02450245 02450245 02450245     E.E.E.E.E.E.E.E.
 8019e28:	02450245 02450245 02450245 02450245     E.E.E.E.E.E.E.E.
 8019e38:	02450245 02450245 02450245 02450245     E.E.E.E.E.E.E.E.
 8019e48:	02450245 02450245 02450245 02450245     E.E.E.E.E.E.E.E.
 8019e58:	02450245 02450245 02450245 02450245     E.E.E.E.E.E.E.E.
 8019e68:	02450245 02450245 02450245 02450245     E.E.E.E.E.E.E.E.
 8019e78:	02450245 02450245 02450245 02450245     E.E.E.E.E.E.E.E.
 8019e88:	02440244 02440244 02440244 02440244     D.D.D.D.D.D.D.D.
 8019e98:	02440244 02440244 02440244 02440244     D.D.D.D.D.D.D.D.
 8019ea8:	02440244 02440244 02440244 02440244     D.D.D.D.D.D.D.D.
 8019eb8:	02440244 02440244 02440244 02440244     D.D.D.D.D.D.D.D.
 8019ec8:	02440244 02440244 02440244 02440244     D.D.D.D.D.D.D.D.
 8019ed8:	02440244 02440244 02440244 02440244     D.D.D.D.D.D.D.D.
 8019ee8:	02440244 02440244 02440244 02440244     D.D.D.D.D.D.D.D.
 8019ef8:	02440244 02440244 02440244 02440244     D.D.D.D.D.D.D.D.
 8019f08:	02440244 02440244 02440244 02440244     D.D.D.D.D.D.D.D.
 8019f18:	02440244 02440244 02440244 02440244     D.D.D.D.D.D.D.D.
 8019f28:	02440244 02440244 02440244 02440244     D.D.D.D.D.D.D.D.
 8019f38:	02440244 02440244 02440244 02440244     D.D.D.D.D.D.D.D.
 8019f48:	02440244 02440244 02440244 02440244     D.D.D.D.D.D.D.D.
 8019f58:	02440244 02440244 02440244 02440244     D.D.D.D.D.D.D.D.
 8019f68:	02440244 02440244 02440244 02440244     D.D.D.D.D.D.D.D.
 8019f78:	02440244 02440244 02440244 02440244     D.D.D.D.D.D.D.D.
 8019f88:	02440244 02440244 02440244 02440244     D.D.D.D.D.D.D.D.
 8019f98:	02440244 02440244 02440244 02440244     D.D.D.D.D.D.D.D.
 8019fa8:	02440244 02440244 02440244 02430244     D.D.D.D.D.D.D.C.
 8019fb8:	02430243 02430243 02430243 02430243     C.C.C.C.C.C.C.C.
 8019fc8:	02430243 02430243 02430243 02430243     C.C.C.C.C.C.C.C.
 8019fd8:	02430243 02430243 02430243 02430243     C.C.C.C.C.C.C.C.
 8019fe8:	02430243 02430243 02430243 02430243     C.C.C.C.C.C.C.C.
 8019ff8:	02430243 02430243 02430243 02430243     C.C.C.C.C.C.C.C.
 801a008:	02430243 02430243 02430243 02430243     C.C.C.C.C.C.C.C.
 801a018:	02430243 02430243 02430243 02430243     C.C.C.C.C.C.C.C.
 801a028:	02430243 02430243 02430243 02430243     C.C.C.C.C.C.C.C.
 801a038:	02430243 02430243 02430243 02430243     C.C.C.C.C.C.C.C.
 801a048:	02430243 02430243 02430243 02430243     C.C.C.C.C.C.C.C.
 801a058:	02430243 02430243 02430243 02430243     C.C.C.C.C.C.C.C.
 801a068:	02430243 02430243 02430243 02430243     C.C.C.C.C.C.C.C.
 801a078:	02430243 02430243 02430243 02430243     C.C.C.C.C.C.C.C.
 801a088:	02430243 02430243 02430243 02430243     C.C.C.C.C.C.C.C.
 801a098:	02430243 02430243 02430243 02430243     C.C.C.C.C.C.C.C.
 801a0a8:	02430243 02430243 02430243 02430243     C.C.C.C.C.C.C.C.
 801a0b8:	02430243 02430243 02430243 02430243     C.C.C.C.C.C.C.C.
 801a0c8:	02430243 02430243 02430243 02430243     C.C.C.C.C.C.C.C.
 801a0d8:	02430243 02420243 02420242 02420242     C.C.C.B.B.B.B.B.
 801a0e8:	02420242 02420242 02420242 02420242     B.B.B.B.B.B.B.B.
 801a0f8:	02420242 02420242 02420242 02420242     B.B.B.B.B.B.B.B.
 801a108:	02420242 02420242 02420242 02420242     B.B.B.B.B.B.B.B.
 801a118:	02420242 02420242 02420242 02420242     B.B.B.B.B.B.B.B.
 801a128:	02420242 02420242 02420242 02420242     B.B.B.B.B.B.B.B.
 801a138:	02420242 02420242 02420242 02420242     B.B.B.B.B.B.B.B.
 801a148:	02420242 02420242 02420242 02420242     B.B.B.B.B.B.B.B.
 801a158:	02420242 02420242 02420242 02420242     B.B.B.B.B.B.B.B.
 801a168:	02420242 02420242 02420242 02420242     B.B.B.B.B.B.B.B.
 801a178:	02420242 02420242 02420242 02420242     B.B.B.B.B.B.B.B.
 801a188:	02420242 02420242 02420242 02420242     B.B.B.B.B.B.B.B.
 801a198:	02420242 02420242 02420242 02420242     B.B.B.B.B.B.B.B.
 801a1a8:	02420242 02420242 02420242 02420242     B.B.B.B.B.B.B.B.
 801a1b8:	02420242 02420242 02420242 02420242     B.B.B.B.B.B.B.B.
 801a1c8:	02420242 02420242 02420242 02420242     B.B.B.B.B.B.B.B.
 801a1d8:	02420242 02420242 02420242 02420242     B.B.B.B.B.B.B.B.
 801a1e8:	02420242 02420242 02420242 02420242     B.B.B.B.B.B.B.B.
 801a1f8:	02420242 02420242 02410241 02410241     B.B.B.B.A.A.A.A.
 801a208:	02410241 02410241 02410241 02410241     A.A.A.A.A.A.A.A.
 801a218:	02410241 02410241 02410241 02410241     A.A.A.A.A.A.A.A.
 801a228:	02410241 02410241 02410241 02410241     A.A.A.A.A.A.A.A.
 801a238:	02410241 02410241 02410241 02410241     A.A.A.A.A.A.A.A.
 801a248:	02410241 02410241 02410241 02410241     A.A.A.A.A.A.A.A.
 801a258:	02410241 02410241 02410241 02410241     A.A.A.A.A.A.A.A.
 801a268:	02410241 02410241 02410241 02410241     A.A.A.A.A.A.A.A.
 801a278:	02410241 02410241 02410241 02410241     A.A.A.A.A.A.A.A.
 801a288:	02410241 02410241 02410241 02410241     A.A.A.A.A.A.A.A.
 801a298:	02410241 02410241 02410241 02410241     A.A.A.A.A.A.A.A.
 801a2a8:	02410241 02410241 02410241 02410241     A.A.A.A.A.A.A.A.
 801a2b8:	02410241 02410241 02410241 02410241     A.A.A.A.A.A.A.A.
 801a2c8:	02410241 02410241 02410241 02410241     A.A.A.A.A.A.A.A.
 801a2d8:	02410241 02410241 02410241 02410241     A.A.A.A.A.A.A.A.
 801a2e8:	02410241 02410241 02410241 02410241     A.A.A.A.A.A.A.A.
 801a2f8:	02410241 02410241 02410241 02410241     A.A.A.A.A.A.A.A.
 801a308:	02410241 02410241 02410241 02410241     A.A.A.A.A.A.A.A.
 801a318:	02400241 02400240 02400240 02400240     A.@.@.@.@.@.@.@.
 801a328:	02400240 02400240 02400240 02400240     @.@.@.@.@.@.@.@.
 801a338:	02400240 02400240 02400240 02400240     @.@.@.@.@.@.@.@.
 801a348:	02400240 02400240 02400240 02400240     @.@.@.@.@.@.@.@.
 801a358:	02400240 02400240 02400240 02400240     @.@.@.@.@.@.@.@.
 801a368:	02400240 02400240 02400240 02400240     @.@.@.@.@.@.@.@.
 801a378:	02400240 02400240 02400240 02400240     @.@.@.@.@.@.@.@.
 801a388:	02400240 02400240 02400240 02400240     @.@.@.@.@.@.@.@.
 801a398:	02400240 02400240 02400240 02400240     @.@.@.@.@.@.@.@.
 801a3a8:	02400240 02400240 02400240 02400240     @.@.@.@.@.@.@.@.
 801a3b8:	02400240 02400240 02400240 02400240     @.@.@.@.@.@.@.@.
 801a3c8:	02400240 02400240 02400240 02400240     @.@.@.@.@.@.@.@.
 801a3d8:	02400240 02400240 02400240 02400240     @.@.@.@.@.@.@.@.
 801a3e8:	02400240 02400240 02400240 02400240     @.@.@.@.@.@.@.@.
 801a3f8:	02400240 02400240 02400240 02400240     @.@.@.@.@.@.@.@.
 801a408:	02400240 02400240 02400240 02400240     @.@.@.@.@.@.@.@.
 801a418:	02400240 02400240 02400240 02400240     @.@.@.@.@.@.@.@.
 801a428:	02400240 023f0240 023f023f 023f023f     @.@.@.?.?.?.?.?.
 801a438:	023f023f 023f023f 023f023f 023f023f     ?.?.?.?.?.?.?.?.
 801a448:	023f023f 023f023f 023f023f 023f023f     ?.?.?.?.?.?.?.?.
 801a458:	023f023f 023f023f 023f023f 023f023f     ?.?.?.?.?.?.?.?.
 801a468:	023f023f 023f023f 023f023f 023f023f     ?.?.?.?.?.?.?.?.
 801a478:	023f023f 023f023f 023f023f 023f023f     ?.?.?.?.?.?.?.?.
 801a488:	023f023f 023f023f 023f023f 023f023f     ?.?.?.?.?.?.?.?.
 801a498:	023f023f 023f023f 023f023f 023f023f     ?.?.?.?.?.?.?.?.
 801a4a8:	023f023f 023f023f 023f023f 023f023f     ?.?.?.?.?.?.?.?.
 801a4b8:	023f023f 023f023f 023f023f 023f023f     ?.?.?.?.?.?.?.?.
 801a4c8:	023f023f 023f023f 023f023f 023f023f     ?.?.?.?.?.?.?.?.
 801a4d8:	023f023f 023f023f 023f023f 023f023f     ?.?.?.?.?.?.?.?.
 801a4e8:	023f023f 023f023f 023f023f 023f023f     ?.?.?.?.?.?.?.?.
 801a4f8:	023f023f 023f023f 023f023f 023f023f     ?.?.?.?.?.?.?.?.
 801a508:	023f023f 023f023f 023f023f 023f023f     ?.?.?.?.?.?.?.?.
 801a518:	023f023f 023f023f 023f023f 023f023f     ?.?.?.?.?.?.?.?.
 801a528:	023f023f 023f023f 023f023f 023f023f     ?.?.?.?.?.?.?.?.
 801a538:	023f023f 023e023f 023e023e 023e023e     ?.?.?.>.>.>.>.>.
 801a548:	023e023e 023e023e 023e023e 023e023e     >.>.>.>.>.>.>.>.
 801a558:	023e023e 023e023e 023e023e 023e023e     >.>.>.>.>.>.>.>.
 801a568:	023e023e 023e023e 023e023e 023e023e     >.>.>.>.>.>.>.>.
 801a578:	023e023e 023e023e 023e023e 023e023e     >.>.>.>.>.>.>.>.
 801a588:	023e023e 023e023e 023e023e 023e023e     >.>.>.>.>.>.>.>.
 801a598:	023e023e 023e023e 023e023e 023e023e     >.>.>.>.>.>.>.>.
 801a5a8:	023e023e 023e023e 023e023e 023e023e     >.>.>.>.>.>.>.>.
 801a5b8:	023e023e 023e023e 023e023e 023e023e     >.>.>.>.>.>.>.>.
 801a5c8:	023e023e 023e023e 023e023e 023e023e     >.>.>.>.>.>.>.>.
 801a5d8:	023e023e 023e023e 023e023e 023e023e     >.>.>.>.>.>.>.>.
 801a5e8:	023e023e 023e023e 023e023e 023e023e     >.>.>.>.>.>.>.>.
 801a5f8:	023e023e 023e023e 023e023e 023e023e     >.>.>.>.>.>.>.>.
 801a608:	023e023e 023e023e 023e023e 023e023e     >.>.>.>.>.>.>.>.
 801a618:	023e023e 023e023e 023e023e 023e023e     >.>.>.>.>.>.>.>.
 801a628:	023e023e 023e023e 023e023e 023e023e     >.>.>.>.>.>.>.>.
 801a638:	023e023e 023e023e 023e023e 023e023e     >.>.>.>.>.>.>.>.
 801a648:	023d023d 023d023d 023d023d 023d023d     =.=.=.=.=.=.=.=.
 801a658:	023d023d 023d023d 023d023d 023d023d     =.=.=.=.=.=.=.=.
 801a668:	023d023d 023d023d 023d023d 023d023d     =.=.=.=.=.=.=.=.
 801a678:	023d023d 023d023d 023d023d 023d023d     =.=.=.=.=.=.=.=.
 801a688:	023d023d 023d023d 023d023d 023d023d     =.=.=.=.=.=.=.=.
 801a698:	023d023d 023d023d 023d023d 023d023d     =.=.=.=.=.=.=.=.
 801a6a8:	023d023d 023d023d 023d023d 023d023d     =.=.=.=.=.=.=.=.
 801a6b8:	023d023d 023d023d 023d023d 023d023d     =.=.=.=.=.=.=.=.
 801a6c8:	023d023d 023d023d 023d023d 023d023d     =.=.=.=.=.=.=.=.
 801a6d8:	023d023d 023d023d 023d023d 023d023d     =.=.=.=.=.=.=.=.
 801a6e8:	023d023d 023d023d 023d023d 023d023d     =.=.=.=.=.=.=.=.
 801a6f8:	023d023d 023d023d 023d023d 023d023d     =.=.=.=.=.=.=.=.
 801a708:	023d023d 023d023d 023d023d 023d023d     =.=.=.=.=.=.=.=.
 801a718:	023d023d 023d023d 023d023d 023d023d     =.=.=.=.=.=.=.=.
 801a728:	023d023d 023d023d 023d023d 023d023d     =.=.=.=.=.=.=.=.
 801a738:	023d023d 023d023d 023d023d 023d023d     =.=.=.=.=.=.=.=.
 801a748:	023d023d 023c023c 023c023c 023c023c     =.=.<.<.<.<.<.<.
 801a758:	023c023c 023c023c 023c023c 023c023c     <.<.<.<.<.<.<.<.
 801a768:	023c023c 023c023c 023c023c 023c023c     <.<.<.<.<.<.<.<.
 801a778:	023c023c 023c023c 023c023c 023c023c     <.<.<.<.<.<.<.<.
 801a788:	023c023c 023c023c 023c023c 023c023c     <.<.<.<.<.<.<.<.
 801a798:	023c023c 023c023c 023c023c 023c023c     <.<.<.<.<.<.<.<.
 801a7a8:	023c023c 023c023c 023c023c 023c023c     <.<.<.<.<.<.<.<.
 801a7b8:	023c023c 023c023c 023c023c 023c023c     <.<.<.<.<.<.<.<.
 801a7c8:	023c023c 023c023c 023c023c 023c023c     <.<.<.<.<.<.<.<.
 801a7d8:	023c023c 023c023c 023c023c 023c023c     <.<.<.<.<.<.<.<.
 801a7e8:	023c023c 023c023c 023c023c 023c023c     <.<.<.<.<.<.<.<.
 801a7f8:	023c023c 023c023c 023c023c 023c023c     <.<.<.<.<.<.<.<.
 801a808:	023c023c 023c023c 023c023c 023c023c     <.<.<.<.<.<.<.<.
 801a818:	023c023c 023c023c 023c023c 023c023c     <.<.<.<.<.<.<.<.
 801a828:	023c023c 023c023c 023c023c 023c023c     <.<.<.<.<.<.<.<.
 801a838:	023c023c 023c023c 023c023c 023c023c     <.<.<.<.<.<.<.<.
 801a848:	023c023c 023b023b 023b023b 023b023b     <.<.;.;.;.;.;.;.
 801a858:	023b023b 023b023b 023b023b 023b023b     ;.;.;.;.;.;.;.;.
 801a868:	023b023b 023b023b 023b023b 023b023b     ;.;.;.;.;.;.;.;.
 801a878:	023b023b 023b023b 023b023b 023b023b     ;.;.;.;.;.;.;.;.
 801a888:	023b023b 023b023b 023b023b 023b023b     ;.;.;.;.;.;.;.;.
 801a898:	023b023b 023b023b 023b023b 023b023b     ;.;.;.;.;.;.;.;.
 801a8a8:	023b023b 023b023b 023b023b 023b023b     ;.;.;.;.;.;.;.;.
 801a8b8:	023b023b 023b023b 023b023b 023b023b     ;.;.;.;.;.;.;.;.
 801a8c8:	023b023b 023b023b 023b023b 023b023b     ;.;.;.;.;.;.;.;.
 801a8d8:	023b023b 023b023b 023b023b 023b023b     ;.;.;.;.;.;.;.;.
 801a8e8:	023b023b 023b023b 023b023b 023b023b     ;.;.;.;.;.;.;.;.
 801a8f8:	023b023b 023b023b 023b023b 023b023b     ;.;.;.;.;.;.;.;.
 801a908:	023b023b 023b023b 023b023b 023b023b     ;.;.;.;.;.;.;.;.
 801a918:	023b023b 023b023b 023b023b 023b023b     ;.;.;.;.;.;.;.;.
 801a928:	023b023b 023b023b 023b023b 023b023b     ;.;.;.;.;.;.;.;.
 801a938:	023b023b 023b023b 023b023b 023b023b     ;.;.;.;.;.;.;.;.
 801a948:	023a023a 023a023a 023a023a 023a023a     :.:.:.:.:.:.:.:.
 801a958:	023a023a 023a023a 023a023a 023a023a     :.:.:.:.:.:.:.:.
 801a968:	023a023a 023a023a 023a023a 023a023a     :.:.:.:.:.:.:.:.
 801a978:	023a023a 023a023a 023a023a 023a023a     :.:.:.:.:.:.:.:.
 801a988:	023a023a 023a023a 023a023a 023a023a     :.:.:.:.:.:.:.:.
 801a998:	023a023a 023a023a 023a023a 023a023a     :.:.:.:.:.:.:.:.
 801a9a8:	023a023a 023a023a 023a023a 023a023a     :.:.:.:.:.:.:.:.
 801a9b8:	023a023a 023a023a 023a023a 023a023a     :.:.:.:.:.:.:.:.
 801a9c8:	023a023a 023a023a 023a023a 023a023a     :.:.:.:.:.:.:.:.
 801a9d8:	023a023a 023a023a 023a023a 023a023a     :.:.:.:.:.:.:.:.
 801a9e8:	023a023a 023a023a 023a023a 023a023a     :.:.:.:.:.:.:.:.
 801a9f8:	023a023a 023a023a 023a023a 023a023a     :.:.:.:.:.:.:.:.
 801aa08:	023a023a 023a023a 023a023a 023a023a     :.:.:.:.:.:.:.:.
 801aa18:	023a023a 023a023a 023a023a 023a023a     :.:.:.:.:.:.:.:.
 801aa28:	023a023a 023a023a 023a023a 023a023a     :.:.:.:.:.:.:.:.
 801aa38:	023a023a 023a023a 02390239 02390239     :.:.:.:.9.9.9.9.
 801aa48:	02390239 02390239 02390239 02390239     9.9.9.9.9.9.9.9.
 801aa58:	02390239 02390239 02390239 02390239     9.9.9.9.9.9.9.9.
 801aa68:	02390239 02390239 02390239 02390239     9.9.9.9.9.9.9.9.
 801aa78:	02390239 02390239 02390239 02390239     9.9.9.9.9.9.9.9.
 801aa88:	02390239 02390239 02390239 02390239     9.9.9.9.9.9.9.9.
 801aa98:	02390239 02390239 02390239 02390239     9.9.9.9.9.9.9.9.
 801aaa8:	02390239 02390239 02390239 02390239     9.9.9.9.9.9.9.9.
 801aab8:	02390239 02390239 02390239 02390239     9.9.9.9.9.9.9.9.
 801aac8:	02390239 02390239 02390239 02390239     9.9.9.9.9.9.9.9.
 801aad8:	02390239 02390239 02390239 02390239     9.9.9.9.9.9.9.9.
 801aae8:	02390239 02390239 02390239 02390239     9.9.9.9.9.9.9.9.
 801aaf8:	02390239 02390239 02390239 02390239     9.9.9.9.9.9.9.9.
 801ab08:	02390239 02390239 02390239 02390239     9.9.9.9.9.9.9.9.
 801ab18:	02390239 02390239 02390239 02390239     9.9.9.9.9.9.9.9.
 801ab28:	02390239 02390239 02390239 02380238     9.9.9.9.9.9.8.8.
 801ab38:	02380238 02380238 02380238 02380238     8.8.8.8.8.8.8.8.
 801ab48:	02380238 02380238 02380238 02380238     8.8.8.8.8.8.8.8.
 801ab58:	02380238 02380238 02380238 02380238     8.8.8.8.8.8.8.8.
 801ab68:	02380238 02380238 02380238 02380238     8.8.8.8.8.8.8.8.
 801ab78:	02380238 02380238 02380238 02380238     8.8.8.8.8.8.8.8.
 801ab88:	02380238 02380238 02380238 02380238     8.8.8.8.8.8.8.8.
 801ab98:	02380238 02380238 02380238 02380238     8.8.8.8.8.8.8.8.
 801aba8:	02380238 02380238 02380238 02380238     8.8.8.8.8.8.8.8.
 801abb8:	02380238 02380238 02380238 02380238     8.8.8.8.8.8.8.8.
 801abc8:	02380238 02380238 02380238 02380238     8.8.8.8.8.8.8.8.
 801abd8:	02380238 02380238 02380238 02380238     8.8.8.8.8.8.8.8.
 801abe8:	02380238 02380238 02380238 02380238     8.8.8.8.8.8.8.8.
 801abf8:	02380238 02380238 02380238 02380238     8.8.8.8.8.8.8.8.
 801ac08:	02380238 02380238 02380238 02380238     8.8.8.8.8.8.8.8.
 801ac18:	02380238 02380238 02380238 02370237     8.8.8.8.8.8.7.7.
 801ac28:	02370237 02370237 02370237 02370237     7.7.7.7.7.7.7.7.
 801ac38:	02370237 02370237 02370237 02370237     7.7.7.7.7.7.7.7.
 801ac48:	02370237 02370237 02370237 02370237     7.7.7.7.7.7.7.7.
 801ac58:	02370237 02370237 02370237 02370237     7.7.7.7.7.7.7.7.
 801ac68:	02370237 02370237 02370237 02370237     7.7.7.7.7.7.7.7.
 801ac78:	02370237 02370237 02370237 02370237     7.7.7.7.7.7.7.7.
 801ac88:	02370237 02370237 02370237 02370237     7.7.7.7.7.7.7.7.
 801ac98:	02370237 02370237 02370237 02370237     7.7.7.7.7.7.7.7.
 801aca8:	02370237 02370237 02370237 02370237     7.7.7.7.7.7.7.7.
 801acb8:	02370237 02370237 02370237 02370237     7.7.7.7.7.7.7.7.
 801acc8:	02370237 02370237 02370237 02370237     7.7.7.7.7.7.7.7.
 801acd8:	02370237 02370237 02370237 02370237     7.7.7.7.7.7.7.7.
 801ace8:	02370237 02370237 02370237 02370237     7.7.7.7.7.7.7.7.
 801acf8:	02370237 02370237 02370237 02370237     7.7.7.7.7.7.7.7.
 801ad08:	02370237 02370237 02360236 02360236     7.7.7.7.6.6.6.6.
 801ad18:	02360236 02360236 02360236 02360236     6.6.6.6.6.6.6.6.
 801ad28:	02360236 02360236 02360236 02360236     6.6.6.6.6.6.6.6.
 801ad38:	02360236 02360236 02360236 02360236     6.6.6.6.6.6.6.6.
 801ad48:	02360236 02360236 02360236 02360236     6.6.6.6.6.6.6.6.
 801ad58:	02360236 02360236 02360236 02360236     6.6.6.6.6.6.6.6.
 801ad68:	02360236 02360236 02360236 02360236     6.6.6.6.6.6.6.6.
 801ad78:	02360236 02360236 02360236 02360236     6.6.6.6.6.6.6.6.
 801ad88:	02360236 02360236 02360236 02360236     6.6.6.6.6.6.6.6.
 801ad98:	02360236 02360236 02360236 02360236     6.6.6.6.6.6.6.6.
 801ada8:	02360236 02360236 02360236 02360236     6.6.6.6.6.6.6.6.
 801adb8:	02360236 02360236 02360236 02360236     6.6.6.6.6.6.6.6.
 801adc8:	02360236 02360236 02360236 02360236     6.6.6.6.6.6.6.6.
 801add8:	02360236 02360236 02360236 02360236     6.6.6.6.6.6.6.6.
 801ade8:	02360236 02360236 02360236 02360236     6.6.6.6.6.6.6.6.
 801adf8:	02350235 02350235 02350235 02350235     5.5.5.5.5.5.5.5.
 801ae08:	02350235 02350235 02350235 02350235     5.5.5.5.5.5.5.5.
 801ae18:	02350235 02350235 02350235 02350235     5.5.5.5.5.5.5.5.
 801ae28:	02350235 02350235 02350235 02350235     5.5.5.5.5.5.5.5.
 801ae38:	02350235 02350235 02350235 02350235     5.5.5.5.5.5.5.5.
 801ae48:	02350235 02350235 02350235 02350235     5.5.5.5.5.5.5.5.
 801ae58:	02350235 02350235 02350235 02350235     5.5.5.5.5.5.5.5.
 801ae68:	02350235 02350235 02350235 02350235     5.5.5.5.5.5.5.5.
 801ae78:	02350235 02350235 02350235 02350235     5.5.5.5.5.5.5.5.
 801ae88:	02350235 02350235 02350235 02350235     5.5.5.5.5.5.5.5.
 801ae98:	02350235 02350235 02350235 02350235     5.5.5.5.5.5.5.5.
 801aea8:	02350235 02350235 02350235 02350235     5.5.5.5.5.5.5.5.
 801aeb8:	02350235 02350235 02350235 02350235     5.5.5.5.5.5.5.5.
 801aec8:	02350235 02350235 02350235 02350235     5.5.5.5.5.5.5.5.
 801aed8:	02350235 02340235 02340234 02340234     5.5.5.4.4.4.4.4.
 801aee8:	02340234 02340234 02340234 02340234     4.4.4.4.4.4.4.4.
 801aef8:	02340234 02340234 02340234 02340234     4.4.4.4.4.4.4.4.
 801af08:	02340234 02340234 02340234 02340234     4.4.4.4.4.4.4.4.
 801af18:	02340234 02340234 02340234 02340234     4.4.4.4.4.4.4.4.
 801af28:	02340234 02340234 02340234 02340234     4.4.4.4.4.4.4.4.
 801af38:	02340234 02340234 02340234 02340234     4.4.4.4.4.4.4.4.
 801af48:	02340234 02340234 02340234 02340234     4.4.4.4.4.4.4.4.
 801af58:	02340234 02340234 02340234 02340234     4.4.4.4.4.4.4.4.
 801af68:	02340234 02340234 02340234 02340234     4.4.4.4.4.4.4.4.
 801af78:	02340234 02340234 02340234 02340234     4.4.4.4.4.4.4.4.
 801af88:	02340234 02340234 02340234 02340234     4.4.4.4.4.4.4.4.
 801af98:	02340234 02340234 02340234 02340234     4.4.4.4.4.4.4.4.
 801afa8:	02340234 02340234 02340234 02340234     4.4.4.4.4.4.4.4.
 801afb8:	02340234 02340234 02330233 02330233     4.4.4.4.3.3.3.3.
 801afc8:	02330233 02330233 02330233 02330233     3.3.3.3.3.3.3.3.
 801afd8:	02330233 02330233 02330233 02330233     3.3.3.3.3.3.3.3.
 801afe8:	02330233 02330233 02330233 02330233     3.3.3.3.3.3.3.3.
 801aff8:	02330233 02330233 02330233 02330233     3.3.3.3.3.3.3.3.
 801b008:	02330233 02330233 02330233 02330233     3.3.3.3.3.3.3.3.
 801b018:	02330233 02330233 02330233 02330233     3.3.3.3.3.3.3.3.
 801b028:	02330233 02330233 02330233 02330233     3.3.3.3.3.3.3.3.
 801b038:	02330233 02330233 02330233 02330233     3.3.3.3.3.3.3.3.
 801b048:	02330233 02330233 02330233 02330233     3.3.3.3.3.3.3.3.
 801b058:	02330233 02330233 02330233 02330233     3.3.3.3.3.3.3.3.
 801b068:	02330233 02330233 02330233 02330233     3.3.3.3.3.3.3.3.
 801b078:	02330233 02330233 02330233 02330233     3.3.3.3.3.3.3.3.
 801b088:	02330233 02330233 02330233 02330233     3.3.3.3.3.3.3.3.
 801b098:	02330233 02330233 02320232 02320232     3.3.3.3.2.2.2.2.
 801b0a8:	02320232 02320232 02320232 02320232     2.2.2.2.2.2.2.2.
 801b0b8:	02320232 02320232 02320232 02320232     2.2.2.2.2.2.2.2.
 801b0c8:	02320232 02320232 02320232 02320232     2.2.2.2.2.2.2.2.
 801b0d8:	02320232 02320232 02320232 02320232     2.2.2.2.2.2.2.2.
 801b0e8:	02320232 02320232 02320232 02320232     2.2.2.2.2.2.2.2.
 801b0f8:	02320232 02320232 02320232 02320232     2.2.2.2.2.2.2.2.
 801b108:	02320232 02320232 02320232 02320232     2.2.2.2.2.2.2.2.
 801b118:	02320232 02320232 02320232 02320232     2.2.2.2.2.2.2.2.
 801b128:	02320232 02320232 02320232 02320232     2.2.2.2.2.2.2.2.
 801b138:	02320232 02320232 02320232 02320232     2.2.2.2.2.2.2.2.
 801b148:	02320232 02320232 02320232 02320232     2.2.2.2.2.2.2.2.
 801b158:	02320232 02320232 02320232 02320232     2.2.2.2.2.2.2.2.
 801b168:	02320232 02320232 02320232 02320232     2.2.2.2.2.2.2.2.
 801b178:	02320232 02310231 02310231 02310231     2.2.1.1.1.1.1.1.
 801b188:	02310231 02310231 02310231 02310231     1.1.1.1.1.1.1.1.
 801b198:	02310231 02310231 02310231 02310231     1.1.1.1.1.1.1.1.
 801b1a8:	02310231 02310231 02310231 02310231     1.1.1.1.1.1.1.1.
 801b1b8:	02310231 02310231 02310231 02310231     1.1.1.1.1.1.1.1.
 801b1c8:	02310231 02310231 02310231 02310231     1.1.1.1.1.1.1.1.
 801b1d8:	02310231 02310231 02310231 02310231     1.1.1.1.1.1.1.1.
 801b1e8:	02310231 02310231 02310231 02310231     1.1.1.1.1.1.1.1.
 801b1f8:	02310231 02310231 02310231 02310231     1.1.1.1.1.1.1.1.
 801b208:	02310231 02310231 02310231 02310231     1.1.1.1.1.1.1.1.
 801b218:	02310231 02310231 02310231 02310231     1.1.1.1.1.1.1.1.
 801b228:	02310231 02310231 02310231 02310231     1.1.1.1.1.1.1.1.
 801b238:	02310231 02310231 02310231 02310231     1.1.1.1.1.1.1.1.
 801b248:	02310231 02310231 02310231 02300231     1.1.1.1.1.1.1.0.
 801b258:	02300230 02300230 02300230 02300230     0.0.0.0.0.0.0.0.
 801b268:	02300230 02300230 02300230 02300230     0.0.0.0.0.0.0.0.
 801b278:	02300230 02300230 02300230 02300230     0.0.0.0.0.0.0.0.
 801b288:	02300230 02300230 02300230 02300230     0.0.0.0.0.0.0.0.
 801b298:	02300230 02300230 02300230 02300230     0.0.0.0.0.0.0.0.
 801b2a8:	02300230 02300230 02300230 02300230     0.0.0.0.0.0.0.0.
 801b2b8:	02300230 02300230 02300230 02300230     0.0.0.0.0.0.0.0.
 801b2c8:	02300230 02300230 02300230 02300230     0.0.0.0.0.0.0.0.
 801b2d8:	02300230 02300230 02300230 02300230     0.0.0.0.0.0.0.0.
 801b2e8:	02300230 02300230 02300230 02300230     0.0.0.0.0.0.0.0.
 801b2f8:	02300230 02300230 02300230 02300230     0.0.0.0.0.0.0.0.
 801b308:	02300230 02300230 02300230 02300230     0.0.0.0.0.0.0.0.
 801b318:	02300230 02300230 02300230 02300230     0.0.0.0.0.0.0.0.
 801b328:	02300230 022f0230 022f022f 022f022f     0.0.0./././././.
 801b338:	022f022f 022f022f 022f022f 022f022f     /./././././././.
 801b348:	022f022f 022f022f 022f022f 022f022f     /./././././././.
 801b358:	022f022f 022f022f 022f022f 022f022f     /./././././././.
 801b368:	022f022f 022f022f 022f022f 022f022f     /./././././././.
 801b378:	022f022f 022f022f 022f022f 022f022f     /./././././././.
 801b388:	022f022f 022f022f 022f022f 022f022f     /./././././././.
 801b398:	022f022f 022f022f 022f022f 022f022f     /./././././././.
 801b3a8:	022f022f 022f022f 022f022f 022f022f     /./././././././.
 801b3b8:	022f022f 022f022f 022f022f 022f022f     /./././././././.
 801b3c8:	022f022f 022f022f 022f022f 022f022f     /./././././././.
 801b3d8:	022f022f 022f022f 022f022f 022f022f     /./././././././.
 801b3e8:	022f022f 022f022f 022f022f 022f022f     /./././././././.
 801b3f8:	022f022f 022f022f 022f022f 022e022e     /./././././.....
 801b408:	022e022e 022e022e 022e022e 022e022e     ................
 801b418:	022e022e 022e022e 022e022e 022e022e     ................
 801b428:	022e022e 022e022e 022e022e 022e022e     ................
 801b438:	022e022e 022e022e 022e022e 022e022e     ................
 801b448:	022e022e 022e022e 022e022e 022e022e     ................
 801b458:	022e022e 022e022e 022e022e 022e022e     ................
 801b468:	022e022e 022e022e 022e022e 022e022e     ................
 801b478:	022e022e 022e022e 022e022e 022e022e     ................
 801b488:	022e022e 022e022e 022e022e 022e022e     ................
 801b498:	022e022e 022e022e 022e022e 022e022e     ................
 801b4a8:	022e022e 022e022e 022e022e 022e022e     ................
 801b4b8:	022e022e 022e022e 022e022e 022e022e     ................
 801b4c8:	022e022e 022e022e 022e022e 022d022e     ..............-.
 801b4d8:	022d022d 022d022d 022d022d 022d022d     -.-.-.-.-.-.-.-.
 801b4e8:	022d022d 022d022d 022d022d 022d022d     -.-.-.-.-.-.-.-.
 801b4f8:	022d022d 022d022d 022d022d 022d022d     -.-.-.-.-.-.-.-.
 801b508:	022d022d 022d022d 022d022d 022d022d     -.-.-.-.-.-.-.-.
 801b518:	022d022d 022d022d 022d022d 022d022d     -.-.-.-.-.-.-.-.
 801b528:	022d022d 022d022d 022d022d 022d022d     -.-.-.-.-.-.-.-.
 801b538:	022d022d 022d022d 022d022d 022d022d     -.-.-.-.-.-.-.-.
 801b548:	022d022d 022d022d 022d022d 022d022d     -.-.-.-.-.-.-.-.
 801b558:	022d022d 022d022d 022d022d 022d022d     -.-.-.-.-.-.-.-.
 801b568:	022d022d 022d022d 022d022d 022d022d     -.-.-.-.-.-.-.-.
 801b578:	022d022d 022d022d 022d022d 022d022d     -.-.-.-.-.-.-.-.
 801b588:	022d022d 022d022d 022d022d 022d022d     -.-.-.-.-.-.-.-.
 801b598:	022d022d 022d022d 022d022d 022c022d     -.-.-.-.-.-.-.,.
 801b5a8:	022c022c 022c022c 022c022c 022c022c     ,.,.,.,.,.,.,.,.
 801b5b8:	022c022c 022c022c 022c022c 022c022c     ,.,.,.,.,.,.,.,.
 801b5c8:	022c022c 022c022c 022c022c 022c022c     ,.,.,.,.,.,.,.,.
 801b5d8:	022c022c 022c022c 022c022c 022c022c     ,.,.,.,.,.,.,.,.
 801b5e8:	022c022c 022c022c 022c022c 022c022c     ,.,.,.,.,.,.,.,.
 801b5f8:	022c022c 022c022c 022c022c 022c022c     ,.,.,.,.,.,.,.,.
 801b608:	022c022c 022c022c 022c022c 022c022c     ,.,.,.,.,.,.,.,.
 801b618:	022c022c 022c022c 022c022c 022c022c     ,.,.,.,.,.,.,.,.
 801b628:	022c022c 022c022c 022c022c 022c022c     ,.,.,.,.,.,.,.,.
 801b638:	022c022c 022c022c 022c022c 022c022c     ,.,.,.,.,.,.,.,.
 801b648:	022c022c 022c022c 022c022c 022c022c     ,.,.,.,.,.,.,.,.
 801b658:	022c022c 022c022c 022c022c 022c022c     ,.,.,.,.,.,.,.,.
 801b668:	022c022c 022c022c 022c022c 022b022b     ,.,.,.,.,.,.+.+.
 801b678:	022b022b 022b022b 022b022b 022b022b     +.+.+.+.+.+.+.+.
 801b688:	022b022b 022b022b 022b022b 022b022b     +.+.+.+.+.+.+.+.
 801b698:	022b022b 022b022b 022b022b 022b022b     +.+.+.+.+.+.+.+.
 801b6a8:	022b022b 022b022b 022b022b 022b022b     +.+.+.+.+.+.+.+.
 801b6b8:	022b022b 022b022b 022b022b 022b022b     +.+.+.+.+.+.+.+.
 801b6c8:	022b022b 022b022b 022b022b 022b022b     +.+.+.+.+.+.+.+.
 801b6d8:	022b022b 022b022b 022b022b 022b022b     +.+.+.+.+.+.+.+.
 801b6e8:	022b022b 022b022b 022b022b 022b022b     +.+.+.+.+.+.+.+.
 801b6f8:	022b022b 022b022b 022b022b 022b022b     +.+.+.+.+.+.+.+.
 801b708:	022b022b 022b022b 022b022b 022b022b     +.+.+.+.+.+.+.+.
 801b718:	022b022b 022b022b 022b022b 022b022b     +.+.+.+.+.+.+.+.
 801b728:	022b022b 022b022b 022b022b 022b022b     +.+.+.+.+.+.+.+.
 801b738:	022b022b 022b022b 022a022a 022a022a     +.+.+.+.*.*.*.*.
 801b748:	022a022a 022a022a 022a022a 022a022a     *.*.*.*.*.*.*.*.
 801b758:	022a022a 022a022a 022a022a 022a022a     *.*.*.*.*.*.*.*.
 801b768:	022a022a 022a022a 022a022a 022a022a     *.*.*.*.*.*.*.*.
 801b778:	022a022a 022a022a 022a022a 022a022a     *.*.*.*.*.*.*.*.
 801b788:	022a022a 022a022a 022a022a 022a022a     *.*.*.*.*.*.*.*.
 801b798:	022a022a 022a022a 022a022a 022a022a     *.*.*.*.*.*.*.*.
 801b7a8:	022a022a 022a022a 022a022a 022a022a     *.*.*.*.*.*.*.*.
 801b7b8:	022a022a 022a022a 022a022a 022a022a     *.*.*.*.*.*.*.*.
 801b7c8:	022a022a 022a022a 022a022a 022a022a     *.*.*.*.*.*.*.*.
 801b7d8:	022a022a 022a022a 022a022a 022a022a     *.*.*.*.*.*.*.*.
 801b7e8:	022a022a 022a022a 022a022a 022a022a     *.*.*.*.*.*.*.*.
 801b7f8:	022a022a 022a022a 022a022a 022a022a     *.*.*.*.*.*.*.*.
 801b808:	02290229 02290229 02290229 02290229     ).).).).).).).).
 801b818:	02290229 02290229 02290229 02290229     ).).).).).).).).
 801b828:	02290229 02290229 02290229 02290229     ).).).).).).).).
 801b838:	02290229 02290229 02290229 02290229     ).).).).).).).).
 801b848:	02290229 02290229 02290229 02290229     ).).).).).).).).
 801b858:	02290229 02290229 02290229 02290229     ).).).).).).).).
 801b868:	02290229 02290229 02290229 02290229     ).).).).).).).).
 801b878:	02290229 02290229 02290229 02290229     ).).).).).).).).
 801b888:	02290229 02290229 02290229 02290229     ).).).).).).).).
 801b898:	02290229 02290229 02290229 02290229     ).).).).).).).).
 801b8a8:	02290229 02290229 02290229 02290229     ).).).).).).).).
 801b8b8:	02290229 02290229 02290229 02290229     ).).).).).).).).
 801b8c8:	02290229 02290229 02280228 02280228     ).).).).(.(.(.(.
 801b8d8:	02280228 02280228 02280228 02280228     (.(.(.(.(.(.(.(.
 801b8e8:	02280228 02280228 02280228 02280228     (.(.(.(.(.(.(.(.
 801b8f8:	02280228 02280228 02280228 02280228     (.(.(.(.(.(.(.(.
 801b908:	02280228 02280228 02280228 02280228     (.(.(.(.(.(.(.(.
 801b918:	02280228 02280228 02280228 02280228     (.(.(.(.(.(.(.(.
 801b928:	02280228 02280228 02280228 02280228     (.(.(.(.(.(.(.(.
 801b938:	02280228 02280228 02280228 02280228     (.(.(.(.(.(.(.(.
 801b948:	02280228 02280228 02280228 02280228     (.(.(.(.(.(.(.(.
 801b958:	02280228 02280228 02280228 02280228     (.(.(.(.(.(.(.(.
 801b968:	02280228 02280228 02280228 02280228     (.(.(.(.(.(.(.(.
 801b978:	02280228 02280228 02280228 02280228     (.(.(.(.(.(.(.(.
 801b988:	02280228 02280228 02280228 02270228     (.(.(.(.(.(.(.'.
 801b998:	02270227 02270227 02270227 02270227     '.'.'.'.'.'.'.'.
 801b9a8:	02270227 02270227 02270227 02270227     '.'.'.'.'.'.'.'.
 801b9b8:	02270227 02270227 02270227 02270227     '.'.'.'.'.'.'.'.
 801b9c8:	02270227 02270227 02270227 02270227     '.'.'.'.'.'.'.'.
 801b9d8:	02270227 02270227 02270227 02270227     '.'.'.'.'.'.'.'.
 801b9e8:	02270227 02270227 02270227 02270227     '.'.'.'.'.'.'.'.
 801b9f8:	02270227 02270227 02270227 02270227     '.'.'.'.'.'.'.'.
 801ba08:	02270227 02270227 02270227 02270227     '.'.'.'.'.'.'.'.
 801ba18:	02270227 02270227 02270227 02270227     '.'.'.'.'.'.'.'.
 801ba28:	02270227 02270227 02270227 02270227     '.'.'.'.'.'.'.'.
 801ba38:	02270227 02270227 02270227 02270227     '.'.'.'.'.'.'.'.
 801ba48:	02270227 02270227 02270227 02270227     '.'.'.'.'.'.'.'.
 801ba58:	02260227 02260226 02260226 02260226     '.&.&.&.&.&.&.&.
 801ba68:	02260226 02260226 02260226 02260226     &.&.&.&.&.&.&.&.
 801ba78:	02260226 02260226 02260226 02260226     &.&.&.&.&.&.&.&.
 801ba88:	02260226 02260226 02260226 02260226     &.&.&.&.&.&.&.&.
 801ba98:	02260226 02260226 02260226 02260226     &.&.&.&.&.&.&.&.
 801baa8:	02260226 02260226 02260226 02260226     &.&.&.&.&.&.&.&.
 801bab8:	02260226 02260226 02260226 02260226     &.&.&.&.&.&.&.&.
 801bac8:	02260226 02260226 02260226 02260226     &.&.&.&.&.&.&.&.
 801bad8:	02260226 02260226 02260226 02260226     &.&.&.&.&.&.&.&.
 801bae8:	02260226 02260226 02260226 02260226     &.&.&.&.&.&.&.&.
 801baf8:	02260226 02260226 02260226 02260226     &.&.&.&.&.&.&.&.
 801bb08:	02260226 02260226 02260226 02260226     &.&.&.&.&.&.&.&.
 801bb18:	02260226 02250225 02250225 02250225     &.&.%.%.%.%.%.%.
 801bb28:	02250225 02250225 02250225 02250225     %.%.%.%.%.%.%.%.
 801bb38:	02250225 02250225 02250225 02250225     %.%.%.%.%.%.%.%.
 801bb48:	02250225 02250225 02250225 02250225     %.%.%.%.%.%.%.%.
 801bb58:	02250225 02250225 02250225 02250225     %.%.%.%.%.%.%.%.
 801bb68:	02250225 02250225 02250225 02250225     %.%.%.%.%.%.%.%.
 801bb78:	02250225 02250225 02250225 02250225     %.%.%.%.%.%.%.%.
 801bb88:	02250225 02250225 02250225 02250225     %.%.%.%.%.%.%.%.
 801bb98:	02250225 02250225 02250225 02250225     %.%.%.%.%.%.%.%.
 801bba8:	02250225 02250225 02250225 02250225     %.%.%.%.%.%.%.%.
 801bbb8:	02250225 02250225 02250225 02250225     %.%.%.%.%.%.%.%.
 801bbc8:	02250225 02250225 02250225 02250225     %.%.%.%.%.%.%.%.
 801bbd8:	02250225 02240224 02240224 02240224     %.%.$.$.$.$.$.$.
 801bbe8:	02240224 02240224 02240224 02240224     $.$.$.$.$.$.$.$.
 801bbf8:	02240224 02240224 02240224 02240224     $.$.$.$.$.$.$.$.
 801bc08:	02240224 02240224 02240224 02240224     $.$.$.$.$.$.$.$.
 801bc18:	02240224 02240224 02240224 02240224     $.$.$.$.$.$.$.$.
 801bc28:	02240224 02240224 02240224 02240224     $.$.$.$.$.$.$.$.
 801bc38:	02240224 02240224 02240224 02240224     $.$.$.$.$.$.$.$.
 801bc48:	02240224 02240224 02240224 02240224     $.$.$.$.$.$.$.$.
 801bc58:	02240224 02240224 02240224 02240224     $.$.$.$.$.$.$.$.
 801bc68:	02240224 02240224 02240224 02240224     $.$.$.$.$.$.$.$.
 801bc78:	02240224 02240224 02240224 02240224     $.$.$.$.$.$.$.$.
 801bc88:	02240224 02240224 02240224 02240224     $.$.$.$.$.$.$.$.
 801bc98:	02230224 02230223 02230223 02230223     $.#.#.#.#.#.#.#.
 801bca8:	02230223 02230223 02230223 02230223     #.#.#.#.#.#.#.#.
 801bcb8:	02230223 02230223 02230223 02230223     #.#.#.#.#.#.#.#.
 801bcc8:	02230223 02230223 02230223 02230223     #.#.#.#.#.#.#.#.
 801bcd8:	02230223 02230223 02230223 02230223     #.#.#.#.#.#.#.#.
 801bce8:	02230223 02230223 02230223 02230223     #.#.#.#.#.#.#.#.
 801bcf8:	02230223 02230223 02230223 02230223     #.#.#.#.#.#.#.#.
 801bd08:	02230223 02230223 02230223 02230223     #.#.#.#.#.#.#.#.
 801bd18:	02230223 02230223 02230223 02230223     #.#.#.#.#.#.#.#.
 801bd28:	02230223 02230223 02230223 02230223     #.#.#.#.#.#.#.#.
 801bd38:	02230223 02230223 02230223 02230223     #.#.#.#.#.#.#.#.
 801bd48:	02230223 02230223 02230223 02220223     #.#.#.#.#.#.#.".
 801bd58:	02220222 02220222 02220222 02220222     ".".".".".".".".
 801bd68:	02220222 02220222 02220222 02220222     ".".".".".".".".
 801bd78:	02220222 02220222 02220222 02220222     ".".".".".".".".
 801bd88:	02220222 02220222 02220222 02220222     ".".".".".".".".
 801bd98:	02220222 02220222 02220222 02220222     ".".".".".".".".
 801bda8:	02220222 02220222 02220222 02220222     ".".".".".".".".
 801bdb8:	02220222 02220222 02220222 02220222     ".".".".".".".".
 801bdc8:	02220222 02220222 02220222 02220222     ".".".".".".".".
 801bdd8:	02220222 02220222 02220222 02220222     ".".".".".".".".
 801bde8:	02220222 02220222 02220222 02220222     ".".".".".".".".
 801bdf8:	02220222 02220222 02220222 02220222     ".".".".".".".".
 801be08:	02220222 02220222 02210222 02210221     ".".".".".!.!.!.
 801be18:	02210221 02210221 02210221 02210221     !.!.!.!.!.!.!.!.
 801be28:	02210221 02210221 02210221 02210221     !.!.!.!.!.!.!.!.
 801be38:	02210221 02210221 02210221 02210221     !.!.!.!.!.!.!.!.
 801be48:	02210221 02210221 02210221 02210221     !.!.!.!.!.!.!.!.
 801be58:	02210221 02210221 02210221 02210221     !.!.!.!.!.!.!.!.
 801be68:	02210221 02210221 02210221 02210221     !.!.!.!.!.!.!.!.
 801be78:	02210221 02210221 02210221 02210221     !.!.!.!.!.!.!.!.
 801be88:	02210221 02210221 02210221 02210221     !.!.!.!.!.!.!.!.
 801be98:	02210221 02210221 02210221 02210221     !.!.!.!.!.!.!.!.
 801bea8:	02210221 02210221 02210221 02210221     !.!.!.!.!.!.!.!.
 801beb8:	02210221 02210221 02210221 02210221     !.!.!.!.!.!.!.!.
 801bec8:	02210221 02200220 02200220 02200220     !.!. . . . . . .
 801bed8:	02200220 02200220 02200220 02200220      . . . . . . . .
 801bee8:	02200220 02200220 02200220 02200220      . . . . . . . .
 801bef8:	02200220 02200220 02200220 02200220      . . . . . . . .
 801bf08:	02200220 02200220 02200220 02200220      . . . . . . . .
 801bf18:	02200220 02200220 02200220 02200220      . . . . . . . .
 801bf28:	02200220 02200220 02200220 02200220      . . . . . . . .
 801bf38:	02200220 02200220 02200220 02200220      . . . . . . . .
 801bf48:	02200220 02200220 02200220 02200220      . . . . . . . .
 801bf58:	02200220 02200220 02200220 02200220      . . . . . . . .
 801bf68:	02200220 02200220 02200220 02200220      . . . . . . . .
 801bf78:	02200220 02200220 02200220 021f021f      . . . . . .....
 801bf88:	021f021f 021f021f 021f021f 021f021f     ................
 801bf98:	021f021f 021f021f 021f021f 021f021f     ................
 801bfa8:	021f021f 021f021f 021f021f 021f021f     ................
 801bfb8:	021f021f 021f021f 021f021f 021f021f     ................
 801bfc8:	021f021f 021f021f 021f021f 021f021f     ................
 801bfd8:	021f021f 021f021f 021f021f 021f021f     ................
 801bfe8:	021f021f 021f021f 021f021f 021f021f     ................
 801bff8:	021f021f 021f021f 021f021f 021f021f     ................
 801c008:	021f021f 021f021f 021f021f 021f021f     ................
 801c018:	021f021f 021f021f 021f021f 021f021f     ................
 801c028:	021f021f 021f021f 021f021f 021f021f     ................
 801c038:	021e021f 021e021e 021e021e 021e021e     ................
 801c048:	021e021e 021e021e 021e021e 021e021e     ................
 801c058:	021e021e 021e021e 021e021e 021e021e     ................
 801c068:	021e021e 021e021e 021e021e 021e021e     ................
 801c078:	021e021e 021e021e 021e021e 021e021e     ................
 801c088:	021e021e 021e021e 021e021e 021e021e     ................
 801c098:	021e021e 021e021e 021e021e 021e021e     ................
 801c0a8:	021e021e 021e021e 021e021e 021e021e     ................
 801c0b8:	021e021e 021e021e 021e021e 021e021e     ................
 801c0c8:	021e021e 021e021e 021e021e 021e021e     ................
 801c0d8:	021e021e 021e021e 021e021e 021e021e     ................
 801c0e8:	021e021e 021e021e 021d021d 021d021d     ................
 801c0f8:	021d021d 021d021d 021d021d 021d021d     ................
 801c108:	021d021d 021d021d 021d021d 021d021d     ................
 801c118:	021d021d 021d021d 021d021d 021d021d     ................
 801c128:	021d021d 021d021d 021d021d 021d021d     ................
 801c138:	021d021d 021d021d 021d021d 021d021d     ................
 801c148:	021d021d 021d021d 021d021d 021d021d     ................
 801c158:	021d021d 021d021d 021d021d 021d021d     ................
 801c168:	021d021d 021d021d 021d021d 021d021d     ................
 801c178:	021d021d 021d021d 021d021d 021d021d     ................
 801c188:	021d021d 021d021d 021d021d 021d021d     ................
 801c198:	021d021d 021d021d 021c021d 021c021c     ................
 801c1a8:	021c021c 021c021c 021c021c 021c021c     ................
 801c1b8:	021c021c 021c021c 021c021c 021c021c     ................
 801c1c8:	021c021c 021c021c 021c021c 021c021c     ................
 801c1d8:	021c021c 021c021c 021c021c 021c021c     ................
 801c1e8:	021c021c 021c021c 021c021c 021c021c     ................
 801c1f8:	021c021c 021c021c 021c021c 021c021c     ................
 801c208:	021c021c 021c021c 021c021c 021c021c     ................
 801c218:	021c021c 021c021c 021c021c 021c021c     ................
 801c228:	021c021c 021c021c 021c021c 021c021c     ................
 801c238:	021c021c 021c021c 021c021c 021c021c     ................
 801c248:	021c021c 021c021c 021c021c 021b021c     ................
 801c258:	021b021b 021b021b 021b021b 021b021b     ................
 801c268:	021b021b 021b021b 021b021b 021b021b     ................
 801c278:	021b021b 021b021b 021b021b 021b021b     ................
 801c288:	021b021b 021b021b 021b021b 021b021b     ................
 801c298:	021b021b 021b021b 021b021b 021b021b     ................
 801c2a8:	021b021b 021b021b 021b021b 021b021b     ................
 801c2b8:	021b021b 021b021b 021b021b 021b021b     ................
 801c2c8:	021b021b 021b021b 021b021b 021b021b     ................
 801c2d8:	021b021b 021b021b 021b021b 021b021b     ................
 801c2e8:	021b021b 021b021b 021b021b 021b021b     ................
 801c2f8:	021b021b 021b021b 021b021b 021a021b     ................
 801c308:	021a021a 021a021a 021a021a 021a021a     ................
 801c318:	021a021a 021a021a 021a021a 021a021a     ................
 801c328:	021a021a 021a021a 021a021a 021a021a     ................
 801c338:	021a021a 021a021a 021a021a 021a021a     ................
 801c348:	021a021a 021a021a 021a021a 021a021a     ................
 801c358:	021a021a 021a021a 021a021a 021a021a     ................
 801c368:	021a021a 021a021a 021a021a 021a021a     ................
 801c378:	021a021a 021a021a 021a021a 021a021a     ................
 801c388:	021a021a 021a021a 021a021a 021a021a     ................
 801c398:	021a021a 021a021a 021a021a 021a021a     ................
 801c3a8:	021a021a 021a021a 021a021a 0219021a     ................
 801c3b8:	02190219 02190219 02190219 02190219     ................
 801c3c8:	02190219 02190219 02190219 02190219     ................
 801c3d8:	02190219 02190219 02190219 02190219     ................
 801c3e8:	02190219 02190219 02190219 02190219     ................
 801c3f8:	02190219 02190219 02190219 02190219     ................
 801c408:	02190219 02190219 02190219 02190219     ................
 801c418:	02190219 02190219 02190219 02190219     ................
 801c428:	02190219 02190219 02190219 02190219     ................
 801c438:	02190219 02190219 02190219 02190219     ................
 801c448:	02190219 02190219 02190219 02190219     ................
 801c458:	02190219 02190219 02190219 02180218     ................
 801c468:	02180218 02180218 02180218 02180218     ................
 801c478:	02180218 02180218 02180218 02180218     ................
 801c488:	02180218 02180218 02180218 02180218     ................
 801c498:	02180218 02180218 02180218 02180218     ................
 801c4a8:	02180218 02180218 02180218 02180218     ................
 801c4b8:	02180218 02180218 02180218 02180218     ................
 801c4c8:	02180218 02180218 02180218 02180218     ................
 801c4d8:	02180218 02180218 02180218 02180218     ................
 801c4e8:	02180218 02180218 02180218 02180218     ................
 801c4f8:	02180218 02180218 02180218 02180218     ................
 801c508:	02180218 02180218 02170218 02170217     ................
 801c518:	02170217 02170217 02170217 02170217     ................
 801c528:	02170217 02170217 02170217 02170217     ................
 801c538:	02170217 02170217 02170217 02170217     ................
 801c548:	02170217 02170217 02170217 02170217     ................
 801c558:	02170217 02170217 02170217 02170217     ................
 801c568:	02170217 02170217 02170217 02170217     ................
 801c578:	02170217 02170217 02170217 02170217     ................
 801c588:	02170217 02170217 02170217 02170217     ................
 801c598:	02170217 02170217 02170217 02170217     ................
 801c5a8:	02170217 02170217 02170217 02170217     ................
 801c5b8:	02170217 02160217 02160216 02160216     ................
 801c5c8:	02160216 02160216 02160216 02160216     ................
 801c5d8:	02160216 02160216 02160216 02160216     ................
 801c5e8:	02160216 02160216 02160216 02160216     ................
 801c5f8:	02160216 02160216 02160216 02160216     ................
 801c608:	02160216 02160216 02160216 02160216     ................
 801c618:	02160216 02160216 02160216 02160216     ................
 801c628:	02160216 02160216 02160216 02160216     ................
 801c638:	02160216 02160216 02160216 02160216     ................
 801c648:	02160216 02160216 02160216 02160216     ................
 801c658:	02160216 02160216 02160216 02160216     ................
 801c668:	02150215 02150215 02150215 02150215     ................
 801c678:	02150215 02150215 02150215 02150215     ................
 801c688:	02150215 02150215 02150215 02150215     ................
 801c698:	02150215 02150215 02150215 02150215     ................
 801c6a8:	02150215 02150215 02150215 02150215     ................
 801c6b8:	02150215 02150215 02150215 02150215     ................
 801c6c8:	02150215 02150215 02150215 02150215     ................
 801c6d8:	02150215 02150215 02150215 02150215     ................
 801c6e8:	02150215 02150215 02150215 02150215     ................
 801c6f8:	02150215 02150215 02150215 02150215     ................
 801c708:	02150215 02150215 02140215 02140214     ................
 801c718:	02140214 02140214 02140214 02140214     ................
 801c728:	02140214 02140214 02140214 02140214     ................
 801c738:	02140214 02140214 02140214 02140214     ................
 801c748:	02140214 02140214 02140214 02140214     ................
 801c758:	02140214 02140214 02140214 02140214     ................
 801c768:	02140214 02140214 02140214 02140214     ................
 801c778:	02140214 02140214 02140214 02140214     ................
 801c788:	02140214 02140214 02140214 02140214     ................
 801c798:	02140214 02140214 02140214 02140214     ................
 801c7a8:	02140214 02140214 02140214 02140214     ................
 801c7b8:	02130214 02130213 02130213 02130213     ................
 801c7c8:	02130213 02130213 02130213 02130213     ................
 801c7d8:	02130213 02130213 02130213 02130213     ................
 801c7e8:	02130213 02130213 02130213 02130213     ................
 801c7f8:	02130213 02130213 02130213 02130213     ................
 801c808:	02130213 02130213 02130213 02130213     ................
 801c818:	02130213 02130213 02130213 02130213     ................
 801c828:	02130213 02130213 02130213 02130213     ................
 801c838:	02130213 02130213 02130213 02130213     ................
 801c848:	02130213 02130213 02130213 02130213     ................
 801c858:	02130213 02130213 02120213 02120212     ................
 801c868:	02120212 02120212 02120212 02120212     ................
 801c878:	02120212 02120212 02120212 02120212     ................
 801c888:	02120212 02120212 02120212 02120212     ................
 801c898:	02120212 02120212 02120212 02120212     ................
 801c8a8:	02120212 02120212 02120212 02120212     ................
 801c8b8:	02120212 02120212 02120212 02120212     ................
 801c8c8:	02120212 02120212 02120212 02120212     ................
 801c8d8:	02120212 02120212 02120212 02120212     ................
 801c8e8:	02120212 02120212 02120212 02120212     ................
 801c8f8:	02120212 02120212 02120212 02120212     ................
 801c908:	02110211 02110211 02110211 02110211     ................
 801c918:	02110211 02110211 02110211 02110211     ................
 801c928:	02110211 02110211 02110211 02110211     ................
 801c938:	02110211 02110211 02110211 02110211     ................
 801c948:	02110211 02110211 02110211 02110211     ................
 801c958:	02110211 02110211 02110211 02110211     ................
 801c968:	02110211 02110211 02110211 02110211     ................
 801c978:	02110211 02110211 02110211 02110211     ................
 801c988:	02110211 02110211 02110211 02110211     ................
 801c998:	02110211 02110211 02110211 02110211     ................
 801c9a8:	02110211 02100211 02100210 02100210     ................
 801c9b8:	02100210 02100210 02100210 02100210     ................
 801c9c8:	02100210 02100210 02100210 02100210     ................
 801c9d8:	02100210 02100210 02100210 02100210     ................
 801c9e8:	02100210 02100210 02100210 02100210     ................
 801c9f8:	02100210 02100210 02100210 02100210     ................
 801ca08:	02100210 02100210 02100210 02100210     ................
 801ca18:	02100210 02100210 02100210 02100210     ................
 801ca28:	02100210 02100210 02100210 02100210     ................
 801ca38:	02100210 02100210 02100210 02100210     ................
 801ca48:	02100210 02100210 020f0210 020f020f     ................
 801ca58:	020f020f 020f020f 020f020f 020f020f     ................
 801ca68:	020f020f 020f020f 020f020f 020f020f     ................
 801ca78:	020f020f 020f020f 020f020f 020f020f     ................
 801ca88:	020f020f 020f020f 020f020f 020f020f     ................
 801ca98:	020f020f 020f020f 020f020f 020f020f     ................
 801caa8:	020f020f 020f020f 020f020f 020f020f     ................
 801cab8:	020f020f 020f020f 020f020f 020f020f     ................
 801cac8:	020f020f 020f020f 020f020f 020f020f     ................
 801cad8:	020f020f 020f020f 020f020f 020f020f     ................
 801cae8:	020f020f 020f020f 020f020f 020e020f     ................
 801caf8:	020e020e 020e020e 020e020e 020e020e     ................
 801cb08:	020e020e 020e020e 020e020e 020e020e     ................
 801cb18:	020e020e 020e020e 020e020e 020e020e     ................
 801cb28:	020e020e 020e020e 020e020e 020e020e     ................
 801cb38:	020e020e 020e020e 020e020e 020e020e     ................
 801cb48:	020e020e 020e020e 020e020e 020e020e     ................
 801cb58:	020e020e 020e020e 020e020e 020e020e     ................
 801cb68:	020e020e 020e020e 020e020e 020e020e     ................
 801cb78:	020e020e 020e020e 020e020e 020e020e     ................
 801cb88:	020e020e 020e020e 020e020e 020e020e     ................
 801cb98:	020d020d 020d020d 020d020d 020d020d     ................
 801cba8:	020d020d 020d020d 020d020d 020d020d     ................
 801cbb8:	020d020d 020d020d 020d020d 020d020d     ................
 801cbc8:	020d020d 020d020d 020d020d 020d020d     ................
 801cbd8:	020d020d 020d020d 020d020d 020d020d     ................
 801cbe8:	020d020d 020d020d 020d020d 020d020d     ................
 801cbf8:	020d020d 020d020d 020d020d 020d020d     ................
 801cc08:	020d020d 020d020d 020d020d 020d020d     ................
 801cc18:	020d020d 020d020d 020d020d 020d020d     ................
 801cc28:	020d020d 020d020d 020d020d 020d020d     ................
 801cc38:	020c020d 020c020c 020c020c 020c020c     ................
 801cc48:	020c020c 020c020c 020c020c 020c020c     ................
 801cc58:	020c020c 020c020c 020c020c 020c020c     ................
 801cc68:	020c020c 020c020c 020c020c 020c020c     ................
 801cc78:	020c020c 020c020c 020c020c 020c020c     ................
 801cc88:	020c020c 020c020c 020c020c 020c020c     ................
 801cc98:	020c020c 020c020c 020c020c 020c020c     ................
 801cca8:	020c020c 020c020c 020c020c 020c020c     ................
 801ccb8:	020c020c 020c020c 020c020c 020c020c     ................
 801ccc8:	020c020c 020c020c 020c020c 020c020c     ................
 801ccd8:	020b020c 020b020b 020b020b 020b020b     ................
 801cce8:	020b020b 020b020b 020b020b 020b020b     ................
 801ccf8:	020b020b 020b020b 020b020b 020b020b     ................
 801cd08:	020b020b 020b020b 020b020b 020b020b     ................
 801cd18:	020b020b 020b020b 020b020b 020b020b     ................
 801cd28:	020b020b 020b020b 020b020b 020b020b     ................
 801cd38:	020b020b 020b020b 020b020b 020b020b     ................
 801cd48:	020b020b 020b020b 020b020b 020b020b     ................
 801cd58:	020b020b 020b020b 020b020b 020b020b     ................
 801cd68:	020b020b 020b020b 020b020b 020b020b     ................
 801cd78:	020a020b 020a020a 020a020a 020a020a     ................
 801cd88:	020a020a 020a020a 020a020a 020a020a     ................
 801cd98:	020a020a 020a020a 020a020a 020a020a     ................
 801cda8:	020a020a 020a020a 020a020a 020a020a     ................
 801cdb8:	020a020a 020a020a 020a020a 020a020a     ................
 801cdc8:	020a020a 020a020a 020a020a 020a020a     ................
 801cdd8:	020a020a 020a020a 020a020a 020a020a     ................
 801cde8:	020a020a 020a020a 020a020a 020a020a     ................
 801cdf8:	020a020a 020a020a 020a020a 020a020a     ................
 801ce08:	020a020a 020a020a 020a020a 020a020a     ................
 801ce18:	0209020a 02090209 02090209 02090209     ................
 801ce28:	02090209 02090209 02090209 02090209     ................
 801ce38:	02090209 02090209 02090209 02090209     ................
 801ce48:	02090209 02090209 02090209 02090209     ................
 801ce58:	02090209 02090209 02090209 02090209     ................
 801ce68:	02090209 02090209 02090209 02090209     ................
 801ce78:	02090209 02090209 02090209 02090209     ................
 801ce88:	02090209 02090209 02090209 02090209     ................
 801ce98:	02090209 02090209 02090209 02090209     ................
 801cea8:	02090209 02090209 02090209 02080209     ................
 801ceb8:	02080208 02080208 02080208 02080208     ................
 801cec8:	02080208 02080208 02080208 02080208     ................
 801ced8:	02080208 02080208 02080208 02080208     ................
 801cee8:	02080208 02080208 02080208 02080208     ................
 801cef8:	02080208 02080208 02080208 02080208     ................
 801cf08:	02080208 02080208 02080208 02080208     ................
 801cf18:	02080208 02080208 02080208 02080208     ................
 801cf28:	02080208 02080208 02080208 02080208     ................
 801cf38:	02080208 02080208 02080208 02080208     ................
 801cf48:	02080208 02080208 02080208 02070207     ................
 801cf58:	02070207 02070207 02070207 02070207     ................
 801cf68:	02070207 02070207 02070207 02070207     ................
 801cf78:	02070207 02070207 02070207 02070207     ................
 801cf88:	02070207 02070207 02070207 02070207     ................
 801cf98:	02070207 02070207 02070207 02070207     ................
 801cfa8:	02070207 02070207 02070207 02070207     ................
 801cfb8:	02070207 02070207 02070207 02070207     ................
 801cfc8:	02070207 02070207 02070207 02070207     ................
 801cfd8:	02070207 02070207 02070207 02070207     ................
 801cfe8:	02070207 02070207 02060206 02060206     ................
 801cff8:	02060206 02060206 02060206 02060206     ................
 801d008:	02060206 02060206 02060206 02060206     ................
 801d018:	02060206 02060206 02060206 02060206     ................
 801d028:	02060206 02060206 02060206 02060206     ................
 801d038:	02060206 02060206 02060206 02060206     ................
 801d048:	02060206 02060206 02060206 02060206     ................
 801d058:	02060206 02060206 02060206 02060206     ................
 801d068:	02060206 02060206 02060206 02060206     ................
 801d078:	02060206 02060206 02060206 02060206     ................
 801d088:	02060206 02050205 02050205 02050205     ................
 801d098:	02050205 02050205 02050205 02050205     ................
 801d0a8:	02050205 02050205 02050205 02050205     ................
 801d0b8:	02050205 02050205 02050205 02050205     ................
 801d0c8:	02050205 02050205 02050205 02050205     ................
 801d0d8:	02050205 02050205 02050205 02050205     ................
 801d0e8:	02050205 02050205 02050205 02050205     ................
 801d0f8:	02050205 02050205 02050205 02050205     ................
 801d108:	02050205 02050205 02050205 02050205     ................
 801d118:	02050205 02050205 02050205 02040205     ................
 801d128:	02040204 02040204 02040204 02040204     ................
 801d138:	02040204 02040204 02040204 02040204     ................
 801d148:	02040204 02040204 02040204 02040204     ................
 801d158:	02040204 02040204 02040204 02040204     ................
 801d168:	02040204 02040204 02040204 02040204     ................
 801d178:	02040204 02040204 02040204 02040204     ................
 801d188:	02040204 02040204 02040204 02040204     ................
 801d198:	02040204 02040204 02040204 02040204     ................
 801d1a8:	02040204 02040204 02040204 02040204     ................
 801d1b8:	02040204 02040204 02030203 02030203     ................
 801d1c8:	02030203 02030203 02030203 02030203     ................
 801d1d8:	02030203 02030203 02030203 02030203     ................
 801d1e8:	02030203 02030203 02030203 02030203     ................
 801d1f8:	02030203 02030203 02030203 02030203     ................
 801d208:	02030203 02030203 02030203 02030203     ................
 801d218:	02030203 02030203 02030203 02030203     ................
 801d228:	02030203 02030203 02030203 02030203     ................
 801d238:	02030203 02030203 02030203 02030203     ................
 801d248:	02030203 02030203 02030203 02030203     ................
 801d258:	02020203 02020202 02020202 02020202     ................
 801d268:	02020202 02020202 02020202 02020202     ................
 801d278:	02020202 02020202 02020202 02020202     ................
 801d288:	02020202 02020202 02020202 02020202     ................
 801d298:	02020202 02020202 02020202 02020202     ................
 801d2a8:	02020202 02020202 02020202 02020202     ................
 801d2b8:	02020202 02020202 02020202 02020202     ................
 801d2c8:	02020202 02020202 02020202 02020202     ................
 801d2d8:	02020202 02020202 02020202 02020202     ................
 801d2e8:	02020202 02020202 02010202 02010201     ................
 801d2f8:	02010201 02010201 02010201 02010201     ................
 801d308:	02010201 02010201 02010201 02010201     ................
 801d318:	02010201 02010201 02010201 02010201     ................
 801d328:	02010201 02010201 02010201 02010201     ................
 801d338:	02010201 02010201 02010201 02010201     ................
 801d348:	02010201 02010201 02010201 02010201     ................
 801d358:	02010201 02010201 02010201 02010201     ................
 801d368:	02010201 02010201 02010201 02010201     ................
 801d378:	02010201 02010201 02010201 02010201     ................
 801d388:	02000200 02000200 02000200 02000200     ................
 801d398:	02000200 02000200 02000200 02000200     ................
 801d3a8:	02000200 02000200 02000200 02000200     ................
 801d3b8:	02000200 02000200 02000200 02000200     ................
 801d3c8:	02000200 02000200 02000200 02000200     ................
 801d3d8:	02000200 02000200 02000200 02000200     ................
 801d3e8:	02000200 02000200 02000200 02000200     ................
 801d3f8:	02000200 02000200 02000200 02000200     ................
 801d408:	02000200 02000200 02000200 02000200     ................
 801d418:	02000200 02000200 01ff01ff 01ff01ff     ................
 801d428:	01ff01ff 01ff01ff 01ff01ff 01ff01ff     ................
 801d438:	01ff01ff 01ff01ff 01ff01ff 01ff01ff     ................
 801d448:	01ff01ff 01ff01ff 01ff01ff 01ff01ff     ................
 801d458:	01ff01ff 01ff01ff 01ff01ff 01ff01ff     ................
 801d468:	01ff01ff 01ff01ff 01ff01ff 01ff01ff     ................
 801d478:	01ff01ff 01ff01ff 01ff01ff 01ff01ff     ................
 801d488:	01ff01ff 01ff01ff 01ff01ff 01ff01ff     ................
 801d498:	01ff01ff 01ff01ff 01ff01ff 01ff01ff     ................
 801d4a8:	01ff01ff 01ff01ff 01ff01ff 01fe01ff     ................
 801d4b8:	01fe01fe 01fe01fe 01fe01fe 01fe01fe     ................
 801d4c8:	01fe01fe 01fe01fe 01fe01fe 01fe01fe     ................
 801d4d8:	01fe01fe 01fe01fe 01fe01fe 01fe01fe     ................
 801d4e8:	01fe01fe 01fe01fe 01fe01fe 01fe01fe     ................
 801d4f8:	01fe01fe 01fe01fe 01fe01fe 01fe01fe     ................
 801d508:	01fe01fe 01fe01fe 01fe01fe 01fe01fe     ................
 801d518:	01fe01fe 01fe01fe 01fe01fe 01fe01fe     ................
 801d528:	01fe01fe 01fe01fe 01fe01fe 01fe01fe     ................
 801d538:	01fe01fe 01fe01fe 01fe01fe 01fe01fe     ................
 801d548:	01fe01fe 01fd01fd 01fd01fd 01fd01fd     ................
 801d558:	01fd01fd 01fd01fd 01fd01fd 01fd01fd     ................
 801d568:	01fd01fd 01fd01fd 01fd01fd 01fd01fd     ................
 801d578:	01fd01fd 01fd01fd 01fd01fd 01fd01fd     ................
 801d588:	01fd01fd 01fd01fd 01fd01fd 01fd01fd     ................
 801d598:	01fd01fd 01fd01fd 01fd01fd 01fd01fd     ................
 801d5a8:	01fd01fd 01fd01fd 01fd01fd 01fd01fd     ................
 801d5b8:	01fd01fd 01fd01fd 01fd01fd 01fd01fd     ................
 801d5c8:	01fd01fd 01fd01fd 01fd01fd 01fd01fd     ................
 801d5d8:	01fd01fd 01fd01fd 01fc01fc 01fc01fc     ................
 801d5e8:	01fc01fc 01fc01fc 01fc01fc 01fc01fc     ................
 801d5f8:	01fc01fc 01fc01fc 01fc01fc 01fc01fc     ................
 801d608:	01fc01fc 01fc01fc 01fc01fc 01fc01fc     ................
 801d618:	01fc01fc 01fc01fc 01fc01fc 01fc01fc     ................
 801d628:	01fc01fc 01fc01fc 01fc01fc 01fc01fc     ................
 801d638:	01fc01fc 01fc01fc 01fc01fc 01fc01fc     ................
 801d648:	01fc01fc 01fc01fc 01fc01fc 01fc01fc     ................
 801d658:	01fc01fc 01fc01fc 01fc01fc 01fc01fc     ................
 801d668:	01fc01fc 01fc01fc 01fc01fc 01fb01fb     ................
 801d678:	01fb01fb 01fb01fb 01fb01fb 01fb01fb     ................
 801d688:	01fb01fb 01fb01fb 01fb01fb 01fb01fb     ................
 801d698:	01fb01fb 01fb01fb 01fb01fb 01fb01fb     ................
 801d6a8:	01fb01fb 01fb01fb 01fb01fb 01fb01fb     ................
 801d6b8:	01fb01fb 01fb01fb 01fb01fb 01fb01fb     ................
 801d6c8:	01fb01fb 01fb01fb 01fb01fb 01fb01fb     ................
 801d6d8:	01fb01fb 01fb01fb 01fb01fb 01fb01fb     ................
 801d6e8:	01fb01fb 01fb01fb 01fb01fb 01fb01fb     ................
 801d6f8:	01fb01fb 01fb01fb 01fb01fb 01fb01fb     ................
 801d708:	01fa01fa 01fa01fa 01fa01fa 01fa01fa     ................
 801d718:	01fa01fa 01fa01fa 01fa01fa 01fa01fa     ................
 801d728:	01fa01fa 01fa01fa 01fa01fa 01fa01fa     ................
 801d738:	01fa01fa 01fa01fa 01fa01fa 01fa01fa     ................
 801d748:	01fa01fa 01fa01fa 01fa01fa 01fa01fa     ................
 801d758:	01fa01fa 01fa01fa 01fa01fa 01fa01fa     ................
 801d768:	01fa01fa 01fa01fa 01fa01fa 01fa01fa     ................
 801d778:	01fa01fa 01fa01fa 01fa01fa 01fa01fa     ................
 801d788:	01fa01fa 01fa01fa 01fa01fa 01fa01fa     ................
 801d798:	01f901fa 01f901f9 01f901f9 01f901f9     ................
 801d7a8:	01f901f9 01f901f9 01f901f9 01f901f9     ................
 801d7b8:	01f901f9 01f901f9 01f901f9 01f901f9     ................
 801d7c8:	01f901f9 01f901f9 01f901f9 01f901f9     ................
 801d7d8:	01f901f9 01f901f9 01f901f9 01f901f9     ................
 801d7e8:	01f901f9 01f901f9 01f901f9 01f901f9     ................
 801d7f8:	01f901f9 01f901f9 01f901f9 01f901f9     ................
 801d808:	01f901f9 01f901f9 01f901f9 01f901f9     ................
 801d818:	01f901f9 01f901f9 01f901f9 01f901f9     ................
 801d828:	01f901f9 01f801f8 01f801f8 01f801f8     ................
 801d838:	01f801f8 01f801f8 01f801f8 01f801f8     ................
 801d848:	01f801f8 01f801f8 01f801f8 01f801f8     ................
 801d858:	01f801f8 01f801f8 01f801f8 01f801f8     ................
 801d868:	01f801f8 01f801f8 01f801f8 01f801f8     ................
 801d878:	01f801f8 01f801f8 01f801f8 01f801f8     ................
 801d888:	01f801f8 01f801f8 01f801f8 01f801f8     ................
 801d898:	01f801f8 01f801f8 01f801f8 01f801f8     ................
 801d8a8:	01f801f8 01f801f8 01f801f8 01f801f8     ................
 801d8b8:	01f801f8 01f701f8 01f701f7 01f701f7     ................
 801d8c8:	01f701f7 01f701f7 01f701f7 01f701f7     ................
 801d8d8:	01f701f7 01f701f7 01f701f7 01f701f7     ................
 801d8e8:	01f701f7 01f701f7 01f701f7 01f701f7     ................
 801d8f8:	01f701f7 01f701f7 01f701f7 01f701f7     ................
 801d908:	01f701f7 01f701f7 01f701f7 01f701f7     ................
 801d918:	01f701f7 01f701f7 01f701f7 01f701f7     ................
 801d928:	01f701f7 01f701f7 01f701f7 01f701f7     ................
 801d938:	01f701f7 01f701f7 01f701f7 01f701f7     ................
 801d948:	01f701f7 01f601f7 01f601f6 01f601f6     ................
 801d958:	01f601f6 01f601f6 01f601f6 01f601f6     ................
 801d968:	01f601f6 01f601f6 01f601f6 01f601f6     ................
 801d978:	01f601f6 01f601f6 01f601f6 01f601f6     ................
 801d988:	01f601f6 01f601f6 01f601f6 01f601f6     ................
 801d998:	01f601f6 01f601f6 01f601f6 01f601f6     ................
 801d9a8:	01f601f6 01f601f6 01f601f6 01f601f6     ................
 801d9b8:	01f601f6 01f601f6 01f601f6 01f601f6     ................
 801d9c8:	01f601f6 01f601f6 01f601f6 01f601f6     ................
 801d9d8:	01f601f6 01f501f6 01f501f5 01f501f5     ................
 801d9e8:	01f501f5 01f501f5 01f501f5 01f501f5     ................
 801d9f8:	01f501f5 01f501f5 01f501f5 01f501f5     ................
 801da08:	01f501f5 01f501f5 01f501f5 01f501f5     ................
 801da18:	01f501f5 01f501f5 01f501f5 01f501f5     ................
 801da28:	01f501f5 01f501f5 01f501f5 01f501f5     ................
 801da38:	01f501f5 01f501f5 01f501f5 01f501f5     ................
 801da48:	01f501f5 01f501f5 01f501f5 01f501f5     ................
 801da58:	01f501f5 01f501f5 01f501f5 01f501f5     ................
 801da68:	01f501f5 01f401f5 01f401f4 01f401f4     ................
 801da78:	01f401f4 01f401f4 01f401f4 01f401f4     ................
 801da88:	01f401f4 01f401f4 01f401f4 01f401f4     ................
 801da98:	01f401f4 01f401f4 01f401f4 01f401f4     ................
 801daa8:	01f401f4 01f401f4 01f401f4 01f401f4     ................
 801dab8:	01f401f4 01f401f4 01f401f4 01f401f4     ................
 801dac8:	01f401f4 01f401f4 01f401f4 01f401f4     ................
 801dad8:	01f401f4 01f401f4 01f401f4 01f401f4     ................
 801dae8:	01f401f4 01f401f4 01f401f4 01f401f4     ................
 801daf8:	01f401f4 01f301f4 01f301f3 01f301f3     ................
 801db08:	01f301f3 01f301f3 01f301f3 01f301f3     ................
 801db18:	01f301f3 01f301f3 01f301f3 01f301f3     ................
 801db28:	01f301f3 01f301f3 01f301f3 01f301f3     ................
 801db38:	01f301f3 01f301f3 01f301f3 01f301f3     ................
 801db48:	01f301f3 01f301f3 01f301f3 01f301f3     ................
 801db58:	01f301f3 01f301f3 01f301f3 01f301f3     ................
 801db68:	01f301f3 01f301f3 01f301f3 01f301f3     ................
 801db78:	01f301f3 01f301f3 01f301f3 01f301f3     ................
 801db88:	01f301f3 01f201f2 01f201f2 01f201f2     ................
 801db98:	01f201f2 01f201f2 01f201f2 01f201f2     ................
 801dba8:	01f201f2 01f201f2 01f201f2 01f201f2     ................
 801dbb8:	01f201f2 01f201f2 01f201f2 01f201f2     ................
 801dbc8:	01f201f2 01f201f2 01f201f2 01f201f2     ................
 801dbd8:	01f201f2 01f201f2 01f201f2 01f201f2     ................
 801dbe8:	01f201f2 01f201f2 01f201f2 01f201f2     ................
 801dbf8:	01f201f2 01f201f2 01f201f2 01f201f2     ................
 801dc08:	01f201f2 01f201f2 01f201f2 01f201f2     ................
 801dc18:	01f101f2 01f101f1 01f101f1 01f101f1     ................
 801dc28:	01f101f1 01f101f1 01f101f1 01f101f1     ................
 801dc38:	01f101f1 01f101f1 01f101f1 01f101f1     ................
 801dc48:	01f101f1 01f101f1 01f101f1 01f101f1     ................
 801dc58:	01f101f1 01f101f1 01f101f1 01f101f1     ................
 801dc68:	01f101f1 01f101f1 01f101f1 01f101f1     ................
 801dc78:	01f101f1 01f101f1 01f101f1 01f101f1     ................
 801dc88:	01f101f1 01f101f1 01f101f1 01f101f1     ................
 801dc98:	01f101f1 01f101f1 01f101f1 01f101f1     ................
 801dca8:	01f001f0 01f001f0 01f001f0 01f001f0     ................
 801dcb8:	01f001f0 01f001f0 01f001f0 01f001f0     ................
 801dcc8:	01f001f0 01f001f0 01f001f0 01f001f0     ................
 801dcd8:	01f001f0 01f001f0 01f001f0 01f001f0     ................
 801dce8:	01f001f0 01f001f0 01f001f0 01f001f0     ................
 801dcf8:	01f001f0 01f001f0 01f001f0 01f001f0     ................
 801dd08:	01f001f0 01f001f0 01f001f0 01f001f0     ................
 801dd18:	01f001f0 01f001f0 01f001f0 01f001f0     ................
 801dd28:	01f001f0 01f001f0 01f001f0 01ef01ef     ................
 801dd38:	01ef01ef 01ef01ef 01ef01ef 01ef01ef     ................
 801dd48:	01ef01ef 01ef01ef 01ef01ef 01ef01ef     ................
 801dd58:	01ef01ef 01ef01ef 01ef01ef 01ef01ef     ................
 801dd68:	01ef01ef 01ef01ef 01ef01ef 01ef01ef     ................
 801dd78:	01ef01ef 01ef01ef 01ef01ef 01ef01ef     ................
 801dd88:	01ef01ef 01ef01ef 01ef01ef 01ef01ef     ................
 801dd98:	01ef01ef 01ef01ef 01ef01ef 01ef01ef     ................
 801dda8:	01ef01ef 01ef01ef 01ef01ef 01ef01ef     ................
 801ddb8:	01ef01ef 01ef01ef 01ee01ee 01ee01ee     ................
 801ddc8:	01ee01ee 01ee01ee 01ee01ee 01ee01ee     ................
 801ddd8:	01ee01ee 01ee01ee 01ee01ee 01ee01ee     ................
 801dde8:	01ee01ee 01ee01ee 01ee01ee 01ee01ee     ................
 801ddf8:	01ee01ee 01ee01ee 01ee01ee 01ee01ee     ................
 801de08:	01ee01ee 01ee01ee 01ee01ee 01ee01ee     ................
 801de18:	01ee01ee 01ee01ee 01ee01ee 01ee01ee     ................
 801de28:	01ee01ee 01ee01ee 01ee01ee 01ee01ee     ................
 801de38:	01ee01ee 01ee01ee 01ee01ee 01ee01ee     ................
 801de48:	01ee01ee 01ed01ed 01ed01ed 01ed01ed     ................
 801de58:	01ed01ed 01ed01ed 01ed01ed 01ed01ed     ................
 801de68:	01ed01ed 01ed01ed 01ed01ed 01ed01ed     ................
 801de78:	01ed01ed 01ed01ed 01ed01ed 01ed01ed     ................
 801de88:	01ed01ed 01ed01ed 01ed01ed 01ed01ed     ................
 801de98:	01ed01ed 01ed01ed 01ed01ed 01ed01ed     ................
 801dea8:	01ed01ed 01ed01ed 01ed01ed 01ed01ed     ................
 801deb8:	01ed01ed 01ed01ed 01ed01ed 01ed01ed     ................
 801dec8:	01ed01ed 01ed01ed 01ed01ed 01ed01ed     ................
 801ded8:	01ec01ec 01ec01ec 01ec01ec 01ec01ec     ................
 801dee8:	01ec01ec 01ec01ec 01ec01ec 01ec01ec     ................
 801def8:	01ec01ec 01ec01ec 01ec01ec 01ec01ec     ................
 801df08:	01ec01ec 01ec01ec 01ec01ec 01ec01ec     ................
 801df18:	01ec01ec 01ec01ec 01ec01ec 01ec01ec     ................
 801df28:	01ec01ec 01ec01ec 01ec01ec 01ec01ec     ................
 801df38:	01ec01ec 01ec01ec 01ec01ec 01ec01ec     ................
 801df48:	01ec01ec 01ec01ec 01ec01ec 01ec01ec     ................
 801df58:	01ec01ec 01ec01ec 01eb01ec 01eb01eb     ................
 801df68:	01eb01eb 01eb01eb 01eb01eb 01eb01eb     ................
 801df78:	01eb01eb 01eb01eb 01eb01eb 01eb01eb     ................
 801df88:	01eb01eb 01eb01eb 01eb01eb 01eb01eb     ................
 801df98:	01eb01eb 01eb01eb 01eb01eb 01eb01eb     ................
 801dfa8:	01eb01eb 01eb01eb 01eb01eb 01eb01eb     ................
 801dfb8:	01eb01eb 01eb01eb 01eb01eb 01eb01eb     ................
 801dfc8:	01eb01eb 01eb01eb 01eb01eb 01eb01eb     ................
 801dfd8:	01eb01eb 01eb01eb 01eb01eb 01eb01eb     ................
 801dfe8:	01eb01eb 01ea01ea 01ea01ea 01ea01ea     ................
 801dff8:	01ea01ea 01ea01ea 01ea01ea 01ea01ea     ................
 801e008:	01ea01ea 01ea01ea 01ea01ea 01ea01ea     ................
 801e018:	01ea01ea 01ea01ea 01ea01ea 01ea01ea     ................
 801e028:	01ea01ea 01ea01ea 01ea01ea 01ea01ea     ................
 801e038:	01ea01ea 01ea01ea 01ea01ea 01ea01ea     ................
 801e048:	01ea01ea 01ea01ea 01ea01ea 01ea01ea     ................
 801e058:	01ea01ea 01ea01ea 01ea01ea 01ea01ea     ................
 801e068:	01ea01ea 01ea01ea 01ea01ea 01e901ea     ................
 801e078:	01e901e9 01e901e9 01e901e9 01e901e9     ................
 801e088:	01e901e9 01e901e9 01e901e9 01e901e9     ................
 801e098:	01e901e9 01e901e9 01e901e9 01e901e9     ................
 801e0a8:	01e901e9 01e901e9 01e901e9 01e901e9     ................
 801e0b8:	01e901e9 01e901e9 01e901e9 01e901e9     ................
 801e0c8:	01e901e9 01e901e9 01e901e9 01e901e9     ................
 801e0d8:	01e901e9 01e901e9 01e901e9 01e901e9     ................
 801e0e8:	01e901e9 01e901e9 01e901e9 01e901e9     ................
 801e0f8:	01e901e9 01e901e9 01e801e8 01e801e8     ................
 801e108:	01e801e8 01e801e8 01e801e8 01e801e8     ................
 801e118:	01e801e8 01e801e8 01e801e8 01e801e8     ................
 801e128:	01e801e8 01e801e8 01e801e8 01e801e8     ................
 801e138:	01e801e8 01e801e8 01e801e8 01e801e8     ................
 801e148:	01e801e8 01e801e8 01e801e8 01e801e8     ................
 801e158:	01e801e8 01e801e8 01e801e8 01e801e8     ................
 801e168:	01e801e8 01e801e8 01e801e8 01e801e8     ................
 801e178:	01e801e8 01e801e8 01e801e8 01e801e8     ................
 801e188:	01e701e7 01e701e7 01e701e7 01e701e7     ................
 801e198:	01e701e7 01e701e7 01e701e7 01e701e7     ................
 801e1a8:	01e701e7 01e701e7 01e701e7 01e701e7     ................
 801e1b8:	01e701e7 01e701e7 01e701e7 01e701e7     ................
 801e1c8:	01e701e7 01e701e7 01e701e7 01e701e7     ................
 801e1d8:	01e701e7 01e701e7 01e701e7 01e701e7     ................
 801e1e8:	01e701e7 01e701e7 01e701e7 01e701e7     ................
 801e1f8:	01e701e7 01e701e7 01e701e7 01e701e7     ................
 801e208:	01e701e7 01e701e7 01e601e6 01e601e6     ................
 801e218:	01e601e6 01e601e6 01e601e6 01e601e6     ................
 801e228:	01e601e6 01e601e6 01e601e6 01e601e6     ................
 801e238:	01e601e6 01e601e6 01e601e6 01e601e6     ................
 801e248:	01e601e6 01e601e6 01e601e6 01e601e6     ................
 801e258:	01e601e6 01e601e6 01e601e6 01e601e6     ................
 801e268:	01e601e6 01e601e6 01e601e6 01e601e6     ................
 801e278:	01e601e6 01e601e6 01e601e6 01e601e6     ................
 801e288:	01e601e6 01e601e6 01e601e6 01e601e6     ................
 801e298:	01e501e5 01e501e5 01e501e5 01e501e5     ................
 801e2a8:	01e501e5 01e501e5 01e501e5 01e501e5     ................
 801e2b8:	01e501e5 01e501e5 01e501e5 01e501e5     ................
 801e2c8:	01e501e5 01e501e5 01e501e5 01e501e5     ................
 801e2d8:	01e501e5 01e501e5 01e501e5 01e501e5     ................
 801e2e8:	01e501e5 01e501e5 01e501e5 01e501e5     ................
 801e2f8:	01e501e5 01e501e5 01e501e5 01e501e5     ................
 801e308:	01e501e5 01e501e5 01e501e5 01e501e5     ................
 801e318:	01e501e5 01e501e5 01e401e4 01e401e4     ................
 801e328:	01e401e4 01e401e4 01e401e4 01e401e4     ................
 801e338:	01e401e4 01e401e4 01e401e4 01e401e4     ................
 801e348:	01e401e4 01e401e4 01e401e4 01e401e4     ................
 801e358:	01e401e4 01e401e4 01e401e4 01e401e4     ................
 801e368:	01e401e4 01e401e4 01e401e4 01e401e4     ................
 801e378:	01e401e4 01e401e4 01e401e4 01e401e4     ................
 801e388:	01e401e4 01e401e4 01e401e4 01e401e4     ................
 801e398:	01e401e4 01e401e4 01e401e4 01e301e4     ................
 801e3a8:	01e301e3 01e301e3 01e301e3 01e301e3     ................
 801e3b8:	01e301e3 01e301e3 01e301e3 01e301e3     ................
 801e3c8:	01e301e3 01e301e3 01e301e3 01e301e3     ................
 801e3d8:	01e301e3 01e301e3 01e301e3 01e301e3     ................
 801e3e8:	01e301e3 01e301e3 01e301e3 01e301e3     ................
 801e3f8:	01e301e3 01e301e3 01e301e3 01e301e3     ................
 801e408:	01e301e3 01e301e3 01e301e3 01e301e3     ................
 801e418:	01e301e3 01e301e3 01e301e3 01e301e3     ................
 801e428:	01e301e3 01e201e3 01e201e2 01e201e2     ................
 801e438:	01e201e2 01e201e2 01e201e2 01e201e2     ................
 801e448:	01e201e2 01e201e2 01e201e2 01e201e2     ................
 801e458:	01e201e2 01e201e2 01e201e2 01e201e2     ................
 801e468:	01e201e2 01e201e2 01e201e2 01e201e2     ................
 801e478:	01e201e2 01e201e2 01e201e2 01e201e2     ................
 801e488:	01e201e2 01e201e2 01e201e2 01e201e2     ................
 801e498:	01e201e2 01e201e2 01e201e2 01e201e2     ................
 801e4a8:	01e201e2 01e201e2 01e201e2 01e101e1     ................
 801e4b8:	01e101e1 01e101e1 01e101e1 01e101e1     ................
 801e4c8:	01e101e1 01e101e1 01e101e1 01e101e1     ................
 801e4d8:	01e101e1 01e101e1 01e101e1 01e101e1     ................
 801e4e8:	01e101e1 01e101e1 01e101e1 01e101e1     ................
 801e4f8:	01e101e1 01e101e1 01e101e1 01e101e1     ................
 801e508:	01e101e1 01e101e1 01e101e1 01e101e1     ................
 801e518:	01e101e1 01e101e1 01e101e1 01e101e1     ................
 801e528:	01e101e1 01e101e1 01e101e1 01e101e1     ................
 801e538:	01e001e0 01e001e0 01e001e0 01e001e0     ................
 801e548:	01e001e0 01e001e0 01e001e0 01e001e0     ................
 801e558:	01e001e0 01e001e0 01e001e0 01e001e0     ................
 801e568:	01e001e0 01e001e0 01e001e0 01e001e0     ................
 801e578:	01e001e0 01e001e0 01e001e0 01e001e0     ................
 801e588:	01e001e0 01e001e0 01e001e0 01e001e0     ................
 801e598:	01e001e0 01e001e0 01e001e0 01e001e0     ................
 801e5a8:	01e001e0 01e001e0 01e001e0 01e001e0     ................
 801e5b8:	01e001e0 01df01e0 01df01df 01df01df     ................
 801e5c8:	01df01df 01df01df 01df01df 01df01df     ................
 801e5d8:	01df01df 01df01df 01df01df 01df01df     ................
 801e5e8:	01df01df 01df01df 01df01df 01df01df     ................
 801e5f8:	01df01df 01df01df 01df01df 01df01df     ................
 801e608:	01df01df 01df01df 01df01df 01df01df     ................
 801e618:	01df01df 01df01df 01df01df 01df01df     ................
 801e628:	01df01df 01df01df 01df01df 01df01df     ................
 801e638:	01df01df 01df01df 01de01df 01de01de     ................
 801e648:	01de01de 01de01de 01de01de 01de01de     ................
 801e658:	01de01de 01de01de 01de01de 01de01de     ................
 801e668:	01de01de 01de01de 01de01de 01de01de     ................
 801e678:	01de01de 01de01de 01de01de 01de01de     ................
 801e688:	01de01de 01de01de 01de01de 01de01de     ................
 801e698:	01de01de 01de01de 01de01de 01de01de     ................
 801e6a8:	01de01de 01de01de 01de01de 01de01de     ................
 801e6b8:	01de01de 01de01de 01de01de 01dd01de     ................
 801e6c8:	01dd01dd 01dd01dd 01dd01dd 01dd01dd     ................
 801e6d8:	01dd01dd 01dd01dd 01dd01dd 01dd01dd     ................
 801e6e8:	01dd01dd 01dd01dd 01dd01dd 01dd01dd     ................
 801e6f8:	01dd01dd 01dd01dd 01dd01dd 01dd01dd     ................
 801e708:	01dd01dd 01dd01dd 01dd01dd 01dd01dd     ................
 801e718:	01dd01dd 01dd01dd 01dd01dd 01dd01dd     ................
 801e728:	01dd01dd 01dd01dd 01dd01dd 01dd01dd     ................
 801e738:	01dd01dd 01dd01dd 01dd01dd 01dd01dd     ................
 801e748:	01dc01dd 01dc01dc 01dc01dc 01dc01dc     ................
 801e758:	01dc01dc 01dc01dc 01dc01dc 01dc01dc     ................
 801e768:	01dc01dc 01dc01dc 01dc01dc 01dc01dc     ................
 801e778:	01dc01dc 01dc01dc 01dc01dc 01dc01dc     ................
 801e788:	01dc01dc 01dc01dc 01dc01dc 01dc01dc     ................
 801e798:	01dc01dc 01dc01dc 01dc01dc 01dc01dc     ................
 801e7a8:	01dc01dc 01dc01dc 01dc01dc 01dc01dc     ................
 801e7b8:	01dc01dc 01dc01dc 01dc01dc 01dc01dc     ................
 801e7c8:	01dc01dc 01db01dc 01db01db 01db01db     ................
 801e7d8:	01db01db 01db01db 01db01db 01db01db     ................
 801e7e8:	01db01db 01db01db 01db01db 01db01db     ................
 801e7f8:	01db01db 01db01db 01db01db 01db01db     ................
 801e808:	01db01db 01db01db 01db01db 01db01db     ................
 801e818:	01db01db 01db01db 01db01db 01db01db     ................
 801e828:	01db01db 01db01db 01db01db 01db01db     ................
 801e838:	01db01db 01db01db 01db01db 01db01db     ................
 801e848:	01db01db 01db01db 01da01db 01da01da     ................
 801e858:	01da01da 01da01da 01da01da 01da01da     ................
 801e868:	01da01da 01da01da 01da01da 01da01da     ................
 801e878:	01da01da 01da01da 01da01da 01da01da     ................
 801e888:	01da01da 01da01da 01da01da 01da01da     ................
 801e898:	01da01da 01da01da 01da01da 01da01da     ................
 801e8a8:	01da01da 01da01da 01da01da 01da01da     ................
 801e8b8:	01da01da 01da01da 01da01da 01da01da     ................
 801e8c8:	01da01da 01da01da 01da01da 01d901d9     ................
 801e8d8:	01d901d9 01d901d9 01d901d9 01d901d9     ................
 801e8e8:	01d901d9 01d901d9 01d901d9 01d901d9     ................
 801e8f8:	01d901d9 01d901d9 01d901d9 01d901d9     ................
 801e908:	01d901d9 01d901d9 01d901d9 01d901d9     ................
 801e918:	01d901d9 01d901d9 01d901d9 01d901d9     ................
 801e928:	01d901d9 01d901d9 01d901d9 01d901d9     ................
 801e938:	01d901d9 01d901d9 01d901d9 01d901d9     ................
 801e948:	01d901d9 01d901d9 01d901d9 01d801d9     ................
 801e958:	01d801d8 01d801d8 01d801d8 01d801d8     ................
 801e968:	01d801d8 01d801d8 01d801d8 01d801d8     ................
 801e978:	01d801d8 01d801d8 01d801d8 01d801d8     ................
 801e988:	01d801d8 01d801d8 01d801d8 01d801d8     ................
 801e998:	01d801d8 01d801d8 01d801d8 01d801d8     ................
 801e9a8:	01d801d8 01d801d8 01d801d8 01d801d8     ................
 801e9b8:	01d801d8 01d801d8 01d801d8 01d801d8     ................
 801e9c8:	01d801d8 01d801d8 01d801d8 01d801d8     ................
 801e9d8:	01d701d7 01d701d7 01d701d7 01d701d7     ................
 801e9e8:	01d701d7 01d701d7 01d701d7 01d701d7     ................
 801e9f8:	01d701d7 01d701d7 01d701d7 01d701d7     ................
 801ea08:	01d701d7 01d701d7 01d701d7 01d701d7     ................
 801ea18:	01d701d7 01d701d7 01d701d7 01d701d7     ................
 801ea28:	01d701d7 01d701d7 01d701d7 01d701d7     ................
 801ea38:	01d701d7 01d701d7 01d701d7 01d701d7     ................
 801ea48:	01d701d7 01d701d7 01d701d7 01d701d7     ................
 801ea58:	01d601d7 01d601d6 01d601d6 01d601d6     ................
 801ea68:	01d601d6 01d601d6 01d601d6 01d601d6     ................
 801ea78:	01d601d6 01d601d6 01d601d6 01d601d6     ................
 801ea88:	01d601d6 01d601d6 01d601d6 01d601d6     ................
 801ea98:	01d601d6 01d601d6 01d601d6 01d601d6     ................
 801eaa8:	01d601d6 01d601d6 01d601d6 01d601d6     ................
 801eab8:	01d601d6 01d601d6 01d601d6 01d601d6     ................
 801eac8:	01d601d6 01d601d6 01d601d6 01d601d6     ................
 801ead8:	01d601d6 01d501d5 01d501d5 01d501d5     ................
 801eae8:	01d501d5 01d501d5 01d501d5 01d501d5     ................
 801eaf8:	01d501d5 01d501d5 01d501d5 01d501d5     ................
 801eb08:	01d501d5 01d501d5 01d501d5 01d501d5     ................
 801eb18:	01d501d5 01d501d5 01d501d5 01d501d5     ................
 801eb28:	01d501d5 01d501d5 01d501d5 01d501d5     ................
 801eb38:	01d501d5 01d501d5 01d501d5 01d501d5     ................
 801eb48:	01d501d5 01d501d5 01d501d5 01d501d5     ................
 801eb58:	01d501d5 01d401d4 01d401d4 01d401d4     ................
 801eb68:	01d401d4 01d401d4 01d401d4 01d401d4     ................
 801eb78:	01d401d4 01d401d4 01d401d4 01d401d4     ................
 801eb88:	01d401d4 01d401d4 01d401d4 01d401d4     ................
 801eb98:	01d401d4 01d401d4 01d401d4 01d401d4     ................
 801eba8:	01d401d4 01d401d4 01d401d4 01d401d4     ................
 801ebb8:	01d401d4 01d401d4 01d401d4 01d401d4     ................
 801ebc8:	01d401d4 01d401d4 01d401d4 01d401d4     ................
 801ebd8:	01d401d4 01d301d4 01d301d3 01d301d3     ................
 801ebe8:	01d301d3 01d301d3 01d301d3 01d301d3     ................
 801ebf8:	01d301d3 01d301d3 01d301d3 01d301d3     ................
 801ec08:	01d301d3 01d301d3 01d301d3 01d301d3     ................
 801ec18:	01d301d3 01d301d3 01d301d3 01d301d3     ................
 801ec28:	01d301d3 01d301d3 01d301d3 01d301d3     ................
 801ec38:	01d301d3 01d301d3 01d301d3 01d301d3     ................
 801ec48:	01d301d3 01d301d3 01d301d3 01d301d3     ................
 801ec58:	01d301d3 01d201d3 01d201d2 01d201d2     ................
 801ec68:	01d201d2 01d201d2 01d201d2 01d201d2     ................
 801ec78:	01d201d2 01d201d2 01d201d2 01d201d2     ................
 801ec88:	01d201d2 01d201d2 01d201d2 01d201d2     ................
 801ec98:	01d201d2 01d201d2 01d201d2 01d201d2     ................
 801eca8:	01d201d2 01d201d2 01d201d2 01d201d2     ................
 801ecb8:	01d201d2 01d201d2 01d201d2 01d201d2     ................
 801ecc8:	01d201d2 01d201d2 01d201d2 01d201d2     ................
 801ecd8:	01d201d2 01d101d2 01d101d1 01d101d1     ................
 801ece8:	01d101d1 01d101d1 01d101d1 01d101d1     ................
 801ecf8:	01d101d1 01d101d1 01d101d1 01d101d1     ................
 801ed08:	01d101d1 01d101d1 01d101d1 01d101d1     ................
 801ed18:	01d101d1 01d101d1 01d101d1 01d101d1     ................
 801ed28:	01d101d1 01d101d1 01d101d1 01d101d1     ................
 801ed38:	01d101d1 01d101d1 01d101d1 01d101d1     ................
 801ed48:	01d101d1 01d101d1 01d101d1 01d101d1     ................
 801ed58:	01d101d1 01d001d0 01d001d0 01d001d0     ................
 801ed68:	01d001d0 01d001d0 01d001d0 01d001d0     ................
 801ed78:	01d001d0 01d001d0 01d001d0 01d001d0     ................
 801ed88:	01d001d0 01d001d0 01d001d0 01d001d0     ................
 801ed98:	01d001d0 01d001d0 01d001d0 01d001d0     ................
 801eda8:	01d001d0 01d001d0 01d001d0 01d001d0     ................
 801edb8:	01d001d0 01d001d0 01d001d0 01d001d0     ................
 801edc8:	01d001d0 01d001d0 01d001d0 01d001d0     ................
 801edd8:	01d001d0 01cf01cf 01cf01cf 01cf01cf     ................
 801ede8:	01cf01cf 01cf01cf 01cf01cf 01cf01cf     ................
 801edf8:	01cf01cf 01cf01cf 01cf01cf 01cf01cf     ................
 801ee08:	01cf01cf 01cf01cf 01cf01cf 01cf01cf     ................
 801ee18:	01cf01cf 01cf01cf 01cf01cf 01cf01cf     ................
 801ee28:	01cf01cf 01cf01cf 01cf01cf 01cf01cf     ................
 801ee38:	01cf01cf 01cf01cf 01cf01cf 01cf01cf     ................
 801ee48:	01cf01cf 01cf01cf 01cf01cf 01cf01cf     ................
 801ee58:	01ce01cf 01ce01ce 01ce01ce 01ce01ce     ................
 801ee68:	01ce01ce 01ce01ce 01ce01ce 01ce01ce     ................
 801ee78:	01ce01ce 01ce01ce 01ce01ce 01ce01ce     ................
 801ee88:	01ce01ce 01ce01ce 01ce01ce 01ce01ce     ................
 801ee98:	01ce01ce 01ce01ce 01ce01ce 01ce01ce     ................
 801eea8:	01ce01ce 01ce01ce 01ce01ce 01ce01ce     ................
 801eeb8:	01ce01ce 01ce01ce 01ce01ce 01ce01ce     ................
 801eec8:	01ce01ce 01ce01ce 01ce01ce 01ce01ce     ................
 801eed8:	01cd01ce 01cd01cd 01cd01cd 01cd01cd     ................
 801eee8:	01cd01cd 01cd01cd 01cd01cd 01cd01cd     ................
 801eef8:	01cd01cd 01cd01cd 01cd01cd 01cd01cd     ................
 801ef08:	01cd01cd 01cd01cd 01cd01cd 01cd01cd     ................
 801ef18:	01cd01cd 01cd01cd 01cd01cd 01cd01cd     ................
 801ef28:	01cd01cd 01cd01cd 01cd01cd 01cd01cd     ................
 801ef38:	01cd01cd 01cd01cd 01cd01cd 01cd01cd     ................
 801ef48:	01cd01cd 01cd01cd 01cd01cd 01cd01cd     ................
 801ef58:	01cc01cc 01cc01cc 01cc01cc 01cc01cc     ................
 801ef68:	01cc01cc 01cc01cc 01cc01cc 01cc01cc     ................
 801ef78:	01cc01cc 01cc01cc 01cc01cc 01cc01cc     ................
 801ef88:	01cc01cc 01cc01cc 01cc01cc 01cc01cc     ................
 801ef98:	01cc01cc 01cc01cc 01cc01cc 01cc01cc     ................
 801efa8:	01cc01cc 01cc01cc 01cc01cc 01cc01cc     ................
 801efb8:	01cc01cc 01cc01cc 01cc01cc 01cc01cc     ................
 801efc8:	01cc01cc 01cc01cc 01cc01cc 01cb01cc     ................
 801efd8:	01cb01cb 01cb01cb 01cb01cb 01cb01cb     ................
 801efe8:	01cb01cb 01cb01cb 01cb01cb 01cb01cb     ................
 801eff8:	01cb01cb 01cb01cb 01cb01cb 01cb01cb     ................
 801f008:	01cb01cb 01cb01cb 01cb01cb 01cb01cb     ................
 801f018:	01cb01cb 01cb01cb 01cb01cb 01cb01cb     ................
 801f028:	01cb01cb 01cb01cb 01cb01cb 01cb01cb     ................
 801f038:	01cb01cb 01cb01cb 01cb01cb 01cb01cb     ................
 801f048:	01cb01cb 01cb01cb 01ca01cb 01ca01ca     ................
 801f058:	01ca01ca 01ca01ca 01ca01ca 01ca01ca     ................
 801f068:	01ca01ca 01ca01ca 01ca01ca 01ca01ca     ................
 801f078:	01ca01ca 01ca01ca 01ca01ca 01ca01ca     ................
 801f088:	01ca01ca 01ca01ca 01ca01ca 01ca01ca     ................
 801f098:	01ca01ca 01ca01ca 01ca01ca 01ca01ca     ................
 801f0a8:	01ca01ca 01ca01ca 01ca01ca 01ca01ca     ................
 801f0b8:	01ca01ca 01ca01ca 01ca01ca 01ca01ca     ................
 801f0c8:	01ca01ca 01ca01ca 01c901c9 01c901c9     ................
 801f0d8:	01c901c9 01c901c9 01c901c9 01c901c9     ................
 801f0e8:	01c901c9 01c901c9 01c901c9 01c901c9     ................
 801f0f8:	01c901c9 01c901c9 01c901c9 01c901c9     ................
 801f108:	01c901c9 01c901c9 01c901c9 01c901c9     ................
 801f118:	01c901c9 01c901c9 01c901c9 01c901c9     ................
 801f128:	01c901c9 01c901c9 01c901c9 01c901c9     ................
 801f138:	01c901c9 01c901c9 01c901c9 01c901c9     ................
 801f148:	01c901c9 01c801c9 01c801c8 01c801c8     ................
 801f158:	01c801c8 01c801c8 01c801c8 01c801c8     ................
 801f168:	01c801c8 01c801c8 01c801c8 01c801c8     ................
 801f178:	01c801c8 01c801c8 01c801c8 01c801c8     ................
 801f188:	01c801c8 01c801c8 01c801c8 01c801c8     ................
 801f198:	01c801c8 01c801c8 01c801c8 01c801c8     ................
 801f1a8:	01c801c8 01c801c8 01c801c8 01c801c8     ................
 801f1b8:	01c801c8 01c801c8 01c801c8 01c801c8     ................
 801f1c8:	01c701c8 01c701c7 01c701c7 01c701c7     ................
 801f1d8:	01c701c7 01c701c7 01c701c7 01c701c7     ................
 801f1e8:	01c701c7 01c701c7 01c701c7 01c701c7     ................
 801f1f8:	01c701c7 01c701c7 01c701c7 01c701c7     ................
 801f208:	01c701c7 01c701c7 01c701c7 01c701c7     ................
 801f218:	01c701c7 01c701c7 01c701c7 01c701c7     ................
 801f228:	01c701c7 01c701c7 01c701c7 01c701c7     ................
 801f238:	01c701c7 01c701c7 01c701c7 01c601c7     ................
 801f248:	01c601c6 01c601c6 01c601c6 01c601c6     ................
 801f258:	01c601c6 01c601c6 01c601c6 01c601c6     ................
 801f268:	01c601c6 01c601c6 01c601c6 01c601c6     ................
 801f278:	01c601c6 01c601c6 01c601c6 01c601c6     ................
 801f288:	01c601c6 01c601c6 01c601c6 01c601c6     ................
 801f298:	01c601c6 01c601c6 01c601c6 01c601c6     ................
 801f2a8:	01c601c6 01c601c6 01c601c6 01c601c6     ................
 801f2b8:	01c601c6 01c601c6 01c501c6 01c501c5     ................
 801f2c8:	01c501c5 01c501c5 01c501c5 01c501c5     ................
 801f2d8:	01c501c5 01c501c5 01c501c5 01c501c5     ................
 801f2e8:	01c501c5 01c501c5 01c501c5 01c501c5     ................
 801f2f8:	01c501c5 01c501c5 01c501c5 01c501c5     ................
 801f308:	01c501c5 01c501c5 01c501c5 01c501c5     ................
 801f318:	01c501c5 01c501c5 01c501c5 01c501c5     ................
 801f328:	01c501c5 01c501c5 01c501c5 01c501c5     ................
 801f338:	01c501c5 01c401c5 01c401c4 01c401c4     ................
 801f348:	01c401c4 01c401c4 01c401c4 01c401c4     ................
 801f358:	01c401c4 01c401c4 01c401c4 01c401c4     ................
 801f368:	01c401c4 01c401c4 01c401c4 01c401c4     ................
 801f378:	01c401c4 01c401c4 01c401c4 01c401c4     ................
 801f388:	01c401c4 01c401c4 01c401c4 01c401c4     ................
 801f398:	01c401c4 01c401c4 01c401c4 01c401c4     ................
 801f3a8:	01c401c4 01c401c4 01c401c4 01c401c4     ................
 801f3b8:	01c301c4 01c301c3 01c301c3 01c301c3     ................
 801f3c8:	01c301c3 01c301c3 01c301c3 01c301c3     ................
 801f3d8:	01c301c3 01c301c3 01c301c3 01c301c3     ................
 801f3e8:	01c301c3 01c301c3 01c301c3 01c301c3     ................
 801f3f8:	01c301c3 01c301c3 01c301c3 01c301c3     ................
 801f408:	01c301c3 01c301c3 01c301c3 01c301c3     ................
 801f418:	01c301c3 01c301c3 01c301c3 01c301c3     ................
 801f428:	01c301c3 01c301c3 01c301c3 01c201c2     ................
 801f438:	01c201c2 01c201c2 01c201c2 01c201c2     ................
 801f448:	01c201c2 01c201c2 01c201c2 01c201c2     ................
 801f458:	01c201c2 01c201c2 01c201c2 01c201c2     ................
 801f468:	01c201c2 01c201c2 01c201c2 01c201c2     ................
 801f478:	01c201c2 01c201c2 01c201c2 01c201c2     ................
 801f488:	01c201c2 01c201c2 01c201c2 01c201c2     ................
 801f498:	01c201c2 01c201c2 01c201c2 01c201c2     ................
 801f4a8:	01c201c2 01c201c2 01c101c1 01c101c1     ................
 801f4b8:	01c101c1 01c101c1 01c101c1 01c101c1     ................
 801f4c8:	01c101c1 01c101c1 01c101c1 01c101c1     ................
 801f4d8:	01c101c1 01c101c1 01c101c1 01c101c1     ................
 801f4e8:	01c101c1 01c101c1 01c101c1 01c101c1     ................
 801f4f8:	01c101c1 01c101c1 01c101c1 01c101c1     ................
 801f508:	01c101c1 01c101c1 01c101c1 01c101c1     ................
 801f518:	01c101c1 01c101c1 01c101c1 01c101c1     ................
 801f528:	01c001c1 01c001c0 01c001c0 01c001c0     ................
 801f538:	01c001c0 01c001c0 01c001c0 01c001c0     ................
 801f548:	01c001c0 01c001c0 01c001c0 01c001c0     ................
 801f558:	01c001c0 01c001c0 01c001c0 01c001c0     ................
 801f568:	01c001c0 01c001c0 01c001c0 01c001c0     ................
 801f578:	01c001c0 01c001c0 01c001c0 01c001c0     ................
 801f588:	01c001c0 01c001c0 01c001c0 01c001c0     ................
 801f598:	01c001c0 01c001c0 01c001c0 01bf01bf     ................
 801f5a8:	01bf01bf 01bf01bf 01bf01bf 01bf01bf     ................
 801f5b8:	01bf01bf 01bf01bf 01bf01bf 01bf01bf     ................
 801f5c8:	01bf01bf 01bf01bf 01bf01bf 01bf01bf     ................
 801f5d8:	01bf01bf 01bf01bf 01bf01bf 01bf01bf     ................
 801f5e8:	01bf01bf 01bf01bf 01bf01bf 01bf01bf     ................
 801f5f8:	01bf01bf 01bf01bf 01bf01bf 01bf01bf     ................
 801f608:	01bf01bf 01bf01bf 01bf01bf 01bf01bf     ................
 801f618:	01bf01bf 01be01bf 01be01be 01be01be     ................
 801f628:	01be01be 01be01be 01be01be 01be01be     ................
 801f638:	01be01be 01be01be 01be01be 01be01be     ................
 801f648:	01be01be 01be01be 01be01be 01be01be     ................
 801f658:	01be01be 01be01be 01be01be 01be01be     ................
 801f668:	01be01be 01be01be 01be01be 01be01be     ................
 801f678:	01be01be 01be01be 01be01be 01be01be     ................
 801f688:	01be01be 01be01be 01be01be 01be01be     ................
 801f698:	01bd01bd 01bd01bd 01bd01bd 01bd01bd     ................
 801f6a8:	01bd01bd 01bd01bd 01bd01bd 01bd01bd     ................
 801f6b8:	01bd01bd 01bd01bd 01bd01bd 01bd01bd     ................
 801f6c8:	01bd01bd 01bd01bd 01bd01bd 01bd01bd     ................
 801f6d8:	01bd01bd 01bd01bd 01bd01bd 01bd01bd     ................
 801f6e8:	01bd01bd 01bd01bd 01bd01bd 01bd01bd     ................
 801f6f8:	01bd01bd 01bd01bd 01bd01bd 01bd01bd     ................
 801f708:	01bd01bd 01bd01bd 01bc01bd 01bc01bc     ................
 801f718:	01bc01bc 01bc01bc 01bc01bc 01bc01bc     ................
 801f728:	01bc01bc 01bc01bc 01bc01bc 01bc01bc     ................
 801f738:	01bc01bc 01bc01bc 01bc01bc 01bc01bc     ................
 801f748:	01bc01bc 01bc01bc 01bc01bc 01bc01bc     ................
 801f758:	01bc01bc 01bc01bc 01bc01bc 01bc01bc     ................
 801f768:	01bc01bc 01bc01bc 01bc01bc 01bc01bc     ................
 801f778:	01bc01bc 01bc01bc 01bc01bc 01bc01bc     ................
 801f788:	01bc01bc 01bb01bb 01bb01bb 01bb01bb     ................
 801f798:	01bb01bb 01bb01bb 01bb01bb 01bb01bb     ................
 801f7a8:	01bb01bb 01bb01bb 01bb01bb 01bb01bb     ................
 801f7b8:	01bb01bb 01bb01bb 01bb01bb 01bb01bb     ................
 801f7c8:	01bb01bb 01bb01bb 01bb01bb 01bb01bb     ................
 801f7d8:	01bb01bb 01bb01bb 01bb01bb 01bb01bb     ................
 801f7e8:	01bb01bb 01bb01bb 01bb01bb 01bb01bb     ................
 801f7f8:	01bb01bb 01bb01bb 01bb01bb 01ba01ba     ................
 801f808:	01ba01ba 01ba01ba 01ba01ba 01ba01ba     ................
 801f818:	01ba01ba 01ba01ba 01ba01ba 01ba01ba     ................
 801f828:	01ba01ba 01ba01ba 01ba01ba 01ba01ba     ................
 801f838:	01ba01ba 01ba01ba 01ba01ba 01ba01ba     ................
 801f848:	01ba01ba 01ba01ba 01ba01ba 01ba01ba     ................
 801f858:	01ba01ba 01ba01ba 01ba01ba 01ba01ba     ................
 801f868:	01ba01ba 01ba01ba 01ba01ba 01ba01ba     ................
 801f878:	01ba01ba 01b901ba 01b901b9 01b901b9     ................
 801f888:	01b901b9 01b901b9 01b901b9 01b901b9     ................
 801f898:	01b901b9 01b901b9 01b901b9 01b901b9     ................
 801f8a8:	01b901b9 01b901b9 01b901b9 01b901b9     ................
 801f8b8:	01b901b9 01b901b9 01b901b9 01b901b9     ................
 801f8c8:	01b901b9 01b901b9 01b901b9 01b901b9     ................
 801f8d8:	01b901b9 01b901b9 01b901b9 01b901b9     ................
 801f8e8:	01b901b9 01b901b9 01b901b9 01b801b9     ................
 801f8f8:	01b801b8 01b801b8 01b801b8 01b801b8     ................
 801f908:	01b801b8 01b801b8 01b801b8 01b801b8     ................
 801f918:	01b801b8 01b801b8 01b801b8 01b801b8     ................
 801f928:	01b801b8 01b801b8 01b801b8 01b801b8     ................
 801f938:	01b801b8 01b801b8 01b801b8 01b801b8     ................
 801f948:	01b801b8 01b801b8 01b801b8 01b801b8     ................
 801f958:	01b801b8 01b801b8 01b801b8 01b801b8     ................
 801f968:	01b801b8 01b701b8 01b701b7 01b701b7     ................
 801f978:	01b701b7 01b701b7 01b701b7 01b701b7     ................
 801f988:	01b701b7 01b701b7 01b701b7 01b701b7     ................
 801f998:	01b701b7 01b701b7 01b701b7 01b701b7     ................
 801f9a8:	01b701b7 01b701b7 01b701b7 01b701b7     ................
 801f9b8:	01b701b7 01b701b7 01b701b7 01b701b7     ................
 801f9c8:	01b701b7 01b701b7 01b701b7 01b701b7     ................
 801f9d8:	01b701b7 01b701b7 01b701b7 01b601b7     ................
 801f9e8:	01b601b6 01b601b6 01b601b6 01b601b6     ................
 801f9f8:	01b601b6 01b601b6 01b601b6 01b601b6     ................
 801fa08:	01b601b6 01b601b6 01b601b6 01b601b6     ................
 801fa18:	01b601b6 01b601b6 01b601b6 01b601b6     ................
 801fa28:	01b601b6 01b601b6 01b601b6 01b601b6     ................
 801fa38:	01b601b6 01b601b6 01b601b6 01b601b6     ................
 801fa48:	01b601b6 01b601b6 01b601b6 01b601b6     ................
 801fa58:	01b601b6 01b501b6 01b501b5 01b501b5     ................
 801fa68:	01b501b5 01b501b5 01b501b5 01b501b5     ................
 801fa78:	01b501b5 01b501b5 01b501b5 01b501b5     ................
 801fa88:	01b501b5 01b501b5 01b501b5 01b501b5     ................
 801fa98:	01b501b5 01b501b5 01b501b5 01b501b5     ................
 801faa8:	01b501b5 01b501b5 01b501b5 01b501b5     ................
 801fab8:	01b501b5 01b501b5 01b501b5 01b501b5     ................
 801fac8:	01b501b5 01b501b5 01b501b5 01b401b5     ................
 801fad8:	01b401b4 01b401b4 01b401b4 01b401b4     ................
 801fae8:	01b401b4 01b401b4 01b401b4 01b401b4     ................
 801faf8:	01b401b4 01b401b4 01b401b4 01b401b4     ................
 801fb08:	01b401b4 01b401b4 01b401b4 01b401b4     ................
 801fb18:	01b401b4 01b401b4 01b401b4 01b401b4     ................
 801fb28:	01b401b4 01b401b4 01b401b4 01b401b4     ................
 801fb38:	01b401b4 01b401b4 01b401b4 01b401b4     ................
 801fb48:	01b401b4 01b301b4 01b301b3 01b301b3     ................
 801fb58:	01b301b3 01b301b3 01b301b3 01b301b3     ................
 801fb68:	01b301b3 01b301b3 01b301b3 01b301b3     ................
 801fb78:	01b301b3 01b301b3 01b301b3 01b301b3     ................
 801fb88:	01b301b3 01b301b3 01b301b3 01b301b3     ................
 801fb98:	01b301b3 01b301b3 01b301b3 01b301b3     ................
 801fba8:	01b301b3 01b301b3 01b301b3 01b301b3     ................
 801fbb8:	01b301b3 01b301b3 01b301b3 01b201b2     ................
 801fbc8:	01b201b2 01b201b2 01b201b2 01b201b2     ................
 801fbd8:	01b201b2 01b201b2 01b201b2 01b201b2     ................
 801fbe8:	01b201b2 01b201b2 01b201b2 01b201b2     ................
 801fbf8:	01b201b2 01b201b2 01b201b2 01b201b2     ................
 801fc08:	01b201b2 01b201b2 01b201b2 01b201b2     ................
 801fc18:	01b201b2 01b201b2 01b201b2 01b201b2     ................
 801fc28:	01b201b2 01b201b2 01b201b2 01b201b2     ................
 801fc38:	01b201b2 01b101b1 01b101b1 01b101b1     ................
 801fc48:	01b101b1 01b101b1 01b101b1 01b101b1     ................
 801fc58:	01b101b1 01b101b1 01b101b1 01b101b1     ................
 801fc68:	01b101b1 01b101b1 01b101b1 01b101b1     ................
 801fc78:	01b101b1 01b101b1 01b101b1 01b101b1     ................
 801fc88:	01b101b1 01b101b1 01b101b1 01b101b1     ................
 801fc98:	01b101b1 01b101b1 01b101b1 01b101b1     ................
 801fca8:	01b101b1 01b101b1 01b001b1 01b001b0     ................
 801fcb8:	01b001b0 01b001b0 01b001b0 01b001b0     ................
 801fcc8:	01b001b0 01b001b0 01b001b0 01b001b0     ................
 801fcd8:	01b001b0 01b001b0 01b001b0 01b001b0     ................
 801fce8:	01b001b0 01b001b0 01b001b0 01b001b0     ................
 801fcf8:	01b001b0 01b001b0 01b001b0 01b001b0     ................
 801fd08:	01b001b0 01b001b0 01b001b0 01b001b0     ................
 801fd18:	01b001b0 01b001b0 01b001b0 01b001b0     ................
 801fd28:	01af01af 01af01af 01af01af 01af01af     ................
 801fd38:	01af01af 01af01af 01af01af 01af01af     ................
 801fd48:	01af01af 01af01af 01af01af 01af01af     ................
 801fd58:	01af01af 01af01af 01af01af 01af01af     ................
 801fd68:	01af01af 01af01af 01af01af 01af01af     ................
 801fd78:	01af01af 01af01af 01af01af 01af01af     ................
 801fd88:	01af01af 01af01af 01af01af 01af01af     ................
 801fd98:	01af01af 01af01af 01ae01ae 01ae01ae     ................
 801fda8:	01ae01ae 01ae01ae 01ae01ae 01ae01ae     ................
 801fdb8:	01ae01ae 01ae01ae 01ae01ae 01ae01ae     ................
 801fdc8:	01ae01ae 01ae01ae 01ae01ae 01ae01ae     ................
 801fdd8:	01ae01ae 01ae01ae 01ae01ae 01ae01ae     ................
 801fde8:	01ae01ae 01ae01ae 01ae01ae 01ae01ae     ................
 801fdf8:	01ae01ae 01ae01ae 01ae01ae 01ae01ae     ................
 801fe08:	01ae01ae 01ae01ae 01ae01ae 01ad01ae     ................
 801fe18:	01ad01ad 01ad01ad 01ad01ad 01ad01ad     ................
 801fe28:	01ad01ad 01ad01ad 01ad01ad 01ad01ad     ................
 801fe38:	01ad01ad 01ad01ad 01ad01ad 01ad01ad     ................
 801fe48:	01ad01ad 01ad01ad 01ad01ad 01ad01ad     ................
 801fe58:	01ad01ad 01ad01ad 01ad01ad 01ad01ad     ................
 801fe68:	01ad01ad 01ad01ad 01ad01ad 01ad01ad     ................
 801fe78:	01ad01ad 01ad01ad 01ad01ad 01ad01ad     ................
 801fe88:	01ad01ad 01ac01ac 01ac01ac 01ac01ac     ................
 801fe98:	01ac01ac 01ac01ac 01ac01ac 01ac01ac     ................
 801fea8:	01ac01ac 01ac01ac 01ac01ac 01ac01ac     ................
 801feb8:	01ac01ac 01ac01ac 01ac01ac 01ac01ac     ................
 801fec8:	01ac01ac 01ac01ac 01ac01ac 01ac01ac     ................
 801fed8:	01ac01ac 01ac01ac 01ac01ac 01ac01ac     ................
 801fee8:	01ac01ac 01ac01ac 01ac01ac 01ac01ac     ................
 801fef8:	01ac01ac 01ac01ac 01ab01ab 01ab01ab     ................
 801ff08:	01ab01ab 01ab01ab 01ab01ab 01ab01ab     ................
 801ff18:	01ab01ab 01ab01ab 01ab01ab 01ab01ab     ................
 801ff28:	01ab01ab 01ab01ab 01ab01ab 01ab01ab     ................
 801ff38:	01ab01ab 01ab01ab 01ab01ab 01ab01ab     ................
 801ff48:	01ab01ab 01ab01ab 01ab01ab 01ab01ab     ................
 801ff58:	01ab01ab 01ab01ab 01ab01ab 01ab01ab     ................
 801ff68:	01ab01ab 01ab01ab 01ab01ab 01aa01ab     ................
 801ff78:	01aa01aa 01aa01aa 01aa01aa 01aa01aa     ................
 801ff88:	01aa01aa 01aa01aa 01aa01aa 01aa01aa     ................
 801ff98:	01aa01aa 01aa01aa 01aa01aa 01aa01aa     ................
 801ffa8:	01aa01aa 01aa01aa 01aa01aa 01aa01aa     ................
 801ffb8:	01aa01aa 01aa01aa 01aa01aa 01aa01aa     ................
 801ffc8:	01aa01aa 01aa01aa 01aa01aa 01aa01aa     ................
 801ffd8:	01aa01aa 01aa01aa 01aa01aa 01aa01aa     ................
 801ffe8:	01aa01aa 01a901a9 01a901a9 01a901a9     ................
 801fff8:	01a901a9 01a901a9 01a901a9 01a901a9     ................
 8020008:	01a901a9 01a901a9 01a901a9 01a901a9     ................
 8020018:	01a901a9 01a901a9 01a901a9 01a901a9     ................
 8020028:	01a901a9 01a901a9 01a901a9 01a901a9     ................
 8020038:	01a901a9 01a901a9 01a901a9 01a901a9     ................
 8020048:	01a901a9 01a901a9 01a901a9 01a901a9     ................
 8020058:	01a901a9 01a901a9 01a801a8 01a801a8     ................
 8020068:	01a801a8 01a801a8 01a801a8 01a801a8     ................
 8020078:	01a801a8 01a801a8 01a801a8 01a801a8     ................
 8020088:	01a801a8 01a801a8 01a801a8 01a801a8     ................
 8020098:	01a801a8 01a801a8 01a801a8 01a801a8     ................
 80200a8:	01a801a8 01a801a8 01a801a8 01a801a8     ................
 80200b8:	01a801a8 01a801a8 01a801a8 01a801a8     ................
 80200c8:	01a801a8 01a801a8 01a801a8 01a701a8     ................
 80200d8:	01a701a7 01a701a7 01a701a7 01a701a7     ................
 80200e8:	01a701a7 01a701a7 01a701a7 01a701a7     ................
 80200f8:	01a701a7 01a701a7 01a701a7 01a701a7     ................
 8020108:	01a701a7 01a701a7 01a701a7 01a701a7     ................
 8020118:	01a701a7 01a701a7 01a701a7 01a701a7     ................
 8020128:	01a701a7 01a701a7 01a701a7 01a701a7     ................
 8020138:	01a701a7 01a701a7 01a701a7 01a701a7     ................
 8020148:	01a601a7 01a601a6 01a601a6 01a601a6     ................
 8020158:	01a601a6 01a601a6 01a601a6 01a601a6     ................
 8020168:	01a601a6 01a601a6 01a601a6 01a601a6     ................
 8020178:	01a601a6 01a601a6 01a601a6 01a601a6     ................
 8020188:	01a601a6 01a601a6 01a601a6 01a601a6     ................
 8020198:	01a601a6 01a601a6 01a601a6 01a601a6     ................
 80201a8:	01a601a6 01a601a6 01a601a6 01a601a6     ................
 80201b8:	01a601a6 01a501a6 01a501a5 01a501a5     ................
 80201c8:	01a501a5 01a501a5 01a501a5 01a501a5     ................
 80201d8:	01a501a5 01a501a5 01a501a5 01a501a5     ................
 80201e8:	01a501a5 01a501a5 01a501a5 01a501a5     ................
 80201f8:	01a501a5 01a501a5 01a501a5 01a501a5     ................
 8020208:	01a501a5 01a501a5 01a501a5 01a501a5     ................
 8020218:	01a501a5 01a501a5 01a501a5 01a501a5     ................
 8020228:	01a501a5 01a501a5 01a401a5 01a401a4     ................
 8020238:	01a401a4 01a401a4 01a401a4 01a401a4     ................
 8020248:	01a401a4 01a401a4 01a401a4 01a401a4     ................
 8020258:	01a401a4 01a401a4 01a401a4 01a401a4     ................
 8020268:	01a401a4 01a401a4 01a401a4 01a401a4     ................
 8020278:	01a401a4 01a401a4 01a401a4 01a401a4     ................
 8020288:	01a401a4 01a401a4 01a401a4 01a401a4     ................
 8020298:	01a401a4 01a401a4 01a401a4 01a301a4     ................
 80202a8:	01a301a3 01a301a3 01a301a3 01a301a3     ................
 80202b8:	01a301a3 01a301a3 01a301a3 01a301a3     ................
 80202c8:	01a301a3 01a301a3 01a301a3 01a301a3     ................
 80202d8:	01a301a3 01a301a3 01a301a3 01a301a3     ................
 80202e8:	01a301a3 01a301a3 01a301a3 01a301a3     ................
 80202f8:	01a301a3 01a301a3 01a301a3 01a301a3     ................
 8020308:	01a301a3 01a301a3 01a301a3 01a301a3     ................
 8020318:	01a201a3 01a201a2 01a201a2 01a201a2     ................
 8020328:	01a201a2 01a201a2 01a201a2 01a201a2     ................
 8020338:	01a201a2 01a201a2 01a201a2 01a201a2     ................
 8020348:	01a201a2 01a201a2 01a201a2 01a201a2     ................
 8020358:	01a201a2 01a201a2 01a201a2 01a201a2     ................
 8020368:	01a201a2 01a201a2 01a201a2 01a201a2     ................
 8020378:	01a201a2 01a201a2 01a201a2 01a201a2     ................
 8020388:	01a201a2 01a101a2 01a101a1 01a101a1     ................
 8020398:	01a101a1 01a101a1 01a101a1 01a101a1     ................
 80203a8:	01a101a1 01a101a1 01a101a1 01a101a1     ................
 80203b8:	01a101a1 01a101a1 01a101a1 01a101a1     ................
 80203c8:	01a101a1 01a101a1 01a101a1 01a101a1     ................
 80203d8:	01a101a1 01a101a1 01a101a1 01a101a1     ................
 80203e8:	01a101a1 01a101a1 01a101a1 01a101a1     ................
 80203f8:	01a101a1 01a101a1 01a001a1 01a001a0     ................
 8020408:	01a001a0 01a001a0 01a001a0 01a001a0     ................
 8020418:	01a001a0 01a001a0 01a001a0 01a001a0     ................
 8020428:	01a001a0 01a001a0 01a001a0 01a001a0     ................
 8020438:	01a001a0 01a001a0 01a001a0 01a001a0     ................
 8020448:	01a001a0 01a001a0 01a001a0 01a001a0     ................
 8020458:	01a001a0 01a001a0 01a001a0 01a001a0     ................
 8020468:	01a001a0 01a001a0 01a001a0 019f01a0     ................
 8020478:	019f019f 019f019f 019f019f 019f019f     ................
 8020488:	019f019f 019f019f 019f019f 019f019f     ................
 8020498:	019f019f 019f019f 019f019f 019f019f     ................
 80204a8:	019f019f 019f019f 019f019f 019f019f     ................
 80204b8:	019f019f 019f019f 019f019f 019f019f     ................
 80204c8:	019f019f 019f019f 019f019f 019f019f     ................
 80204d8:	019f019f 019f019f 019f019f 019f019f     ................
 80204e8:	019e019e 019e019e 019e019e 019e019e     ................
 80204f8:	019e019e 019e019e 019e019e 019e019e     ................
 8020508:	019e019e 019e019e 019e019e 019e019e     ................
 8020518:	019e019e 019e019e 019e019e 019e019e     ................
 8020528:	019e019e 019e019e 019e019e 019e019e     ................
 8020538:	019e019e 019e019e 019e019e 019e019e     ................
 8020548:	019e019e 019e019e 019e019e 019e019e     ................
 8020558:	019e019e 019d019d 019d019d 019d019d     ................
 8020568:	019d019d 019d019d 019d019d 019d019d     ................
 8020578:	019d019d 019d019d 019d019d 019d019d     ................
 8020588:	019d019d 019d019d 019d019d 019d019d     ................
 8020598:	019d019d 019d019d 019d019d 019d019d     ................
 80205a8:	019d019d 019d019d 019d019d 019d019d     ................
 80205b8:	019d019d 019d019d 019d019d 019d019d     ................
 80205c8:	019d019d 019c019d 019c019c 019c019c     ................
 80205d8:	019c019c 019c019c 019c019c 019c019c     ................
 80205e8:	019c019c 019c019c 019c019c 019c019c     ................
 80205f8:	019c019c 019c019c 019c019c 019c019c     ................
 8020608:	019c019c 019c019c 019c019c 019c019c     ................
 8020618:	019c019c 019c019c 019c019c 019c019c     ................
 8020628:	019c019c 019c019c 019c019c 019c019c     ................
 8020638:	019c019c 019c019c 019b019c 019b019b     ................
 8020648:	019b019b 019b019b 019b019b 019b019b     ................
 8020658:	019b019b 019b019b 019b019b 019b019b     ................
 8020668:	019b019b 019b019b 019b019b 019b019b     ................
 8020678:	019b019b 019b019b 019b019b 019b019b     ................
 8020688:	019b019b 019b019b 019b019b 019b019b     ................
 8020698:	019b019b 019b019b 019b019b 019b019b     ................
 80206a8:	019b019b 019b019b 019b019b 019a019a     ................
 80206b8:	019a019a 019a019a 019a019a 019a019a     ................
 80206c8:	019a019a 019a019a 019a019a 019a019a     ................
 80206d8:	019a019a 019a019a 019a019a 019a019a     ................
 80206e8:	019a019a 019a019a 019a019a 019a019a     ................
 80206f8:	019a019a 019a019a 019a019a 019a019a     ................
 8020708:	019a019a 019a019a 019a019a 019a019a     ................
 8020718:	019a019a 019a019a 019a019a 0199019a     ................
 8020728:	01990199 01990199 01990199 01990199     ................
 8020738:	01990199 01990199 01990199 01990199     ................
 8020748:	01990199 01990199 01990199 01990199     ................
 8020758:	01990199 01990199 01990199 01990199     ................
 8020768:	01990199 01990199 01990199 01990199     ................
 8020778:	01990199 01990199 01990199 01990199     ................
 8020788:	01990199 01990199 01990199 01990199     ................
 8020798:	01980198 01980198 01980198 01980198     ................
 80207a8:	01980198 01980198 01980198 01980198     ................
 80207b8:	01980198 01980198 01980198 01980198     ................
 80207c8:	01980198 01980198 01980198 01980198     ................
 80207d8:	01980198 01980198 01980198 01980198     ................
 80207e8:	01980198 01980198 01980198 01980198     ................
 80207f8:	01980198 01980198 01980198 01980198     ................
 8020808:	01970198 01970197 01970197 01970197     ................
 8020818:	01970197 01970197 01970197 01970197     ................
 8020828:	01970197 01970197 01970197 01970197     ................
 8020838:	01970197 01970197 01970197 01970197     ................
 8020848:	01970197 01970197 01970197 01970197     ................
 8020858:	01970197 01970197 01970197 01970197     ................
 8020868:	01970197 01970197 01970197 01970197     ................
 8020878:	01970197 01960196 01960196 01960196     ................
 8020888:	01960196 01960196 01960196 01960196     ................
 8020898:	01960196 01960196 01960196 01960196     ................
 80208a8:	01960196 01960196 01960196 01960196     ................
 80208b8:	01960196 01960196 01960196 01960196     ................
 80208c8:	01960196 01960196 01960196 01960196     ................
 80208d8:	01960196 01960196 01960196 01960196     ................
 80208e8:	01960196 01950196 01950195 01950195     ................
 80208f8:	01950195 01950195 01950195 01950195     ................
 8020908:	01950195 01950195 01950195 01950195     ................
 8020918:	01950195 01950195 01950195 01950195     ................
 8020928:	01950195 01950195 01950195 01950195     ................
 8020938:	01950195 01950195 01950195 01950195     ................
 8020948:	01950195 01950195 01950195 01950195     ................
 8020958:	01950195 01950195 01940194 01940194     ................
 8020968:	01940194 01940194 01940194 01940194     ................
 8020978:	01940194 01940194 01940194 01940194     ................
 8020988:	01940194 01940194 01940194 01940194     ................
 8020998:	01940194 01940194 01940194 01940194     ................
 80209a8:	01940194 01940194 01940194 01940194     ................
 80209b8:	01940194 01940194 01940194 01940194     ................
 80209c8:	01940194 01940194 01930193 01930193     ................
 80209d8:	01930193 01930193 01930193 01930193     ................
 80209e8:	01930193 01930193 01930193 01930193     ................
 80209f8:	01930193 01930193 01930193 01930193     ................
 8020a08:	01930193 01930193 01930193 01930193     ................
 8020a18:	01930193 01930193 01930193 01930193     ................
 8020a28:	01930193 01930193 01930193 01930193     ................
 8020a38:	01930193 01930193 01920193 01920192     ................
 8020a48:	01920192 01920192 01920192 01920192     ................
 8020a58:	01920192 01920192 01920192 01920192     ................
 8020a68:	01920192 01920192 01920192 01920192     ................
 8020a78:	01920192 01920192 01920192 01920192     ................
 8020a88:	01920192 01920192 01920192 01920192     ................
 8020a98:	01920192 01920192 01920192 01920192     ................
 8020aa8:	01920192 01920192 01920192 01910191     ................
 8020ab8:	01910191 01910191 01910191 01910191     ................
 8020ac8:	01910191 01910191 01910191 01910191     ................
 8020ad8:	01910191 01910191 01910191 01910191     ................
 8020ae8:	01910191 01910191 01910191 01910191     ................
 8020af8:	01910191 01910191 01910191 01910191     ................
 8020b08:	01910191 01910191 01910191 01910191     ................
 8020b18:	01910191 01910191 01910191 01900190     ................
 8020b28:	01900190 01900190 01900190 01900190     ................
 8020b38:	01900190 01900190 01900190 01900190     ................
 8020b48:	01900190 01900190 01900190 01900190     ................
 8020b58:	01900190 01900190 01900190 01900190     ................
 8020b68:	01900190 01900190 01900190 01900190     ................
 8020b78:	01900190 01900190 01900190 01900190     ................
 8020b88:	01900190 01900190 01900190 018f018f     ................
 8020b98:	018f018f 018f018f 018f018f 018f018f     ................
 8020ba8:	018f018f 018f018f 018f018f 018f018f     ................
 8020bb8:	018f018f 018f018f 018f018f 018f018f     ................
 8020bc8:	018f018f 018f018f 018f018f 018f018f     ................
 8020bd8:	018f018f 018f018f 018f018f 018f018f     ................
 8020be8:	018f018f 018f018f 018f018f 018f018f     ................
 8020bf8:	018f018f 018f018f 018f018f 018e018f     ................
 8020c08:	018e018e 018e018e 018e018e 018e018e     ................
 8020c18:	018e018e 018e018e 018e018e 018e018e     ................
 8020c28:	018e018e 018e018e 018e018e 018e018e     ................
 8020c38:	018e018e 018e018e 018e018e 018e018e     ................
 8020c48:	018e018e 018e018e 018e018e 018e018e     ................
 8020c58:	018e018e 018e018e 018e018e 018e018e     ................
 8020c68:	018e018e 018e018e 018e018e 018d018e     ................
 8020c78:	018d018d 018d018d 018d018d 018d018d     ................
 8020c88:	018d018d 018d018d 018d018d 018d018d     ................
 8020c98:	018d018d 018d018d 018d018d 018d018d     ................
 8020ca8:	018d018d 018d018d 018d018d 018d018d     ................
 8020cb8:	018d018d 018d018d 018d018d 018d018d     ................
 8020cc8:	018d018d 018d018d 018d018d 018d018d     ................
 8020cd8:	018d018d 018d018d 018d018d 018c018d     ................
 8020ce8:	018c018c 018c018c 018c018c 018c018c     ................
 8020cf8:	018c018c 018c018c 018c018c 018c018c     ................
 8020d08:	018c018c 018c018c 018c018c 018c018c     ................
 8020d18:	018c018c 018c018c 018c018c 018c018c     ................
 8020d28:	018c018c 018c018c 018c018c 018c018c     ................
 8020d38:	018c018c 018c018c 018c018c 018c018c     ................
 8020d48:	018c018c 018c018c 018c018c 018b018c     ................
 8020d58:	018b018b 018b018b 018b018b 018b018b     ................
 8020d68:	018b018b 018b018b 018b018b 018b018b     ................
 8020d78:	018b018b 018b018b 018b018b 018b018b     ................
 8020d88:	018b018b 018b018b 018b018b 018b018b     ................
 8020d98:	018b018b 018b018b 018b018b 018b018b     ................
 8020da8:	018b018b 018b018b 018b018b 018b018b     ................
 8020db8:	018b018b 018b018b 018b018b 018a018b     ................
 8020dc8:	018a018a 018a018a 018a018a 018a018a     ................
 8020dd8:	018a018a 018a018a 018a018a 018a018a     ................
 8020de8:	018a018a 018a018a 018a018a 018a018a     ................
 8020df8:	018a018a 018a018a 018a018a 018a018a     ................
 8020e08:	018a018a 018a018a 018a018a 018a018a     ................
 8020e18:	018a018a 018a018a 018a018a 018a018a     ................
 8020e28:	018a018a 018a018a 018a018a 0189018a     ................
 8020e38:	01890189 01890189 01890189 01890189     ................
 8020e48:	01890189 01890189 01890189 01890189     ................
 8020e58:	01890189 01890189 01890189 01890189     ................
 8020e68:	01890189 01890189 01890189 01890189     ................
 8020e78:	01890189 01890189 01890189 01890189     ................
 8020e88:	01890189 01890189 01890189 01890189     ................
 8020e98:	01890189 01890189 01890189 01880189     ................
 8020ea8:	01880188 01880188 01880188 01880188     ................
 8020eb8:	01880188 01880188 01880188 01880188     ................
 8020ec8:	01880188 01880188 01880188 01880188     ................
 8020ed8:	01880188 01880188 01880188 01880188     ................
 8020ee8:	01880188 01880188 01880188 01880188     ................
 8020ef8:	01880188 01880188 01880188 01880188     ................
 8020f08:	01880188 01880188 01880188 01870188     ................
 8020f18:	01870187 01870187 01870187 01870187     ................
 8020f28:	01870187 01870187 01870187 01870187     ................
 8020f38:	01870187 01870187 01870187 01870187     ................
 8020f48:	01870187 01870187 01870187 01870187     ................
 8020f58:	01870187 01870187 01870187 01870187     ................
 8020f68:	01870187 01870187 01870187 01870187     ................
 8020f78:	01870187 01870187 01870187 01860187     ................
 8020f88:	01860186 01860186 01860186 01860186     ................
 8020f98:	01860186 01860186 01860186 01860186     ................
 8020fa8:	01860186 01860186 01860186 01860186     ................
 8020fb8:	01860186 01860186 01860186 01860186     ................
 8020fc8:	01860186 01860186 01860186 01860186     ................
 8020fd8:	01860186 01860186 01860186 01860186     ................
 8020fe8:	01860186 01860186 01860186 01850186     ................
 8020ff8:	01850185 01850185 01850185 01850185     ................
 8021008:	01850185 01850185 01850185 01850185     ................
 8021018:	01850185 01850185 01850185 01850185     ................
 8021028:	01850185 01850185 01850185 01850185     ................
 8021038:	01850185 01850185 01850185 01850185     ................
 8021048:	01850185 01850185 01850185 01850185     ................
 8021058:	01850185 01850185 01850185 01840184     ................
 8021068:	01840184 01840184 01840184 01840184     ................
 8021078:	01840184 01840184 01840184 01840184     ................
 8021088:	01840184 01840184 01840184 01840184     ................
 8021098:	01840184 01840184 01840184 01840184     ................
 80210a8:	01840184 01840184 01840184 01840184     ................
 80210b8:	01840184 01840184 01840184 01840184     ................
 80210c8:	01840184 01840184 01840184 01830183     ................
 80210d8:	01830183 01830183 01830183 01830183     ................
 80210e8:	01830183 01830183 01830183 01830183     ................
 80210f8:	01830183 01830183 01830183 01830183     ................
 8021108:	01830183 01830183 01830183 01830183     ................
 8021118:	01830183 01830183 01830183 01830183     ................
 8021128:	01830183 01830183 01830183 01830183     ................
 8021138:	01830183 01830183 01830183 01820182     ................
 8021148:	01820182 01820182 01820182 01820182     ................
 8021158:	01820182 01820182 01820182 01820182     ................
 8021168:	01820182 01820182 01820182 01820182     ................
 8021178:	01820182 01820182 01820182 01820182     ................
 8021188:	01820182 01820182 01820182 01820182     ................
 8021198:	01820182 01820182 01820182 01820182     ................
 80211a8:	01820182 01820182 01810182 01810181     ................
 80211b8:	01810181 01810181 01810181 01810181     ................
 80211c8:	01810181 01810181 01810181 01810181     ................
 80211d8:	01810181 01810181 01810181 01810181     ................
 80211e8:	01810181 01810181 01810181 01810181     ................
 80211f8:	01810181 01810181 01810181 01810181     ................
 8021208:	01810181 01810181 01810181 01810181     ................
 8021218:	01810181 01810181 01800181 01800180     ................
 8021228:	01800180 01800180 01800180 01800180     ................
 8021238:	01800180 01800180 01800180 01800180     ................
 8021248:	01800180 01800180 01800180 01800180     ................
 8021258:	01800180 01800180 01800180 01800180     ................
 8021268:	01800180 01800180 01800180 01800180     ................
 8021278:	01800180 01800180 01800180 01800180     ................
 8021288:	01800180 01800180 017f017f 017f017f     ................
 8021298:	017f017f 017f017f 017f017f 017f017f     ................
 80212a8:	017f017f 017f017f 017f017f 017f017f     ................
 80212b8:	017f017f 017f017f 017f017f 017f017f     ................
 80212c8:	017f017f 017f017f 017f017f 017f017f     ................
 80212d8:	017f017f 017f017f 017f017f 017f017f     ................
 80212e8:	017f017f 017f017f 017f017f 017f017f     ................
 80212f8:	017f017f 017e017f 017e017e 017e017e     ......~.~.~.~.~.
 8021308:	017e017e 017e017e 017e017e 017e017e     ~.~.~.~.~.~.~.~.
 8021318:	017e017e 017e017e 017e017e 017e017e     ~.~.~.~.~.~.~.~.
 8021328:	017e017e 017e017e 017e017e 017e017e     ~.~.~.~.~.~.~.~.
 8021338:	017e017e 017e017e 017e017e 017e017e     ~.~.~.~.~.~.~.~.
 8021348:	017e017e 017e017e 017e017e 017e017e     ~.~.~.~.~.~.~.~.
 8021358:	017e017e 017e017e 017e017e 017e017e     ~.~.~.~.~.~.~.~.
 8021368:	017e017e 017d017e 017d017d 017d017d     ~.~.~.}.}.}.}.}.
 8021378:	017d017d 017d017d 017d017d 017d017d     }.}.}.}.}.}.}.}.
 8021388:	017d017d 017d017d 017d017d 017d017d     }.}.}.}.}.}.}.}.
 8021398:	017d017d 017d017d 017d017d 017d017d     }.}.}.}.}.}.}.}.
 80213a8:	017d017d 017d017d 017d017d 017d017d     }.}.}.}.}.}.}.}.
 80213b8:	017d017d 017d017d 017d017d 017d017d     }.}.}.}.}.}.}.}.
 80213c8:	017d017d 017d017d 017d017d 017d017d     }.}.}.}.}.}.}.}.
 80213d8:	017d017d 017c017c 017c017c 017c017c     }.}.|.|.|.|.|.|.
 80213e8:	017c017c 017c017c 017c017c 017c017c     |.|.|.|.|.|.|.|.
 80213f8:	017c017c 017c017c 017c017c 017c017c     |.|.|.|.|.|.|.|.
 8021408:	017c017c 017c017c 017c017c 017c017c     |.|.|.|.|.|.|.|.
 8021418:	017c017c 017c017c 017c017c 017c017c     |.|.|.|.|.|.|.|.
 8021428:	017c017c 017c017c 017c017c 017c017c     |.|.|.|.|.|.|.|.
 8021438:	017c017c 017c017c 017c017c 017c017c     |.|.|.|.|.|.|.|.
 8021448:	017b017c 017b017b 017b017b 017b017b     |.{.{.{.{.{.{.{.
 8021458:	017b017b 017b017b 017b017b 017b017b     {.{.{.{.{.{.{.{.
 8021468:	017b017b 017b017b 017b017b 017b017b     {.{.{.{.{.{.{.{.
 8021478:	017b017b 017b017b 017b017b 017b017b     {.{.{.{.{.{.{.{.
 8021488:	017b017b 017b017b 017b017b 017b017b     {.{.{.{.{.{.{.{.
 8021498:	017b017b 017b017b 017b017b 017b017b     {.{.{.{.{.{.{.{.
 80214a8:	017b017b 017b017b 017b017b 017b017b     {.{.{.{.{.{.{.{.
 80214b8:	017a017a 017a017a 017a017a 017a017a     z.z.z.z.z.z.z.z.
 80214c8:	017a017a 017a017a 017a017a 017a017a     z.z.z.z.z.z.z.z.
 80214d8:	017a017a 017a017a 017a017a 017a017a     z.z.z.z.z.z.z.z.
 80214e8:	017a017a 017a017a 017a017a 017a017a     z.z.z.z.z.z.z.z.
 80214f8:	017a017a 017a017a 017a017a 017a017a     z.z.z.z.z.z.z.z.
 8021508:	017a017a 017a017a 017a017a 017a017a     z.z.z.z.z.z.z.z.
 8021518:	017a017a 017a017a 017a017a 0179017a     z.z.z.z.z.z.z.y.
 8021528:	01790179 01790179 01790179 01790179     y.y.y.y.y.y.y.y.
 8021538:	01790179 01790179 01790179 01790179     y.y.y.y.y.y.y.y.
 8021548:	01790179 01790179 01790179 01790179     y.y.y.y.y.y.y.y.
 8021558:	01790179 01790179 01790179 01790179     y.y.y.y.y.y.y.y.
 8021568:	01790179 01790179 01790179 01790179     y.y.y.y.y.y.y.y.
 8021578:	01790179 01790179 01790179 01790179     y.y.y.y.y.y.y.y.
 8021588:	01790179 01790179 01790179 01780178     y.y.y.y.y.y.x.x.
 8021598:	01780178 01780178 01780178 01780178     x.x.x.x.x.x.x.x.
 80215a8:	01780178 01780178 01780178 01780178     x.x.x.x.x.x.x.x.
 80215b8:	01780178 01780178 01780178 01780178     x.x.x.x.x.x.x.x.
 80215c8:	01780178 01780178 01780178 01780178     x.x.x.x.x.x.x.x.
 80215d8:	01780178 01780178 01780178 01780178     x.x.x.x.x.x.x.x.
 80215e8:	01780178 01780178 01780178 01780178     x.x.x.x.x.x.x.x.
 80215f8:	01780178 01780178 01770178 01770177     x.x.x.x.x.w.w.w.
 8021608:	01770177 01770177 01770177 01770177     w.w.w.w.w.w.w.w.
 8021618:	01770177 01770177 01770177 01770177     w.w.w.w.w.w.w.w.
 8021628:	01770177 01770177 01770177 01770177     w.w.w.w.w.w.w.w.
 8021638:	01770177 01770177 01770177 01770177     w.w.w.w.w.w.w.w.
 8021648:	01770177 01770177 01770177 01770177     w.w.w.w.w.w.w.w.
 8021658:	01770177 01770177 01770177 01770177     w.w.w.w.w.w.w.w.
 8021668:	01770177 01770177 01760176 01760176     w.w.w.w.v.v.v.v.
 8021678:	01760176 01760176 01760176 01760176     v.v.v.v.v.v.v.v.
 8021688:	01760176 01760176 01760176 01760176     v.v.v.v.v.v.v.v.
 8021698:	01760176 01760176 01760176 01760176     v.v.v.v.v.v.v.v.
 80216a8:	01760176 01760176 01760176 01760176     v.v.v.v.v.v.v.v.
 80216b8:	01760176 01760176 01760176 01760176     v.v.v.v.v.v.v.v.
 80216c8:	01760176 01760176 01760176 01760176     v.v.v.v.v.v.v.v.
 80216d8:	01760176 01750176 01750175 01750175     v.v.v.u.u.u.u.u.
 80216e8:	01750175 01750175 01750175 01750175     u.u.u.u.u.u.u.u.
 80216f8:	01750175 01750175 01750175 01750175     u.u.u.u.u.u.u.u.
 8021708:	01750175 01750175 01750175 01750175     u.u.u.u.u.u.u.u.
 8021718:	01750175 01750175 01750175 01750175     u.u.u.u.u.u.u.u.
 8021728:	01750175 01750175 01750175 01750175     u.u.u.u.u.u.u.u.
 8021738:	01750175 01750175 01750175 01750175     u.u.u.u.u.u.u.u.
 8021748:	01750175 01740174 01740174 01740174     u.u.t.t.t.t.t.t.
 8021758:	01740174 01740174 01740174 01740174     t.t.t.t.t.t.t.t.
 8021768:	01740174 01740174 01740174 01740174     t.t.t.t.t.t.t.t.
 8021778:	01740174 01740174 01740174 01740174     t.t.t.t.t.t.t.t.
 8021788:	01740174 01740174 01740174 01740174     t.t.t.t.t.t.t.t.
 8021798:	01740174 01740174 01740174 01740174     t.t.t.t.t.t.t.t.
 80217a8:	01740174 01740174 01740174 01740174     t.t.t.t.t.t.t.t.
 80217b8:	01730174 01730173 01730173 01730173     t.s.s.s.s.s.s.s.
 80217c8:	01730173 01730173 01730173 01730173     s.s.s.s.s.s.s.s.
 80217d8:	01730173 01730173 01730173 01730173     s.s.s.s.s.s.s.s.
 80217e8:	01730173 01730173 01730173 01730173     s.s.s.s.s.s.s.s.
 80217f8:	01730173 01730173 01730173 01730173     s.s.s.s.s.s.s.s.
 8021808:	01730173 01730173 01730173 01730173     s.s.s.s.s.s.s.s.
 8021818:	01730173 01730173 01730173 01720173     s.s.s.s.s.s.s.r.
 8021828:	01720172 01720172 01720172 01720172     r.r.r.r.r.r.r.r.
 8021838:	01720172 01720172 01720172 01720172     r.r.r.r.r.r.r.r.
 8021848:	01720172 01720172 01720172 01720172     r.r.r.r.r.r.r.r.
 8021858:	01720172 01720172 01720172 01720172     r.r.r.r.r.r.r.r.
 8021868:	01720172 01720172 01720172 01720172     r.r.r.r.r.r.r.r.
 8021878:	01720172 01720172 01720172 01720172     r.r.r.r.r.r.r.r.
 8021888:	01720172 01720172 01720172 01710171     r.r.r.r.r.r.q.q.
 8021898:	01710171 01710171 01710171 01710171     q.q.q.q.q.q.q.q.
 80218a8:	01710171 01710171 01710171 01710171     q.q.q.q.q.q.q.q.
 80218b8:	01710171 01710171 01710171 01710171     q.q.q.q.q.q.q.q.
 80218c8:	01710171 01710171 01710171 01710171     q.q.q.q.q.q.q.q.
 80218d8:	01710171 01710171 01710171 01710171     q.q.q.q.q.q.q.q.
 80218e8:	01710171 01710171 01710171 01710171     q.q.q.q.q.q.q.q.
 80218f8:	01710171 01710171 01700171 01700170     q.q.q.q.q.p.p.p.
 8021908:	01700170 01700170 01700170 01700170     p.p.p.p.p.p.p.p.
 8021918:	01700170 01700170 01700170 01700170     p.p.p.p.p.p.p.p.
 8021928:	01700170 01700170 01700170 01700170     p.p.p.p.p.p.p.p.
 8021938:	01700170 01700170 01700170 01700170     p.p.p.p.p.p.p.p.
 8021948:	01700170 01700170 01700170 01700170     p.p.p.p.p.p.p.p.
 8021958:	01700170 01700170 01700170 01700170     p.p.p.p.p.p.p.p.
 8021968:	01700170 016f0170 016f016f 016f016f     p.p.p.o.o.o.o.o.
 8021978:	016f016f 016f016f 016f016f 016f016f     o.o.o.o.o.o.o.o.
 8021988:	016f016f 016f016f 016f016f 016f016f     o.o.o.o.o.o.o.o.
 8021998:	016f016f 016f016f 016f016f 016f016f     o.o.o.o.o.o.o.o.
 80219a8:	016f016f 016f016f 016f016f 016f016f     o.o.o.o.o.o.o.o.
 80219b8:	016f016f 016f016f 016f016f 016f016f     o.o.o.o.o.o.o.o.
 80219c8:	016f016f 016f016f 016f016f 016f016f     o.o.o.o.o.o.o.o.
 80219d8:	016f016f 016e016e 016e016e 016e016e     o.o.n.n.n.n.n.n.
 80219e8:	016e016e 016e016e 016e016e 016e016e     n.n.n.n.n.n.n.n.
 80219f8:	016e016e 016e016e 016e016e 016e016e     n.n.n.n.n.n.n.n.
 8021a08:	016e016e 016e016e 016e016e 016e016e     n.n.n.n.n.n.n.n.
 8021a18:	016e016e 016e016e 016e016e 016e016e     n.n.n.n.n.n.n.n.
 8021a28:	016e016e 016e016e 016e016e 016e016e     n.n.n.n.n.n.n.n.
 8021a38:	016e016e 016e016e 016e016e 016e016e     n.n.n.n.n.n.n.n.
 8021a48:	016d016d 016d016d 016d016d 016d016d     m.m.m.m.m.m.m.m.
 8021a58:	016d016d 016d016d 016d016d 016d016d     m.m.m.m.m.m.m.m.
 8021a68:	016d016d 016d016d 016d016d 016d016d     m.m.m.m.m.m.m.m.
 8021a78:	016d016d 016d016d 016d016d 016d016d     m.m.m.m.m.m.m.m.
 8021a88:	016d016d 016d016d 016d016d 016d016d     m.m.m.m.m.m.m.m.
 8021a98:	016d016d 016d016d 016d016d 016d016d     m.m.m.m.m.m.m.m.
 8021aa8:	016d016d 016d016d 016d016d 016c016d     m.m.m.m.m.m.m.l.
 8021ab8:	016c016c 016c016c 016c016c 016c016c     l.l.l.l.l.l.l.l.
 8021ac8:	016c016c 016c016c 016c016c 016c016c     l.l.l.l.l.l.l.l.
 8021ad8:	016c016c 016c016c 016c016c 016c016c     l.l.l.l.l.l.l.l.
 8021ae8:	016c016c 016c016c 016c016c 016c016c     l.l.l.l.l.l.l.l.
 8021af8:	016c016c 016c016c 016c016c 016c016c     l.l.l.l.l.l.l.l.
 8021b08:	016c016c 016c016c 016c016c 016c016c     l.l.l.l.l.l.l.l.
 8021b18:	016c016c 016c016c 016b016c 016b016b     l.l.l.l.l.k.k.k.
 8021b28:	016b016b 016b016b 016b016b 016b016b     k.k.k.k.k.k.k.k.
 8021b38:	016b016b 016b016b 016b016b 016b016b     k.k.k.k.k.k.k.k.
 8021b48:	016b016b 016b016b 016b016b 016b016b     k.k.k.k.k.k.k.k.
 8021b58:	016b016b 016b016b 016b016b 016b016b     k.k.k.k.k.k.k.k.
 8021b68:	016b016b 016b016b 016b016b 016b016b     k.k.k.k.k.k.k.k.
 8021b78:	016b016b 016b016b 016b016b 016b016b     k.k.k.k.k.k.k.k.
 8021b88:	016b016b 016a016b 016a016a 016a016a     k.k.k.j.j.j.j.j.
 8021b98:	016a016a 016a016a 016a016a 016a016a     j.j.j.j.j.j.j.j.
 8021ba8:	016a016a 016a016a 016a016a 016a016a     j.j.j.j.j.j.j.j.
 8021bb8:	016a016a 016a016a 016a016a 016a016a     j.j.j.j.j.j.j.j.
 8021bc8:	016a016a 016a016a 016a016a 016a016a     j.j.j.j.j.j.j.j.
 8021bd8:	016a016a 016a016a 016a016a 016a016a     j.j.j.j.j.j.j.j.
 8021be8:	016a016a 016a016a 016a016a 016a016a     j.j.j.j.j.j.j.j.
 8021bf8:	016a016a 01690169 01690169 01690169     j.j.i.i.i.i.i.i.
 8021c08:	01690169 01690169 01690169 01690169     i.i.i.i.i.i.i.i.
 8021c18:	01690169 01690169 01690169 01690169     i.i.i.i.i.i.i.i.
 8021c28:	01690169 01690169 01690169 01690169     i.i.i.i.i.i.i.i.
 8021c38:	01690169 01690169 01690169 01690169     i.i.i.i.i.i.i.i.
 8021c48:	01690169 01690169 01690169 01690169     i.i.i.i.i.i.i.i.
 8021c58:	01690169 01690169 01690169 01690169     i.i.i.i.i.i.i.i.
 8021c68:	01680168 01680168 01680168 01680168     h.h.h.h.h.h.h.h.
 8021c78:	01680168 01680168 01680168 01680168     h.h.h.h.h.h.h.h.
 8021c88:	01680168 01680168 01680168 01680168     h.h.h.h.h.h.h.h.
 8021c98:	01680168 01680168 01680168 01680168     h.h.h.h.h.h.h.h.
 8021ca8:	01680168 01680168 01680168 01680168     h.h.h.h.h.h.h.h.
 8021cb8:	01680168 01680168 01680168 01680168     h.h.h.h.h.h.h.h.
 8021cc8:	01680168 01680168 01680168 01670167     h.h.h.h.h.h.g.g.
 8021cd8:	01670167 01670167 01670167 01670167     g.g.g.g.g.g.g.g.
 8021ce8:	01670167 01670167 01670167 01670167     g.g.g.g.g.g.g.g.
 8021cf8:	01670167 01670167 01670167 01670167     g.g.g.g.g.g.g.g.
 8021d08:	01670167 01670167 01670167 01670167     g.g.g.g.g.g.g.g.
 8021d18:	01670167 01670167 01670167 01670167     g.g.g.g.g.g.g.g.
 8021d28:	01670167 01670167 01670167 01670167     g.g.g.g.g.g.g.g.
 8021d38:	01670167 01670167 01660167 01660166     g.g.g.g.g.f.f.f.
 8021d48:	01660166 01660166 01660166 01660166     f.f.f.f.f.f.f.f.
 8021d58:	01660166 01660166 01660166 01660166     f.f.f.f.f.f.f.f.
 8021d68:	01660166 01660166 01660166 01660166     f.f.f.f.f.f.f.f.
 8021d78:	01660166 01660166 01660166 01660166     f.f.f.f.f.f.f.f.
 8021d88:	01660166 01660166 01660166 01660166     f.f.f.f.f.f.f.f.
 8021d98:	01660166 01660166 01660166 01660166     f.f.f.f.f.f.f.f.
 8021da8:	01660166 01650166 01650165 01650165     f.f.f.e.e.e.e.e.
 8021db8:	01650165 01650165 01650165 01650165     e.e.e.e.e.e.e.e.
 8021dc8:	01650165 01650165 01650165 01650165     e.e.e.e.e.e.e.e.
 8021dd8:	01650165 01650165 01650165 01650165     e.e.e.e.e.e.e.e.
 8021de8:	01650165 01650165 01650165 01650165     e.e.e.e.e.e.e.e.
 8021df8:	01650165 01650165 01650165 01650165     e.e.e.e.e.e.e.e.
 8021e08:	01650165 01650165 01650165 01650165     e.e.e.e.e.e.e.e.
 8021e18:	01640165 01640164 01640164 01640164     e.d.d.d.d.d.d.d.
 8021e28:	01640164 01640164 01640164 01640164     d.d.d.d.d.d.d.d.
 8021e38:	01640164 01640164 01640164 01640164     d.d.d.d.d.d.d.d.
 8021e48:	01640164 01640164 01640164 01640164     d.d.d.d.d.d.d.d.
 8021e58:	01640164 01640164 01640164 01640164     d.d.d.d.d.d.d.d.
 8021e68:	01640164 01640164 01640164 01640164     d.d.d.d.d.d.d.d.
 8021e78:	01640164 01640164 01640164 01630164     d.d.d.d.d.d.d.c.
 8021e88:	01630163 01630163 01630163 01630163     c.c.c.c.c.c.c.c.
 8021e98:	01630163 01630163 01630163 01630163     c.c.c.c.c.c.c.c.
 8021ea8:	01630163 01630163 01630163 01630163     c.c.c.c.c.c.c.c.
 8021eb8:	01630163 01630163 01630163 01630163     c.c.c.c.c.c.c.c.
 8021ec8:	01630163 01630163 01630163 01630163     c.c.c.c.c.c.c.c.
 8021ed8:	01630163 01630163 01630163 01630163     c.c.c.c.c.c.c.c.
 8021ee8:	01630163 01630163 01620163 01620162     c.c.c.c.c.b.b.b.
 8021ef8:	01620162 01620162 01620162 01620162     b.b.b.b.b.b.b.b.
 8021f08:	01620162 01620162 01620162 01620162     b.b.b.b.b.b.b.b.
 8021f18:	01620162 01620162 01620162 01620162     b.b.b.b.b.b.b.b.
 8021f28:	01620162 01620162 01620162 01620162     b.b.b.b.b.b.b.b.
 8021f38:	01620162 01620162 01620162 01620162     b.b.b.b.b.b.b.b.
 8021f48:	01620162 01620162 01620162 01620162     b.b.b.b.b.b.b.b.
 8021f58:	01620162 01610162 01610161 01610161     b.b.b.a.a.a.a.a.
 8021f68:	01610161 01610161 01610161 01610161     a.a.a.a.a.a.a.a.
 8021f78:	01610161 01610161 01610161 01610161     a.a.a.a.a.a.a.a.
 8021f88:	01610161 01610161 01610161 01610161     a.a.a.a.a.a.a.a.
 8021f98:	01610161 01610161 01610161 01610161     a.a.a.a.a.a.a.a.
 8021fa8:	01610161 01610161 01610161 01610161     a.a.a.a.a.a.a.a.
 8021fb8:	01610161 01610161 01610161 01610161     a.a.a.a.a.a.a.a.
 8021fc8:	01600161 01600160 01600160 01600160     a.`.`.`.`.`.`.`.
 8021fd8:	01600160 01600160 01600160 01600160     `.`.`.`.`.`.`.`.
 8021fe8:	01600160 01600160 01600160 01600160     `.`.`.`.`.`.`.`.
 8021ff8:	01600160 01600160 01600160 01600160     `.`.`.`.`.`.`.`.
 8022008:	01600160 01600160 01600160 01600160     `.`.`.`.`.`.`.`.
 8022018:	01600160 01600160 01600160 01600160     `.`.`.`.`.`.`.`.
 8022028:	01600160 01600160 01600160 015f0160     `.`.`.`.`.`.`._.
 8022038:	015f015f 015f015f 015f015f 015f015f     _._._._._._._._.
 8022048:	015f015f 015f015f 015f015f 015f015f     _._._._._._._._.
 8022058:	015f015f 015f015f 015f015f 015f015f     _._._._._._._._.
 8022068:	015f015f 015f015f 015f015f 015f015f     _._._._._._._._.
 8022078:	015f015f 015f015f 015f015f 015f015f     _._._._._._._._.
 8022088:	015f015f 015f015f 015f015f 015f015f     _._._._._._._._.
 8022098:	015f015f 015f015f 015e015f 015e015e     _._._._._.^.^.^.
 80220a8:	015e015e 015e015e 015e015e 015e015e     ^.^.^.^.^.^.^.^.
 80220b8:	015e015e 015e015e 015e015e 015e015e     ^.^.^.^.^.^.^.^.
 80220c8:	015e015e 015e015e 015e015e 015e015e     ^.^.^.^.^.^.^.^.
 80220d8:	015e015e 015e015e 015e015e 015e015e     ^.^.^.^.^.^.^.^.
 80220e8:	015e015e 015e015e 015e015e 015e015e     ^.^.^.^.^.^.^.^.
 80220f8:	015e015e 015e015e 015e015e 015e015e     ^.^.^.^.^.^.^.^.
 8022108:	015e015e 015d015e 015d015d 015d015d     ^.^.^.].].].].].
 8022118:	015d015d 015d015d 015d015d 015d015d     ].].].].].].].].
 8022128:	015d015d 015d015d 015d015d 015d015d     ].].].].].].].].
 8022138:	015d015d 015d015d 015d015d 015d015d     ].].].].].].].].
 8022148:	015d015d 015d015d 015d015d 015d015d     ].].].].].].].].
 8022158:	015d015d 015d015d 015d015d 015d015d     ].].].].].].].].
 8022168:	015d015d 015d015d 015d015d 015d015d     ].].].].].].].].
 8022178:	015c015d 015c015c 015c015c 015c015c     ].\.\.\.\.\.\.\.
 8022188:	015c015c 015c015c 015c015c 015c015c     \.\.\.\.\.\.\.\.
 8022198:	015c015c 015c015c 015c015c 015c015c     \.\.\.\.\.\.\.\.
 80221a8:	015c015c 015c015c 015c015c 015c015c     \.\.\.\.\.\.\.\.
 80221b8:	015c015c 015c015c 015c015c 015c015c     \.\.\.\.\.\.\.\.
 80221c8:	015c015c 015c015c 015c015c 015c015c     \.\.\.\.\.\.\.\.
 80221d8:	015c015c 015c015c 015c015c 015b015c     \.\.\.\.\.\.\.[.
 80221e8:	015b015b 015b015b 015b015b 015b015b     [.[.[.[.[.[.[.[.
 80221f8:	015b015b 015b015b 015b015b 015b015b     [.[.[.[.[.[.[.[.
 8022208:	015b015b 015b015b 015b015b 015b015b     [.[.[.[.[.[.[.[.
 8022218:	015b015b 015b015b 015b015b 015b015b     [.[.[.[.[.[.[.[.
 8022228:	015b015b 015b015b 015b015b 015b015b     [.[.[.[.[.[.[.[.
 8022238:	015b015b 015b015b 015b015b 015b015b     [.[.[.[.[.[.[.[.
 8022248:	015b015b 015b015b 015a015b 015a015a     [.[.[.[.[.Z.Z.Z.
 8022258:	015a015a 015a015a 015a015a 015a015a     Z.Z.Z.Z.Z.Z.Z.Z.
 8022268:	015a015a 015a015a 015a015a 015a015a     Z.Z.Z.Z.Z.Z.Z.Z.
 8022278:	015a015a 015a015a 015a015a 015a015a     Z.Z.Z.Z.Z.Z.Z.Z.
 8022288:	015a015a 015a015a 015a015a 015a015a     Z.Z.Z.Z.Z.Z.Z.Z.
 8022298:	015a015a 015a015a 015a015a 015a015a     Z.Z.Z.Z.Z.Z.Z.Z.
 80222a8:	015a015a 015a015a 015a015a 015a015a     Z.Z.Z.Z.Z.Z.Z.Z.
 80222b8:	015a015a 01590159 01590159 01590159     Z.Z.Y.Y.Y.Y.Y.Y.
 80222c8:	01590159 01590159 01590159 01590159     Y.Y.Y.Y.Y.Y.Y.Y.
 80222d8:	01590159 01590159 01590159 01590159     Y.Y.Y.Y.Y.Y.Y.Y.
 80222e8:	01590159 01590159 01590159 01590159     Y.Y.Y.Y.Y.Y.Y.Y.
 80222f8:	01590159 01590159 01590159 01590159     Y.Y.Y.Y.Y.Y.Y.Y.
 8022308:	01590159 01590159 01590159 01590159     Y.Y.Y.Y.Y.Y.Y.Y.
 8022318:	01590159 01590159 01590159 01590159     Y.Y.Y.Y.Y.Y.Y.Y.
 8022328:	01580158 01580158 01580158 01580158     X.X.X.X.X.X.X.X.
 8022338:	01580158 01580158 01580158 01580158     X.X.X.X.X.X.X.X.
 8022348:	01580158 01580158 01580158 01580158     X.X.X.X.X.X.X.X.
 8022358:	01580158 01580158 01580158 01580158     X.X.X.X.X.X.X.X.
 8022368:	01580158 01580158 01580158 01580158     X.X.X.X.X.X.X.X.
 8022378:	01580158 01580158 01580158 01580158     X.X.X.X.X.X.X.X.
 8022388:	01580158 01580158 01580158 01570157     X.X.X.X.X.X.W.W.
 8022398:	01570157 01570157 01570157 01570157     W.W.W.W.W.W.W.W.
 80223a8:	01570157 01570157 01570157 01570157     W.W.W.W.W.W.W.W.
 80223b8:	01570157 01570157 01570157 01570157     W.W.W.W.W.W.W.W.
 80223c8:	01570157 01570157 01570157 01570157     W.W.W.W.W.W.W.W.
 80223d8:	01570157 01570157 01570157 01570157     W.W.W.W.W.W.W.W.
 80223e8:	01570157 01570157 01570157 01570157     W.W.W.W.W.W.W.W.
 80223f8:	01570157 01570157 01560156 01560156     W.W.W.W.V.V.V.V.
 8022408:	01560156 01560156 01560156 01560156     V.V.V.V.V.V.V.V.
 8022418:	01560156 01560156 01560156 01560156     V.V.V.V.V.V.V.V.
 8022428:	01560156 01560156 01560156 01560156     V.V.V.V.V.V.V.V.
 8022438:	01560156 01560156 01560156 01560156     V.V.V.V.V.V.V.V.
 8022448:	01560156 01560156 01560156 01560156     V.V.V.V.V.V.V.V.
 8022458:	01560156 01560156 01560156 01560156     V.V.V.V.V.V.V.V.
 8022468:	01550156 01550155 01550155 01550155     V.U.U.U.U.U.U.U.
 8022478:	01550155 01550155 01550155 01550155     U.U.U.U.U.U.U.U.
 8022488:	01550155 01550155 01550155 01550155     U.U.U.U.U.U.U.U.
 8022498:	01550155 01550155 01550155 01550155     U.U.U.U.U.U.U.U.
 80224a8:	01550155 01550155 01550155 01550155     U.U.U.U.U.U.U.U.
 80224b8:	01550155 01550155 01550155 01550155     U.U.U.U.U.U.U.U.
 80224c8:	01550155 01550155 01550155 01540155     U.U.U.U.U.U.U.T.
 80224d8:	01540154 01540154 01540154 01540154     T.T.T.T.T.T.T.T.
 80224e8:	01540154 01540154 01540154 01540154     T.T.T.T.T.T.T.T.
 80224f8:	01540154 01540154 01540154 01540154     T.T.T.T.T.T.T.T.
 8022508:	01540154 01540154 01540154 01540154     T.T.T.T.T.T.T.T.
 8022518:	01540154 01540154 01540154 01540154     T.T.T.T.T.T.T.T.
 8022528:	01540154 01540154 01540154 01540154     T.T.T.T.T.T.T.T.
 8022538:	01540154 01540154 01530154 01530153     T.T.T.T.T.S.S.S.
 8022548:	01530153 01530153 01530153 01530153     S.S.S.S.S.S.S.S.
 8022558:	01530153 01530153 01530153 01530153     S.S.S.S.S.S.S.S.
 8022568:	01530153 01530153 01530153 01530153     S.S.S.S.S.S.S.S.
 8022578:	01530153 01530153 01530153 01530153     S.S.S.S.S.S.S.S.
 8022588:	01530153 01530153 01530153 01530153     S.S.S.S.S.S.S.S.
 8022598:	01530153 01530153 01530153 01530153     S.S.S.S.S.S.S.S.
 80225a8:	01530153 01520152 01520152 01520152     S.S.R.R.R.R.R.R.
 80225b8:	01520152 01520152 01520152 01520152     R.R.R.R.R.R.R.R.
 80225c8:	01520152 01520152 01520152 01520152     R.R.R.R.R.R.R.R.
 80225d8:	01520152 01520152 01520152 01520152     R.R.R.R.R.R.R.R.
 80225e8:	01520152 01520152 01520152 01520152     R.R.R.R.R.R.R.R.
 80225f8:	01520152 01520152 01520152 01520152     R.R.R.R.R.R.R.R.
 8022608:	01520152 01520152 01520152 01520152     R.R.R.R.R.R.R.R.
 8022618:	01510151 01510151 01510151 01510151     Q.Q.Q.Q.Q.Q.Q.Q.
 8022628:	01510151 01510151 01510151 01510151     Q.Q.Q.Q.Q.Q.Q.Q.
 8022638:	01510151 01510151 01510151 01510151     Q.Q.Q.Q.Q.Q.Q.Q.
 8022648:	01510151 01510151 01510151 01510151     Q.Q.Q.Q.Q.Q.Q.Q.
 8022658:	01510151 01510151 01510151 01510151     Q.Q.Q.Q.Q.Q.Q.Q.
 8022668:	01510151 01510151 01510151 01510151     Q.Q.Q.Q.Q.Q.Q.Q.
 8022678:	01510151 01510151 01500151 01500150     Q.Q.Q.Q.Q.P.P.P.
 8022688:	01500150 01500150 01500150 01500150     P.P.P.P.P.P.P.P.
 8022698:	01500150 01500150 01500150 01500150     P.P.P.P.P.P.P.P.
 80226a8:	01500150 01500150 01500150 01500150     P.P.P.P.P.P.P.P.
 80226b8:	01500150 01500150 01500150 01500150     P.P.P.P.P.P.P.P.
 80226c8:	01500150 01500150 01500150 01500150     P.P.P.P.P.P.P.P.
 80226d8:	01500150 01500150 01500150 01500150     P.P.P.P.P.P.P.P.
 80226e8:	01500150 014f0150 014f014f 014f014f     P.P.P.O.O.O.O.O.
 80226f8:	014f014f 014f014f 014f014f 014f014f     O.O.O.O.O.O.O.O.
 8022708:	014f014f 014f014f 014f014f 014f014f     O.O.O.O.O.O.O.O.
 8022718:	014f014f 014f014f 014f014f 014f014f     O.O.O.O.O.O.O.O.
 8022728:	014f014f 014f014f 014f014f 014f014f     O.O.O.O.O.O.O.O.
 8022738:	014f014f 014f014f 014f014f 014f014f     O.O.O.O.O.O.O.O.
 8022748:	014f014f 014f014f 014f014f 014f014f     O.O.O.O.O.O.O.O.
 8022758:	014e014e 014e014e 014e014e 014e014e     N.N.N.N.N.N.N.N.
 8022768:	014e014e 014e014e 014e014e 014e014e     N.N.N.N.N.N.N.N.
 8022778:	014e014e 014e014e 014e014e 014e014e     N.N.N.N.N.N.N.N.
 8022788:	014e014e 014e014e 014e014e 014e014e     N.N.N.N.N.N.N.N.
 8022798:	014e014e 014e014e 014e014e 014e014e     N.N.N.N.N.N.N.N.
 80227a8:	014e014e 014e014e 014e014e 014e014e     N.N.N.N.N.N.N.N.
 80227b8:	014e014e 014e014e 014e014e 014d014d     N.N.N.N.N.N.M.M.
 80227c8:	014d014d 014d014d 014d014d 014d014d     M.M.M.M.M.M.M.M.
 80227d8:	014d014d 014d014d 014d014d 014d014d     M.M.M.M.M.M.M.M.
 80227e8:	014d014d 014d014d 014d014d 014d014d     M.M.M.M.M.M.M.M.
 80227f8:	014d014d 014d014d 014d014d 014d014d     M.M.M.M.M.M.M.M.
 8022808:	014d014d 014d014d 014d014d 014d014d     M.M.M.M.M.M.M.M.
 8022818:	014d014d 014d014d 014d014d 014d014d     M.M.M.M.M.M.M.M.
 8022828:	014d014d 014c014d 014c014c 014c014c     M.M.M.L.L.L.L.L.
 8022838:	014c014c 014c014c 014c014c 014c014c     L.L.L.L.L.L.L.L.
 8022848:	014c014c 014c014c 014c014c 014c014c     L.L.L.L.L.L.L.L.
 8022858:	014c014c 014c014c 014c014c 014c014c     L.L.L.L.L.L.L.L.
 8022868:	014c014c 014c014c 014c014c 014c014c     L.L.L.L.L.L.L.L.
 8022878:	014c014c 014c014c 014c014c 014c014c     L.L.L.L.L.L.L.L.
 8022888:	014c014c 014c014c 014c014c 014c014c     L.L.L.L.L.L.L.L.
 8022898:	014b014c 014b014b 014b014b 014b014b     L.K.K.K.K.K.K.K.
 80228a8:	014b014b 014b014b 014b014b 014b014b     K.K.K.K.K.K.K.K.
 80228b8:	014b014b 014b014b 014b014b 014b014b     K.K.K.K.K.K.K.K.
 80228c8:	014b014b 014b014b 014b014b 014b014b     K.K.K.K.K.K.K.K.
 80228d8:	014b014b 014b014b 014b014b 014b014b     K.K.K.K.K.K.K.K.
 80228e8:	014b014b 014b014b 014b014b 014b014b     K.K.K.K.K.K.K.K.
 80228f8:	014b014b 014b014b 014b014b 014a014a     K.K.K.K.K.K.J.J.
 8022908:	014a014a 014a014a 014a014a 014a014a     J.J.J.J.J.J.J.J.
 8022918:	014a014a 014a014a 014a014a 014a014a     J.J.J.J.J.J.J.J.
 8022928:	014a014a 014a014a 014a014a 014a014a     J.J.J.J.J.J.J.J.
 8022938:	014a014a 014a014a 014a014a 014a014a     J.J.J.J.J.J.J.J.
 8022948:	014a014a 014a014a 014a014a 014a014a     J.J.J.J.J.J.J.J.
 8022958:	014a014a 014a014a 014a014a 014a014a     J.J.J.J.J.J.J.J.
 8022968:	014a014a 014a014a 01490149 01490149     J.J.J.J.I.I.I.I.
 8022978:	01490149 01490149 01490149 01490149     I.I.I.I.I.I.I.I.
 8022988:	01490149 01490149 01490149 01490149     I.I.I.I.I.I.I.I.
 8022998:	01490149 01490149 01490149 01490149     I.I.I.I.I.I.I.I.
 80229a8:	01490149 01490149 01490149 01490149     I.I.I.I.I.I.I.I.
 80229b8:	01490149 01490149 01490149 01490149     I.I.I.I.I.I.I.I.
 80229c8:	01490149 01490149 01490149 01490149     I.I.I.I.I.I.I.I.
 80229d8:	01480149 01480148 01480148 01480148     I.H.H.H.H.H.H.H.
 80229e8:	01480148 01480148 01480148 01480148     H.H.H.H.H.H.H.H.
 80229f8:	01480148 01480148 01480148 01480148     H.H.H.H.H.H.H.H.
 8022a08:	01480148 01480148 01480148 01480148     H.H.H.H.H.H.H.H.
 8022a18:	01480148 01480148 01480148 01480148     H.H.H.H.H.H.H.H.
 8022a28:	01480148 01480148 01480148 01480148     H.H.H.H.H.H.H.H.
 8022a38:	01480148 01480148 01480148 01470147     H.H.H.H.H.H.G.G.
 8022a48:	01470147 01470147 01470147 01470147     G.G.G.G.G.G.G.G.
 8022a58:	01470147 01470147 01470147 01470147     G.G.G.G.G.G.G.G.
 8022a68:	01470147 01470147 01470147 01470147     G.G.G.G.G.G.G.G.
 8022a78:	01470147 01470147 01470147 01470147     G.G.G.G.G.G.G.G.
 8022a88:	01470147 01470147 01470147 01470147     G.G.G.G.G.G.G.G.
 8022a98:	01470147 01470147 01470147 01470147     G.G.G.G.G.G.G.G.
 8022aa8:	01470147 01470147 01460146 01460146     G.G.G.G.F.F.F.F.
 8022ab8:	01460146 01460146 01460146 01460146     F.F.F.F.F.F.F.F.
 8022ac8:	01460146 01460146 01460146 01460146     F.F.F.F.F.F.F.F.
 8022ad8:	01460146 01460146 01460146 01460146     F.F.F.F.F.F.F.F.
 8022ae8:	01460146 01460146 01460146 01460146     F.F.F.F.F.F.F.F.
 8022af8:	01460146 01460146 01460146 01460146     F.F.F.F.F.F.F.F.
 8022b08:	01460146 01460146 01460146 01460146     F.F.F.F.F.F.F.F.
 8022b18:	01450146 01450145 01450145 01450145     F.E.E.E.E.E.E.E.
 8022b28:	01450145 01450145 01450145 01450145     E.E.E.E.E.E.E.E.
 8022b38:	01450145 01450145 01450145 01450145     E.E.E.E.E.E.E.E.
 8022b48:	01450145 01450145 01450145 01450145     E.E.E.E.E.E.E.E.
 8022b58:	01450145 01450145 01450145 01450145     E.E.E.E.E.E.E.E.
 8022b68:	01450145 01450145 01450145 01450145     E.E.E.E.E.E.E.E.
 8022b78:	01450145 01450145 01450145 01440144     E.E.E.E.E.E.D.D.
 8022b88:	01440144 01440144 01440144 01440144     D.D.D.D.D.D.D.D.
 8022b98:	01440144 01440144 01440144 01440144     D.D.D.D.D.D.D.D.
 8022ba8:	01440144 01440144 01440144 01440144     D.D.D.D.D.D.D.D.
 8022bb8:	01440144 01440144 01440144 01440144     D.D.D.D.D.D.D.D.
 8022bc8:	01440144 01440144 01440144 01440144     D.D.D.D.D.D.D.D.
 8022bd8:	01440144 01440144 01440144 01440144     D.D.D.D.D.D.D.D.
 8022be8:	01440144 01440144 01430143 01430143     D.D.D.D.C.C.C.C.
 8022bf8:	01430143 01430143 01430143 01430143     C.C.C.C.C.C.C.C.
 8022c08:	01430143 01430143 01430143 01430143     C.C.C.C.C.C.C.C.
 8022c18:	01430143 01430143 01430143 01430143     C.C.C.C.C.C.C.C.
 8022c28:	01430143 01430143 01430143 01430143     C.C.C.C.C.C.C.C.
 8022c38:	01430143 01430143 01430143 01430143     C.C.C.C.C.C.C.C.
 8022c48:	01430143 01430143 01430143 01430143     C.C.C.C.C.C.C.C.
 8022c58:	01420143 01420142 01420142 01420142     C.B.B.B.B.B.B.B.
 8022c68:	01420142 01420142 01420142 01420142     B.B.B.B.B.B.B.B.
 8022c78:	01420142 01420142 01420142 01420142     B.B.B.B.B.B.B.B.
 8022c88:	01420142 01420142 01420142 01420142     B.B.B.B.B.B.B.B.
 8022c98:	01420142 01420142 01420142 01420142     B.B.B.B.B.B.B.B.
 8022ca8:	01420142 01420142 01420142 01420142     B.B.B.B.B.B.B.B.
 8022cb8:	01420142 01420142 01420142 01410141     B.B.B.B.B.B.A.A.
 8022cc8:	01410141 01410141 01410141 01410141     A.A.A.A.A.A.A.A.
 8022cd8:	01410141 01410141 01410141 01410141     A.A.A.A.A.A.A.A.
 8022ce8:	01410141 01410141 01410141 01410141     A.A.A.A.A.A.A.A.
 8022cf8:	01410141 01410141 01410141 01410141     A.A.A.A.A.A.A.A.
 8022d08:	01410141 01410141 01410141 01410141     A.A.A.A.A.A.A.A.
 8022d18:	01410141 01410141 01410141 01410141     A.A.A.A.A.A.A.A.
 8022d28:	01410141 01410141 01400140 01400140     A.A.A.A.@.@.@.@.
 8022d38:	01400140 01400140 01400140 01400140     @.@.@.@.@.@.@.@.
 8022d48:	01400140 01400140 01400140 01400140     @.@.@.@.@.@.@.@.
 8022d58:	01400140 01400140 01400140 01400140     @.@.@.@.@.@.@.@.
 8022d68:	01400140 01400140 01400140 01400140     @.@.@.@.@.@.@.@.
 8022d78:	01400140 01400140 01400140 01400140     @.@.@.@.@.@.@.@.
 8022d88:	01400140 01400140 01400140 01400140     @.@.@.@.@.@.@.@.
 8022d98:	013f0140 013f013f 013f013f 013f013f     @.?.?.?.?.?.?.?.
 8022da8:	013f013f 013f013f 013f013f 013f013f     ?.?.?.?.?.?.?.?.
 8022db8:	013f013f 013f013f 013f013f 013f013f     ?.?.?.?.?.?.?.?.
 8022dc8:	013f013f 013f013f 013f013f 013f013f     ?.?.?.?.?.?.?.?.
 8022dd8:	013f013f 013f013f 013f013f 013f013f     ?.?.?.?.?.?.?.?.
 8022de8:	013f013f 013f013f 013f013f 013f013f     ?.?.?.?.?.?.?.?.
 8022df8:	013f013f 013f013f 013f013f 013e013e     ?.?.?.?.?.?.>.>.
 8022e08:	013e013e 013e013e 013e013e 013e013e     >.>.>.>.>.>.>.>.
 8022e18:	013e013e 013e013e 013e013e 013e013e     >.>.>.>.>.>.>.>.
 8022e28:	013e013e 013e013e 013e013e 013e013e     >.>.>.>.>.>.>.>.
 8022e38:	013e013e 013e013e 013e013e 013e013e     >.>.>.>.>.>.>.>.
 8022e48:	013e013e 013e013e 013e013e 013e013e     >.>.>.>.>.>.>.>.
 8022e58:	013e013e 013e013e 013e013e 013e013e     >.>.>.>.>.>.>.>.
 8022e68:	013e013e 013d013e 013d013d 013d013d     >.>.>.=.=.=.=.=.
 8022e78:	013d013d 013d013d 013d013d 013d013d     =.=.=.=.=.=.=.=.
 8022e88:	013d013d 013d013d 013d013d 013d013d     =.=.=.=.=.=.=.=.
 8022e98:	013d013d 013d013d 013d013d 013d013d     =.=.=.=.=.=.=.=.
 8022ea8:	013d013d 013d013d 013d013d 013d013d     =.=.=.=.=.=.=.=.
 8022eb8:	013d013d 013d013d 013d013d 013d013d     =.=.=.=.=.=.=.=.
 8022ec8:	013d013d 013d013d 013d013d 013d013d     =.=.=.=.=.=.=.=.
 8022ed8:	013c013d 013c013c 013c013c 013c013c     =.<.<.<.<.<.<.<.
 8022ee8:	013c013c 013c013c 013c013c 013c013c     <.<.<.<.<.<.<.<.
 8022ef8:	013c013c 013c013c 013c013c 013c013c     <.<.<.<.<.<.<.<.
 8022f08:	013c013c 013c013c 013c013c 013c013c     <.<.<.<.<.<.<.<.
 8022f18:	013c013c 013c013c 013c013c 013c013c     <.<.<.<.<.<.<.<.
 8022f28:	013c013c 013c013c 013c013c 013c013c     <.<.<.<.<.<.<.<.
 8022f38:	013c013c 013c013c 013c013c 013b013b     <.<.<.<.<.<.;.;.
 8022f48:	013b013b 013b013b 013b013b 013b013b     ;.;.;.;.;.;.;.;.
 8022f58:	013b013b 013b013b 013b013b 013b013b     ;.;.;.;.;.;.;.;.
 8022f68:	013b013b 013b013b 013b013b 013b013b     ;.;.;.;.;.;.;.;.
 8022f78:	013b013b 013b013b 013b013b 013b013b     ;.;.;.;.;.;.;.;.
 8022f88:	013b013b 013b013b 013b013b 013b013b     ;.;.;.;.;.;.;.;.
 8022f98:	013b013b 013b013b 013b013b 013b013b     ;.;.;.;.;.;.;.;.
 8022fa8:	013b013b 013a013b 013a013a 013a013a     ;.;.;.:.:.:.:.:.
 8022fb8:	013a013a 013a013a 013a013a 013a013a     :.:.:.:.:.:.:.:.
 8022fc8:	013a013a 013a013a 013a013a 013a013a     :.:.:.:.:.:.:.:.
 8022fd8:	013a013a 013a013a 013a013a 013a013a     :.:.:.:.:.:.:.:.
 8022fe8:	013a013a 013a013a 013a013a 013a013a     :.:.:.:.:.:.:.:.
 8022ff8:	013a013a 013a013a 013a013a 013a013a     :.:.:.:.:.:.:.:.
 8023008:	013a013a 013a013a 013a013a 013a013a     :.:.:.:.:.:.:.:.
 8023018:	01390139 01390139 01390139 01390139     9.9.9.9.9.9.9.9.
 8023028:	01390139 01390139 01390139 01390139     9.9.9.9.9.9.9.9.
 8023038:	01390139 01390139 01390139 01390139     9.9.9.9.9.9.9.9.
 8023048:	01390139 01390139 01390139 01390139     9.9.9.9.9.9.9.9.
 8023058:	01390139 01390139 01390139 01390139     9.9.9.9.9.9.9.9.
 8023068:	01390139 01390139 01390139 01390139     9.9.9.9.9.9.9.9.
 8023078:	01390139 01390139 01380139 01380138     9.9.9.9.9.8.8.8.
 8023088:	01380138 01380138 01380138 01380138     8.8.8.8.8.8.8.8.
 8023098:	01380138 01380138 01380138 01380138     8.8.8.8.8.8.8.8.
 80230a8:	01380138 01380138 01380138 01380138     8.8.8.8.8.8.8.8.
 80230b8:	01380138 01380138 01380138 01380138     8.8.8.8.8.8.8.8.
 80230c8:	01380138 01380138 01380138 01380138     8.8.8.8.8.8.8.8.
 80230d8:	01380138 01380138 01380138 01380138     8.8.8.8.8.8.8.8.
 80230e8:	01380138 01370138 01370137 01370137     8.8.8.7.7.7.7.7.
 80230f8:	01370137 01370137 01370137 01370137     7.7.7.7.7.7.7.7.
 8023108:	01370137 01370137 01370137 01370137     7.7.7.7.7.7.7.7.
 8023118:	01370137 01370137 01370137 01370137     7.7.7.7.7.7.7.7.
 8023128:	01370137 01370137 01370137 01370137     7.7.7.7.7.7.7.7.
 8023138:	01370137 01370137 01370137 01370137     7.7.7.7.7.7.7.7.
 8023148:	01370137 01370137 01370137 01370137     7.7.7.7.7.7.7.7.
 8023158:	01360136 01360136 01360136 01360136     6.6.6.6.6.6.6.6.
 8023168:	01360136 01360136 01360136 01360136     6.6.6.6.6.6.6.6.
 8023178:	01360136 01360136 01360136 01360136     6.6.6.6.6.6.6.6.
 8023188:	01360136 01360136 01360136 01360136     6.6.6.6.6.6.6.6.
 8023198:	01360136 01360136 01360136 01360136     6.6.6.6.6.6.6.6.
 80231a8:	01360136 01360136 01360136 01360136     6.6.6.6.6.6.6.6.
 80231b8:	01360136 01360136 01350136 01350135     6.6.6.6.6.5.5.5.
 80231c8:	01350135 01350135 01350135 01350135     5.5.5.5.5.5.5.5.
 80231d8:	01350135 01350135 01350135 01350135     5.5.5.5.5.5.5.5.
 80231e8:	01350135 01350135 01350135 01350135     5.5.5.5.5.5.5.5.
 80231f8:	01350135 01350135 01350135 01350135     5.5.5.5.5.5.5.5.
 8023208:	01350135 01350135 01350135 01350135     5.5.5.5.5.5.5.5.
 8023218:	01350135 01350135 01350135 01350135     5.5.5.5.5.5.5.5.
 8023228:	01350135 01340134 01340134 01340134     5.5.4.4.4.4.4.4.
 8023238:	01340134 01340134 01340134 01340134     4.4.4.4.4.4.4.4.
 8023248:	01340134 01340134 01340134 01340134     4.4.4.4.4.4.4.4.
 8023258:	01340134 01340134 01340134 01340134     4.4.4.4.4.4.4.4.
 8023268:	01340134 01340134 01340134 01340134     4.4.4.4.4.4.4.4.
 8023278:	01340134 01340134 01340134 01340134     4.4.4.4.4.4.4.4.
 8023288:	01340134 01340134 01340134 01330134     4.4.4.4.4.4.4.3.
 8023298:	01330133 01330133 01330133 01330133     3.3.3.3.3.3.3.3.
 80232a8:	01330133 01330133 01330133 01330133     3.3.3.3.3.3.3.3.
 80232b8:	01330133 01330133 01330133 01330133     3.3.3.3.3.3.3.3.
 80232c8:	01330133 01330133 01330133 01330133     3.3.3.3.3.3.3.3.
 80232d8:	01330133 01330133 01330133 01330133     3.3.3.3.3.3.3.3.
 80232e8:	01330133 01330133 01330133 01330133     3.3.3.3.3.3.3.3.
 80232f8:	01330133 01330133 01320132 01320132     3.3.3.3.2.2.2.2.
 8023308:	01320132 01320132 01320132 01320132     2.2.2.2.2.2.2.2.
 8023318:	01320132 01320132 01320132 01320132     2.2.2.2.2.2.2.2.
 8023328:	01320132 01320132 01320132 01320132     2.2.2.2.2.2.2.2.
 8023338:	01320132 01320132 01320132 01320132     2.2.2.2.2.2.2.2.
 8023348:	01320132 01320132 01320132 01320132     2.2.2.2.2.2.2.2.
 8023358:	01320132 01320132 01320132 01320132     2.2.2.2.2.2.2.2.
 8023368:	01320132 01310131 01310131 01310131     2.2.1.1.1.1.1.1.
 8023378:	01310131 01310131 01310131 01310131     1.1.1.1.1.1.1.1.
 8023388:	01310131 01310131 01310131 01310131     1.1.1.1.1.1.1.1.
 8023398:	01310131 01310131 01310131 01310131     1.1.1.1.1.1.1.1.
 80233a8:	01310131 01310131 01310131 01310131     1.1.1.1.1.1.1.1.
 80233b8:	01310131 01310131 01310131 01310131     1.1.1.1.1.1.1.1.
 80233c8:	01310131 01310131 01310131 01300131     1.1.1.1.1.1.1.0.
 80233d8:	01300130 01300130 01300130 01300130     0.0.0.0.0.0.0.0.
 80233e8:	01300130 01300130 01300130 01300130     0.0.0.0.0.0.0.0.
 80233f8:	01300130 01300130 01300130 01300130     0.0.0.0.0.0.0.0.
 8023408:	01300130 01300130 01300130 01300130     0.0.0.0.0.0.0.0.
 8023418:	01300130 01300130 01300130 01300130     0.0.0.0.0.0.0.0.
 8023428:	01300130 01300130 01300130 01300130     0.0.0.0.0.0.0.0.
 8023438:	01300130 01300130 012f012f 012f012f     0.0.0.0././././.
 8023448:	012f012f 012f012f 012f012f 012f012f     /./././././././.
 8023458:	012f012f 012f012f 012f012f 012f012f     /./././././././.
 8023468:	012f012f 012f012f 012f012f 012f012f     /./././././././.
 8023478:	012f012f 012f012f 012f012f 012f012f     /./././././././.
 8023488:	012f012f 012f012f 012f012f 012f012f     /./././././././.
 8023498:	012f012f 012f012f 012f012f 012f012f     /./././././././.
 80234a8:	012e012f 012e012e 012e012e 012e012e     /...............
 80234b8:	012e012e 012e012e 012e012e 012e012e     ................
 80234c8:	012e012e 012e012e 012e012e 012e012e     ................
 80234d8:	012e012e 012e012e 012e012e 012e012e     ................
 80234e8:	012e012e 012e012e 012e012e 012e012e     ................
 80234f8:	012e012e 012e012e 012e012e 012e012e     ................
 8023508:	012e012e 012e012e 012e012e 012d012d     ............-.-.
 8023518:	012d012d 012d012d 012d012d 012d012d     -.-.-.-.-.-.-.-.
 8023528:	012d012d 012d012d 012d012d 012d012d     -.-.-.-.-.-.-.-.
 8023538:	012d012d 012d012d 012d012d 012d012d     -.-.-.-.-.-.-.-.
 8023548:	012d012d 012d012d 012d012d 012d012d     -.-.-.-.-.-.-.-.
 8023558:	012d012d 012d012d 012d012d 012d012d     -.-.-.-.-.-.-.-.
 8023568:	012d012d 012d012d 012d012d 012d012d     -.-.-.-.-.-.-.-.
 8023578:	012d012d 012c012d 012c012c 012c012c     -.-.-.,.,.,.,.,.
 8023588:	012c012c 012c012c 012c012c 012c012c     ,.,.,.,.,.,.,.,.
 8023598:	012c012c 012c012c 012c012c 012c012c     ,.,.,.,.,.,.,.,.
 80235a8:	012c012c 012c012c 012c012c 012c012c     ,.,.,.,.,.,.,.,.
 80235b8:	012c012c 012c012c 012c012c 012c012c     ,.,.,.,.,.,.,.,.
 80235c8:	012c012c 012c012c 012c012c 012c012c     ,.,.,.,.,.,.,.,.
 80235d8:	012c012c 012c012c 012c012c 012c012c     ,.,.,.,.,.,.,.,.
 80235e8:	012b012c 012b012b 012b012b 012b012b     ,.+.+.+.+.+.+.+.
 80235f8:	012b012b 012b012b 012b012b 012b012b     +.+.+.+.+.+.+.+.
 8023608:	012b012b 012b012b 012b012b 012b012b     +.+.+.+.+.+.+.+.
 8023618:	012b012b 012b012b 012b012b 012b012b     +.+.+.+.+.+.+.+.
 8023628:	012b012b 012b012b 012b012b 012b012b     +.+.+.+.+.+.+.+.
 8023638:	012b012b 012b012b 012b012b 012b012b     +.+.+.+.+.+.+.+.
 8023648:	012b012b 012b012b 012b012b 012a012a     +.+.+.+.+.+.*.*.
 8023658:	012a012a 012a012a 012a012a 012a012a     *.*.*.*.*.*.*.*.
 8023668:	012a012a 012a012a 012a012a 012a012a     *.*.*.*.*.*.*.*.
 8023678:	012a012a 012a012a 012a012a 012a012a     *.*.*.*.*.*.*.*.
 8023688:	012a012a 012a012a 012a012a 012a012a     *.*.*.*.*.*.*.*.
 8023698:	012a012a 012a012a 012a012a 012a012a     *.*.*.*.*.*.*.*.
 80236a8:	012a012a 012a012a 012a012a 012a012a     *.*.*.*.*.*.*.*.
 80236b8:	012a012a 0129012a 01290129 01290129     *.*.*.).).).).).
 80236c8:	01290129 01290129 01290129 01290129     ).).).).).).).).
 80236d8:	01290129 01290129 01290129 01290129     ).).).).).).).).
 80236e8:	01290129 01290129 01290129 01290129     ).).).).).).).).
 80236f8:	01290129 01290129 01290129 01290129     ).).).).).).).).
 8023708:	01290129 01290129 01290129 01290129     ).).).).).).).).
 8023718:	01290129 01290129 01290129 01290129     ).).).).).).).).
 8023728:	01280128 01280128 01280128 01280128     (.(.(.(.(.(.(.(.
 8023738:	01280128 01280128 01280128 01280128     (.(.(.(.(.(.(.(.
 8023748:	01280128 01280128 01280128 01280128     (.(.(.(.(.(.(.(.
 8023758:	01280128 01280128 01280128 01280128     (.(.(.(.(.(.(.(.
 8023768:	01280128 01280128 01280128 01280128     (.(.(.(.(.(.(.(.
 8023778:	01280128 01280128 01280128 01280128     (.(.(.(.(.(.(.(.
 8023788:	01280128 01280128 01270128 01270127     (.(.(.(.(.'.'.'.
 8023798:	01270127 01270127 01270127 01270127     '.'.'.'.'.'.'.'.
 80237a8:	01270127 01270127 01270127 01270127     '.'.'.'.'.'.'.'.
 80237b8:	01270127 01270127 01270127 01270127     '.'.'.'.'.'.'.'.
 80237c8:	01270127 01270127 01270127 01270127     '.'.'.'.'.'.'.'.
 80237d8:	01270127 01270127 01270127 01270127     '.'.'.'.'.'.'.'.
 80237e8:	01270127 01270127 01270127 01270127     '.'.'.'.'.'.'.'.
 80237f8:	01270127 01260126 01260126 01260126     '.'.&.&.&.&.&.&.
 8023808:	01260126 01260126 01260126 01260126     &.&.&.&.&.&.&.&.
 8023818:	01260126 01260126 01260126 01260126     &.&.&.&.&.&.&.&.
 8023828:	01260126 01260126 01260126 01260126     &.&.&.&.&.&.&.&.
 8023838:	01260126 01260126 01260126 01260126     &.&.&.&.&.&.&.&.
 8023848:	01260126 01260126 01260126 01260126     &.&.&.&.&.&.&.&.
 8023858:	01260126 01260126 01260126 01250126     &.&.&.&.&.&.&.%.
 8023868:	01250125 01250125 01250125 01250125     %.%.%.%.%.%.%.%.
 8023878:	01250125 01250125 01250125 01250125     %.%.%.%.%.%.%.%.
 8023888:	01250125 01250125 01250125 01250125     %.%.%.%.%.%.%.%.
 8023898:	01250125 01250125 01250125 01250125     %.%.%.%.%.%.%.%.
 80238a8:	01250125 01250125 01250125 01250125     %.%.%.%.%.%.%.%.
 80238b8:	01250125 01250125 01250125 01250125     %.%.%.%.%.%.%.%.
 80238c8:	01250125 01250125 01240125 01240124     %.%.%.%.%.$.$.$.
 80238d8:	01240124 01240124 01240124 01240124     $.$.$.$.$.$.$.$.
 80238e8:	01240124 01240124 01240124 01240124     $.$.$.$.$.$.$.$.
 80238f8:	01240124 01240124 01240124 01240124     $.$.$.$.$.$.$.$.
 8023908:	01240124 01240124 01240124 01240124     $.$.$.$.$.$.$.$.
 8023918:	01240124 01240124 01240124 01240124     $.$.$.$.$.$.$.$.
 8023928:	01240124 01240124 01240124 01240124     $.$.$.$.$.$.$.$.
 8023938:	01240124 01230123 01230123 01230123     $.$.#.#.#.#.#.#.
 8023948:	01230123 01230123 01230123 01230123     #.#.#.#.#.#.#.#.
 8023958:	01230123 01230123 01230123 01230123     #.#.#.#.#.#.#.#.
 8023968:	01230123 01230123 01230123 01230123     #.#.#.#.#.#.#.#.
 8023978:	01230123 01230123 01230123 01230123     #.#.#.#.#.#.#.#.
 8023988:	01230123 01230123 01230123 01230123     #.#.#.#.#.#.#.#.
 8023998:	01230123 01230123 01230123 01220123     #.#.#.#.#.#.#.".
 80239a8:	01220122 01220122 01220122 01220122     ".".".".".".".".
 80239b8:	01220122 01220122 01220122 01220122     ".".".".".".".".
 80239c8:	01220122 01220122 01220122 01220122     ".".".".".".".".
 80239d8:	01220122 01220122 01220122 01220122     ".".".".".".".".
 80239e8:	01220122 01220122 01220122 01220122     ".".".".".".".".
 80239f8:	01220122 01220122 01220122 01220122     ".".".".".".".".
 8023a08:	01220122 01220122 01210121 01210121     ".".".".!.!.!.!.
 8023a18:	01210121 01210121 01210121 01210121     !.!.!.!.!.!.!.!.
 8023a28:	01210121 01210121 01210121 01210121     !.!.!.!.!.!.!.!.
 8023a38:	01210121 01210121 01210121 01210121     !.!.!.!.!.!.!.!.
 8023a48:	01210121 01210121 01210121 01210121     !.!.!.!.!.!.!.!.
 8023a58:	01210121 01210121 01210121 01210121     !.!.!.!.!.!.!.!.
 8023a68:	01210121 01210121 01210121 01210121     !.!.!.!.!.!.!.!.
 8023a78:	01200121 01200120 01200120 01200120     !. . . . . . . .
 8023a88:	01200120 01200120 01200120 01200120      . . . . . . . .
 8023a98:	01200120 01200120 01200120 01200120      . . . . . . . .
 8023aa8:	01200120 01200120 01200120 01200120      . . . . . . . .
 8023ab8:	01200120 01200120 01200120 01200120      . . . . . . . .
 8023ac8:	01200120 01200120 01200120 01200120      . . . . . . . .
 8023ad8:	01200120 01200120 01200120 011f011f      . . . . . .....
 8023ae8:	011f011f 011f011f 011f011f 011f011f     ................
 8023af8:	011f011f 011f011f 011f011f 011f011f     ................
 8023b08:	011f011f 011f011f 011f011f 011f011f     ................
 8023b18:	011f011f 011f011f 011f011f 011f011f     ................
 8023b28:	011f011f 011f011f 011f011f 011f011f     ................
 8023b38:	011f011f 011f011f 011f011f 011f011f     ................
 8023b48:	011f011f 011f011f 011e011e 011e011e     ................
 8023b58:	011e011e 011e011e 011e011e 011e011e     ................
 8023b68:	011e011e 011e011e 011e011e 011e011e     ................
 8023b78:	011e011e 011e011e 011e011e 011e011e     ................
 8023b88:	011e011e 011e011e 011e011e 011e011e     ................
 8023b98:	011e011e 011e011e 011e011e 011e011e     ................
 8023ba8:	011e011e 011e011e 011e011e 011e011e     ................
 8023bb8:	011d011e 011d011d 011d011d 011d011d     ................
 8023bc8:	011d011d 011d011d 011d011d 011d011d     ................
 8023bd8:	011d011d 011d011d 011d011d 011d011d     ................
 8023be8:	011d011d 011d011d 011d011d 011d011d     ................
 8023bf8:	011d011d 011d011d 011d011d 011d011d     ................
 8023c08:	011d011d 011d011d 011d011d 011d011d     ................
 8023c18:	011d011d 011d011d 011d011d 011c011c     ................
 8023c28:	011c011c 011c011c 011c011c 011c011c     ................
 8023c38:	011c011c 011c011c 011c011c 011c011c     ................
 8023c48:	011c011c 011c011c 011c011c 011c011c     ................
 8023c58:	011c011c 011c011c 011c011c 011c011c     ................
 8023c68:	011c011c 011c011c 011c011c 011c011c     ................
 8023c78:	011c011c 011c011c 011c011c 011c011c     ................
 8023c88:	011c011c 011b011c 011b011b 011b011b     ................
 8023c98:	011b011b 011b011b 011b011b 011b011b     ................
 8023ca8:	011b011b 011b011b 011b011b 011b011b     ................
 8023cb8:	011b011b 011b011b 011b011b 011b011b     ................
 8023cc8:	011b011b 011b011b 011b011b 011b011b     ................
 8023cd8:	011b011b 011b011b 011b011b 011b011b     ................
 8023ce8:	011b011b 011b011b 011b011b 011b011b     ................
 8023cf8:	011a011a 011a011a 011a011a 011a011a     ................
 8023d08:	011a011a 011a011a 011a011a 011a011a     ................
 8023d18:	011a011a 011a011a 011a011a 011a011a     ................
 8023d28:	011a011a 011a011a 011a011a 011a011a     ................
 8023d38:	011a011a 011a011a 011a011a 011a011a     ................
 8023d48:	011a011a 011a011a 011a011a 011a011a     ................
 8023d58:	011a011a 011a011a 011a011a 01190119     ................
 8023d68:	01190119 01190119 01190119 01190119     ................
 8023d78:	01190119 01190119 01190119 01190119     ................
 8023d88:	01190119 01190119 01190119 01190119     ................
 8023d98:	01190119 01190119 01190119 01190119     ................
 8023da8:	01190119 01190119 01190119 01190119     ................
 8023db8:	01190119 01190119 01190119 01190119     ................
 8023dc8:	01190119 01180119 01180118 01180118     ................
 8023dd8:	01180118 01180118 01180118 01180118     ................
 8023de8:	01180118 01180118 01180118 01180118     ................
 8023df8:	01180118 01180118 01180118 01180118     ................
 8023e08:	01180118 01180118 01180118 01180118     ................
 8023e18:	01180118 01180118 01180118 01180118     ................
 8023e28:	01180118 01180118 01180118 01180118     ................
 8023e38:	01170117 01170117 01170117 01170117     ................
 8023e48:	01170117 01170117 01170117 01170117     ................
 8023e58:	01170117 01170117 01170117 01170117     ................
 8023e68:	01170117 01170117 01170117 01170117     ................
 8023e78:	01170117 01170117 01170117 01170117     ................
 8023e88:	01170117 01170117 01170117 01170117     ................
 8023e98:	01170117 01170117 01160117 01160116     ................
 8023ea8:	01160116 01160116 01160116 01160116     ................
 8023eb8:	01160116 01160116 01160116 01160116     ................
 8023ec8:	01160116 01160116 01160116 01160116     ................
 8023ed8:	01160116 01160116 01160116 01160116     ................
 8023ee8:	01160116 01160116 01160116 01160116     ................
 8023ef8:	01160116 01160116 01160116 01160116     ................
 8023f08:	01160116 01150116 01150115 01150115     ................
 8023f18:	01150115 01150115 01150115 01150115     ................
 8023f28:	01150115 01150115 01150115 01150115     ................
 8023f38:	01150115 01150115 01150115 01150115     ................
 8023f48:	01150115 01150115 01150115 01150115     ................
 8023f58:	01150115 01150115 01150115 01150115     ................
 8023f68:	01150115 01150115 01150115 01150115     ................
 8023f78:	01140114 01140114 01140114 01140114     ................
 8023f88:	01140114 01140114 01140114 01140114     ................
 8023f98:	01140114 01140114 01140114 01140114     ................
 8023fa8:	01140114 01140114 01140114 01140114     ................
 8023fb8:	01140114 01140114 01140114 01140114     ................
 8023fc8:	01140114 01140114 01140114 01140114     ................
 8023fd8:	01140114 01140114 01130114 01130113     ................
 8023fe8:	01130113 01130113 01130113 01130113     ................
 8023ff8:	01130113 01130113 01130113 01130113     ................
 8024008:	01130113 01130113 01130113 01130113     ................
 8024018:	01130113 01130113 01130113 01130113     ................
 8024028:	01130113 01130113 01130113 01130113     ................
 8024038:	01130113 01130113 01130113 01130113     ................
 8024048:	01130113 01120113 01120112 01120112     ................
 8024058:	01120112 01120112 01120112 01120112     ................
 8024068:	01120112 01120112 01120112 01120112     ................
 8024078:	01120112 01120112 01120112 01120112     ................
 8024088:	01120112 01120112 01120112 01120112     ................
 8024098:	01120112 01120112 01120112 01120112     ................
 80240a8:	01120112 01120112 01120112 01120112     ................
 80240b8:	01110111 01110111 01110111 01110111     ................
 80240c8:	01110111 01110111 01110111 01110111     ................
 80240d8:	01110111 01110111 01110111 01110111     ................
 80240e8:	01110111 01110111 01110111 01110111     ................
 80240f8:	01110111 01110111 01110111 01110111     ................
 8024108:	01110111 01110111 01110111 01110111     ................
 8024118:	01110111 01110111 01100111 01100110     ................
 8024128:	01100110 01100110 01100110 01100110     ................
 8024138:	01100110 01100110 01100110 01100110     ................
 8024148:	01100110 01100110 01100110 01100110     ................
 8024158:	01100110 01100110 01100110 01100110     ................
 8024168:	01100110 01100110 01100110 01100110     ................
 8024178:	01100110 01100110 01100110 01100110     ................
 8024188:	01100110 010f0110 010f010f 010f010f     ................
 8024198:	010f010f 010f010f 010f010f 010f010f     ................
 80241a8:	010f010f 010f010f 010f010f 010f010f     ................
 80241b8:	010f010f 010f010f 010f010f 010f010f     ................
 80241c8:	010f010f 010f010f 010f010f 010f010f     ................
 80241d8:	010f010f 010f010f 010f010f 010f010f     ................
 80241e8:	010f010f 010f010f 010f010f 010f010f     ................
 80241f8:	010e010e 010e010e 010e010e 010e010e     ................
 8024208:	010e010e 010e010e 010e010e 010e010e     ................
 8024218:	010e010e 010e010e 010e010e 010e010e     ................
 8024228:	010e010e 010e010e 010e010e 010e010e     ................
 8024238:	010e010e 010e010e 010e010e 010e010e     ................
 8024248:	010e010e 010e010e 010e010e 010e010e     ................
 8024258:	010e010e 010e010e 010d010e 010d010d     ................
 8024268:	010d010d 010d010d 010d010d 010d010d     ................
 8024278:	010d010d 010d010d 010d010d 010d010d     ................
 8024288:	010d010d 010d010d 010d010d 010d010d     ................
 8024298:	010d010d 010d010d 010d010d 010d010d     ................
 80242a8:	010d010d 010d010d 010d010d 010d010d     ................
 80242b8:	010d010d 010d010d 010d010d 010d010d     ................
 80242c8:	010d010d 010c010d 010c010c 010c010c     ................
 80242d8:	010c010c 010c010c 010c010c 010c010c     ................
 80242e8:	010c010c 010c010c 010c010c 010c010c     ................
 80242f8:	010c010c 010c010c 010c010c 010c010c     ................
 8024308:	010c010c 010c010c 010c010c 010c010c     ................
 8024318:	010c010c 010c010c 010c010c 010c010c     ................
 8024328:	010c010c 010c010c 010c010c 010c010c     ................
 8024338:	010b010b 010b010b 010b010b 010b010b     ................
 8024348:	010b010b 010b010b 010b010b 010b010b     ................
 8024358:	010b010b 010b010b 010b010b 010b010b     ................
 8024368:	010b010b 010b010b 010b010b 010b010b     ................
 8024378:	010b010b 010b010b 010b010b 010b010b     ................
 8024388:	010b010b 010b010b 010b010b 010b010b     ................
 8024398:	010b010b 010b010b 010b010b 010a010a     ................
 80243a8:	010a010a 010a010a 010a010a 010a010a     ................
 80243b8:	010a010a 010a010a 010a010a 010a010a     ................
 80243c8:	010a010a 010a010a 010a010a 010a010a     ................
 80243d8:	010a010a 010a010a 010a010a 010a010a     ................
 80243e8:	010a010a 010a010a 010a010a 010a010a     ................
 80243f8:	010a010a 010a010a 010a010a 010a010a     ................
 8024408:	010a010a 0109010a 01090109 01090109     ................
 8024418:	01090109 01090109 01090109 01090109     ................
 8024428:	01090109 01090109 01090109 01090109     ................
 8024438:	01090109 01090109 01090109 01090109     ................
 8024448:	01090109 01090109 01090109 01090109     ................
 8024458:	01090109 01090109 01090109 01090109     ................
 8024468:	01090109 01090109 01090109 01090109     ................
 8024478:	01080109 01080108 01080108 01080108     ................
 8024488:	01080108 01080108 01080108 01080108     ................
 8024498:	01080108 01080108 01080108 01080108     ................
 80244a8:	01080108 01080108 01080108 01080108     ................
 80244b8:	01080108 01080108 01080108 01080108     ................
 80244c8:	01080108 01080108 01080108 01080108     ................
 80244d8:	01080108 01080108 01080108 01070107     ................
 80244e8:	01070107 01070107 01070107 01070107     ................
 80244f8:	01070107 01070107 01070107 01070107     ................
 8024508:	01070107 01070107 01070107 01070107     ................
 8024518:	01070107 01070107 01070107 01070107     ................
 8024528:	01070107 01070107 01070107 01070107     ................
 8024538:	01070107 01070107 01070107 01070107     ................
 8024548:	01070107 01070107 01060106 01060106     ................
 8024558:	01060106 01060106 01060106 01060106     ................
 8024568:	01060106 01060106 01060106 01060106     ................
 8024578:	01060106 01060106 01060106 01060106     ................
 8024588:	01060106 01060106 01060106 01060106     ................
 8024598:	01060106 01060106 01060106 01060106     ................
 80245a8:	01060106 01060106 01060106 01060106     ................
 80245b8:	01050106 01050105 01050105 01050105     ................
 80245c8:	01050105 01050105 01050105 01050105     ................
 80245d8:	01050105 01050105 01050105 01050105     ................
 80245e8:	01050105 01050105 01050105 01050105     ................
 80245f8:	01050105 01050105 01050105 01050105     ................
 8024608:	01050105 01050105 01050105 01050105     ................
 8024618:	01050105 01050105 01050105 01040105     ................
 8024628:	01040104 01040104 01040104 01040104     ................
 8024638:	01040104 01040104 01040104 01040104     ................
 8024648:	01040104 01040104 01040104 01040104     ................
 8024658:	01040104 01040104 01040104 01040104     ................
 8024668:	01040104 01040104 01040104 01040104     ................
 8024678:	01040104 01040104 01040104 01040104     ................
 8024688:	01040104 01040104 01030103 01030103     ................
 8024698:	01030103 01030103 01030103 01030103     ................
 80246a8:	01030103 01030103 01030103 01030103     ................
 80246b8:	01030103 01030103 01030103 01030103     ................
 80246c8:	01030103 01030103 01030103 01030103     ................
 80246d8:	01030103 01030103 01030103 01030103     ................
 80246e8:	01030103 01030103 01030103 01030103     ................
 80246f8:	01030103 01020102 01020102 01020102     ................
 8024708:	01020102 01020102 01020102 01020102     ................
 8024718:	01020102 01020102 01020102 01020102     ................
 8024728:	01020102 01020102 01020102 01020102     ................
 8024738:	01020102 01020102 01020102 01020102     ................
 8024748:	01020102 01020102 01020102 01020102     ................
 8024758:	01020102 01020102 01020102 01020102     ................
 8024768:	01010101 01010101 01010101 01010101     ................
 8024778:	01010101 01010101 01010101 01010101     ................
 8024788:	01010101 01010101 01010101 01010101     ................
 8024798:	01010101 01010101 01010101 01010101     ................
 80247a8:	01010101 01010101 01010101 01010101     ................
 80247b8:	01010101 01010101 01010101 01010101     ................
 80247c8:	01010101 01010101 01000101 01000100     ................
 80247d8:	01000100 01000100 01000100 01000100     ................
 80247e8:	01000100 01000100 01000100 01000100     ................
 80247f8:	01000100 01000100 01000100 01000100     ................
 8024808:	01000100 01000100 01000100 01000100     ................
 8024818:	01000100 01000100 01000100 01000100     ................
 8024828:	01000100 01000100 01000100 01000100     ................
 8024838:	01000100 00ff0100 00ff00ff 00ff00ff     ................
 8024848:	00ff00ff 00ff00ff 00ff00ff 00ff00ff     ................
 8024858:	00ff00ff 00ff00ff 00ff00ff 00ff00ff     ................
 8024868:	00ff00ff 00ff00ff 00ff00ff 00ff00ff     ................
 8024878:	00ff00ff 00ff00ff 00ff00ff 00ff00ff     ................
 8024888:	00ff00ff 00ff00ff 00ff00ff 00ff00ff     ................
 8024898:	00ff00ff 00ff00ff 00ff00ff 00ff00ff     ................
 80248a8:	00fe00ff 00fe00fe 00fe00fe 00fe00fe     ................
 80248b8:	00fe00fe 00fe00fe 00fe00fe 00fe00fe     ................
 80248c8:	00fe00fe 00fe00fe 00fe00fe 00fe00fe     ................
 80248d8:	00fe00fe 00fe00fe 00fe00fe 00fe00fe     ................
 80248e8:	00fe00fe 00fe00fe 00fe00fe 00fe00fe     ................
 80248f8:	00fe00fe 00fe00fe 00fe00fe 00fe00fe     ................
 8024908:	00fe00fe 00fe00fe 00fe00fe 00fd00fe     ................
 8024918:	00fd00fd 00fd00fd 00fd00fd 00fd00fd     ................
 8024928:	00fd00fd 00fd00fd 00fd00fd 00fd00fd     ................
 8024938:	00fd00fd 00fd00fd 00fd00fd 00fd00fd     ................
 8024948:	00fd00fd 00fd00fd 00fd00fd 00fd00fd     ................
 8024958:	00fd00fd 00fd00fd 00fd00fd 00fd00fd     ................
 8024968:	00fd00fd 00fd00fd 00fd00fd 00fd00fd     ................
 8024978:	00fd00fd 00fd00fd 00fc00fc 00fc00fc     ................
 8024988:	00fc00fc 00fc00fc 00fc00fc 00fc00fc     ................
 8024998:	00fc00fc 00fc00fc 00fc00fc 00fc00fc     ................
 80249a8:	00fc00fc 00fc00fc 00fc00fc 00fc00fc     ................
 80249b8:	00fc00fc 00fc00fc 00fc00fc 00fc00fc     ................
 80249c8:	00fc00fc 00fc00fc 00fc00fc 00fc00fc     ................
 80249d8:	00fc00fc 00fc00fc 00fc00fc 00fc00fc     ................
 80249e8:	00fc00fc 00fb00fb 00fb00fb 00fb00fb     ................
 80249f8:	00fb00fb 00fb00fb 00fb00fb 00fb00fb     ................
 8024a08:	00fb00fb 00fb00fb 00fb00fb 00fb00fb     ................
 8024a18:	00fb00fb 00fb00fb 00fb00fb 00fb00fb     ................
 8024a28:	00fb00fb 00fb00fb 00fb00fb 00fb00fb     ................
 8024a38:	00fb00fb 00fb00fb 00fb00fb 00fb00fb     ................
 8024a48:	00fb00fb 00fb00fb 00fb00fb 00fb00fb     ................
 8024a58:	00fa00fa 00fa00fa 00fa00fa 00fa00fa     ................
 8024a68:	00fa00fa 00fa00fa 00fa00fa 00fa00fa     ................
 8024a78:	00fa00fa 00fa00fa 00fa00fa 00fa00fa     ................
 8024a88:	00fa00fa 00fa00fa 00fa00fa 00fa00fa     ................
 8024a98:	00fa00fa 00fa00fa 00fa00fa 00fa00fa     ................
 8024aa8:	00fa00fa 00fa00fa 00fa00fa 00fa00fa     ................
 8024ab8:	00fa00fa 00fa00fa 00fa00fa 00f900f9     ................
 8024ac8:	00f900f9 00f900f9 00f900f9 00f900f9     ................
 8024ad8:	00f900f9 00f900f9 00f900f9 00f900f9     ................
 8024ae8:	00f900f9 00f900f9 00f900f9 00f900f9     ................
 8024af8:	00f900f9 00f900f9 00f900f9 00f900f9     ................
 8024b08:	00f900f9 00f900f9 00f900f9 00f900f9     ................
 8024b18:	00f900f9 00f900f9 00f900f9 00f900f9     ................
 8024b28:	00f900f9 00f900f9 00f800f8 00f800f8     ................
 8024b38:	00f800f8 00f800f8 00f800f8 00f800f8     ................
 8024b48:	00f800f8 00f800f8 00f800f8 00f800f8     ................
 8024b58:	00f800f8 00f800f8 00f800f8 00f800f8     ................
 8024b68:	00f800f8 00f800f8 00f800f8 00f800f8     ................
 8024b78:	00f800f8 00f800f8 00f800f8 00f800f8     ................
 8024b88:	00f800f8 00f800f8 00f800f8 00f800f8     ................
 8024b98:	00f800f8 00f700f7 00f700f7 00f700f7     ................
 8024ba8:	00f700f7 00f700f7 00f700f7 00f700f7     ................
 8024bb8:	00f700f7 00f700f7 00f700f7 00f700f7     ................
 8024bc8:	00f700f7 00f700f7 00f700f7 00f700f7     ................
 8024bd8:	00f700f7 00f700f7 00f700f7 00f700f7     ................
 8024be8:	00f700f7 00f700f7 00f700f7 00f700f7     ................
 8024bf8:	00f700f7 00f700f7 00f700f7 00f700f7     ................
 8024c08:	00f600f6 00f600f6 00f600f6 00f600f6     ................
 8024c18:	00f600f6 00f600f6 00f600f6 00f600f6     ................
 8024c28:	00f600f6 00f600f6 00f600f6 00f600f6     ................
 8024c38:	00f600f6 00f600f6 00f600f6 00f600f6     ................
 8024c48:	00f600f6 00f600f6 00f600f6 00f600f6     ................
 8024c58:	00f600f6 00f600f6 00f600f6 00f600f6     ................
 8024c68:	00f600f6 00f600f6 00f600f6 00f500f5     ................
 8024c78:	00f500f5 00f500f5 00f500f5 00f500f5     ................
 8024c88:	00f500f5 00f500f5 00f500f5 00f500f5     ................
 8024c98:	00f500f5 00f500f5 00f500f5 00f500f5     ................
 8024ca8:	00f500f5 00f500f5 00f500f5 00f500f5     ................
 8024cb8:	00f500f5 00f500f5 00f500f5 00f500f5     ................
 8024cc8:	00f500f5 00f500f5 00f500f5 00f500f5     ................
 8024cd8:	00f500f5 00f500f5 00f400f4 00f400f4     ................
 8024ce8:	00f400f4 00f400f4 00f400f4 00f400f4     ................
 8024cf8:	00f400f4 00f400f4 00f400f4 00f400f4     ................
 8024d08:	00f400f4 00f400f4 00f400f4 00f400f4     ................
 8024d18:	00f400f4 00f400f4 00f400f4 00f400f4     ................
 8024d28:	00f400f4 00f400f4 00f400f4 00f400f4     ................
 8024d38:	00f400f4 00f400f4 00f400f4 00f400f4     ................
 8024d48:	00f400f4 00f300f3 00f300f3 00f300f3     ................
 8024d58:	00f300f3 00f300f3 00f300f3 00f300f3     ................
 8024d68:	00f300f3 00f300f3 00f300f3 00f300f3     ................
 8024d78:	00f300f3 00f300f3 00f300f3 00f300f3     ................
 8024d88:	00f300f3 00f300f3 00f300f3 00f300f3     ................
 8024d98:	00f300f3 00f300f3 00f300f3 00f300f3     ................
 8024da8:	00f300f3 00f300f3 00f300f3 00f300f3     ................
 8024db8:	00f200f2 00f200f2 00f200f2 00f200f2     ................
 8024dc8:	00f200f2 00f200f2 00f200f2 00f200f2     ................
 8024dd8:	00f200f2 00f200f2 00f200f2 00f200f2     ................
 8024de8:	00f200f2 00f200f2 00f200f2 00f200f2     ................
 8024df8:	00f200f2 00f200f2 00f200f2 00f200f2     ................
 8024e08:	00f200f2 00f200f2 00f200f2 00f200f2     ................
 8024e18:	00f200f2 00f200f2 00f200f2 00f100f1     ................
 8024e28:	00f100f1 00f100f1 00f100f1 00f100f1     ................
 8024e38:	00f100f1 00f100f1 00f100f1 00f100f1     ................
 8024e48:	00f100f1 00f100f1 00f100f1 00f100f1     ................
 8024e58:	00f100f1 00f100f1 00f100f1 00f100f1     ................
 8024e68:	00f100f1 00f100f1 00f100f1 00f100f1     ................
 8024e78:	00f100f1 00f100f1 00f100f1 00f100f1     ................
 8024e88:	00f100f1 00f100f1 00f000f0 00f000f0     ................
 8024e98:	00f000f0 00f000f0 00f000f0 00f000f0     ................
 8024ea8:	00f000f0 00f000f0 00f000f0 00f000f0     ................
 8024eb8:	00f000f0 00f000f0 00f000f0 00f000f0     ................
 8024ec8:	00f000f0 00f000f0 00f000f0 00f000f0     ................
 8024ed8:	00f000f0 00f000f0 00f000f0 00f000f0     ................
 8024ee8:	00f000f0 00f000f0 00f000f0 00f000f0     ................
 8024ef8:	00f000f0 00ef00f0 00ef00ef 00ef00ef     ................
 8024f08:	00ef00ef 00ef00ef 00ef00ef 00ef00ef     ................
 8024f18:	00ef00ef 00ef00ef 00ef00ef 00ef00ef     ................
 8024f28:	00ef00ef 00ef00ef 00ef00ef 00ef00ef     ................
 8024f38:	00ef00ef 00ef00ef 00ef00ef 00ef00ef     ................
 8024f48:	00ef00ef 00ef00ef 00ef00ef 00ef00ef     ................
 8024f58:	00ef00ef 00ef00ef 00ef00ef 00ef00ef     ................
 8024f68:	00ee00ef 00ee00ee 00ee00ee 00ee00ee     ................
 8024f78:	00ee00ee 00ee00ee 00ee00ee 00ee00ee     ................
 8024f88:	00ee00ee 00ee00ee 00ee00ee 00ee00ee     ................
 8024f98:	00ee00ee 00ee00ee 00ee00ee 00ee00ee     ................
 8024fa8:	00ee00ee 00ee00ee 00ee00ee 00ee00ee     ................
 8024fb8:	00ee00ee 00ee00ee 00ee00ee 00ee00ee     ................
 8024fc8:	00ee00ee 00ee00ee 00ee00ee 00ed00ee     ................
 8024fd8:	00ed00ed 00ed00ed 00ed00ed 00ed00ed     ................
 8024fe8:	00ed00ed 00ed00ed 00ed00ed 00ed00ed     ................
 8024ff8:	00ed00ed 00ed00ed 00ed00ed 00ed00ed     ................
 8025008:	00ed00ed 00ed00ed 00ed00ed 00ed00ed     ................
 8025018:	00ed00ed 00ed00ed 00ed00ed 00ed00ed     ................
 8025028:	00ed00ed 00ed00ed 00ed00ed 00ed00ed     ................
 8025038:	00ed00ed 00ed00ed 00ed00ed 00ec00ec     ................
 8025048:	00ec00ec 00ec00ec 00ec00ec 00ec00ec     ................
 8025058:	00ec00ec 00ec00ec 00ec00ec 00ec00ec     ................
 8025068:	00ec00ec 00ec00ec 00ec00ec 00ec00ec     ................
 8025078:	00ec00ec 00ec00ec 00ec00ec 00ec00ec     ................
 8025088:	00ec00ec 00ec00ec 00ec00ec 00ec00ec     ................
 8025098:	00ec00ec 00ec00ec 00ec00ec 00ec00ec     ................
 80250a8:	00ec00ec 00ec00ec 00eb00eb 00eb00eb     ................
 80250b8:	00eb00eb 00eb00eb 00eb00eb 00eb00eb     ................
 80250c8:	00eb00eb 00eb00eb 00eb00eb 00eb00eb     ................
 80250d8:	00eb00eb 00eb00eb 00eb00eb 00eb00eb     ................
 80250e8:	00eb00eb 00eb00eb 00eb00eb 00eb00eb     ................
 80250f8:	00eb00eb 00eb00eb 00eb00eb 00eb00eb     ................
 8025108:	00eb00eb 00eb00eb 00eb00eb 00eb00eb     ................
 8025118:	00eb00eb 00ea00ea 00ea00ea 00ea00ea     ................
 8025128:	00ea00ea 00ea00ea 00ea00ea 00ea00ea     ................
 8025138:	00ea00ea 00ea00ea 00ea00ea 00ea00ea     ................
 8025148:	00ea00ea 00ea00ea 00ea00ea 00ea00ea     ................
 8025158:	00ea00ea 00ea00ea 00ea00ea 00ea00ea     ................
 8025168:	00ea00ea 00ea00ea 00ea00ea 00ea00ea     ................
 8025178:	00ea00ea 00ea00ea 00ea00ea 00ea00ea     ................
 8025188:	00e900ea 00e900e9 00e900e9 00e900e9     ................
 8025198:	00e900e9 00e900e9 00e900e9 00e900e9     ................
 80251a8:	00e900e9 00e900e9 00e900e9 00e900e9     ................
 80251b8:	00e900e9 00e900e9 00e900e9 00e900e9     ................
 80251c8:	00e900e9 00e900e9 00e900e9 00e900e9     ................
 80251d8:	00e900e9 00e900e9 00e900e9 00e900e9     ................
 80251e8:	00e900e9 00e900e9 00e900e9 00e800e9     ................
 80251f8:	00e800e8 00e800e8 00e800e8 00e800e8     ................
 8025208:	00e800e8 00e800e8 00e800e8 00e800e8     ................
 8025218:	00e800e8 00e800e8 00e800e8 00e800e8     ................
 8025228:	00e800e8 00e800e8 00e800e8 00e800e8     ................
 8025238:	00e800e8 00e800e8 00e800e8 00e800e8     ................
 8025248:	00e800e8 00e800e8 00e800e8 00e800e8     ................
 8025258:	00e800e8 00e800e8 00e800e8 00e700e7     ................
 8025268:	00e700e7 00e700e7 00e700e7 00e700e7     ................
 8025278:	00e700e7 00e700e7 00e700e7 00e700e7     ................
 8025288:	00e700e7 00e700e7 00e700e7 00e700e7     ................
 8025298:	00e700e7 00e700e7 00e700e7 00e700e7     ................
 80252a8:	00e700e7 00e700e7 00e700e7 00e700e7     ................
 80252b8:	00e700e7 00e700e7 00e700e7 00e700e7     ................
 80252c8:	00e700e7 00e700e7 00e600e6 00e600e6     ................
 80252d8:	00e600e6 00e600e6 00e600e6 00e600e6     ................
 80252e8:	00e600e6 00e600e6 00e600e6 00e600e6     ................
 80252f8:	00e600e6 00e600e6 00e600e6 00e600e6     ................
 8025308:	00e600e6 00e600e6 00e600e6 00e600e6     ................
 8025318:	00e600e6 00e600e6 00e600e6 00e600e6     ................
 8025328:	00e600e6 00e600e6 00e600e6 00e600e6     ................
 8025338:	00e600e6 00e500e6 00e500e5 00e500e5     ................
 8025348:	00e500e5 00e500e5 00e500e5 00e500e5     ................
 8025358:	00e500e5 00e500e5 00e500e5 00e500e5     ................
 8025368:	00e500e5 00e500e5 00e500e5 00e500e5     ................
 8025378:	00e500e5 00e500e5 00e500e5 00e500e5     ................
 8025388:	00e500e5 00e500e5 00e500e5 00e500e5     ................
 8025398:	00e500e5 00e500e5 00e500e5 00e500e5     ................
 80253a8:	00e500e5 00e400e4 00e400e4 00e400e4     ................
 80253b8:	00e400e4 00e400e4 00e400e4 00e400e4     ................
 80253c8:	00e400e4 00e400e4 00e400e4 00e400e4     ................
 80253d8:	00e400e4 00e400e4 00e400e4 00e400e4     ................
 80253e8:	00e400e4 00e400e4 00e400e4 00e400e4     ................
 80253f8:	00e400e4 00e400e4 00e400e4 00e400e4     ................
 8025408:	00e400e4 00e400e4 00e400e4 00e400e4     ................
 8025418:	00e300e3 00e300e3 00e300e3 00e300e3     ................
 8025428:	00e300e3 00e300e3 00e300e3 00e300e3     ................
 8025438:	00e300e3 00e300e3 00e300e3 00e300e3     ................
 8025448:	00e300e3 00e300e3 00e300e3 00e300e3     ................
 8025458:	00e300e3 00e300e3 00e300e3 00e300e3     ................
 8025468:	00e300e3 00e300e3 00e300e3 00e300e3     ................
 8025478:	00e300e3 00e300e3 00e300e3 00e200e3     ................
 8025488:	00e200e2 00e200e2 00e200e2 00e200e2     ................
 8025498:	00e200e2 00e200e2 00e200e2 00e200e2     ................
 80254a8:	00e200e2 00e200e2 00e200e2 00e200e2     ................
 80254b8:	00e200e2 00e200e2 00e200e2 00e200e2     ................
 80254c8:	00e200e2 00e200e2 00e200e2 00e200e2     ................
 80254d8:	00e200e2 00e200e2 00e200e2 00e200e2     ................
 80254e8:	00e200e2 00e200e2 00e200e2 00e100e1     ................
 80254f8:	00e100e1 00e100e1 00e100e1 00e100e1     ................
 8025508:	00e100e1 00e100e1 00e100e1 00e100e1     ................
 8025518:	00e100e1 00e100e1 00e100e1 00e100e1     ................
 8025528:	00e100e1 00e100e1 00e100e1 00e100e1     ................
 8025538:	00e100e1 00e100e1 00e100e1 00e100e1     ................
 8025548:	00e100e1 00e100e1 00e100e1 00e100e1     ................
 8025558:	00e100e1 00e100e1 00e000e1 00e000e0     ................
 8025568:	00e000e0 00e000e0 00e000e0 00e000e0     ................
 8025578:	00e000e0 00e000e0 00e000e0 00e000e0     ................
 8025588:	00e000e0 00e000e0 00e000e0 00e000e0     ................
 8025598:	00e000e0 00e000e0 00e000e0 00e000e0     ................
 80255a8:	00e000e0 00e000e0 00e000e0 00e000e0     ................
 80255b8:	00e000e0 00e000e0 00e000e0 00e000e0     ................
 80255c8:	00e000e0 00e000e0 00df00df 00df00df     ................
 80255d8:	00df00df 00df00df 00df00df 00df00df     ................
 80255e8:	00df00df 00df00df 00df00df 00df00df     ................
 80255f8:	00df00df 00df00df 00df00df 00df00df     ................
 8025608:	00df00df 00df00df 00df00df 00df00df     ................
 8025618:	00df00df 00df00df 00df00df 00df00df     ................
 8025628:	00df00df 00df00df 00df00df 00df00df     ................
 8025638:	00df00df 00de00df 00de00de 00de00de     ................
 8025648:	00de00de 00de00de 00de00de 00de00de     ................
 8025658:	00de00de 00de00de 00de00de 00de00de     ................
 8025668:	00de00de 00de00de 00de00de 00de00de     ................
 8025678:	00de00de 00de00de 00de00de 00de00de     ................
 8025688:	00de00de 00de00de 00de00de 00de00de     ................
 8025698:	00de00de 00de00de 00de00de 00de00de     ................
 80256a8:	00de00de 00dd00dd 00dd00dd 00dd00dd     ................
 80256b8:	00dd00dd 00dd00dd 00dd00dd 00dd00dd     ................
 80256c8:	00dd00dd 00dd00dd 00dd00dd 00dd00dd     ................
 80256d8:	00dd00dd 00dd00dd 00dd00dd 00dd00dd     ................
 80256e8:	00dd00dd 00dd00dd 00dd00dd 00dd00dd     ................
 80256f8:	00dd00dd 00dd00dd 00dd00dd 00dd00dd     ................
 8025708:	00dd00dd 00dd00dd 00dd00dd 00dd00dd     ................
 8025718:	00dc00dd 00dc00dc 00dc00dc 00dc00dc     ................
 8025728:	00dc00dc 00dc00dc 00dc00dc 00dc00dc     ................
 8025738:	00dc00dc 00dc00dc 00dc00dc 00dc00dc     ................
 8025748:	00dc00dc 00dc00dc 00dc00dc 00dc00dc     ................
 8025758:	00dc00dc 00dc00dc 00dc00dc 00dc00dc     ................
 8025768:	00dc00dc 00dc00dc 00dc00dc 00dc00dc     ................
 8025778:	00dc00dc 00dc00dc 00dc00dc 00dc00dc     ................
 8025788:	00db00db 00db00db 00db00db 00db00db     ................
 8025798:	00db00db 00db00db 00db00db 00db00db     ................
 80257a8:	00db00db 00db00db 00db00db 00db00db     ................
 80257b8:	00db00db 00db00db 00db00db 00db00db     ................
 80257c8:	00db00db 00db00db 00db00db 00db00db     ................
 80257d8:	00db00db 00db00db 00db00db 00db00db     ................
 80257e8:	00db00db 00db00db 00db00db 00da00db     ................
 80257f8:	00da00da 00da00da 00da00da 00da00da     ................
 8025808:	00da00da 00da00da 00da00da 00da00da     ................
 8025818:	00da00da 00da00da 00da00da 00da00da     ................
 8025828:	00da00da 00da00da 00da00da 00da00da     ................
 8025838:	00da00da 00da00da 00da00da 00da00da     ................
 8025848:	00da00da 00da00da 00da00da 00da00da     ................
 8025858:	00da00da 00da00da 00da00da 00d900d9     ................
 8025868:	00d900d9 00d900d9 00d900d9 00d900d9     ................
 8025878:	00d900d9 00d900d9 00d900d9 00d900d9     ................
 8025888:	00d900d9 00d900d9 00d900d9 00d900d9     ................
 8025898:	00d900d9 00d900d9 00d900d9 00d900d9     ................
 80258a8:	00d900d9 00d900d9 00d900d9 00d900d9     ................
 80258b8:	00d900d9 00d900d9 00d900d9 00d900d9     ................
 80258c8:	00d900d9 00d900d9 00d900d9 00d800d8     ................
 80258d8:	00d800d8 00d800d8 00d800d8 00d800d8     ................
 80258e8:	00d800d8 00d800d8 00d800d8 00d800d8     ................
 80258f8:	00d800d8 00d800d8 00d800d8 00d800d8     ................
 8025908:	00d800d8 00d800d8 00d800d8 00d800d8     ................
 8025918:	00d800d8 00d800d8 00d800d8 00d800d8     ................
 8025928:	00d800d8 00d800d8 00d800d8 00d800d8     ................
 8025938:	00d800d8 00d800d8 00d700d8 00d700d7     ................
 8025948:	00d700d7 00d700d7 00d700d7 00d700d7     ................
 8025958:	00d700d7 00d700d7 00d700d7 00d700d7     ................
 8025968:	00d700d7 00d700d7 00d700d7 00d700d7     ................
 8025978:	00d700d7 00d700d7 00d700d7 00d700d7     ................
 8025988:	00d700d7 00d700d7 00d700d7 00d700d7     ................
 8025998:	00d700d7 00d700d7 00d700d7 00d700d7     ................
 80259a8:	00d700d7 00d700d7 00d600d6 00d600d6     ................
 80259b8:	00d600d6 00d600d6 00d600d6 00d600d6     ................
 80259c8:	00d600d6 00d600d6 00d600d6 00d600d6     ................
 80259d8:	00d600d6 00d600d6 00d600d6 00d600d6     ................
 80259e8:	00d600d6 00d600d6 00d600d6 00d600d6     ................
 80259f8:	00d600d6 00d600d6 00d600d6 00d600d6     ................
 8025a08:	00d600d6 00d600d6 00d600d6 00d600d6     ................
 8025a18:	00d600d6 00d600d6 00d500d5 00d500d5     ................
 8025a28:	00d500d5 00d500d5 00d500d5 00d500d5     ................
 8025a38:	00d500d5 00d500d5 00d500d5 00d500d5     ................
 8025a48:	00d500d5 00d500d5 00d500d5 00d500d5     ................
 8025a58:	00d500d5 00d500d5 00d500d5 00d500d5     ................
 8025a68:	00d500d5 00d500d5 00d500d5 00d500d5     ................
 8025a78:	00d500d5 00d500d5 00d500d5 00d500d5     ................
 8025a88:	00d500d5 00d400d5 00d400d4 00d400d4     ................
 8025a98:	00d400d4 00d400d4 00d400d4 00d400d4     ................
 8025aa8:	00d400d4 00d400d4 00d400d4 00d400d4     ................
 8025ab8:	00d400d4 00d400d4 00d400d4 00d400d4     ................
 8025ac8:	00d400d4 00d400d4 00d400d4 00d400d4     ................
 8025ad8:	00d400d4 00d400d4 00d400d4 00d400d4     ................
 8025ae8:	00d400d4 00d400d4 00d400d4 00d400d4     ................
 8025af8:	00d400d4 00d300d4 00d300d3 00d300d3     ................
 8025b08:	00d300d3 00d300d3 00d300d3 00d300d3     ................
 8025b18:	00d300d3 00d300d3 00d300d3 00d300d3     ................
 8025b28:	00d300d3 00d300d3 00d300d3 00d300d3     ................
 8025b38:	00d300d3 00d300d3 00d300d3 00d300d3     ................
 8025b48:	00d300d3 00d300d3 00d300d3 00d300d3     ................
 8025b58:	00d300d3 00d300d3 00d300d3 00d300d3     ................
 8025b68:	00d300d3 00d200d3 00d200d2 00d200d2     ................
 8025b78:	00d200d2 00d200d2 00d200d2 00d200d2     ................
 8025b88:	00d200d2 00d200d2 00d200d2 00d200d2     ................
 8025b98:	00d200d2 00d200d2 00d200d2 00d200d2     ................
 8025ba8:	00d200d2 00d200d2 00d200d2 00d200d2     ................
 8025bb8:	00d200d2 00d200d2 00d200d2 00d200d2     ................
 8025bc8:	00d200d2 00d200d2 00d200d2 00d200d2     ................
 8025bd8:	00d200d2 00d100d1 00d100d1 00d100d1     ................
 8025be8:	00d100d1 00d100d1 00d100d1 00d100d1     ................
 8025bf8:	00d100d1 00d100d1 00d100d1 00d100d1     ................
 8025c08:	00d100d1 00d100d1 00d100d1 00d100d1     ................
 8025c18:	00d100d1 00d100d1 00d100d1 00d100d1     ................
 8025c28:	00d100d1 00d100d1 00d100d1 00d100d1     ................
 8025c38:	00d100d1 00d100d1 00d100d1 00d100d1     ................
 8025c48:	00d100d1 00d000d0 00d000d0 00d000d0     ................
 8025c58:	00d000d0 00d000d0 00d000d0 00d000d0     ................
 8025c68:	00d000d0 00d000d0 00d000d0 00d000d0     ................
 8025c78:	00d000d0 00d000d0 00d000d0 00d000d0     ................
 8025c88:	00d000d0 00d000d0 00d000d0 00d000d0     ................
 8025c98:	00d000d0 00d000d0 00d000d0 00d000d0     ................
 8025ca8:	00d000d0 00d000d0 00d000d0 00d000d0     ................
 8025cb8:	00d000d0 00cf00cf 00cf00cf 00cf00cf     ................
 8025cc8:	00cf00cf 00cf00cf 00cf00cf 00cf00cf     ................
 8025cd8:	00cf00cf 00cf00cf 00cf00cf 00cf00cf     ................
 8025ce8:	00cf00cf 00cf00cf 00cf00cf 00cf00cf     ................
 8025cf8:	00cf00cf 00cf00cf 00cf00cf 00cf00cf     ................
 8025d08:	00cf00cf 00cf00cf 00cf00cf 00cf00cf     ................
 8025d18:	00cf00cf 00cf00cf 00cf00cf 00cf00cf     ................
 8025d28:	00cf00cf 00ce00ce 00ce00ce 00ce00ce     ................
 8025d38:	00ce00ce 00ce00ce 00ce00ce 00ce00ce     ................
 8025d48:	00ce00ce 00ce00ce 00ce00ce 00ce00ce     ................
 8025d58:	00ce00ce 00ce00ce 00ce00ce 00ce00ce     ................
 8025d68:	00ce00ce 00ce00ce 00ce00ce 00ce00ce     ................
 8025d78:	00ce00ce 00ce00ce 00ce00ce 00ce00ce     ................
 8025d88:	00ce00ce 00ce00ce 00ce00ce 00ce00ce     ................
 8025d98:	00ce00ce 00cd00cd 00cd00cd 00cd00cd     ................
 8025da8:	00cd00cd 00cd00cd 00cd00cd 00cd00cd     ................
 8025db8:	00cd00cd 00cd00cd 00cd00cd 00cd00cd     ................
 8025dc8:	00cd00cd 00cd00cd 00cd00cd 00cd00cd     ................
 8025dd8:	00cd00cd 00cd00cd 00cd00cd 00cd00cd     ................
 8025de8:	00cd00cd 00cd00cd 00cd00cd 00cd00cd     ................
 8025df8:	00cd00cd 00cd00cd 00cd00cd 00cd00cd     ................
 8025e08:	00cd00cd 00cc00cc 00cc00cc 00cc00cc     ................
 8025e18:	00cc00cc 00cc00cc 00cc00cc 00cc00cc     ................
 8025e28:	00cc00cc 00cc00cc 00cc00cc 00cc00cc     ................
 8025e38:	00cc00cc 00cc00cc 00cc00cc 00cc00cc     ................
 8025e48:	00cc00cc 00cc00cc 00cc00cc 00cc00cc     ................
 8025e58:	00cc00cc 00cc00cc 00cc00cc 00cc00cc     ................
 8025e68:	00cc00cc 00cc00cc 00cc00cc 00cc00cc     ................
 8025e78:	00cc00cc 00cb00cb 00cb00cb 00cb00cb     ................
 8025e88:	00cb00cb 00cb00cb 00cb00cb 00cb00cb     ................
 8025e98:	00cb00cb 00cb00cb 00cb00cb 00cb00cb     ................
 8025ea8:	00cb00cb 00cb00cb 00cb00cb 00cb00cb     ................
 8025eb8:	00cb00cb 00cb00cb 00cb00cb 00cb00cb     ................
 8025ec8:	00cb00cb 00cb00cb 00cb00cb 00cb00cb     ................
 8025ed8:	00cb00cb 00cb00cb 00cb00cb 00cb00cb     ................
 8025ee8:	00cb00cb 00ca00ca 00ca00ca 00ca00ca     ................
 8025ef8:	00ca00ca 00ca00ca 00ca00ca 00ca00ca     ................
 8025f08:	00ca00ca 00ca00ca 00ca00ca 00ca00ca     ................
 8025f18:	00ca00ca 00ca00ca 00ca00ca 00ca00ca     ................
 8025f28:	00ca00ca 00ca00ca 00ca00ca 00ca00ca     ................
 8025f38:	00ca00ca 00ca00ca 00ca00ca 00ca00ca     ................
 8025f48:	00ca00ca 00ca00ca 00ca00ca 00ca00ca     ................
 8025f58:	00ca00ca 00c900c9 00c900c9 00c900c9     ................
 8025f68:	00c900c9 00c900c9 00c900c9 00c900c9     ................
 8025f78:	00c900c9 00c900c9 00c900c9 00c900c9     ................
 8025f88:	00c900c9 00c900c9 00c900c9 00c900c9     ................
 8025f98:	00c900c9 00c900c9 00c900c9 00c900c9     ................
 8025fa8:	00c900c9 00c900c9 00c900c9 00c900c9     ................
 8025fb8:	00c900c9 00c900c9 00c900c9 00c900c9     ................
 8025fc8:	00c900c9 00c800c8 00c800c8 00c800c8     ................
 8025fd8:	00c800c8 00c800c8 00c800c8 00c800c8     ................
 8025fe8:	00c800c8 00c800c8 00c800c8 00c800c8     ................
 8025ff8:	00c800c8 00c800c8 00c800c8 00c800c8     ................
 8026008:	00c800c8 00c800c8 00c800c8 00c800c8     ................
 8026018:	00c800c8 00c800c8 00c800c8 00c800c8     ................
 8026028:	00c800c8 00c800c8 00c800c8 00c800c8     ................
 8026038:	00c800c8 00c700c8 00c700c7 00c700c7     ................
 8026048:	00c700c7 00c700c7 00c700c7 00c700c7     ................
 8026058:	00c700c7 00c700c7 00c700c7 00c700c7     ................
 8026068:	00c700c7 00c700c7 00c700c7 00c700c7     ................
 8026078:	00c700c7 00c700c7 00c700c7 00c700c7     ................
 8026088:	00c700c7 00c700c7 00c700c7 00c700c7     ................
 8026098:	00c700c7 00c700c7 00c700c7 00c700c7     ................
 80260a8:	00c700c7 00c600c7 00c600c6 00c600c6     ................
 80260b8:	00c600c6 00c600c6 00c600c6 00c600c6     ................
 80260c8:	00c600c6 00c600c6 00c600c6 00c600c6     ................
 80260d8:	00c600c6 00c600c6 00c600c6 00c600c6     ................
 80260e8:	00c600c6 00c600c6 00c600c6 00c600c6     ................
 80260f8:	00c600c6 00c600c6 00c600c6 00c600c6     ................
 8026108:	00c600c6 00c600c6 00c600c6 00c600c6     ................
 8026118:	00c600c6 00c500c6 00c500c5 00c500c5     ................
 8026128:	00c500c5 00c500c5 00c500c5 00c500c5     ................
 8026138:	00c500c5 00c500c5 00c500c5 00c500c5     ................
 8026148:	00c500c5 00c500c5 00c500c5 00c500c5     ................
 8026158:	00c500c5 00c500c5 00c500c5 00c500c5     ................
 8026168:	00c500c5 00c500c5 00c500c5 00c500c5     ................
 8026178:	00c500c5 00c500c5 00c500c5 00c500c5     ................
 8026188:	00c500c5 00c500c5 00c400c4 00c400c4     ................
 8026198:	00c400c4 00c400c4 00c400c4 00c400c4     ................
 80261a8:	00c400c4 00c400c4 00c400c4 00c400c4     ................
 80261b8:	00c400c4 00c400c4 00c400c4 00c400c4     ................
 80261c8:	00c400c4 00c400c4 00c400c4 00c400c4     ................
 80261d8:	00c400c4 00c400c4 00c400c4 00c400c4     ................
 80261e8:	00c400c4 00c400c4 00c400c4 00c400c4     ................
 80261f8:	00c400c4 00c400c4 00c300c4 00c300c3     ................
 8026208:	00c300c3 00c300c3 00c300c3 00c300c3     ................
 8026218:	00c300c3 00c300c3 00c300c3 00c300c3     ................
 8026228:	00c300c3 00c300c3 00c300c3 00c300c3     ................
 8026238:	00c300c3 00c300c3 00c300c3 00c300c3     ................
 8026248:	00c300c3 00c300c3 00c300c3 00c300c3     ................
 8026258:	00c300c3 00c300c3 00c300c3 00c300c3     ................
 8026268:	00c300c3 00c300c3 00c200c3 00c200c2     ................
 8026278:	00c200c2 00c200c2 00c200c2 00c200c2     ................
 8026288:	00c200c2 00c200c2 00c200c2 00c200c2     ................
 8026298:	00c200c2 00c200c2 00c200c2 00c200c2     ................
 80262a8:	00c200c2 00c200c2 00c200c2 00c200c2     ................
 80262b8:	00c200c2 00c200c2 00c200c2 00c200c2     ................
 80262c8:	00c200c2 00c200c2 00c200c2 00c200c2     ................
 80262d8:	00c200c2 00c200c2 00c200c2 00c100c1     ................
 80262e8:	00c100c1 00c100c1 00c100c1 00c100c1     ................
 80262f8:	00c100c1 00c100c1 00c100c1 00c100c1     ................
 8026308:	00c100c1 00c100c1 00c100c1 00c100c1     ................
 8026318:	00c100c1 00c100c1 00c100c1 00c100c1     ................
 8026328:	00c100c1 00c100c1 00c100c1 00c100c1     ................
 8026338:	00c100c1 00c100c1 00c100c1 00c100c1     ................
 8026348:	00c100c1 00c100c1 00c100c1 00c000c1     ................
 8026358:	00c000c0 00c000c0 00c000c0 00c000c0     ................
 8026368:	00c000c0 00c000c0 00c000c0 00c000c0     ................
 8026378:	00c000c0 00c000c0 00c000c0 00c000c0     ................
 8026388:	00c000c0 00c000c0 00c000c0 00c000c0     ................
 8026398:	00c000c0 00c000c0 00c000c0 00c000c0     ................
 80263a8:	00c000c0 00c000c0 00c000c0 00c000c0     ................
 80263b8:	00c000c0 00c000c0 00c000c0 00c000c0     ................
 80263c8:	00bf00bf 00bf00bf 00bf00bf 00bf00bf     ................
 80263d8:	00bf00bf 00bf00bf 00bf00bf 00bf00bf     ................
 80263e8:	00bf00bf 00bf00bf 00bf00bf 00bf00bf     ................
 80263f8:	00bf00bf 00bf00bf 00bf00bf 00bf00bf     ................
 8026408:	00bf00bf 00bf00bf 00bf00bf 00bf00bf     ................
 8026418:	00bf00bf 00bf00bf 00bf00bf 00bf00bf     ................
 8026428:	00bf00bf 00bf00bf 00bf00bf 00bf00bf     ................
 8026438:	00be00bf 00be00be 00be00be 00be00be     ................
 8026448:	00be00be 00be00be 00be00be 00be00be     ................
 8026458:	00be00be 00be00be 00be00be 00be00be     ................
 8026468:	00be00be 00be00be 00be00be 00be00be     ................
 8026478:	00be00be 00be00be 00be00be 00be00be     ................
 8026488:	00be00be 00be00be 00be00be 00be00be     ................
 8026498:	00be00be 00be00be 00be00be 00be00be     ................
 80264a8:	00be00be 00bd00bd 00bd00bd 00bd00bd     ................
 80264b8:	00bd00bd 00bd00bd 00bd00bd 00bd00bd     ................
 80264c8:	00bd00bd 00bd00bd 00bd00bd 00bd00bd     ................
 80264d8:	00bd00bd 00bd00bd 00bd00bd 00bd00bd     ................
 80264e8:	00bd00bd 00bd00bd 00bd00bd 00bd00bd     ................
 80264f8:	00bd00bd 00bd00bd 00bd00bd 00bd00bd     ................
 8026508:	00bd00bd 00bd00bd 00bd00bd 00bd00bd     ................
 8026518:	00bd00bd 00bc00bd 00bc00bc 00bc00bc     ................
 8026528:	00bc00bc 00bc00bc 00bc00bc 00bc00bc     ................
 8026538:	00bc00bc 00bc00bc 00bc00bc 00bc00bc     ................
 8026548:	00bc00bc 00bc00bc 00bc00bc 00bc00bc     ................
 8026558:	00bc00bc 00bc00bc 00bc00bc 00bc00bc     ................
 8026568:	00bc00bc 00bc00bc 00bc00bc 00bc00bc     ................
 8026578:	00bc00bc 00bc00bc 00bc00bc 00bc00bc     ................
 8026588:	00bc00bc 00bc00bc 00bb00bb 00bb00bb     ................
 8026598:	00bb00bb 00bb00bb 00bb00bb 00bb00bb     ................
 80265a8:	00bb00bb 00bb00bb 00bb00bb 00bb00bb     ................
 80265b8:	00bb00bb 00bb00bb 00bb00bb 00bb00bb     ................
 80265c8:	00bb00bb 00bb00bb 00bb00bb 00bb00bb     ................
 80265d8:	00bb00bb 00bb00bb 00bb00bb 00bb00bb     ................
 80265e8:	00bb00bb 00bb00bb 00bb00bb 00bb00bb     ................
 80265f8:	00bb00bb 00bb00bb 00bb00bb 00ba00ba     ................
 8026608:	00ba00ba 00ba00ba 00ba00ba 00ba00ba     ................
 8026618:	00ba00ba 00ba00ba 00ba00ba 00ba00ba     ................
 8026628:	00ba00ba 00ba00ba 00ba00ba 00ba00ba     ................
 8026638:	00ba00ba 00ba00ba 00ba00ba 00ba00ba     ................
 8026648:	00ba00ba 00ba00ba 00ba00ba 00ba00ba     ................
 8026658:	00ba00ba 00ba00ba 00ba00ba 00ba00ba     ................
 8026668:	00ba00ba 00ba00ba 00ba00ba 00b900ba     ................
 8026678:	00b900b9 00b900b9 00b900b9 00b900b9     ................
 8026688:	00b900b9 00b900b9 00b900b9 00b900b9     ................
 8026698:	00b900b9 00b900b9 00b900b9 00b900b9     ................
 80266a8:	00b900b9 00b900b9 00b900b9 00b900b9     ................
 80266b8:	00b900b9 00b900b9 00b900b9 00b900b9     ................
 80266c8:	00b900b9 00b900b9 00b900b9 00b900b9     ................
 80266d8:	00b900b9 00b900b9 00b900b9 00b900b9     ................
 80266e8:	00b800b9 00b800b8 00b800b8 00b800b8     ................
 80266f8:	00b800b8 00b800b8 00b800b8 00b800b8     ................
 8026708:	00b800b8 00b800b8 00b800b8 00b800b8     ................
 8026718:	00b800b8 00b800b8 00b800b8 00b800b8     ................
 8026728:	00b800b8 00b800b8 00b800b8 00b800b8     ................
 8026738:	00b800b8 00b800b8 00b800b8 00b800b8     ................
 8026748:	00b800b8 00b800b8 00b800b8 00b800b8     ................
 8026758:	00b800b8 00b700b7 00b700b7 00b700b7     ................
 8026768:	00b700b7 00b700b7 00b700b7 00b700b7     ................
 8026778:	00b700b7 00b700b7 00b700b7 00b700b7     ................
 8026788:	00b700b7 00b700b7 00b700b7 00b700b7     ................
 8026798:	00b700b7 00b700b7 00b700b7 00b700b7     ................
 80267a8:	00b700b7 00b700b7 00b700b7 00b700b7     ................
 80267b8:	00b700b7 00b700b7 00b700b7 00b700b7     ................
 80267c8:	00b700b7 00b700b7 00b600b6 00b600b6     ................
 80267d8:	00b600b6 00b600b6 00b600b6 00b600b6     ................
 80267e8:	00b600b6 00b600b6 00b600b6 00b600b6     ................
 80267f8:	00b600b6 00b600b6 00b600b6 00b600b6     ................
 8026808:	00b600b6 00b600b6 00b600b6 00b600b6     ................
 8026818:	00b600b6 00b600b6 00b600b6 00b600b6     ................
 8026828:	00b600b6 00b600b6 00b600b6 00b600b6     ................
 8026838:	00b600b6 00b600b6 00b600b6 00b500b5     ................
 8026848:	00b500b5 00b500b5 00b500b5 00b500b5     ................
 8026858:	00b500b5 00b500b5 00b500b5 00b500b5     ................
 8026868:	00b500b5 00b500b5 00b500b5 00b500b5     ................
 8026878:	00b500b5 00b500b5 00b500b5 00b500b5     ................
 8026888:	00b500b5 00b500b5 00b500b5 00b500b5     ................
 8026898:	00b500b5 00b500b5 00b500b5 00b500b5     ................
 80268a8:	00b500b5 00b500b5 00b500b5 00b500b5     ................
 80268b8:	00b400b4 00b400b4 00b400b4 00b400b4     ................
 80268c8:	00b400b4 00b400b4 00b400b4 00b400b4     ................
 80268d8:	00b400b4 00b400b4 00b400b4 00b400b4     ................
 80268e8:	00b400b4 00b400b4 00b400b4 00b400b4     ................
 80268f8:	00b400b4 00b400b4 00b400b4 00b400b4     ................
 8026908:	00b400b4 00b400b4 00b400b4 00b400b4     ................
 8026918:	00b400b4 00b400b4 00b400b4 00b400b4     ................
 8026928:	00b400b4 00b300b3 00b300b3 00b300b3     ................
 8026938:	00b300b3 00b300b3 00b300b3 00b300b3     ................
 8026948:	00b300b3 00b300b3 00b300b3 00b300b3     ................
 8026958:	00b300b3 00b300b3 00b300b3 00b300b3     ................
 8026968:	00b300b3 00b300b3 00b300b3 00b300b3     ................
 8026978:	00b300b3 00b300b3 00b300b3 00b300b3     ................
 8026988:	00b300b3 00b300b3 00b300b3 00b300b3     ................
 8026998:	00b300b3 00b300b3 00b200b2 00b200b2     ................
 80269a8:	00b200b2 00b200b2 00b200b2 00b200b2     ................
 80269b8:	00b200b2 00b200b2 00b200b2 00b200b2     ................
 80269c8:	00b200b2 00b200b2 00b200b2 00b200b2     ................
 80269d8:	00b200b2 00b200b2 00b200b2 00b200b2     ................
 80269e8:	00b200b2 00b200b2 00b200b2 00b200b2     ................
 80269f8:	00b200b2 00b200b2 00b200b2 00b200b2     ................
 8026a08:	00b200b2 00b200b2 00b200b2 00b100b1     ................
 8026a18:	00b100b1 00b100b1 00b100b1 00b100b1     ................
 8026a28:	00b100b1 00b100b1 00b100b1 00b100b1     ................
 8026a38:	00b100b1 00b100b1 00b100b1 00b100b1     ................
 8026a48:	00b100b1 00b100b1 00b100b1 00b100b1     ................
 8026a58:	00b100b1 00b100b1 00b100b1 00b100b1     ................
 8026a68:	00b100b1 00b100b1 00b100b1 00b100b1     ................
 8026a78:	00b100b1 00b100b1 00b100b1 00b100b1     ................
 8026a88:	00b000b0 00b000b0 00b000b0 00b000b0     ................
 8026a98:	00b000b0 00b000b0 00b000b0 00b000b0     ................
 8026aa8:	00b000b0 00b000b0 00b000b0 00b000b0     ................
 8026ab8:	00b000b0 00b000b0 00b000b0 00b000b0     ................
 8026ac8:	00b000b0 00b000b0 00b000b0 00b000b0     ................
 8026ad8:	00b000b0 00b000b0 00b000b0 00b000b0     ................
 8026ae8:	00b000b0 00b000b0 00b000b0 00b000b0     ................
 8026af8:	00b000b0 00af00af 00af00af 00af00af     ................
 8026b08:	00af00af 00af00af 00af00af 00af00af     ................
 8026b18:	00af00af 00af00af 00af00af 00af00af     ................
 8026b28:	00af00af 00af00af 00af00af 00af00af     ................
 8026b38:	00af00af 00af00af 00af00af 00af00af     ................
 8026b48:	00af00af 00af00af 00af00af 00af00af     ................
 8026b58:	00af00af 00af00af 00af00af 00af00af     ................
 8026b68:	00af00af 00af00af 00ae00af 00ae00ae     ................
 8026b78:	00ae00ae 00ae00ae 00ae00ae 00ae00ae     ................
 8026b88:	00ae00ae 00ae00ae 00ae00ae 00ae00ae     ................
 8026b98:	00ae00ae 00ae00ae 00ae00ae 00ae00ae     ................
 8026ba8:	00ae00ae 00ae00ae 00ae00ae 00ae00ae     ................
 8026bb8:	00ae00ae 00ae00ae 00ae00ae 00ae00ae     ................
 8026bc8:	00ae00ae 00ae00ae 00ae00ae 00ae00ae     ................
 8026bd8:	00ae00ae 00ae00ae 00ae00ae 00ad00ae     ................
 8026be8:	00ad00ad 00ad00ad 00ad00ad 00ad00ad     ................
 8026bf8:	00ad00ad 00ad00ad 00ad00ad 00ad00ad     ................
 8026c08:	00ad00ad 00ad00ad 00ad00ad 00ad00ad     ................
 8026c18:	00ad00ad 00ad00ad 00ad00ad 00ad00ad     ................
 8026c28:	00ad00ad 00ad00ad 00ad00ad 00ad00ad     ................
 8026c38:	00ad00ad 00ad00ad 00ad00ad 00ad00ad     ................
 8026c48:	00ad00ad 00ad00ad 00ad00ad 00ad00ad     ................
 8026c58:	00ad00ad 00ac00ac 00ac00ac 00ac00ac     ................
 8026c68:	00ac00ac 00ac00ac 00ac00ac 00ac00ac     ................
 8026c78:	00ac00ac 00ac00ac 00ac00ac 00ac00ac     ................
 8026c88:	00ac00ac 00ac00ac 00ac00ac 00ac00ac     ................
 8026c98:	00ac00ac 00ac00ac 00ac00ac 00ac00ac     ................
 8026ca8:	00ac00ac 00ac00ac 00ac00ac 00ac00ac     ................
 8026cb8:	00ac00ac 00ac00ac 00ac00ac 00ac00ac     ................
 8026cc8:	00ac00ac 00ac00ac 00ab00ac 00ab00ab     ................
 8026cd8:	00ab00ab 00ab00ab 00ab00ab 00ab00ab     ................
 8026ce8:	00ab00ab 00ab00ab 00ab00ab 00ab00ab     ................
 8026cf8:	00ab00ab 00ab00ab 00ab00ab 00ab00ab     ................
 8026d08:	00ab00ab 00ab00ab 00ab00ab 00ab00ab     ................
 8026d18:	00ab00ab 00ab00ab 00ab00ab 00ab00ab     ................
 8026d28:	00ab00ab 00ab00ab 00ab00ab 00ab00ab     ................
 8026d38:	00ab00ab 00ab00ab 00ab00ab 00aa00ab     ................
 8026d48:	00aa00aa 00aa00aa 00aa00aa 00aa00aa     ................
 8026d58:	00aa00aa 00aa00aa 00aa00aa 00aa00aa     ................
 8026d68:	00aa00aa 00aa00aa 00aa00aa 00aa00aa     ................
 8026d78:	00aa00aa 00aa00aa 00aa00aa 00aa00aa     ................
 8026d88:	00aa00aa 00aa00aa 00aa00aa 00aa00aa     ................
 8026d98:	00aa00aa 00aa00aa 00aa00aa 00aa00aa     ................
 8026da8:	00aa00aa 00aa00aa 00aa00aa 00aa00aa     ................
 8026db8:	00aa00aa 00a900a9 00a900a9 00a900a9     ................
 8026dc8:	00a900a9 00a900a9 00a900a9 00a900a9     ................
 8026dd8:	00a900a9 00a900a9 00a900a9 00a900a9     ................
 8026de8:	00a900a9 00a900a9 00a900a9 00a900a9     ................
 8026df8:	00a900a9 00a900a9 00a900a9 00a900a9     ................
 8026e08:	00a900a9 00a900a9 00a900a9 00a900a9     ................
 8026e18:	00a900a9 00a900a9 00a900a9 00a900a9     ................
 8026e28:	00a900a9 00a900a9 00a800a9 00a800a8     ................
 8026e38:	00a800a8 00a800a8 00a800a8 00a800a8     ................
 8026e48:	00a800a8 00a800a8 00a800a8 00a800a8     ................
 8026e58:	00a800a8 00a800a8 00a800a8 00a800a8     ................
 8026e68:	00a800a8 00a800a8 00a800a8 00a800a8     ................
 8026e78:	00a800a8 00a800a8 00a800a8 00a800a8     ................
 8026e88:	00a800a8 00a800a8 00a800a8 00a800a8     ................
 8026e98:	00a800a8 00a800a8 00a800a8 00a800a8     ................
 8026ea8:	00a700a8 00a700a7 00a700a7 00a700a7     ................
 8026eb8:	00a700a7 00a700a7 00a700a7 00a700a7     ................
 8026ec8:	00a700a7 00a700a7 00a700a7 00a700a7     ................
 8026ed8:	00a700a7 00a700a7 00a700a7 00a700a7     ................
 8026ee8:	00a700a7 00a700a7 00a700a7 00a700a7     ................
 8026ef8:	00a700a7 00a700a7 00a700a7 00a700a7     ................
 8026f08:	00a700a7 00a700a7 00a700a7 00a700a7     ................
 8026f18:	00a700a7 00a700a7 00a600a6 00a600a6     ................
 8026f28:	00a600a6 00a600a6 00a600a6 00a600a6     ................
 8026f38:	00a600a6 00a600a6 00a600a6 00a600a6     ................
 8026f48:	00a600a6 00a600a6 00a600a6 00a600a6     ................
 8026f58:	00a600a6 00a600a6 00a600a6 00a600a6     ................
 8026f68:	00a600a6 00a600a6 00a600a6 00a600a6     ................
 8026f78:	00a600a6 00a600a6 00a600a6 00a600a6     ................
 8026f88:	00a600a6 00a600a6 00a600a6 00a500a6     ................
 8026f98:	00a500a5 00a500a5 00a500a5 00a500a5     ................
 8026fa8:	00a500a5 00a500a5 00a500a5 00a500a5     ................
 8026fb8:	00a500a5 00a500a5 00a500a5 00a500a5     ................
 8026fc8:	00a500a5 00a500a5 00a500a5 00a500a5     ................
 8026fd8:	00a500a5 00a500a5 00a500a5 00a500a5     ................
 8026fe8:	00a500a5 00a500a5 00a500a5 00a500a5     ................
 8026ff8:	00a500a5 00a500a5 00a500a5 00a500a5     ................
 8027008:	00a500a5 00a400a5 00a400a4 00a400a4     ................
 8027018:	00a400a4 00a400a4 00a400a4 00a400a4     ................
 8027028:	00a400a4 00a400a4 00a400a4 00a400a4     ................
 8027038:	00a400a4 00a400a4 00a400a4 00a400a4     ................
 8027048:	00a400a4 00a400a4 00a400a4 00a400a4     ................
 8027058:	00a400a4 00a400a4 00a400a4 00a400a4     ................
 8027068:	00a400a4 00a400a4 00a400a4 00a400a4     ................
 8027078:	00a400a4 00a400a4 00a400a4 00a300a3     ................
 8027088:	00a300a3 00a300a3 00a300a3 00a300a3     ................
 8027098:	00a300a3 00a300a3 00a300a3 00a300a3     ................
 80270a8:	00a300a3 00a300a3 00a300a3 00a300a3     ................
 80270b8:	00a300a3 00a300a3 00a300a3 00a300a3     ................
 80270c8:	00a300a3 00a300a3 00a300a3 00a300a3     ................
 80270d8:	00a300a3 00a300a3 00a300a3 00a300a3     ................
 80270e8:	00a300a3 00a300a3 00a300a3 00a300a3     ................
 80270f8:	00a300a3 00a200a2 00a200a2 00a200a2     ................
 8027108:	00a200a2 00a200a2 00a200a2 00a200a2     ................
 8027118:	00a200a2 00a200a2 00a200a2 00a200a2     ................
 8027128:	00a200a2 00a200a2 00a200a2 00a200a2     ................
 8027138:	00a200a2 00a200a2 00a200a2 00a200a2     ................
 8027148:	00a200a2 00a200a2 00a200a2 00a200a2     ................
 8027158:	00a200a2 00a200a2 00a200a2 00a200a2     ................
 8027168:	00a200a2 00a200a2 00a200a2 00a100a1     ................
 8027178:	00a100a1 00a100a1 00a100a1 00a100a1     ................
 8027188:	00a100a1 00a100a1 00a100a1 00a100a1     ................
 8027198:	00a100a1 00a100a1 00a100a1 00a100a1     ................
 80271a8:	00a100a1 00a100a1 00a100a1 00a100a1     ................
 80271b8:	00a100a1 00a100a1 00a100a1 00a100a1     ................
 80271c8:	00a100a1 00a100a1 00a100a1 00a100a1     ................
 80271d8:	00a100a1 00a100a1 00a100a1 00a100a1     ................
 80271e8:	00a100a1 00a000a0 00a000a0 00a000a0     ................
 80271f8:	00a000a0 00a000a0 00a000a0 00a000a0     ................
 8027208:	00a000a0 00a000a0 00a000a0 00a000a0     ................
 8027218:	00a000a0 00a000a0 00a000a0 00a000a0     ................
 8027228:	00a000a0 00a000a0 00a000a0 00a000a0     ................
 8027238:	00a000a0 00a000a0 00a000a0 00a000a0     ................
 8027248:	00a000a0 00a000a0 00a000a0 00a000a0     ................
 8027258:	00a000a0 00a000a0 00a000a0 009f009f     ................
 8027268:	009f009f 009f009f 009f009f 009f009f     ................
 8027278:	009f009f 009f009f 009f009f 009f009f     ................
 8027288:	009f009f 009f009f 009f009f 009f009f     ................
 8027298:	009f009f 009f009f 009f009f 009f009f     ................
 80272a8:	009f009f 009f009f 009f009f 009f009f     ................
 80272b8:	009f009f 009f009f 009f009f 009f009f     ................
 80272c8:	009f009f 009f009f 009f009f 009f009f     ................
 80272d8:	009f009f 009e009e 009e009e 009e009e     ................
 80272e8:	009e009e 009e009e 009e009e 009e009e     ................
 80272f8:	009e009e 009e009e 009e009e 009e009e     ................
 8027308:	009e009e 009e009e 009e009e 009e009e     ................
 8027318:	009e009e 009e009e 009e009e 009e009e     ................
 8027328:	009e009e 009e009e 009e009e 009e009e     ................
 8027338:	009e009e 009e009e 009e009e 009e009e     ................
 8027348:	009e009e 009e009e 009e009e 009d009d     ................
 8027358:	009d009d 009d009d 009d009d 009d009d     ................
 8027368:	009d009d 009d009d 009d009d 009d009d     ................
 8027378:	009d009d 009d009d 009d009d 009d009d     ................
 8027388:	009d009d 009d009d 009d009d 009d009d     ................
 8027398:	009d009d 009d009d 009d009d 009d009d     ................
 80273a8:	009d009d 009d009d 009d009d 009d009d     ................
 80273b8:	009d009d 009d009d 009d009d 009d009d     ................
 80273c8:	009d009d 009c009d 009c009c 009c009c     ................
 80273d8:	009c009c 009c009c 009c009c 009c009c     ................
 80273e8:	009c009c 009c009c 009c009c 009c009c     ................
 80273f8:	009c009c 009c009c 009c009c 009c009c     ................
 8027408:	009c009c 009c009c 009c009c 009c009c     ................
 8027418:	009c009c 009c009c 009c009c 009c009c     ................
 8027428:	009c009c 009c009c 009c009c 009c009c     ................
 8027438:	009c009c 009c009c 009c009c 009b009c     ................
 8027448:	009b009b 009b009b 009b009b 009b009b     ................
 8027458:	009b009b 009b009b 009b009b 009b009b     ................
 8027468:	009b009b 009b009b 009b009b 009b009b     ................
 8027478:	009b009b 009b009b 009b009b 009b009b     ................
 8027488:	009b009b 009b009b 009b009b 009b009b     ................
 8027498:	009b009b 009b009b 009b009b 009b009b     ................
 80274a8:	009b009b 009b009b 009b009b 009b009b     ................
 80274b8:	009b009b 009b009b 009a009a 009a009a     ................
 80274c8:	009a009a 009a009a 009a009a 009a009a     ................
 80274d8:	009a009a 009a009a 009a009a 009a009a     ................
 80274e8:	009a009a 009a009a 009a009a 009a009a     ................
 80274f8:	009a009a 009a009a 009a009a 009a009a     ................
 8027508:	009a009a 009a009a 009a009a 009a009a     ................
 8027518:	009a009a 009a009a 009a009a 009a009a     ................
 8027528:	009a009a 009a009a 009a009a 009a009a     ................
 8027538:	0099009a 00990099 00990099 00990099     ................
 8027548:	00990099 00990099 00990099 00990099     ................
 8027558:	00990099 00990099 00990099 00990099     ................
 8027568:	00990099 00990099 00990099 00990099     ................
 8027578:	00990099 00990099 00990099 00990099     ................
 8027588:	00990099 00990099 00990099 00990099     ................
 8027598:	00990099 00990099 00990099 00990099     ................
 80275a8:	00990099 00990099 00990099 00980098     ................
 80275b8:	00980098 00980098 00980098 00980098     ................
 80275c8:	00980098 00980098 00980098 00980098     ................
 80275d8:	00980098 00980098 00980098 00980098     ................
 80275e8:	00980098 00980098 00980098 00980098     ................
 80275f8:	00980098 00980098 00980098 00980098     ................
 8027608:	00980098 00980098 00980098 00980098     ................
 8027618:	00980098 00980098 00980098 00980098     ................
 8027628:	00980098 00970098 00970097 00970097     ................
 8027638:	00970097 00970097 00970097 00970097     ................
 8027648:	00970097 00970097 00970097 00970097     ................
 8027658:	00970097 00970097 00970097 00970097     ................
 8027668:	00970097 00970097 00970097 00970097     ................
 8027678:	00970097 00970097 00970097 00970097     ................
 8027688:	00970097 00970097 00970097 00970097     ................
 8027698:	00970097 00970097 00970097 00970097     ................
 80276a8:	00960096 00960096 00960096 00960096     ................
 80276b8:	00960096 00960096 00960096 00960096     ................
 80276c8:	00960096 00960096 00960096 00960096     ................
 80276d8:	00960096 00960096 00960096 00960096     ................
 80276e8:	00960096 00960096 00960096 00960096     ................
 80276f8:	00960096 00960096 00960096 00960096     ................
 8027708:	00960096 00960096 00960096 00960096     ................
 8027718:	00960096 00960096 00950096 00950095     ................
 8027728:	00950095 00950095 00950095 00950095     ................
 8027738:	00950095 00950095 00950095 00950095     ................
 8027748:	00950095 00950095 00950095 00950095     ................
 8027758:	00950095 00950095 00950095 00950095     ................
 8027768:	00950095 00950095 00950095 00950095     ................
 8027778:	00950095 00950095 00950095 00950095     ................
 8027788:	00950095 00950095 00950095 00950095     ................
 8027798:	00950095 00940095 00940094 00940094     ................
 80277a8:	00940094 00940094 00940094 00940094     ................
 80277b8:	00940094 00940094 00940094 00940094     ................
 80277c8:	00940094 00940094 00940094 00940094     ................
 80277d8:	00940094 00940094 00940094 00940094     ................
 80277e8:	00940094 00940094 00940094 00940094     ................
 80277f8:	00940094 00940094 00940094 00940094     ................
 8027808:	00940094 00940094 00940094 00940094     ................
 8027818:	00930093 00930093 00930093 00930093     ................
 8027828:	00930093 00930093 00930093 00930093     ................
 8027838:	00930093 00930093 00930093 00930093     ................
 8027848:	00930093 00930093 00930093 00930093     ................
 8027858:	00930093 00930093 00930093 00930093     ................
 8027868:	00930093 00930093 00930093 00930093     ................
 8027878:	00930093 00930093 00930093 00930093     ................
 8027888:	00930093 00930093 00930093 00920092     ................
 8027898:	00920092 00920092 00920092 00920092     ................
 80278a8:	00920092 00920092 00920092 00920092     ................
 80278b8:	00920092 00920092 00920092 00920092     ................
 80278c8:	00920092 00920092 00920092 00920092     ................
 80278d8:	00920092 00920092 00920092 00920092     ................
 80278e8:	00920092 00920092 00920092 00920092     ................
 80278f8:	00920092 00920092 00920092 00920092     ................
 8027908:	00920092 00920092 00910091 00910091     ................
 8027918:	00910091 00910091 00910091 00910091     ................
 8027928:	00910091 00910091 00910091 00910091     ................
 8027938:	00910091 00910091 00910091 00910091     ................
 8027948:	00910091 00910091 00910091 00910091     ................
 8027958:	00910091 00910091 00910091 00910091     ................
 8027968:	00910091 00910091 00910091 00910091     ................
 8027978:	00910091 00910091 00910091 00910091     ................
 8027988:	00910091 00900090 00900090 00900090     ................
 8027998:	00900090 00900090 00900090 00900090     ................
 80279a8:	00900090 00900090 00900090 00900090     ................
 80279b8:	00900090 00900090 00900090 00900090     ................
 80279c8:	00900090 00900090 00900090 00900090     ................
 80279d8:	00900090 00900090 00900090 00900090     ................
 80279e8:	00900090 00900090 00900090 00900090     ................
 80279f8:	00900090 00900090 00900090 00900090     ................
 8027a08:	008f008f 008f008f 008f008f 008f008f     ................
 8027a18:	008f008f 008f008f 008f008f 008f008f     ................
 8027a28:	008f008f 008f008f 008f008f 008f008f     ................
 8027a38:	008f008f 008f008f 008f008f 008f008f     ................
 8027a48:	008f008f 008f008f 008f008f 008f008f     ................
 8027a58:	008f008f 008f008f 008f008f 008f008f     ................
 8027a68:	008f008f 008f008f 008f008f 008f008f     ................
 8027a78:	008f008f 008f008f 008f008f 008e008e     ................
 8027a88:	008e008e 008e008e 008e008e 008e008e     ................
 8027a98:	008e008e 008e008e 008e008e 008e008e     ................
 8027aa8:	008e008e 008e008e 008e008e 008e008e     ................
 8027ab8:	008e008e 008e008e 008e008e 008e008e     ................
 8027ac8:	008e008e 008e008e 008e008e 008e008e     ................
 8027ad8:	008e008e 008e008e 008e008e 008e008e     ................
 8027ae8:	008e008e 008e008e 008e008e 008e008e     ................
 8027af8:	008e008e 008e008e 008d008e 008d008d     ................
 8027b08:	008d008d 008d008d 008d008d 008d008d     ................
 8027b18:	008d008d 008d008d 008d008d 008d008d     ................
 8027b28:	008d008d 008d008d 008d008d 008d008d     ................
 8027b38:	008d008d 008d008d 008d008d 008d008d     ................
 8027b48:	008d008d 008d008d 008d008d 008d008d     ................
 8027b58:	008d008d 008d008d 008d008d 008d008d     ................
 8027b68:	008d008d 008d008d 008d008d 008d008d     ................
 8027b78:	008d008d 008d008d 008c008c 008c008c     ................
 8027b88:	008c008c 008c008c 008c008c 008c008c     ................
 8027b98:	008c008c 008c008c 008c008c 008c008c     ................
 8027ba8:	008c008c 008c008c 008c008c 008c008c     ................
 8027bb8:	008c008c 008c008c 008c008c 008c008c     ................
 8027bc8:	008c008c 008c008c 008c008c 008c008c     ................
 8027bd8:	008c008c 008c008c 008c008c 008c008c     ................
 8027be8:	008c008c 008c008c 008c008c 008c008c     ................
 8027bf8:	008c008c 008b008b 008b008b 008b008b     ................
 8027c08:	008b008b 008b008b 008b008b 008b008b     ................
 8027c18:	008b008b 008b008b 008b008b 008b008b     ................
 8027c28:	008b008b 008b008b 008b008b 008b008b     ................
 8027c38:	008b008b 008b008b 008b008b 008b008b     ................
 8027c48:	008b008b 008b008b 008b008b 008b008b     ................
 8027c58:	008b008b 008b008b 008b008b 008b008b     ................
 8027c68:	008b008b 008b008b 008b008b 008b008b     ................
 8027c78:	008a008b 008a008a 008a008a 008a008a     ................
 8027c88:	008a008a 008a008a 008a008a 008a008a     ................
 8027c98:	008a008a 008a008a 008a008a 008a008a     ................
 8027ca8:	008a008a 008a008a 008a008a 008a008a     ................
 8027cb8:	008a008a 008a008a 008a008a 008a008a     ................
 8027cc8:	008a008a 008a008a 008a008a 008a008a     ................
 8027cd8:	008a008a 008a008a 008a008a 008a008a     ................
 8027ce8:	008a008a 008a008a 008a008a 008a008a     ................
 8027cf8:	00890089 00890089 00890089 00890089     ................
 8027d08:	00890089 00890089 00890089 00890089     ................
 8027d18:	00890089 00890089 00890089 00890089     ................
 8027d28:	00890089 00890089 00890089 00890089     ................
 8027d38:	00890089 00890089 00890089 00890089     ................
 8027d48:	00890089 00890089 00890089 00890089     ................
 8027d58:	00890089 00890089 00890089 00890089     ................
 8027d68:	00890089 00890089 00890089 00890089     ................
 8027d78:	00880088 00880088 00880088 00880088     ................
 8027d88:	00880088 00880088 00880088 00880088     ................
 8027d98:	00880088 00880088 00880088 00880088     ................
 8027da8:	00880088 00880088 00880088 00880088     ................
 8027db8:	00880088 00880088 00880088 00880088     ................
 8027dc8:	00880088 00880088 00880088 00880088     ................
 8027dd8:	00880088 00880088 00880088 00880088     ................
 8027de8:	00880088 00880088 00880088 00870088     ................
 8027df8:	00870087 00870087 00870087 00870087     ................
 8027e08:	00870087 00870087 00870087 00870087     ................
 8027e18:	00870087 00870087 00870087 00870087     ................
 8027e28:	00870087 00870087 00870087 00870087     ................
 8027e38:	00870087 00870087 00870087 00870087     ................
 8027e48:	00870087 00870087 00870087 00870087     ................
 8027e58:	00870087 00870087 00870087 00870087     ................
 8027e68:	00870087 00870087 00870087 00860087     ................
 8027e78:	00860086 00860086 00860086 00860086     ................
 8027e88:	00860086 00860086 00860086 00860086     ................
 8027e98:	00860086 00860086 00860086 00860086     ................
 8027ea8:	00860086 00860086 00860086 00860086     ................
 8027eb8:	00860086 00860086 00860086 00860086     ................
 8027ec8:	00860086 00860086 00860086 00860086     ................
 8027ed8:	00860086 00860086 00860086 00860086     ................
 8027ee8:	00860086 00860086 00860086 00850085     ................
 8027ef8:	00850085 00850085 00850085 00850085     ................
 8027f08:	00850085 00850085 00850085 00850085     ................
 8027f18:	00850085 00850085 00850085 00850085     ................
 8027f28:	00850085 00850085 00850085 00850085     ................
 8027f38:	00850085 00850085 00850085 00850085     ................
 8027f48:	00850085 00850085 00850085 00850085     ................
 8027f58:	00850085 00850085 00850085 00850085     ................
 8027f68:	00850085 00850085 00850085 00840084     ................
 8027f78:	00840084 00840084 00840084 00840084     ................
 8027f88:	00840084 00840084 00840084 00840084     ................
 8027f98:	00840084 00840084 00840084 00840084     ................
 8027fa8:	00840084 00840084 00840084 00840084     ................
 8027fb8:	00840084 00840084 00840084 00840084     ................
 8027fc8:	00840084 00840084 00840084 00840084     ................
 8027fd8:	00840084 00840084 00840084 00840084     ................
 8027fe8:	00840084 00840084 00840084 00830083     ................
 8027ff8:	00830083 00830083 00830083 00830083     ................
 8028008:	00830083 00830083 00830083 00830083     ................
 8028018:	00830083 00830083 00830083 00830083     ................
 8028028:	00830083 00830083 00830083 00830083     ................
 8028038:	00830083 00830083 00830083 00830083     ................
 8028048:	00830083 00830083 00830083 00830083     ................
 8028058:	00830083 00830083 00830083 00830083     ................
 8028068:	00830083 00830083 00830083 00820083     ................
 8028078:	00820082 00820082 00820082 00820082     ................
 8028088:	00820082 00820082 00820082 00820082     ................
 8028098:	00820082 00820082 00820082 00820082     ................
 80280a8:	00820082 00820082 00820082 00820082     ................
 80280b8:	00820082 00820082 00820082 00820082     ................
 80280c8:	00820082 00820082 00820082 00820082     ................
 80280d8:	00820082 00820082 00820082 00820082     ................
 80280e8:	00820082 00820082 00820082 00810082     ................
 80280f8:	00810081 00810081 00810081 00810081     ................
 8028108:	00810081 00810081 00810081 00810081     ................
 8028118:	00810081 00810081 00810081 00810081     ................
 8028128:	00810081 00810081 00810081 00810081     ................
 8028138:	00810081 00810081 00810081 00810081     ................
 8028148:	00810081 00810081 00810081 00810081     ................
 8028158:	00810081 00810081 00810081 00810081     ................
 8028168:	00810081 00810081 00810081 00810081     ................
 8028178:	00800080 00800080 00800080 00800080     ................
 8028188:	00800080 00800080 00800080 00800080     ................
 8028198:	00800080 00800080 00800080 00800080     ................
 80281a8:	00800080 00800080 00800080 00800080     ................
 80281b8:	00800080 00800080 00800080 00800080     ................
 80281c8:	00800080 00800080 00800080 00800080     ................
 80281d8:	00800080 00800080 00800080 00800080     ................
 80281e8:	00800080 00800080 00800080 00800080     ................
 80281f8:	007f0080 007f007f 007f007f 007f007f     ................
 8028208:	007f007f 007f007f 007f007f 007f007f     ................
 8028218:	007f007f 007f007f 007f007f 007f007f     ................
 8028228:	007f007f 007f007f 007f007f 007f007f     ................
 8028238:	007f007f 007f007f 007f007f 007f007f     ................
 8028248:	007f007f 007f007f 007f007f 007f007f     ................
 8028258:	007f007f 007f007f 007f007f 007f007f     ................
 8028268:	007f007f 007f007f 007f007f 007f007f     ................
 8028278:	007f007f 007e007e 007e007e 007e007e     ....~.~.~.~.~.~.
 8028288:	007e007e 007e007e 007e007e 007e007e     ~.~.~.~.~.~.~.~.
 8028298:	007e007e 007e007e 007e007e 007e007e     ~.~.~.~.~.~.~.~.
 80282a8:	007e007e 007e007e 007e007e 007e007e     ~.~.~.~.~.~.~.~.
 80282b8:	007e007e 007e007e 007e007e 007e007e     ~.~.~.~.~.~.~.~.
 80282c8:	007e007e 007e007e 007e007e 007e007e     ~.~.~.~.~.~.~.~.
 80282d8:	007e007e 007e007e 007e007e 007e007e     ~.~.~.~.~.~.~.~.
 80282e8:	007e007e 007e007e 007e007e 007e007e     ~.~.~.~.~.~.~.~.
 80282f8:	007e007e 007d007e 007d007d 007d007d     ~.~.~.}.}.}.}.}.
 8028308:	007d007d 007d007d 007d007d 007d007d     }.}.}.}.}.}.}.}.
 8028318:	007d007d 007d007d 007d007d 007d007d     }.}.}.}.}.}.}.}.
 8028328:	007d007d 007d007d 007d007d 007d007d     }.}.}.}.}.}.}.}.
 8028338:	007d007d 007d007d 007d007d 007d007d     }.}.}.}.}.}.}.}.
 8028348:	007d007d 007d007d 007d007d 007d007d     }.}.}.}.}.}.}.}.
 8028358:	007d007d 007d007d 007d007d 007d007d     }.}.}.}.}.}.}.}.
 8028368:	007d007d 007d007d 007d007d 007d007d     }.}.}.}.}.}.}.}.
 8028378:	007d007d 007d007d 007c007c 007c007c     }.}.}.}.|.|.|.|.
 8028388:	007c007c 007c007c 007c007c 007c007c     |.|.|.|.|.|.|.|.
 8028398:	007c007c 007c007c 007c007c 007c007c     |.|.|.|.|.|.|.|.
 80283a8:	007c007c 007c007c 007c007c 007c007c     |.|.|.|.|.|.|.|.
 80283b8:	007c007c 007c007c 007c007c 007c007c     |.|.|.|.|.|.|.|.
 80283c8:	007c007c 007c007c 007c007c 007c007c     |.|.|.|.|.|.|.|.
 80283d8:	007c007c 007c007c 007c007c 007c007c     |.|.|.|.|.|.|.|.
 80283e8:	007c007c 007c007c 007c007c 007c007c     |.|.|.|.|.|.|.|.
 80283f8:	007c007c 007c007c 007c007c 007b007b     |.|.|.|.|.|.{.{.
 8028408:	007b007b 007b007b 007b007b 007b007b     {.{.{.{.{.{.{.{.
 8028418:	007b007b 007b007b 007b007b 007b007b     {.{.{.{.{.{.{.{.
 8028428:	007b007b 007b007b 007b007b 007b007b     {.{.{.{.{.{.{.{.
 8028438:	007b007b 007b007b 007b007b 007b007b     {.{.{.{.{.{.{.{.
 8028448:	007b007b 007b007b 007b007b 007b007b     {.{.{.{.{.{.{.{.
 8028458:	007b007b 007b007b 007b007b 007b007b     {.{.{.{.{.{.{.{.
 8028468:	007b007b 007b007b 007b007b 007b007b     {.{.{.{.{.{.{.{.
 8028478:	007b007b 007b007b 007b007b 007b007b     {.{.{.{.{.{.{.{.
 8028488:	007a007a 007a007a 007a007a 007a007a     z.z.z.z.z.z.z.z.
 8028498:	007a007a 007a007a 007a007a 007a007a     z.z.z.z.z.z.z.z.
 80284a8:	007a007a 007a007a 007a007a 007a007a     z.z.z.z.z.z.z.z.
 80284b8:	007a007a 007a007a 007a007a 007a007a     z.z.z.z.z.z.z.z.
 80284c8:	007a007a 007a007a 007a007a 007a007a     z.z.z.z.z.z.z.z.
 80284d8:	007a007a 007a007a 007a007a 007a007a     z.z.z.z.z.z.z.z.
 80284e8:	007a007a 007a007a 007a007a 007a007a     z.z.z.z.z.z.z.z.
 80284f8:	007a007a 007a007a 007a007a 007a007a     z.z.z.z.z.z.z.z.
 8028508:	007a007a 00790079 00790079 00790079     z.z.y.y.y.y.y.y.
 8028518:	00790079 00790079 00790079 00790079     y.y.y.y.y.y.y.y.
 8028528:	00790079 00790079 00790079 00790079     y.y.y.y.y.y.y.y.
 8028538:	00790079 00790079 00790079 00790079     y.y.y.y.y.y.y.y.
 8028548:	00790079 00790079 00790079 00790079     y.y.y.y.y.y.y.y.
 8028558:	00790079 00790079 00790079 00790079     y.y.y.y.y.y.y.y.
 8028568:	00790079 00790079 00790079 00790079     y.y.y.y.y.y.y.y.
 8028578:	00790079 00790079 00790079 00790079     y.y.y.y.y.y.y.y.
 8028588:	00790079 00790079 00780078 00780078     y.y.y.y.x.x.x.x.
 8028598:	00780078 00780078 00780078 00780078     x.x.x.x.x.x.x.x.
 80285a8:	00780078 00780078 00780078 00780078     x.x.x.x.x.x.x.x.
 80285b8:	00780078 00780078 00780078 00780078     x.x.x.x.x.x.x.x.
 80285c8:	00780078 00780078 00780078 00780078     x.x.x.x.x.x.x.x.
 80285d8:	00780078 00780078 00780078 00780078     x.x.x.x.x.x.x.x.
 80285e8:	00780078 00780078 00780078 00780078     x.x.x.x.x.x.x.x.
 80285f8:	00780078 00780078 00780078 00780078     x.x.x.x.x.x.x.x.
 8028608:	00780078 00780078 00780078 00770077     x.x.x.x.x.x.w.w.
 8028618:	00770077 00770077 00770077 00770077     w.w.w.w.w.w.w.w.
 8028628:	00770077 00770077 00770077 00770077     w.w.w.w.w.w.w.w.
 8028638:	00770077 00770077 00770077 00770077     w.w.w.w.w.w.w.w.
 8028648:	00770077 00770077 00770077 00770077     w.w.w.w.w.w.w.w.
 8028658:	00770077 00770077 00770077 00770077     w.w.w.w.w.w.w.w.
 8028668:	00770077 00770077 00770077 00770077     w.w.w.w.w.w.w.w.
 8028678:	00770077 00770077 00770077 00770077     w.w.w.w.w.w.w.w.
 8028688:	00770077 00770077 00770077 00770077     w.w.w.w.w.w.w.w.
 8028698:	00760077 00760076 00760076 00760076     w.v.v.v.v.v.v.v.
 80286a8:	00760076 00760076 00760076 00760076     v.v.v.v.v.v.v.v.
 80286b8:	00760076 00760076 00760076 00760076     v.v.v.v.v.v.v.v.
 80286c8:	00760076 00760076 00760076 00760076     v.v.v.v.v.v.v.v.
 80286d8:	00760076 00760076 00760076 00760076     v.v.v.v.v.v.v.v.
 80286e8:	00760076 00760076 00760076 00760076     v.v.v.v.v.v.v.v.
 80286f8:	00760076 00760076 00760076 00760076     v.v.v.v.v.v.v.v.
 8028708:	00760076 00760076 00760076 00760076     v.v.v.v.v.v.v.v.
 8028718:	00760076 00750076 00750075 00750075     v.v.v.u.u.u.u.u.
 8028728:	00750075 00750075 00750075 00750075     u.u.u.u.u.u.u.u.
 8028738:	00750075 00750075 00750075 00750075     u.u.u.u.u.u.u.u.
 8028748:	00750075 00750075 00750075 00750075     u.u.u.u.u.u.u.u.
 8028758:	00750075 00750075 00750075 00750075     u.u.u.u.u.u.u.u.
 8028768:	00750075 00750075 00750075 00750075     u.u.u.u.u.u.u.u.
 8028778:	00750075 00750075 00750075 00750075     u.u.u.u.u.u.u.u.
 8028788:	00750075 00750075 00750075 00750075     u.u.u.u.u.u.u.u.
 8028798:	00750075 00750075 00750075 00740074     u.u.u.u.u.u.t.t.
 80287a8:	00740074 00740074 00740074 00740074     t.t.t.t.t.t.t.t.
 80287b8:	00740074 00740074 00740074 00740074     t.t.t.t.t.t.t.t.
 80287c8:	00740074 00740074 00740074 00740074     t.t.t.t.t.t.t.t.
 80287d8:	00740074 00740074 00740074 00740074     t.t.t.t.t.t.t.t.
 80287e8:	00740074 00740074 00740074 00740074     t.t.t.t.t.t.t.t.
 80287f8:	00740074 00740074 00740074 00740074     t.t.t.t.t.t.t.t.
 8028808:	00740074 00740074 00740074 00740074     t.t.t.t.t.t.t.t.
 8028818:	00740074 00740074 00740074 00740074     t.t.t.t.t.t.t.t.
 8028828:	00740074 00730073 00730073 00730073     t.t.s.s.s.s.s.s.
 8028838:	00730073 00730073 00730073 00730073     s.s.s.s.s.s.s.s.
 8028848:	00730073 00730073 00730073 00730073     s.s.s.s.s.s.s.s.
 8028858:	00730073 00730073 00730073 00730073     s.s.s.s.s.s.s.s.
 8028868:	00730073 00730073 00730073 00730073     s.s.s.s.s.s.s.s.
 8028878:	00730073 00730073 00730073 00730073     s.s.s.s.s.s.s.s.
 8028888:	00730073 00730073 00730073 00730073     s.s.s.s.s.s.s.s.
 8028898:	00730073 00730073 00730073 00730073     s.s.s.s.s.s.s.s.
 80288a8:	00730073 00730073 00720073 00720072     s.s.s.s.s.r.r.r.
 80288b8:	00720072 00720072 00720072 00720072     r.r.r.r.r.r.r.r.
 80288c8:	00720072 00720072 00720072 00720072     r.r.r.r.r.r.r.r.
 80288d8:	00720072 00720072 00720072 00720072     r.r.r.r.r.r.r.r.
 80288e8:	00720072 00720072 00720072 00720072     r.r.r.r.r.r.r.r.
 80288f8:	00720072 00720072 00720072 00720072     r.r.r.r.r.r.r.r.
 8028908:	00720072 00720072 00720072 00720072     r.r.r.r.r.r.r.r.
 8028918:	00720072 00720072 00720072 00720072     r.r.r.r.r.r.r.r.
 8028928:	00720072 00720072 00720072 00720072     r.r.r.r.r.r.r.r.
 8028938:	00710072 00710071 00710071 00710071     r.q.q.q.q.q.q.q.
 8028948:	00710071 00710071 00710071 00710071     q.q.q.q.q.q.q.q.
 8028958:	00710071 00710071 00710071 00710071     q.q.q.q.q.q.q.q.
 8028968:	00710071 00710071 00710071 00710071     q.q.q.q.q.q.q.q.
 8028978:	00710071 00710071 00710071 00710071     q.q.q.q.q.q.q.q.
 8028988:	00710071 00710071 00710071 00710071     q.q.q.q.q.q.q.q.
 8028998:	00710071 00710071 00710071 00710071     q.q.q.q.q.q.q.q.
 80289a8:	00710071 00710071 00710071 00710071     q.q.q.q.q.q.q.q.
 80289b8:	00710071 00710071 00700071 00700070     q.q.q.q.q.p.p.p.
 80289c8:	00700070 00700070 00700070 00700070     p.p.p.p.p.p.p.p.
 80289d8:	00700070 00700070 00700070 00700070     p.p.p.p.p.p.p.p.
 80289e8:	00700070 00700070 00700070 00700070     p.p.p.p.p.p.p.p.
 80289f8:	00700070 00700070 00700070 00700070     p.p.p.p.p.p.p.p.
 8028a08:	00700070 00700070 00700070 00700070     p.p.p.p.p.p.p.p.
 8028a18:	00700070 00700070 00700070 00700070     p.p.p.p.p.p.p.p.
 8028a28:	00700070 00700070 00700070 00700070     p.p.p.p.p.p.p.p.
 8028a38:	00700070 00700070 00700070 00700070     p.p.p.p.p.p.p.p.
 8028a48:	006f0070 006f006f 006f006f 006f006f     p.o.o.o.o.o.o.o.
 8028a58:	006f006f 006f006f 006f006f 006f006f     o.o.o.o.o.o.o.o.
 8028a68:	006f006f 006f006f 006f006f 006f006f     o.o.o.o.o.o.o.o.
 8028a78:	006f006f 006f006f 006f006f 006f006f     o.o.o.o.o.o.o.o.
 8028a88:	006f006f 006f006f 006f006f 006f006f     o.o.o.o.o.o.o.o.
 8028a98:	006f006f 006f006f 006f006f 006f006f     o.o.o.o.o.o.o.o.
 8028aa8:	006f006f 006f006f 006f006f 006f006f     o.o.o.o.o.o.o.o.
 8028ab8:	006f006f 006f006f 006f006f 006f006f     o.o.o.o.o.o.o.o.
 8028ac8:	006f006f 006f006f 006e006f 006e006e     o.o.o.o.o.n.n.n.
 8028ad8:	006e006e 006e006e 006e006e 006e006e     n.n.n.n.n.n.n.n.
 8028ae8:	006e006e 006e006e 006e006e 006e006e     n.n.n.n.n.n.n.n.
 8028af8:	006e006e 006e006e 006e006e 006e006e     n.n.n.n.n.n.n.n.
 8028b08:	006e006e 006e006e 006e006e 006e006e     n.n.n.n.n.n.n.n.
 8028b18:	006e006e 006e006e 006e006e 006e006e     n.n.n.n.n.n.n.n.
 8028b28:	006e006e 006e006e 006e006e 006e006e     n.n.n.n.n.n.n.n.
 8028b38:	006e006e 006e006e 006e006e 006e006e     n.n.n.n.n.n.n.n.
 8028b48:	006e006e 006e006e 006e006e 006e006e     n.n.n.n.n.n.n.n.
 8028b58:	006e006e 006d006d 006d006d 006d006d     n.n.m.m.m.m.m.m.
 8028b68:	006d006d 006d006d 006d006d 006d006d     m.m.m.m.m.m.m.m.
 8028b78:	006d006d 006d006d 006d006d 006d006d     m.m.m.m.m.m.m.m.
 8028b88:	006d006d 006d006d 006d006d 006d006d     m.m.m.m.m.m.m.m.
 8028b98:	006d006d 006d006d 006d006d 006d006d     m.m.m.m.m.m.m.m.
 8028ba8:	006d006d 006d006d 006d006d 006d006d     m.m.m.m.m.m.m.m.
 8028bb8:	006d006d 006d006d 006d006d 006d006d     m.m.m.m.m.m.m.m.
 8028bc8:	006d006d 006d006d 006d006d 006d006d     m.m.m.m.m.m.m.m.
 8028bd8:	006d006d 006d006d 006d006d 006c006d     m.m.m.m.m.m.m.l.
 8028be8:	006c006c 006c006c 006c006c 006c006c     l.l.l.l.l.l.l.l.
 8028bf8:	006c006c 006c006c 006c006c 006c006c     l.l.l.l.l.l.l.l.
 8028c08:	006c006c 006c006c 006c006c 006c006c     l.l.l.l.l.l.l.l.
 8028c18:	006c006c 006c006c 006c006c 006c006c     l.l.l.l.l.l.l.l.
 8028c28:	006c006c 006c006c 006c006c 006c006c     l.l.l.l.l.l.l.l.
 8028c38:	006c006c 006c006c 006c006c 006c006c     l.l.l.l.l.l.l.l.
 8028c48:	006c006c 006c006c 006c006c 006c006c     l.l.l.l.l.l.l.l.
 8028c58:	006c006c 006c006c 006c006c 006c006c     l.l.l.l.l.l.l.l.
 8028c68:	006c006c 006c006c 006b006b 006b006b     l.l.l.l.k.k.k.k.
 8028c78:	006b006b 006b006b 006b006b 006b006b     k.k.k.k.k.k.k.k.
 8028c88:	006b006b 006b006b 006b006b 006b006b     k.k.k.k.k.k.k.k.
 8028c98:	006b006b 006b006b 006b006b 006b006b     k.k.k.k.k.k.k.k.
 8028ca8:	006b006b 006b006b 006b006b 006b006b     k.k.k.k.k.k.k.k.
 8028cb8:	006b006b 006b006b 006b006b 006b006b     k.k.k.k.k.k.k.k.
 8028cc8:	006b006b 006b006b 006b006b 006b006b     k.k.k.k.k.k.k.k.
 8028cd8:	006b006b 006b006b 006b006b 006b006b     k.k.k.k.k.k.k.k.
 8028ce8:	006b006b 006b006b 006b006b 006b006b     k.k.k.k.k.k.k.k.
 8028cf8:	006a006b 006a006a 006a006a 006a006a     k.j.j.j.j.j.j.j.
 8028d08:	006a006a 006a006a 006a006a 006a006a     j.j.j.j.j.j.j.j.
 8028d18:	006a006a 006a006a 006a006a 006a006a     j.j.j.j.j.j.j.j.
 8028d28:	006a006a 006a006a 006a006a 006a006a     j.j.j.j.j.j.j.j.
 8028d38:	006a006a 006a006a 006a006a 006a006a     j.j.j.j.j.j.j.j.
 8028d48:	006a006a 006a006a 006a006a 006a006a     j.j.j.j.j.j.j.j.
 8028d58:	006a006a 006a006a 006a006a 006a006a     j.j.j.j.j.j.j.j.
 8028d68:	006a006a 006a006a 006a006a 006a006a     j.j.j.j.j.j.j.j.
 8028d78:	006a006a 006a006a 006a006a 0069006a     j.j.j.j.j.j.j.i.
 8028d88:	00690069 00690069 00690069 00690069     i.i.i.i.i.i.i.i.
 8028d98:	00690069 00690069 00690069 00690069     i.i.i.i.i.i.i.i.
 8028da8:	00690069 00690069 00690069 00690069     i.i.i.i.i.i.i.i.
 8028db8:	00690069 00690069 00690069 00690069     i.i.i.i.i.i.i.i.
 8028dc8:	00690069 00690069 00690069 00690069     i.i.i.i.i.i.i.i.
 8028dd8:	00690069 00690069 00690069 00690069     i.i.i.i.i.i.i.i.
 8028de8:	00690069 00690069 00690069 00690069     i.i.i.i.i.i.i.i.
 8028df8:	00690069 00690069 00690069 00690069     i.i.i.i.i.i.i.i.
 8028e08:	00690069 00690069 00680069 00680068     i.i.i.i.i.h.h.h.
 8028e18:	00680068 00680068 00680068 00680068     h.h.h.h.h.h.h.h.
 8028e28:	00680068 00680068 00680068 00680068     h.h.h.h.h.h.h.h.
 8028e38:	00680068 00680068 00680068 00680068     h.h.h.h.h.h.h.h.
 8028e48:	00680068 00680068 00680068 00680068     h.h.h.h.h.h.h.h.
 8028e58:	00680068 00680068 00680068 00680068     h.h.h.h.h.h.h.h.
 8028e68:	00680068 00680068 00680068 00680068     h.h.h.h.h.h.h.h.
 8028e78:	00680068 00680068 00680068 00680068     h.h.h.h.h.h.h.h.
 8028e88:	00680068 00680068 00680068 00680068     h.h.h.h.h.h.h.h.
 8028e98:	00680068 00670068 00670067 00670067     h.h.h.g.g.g.g.g.
 8028ea8:	00670067 00670067 00670067 00670067     g.g.g.g.g.g.g.g.
 8028eb8:	00670067 00670067 00670067 00670067     g.g.g.g.g.g.g.g.
 8028ec8:	00670067 00670067 00670067 00670067     g.g.g.g.g.g.g.g.
 8028ed8:	00670067 00670067 00670067 00670067     g.g.g.g.g.g.g.g.
 8028ee8:	00670067 00670067 00670067 00670067     g.g.g.g.g.g.g.g.
 8028ef8:	00670067 00670067 00670067 00670067     g.g.g.g.g.g.g.g.
 8028f08:	00670067 00670067 00670067 00670067     g.g.g.g.g.g.g.g.
 8028f18:	00670067 00670067 00670067 00670067     g.g.g.g.g.g.g.g.
 8028f28:	00660067 00660066 00660066 00660066     g.f.f.f.f.f.f.f.
 8028f38:	00660066 00660066 00660066 00660066     f.f.f.f.f.f.f.f.
 8028f48:	00660066 00660066 00660066 00660066     f.f.f.f.f.f.f.f.
 8028f58:	00660066 00660066 00660066 00660066     f.f.f.f.f.f.f.f.
 8028f68:	00660066 00660066 00660066 00660066     f.f.f.f.f.f.f.f.
 8028f78:	00660066 00660066 00660066 00660066     f.f.f.f.f.f.f.f.
 8028f88:	00660066 00660066 00660066 00660066     f.f.f.f.f.f.f.f.
 8028f98:	00660066 00660066 00660066 00660066     f.f.f.f.f.f.f.f.
 8028fa8:	00660066 00660066 00660066 00660066     f.f.f.f.f.f.f.f.
 8028fb8:	00650065 00650065 00650065 00650065     e.e.e.e.e.e.e.e.
 8028fc8:	00650065 00650065 00650065 00650065     e.e.e.e.e.e.e.e.
 8028fd8:	00650065 00650065 00650065 00650065     e.e.e.e.e.e.e.e.
 8028fe8:	00650065 00650065 00650065 00650065     e.e.e.e.e.e.e.e.
 8028ff8:	00650065 00650065 00650065 00650065     e.e.e.e.e.e.e.e.
 8029008:	00650065 00650065 00650065 00650065     e.e.e.e.e.e.e.e.
 8029018:	00650065 00650065 00650065 00650065     e.e.e.e.e.e.e.e.
 8029028:	00650065 00650065 00650065 00650065     e.e.e.e.e.e.e.e.
 8029038:	00650065 00650065 00650065 00640065     e.e.e.e.e.e.e.d.
 8029048:	00640064 00640064 00640064 00640064     d.d.d.d.d.d.d.d.
 8029058:	00640064 00640064 00640064 00640064     d.d.d.d.d.d.d.d.
 8029068:	00640064 00640064 00640064 00640064     d.d.d.d.d.d.d.d.
 8029078:	00640064 00640064 00640064 00640064     d.d.d.d.d.d.d.d.
 8029088:	00640064 00640064 00640064 00640064     d.d.d.d.d.d.d.d.
 8029098:	00640064 00640064 00640064 00640064     d.d.d.d.d.d.d.d.
 80290a8:	00640064 00640064 00640064 00640064     d.d.d.d.d.d.d.d.
 80290b8:	00640064 00640064 00640064 00640064     d.d.d.d.d.d.d.d.
 80290c8:	00640064 00640064 00640064 00630063     d.d.d.d.d.d.c.c.
 80290d8:	00630063 00630063 00630063 00630063     c.c.c.c.c.c.c.c.
 80290e8:	00630063 00630063 00630063 00630063     c.c.c.c.c.c.c.c.
 80290f8:	00630063 00630063 00630063 00630063     c.c.c.c.c.c.c.c.
 8029108:	00630063 00630063 00630063 00630063     c.c.c.c.c.c.c.c.
 8029118:	00630063 00630063 00630063 00630063     c.c.c.c.c.c.c.c.
 8029128:	00630063 00630063 00630063 00630063     c.c.c.c.c.c.c.c.
 8029138:	00630063 00630063 00630063 00630063     c.c.c.c.c.c.c.c.
 8029148:	00630063 00630063 00630063 00630063     c.c.c.c.c.c.c.c.
 8029158:	00630063 00630063 00630063 00620062     c.c.c.c.c.c.b.b.
 8029168:	00620062 00620062 00620062 00620062     b.b.b.b.b.b.b.b.
 8029178:	00620062 00620062 00620062 00620062     b.b.b.b.b.b.b.b.
 8029188:	00620062 00620062 00620062 00620062     b.b.b.b.b.b.b.b.
 8029198:	00620062 00620062 00620062 00620062     b.b.b.b.b.b.b.b.
 80291a8:	00620062 00620062 00620062 00620062     b.b.b.b.b.b.b.b.
 80291b8:	00620062 00620062 00620062 00620062     b.b.b.b.b.b.b.b.
 80291c8:	00620062 00620062 00620062 00620062     b.b.b.b.b.b.b.b.
 80291d8:	00620062 00620062 00620062 00620062     b.b.b.b.b.b.b.b.
 80291e8:	00620062 00620062 00620062 00610061     b.b.b.b.b.b.a.a.
 80291f8:	00610061 00610061 00610061 00610061     a.a.a.a.a.a.a.a.
 8029208:	00610061 00610061 00610061 00610061     a.a.a.a.a.a.a.a.
 8029218:	00610061 00610061 00610061 00610061     a.a.a.a.a.a.a.a.
 8029228:	00610061 00610061 00610061 00610061     a.a.a.a.a.a.a.a.
 8029238:	00610061 00610061 00610061 00610061     a.a.a.a.a.a.a.a.
 8029248:	00610061 00610061 00610061 00610061     a.a.a.a.a.a.a.a.
 8029258:	00610061 00610061 00610061 00610061     a.a.a.a.a.a.a.a.
 8029268:	00610061 00610061 00610061 00610061     a.a.a.a.a.a.a.a.
 8029278:	00610061 00610061 00610061 00600060     a.a.a.a.a.a.`.`.
 8029288:	00600060 00600060 00600060 00600060     `.`.`.`.`.`.`.`.
 8029298:	00600060 00600060 00600060 00600060     `.`.`.`.`.`.`.`.
 80292a8:	00600060 00600060 00600060 00600060     `.`.`.`.`.`.`.`.
 80292b8:	00600060 00600060 00600060 00600060     `.`.`.`.`.`.`.`.
 80292c8:	00600060 00600060 00600060 00600060     `.`.`.`.`.`.`.`.
 80292d8:	00600060 00600060 00600060 00600060     `.`.`.`.`.`.`.`.
 80292e8:	00600060 00600060 00600060 00600060     `.`.`.`.`.`.`.`.
 80292f8:	00600060 00600060 00600060 00600060     `.`.`.`.`.`.`.`.
 8029308:	00600060 00600060 00600060 005f005f     `.`.`.`.`.`._._.
 8029318:	005f005f 005f005f 005f005f 005f005f     _._._._._._._._.
 8029328:	005f005f 005f005f 005f005f 005f005f     _._._._._._._._.
 8029338:	005f005f 005f005f 005f005f 005f005f     _._._._._._._._.
 8029348:	005f005f 005f005f 005f005f 005f005f     _._._._._._._._.
 8029358:	005f005f 005f005f 005f005f 005f005f     _._._._._._._._.
 8029368:	005f005f 005f005f 005f005f 005f005f     _._._._._._._._.
 8029378:	005f005f 005f005f 005f005f 005f005f     _._._._._._._._.
 8029388:	005f005f 005f005f 005f005f 005f005f     _._._._._._._._.
 8029398:	005f005f 005f005f 005f005f 005e005f     _._._._._._._.^.
 80293a8:	005e005e 005e005e 005e005e 005e005e     ^.^.^.^.^.^.^.^.
 80293b8:	005e005e 005e005e 005e005e 005e005e     ^.^.^.^.^.^.^.^.
 80293c8:	005e005e 005e005e 005e005e 005e005e     ^.^.^.^.^.^.^.^.
 80293d8:	005e005e 005e005e 005e005e 005e005e     ^.^.^.^.^.^.^.^.
 80293e8:	005e005e 005e005e 005e005e 005e005e     ^.^.^.^.^.^.^.^.
 80293f8:	005e005e 005e005e 005e005e 005e005e     ^.^.^.^.^.^.^.^.
 8029408:	005e005e 005e005e 005e005e 005e005e     ^.^.^.^.^.^.^.^.
 8029418:	005e005e 005e005e 005e005e 005e005e     ^.^.^.^.^.^.^.^.
 8029428:	005e005e 005e005e 005e005e 005e005e     ^.^.^.^.^.^.^.^.
 8029438:	005d005d 005d005d 005d005d 005d005d     ].].].].].].].].
 8029448:	005d005d 005d005d 005d005d 005d005d     ].].].].].].].].
 8029458:	005d005d 005d005d 005d005d 005d005d     ].].].].].].].].
 8029468:	005d005d 005d005d 005d005d 005d005d     ].].].].].].].].
 8029478:	005d005d 005d005d 005d005d 005d005d     ].].].].].].].].
 8029488:	005d005d 005d005d 005d005d 005d005d     ].].].].].].].].
 8029498:	005d005d 005d005d 005d005d 005d005d     ].].].].].].].].
 80294a8:	005d005d 005d005d 005d005d 005d005d     ].].].].].].].].
 80294b8:	005d005d 005d005d 005d005d 005d005d     ].].].].].].].].
 80294c8:	005c005d 005c005c 005c005c 005c005c     ].\.\.\.\.\.\.\.
 80294d8:	005c005c 005c005c 005c005c 005c005c     \.\.\.\.\.\.\.\.
 80294e8:	005c005c 005c005c 005c005c 005c005c     \.\.\.\.\.\.\.\.
 80294f8:	005c005c 005c005c 005c005c 005c005c     \.\.\.\.\.\.\.\.
 8029508:	005c005c 005c005c 005c005c 005c005c     \.\.\.\.\.\.\.\.
 8029518:	005c005c 005c005c 005c005c 005c005c     \.\.\.\.\.\.\.\.
 8029528:	005c005c 005c005c 005c005c 005c005c     \.\.\.\.\.\.\.\.
 8029538:	005c005c 005c005c 005c005c 005c005c     \.\.\.\.\.\.\.\.
 8029548:	005c005c 005c005c 005c005c 005c005c     \.\.\.\.\.\.\.\.
 8029558:	005c005c 005b005c 005b005b 005b005b     \.\.\.[.[.[.[.[.
 8029568:	005b005b 005b005b 005b005b 005b005b     [.[.[.[.[.[.[.[.
 8029578:	005b005b 005b005b 005b005b 005b005b     [.[.[.[.[.[.[.[.
 8029588:	005b005b 005b005b 005b005b 005b005b     [.[.[.[.[.[.[.[.
 8029598:	005b005b 005b005b 005b005b 005b005b     [.[.[.[.[.[.[.[.
 80295a8:	005b005b 005b005b 005b005b 005b005b     [.[.[.[.[.[.[.[.
 80295b8:	005b005b 005b005b 005b005b 005b005b     [.[.[.[.[.[.[.[.
 80295c8:	005b005b 005b005b 005b005b 005b005b     [.[.[.[.[.[.[.[.
 80295d8:	005b005b 005b005b 005b005b 005b005b     [.[.[.[.[.[.[.[.
 80295e8:	005b005b 005b005b 005a005b 005a005a     [.[.[.[.[.Z.Z.Z.
 80295f8:	005a005a 005a005a 005a005a 005a005a     Z.Z.Z.Z.Z.Z.Z.Z.
 8029608:	005a005a 005a005a 005a005a 005a005a     Z.Z.Z.Z.Z.Z.Z.Z.
 8029618:	005a005a 005a005a 005a005a 005a005a     Z.Z.Z.Z.Z.Z.Z.Z.
 8029628:	005a005a 005a005a 005a005a 005a005a     Z.Z.Z.Z.Z.Z.Z.Z.
 8029638:	005a005a 005a005a 005a005a 005a005a     Z.Z.Z.Z.Z.Z.Z.Z.
 8029648:	005a005a 005a005a 005a005a 005a005a     Z.Z.Z.Z.Z.Z.Z.Z.
 8029658:	005a005a 005a005a 005a005a 005a005a     Z.Z.Z.Z.Z.Z.Z.Z.
 8029668:	005a005a 005a005a 005a005a 005a005a     Z.Z.Z.Z.Z.Z.Z.Z.
 8029678:	005a005a 005a005a 005a005a 0059005a     Z.Z.Z.Z.Z.Z.Z.Y.
 8029688:	00590059 00590059 00590059 00590059     Y.Y.Y.Y.Y.Y.Y.Y.
 8029698:	00590059 00590059 00590059 00590059     Y.Y.Y.Y.Y.Y.Y.Y.
 80296a8:	00590059 00590059 00590059 00590059     Y.Y.Y.Y.Y.Y.Y.Y.
 80296b8:	00590059 00590059 00590059 00590059     Y.Y.Y.Y.Y.Y.Y.Y.
 80296c8:	00590059 00590059 00590059 00590059     Y.Y.Y.Y.Y.Y.Y.Y.
 80296d8:	00590059 00590059 00590059 00590059     Y.Y.Y.Y.Y.Y.Y.Y.
 80296e8:	00590059 00590059 00590059 00590059     Y.Y.Y.Y.Y.Y.Y.Y.
 80296f8:	00590059 00590059 00590059 00590059     Y.Y.Y.Y.Y.Y.Y.Y.
 8029708:	00590059 00590059 00590059 00590059     Y.Y.Y.Y.Y.Y.Y.Y.
 8029718:	00590059 00580058 00580058 00580058     Y.Y.X.X.X.X.X.X.
 8029728:	00580058 00580058 00580058 00580058     X.X.X.X.X.X.X.X.
 8029738:	00580058 00580058 00580058 00580058     X.X.X.X.X.X.X.X.
 8029748:	00580058 00580058 00580058 00580058     X.X.X.X.X.X.X.X.
 8029758:	00580058 00580058 00580058 00580058     X.X.X.X.X.X.X.X.
 8029768:	00580058 00580058 00580058 00580058     X.X.X.X.X.X.X.X.
 8029778:	00580058 00580058 00580058 00580058     X.X.X.X.X.X.X.X.
 8029788:	00580058 00580058 00580058 00580058     X.X.X.X.X.X.X.X.
 8029798:	00580058 00580058 00580058 00580058     X.X.X.X.X.X.X.X.
 80297a8:	00580058 00580058 00570058 00570057     X.X.X.X.X.W.W.W.
 80297b8:	00570057 00570057 00570057 00570057     W.W.W.W.W.W.W.W.
 80297c8:	00570057 00570057 00570057 00570057     W.W.W.W.W.W.W.W.
 80297d8:	00570057 00570057 00570057 00570057     W.W.W.W.W.W.W.W.
 80297e8:	00570057 00570057 00570057 00570057     W.W.W.W.W.W.W.W.
 80297f8:	00570057 00570057 00570057 00570057     W.W.W.W.W.W.W.W.
 8029808:	00570057 00570057 00570057 00570057     W.W.W.W.W.W.W.W.
 8029818:	00570057 00570057 00570057 00570057     W.W.W.W.W.W.W.W.
 8029828:	00570057 00570057 00570057 00570057     W.W.W.W.W.W.W.W.
 8029838:	00570057 00570057 00570057 00570057     W.W.W.W.W.W.W.W.
 8029848:	00560057 00560056 00560056 00560056     W.V.V.V.V.V.V.V.
 8029858:	00560056 00560056 00560056 00560056     V.V.V.V.V.V.V.V.
 8029868:	00560056 00560056 00560056 00560056     V.V.V.V.V.V.V.V.
 8029878:	00560056 00560056 00560056 00560056     V.V.V.V.V.V.V.V.
 8029888:	00560056 00560056 00560056 00560056     V.V.V.V.V.V.V.V.
 8029898:	00560056 00560056 00560056 00560056     V.V.V.V.V.V.V.V.
 80298a8:	00560056 00560056 00560056 00560056     V.V.V.V.V.V.V.V.
 80298b8:	00560056 00560056 00560056 00560056     V.V.V.V.V.V.V.V.
 80298c8:	00560056 00560056 00560056 00560056     V.V.V.V.V.V.V.V.
 80298d8:	00560056 00560056 00550055 00550055     V.V.V.V.U.U.U.U.
 80298e8:	00550055 00550055 00550055 00550055     U.U.U.U.U.U.U.U.
 80298f8:	00550055 00550055 00550055 00550055     U.U.U.U.U.U.U.U.
 8029908:	00550055 00550055 00550055 00550055     U.U.U.U.U.U.U.U.
 8029918:	00550055 00550055 00550055 00550055     U.U.U.U.U.U.U.U.
 8029928:	00550055 00550055 00550055 00550055     U.U.U.U.U.U.U.U.
 8029938:	00550055 00550055 00550055 00550055     U.U.U.U.U.U.U.U.
 8029948:	00550055 00550055 00550055 00550055     U.U.U.U.U.U.U.U.
 8029958:	00550055 00550055 00550055 00550055     U.U.U.U.U.U.U.U.
 8029968:	00550055 00550055 00550055 00550055     U.U.U.U.U.U.U.U.
 8029978:	00540054 00540054 00540054 00540054     T.T.T.T.T.T.T.T.
 8029988:	00540054 00540054 00540054 00540054     T.T.T.T.T.T.T.T.
 8029998:	00540054 00540054 00540054 00540054     T.T.T.T.T.T.T.T.
 80299a8:	00540054 00540054 00540054 00540054     T.T.T.T.T.T.T.T.
 80299b8:	00540054 00540054 00540054 00540054     T.T.T.T.T.T.T.T.
 80299c8:	00540054 00540054 00540054 00540054     T.T.T.T.T.T.T.T.
 80299d8:	00540054 00540054 00540054 00540054     T.T.T.T.T.T.T.T.
 80299e8:	00540054 00540054 00540054 00540054     T.T.T.T.T.T.T.T.
 80299f8:	00540054 00540054 00540054 00540054     T.T.T.T.T.T.T.T.
 8029a08:	00540054 00540054 00530054 00530053     T.T.T.T.T.S.S.S.
 8029a18:	00530053 00530053 00530053 00530053     S.S.S.S.S.S.S.S.
 8029a28:	00530053 00530053 00530053 00530053     S.S.S.S.S.S.S.S.
 8029a38:	00530053 00530053 00530053 00530053     S.S.S.S.S.S.S.S.
 8029a48:	00530053 00530053 00530053 00530053     S.S.S.S.S.S.S.S.
 8029a58:	00530053 00530053 00530053 00530053     S.S.S.S.S.S.S.S.
 8029a68:	00530053 00530053 00530053 00530053     S.S.S.S.S.S.S.S.
 8029a78:	00530053 00530053 00530053 00530053     S.S.S.S.S.S.S.S.
 8029a88:	00530053 00530053 00530053 00530053     S.S.S.S.S.S.S.S.
 8029a98:	00530053 00530053 00530053 00530053     S.S.S.S.S.S.S.S.
 8029aa8:	00530053 00520052 00520052 00520052     S.S.R.R.R.R.R.R.
 8029ab8:	00520052 00520052 00520052 00520052     R.R.R.R.R.R.R.R.
 8029ac8:	00520052 00520052 00520052 00520052     R.R.R.R.R.R.R.R.
 8029ad8:	00520052 00520052 00520052 00520052     R.R.R.R.R.R.R.R.
 8029ae8:	00520052 00520052 00520052 00520052     R.R.R.R.R.R.R.R.
 8029af8:	00520052 00520052 00520052 00520052     R.R.R.R.R.R.R.R.
 8029b08:	00520052 00520052 00520052 00520052     R.R.R.R.R.R.R.R.
 8029b18:	00520052 00520052 00520052 00520052     R.R.R.R.R.R.R.R.
 8029b28:	00520052 00520052 00520052 00520052     R.R.R.R.R.R.R.R.
 8029b38:	00520052 00520052 00520052 00510052     R.R.R.R.R.R.R.Q.
 8029b48:	00510051 00510051 00510051 00510051     Q.Q.Q.Q.Q.Q.Q.Q.
 8029b58:	00510051 00510051 00510051 00510051     Q.Q.Q.Q.Q.Q.Q.Q.
 8029b68:	00510051 00510051 00510051 00510051     Q.Q.Q.Q.Q.Q.Q.Q.
 8029b78:	00510051 00510051 00510051 00510051     Q.Q.Q.Q.Q.Q.Q.Q.
 8029b88:	00510051 00510051 00510051 00510051     Q.Q.Q.Q.Q.Q.Q.Q.
 8029b98:	00510051 00510051 00510051 00510051     Q.Q.Q.Q.Q.Q.Q.Q.
 8029ba8:	00510051 00510051 00510051 00510051     Q.Q.Q.Q.Q.Q.Q.Q.
 8029bb8:	00510051 00510051 00510051 00510051     Q.Q.Q.Q.Q.Q.Q.Q.
 8029bc8:	00510051 00510051 00510051 00510051     Q.Q.Q.Q.Q.Q.Q.Q.
 8029bd8:	00510051 00510051 00500051 00500050     Q.Q.Q.Q.Q.P.P.P.
 8029be8:	00500050 00500050 00500050 00500050     P.P.P.P.P.P.P.P.
 8029bf8:	00500050 00500050 00500050 00500050     P.P.P.P.P.P.P.P.
 8029c08:	00500050 00500050 00500050 00500050     P.P.P.P.P.P.P.P.
 8029c18:	00500050 00500050 00500050 00500050     P.P.P.P.P.P.P.P.
 8029c28:	00500050 00500050 00500050 00500050     P.P.P.P.P.P.P.P.
 8029c38:	00500050 00500050 00500050 00500050     P.P.P.P.P.P.P.P.
 8029c48:	00500050 00500050 00500050 00500050     P.P.P.P.P.P.P.P.
 8029c58:	00500050 00500050 00500050 00500050     P.P.P.P.P.P.P.P.
 8029c68:	00500050 00500050 00500050 00500050     P.P.P.P.P.P.P.P.
 8029c78:	00500050 004f0050 004f004f 004f004f     P.P.P.O.O.O.O.O.
 8029c88:	004f004f 004f004f 004f004f 004f004f     O.O.O.O.O.O.O.O.
 8029c98:	004f004f 004f004f 004f004f 004f004f     O.O.O.O.O.O.O.O.
 8029ca8:	004f004f 004f004f 004f004f 004f004f     O.O.O.O.O.O.O.O.
 8029cb8:	004f004f 004f004f 004f004f 004f004f     O.O.O.O.O.O.O.O.
 8029cc8:	004f004f 004f004f 004f004f 004f004f     O.O.O.O.O.O.O.O.
 8029cd8:	004f004f 004f004f 004f004f 004f004f     O.O.O.O.O.O.O.O.
 8029ce8:	004f004f 004f004f 004f004f 004f004f     O.O.O.O.O.O.O.O.
 8029cf8:	004f004f 004f004f 004f004f 004f004f     O.O.O.O.O.O.O.O.
 8029d08:	004f004f 004f004f 004f004f 004f004f     O.O.O.O.O.O.O.O.
 8029d18:	004f004f 004e004e 004e004e 004e004e     O.O.N.N.N.N.N.N.
 8029d28:	004e004e 004e004e 004e004e 004e004e     N.N.N.N.N.N.N.N.
 8029d38:	004e004e 004e004e 004e004e 004e004e     N.N.N.N.N.N.N.N.
 8029d48:	004e004e 004e004e 004e004e 004e004e     N.N.N.N.N.N.N.N.
 8029d58:	004e004e 004e004e 004e004e 004e004e     N.N.N.N.N.N.N.N.
 8029d68:	004e004e 004e004e 004e004e 004e004e     N.N.N.N.N.N.N.N.
 8029d78:	004e004e 004e004e 004e004e 004e004e     N.N.N.N.N.N.N.N.
 8029d88:	004e004e 004e004e 004e004e 004e004e     N.N.N.N.N.N.N.N.
 8029d98:	004e004e 004e004e 004e004e 004e004e     N.N.N.N.N.N.N.N.
 8029da8:	004e004e 004e004e 004e004e 004e004e     N.N.N.N.N.N.N.N.
 8029db8:	004d004d 004d004d 004d004d 004d004d     M.M.M.M.M.M.M.M.
 8029dc8:	004d004d 004d004d 004d004d 004d004d     M.M.M.M.M.M.M.M.
 8029dd8:	004d004d 004d004d 004d004d 004d004d     M.M.M.M.M.M.M.M.
 8029de8:	004d004d 004d004d 004d004d 004d004d     M.M.M.M.M.M.M.M.
 8029df8:	004d004d 004d004d 004d004d 004d004d     M.M.M.M.M.M.M.M.
 8029e08:	004d004d 004d004d 004d004d 004d004d     M.M.M.M.M.M.M.M.
 8029e18:	004d004d 004d004d 004d004d 004d004d     M.M.M.M.M.M.M.M.
 8029e28:	004d004d 004d004d 004d004d 004d004d     M.M.M.M.M.M.M.M.
 8029e38:	004d004d 004d004d 004d004d 004d004d     M.M.M.M.M.M.M.M.
 8029e48:	004d004d 004d004d 004d004d 004d004d     M.M.M.M.M.M.M.M.
 8029e58:	004c004c 004c004c 004c004c 004c004c     L.L.L.L.L.L.L.L.
 8029e68:	004c004c 004c004c 004c004c 004c004c     L.L.L.L.L.L.L.L.
 8029e78:	004c004c 004c004c 004c004c 004c004c     L.L.L.L.L.L.L.L.
 8029e88:	004c004c 004c004c 004c004c 004c004c     L.L.L.L.L.L.L.L.
 8029e98:	004c004c 004c004c 004c004c 004c004c     L.L.L.L.L.L.L.L.
 8029ea8:	004c004c 004c004c 004c004c 004c004c     L.L.L.L.L.L.L.L.
 8029eb8:	004c004c 004c004c 004c004c 004c004c     L.L.L.L.L.L.L.L.
 8029ec8:	004c004c 004c004c 004c004c 004c004c     L.L.L.L.L.L.L.L.
 8029ed8:	004c004c 004c004c 004c004c 004c004c     L.L.L.L.L.L.L.L.
 8029ee8:	004c004c 004c004c 004c004c 004c004c     L.L.L.L.L.L.L.L.
 8029ef8:	004b004b 004b004b 004b004b 004b004b     K.K.K.K.K.K.K.K.
 8029f08:	004b004b 004b004b 004b004b 004b004b     K.K.K.K.K.K.K.K.
 8029f18:	004b004b 004b004b 004b004b 004b004b     K.K.K.K.K.K.K.K.
 8029f28:	004b004b 004b004b 004b004b 004b004b     K.K.K.K.K.K.K.K.
 8029f38:	004b004b 004b004b 004b004b 004b004b     K.K.K.K.K.K.K.K.
 8029f48:	004b004b 004b004b 004b004b 004b004b     K.K.K.K.K.K.K.K.
 8029f58:	004b004b 004b004b 004b004b 004b004b     K.K.K.K.K.K.K.K.
 8029f68:	004b004b 004b004b 004b004b 004b004b     K.K.K.K.K.K.K.K.
 8029f78:	004b004b 004b004b 004b004b 004b004b     K.K.K.K.K.K.K.K.
 8029f88:	004b004b 004b004b 004b004b 004b004b     K.K.K.K.K.K.K.K.
 8029f98:	004a004a 004a004a 004a004a 004a004a     J.J.J.J.J.J.J.J.
 8029fa8:	004a004a 004a004a 004a004a 004a004a     J.J.J.J.J.J.J.J.
 8029fb8:	004a004a 004a004a 004a004a 004a004a     J.J.J.J.J.J.J.J.
 8029fc8:	004a004a 004a004a 004a004a 004a004a     J.J.J.J.J.J.J.J.
 8029fd8:	004a004a 004a004a 004a004a 004a004a     J.J.J.J.J.J.J.J.
 8029fe8:	004a004a 004a004a 004a004a 004a004a     J.J.J.J.J.J.J.J.
 8029ff8:	004a004a 004a004a 004a004a 004a004a     J.J.J.J.J.J.J.J.
 802a008:	004a004a 004a004a 004a004a 004a004a     J.J.J.J.J.J.J.J.
 802a018:	004a004a 004a004a 004a004a 004a004a     J.J.J.J.J.J.J.J.
 802a028:	004a004a 004a004a 004a004a 004a004a     J.J.J.J.J.J.J.J.
 802a038:	0049004a 00490049 00490049 00490049     J.I.I.I.I.I.I.I.
 802a048:	00490049 00490049 00490049 00490049     I.I.I.I.I.I.I.I.
 802a058:	00490049 00490049 00490049 00490049     I.I.I.I.I.I.I.I.
 802a068:	00490049 00490049 00490049 00490049     I.I.I.I.I.I.I.I.
 802a078:	00490049 00490049 00490049 00490049     I.I.I.I.I.I.I.I.
 802a088:	00490049 00490049 00490049 00490049     I.I.I.I.I.I.I.I.
 802a098:	00490049 00490049 00490049 00490049     I.I.I.I.I.I.I.I.
 802a0a8:	00490049 00490049 00490049 00490049     I.I.I.I.I.I.I.I.
 802a0b8:	00490049 00490049 00490049 00490049     I.I.I.I.I.I.I.I.
 802a0c8:	00490049 00490049 00490049 00490049     I.I.I.I.I.I.I.I.
 802a0d8:	00490049 00480048 00480048 00480048     I.I.H.H.H.H.H.H.
 802a0e8:	00480048 00480048 00480048 00480048     H.H.H.H.H.H.H.H.
 802a0f8:	00480048 00480048 00480048 00480048     H.H.H.H.H.H.H.H.
 802a108:	00480048 00480048 00480048 00480048     H.H.H.H.H.H.H.H.
 802a118:	00480048 00480048 00480048 00480048     H.H.H.H.H.H.H.H.
 802a128:	00480048 00480048 00480048 00480048     H.H.H.H.H.H.H.H.
 802a138:	00480048 00480048 00480048 00480048     H.H.H.H.H.H.H.H.
 802a148:	00480048 00480048 00480048 00480048     H.H.H.H.H.H.H.H.
 802a158:	00480048 00480048 00480048 00480048     H.H.H.H.H.H.H.H.
 802a168:	00480048 00480048 00480048 00480048     H.H.H.H.H.H.H.H.
 802a178:	00480048 00480048 00470047 00470047     H.H.H.H.G.G.G.G.
 802a188:	00470047 00470047 00470047 00470047     G.G.G.G.G.G.G.G.
 802a198:	00470047 00470047 00470047 00470047     G.G.G.G.G.G.G.G.
 802a1a8:	00470047 00470047 00470047 00470047     G.G.G.G.G.G.G.G.
 802a1b8:	00470047 00470047 00470047 00470047     G.G.G.G.G.G.G.G.
 802a1c8:	00470047 00470047 00470047 00470047     G.G.G.G.G.G.G.G.
 802a1d8:	00470047 00470047 00470047 00470047     G.G.G.G.G.G.G.G.
 802a1e8:	00470047 00470047 00470047 00470047     G.G.G.G.G.G.G.G.
 802a1f8:	00470047 00470047 00470047 00470047     G.G.G.G.G.G.G.G.
 802a208:	00470047 00470047 00470047 00470047     G.G.G.G.G.G.G.G.
 802a218:	00470047 00470047 00470047 00460046     G.G.G.G.G.G.F.F.
 802a228:	00460046 00460046 00460046 00460046     F.F.F.F.F.F.F.F.
 802a238:	00460046 00460046 00460046 00460046     F.F.F.F.F.F.F.F.
 802a248:	00460046 00460046 00460046 00460046     F.F.F.F.F.F.F.F.
 802a258:	00460046 00460046 00460046 00460046     F.F.F.F.F.F.F.F.
 802a268:	00460046 00460046 00460046 00460046     F.F.F.F.F.F.F.F.
 802a278:	00460046 00460046 00460046 00460046     F.F.F.F.F.F.F.F.
 802a288:	00460046 00460046 00460046 00460046     F.F.F.F.F.F.F.F.
 802a298:	00460046 00460046 00460046 00460046     F.F.F.F.F.F.F.F.
 802a2a8:	00460046 00460046 00460046 00460046     F.F.F.F.F.F.F.F.
 802a2b8:	00460046 00460046 00460046 00460046     F.F.F.F.F.F.F.F.
 802a2c8:	00450046 00450045 00450045 00450045     F.E.E.E.E.E.E.E.
 802a2d8:	00450045 00450045 00450045 00450045     E.E.E.E.E.E.E.E.
 802a2e8:	00450045 00450045 00450045 00450045     E.E.E.E.E.E.E.E.
 802a2f8:	00450045 00450045 00450045 00450045     E.E.E.E.E.E.E.E.
 802a308:	00450045 00450045 00450045 00450045     E.E.E.E.E.E.E.E.
 802a318:	00450045 00450045 00450045 00450045     E.E.E.E.E.E.E.E.
 802a328:	00450045 00450045 00450045 00450045     E.E.E.E.E.E.E.E.
 802a338:	00450045 00450045 00450045 00450045     E.E.E.E.E.E.E.E.
 802a348:	00450045 00450045 00450045 00450045     E.E.E.E.E.E.E.E.
 802a358:	00450045 00450045 00450045 00450045     E.E.E.E.E.E.E.E.
 802a368:	00450045 00450045 00440044 00440044     E.E.E.E.D.D.D.D.
 802a378:	00440044 00440044 00440044 00440044     D.D.D.D.D.D.D.D.
 802a388:	00440044 00440044 00440044 00440044     D.D.D.D.D.D.D.D.
 802a398:	00440044 00440044 00440044 00440044     D.D.D.D.D.D.D.D.
 802a3a8:	00440044 00440044 00440044 00440044     D.D.D.D.D.D.D.D.
 802a3b8:	00440044 00440044 00440044 00440044     D.D.D.D.D.D.D.D.
 802a3c8:	00440044 00440044 00440044 00440044     D.D.D.D.D.D.D.D.
 802a3d8:	00440044 00440044 00440044 00440044     D.D.D.D.D.D.D.D.
 802a3e8:	00440044 00440044 00440044 00440044     D.D.D.D.D.D.D.D.
 802a3f8:	00440044 00440044 00440044 00440044     D.D.D.D.D.D.D.D.
 802a408:	00440044 00440044 00440044 00440044     D.D.D.D.D.D.D.D.
 802a418:	00430043 00430043 00430043 00430043     C.C.C.C.C.C.C.C.
 802a428:	00430043 00430043 00430043 00430043     C.C.C.C.C.C.C.C.
 802a438:	00430043 00430043 00430043 00430043     C.C.C.C.C.C.C.C.
 802a448:	00430043 00430043 00430043 00430043     C.C.C.C.C.C.C.C.
 802a458:	00430043 00430043 00430043 00430043     C.C.C.C.C.C.C.C.
 802a468:	00430043 00430043 00430043 00430043     C.C.C.C.C.C.C.C.
 802a478:	00430043 00430043 00430043 00430043     C.C.C.C.C.C.C.C.
 802a488:	00430043 00430043 00430043 00430043     C.C.C.C.C.C.C.C.
 802a498:	00430043 00430043 00430043 00430043     C.C.C.C.C.C.C.C.
 802a4a8:	00430043 00430043 00430043 00430043     C.C.C.C.C.C.C.C.
 802a4b8:	00430043 00430043 00420042 00420042     C.C.C.C.B.B.B.B.
 802a4c8:	00420042 00420042 00420042 00420042     B.B.B.B.B.B.B.B.
 802a4d8:	00420042 00420042 00420042 00420042     B.B.B.B.B.B.B.B.
 802a4e8:	00420042 00420042 00420042 00420042     B.B.B.B.B.B.B.B.
 802a4f8:	00420042 00420042 00420042 00420042     B.B.B.B.B.B.B.B.
 802a508:	00420042 00420042 00420042 00420042     B.B.B.B.B.B.B.B.
 802a518:	00420042 00420042 00420042 00420042     B.B.B.B.B.B.B.B.
 802a528:	00420042 00420042 00420042 00420042     B.B.B.B.B.B.B.B.
 802a538:	00420042 00420042 00420042 00420042     B.B.B.B.B.B.B.B.
 802a548:	00420042 00420042 00420042 00420042     B.B.B.B.B.B.B.B.
 802a558:	00420042 00420042 00420042 00420042     B.B.B.B.B.B.B.B.
 802a568:	00410042 00410041 00410041 00410041     B.A.A.A.A.A.A.A.
 802a578:	00410041 00410041 00410041 00410041     A.A.A.A.A.A.A.A.
 802a588:	00410041 00410041 00410041 00410041     A.A.A.A.A.A.A.A.
 802a598:	00410041 00410041 00410041 00410041     A.A.A.A.A.A.A.A.
 802a5a8:	00410041 00410041 00410041 00410041     A.A.A.A.A.A.A.A.
 802a5b8:	00410041 00410041 00410041 00410041     A.A.A.A.A.A.A.A.
 802a5c8:	00410041 00410041 00410041 00410041     A.A.A.A.A.A.A.A.
 802a5d8:	00410041 00410041 00410041 00410041     A.A.A.A.A.A.A.A.
 802a5e8:	00410041 00410041 00410041 00410041     A.A.A.A.A.A.A.A.
 802a5f8:	00410041 00410041 00410041 00410041     A.A.A.A.A.A.A.A.
 802a608:	00410041 00410041 00410041 00400040     A.A.A.A.A.A.@.@.
 802a618:	00400040 00400040 00400040 00400040     @.@.@.@.@.@.@.@.
 802a628:	00400040 00400040 00400040 00400040     @.@.@.@.@.@.@.@.
 802a638:	00400040 00400040 00400040 00400040     @.@.@.@.@.@.@.@.
 802a648:	00400040 00400040 00400040 00400040     @.@.@.@.@.@.@.@.
 802a658:	00400040 00400040 00400040 00400040     @.@.@.@.@.@.@.@.
 802a668:	00400040 00400040 00400040 00400040     @.@.@.@.@.@.@.@.
 802a678:	00400040 00400040 00400040 00400040     @.@.@.@.@.@.@.@.
 802a688:	00400040 00400040 00400040 00400040     @.@.@.@.@.@.@.@.
 802a698:	00400040 00400040 00400040 00400040     @.@.@.@.@.@.@.@.
 802a6a8:	00400040 00400040 00400040 00400040     @.@.@.@.@.@.@.@.
 802a6b8:	00400040 00400040 003f003f 003f003f     @.@.@.@.?.?.?.?.
 802a6c8:	003f003f 003f003f 003f003f 003f003f     ?.?.?.?.?.?.?.?.
 802a6d8:	003f003f 003f003f 003f003f 003f003f     ?.?.?.?.?.?.?.?.
 802a6e8:	003f003f 003f003f 003f003f 003f003f     ?.?.?.?.?.?.?.?.
 802a6f8:	003f003f 003f003f 003f003f 003f003f     ?.?.?.?.?.?.?.?.
 802a708:	003f003f 003f003f 003f003f 003f003f     ?.?.?.?.?.?.?.?.
 802a718:	003f003f 003f003f 003f003f 003f003f     ?.?.?.?.?.?.?.?.
 802a728:	003f003f 003f003f 003f003f 003f003f     ?.?.?.?.?.?.?.?.
 802a738:	003f003f 003f003f 003f003f 003f003f     ?.?.?.?.?.?.?.?.
 802a748:	003f003f 003f003f 003f003f 003f003f     ?.?.?.?.?.?.?.?.
 802a758:	003f003f 003f003f 003f003f 003f003f     ?.?.?.?.?.?.?.?.
 802a768:	003f003f 003e003f 003e003e 003e003e     ?.?.?.>.>.>.>.>.
 802a778:	003e003e 003e003e 003e003e 003e003e     >.>.>.>.>.>.>.>.
 802a788:	003e003e 003e003e 003e003e 003e003e     >.>.>.>.>.>.>.>.
 802a798:	003e003e 003e003e 003e003e 003e003e     >.>.>.>.>.>.>.>.
 802a7a8:	003e003e 003e003e 003e003e 003e003e     >.>.>.>.>.>.>.>.
 802a7b8:	003e003e 003e003e 003e003e 003e003e     >.>.>.>.>.>.>.>.
 802a7c8:	003e003e 003e003e 003e003e 003e003e     >.>.>.>.>.>.>.>.
 802a7d8:	003e003e 003e003e 003e003e 003e003e     >.>.>.>.>.>.>.>.
 802a7e8:	003e003e 003e003e 003e003e 003e003e     >.>.>.>.>.>.>.>.
 802a7f8:	003e003e 003e003e 003e003e 003e003e     >.>.>.>.>.>.>.>.
 802a808:	003e003e 003e003e 003e003e 003e003e     >.>.>.>.>.>.>.>.
 802a818:	003e003e 003d003d 003d003d 003d003d     >.>.=.=.=.=.=.=.
 802a828:	003d003d 003d003d 003d003d 003d003d     =.=.=.=.=.=.=.=.
 802a838:	003d003d 003d003d 003d003d 003d003d     =.=.=.=.=.=.=.=.
 802a848:	003d003d 003d003d 003d003d 003d003d     =.=.=.=.=.=.=.=.
 802a858:	003d003d 003d003d 003d003d 003d003d     =.=.=.=.=.=.=.=.
 802a868:	003d003d 003d003d 003d003d 003d003d     =.=.=.=.=.=.=.=.
 802a878:	003d003d 003d003d 003d003d 003d003d     =.=.=.=.=.=.=.=.
 802a888:	003d003d 003d003d 003d003d 003d003d     =.=.=.=.=.=.=.=.
 802a898:	003d003d 003d003d 003d003d 003d003d     =.=.=.=.=.=.=.=.
 802a8a8:	003d003d 003d003d 003d003d 003d003d     =.=.=.=.=.=.=.=.
 802a8b8:	003d003d 003d003d 003d003d 003d003d     =.=.=.=.=.=.=.=.
 802a8c8:	003d003d 003c003c 003c003c 003c003c     =.=.<.<.<.<.<.<.
 802a8d8:	003c003c 003c003c 003c003c 003c003c     <.<.<.<.<.<.<.<.
 802a8e8:	003c003c 003c003c 003c003c 003c003c     <.<.<.<.<.<.<.<.
 802a8f8:	003c003c 003c003c 003c003c 003c003c     <.<.<.<.<.<.<.<.
 802a908:	003c003c 003c003c 003c003c 003c003c     <.<.<.<.<.<.<.<.
 802a918:	003c003c 003c003c 003c003c 003c003c     <.<.<.<.<.<.<.<.
 802a928:	003c003c 003c003c 003c003c 003c003c     <.<.<.<.<.<.<.<.
 802a938:	003c003c 003c003c 003c003c 003c003c     <.<.<.<.<.<.<.<.
 802a948:	003c003c 003c003c 003c003c 003c003c     <.<.<.<.<.<.<.<.
 802a958:	003c003c 003c003c 003c003c 003c003c     <.<.<.<.<.<.<.<.
 802a968:	003c003c 003c003c 003c003c 003c003c     <.<.<.<.<.<.<.<.
 802a978:	003c003c 003b003b 003b003b 003b003b     <.<.;.;.;.;.;.;.
 802a988:	003b003b 003b003b 003b003b 003b003b     ;.;.;.;.;.;.;.;.
 802a998:	003b003b 003b003b 003b003b 003b003b     ;.;.;.;.;.;.;.;.
 802a9a8:	003b003b 003b003b 003b003b 003b003b     ;.;.;.;.;.;.;.;.
 802a9b8:	003b003b 003b003b 003b003b 003b003b     ;.;.;.;.;.;.;.;.
 802a9c8:	003b003b 003b003b 003b003b 003b003b     ;.;.;.;.;.;.;.;.
 802a9d8:	003b003b 003b003b 003b003b 003b003b     ;.;.;.;.;.;.;.;.
 802a9e8:	003b003b 003b003b 003b003b 003b003b     ;.;.;.;.;.;.;.;.
 802a9f8:	003b003b 003b003b 003b003b 003b003b     ;.;.;.;.;.;.;.;.
 802aa08:	003b003b 003b003b 003b003b 003b003b     ;.;.;.;.;.;.;.;.
 802aa18:	003b003b 003b003b 003b003b 003b003b     ;.;.;.;.;.;.;.;.
 802aa28:	003b003b 003b003b 003a003a 003a003a     ;.;.;.;.:.:.:.:.
 802aa38:	003a003a 003a003a 003a003a 003a003a     :.:.:.:.:.:.:.:.
 802aa48:	003a003a 003a003a 003a003a 003a003a     :.:.:.:.:.:.:.:.
 802aa58:	003a003a 003a003a 003a003a 003a003a     :.:.:.:.:.:.:.:.
 802aa68:	003a003a 003a003a 003a003a 003a003a     :.:.:.:.:.:.:.:.
 802aa78:	003a003a 003a003a 003a003a 003a003a     :.:.:.:.:.:.:.:.
 802aa88:	003a003a 003a003a 003a003a 003a003a     :.:.:.:.:.:.:.:.
 802aa98:	003a003a 003a003a 003a003a 003a003a     :.:.:.:.:.:.:.:.
 802aaa8:	003a003a 003a003a 003a003a 003a003a     :.:.:.:.:.:.:.:.
 802aab8:	003a003a 003a003a 003a003a 003a003a     :.:.:.:.:.:.:.:.
 802aac8:	003a003a 003a003a 003a003a 003a003a     :.:.:.:.:.:.:.:.
 802aad8:	003a003a 003a003a 0039003a 00390039     :.:.:.:.:.9.9.9.
 802aae8:	00390039 00390039 00390039 00390039     9.9.9.9.9.9.9.9.
 802aaf8:	00390039 00390039 00390039 00390039     9.9.9.9.9.9.9.9.
 802ab08:	00390039 00390039 00390039 00390039     9.9.9.9.9.9.9.9.
 802ab18:	00390039 00390039 00390039 00390039     9.9.9.9.9.9.9.9.
 802ab28:	00390039 00390039 00390039 00390039     9.9.9.9.9.9.9.9.
 802ab38:	00390039 00390039 00390039 00390039     9.9.9.9.9.9.9.9.
 802ab48:	00390039 00390039 00390039 00390039     9.9.9.9.9.9.9.9.
 802ab58:	00390039 00390039 00390039 00390039     9.9.9.9.9.9.9.9.
 802ab68:	00390039 00390039 00390039 00390039     9.9.9.9.9.9.9.9.
 802ab78:	00390039 00390039 00390039 00390039     9.9.9.9.9.9.9.9.
 802ab88:	00390039 00390039 00390039 00390039     9.9.9.9.9.9.9.9.
 802ab98:	00380038 00380038 00380038 00380038     8.8.8.8.8.8.8.8.
 802aba8:	00380038 00380038 00380038 00380038     8.8.8.8.8.8.8.8.
 802abb8:	00380038 00380038 00380038 00380038     8.8.8.8.8.8.8.8.
 802abc8:	00380038 00380038 00380038 00380038     8.8.8.8.8.8.8.8.
 802abd8:	00380038 00380038 00380038 00380038     8.8.8.8.8.8.8.8.
 802abe8:	00380038 00380038 00380038 00380038     8.8.8.8.8.8.8.8.
 802abf8:	00380038 00380038 00380038 00380038     8.8.8.8.8.8.8.8.
 802ac08:	00380038 00380038 00380038 00380038     8.8.8.8.8.8.8.8.
 802ac18:	00380038 00380038 00380038 00380038     8.8.8.8.8.8.8.8.
 802ac28:	00380038 00380038 00380038 00380038     8.8.8.8.8.8.8.8.
 802ac38:	00380038 00380038 00380038 00380038     8.8.8.8.8.8.8.8.
 802ac48:	00380038 00370038 00370037 00370037     8.8.8.7.7.7.7.7.
 802ac58:	00370037 00370037 00370037 00370037     7.7.7.7.7.7.7.7.
 802ac68:	00370037 00370037 00370037 00370037     7.7.7.7.7.7.7.7.
 802ac78:	00370037 00370037 00370037 00370037     7.7.7.7.7.7.7.7.
 802ac88:	00370037 00370037 00370037 00370037     7.7.7.7.7.7.7.7.
 802ac98:	00370037 00370037 00370037 00370037     7.7.7.7.7.7.7.7.
 802aca8:	00370037 00370037 00370037 00370037     7.7.7.7.7.7.7.7.
 802acb8:	00370037 00370037 00370037 00370037     7.7.7.7.7.7.7.7.
 802acc8:	00370037 00370037 00370037 00370037     7.7.7.7.7.7.7.7.
 802acd8:	00370037 00370037 00370037 00370037     7.7.7.7.7.7.7.7.
 802ace8:	00370037 00370037 00370037 00370037     7.7.7.7.7.7.7.7.
 802acf8:	00370037 00370037 00370037 00360037     7.7.7.7.7.7.7.6.
 802ad08:	00360036 00360036 00360036 00360036     6.6.6.6.6.6.6.6.
 802ad18:	00360036 00360036 00360036 00360036     6.6.6.6.6.6.6.6.
 802ad28:	00360036 00360036 00360036 00360036     6.6.6.6.6.6.6.6.
 802ad38:	00360036 00360036 00360036 00360036     6.6.6.6.6.6.6.6.
 802ad48:	00360036 00360036 00360036 00360036     6.6.6.6.6.6.6.6.
 802ad58:	00360036 00360036 00360036 00360036     6.6.6.6.6.6.6.6.
 802ad68:	00360036 00360036 00360036 00360036     6.6.6.6.6.6.6.6.
 802ad78:	00360036 00360036 00360036 00360036     6.6.6.6.6.6.6.6.
 802ad88:	00360036 00360036 00360036 00360036     6.6.6.6.6.6.6.6.
 802ad98:	00360036 00360036 00360036 00360036     6.6.6.6.6.6.6.6.
 802ada8:	00360036 00360036 00360036 00360036     6.6.6.6.6.6.6.6.
 802adb8:	00360036 00360036 00350035 00350035     6.6.6.6.5.5.5.5.
 802adc8:	00350035 00350035 00350035 00350035     5.5.5.5.5.5.5.5.
 802add8:	00350035 00350035 00350035 00350035     5.5.5.5.5.5.5.5.
 802ade8:	00350035 00350035 00350035 00350035     5.5.5.5.5.5.5.5.
 802adf8:	00350035 00350035 00350035 00350035     5.5.5.5.5.5.5.5.
 802ae08:	00350035 00350035 00350035 00350035     5.5.5.5.5.5.5.5.
 802ae18:	00350035 00350035 00350035 00350035     5.5.5.5.5.5.5.5.
 802ae28:	00350035 00350035 00350035 00350035     5.5.5.5.5.5.5.5.
 802ae38:	00350035 00350035 00350035 00350035     5.5.5.5.5.5.5.5.
 802ae48:	00350035 00350035 00350035 00350035     5.5.5.5.5.5.5.5.
 802ae58:	00350035 00350035 00350035 00350035     5.5.5.5.5.5.5.5.
 802ae68:	00350035 00350035 00350035 00350035     5.5.5.5.5.5.5.5.
 802ae78:	00350035 00340034 00340034 00340034     5.5.4.4.4.4.4.4.
 802ae88:	00340034 00340034 00340034 00340034     4.4.4.4.4.4.4.4.
 802ae98:	00340034 00340034 00340034 00340034     4.4.4.4.4.4.4.4.
 802aea8:	00340034 00340034 00340034 00340034     4.4.4.4.4.4.4.4.
 802aeb8:	00340034 00340034 00340034 00340034     4.4.4.4.4.4.4.4.
 802aec8:	00340034 00340034 00340034 00340034     4.4.4.4.4.4.4.4.
 802aed8:	00340034 00340034 00340034 00340034     4.4.4.4.4.4.4.4.
 802aee8:	00340034 00340034 00340034 00340034     4.4.4.4.4.4.4.4.
 802aef8:	00340034 00340034 00340034 00340034     4.4.4.4.4.4.4.4.
 802af08:	00340034 00340034 00340034 00340034     4.4.4.4.4.4.4.4.
 802af18:	00340034 00340034 00340034 00340034     4.4.4.4.4.4.4.4.
 802af28:	00340034 00340034 00340034 00340034     4.4.4.4.4.4.4.4.
 802af38:	00330033 00330033 00330033 00330033     3.3.3.3.3.3.3.3.
 802af48:	00330033 00330033 00330033 00330033     3.3.3.3.3.3.3.3.
 802af58:	00330033 00330033 00330033 00330033     3.3.3.3.3.3.3.3.
 802af68:	00330033 00330033 00330033 00330033     3.3.3.3.3.3.3.3.
 802af78:	00330033 00330033 00330033 00330033     3.3.3.3.3.3.3.3.
 802af88:	00330033 00330033 00330033 00330033     3.3.3.3.3.3.3.3.
 802af98:	00330033 00330033 00330033 00330033     3.3.3.3.3.3.3.3.
 802afa8:	00330033 00330033 00330033 00330033     3.3.3.3.3.3.3.3.
 802afb8:	00330033 00330033 00330033 00330033     3.3.3.3.3.3.3.3.
 802afc8:	00330033 00330033 00330033 00330033     3.3.3.3.3.3.3.3.
 802afd8:	00330033 00330033 00330033 00330033     3.3.3.3.3.3.3.3.
 802afe8:	00330033 00330033 00330033 00320033     3.3.3.3.3.3.3.2.
 802aff8:	00320032 00320032 00320032 00320032     2.2.2.2.2.2.2.2.
 802b008:	00320032 00320032 00320032 00320032     2.2.2.2.2.2.2.2.
 802b018:	00320032 00320032 00320032 00320032     2.2.2.2.2.2.2.2.
 802b028:	00320032 00320032 00320032 00320032     2.2.2.2.2.2.2.2.
 802b038:	00320032 00320032 00320032 00320032     2.2.2.2.2.2.2.2.
 802b048:	00320032 00320032 00320032 00320032     2.2.2.2.2.2.2.2.
 802b058:	00320032 00320032 00320032 00320032     2.2.2.2.2.2.2.2.
 802b068:	00320032 00320032 00320032 00320032     2.2.2.2.2.2.2.2.
 802b078:	00320032 00320032 00320032 00320032     2.2.2.2.2.2.2.2.
 802b088:	00320032 00320032 00320032 00320032     2.2.2.2.2.2.2.2.
 802b098:	00320032 00320032 00320032 00320032     2.2.2.2.2.2.2.2.
 802b0a8:	00320032 00320032 00320032 00310032     2.2.2.2.2.2.2.1.
 802b0b8:	00310031 00310031 00310031 00310031     1.1.1.1.1.1.1.1.
 802b0c8:	00310031 00310031 00310031 00310031     1.1.1.1.1.1.1.1.
 802b0d8:	00310031 00310031 00310031 00310031     1.1.1.1.1.1.1.1.
 802b0e8:	00310031 00310031 00310031 00310031     1.1.1.1.1.1.1.1.
 802b0f8:	00310031 00310031 00310031 00310031     1.1.1.1.1.1.1.1.
 802b108:	00310031 00310031 00310031 00310031     1.1.1.1.1.1.1.1.
 802b118:	00310031 00310031 00310031 00310031     1.1.1.1.1.1.1.1.
 802b128:	00310031 00310031 00310031 00310031     1.1.1.1.1.1.1.1.
 802b138:	00310031 00310031 00310031 00310031     1.1.1.1.1.1.1.1.
 802b148:	00310031 00310031 00310031 00310031     1.1.1.1.1.1.1.1.
 802b158:	00310031 00310031 00310031 00310031     1.1.1.1.1.1.1.1.
 802b168:	00310031 00310031 00310031 00310031     1.1.1.1.1.1.1.1.
 802b178:	00300030 00300030 00300030 00300030     0.0.0.0.0.0.0.0.
 802b188:	00300030 00300030 00300030 00300030     0.0.0.0.0.0.0.0.
 802b198:	00300030 00300030 00300030 00300030     0.0.0.0.0.0.0.0.
 802b1a8:	00300030 00300030 00300030 00300030     0.0.0.0.0.0.0.0.
 802b1b8:	00300030 00300030 00300030 00300030     0.0.0.0.0.0.0.0.
 802b1c8:	00300030 00300030 00300030 00300030     0.0.0.0.0.0.0.0.
 802b1d8:	00300030 00300030 00300030 00300030     0.0.0.0.0.0.0.0.
 802b1e8:	00300030 00300030 00300030 00300030     0.0.0.0.0.0.0.0.
 802b1f8:	00300030 00300030 00300030 00300030     0.0.0.0.0.0.0.0.
 802b208:	00300030 00300030 00300030 00300030     0.0.0.0.0.0.0.0.
 802b218:	00300030 00300030 00300030 00300030     0.0.0.0.0.0.0.0.
 802b228:	00300030 00300030 00300030 00300030     0.0.0.0.0.0.0.0.
 802b238:	00300030 002f002f 002f002f 002f002f     0.0././././././.
 802b248:	002f002f 002f002f 002f002f 002f002f     /./././././././.
 802b258:	002f002f 002f002f 002f002f 002f002f     /./././././././.
 802b268:	002f002f 002f002f 002f002f 002f002f     /./././././././.
 802b278:	002f002f 002f002f 002f002f 002f002f     /./././././././.
 802b288:	002f002f 002f002f 002f002f 002f002f     /./././././././.
 802b298:	002f002f 002f002f 002f002f 002f002f     /./././././././.
 802b2a8:	002f002f 002f002f 002f002f 002f002f     /./././././././.
 802b2b8:	002f002f 002f002f 002f002f 002f002f     /./././././././.
 802b2c8:	002f002f 002f002f 002f002f 002f002f     /./././././././.
 802b2d8:	002f002f 002f002f 002f002f 002f002f     /./././././././.
 802b2e8:	002f002f 002f002f 002f002f 002f002f     /./././././././.
 802b2f8:	002f002f 002f002f 002e002f 002e002e     /././././.......
 802b308:	002e002e 002e002e 002e002e 002e002e     ................
 802b318:	002e002e 002e002e 002e002e 002e002e     ................
 802b328:	002e002e 002e002e 002e002e 002e002e     ................
 802b338:	002e002e 002e002e 002e002e 002e002e     ................
 802b348:	002e002e 002e002e 002e002e 002e002e     ................
 802b358:	002e002e 002e002e 002e002e 002e002e     ................
 802b368:	002e002e 002e002e 002e002e 002e002e     ................
 802b378:	002e002e 002e002e 002e002e 002e002e     ................
 802b388:	002e002e 002e002e 002e002e 002e002e     ................
 802b398:	002e002e 002e002e 002e002e 002e002e     ................
 802b3a8:	002e002e 002e002e 002e002e 002e002e     ................
 802b3b8:	002e002e 002e002e 002e002e 002e002e     ................
 802b3c8:	002d002e 002d002d 002d002d 002d002d     ..-.-.-.-.-.-.-.
 802b3d8:	002d002d 002d002d 002d002d 002d002d     -.-.-.-.-.-.-.-.
 802b3e8:	002d002d 002d002d 002d002d 002d002d     -.-.-.-.-.-.-.-.
 802b3f8:	002d002d 002d002d 002d002d 002d002d     -.-.-.-.-.-.-.-.
 802b408:	002d002d 002d002d 002d002d 002d002d     -.-.-.-.-.-.-.-.
 802b418:	002d002d 002d002d 002d002d 002d002d     -.-.-.-.-.-.-.-.
 802b428:	002d002d 002d002d 002d002d 002d002d     -.-.-.-.-.-.-.-.
 802b438:	002d002d 002d002d 002d002d 002d002d     -.-.-.-.-.-.-.-.
 802b448:	002d002d 002d002d 002d002d 002d002d     -.-.-.-.-.-.-.-.
 802b458:	002d002d 002d002d 002d002d 002d002d     -.-.-.-.-.-.-.-.
 802b468:	002d002d 002d002d 002d002d 002d002d     -.-.-.-.-.-.-.-.
 802b478:	002d002d 002d002d 002d002d 002d002d     -.-.-.-.-.-.-.-.
 802b488:	002d002d 002d002d 002c002d 002c002c     -.-.-.-.-.,.,.,.
 802b498:	002c002c 002c002c 002c002c 002c002c     ,.,.,.,.,.,.,.,.
 802b4a8:	002c002c 002c002c 002c002c 002c002c     ,.,.,.,.,.,.,.,.
 802b4b8:	002c002c 002c002c 002c002c 002c002c     ,.,.,.,.,.,.,.,.
 802b4c8:	002c002c 002c002c 002c002c 002c002c     ,.,.,.,.,.,.,.,.
 802b4d8:	002c002c 002c002c 002c002c 002c002c     ,.,.,.,.,.,.,.,.
 802b4e8:	002c002c 002c002c 002c002c 002c002c     ,.,.,.,.,.,.,.,.
 802b4f8:	002c002c 002c002c 002c002c 002c002c     ,.,.,.,.,.,.,.,.
 802b508:	002c002c 002c002c 002c002c 002c002c     ,.,.,.,.,.,.,.,.
 802b518:	002c002c 002c002c 002c002c 002c002c     ,.,.,.,.,.,.,.,.
 802b528:	002c002c 002c002c 002c002c 002c002c     ,.,.,.,.,.,.,.,.
 802b538:	002c002c 002c002c 002c002c 002c002c     ,.,.,.,.,.,.,.,.
 802b548:	002c002c 002c002c 002c002c 002c002c     ,.,.,.,.,.,.,.,.
 802b558:	002c002c 002b002c 002b002b 002b002b     ,.,.,.+.+.+.+.+.
 802b568:	002b002b 002b002b 002b002b 002b002b     +.+.+.+.+.+.+.+.
 802b578:	002b002b 002b002b 002b002b 002b002b     +.+.+.+.+.+.+.+.
 802b588:	002b002b 002b002b 002b002b 002b002b     +.+.+.+.+.+.+.+.
 802b598:	002b002b 002b002b 002b002b 002b002b     +.+.+.+.+.+.+.+.
 802b5a8:	002b002b 002b002b 002b002b 002b002b     +.+.+.+.+.+.+.+.
 802b5b8:	002b002b 002b002b 002b002b 002b002b     +.+.+.+.+.+.+.+.
 802b5c8:	002b002b 002b002b 002b002b 002b002b     +.+.+.+.+.+.+.+.
 802b5d8:	002b002b 002b002b 002b002b 002b002b     +.+.+.+.+.+.+.+.
 802b5e8:	002b002b 002b002b 002b002b 002b002b     +.+.+.+.+.+.+.+.
 802b5f8:	002b002b 002b002b 002b002b 002b002b     +.+.+.+.+.+.+.+.
 802b608:	002b002b 002b002b 002b002b 002b002b     +.+.+.+.+.+.+.+.
 802b618:	002b002b 002b002b 002b002b 002b002b     +.+.+.+.+.+.+.+.
 802b628:	002b002b 002a002a 002a002a 002a002a     +.+.*.*.*.*.*.*.
 802b638:	002a002a 002a002a 002a002a 002a002a     *.*.*.*.*.*.*.*.
 802b648:	002a002a 002a002a 002a002a 002a002a     *.*.*.*.*.*.*.*.
 802b658:	002a002a 002a002a 002a002a 002a002a     *.*.*.*.*.*.*.*.
 802b668:	002a002a 002a002a 002a002a 002a002a     *.*.*.*.*.*.*.*.
 802b678:	002a002a 002a002a 002a002a 002a002a     *.*.*.*.*.*.*.*.
 802b688:	002a002a 002a002a 002a002a 002a002a     *.*.*.*.*.*.*.*.
 802b698:	002a002a 002a002a 002a002a 002a002a     *.*.*.*.*.*.*.*.
 802b6a8:	002a002a 002a002a 002a002a 002a002a     *.*.*.*.*.*.*.*.
 802b6b8:	002a002a 002a002a 002a002a 002a002a     *.*.*.*.*.*.*.*.
 802b6c8:	002a002a 002a002a 002a002a 002a002a     *.*.*.*.*.*.*.*.
 802b6d8:	002a002a 002a002a 002a002a 002a002a     *.*.*.*.*.*.*.*.
 802b6e8:	002a002a 002a002a 002a002a 002a002a     *.*.*.*.*.*.*.*.
 802b6f8:	002a002a 00290029 00290029 00290029     *.*.).).).).).).
 802b708:	00290029 00290029 00290029 00290029     ).).).).).).).).
 802b718:	00290029 00290029 00290029 00290029     ).).).).).).).).
 802b728:	00290029 00290029 00290029 00290029     ).).).).).).).).
 802b738:	00290029 00290029 00290029 00290029     ).).).).).).).).
 802b748:	00290029 00290029 00290029 00290029     ).).).).).).).).
 802b758:	00290029 00290029 00290029 00290029     ).).).).).).).).
 802b768:	00290029 00290029 00290029 00290029     ).).).).).).).).
 802b778:	00290029 00290029 00290029 00290029     ).).).).).).).).
 802b788:	00290029 00290029 00290029 00290029     ).).).).).).).).
 802b798:	00290029 00290029 00290029 00290029     ).).).).).).).).
 802b7a8:	00290029 00290029 00290029 00290029     ).).).).).).).).
 802b7b8:	00290029 00290029 00290029 00290029     ).).).).).).).).
 802b7c8:	00290029 00280029 00280028 00280028     ).).).(.(.(.(.(.
 802b7d8:	00280028 00280028 00280028 00280028     (.(.(.(.(.(.(.(.
 802b7e8:	00280028 00280028 00280028 00280028     (.(.(.(.(.(.(.(.
 802b7f8:	00280028 00280028 00280028 00280028     (.(.(.(.(.(.(.(.
 802b808:	00280028 00280028 00280028 00280028     (.(.(.(.(.(.(.(.
 802b818:	00280028 00280028 00280028 00280028     (.(.(.(.(.(.(.(.
 802b828:	00280028 00280028 00280028 00280028     (.(.(.(.(.(.(.(.
 802b838:	00280028 00280028 00280028 00280028     (.(.(.(.(.(.(.(.
 802b848:	00280028 00280028 00280028 00280028     (.(.(.(.(.(.(.(.
 802b858:	00280028 00280028 00280028 00280028     (.(.(.(.(.(.(.(.
 802b868:	00280028 00280028 00280028 00280028     (.(.(.(.(.(.(.(.
 802b878:	00280028 00280028 00280028 00280028     (.(.(.(.(.(.(.(.
 802b888:	00280028 00280028 00280028 00280028     (.(.(.(.(.(.(.(.
 802b898:	00280028 00280028 00280028 00270027     (.(.(.(.(.(.'.'.
 802b8a8:	00270027 00270027 00270027 00270027     '.'.'.'.'.'.'.'.
 802b8b8:	00270027 00270027 00270027 00270027     '.'.'.'.'.'.'.'.
 802b8c8:	00270027 00270027 00270027 00270027     '.'.'.'.'.'.'.'.
 802b8d8:	00270027 00270027 00270027 00270027     '.'.'.'.'.'.'.'.
 802b8e8:	00270027 00270027 00270027 00270027     '.'.'.'.'.'.'.'.
 802b8f8:	00270027 00270027 00270027 00270027     '.'.'.'.'.'.'.'.
 802b908:	00270027 00270027 00270027 00270027     '.'.'.'.'.'.'.'.
 802b918:	00270027 00270027 00270027 00270027     '.'.'.'.'.'.'.'.
 802b928:	00270027 00270027 00270027 00270027     '.'.'.'.'.'.'.'.
 802b938:	00270027 00270027 00270027 00270027     '.'.'.'.'.'.'.'.
 802b948:	00270027 00270027 00270027 00270027     '.'.'.'.'.'.'.'.
 802b958:	00270027 00270027 00270027 00270027     '.'.'.'.'.'.'.'.
 802b968:	00270027 00270027 00270027 00270027     '.'.'.'.'.'.'.'.
 802b978:	00270027 00260026 00260026 00260026     '.'.&.&.&.&.&.&.
 802b988:	00260026 00260026 00260026 00260026     &.&.&.&.&.&.&.&.
 802b998:	00260026 00260026 00260026 00260026     &.&.&.&.&.&.&.&.
 802b9a8:	00260026 00260026 00260026 00260026     &.&.&.&.&.&.&.&.
 802b9b8:	00260026 00260026 00260026 00260026     &.&.&.&.&.&.&.&.
 802b9c8:	00260026 00260026 00260026 00260026     &.&.&.&.&.&.&.&.
 802b9d8:	00260026 00260026 00260026 00260026     &.&.&.&.&.&.&.&.
 802b9e8:	00260026 00260026 00260026 00260026     &.&.&.&.&.&.&.&.
 802b9f8:	00260026 00260026 00260026 00260026     &.&.&.&.&.&.&.&.
 802ba08:	00260026 00260026 00260026 00260026     &.&.&.&.&.&.&.&.
 802ba18:	00260026 00260026 00260026 00260026     &.&.&.&.&.&.&.&.
 802ba28:	00260026 00260026 00260026 00260026     &.&.&.&.&.&.&.&.
 802ba38:	00260026 00260026 00260026 00260026     &.&.&.&.&.&.&.&.
 802ba48:	00260026 00260026 00260026 00250026     &.&.&.&.&.&.&.%.
 802ba58:	00250025 00250025 00250025 00250025     %.%.%.%.%.%.%.%.
 802ba68:	00250025 00250025 00250025 00250025     %.%.%.%.%.%.%.%.
 802ba78:	00250025 00250025 00250025 00250025     %.%.%.%.%.%.%.%.
 802ba88:	00250025 00250025 00250025 00250025     %.%.%.%.%.%.%.%.
 802ba98:	00250025 00250025 00250025 00250025     %.%.%.%.%.%.%.%.
 802baa8:	00250025 00250025 00250025 00250025     %.%.%.%.%.%.%.%.
 802bab8:	00250025 00250025 00250025 00250025     %.%.%.%.%.%.%.%.
 802bac8:	00250025 00250025 00250025 00250025     %.%.%.%.%.%.%.%.
 802bad8:	00250025 00250025 00250025 00250025     %.%.%.%.%.%.%.%.
 802bae8:	00250025 00250025 00250025 00250025     %.%.%.%.%.%.%.%.
 802baf8:	00250025 00250025 00250025 00250025     %.%.%.%.%.%.%.%.
 802bb08:	00250025 00250025 00250025 00250025     %.%.%.%.%.%.%.%.
 802bb18:	00250025 00250025 00250025 00250025     %.%.%.%.%.%.%.%.
 802bb28:	00250025 00250025 00240025 00240024     %.%.%.%.%.$.$.$.
 802bb38:	00240024 00240024 00240024 00240024     $.$.$.$.$.$.$.$.
 802bb48:	00240024 00240024 00240024 00240024     $.$.$.$.$.$.$.$.
 802bb58:	00240024 00240024 00240024 00240024     $.$.$.$.$.$.$.$.
 802bb68:	00240024 00240024 00240024 00240024     $.$.$.$.$.$.$.$.
 802bb78:	00240024 00240024 00240024 00240024     $.$.$.$.$.$.$.$.
 802bb88:	00240024 00240024 00240024 00240024     $.$.$.$.$.$.$.$.
 802bb98:	00240024 00240024 00240024 00240024     $.$.$.$.$.$.$.$.
 802bba8:	00240024 00240024 00240024 00240024     $.$.$.$.$.$.$.$.
 802bbb8:	00240024 00240024 00240024 00240024     $.$.$.$.$.$.$.$.
 802bbc8:	00240024 00240024 00240024 00240024     $.$.$.$.$.$.$.$.
 802bbd8:	00240024 00240024 00240024 00240024     $.$.$.$.$.$.$.$.
 802bbe8:	00240024 00240024 00240024 00240024     $.$.$.$.$.$.$.$.
 802bbf8:	00240024 00240024 00240024 00240024     $.$.$.$.$.$.$.$.
 802bc08:	00240024 00240024 00230024 00230023     $.$.$.$.$.#.#.#.
 802bc18:	00230023 00230023 00230023 00230023     #.#.#.#.#.#.#.#.
 802bc28:	00230023 00230023 00230023 00230023     #.#.#.#.#.#.#.#.
 802bc38:	00230023 00230023 00230023 00230023     #.#.#.#.#.#.#.#.
 802bc48:	00230023 00230023 00230023 00230023     #.#.#.#.#.#.#.#.
 802bc58:	00230023 00230023 00230023 00230023     #.#.#.#.#.#.#.#.
 802bc68:	00230023 00230023 00230023 00230023     #.#.#.#.#.#.#.#.
 802bc78:	00230023 00230023 00230023 00230023     #.#.#.#.#.#.#.#.
 802bc88:	00230023 00230023 00230023 00230023     #.#.#.#.#.#.#.#.
 802bc98:	00230023 00230023 00230023 00230023     #.#.#.#.#.#.#.#.
 802bca8:	00230023 00230023 00230023 00230023     #.#.#.#.#.#.#.#.
 802bcb8:	00230023 00230023 00230023 00230023     #.#.#.#.#.#.#.#.
 802bcc8:	00230023 00230023 00230023 00230023     #.#.#.#.#.#.#.#.
 802bcd8:	00230023 00230023 00230023 00230023     #.#.#.#.#.#.#.#.
 802bce8:	00230023 00230023 00230023 00220022     #.#.#.#.#.#.".".
 802bcf8:	00220022 00220022 00220022 00220022     ".".".".".".".".
 802bd08:	00220022 00220022 00220022 00220022     ".".".".".".".".
 802bd18:	00220022 00220022 00220022 00220022     ".".".".".".".".
 802bd28:	00220022 00220022 00220022 00220022     ".".".".".".".".
 802bd38:	00220022 00220022 00220022 00220022     ".".".".".".".".
 802bd48:	00220022 00220022 00220022 00220022     ".".".".".".".".
 802bd58:	00220022 00220022 00220022 00220022     ".".".".".".".".
 802bd68:	00220022 00220022 00220022 00220022     ".".".".".".".".
 802bd78:	00220022 00220022 00220022 00220022     ".".".".".".".".
 802bd88:	00220022 00220022 00220022 00220022     ".".".".".".".".
 802bd98:	00220022 00220022 00220022 00220022     ".".".".".".".".
 802bda8:	00220022 00220022 00220022 00220022     ".".".".".".".".
 802bdb8:	00220022 00220022 00220022 00220022     ".".".".".".".".
 802bdc8:	00220022 00220022 00220022 00220022     ".".".".".".".".
 802bdd8:	00210022 00210021 00210021 00210021     ".!.!.!.!.!.!.!.
 802bde8:	00210021 00210021 00210021 00210021     !.!.!.!.!.!.!.!.
 802bdf8:	00210021 00210021 00210021 00210021     !.!.!.!.!.!.!.!.
 802be08:	00210021 00210021 00210021 00210021     !.!.!.!.!.!.!.!.
 802be18:	00210021 00210021 00210021 00210021     !.!.!.!.!.!.!.!.
 802be28:	00210021 00210021 00210021 00210021     !.!.!.!.!.!.!.!.
 802be38:	00210021 00210021 00210021 00210021     !.!.!.!.!.!.!.!.
 802be48:	00210021 00210021 00210021 00210021     !.!.!.!.!.!.!.!.
 802be58:	00210021 00210021 00210021 00210021     !.!.!.!.!.!.!.!.
 802be68:	00210021 00210021 00210021 00210021     !.!.!.!.!.!.!.!.
 802be78:	00210021 00210021 00210021 00210021     !.!.!.!.!.!.!.!.
 802be88:	00210021 00210021 00210021 00210021     !.!.!.!.!.!.!.!.
 802be98:	00210021 00210021 00210021 00210021     !.!.!.!.!.!.!.!.
 802bea8:	00210021 00210021 00210021 00210021     !.!.!.!.!.!.!.!.
 802beb8:	00210021 00210021 00200021 00200020     !.!.!.!.!. . . .
 802bec8:	00200020 00200020 00200020 00200020      . . . . . . . .
 802bed8:	00200020 00200020 00200020 00200020      . . . . . . . .
 802bee8:	00200020 00200020 00200020 00200020      . . . . . . . .
 802bef8:	00200020 00200020 00200020 00200020      . . . . . . . .
 802bf08:	00200020 00200020 00200020 00200020      . . . . . . . .
 802bf18:	00200020 00200020 00200020 00200020      . . . . . . . .
 802bf28:	00200020 00200020 00200020 00200020      . . . . . . . .
 802bf38:	00200020 00200020 00200020 00200020      . . . . . . . .
 802bf48:	00200020 00200020 00200020 00200020      . . . . . . . .
 802bf58:	00200020 00200020 00200020 00200020      . . . . . . . .
 802bf68:	00200020 00200020 00200020 00200020      . . . . . . . .
 802bf78:	00200020 00200020 00200020 00200020      . . . . . . . .
 802bf88:	00200020 00200020 00200020 00200020      . . . . . . . .
 802bf98:	00200020 00200020 00200020 00200020      . . . . . . . .
 802bfa8:	00200020 001f0020 001f001f 001f001f      . . ...........
 802bfb8:	001f001f 001f001f 001f001f 001f001f     ................
 802bfc8:	001f001f 001f001f 001f001f 001f001f     ................
 802bfd8:	001f001f 001f001f 001f001f 001f001f     ................
 802bfe8:	001f001f 001f001f 001f001f 001f001f     ................
 802bff8:	001f001f 001f001f 001f001f 001f001f     ................
 802c008:	001f001f 001f001f 001f001f 001f001f     ................
 802c018:	001f001f 001f001f 001f001f 001f001f     ................
 802c028:	001f001f 001f001f 001f001f 001f001f     ................
 802c038:	001f001f 001f001f 001f001f 001f001f     ................
 802c048:	001f001f 001f001f 001f001f 001f001f     ................
 802c058:	001f001f 001f001f 001f001f 001f001f     ................
 802c068:	001f001f 001f001f 001f001f 001f001f     ................
 802c078:	001f001f 001f001f 001f001f 001f001f     ................
 802c088:	001f001f 001f001f 001f001f 001f001f     ................
 802c098:	001f001f 001e001f 001e001e 001e001e     ................
 802c0a8:	001e001e 001e001e 001e001e 001e001e     ................
 802c0b8:	001e001e 001e001e 001e001e 001e001e     ................
 802c0c8:	001e001e 001e001e 001e001e 001e001e     ................
 802c0d8:	001e001e 001e001e 001e001e 001e001e     ................
 802c0e8:	001e001e 001e001e 001e001e 001e001e     ................
 802c0f8:	001e001e 001e001e 001e001e 001e001e     ................
 802c108:	001e001e 001e001e 001e001e 001e001e     ................
 802c118:	001e001e 001e001e 001e001e 001e001e     ................
 802c128:	001e001e 001e001e 001e001e 001e001e     ................
 802c138:	001e001e 001e001e 001e001e 001e001e     ................
 802c148:	001e001e 001e001e 001e001e 001e001e     ................
 802c158:	001e001e 001e001e 001e001e 001e001e     ................
 802c168:	001e001e 001e001e 001e001e 001e001e     ................
 802c178:	001e001e 001e001e 001e001e 001e001e     ................
 802c188:	001e001e 001e001e 001d001e 001d001d     ................
 802c198:	001d001d 001d001d 001d001d 001d001d     ................
 802c1a8:	001d001d 001d001d 001d001d 001d001d     ................
 802c1b8:	001d001d 001d001d 001d001d 001d001d     ................
 802c1c8:	001d001d 001d001d 001d001d 001d001d     ................
 802c1d8:	001d001d 001d001d 001d001d 001d001d     ................
 802c1e8:	001d001d 001d001d 001d001d 001d001d     ................
 802c1f8:	001d001d 001d001d 001d001d 001d001d     ................
 802c208:	001d001d 001d001d 001d001d 001d001d     ................
 802c218:	001d001d 001d001d 001d001d 001d001d     ................
 802c228:	001d001d 001d001d 001d001d 001d001d     ................
 802c238:	001d001d 001d001d 001d001d 001d001d     ................
 802c248:	001d001d 001d001d 001d001d 001d001d     ................
 802c258:	001d001d 001d001d 001d001d 001d001d     ................
 802c268:	001d001d 001d001d 001d001d 001d001d     ................
 802c278:	001d001d 001d001d 001d001d 001d001d     ................
 802c288:	001c001d 001c001c 001c001c 001c001c     ................
 802c298:	001c001c 001c001c 001c001c 001c001c     ................
 802c2a8:	001c001c 001c001c 001c001c 001c001c     ................
 802c2b8:	001c001c 001c001c 001c001c 001c001c     ................
 802c2c8:	001c001c 001c001c 001c001c 001c001c     ................
 802c2d8:	001c001c 001c001c 001c001c 001c001c     ................
 802c2e8:	001c001c 001c001c 001c001c 001c001c     ................
 802c2f8:	001c001c 001c001c 001c001c 001c001c     ................
 802c308:	001c001c 001c001c 001c001c 001c001c     ................
 802c318:	001c001c 001c001c 001c001c 001c001c     ................
 802c328:	001c001c 001c001c 001c001c 001c001c     ................
 802c338:	001c001c 001c001c 001c001c 001c001c     ................
 802c348:	001c001c 001c001c 001c001c 001c001c     ................
 802c358:	001c001c 001c001c 001c001c 001c001c     ................
 802c368:	001c001c 001c001c 001c001c 001c001c     ................
 802c378:	001c001c 001c001c 001c001c 001b001c     ................
 802c388:	001b001b 001b001b 001b001b 001b001b     ................
 802c398:	001b001b 001b001b 001b001b 001b001b     ................
 802c3a8:	001b001b 001b001b 001b001b 001b001b     ................
 802c3b8:	001b001b 001b001b 001b001b 001b001b     ................
 802c3c8:	001b001b 001b001b 001b001b 001b001b     ................
 802c3d8:	001b001b 001b001b 001b001b 001b001b     ................
 802c3e8:	001b001b 001b001b 001b001b 001b001b     ................
 802c3f8:	001b001b 001b001b 001b001b 001b001b     ................
 802c408:	001b001b 001b001b 001b001b 001b001b     ................
 802c418:	001b001b 001b001b 001b001b 001b001b     ................
 802c428:	001b001b 001b001b 001b001b 001b001b     ................
 802c438:	001b001b 001b001b 001b001b 001b001b     ................
 802c448:	001b001b 001b001b 001b001b 001b001b     ................
 802c458:	001b001b 001b001b 001b001b 001b001b     ................
 802c468:	001b001b 001b001b 001b001b 001b001b     ................
 802c478:	001b001b 001b001b 001b001b 001a001b     ................
 802c488:	001a001a 001a001a 001a001a 001a001a     ................
 802c498:	001a001a 001a001a 001a001a 001a001a     ................
 802c4a8:	001a001a 001a001a 001a001a 001a001a     ................
 802c4b8:	001a001a 001a001a 001a001a 001a001a     ................
 802c4c8:	001a001a 001a001a 001a001a 001a001a     ................
 802c4d8:	001a001a 001a001a 001a001a 001a001a     ................
 802c4e8:	001a001a 001a001a 001a001a 001a001a     ................
 802c4f8:	001a001a 001a001a 001a001a 001a001a     ................
 802c508:	001a001a 001a001a 001a001a 001a001a     ................
 802c518:	001a001a 001a001a 001a001a 001a001a     ................
 802c528:	001a001a 001a001a 001a001a 001a001a     ................
 802c538:	001a001a 001a001a 001a001a 001a001a     ................
 802c548:	001a001a 001a001a 001a001a 001a001a     ................
 802c558:	001a001a 001a001a 001a001a 001a001a     ................
 802c568:	001a001a 001a001a 001a001a 001a001a     ................
 802c578:	001a001a 001a001a 001a001a 001a001a     ................
 802c588:	0019001a 00190019 00190019 00190019     ................
 802c598:	00190019 00190019 00190019 00190019     ................
 802c5a8:	00190019 00190019 00190019 00190019     ................
 802c5b8:	00190019 00190019 00190019 00190019     ................
 802c5c8:	00190019 00190019 00190019 00190019     ................
 802c5d8:	00190019 00190019 00190019 00190019     ................
 802c5e8:	00190019 00190019 00190019 00190019     ................
 802c5f8:	00190019 00190019 00190019 00190019     ................
 802c608:	00190019 00190019 00190019 00190019     ................
 802c618:	00190019 00190019 00190019 00190019     ................
 802c628:	00190019 00190019 00190019 00190019     ................
 802c638:	00190019 00190019 00190019 00190019     ................
 802c648:	00190019 00190019 00190019 00190019     ................
 802c658:	00190019 00190019 00190019 00190019     ................
 802c668:	00190019 00190019 00190019 00190019     ................
 802c678:	00190019 00190019 00190019 00190019     ................
 802c688:	00190019 00190019 00190019 00180018     ................
 802c698:	00180018 00180018 00180018 00180018     ................
 802c6a8:	00180018 00180018 00180018 00180018     ................
 802c6b8:	00180018 00180018 00180018 00180018     ................
 802c6c8:	00180018 00180018 00180018 00180018     ................
 802c6d8:	00180018 00180018 00180018 00180018     ................
 802c6e8:	00180018 00180018 00180018 00180018     ................
 802c6f8:	00180018 00180018 00180018 00180018     ................
 802c708:	00180018 00180018 00180018 00180018     ................
 802c718:	00180018 00180018 00180018 00180018     ................
 802c728:	00180018 00180018 00180018 00180018     ................
 802c738:	00180018 00180018 00180018 00180018     ................
 802c748:	00180018 00180018 00180018 00180018     ................
 802c758:	00180018 00180018 00180018 00180018     ................
 802c768:	00180018 00180018 00180018 00180018     ................
 802c778:	00180018 00180018 00180018 00180018     ................
 802c788:	00180018 00180018 00180018 00180018     ................
 802c798:	00180018 00180018 00180018 00170017     ................
 802c7a8:	00170017 00170017 00170017 00170017     ................
 802c7b8:	00170017 00170017 00170017 00170017     ................
 802c7c8:	00170017 00170017 00170017 00170017     ................
 802c7d8:	00170017 00170017 00170017 00170017     ................
 802c7e8:	00170017 00170017 00170017 00170017     ................
 802c7f8:	00170017 00170017 00170017 00170017     ................
 802c808:	00170017 00170017 00170017 00170017     ................
 802c818:	00170017 00170017 00170017 00170017     ................
 802c828:	00170017 00170017 00170017 00170017     ................
 802c838:	00170017 00170017 00170017 00170017     ................
 802c848:	00170017 00170017 00170017 00170017     ................
 802c858:	00170017 00170017 00170017 00170017     ................
 802c868:	00170017 00170017 00170017 00170017     ................
 802c878:	00170017 00170017 00170017 00170017     ................
 802c888:	00170017 00170017 00170017 00170017     ................
 802c898:	00170017 00170017 00170017 00170017     ................
 802c8a8:	00170017 00170017 00170017 00170017     ................
 802c8b8:	00160016 00160016 00160016 00160016     ................
 802c8c8:	00160016 00160016 00160016 00160016     ................
 802c8d8:	00160016 00160016 00160016 00160016     ................
 802c8e8:	00160016 00160016 00160016 00160016     ................
 802c8f8:	00160016 00160016 00160016 00160016     ................
 802c908:	00160016 00160016 00160016 00160016     ................
 802c918:	00160016 00160016 00160016 00160016     ................
 802c928:	00160016 00160016 00160016 00160016     ................
 802c938:	00160016 00160016 00160016 00160016     ................
 802c948:	00160016 00160016 00160016 00160016     ................
 802c958:	00160016 00160016 00160016 00160016     ................
 802c968:	00160016 00160016 00160016 00160016     ................
 802c978:	00160016 00160016 00160016 00160016     ................
 802c988:	00160016 00160016 00160016 00160016     ................
 802c998:	00160016 00160016 00160016 00160016     ................
 802c9a8:	00160016 00160016 00160016 00160016     ................
 802c9b8:	00160016 00160016 00160016 00160016     ................
 802c9c8:	00160016 00160016 00150016 00150015     ................
 802c9d8:	00150015 00150015 00150015 00150015     ................
 802c9e8:	00150015 00150015 00150015 00150015     ................
 802c9f8:	00150015 00150015 00150015 00150015     ................
 802ca08:	00150015 00150015 00150015 00150015     ................
 802ca18:	00150015 00150015 00150015 00150015     ................
 802ca28:	00150015 00150015 00150015 00150015     ................
 802ca38:	00150015 00150015 00150015 00150015     ................
 802ca48:	00150015 00150015 00150015 00150015     ................
 802ca58:	00150015 00150015 00150015 00150015     ................
 802ca68:	00150015 00150015 00150015 00150015     ................
 802ca78:	00150015 00150015 00150015 00150015     ................
 802ca88:	00150015 00150015 00150015 00150015     ................
 802ca98:	00150015 00150015 00150015 00150015     ................
 802caa8:	00150015 00150015 00150015 00150015     ................
 802cab8:	00150015 00150015 00150015 00150015     ................
 802cac8:	00150015 00150015 00150015 00150015     ................
 802cad8:	00150015 00150015 00150015 00150015     ................
 802cae8:	00150015 00150015 00150015 00140014     ................
 802caf8:	00140014 00140014 00140014 00140014     ................
 802cb08:	00140014 00140014 00140014 00140014     ................
 802cb18:	00140014 00140014 00140014 00140014     ................
 802cb28:	00140014 00140014 00140014 00140014     ................
 802cb38:	00140014 00140014 00140014 00140014     ................
 802cb48:	00140014 00140014 00140014 00140014     ................
 802cb58:	00140014 00140014 00140014 00140014     ................
 802cb68:	00140014 00140014 00140014 00140014     ................
 802cb78:	00140014 00140014 00140014 00140014     ................
 802cb88:	00140014 00140014 00140014 00140014     ................
 802cb98:	00140014 00140014 00140014 00140014     ................
 802cba8:	00140014 00140014 00140014 00140014     ................
 802cbb8:	00140014 00140014 00140014 00140014     ................
 802cbc8:	00140014 00140014 00140014 00140014     ................
 802cbd8:	00140014 00140014 00140014 00140014     ................
 802cbe8:	00140014 00140014 00140014 00140014     ................
 802cbf8:	00140014 00140014 00140014 00140014     ................
 802cc08:	00140014 00140014 00140014 00140014     ................
 802cc18:	00140014 00130013 00130013 00130013     ................
 802cc28:	00130013 00130013 00130013 00130013     ................
 802cc38:	00130013 00130013 00130013 00130013     ................
 802cc48:	00130013 00130013 00130013 00130013     ................
 802cc58:	00130013 00130013 00130013 00130013     ................
 802cc68:	00130013 00130013 00130013 00130013     ................
 802cc78:	00130013 00130013 00130013 00130013     ................
 802cc88:	00130013 00130013 00130013 00130013     ................
 802cc98:	00130013 00130013 00130013 00130013     ................
 802cca8:	00130013 00130013 00130013 00130013     ................
 802ccb8:	00130013 00130013 00130013 00130013     ................
 802ccc8:	00130013 00130013 00130013 00130013     ................
 802ccd8:	00130013 00130013 00130013 00130013     ................
 802cce8:	00130013 00130013 00130013 00130013     ................
 802ccf8:	00130013 00130013 00130013 00130013     ................
 802cd08:	00130013 00130013 00130013 00130013     ................
 802cd18:	00130013 00130013 00130013 00130013     ................
 802cd28:	00130013 00130013 00130013 00130013     ................
 802cd38:	00130013 00130013 00130013 00130013     ................
 802cd48:	00120013 00120012 00120012 00120012     ................
 802cd58:	00120012 00120012 00120012 00120012     ................
 802cd68:	00120012 00120012 00120012 00120012     ................
 802cd78:	00120012 00120012 00120012 00120012     ................
 802cd88:	00120012 00120012 00120012 00120012     ................
 802cd98:	00120012 00120012 00120012 00120012     ................
 802cda8:	00120012 00120012 00120012 00120012     ................
 802cdb8:	00120012 00120012 00120012 00120012     ................
 802cdc8:	00120012 00120012 00120012 00120012     ................
 802cdd8:	00120012 00120012 00120012 00120012     ................
 802cde8:	00120012 00120012 00120012 00120012     ................
 802cdf8:	00120012 00120012 00120012 00120012     ................
 802ce08:	00120012 00120012 00120012 00120012     ................
 802ce18:	00120012 00120012 00120012 00120012     ................
 802ce28:	00120012 00120012 00120012 00120012     ................
 802ce38:	00120012 00120012 00120012 00120012     ................
 802ce48:	00120012 00120012 00120012 00120012     ................
 802ce58:	00120012 00120012 00120012 00120012     ................
 802ce68:	00120012 00120012 00120012 00120012     ................
 802ce78:	00120012 00120012 00110012 00110011     ................
 802ce88:	00110011 00110011 00110011 00110011     ................
 802ce98:	00110011 00110011 00110011 00110011     ................
 802cea8:	00110011 00110011 00110011 00110011     ................
 802ceb8:	00110011 00110011 00110011 00110011     ................
 802cec8:	00110011 00110011 00110011 00110011     ................
 802ced8:	00110011 00110011 00110011 00110011     ................
 802cee8:	00110011 00110011 00110011 00110011     ................
 802cef8:	00110011 00110011 00110011 00110011     ................
 802cf08:	00110011 00110011 00110011 00110011     ................
 802cf18:	00110011 00110011 00110011 00110011     ................
 802cf28:	00110011 00110011 00110011 00110011     ................
 802cf38:	00110011 00110011 00110011 00110011     ................
 802cf48:	00110011 00110011 00110011 00110011     ................
 802cf58:	00110011 00110011 00110011 00110011     ................
 802cf68:	00110011 00110011 00110011 00110011     ................
 802cf78:	00110011 00110011 00110011 00110011     ................
 802cf88:	00110011 00110011 00110011 00110011     ................
 802cf98:	00110011 00110011 00110011 00110011     ................
 802cfa8:	00110011 00110011 00110011 00110011     ................
 802cfb8:	00110011 00110011 00100011 00100010     ................
 802cfc8:	00100010 00100010 00100010 00100010     ................
 802cfd8:	00100010 00100010 00100010 00100010     ................
 802cfe8:	00100010 00100010 00100010 00100010     ................
 802cff8:	00100010 00100010 00100010 00100010     ................
 802d008:	00100010 00100010 00100010 00100010     ................
 802d018:	00100010 00100010 00100010 00100010     ................
 802d028:	00100010 00100010 00100010 00100010     ................
 802d038:	00100010 00100010 00100010 00100010     ................
 802d048:	00100010 00100010 00100010 00100010     ................
 802d058:	00100010 00100010 00100010 00100010     ................
 802d068:	00100010 00100010 00100010 00100010     ................
 802d078:	00100010 00100010 00100010 00100010     ................
 802d088:	00100010 00100010 00100010 00100010     ................
 802d098:	00100010 00100010 00100010 00100010     ................
 802d0a8:	00100010 00100010 00100010 00100010     ................
 802d0b8:	00100010 00100010 00100010 00100010     ................
 802d0c8:	00100010 00100010 00100010 00100010     ................
 802d0d8:	00100010 00100010 00100010 00100010     ................
 802d0e8:	00100010 00100010 00100010 00100010     ................
 802d0f8:	00100010 00100010 00100010 00100010     ................
 802d108:	00100010 000f000f 000f000f 000f000f     ................
 802d118:	000f000f 000f000f 000f000f 000f000f     ................
 802d128:	000f000f 000f000f 000f000f 000f000f     ................
 802d138:	000f000f 000f000f 000f000f 000f000f     ................
 802d148:	000f000f 000f000f 000f000f 000f000f     ................
 802d158:	000f000f 000f000f 000f000f 000f000f     ................
 802d168:	000f000f 000f000f 000f000f 000f000f     ................
 802d178:	000f000f 000f000f 000f000f 000f000f     ................
 802d188:	000f000f 000f000f 000f000f 000f000f     ................
 802d198:	000f000f 000f000f 000f000f 000f000f     ................
 802d1a8:	000f000f 000f000f 000f000f 000f000f     ................
 802d1b8:	000f000f 000f000f 000f000f 000f000f     ................
 802d1c8:	000f000f 000f000f 000f000f 000f000f     ................
 802d1d8:	000f000f 000f000f 000f000f 000f000f     ................
 802d1e8:	000f000f 000f000f 000f000f 000f000f     ................
 802d1f8:	000f000f 000f000f 000f000f 000f000f     ................
 802d208:	000f000f 000f000f 000f000f 000f000f     ................
 802d218:	000f000f 000f000f 000f000f 000f000f     ................
 802d228:	000f000f 000f000f 000f000f 000f000f     ................
 802d238:	000f000f 000f000f 000f000f 000f000f     ................
 802d248:	000f000f 000f000f 000f000f 000f000f     ................
 802d258:	000f000f 000f000f 000e000e 000e000e     ................
 802d268:	000e000e 000e000e 000e000e 000e000e     ................
 802d278:	000e000e 000e000e 000e000e 000e000e     ................
 802d288:	000e000e 000e000e 000e000e 000e000e     ................
 802d298:	000e000e 000e000e 000e000e 000e000e     ................
 802d2a8:	000e000e 000e000e 000e000e 000e000e     ................
 802d2b8:	000e000e 000e000e 000e000e 000e000e     ................
 802d2c8:	000e000e 000e000e 000e000e 000e000e     ................
 802d2d8:	000e000e 000e000e 000e000e 000e000e     ................
 802d2e8:	000e000e 000e000e 000e000e 000e000e     ................
 802d2f8:	000e000e 000e000e 000e000e 000e000e     ................
 802d308:	000e000e 000e000e 000e000e 000e000e     ................
 802d318:	000e000e 000e000e 000e000e 000e000e     ................
 802d328:	000e000e 000e000e 000e000e 000e000e     ................
 802d338:	000e000e 000e000e 000e000e 000e000e     ................
 802d348:	000e000e 000e000e 000e000e 000e000e     ................
 802d358:	000e000e 000e000e 000e000e 000e000e     ................
 802d368:	000e000e 000e000e 000e000e 000e000e     ................
 802d378:	000e000e 000e000e 000e000e 000e000e     ................
 802d388:	000e000e 000e000e 000e000e 000e000e     ................
 802d398:	000e000e 000e000e 000e000e 000e000e     ................
 802d3a8:	000e000e 000e000e 000e000e 000e000e     ................
 802d3b8:	000e000e 000e000e 000d000d 000d000d     ................
 802d3c8:	000d000d 000d000d 000d000d 000d000d     ................
 802d3d8:	000d000d 000d000d 000d000d 000d000d     ................
 802d3e8:	000d000d 000d000d 000d000d 000d000d     ................
 802d3f8:	000d000d 000d000d 000d000d 000d000d     ................
 802d408:	000d000d 000d000d 000d000d 000d000d     ................
 802d418:	000d000d 000d000d 000d000d 000d000d     ................
 802d428:	000d000d 000d000d 000d000d 000d000d     ................
 802d438:	000d000d 000d000d 000d000d 000d000d     ................
 802d448:	000d000d 000d000d 000d000d 000d000d     ................
 802d458:	000d000d 000d000d 000d000d 000d000d     ................
 802d468:	000d000d 000d000d 000d000d 000d000d     ................
 802d478:	000d000d 000d000d 000d000d 000d000d     ................
 802d488:	000d000d 000d000d 000d000d 000d000d     ................
 802d498:	000d000d 000d000d 000d000d 000d000d     ................
 802d4a8:	000d000d 000d000d 000d000d 000d000d     ................
 802d4b8:	000d000d 000d000d 000d000d 000d000d     ................
 802d4c8:	000d000d 000d000d 000d000d 000d000d     ................
 802d4d8:	000d000d 000d000d 000d000d 000d000d     ................
 802d4e8:	000d000d 000d000d 000d000d 000d000d     ................
 802d4f8:	000d000d 000d000d 000d000d 000d000d     ................
 802d508:	000d000d 000d000d 000d000d 000d000d     ................
 802d518:	000d000d 000d000d 000d000d 000d000d     ................
 802d528:	000d000d 000c000c 000c000c 000c000c     ................
 802d538:	000c000c 000c000c 000c000c 000c000c     ................
 802d548:	000c000c 000c000c 000c000c 000c000c     ................
 802d558:	000c000c 000c000c 000c000c 000c000c     ................
 802d568:	000c000c 000c000c 000c000c 000c000c     ................
 802d578:	000c000c 000c000c 000c000c 000c000c     ................
 802d588:	000c000c 000c000c 000c000c 000c000c     ................
 802d598:	000c000c 000c000c 000c000c 000c000c     ................
 802d5a8:	000c000c 000c000c 000c000c 000c000c     ................
 802d5b8:	000c000c 000c000c 000c000c 000c000c     ................
 802d5c8:	000c000c 000c000c 000c000c 000c000c     ................
 802d5d8:	000c000c 000c000c 000c000c 000c000c     ................
 802d5e8:	000c000c 000c000c 000c000c 000c000c     ................
 802d5f8:	000c000c 000c000c 000c000c 000c000c     ................
 802d608:	000c000c 000c000c 000c000c 000c000c     ................
 802d618:	000c000c 000c000c 000c000c 000c000c     ................
 802d628:	000c000c 000c000c 000c000c 000c000c     ................
 802d638:	000c000c 000c000c 000c000c 000c000c     ................
 802d648:	000c000c 000c000c 000c000c 000c000c     ................
 802d658:	000c000c 000c000c 000c000c 000c000c     ................
 802d668:	000c000c 000c000c 000c000c 000c000c     ................
 802d678:	000c000c 000c000c 000c000c 000c000c     ................
 802d688:	000c000c 000c000c 000c000c 000c000c     ................
 802d698:	000c000c 000c000c 000c000c 000c000c     ................
 802d6a8:	000b000b 000b000b 000b000b 000b000b     ................
 802d6b8:	000b000b 000b000b 000b000b 000b000b     ................
 802d6c8:	000b000b 000b000b 000b000b 000b000b     ................
 802d6d8:	000b000b 000b000b 000b000b 000b000b     ................
 802d6e8:	000b000b 000b000b 000b000b 000b000b     ................
 802d6f8:	000b000b 000b000b 000b000b 000b000b     ................
 802d708:	000b000b 000b000b 000b000b 000b000b     ................
 802d718:	000b000b 000b000b 000b000b 000b000b     ................
 802d728:	000b000b 000b000b 000b000b 000b000b     ................
 802d738:	000b000b 000b000b 000b000b 000b000b     ................
 802d748:	000b000b 000b000b 000b000b 000b000b     ................
 802d758:	000b000b 000b000b 000b000b 000b000b     ................
 802d768:	000b000b 000b000b 000b000b 000b000b     ................
 802d778:	000b000b 000b000b 000b000b 000b000b     ................
 802d788:	000b000b 000b000b 000b000b 000b000b     ................
 802d798:	000b000b 000b000b 000b000b 000b000b     ................
 802d7a8:	000b000b 000b000b 000b000b 000b000b     ................
 802d7b8:	000b000b 000b000b 000b000b 000b000b     ................
 802d7c8:	000b000b 000b000b 000b000b 000b000b     ................
 802d7d8:	000b000b 000b000b 000b000b 000b000b     ................
 802d7e8:	000b000b 000b000b 000b000b 000b000b     ................
 802d7f8:	000b000b 000b000b 000b000b 000b000b     ................
 802d808:	000b000b 000b000b 000b000b 000b000b     ................
 802d818:	000b000b 000b000b 000b000b 000b000b     ................
 802d828:	000b000b 000b000b 000b000b 000a000a     ................
 802d838:	000a000a 000a000a 000a000a 000a000a     ................
 802d848:	000a000a 000a000a 000a000a 000a000a     ................
 802d858:	000a000a 000a000a 000a000a 000a000a     ................
 802d868:	000a000a 000a000a 000a000a 000a000a     ................
 802d878:	000a000a 000a000a 000a000a 000a000a     ................
 802d888:	000a000a 000a000a 000a000a 000a000a     ................
 802d898:	000a000a 000a000a 000a000a 000a000a     ................
 802d8a8:	000a000a 000a000a 000a000a 000a000a     ................
 802d8b8:	000a000a 000a000a 000a000a 000a000a     ................
 802d8c8:	000a000a 000a000a 000a000a 000a000a     ................
 802d8d8:	000a000a 000a000a 000a000a 000a000a     ................
 802d8e8:	000a000a 000a000a 000a000a 000a000a     ................
 802d8f8:	000a000a 000a000a 000a000a 000a000a     ................
 802d908:	000a000a 000a000a 000a000a 000a000a     ................
 802d918:	000a000a 000a000a 000a000a 000a000a     ................
 802d928:	000a000a 000a000a 000a000a 000a000a     ................
 802d938:	000a000a 000a000a 000a000a 000a000a     ................
 802d948:	000a000a 000a000a 000a000a 000a000a     ................
 802d958:	000a000a 000a000a 000a000a 000a000a     ................
 802d968:	000a000a 000a000a 000a000a 000a000a     ................
 802d978:	000a000a 000a000a 000a000a 000a000a     ................
 802d988:	000a000a 000a000a 000a000a 000a000a     ................
 802d998:	000a000a 000a000a 000a000a 000a000a     ................
 802d9a8:	000a000a 000a000a 000a000a 000a000a     ................
 802d9b8:	000a000a 000a000a 000a000a 000a000a     ................
 802d9c8:	000a000a 000a000a 0009000a 00090009     ................
 802d9d8:	00090009 00090009 00090009 00090009     ................
 802d9e8:	00090009 00090009 00090009 00090009     ................
 802d9f8:	00090009 00090009 00090009 00090009     ................
 802da08:	00090009 00090009 00090009 00090009     ................
 802da18:	00090009 00090009 00090009 00090009     ................
 802da28:	00090009 00090009 00090009 00090009     ................
 802da38:	00090009 00090009 00090009 00090009     ................
 802da48:	00090009 00090009 00090009 00090009     ................
 802da58:	00090009 00090009 00090009 00090009     ................
 802da68:	00090009 00090009 00090009 00090009     ................
 802da78:	00090009 00090009 00090009 00090009     ................
 802da88:	00090009 00090009 00090009 00090009     ................
 802da98:	00090009 00090009 00090009 00090009     ................
 802daa8:	00090009 00090009 00090009 00090009     ................
 802dab8:	00090009 00090009 00090009 00090009     ................
 802dac8:	00090009 00090009 00090009 00090009     ................
 802dad8:	00090009 00090009 00090009 00090009     ................
 802dae8:	00090009 00090009 00090009 00090009     ................
 802daf8:	00090009 00090009 00090009 00090009     ................
 802db08:	00090009 00090009 00090009 00090009     ................
 802db18:	00090009 00090009 00090009 00090009     ................
 802db28:	00090009 00090009 00090009 00090009     ................
 802db38:	00090009 00090009 00090009 00090009     ................
 802db48:	00090009 00090009 00090009 00090009     ................
 802db58:	00090009 00090009 00090009 00090009     ................
 802db68:	00090009 00090009 00090009 00090009     ................
 802db78:	00090009 00090009 00090009 00090009     ................
 802db88:	00080008 00080008 00080008 00080008     ................
 802db98:	00080008 00080008 00080008 00080008     ................
 802dba8:	00080008 00080008 00080008 00080008     ................
 802dbb8:	00080008 00080008 00080008 00080008     ................
 802dbc8:	00080008 00080008 00080008 00080008     ................
 802dbd8:	00080008 00080008 00080008 00080008     ................
 802dbe8:	00080008 00080008 00080008 00080008     ................
 802dbf8:	00080008 00080008 00080008 00080008     ................
 802dc08:	00080008 00080008 00080008 00080008     ................
 802dc18:	00080008 00080008 00080008 00080008     ................
 802dc28:	00080008 00080008 00080008 00080008     ................
 802dc38:	00080008 00080008 00080008 00080008     ................
 802dc48:	00080008 00080008 00080008 00080008     ................
 802dc58:	00080008 00080008 00080008 00080008     ................
 802dc68:	00080008 00080008 00080008 00080008     ................
 802dc78:	00080008 00080008 00080008 00080008     ................
 802dc88:	00080008 00080008 00080008 00080008     ................
 802dc98:	00080008 00080008 00080008 00080008     ................
 802dca8:	00080008 00080008 00080008 00080008     ................
 802dcb8:	00080008 00080008 00080008 00080008     ................
 802dcc8:	00080008 00080008 00080008 00080008     ................
 802dcd8:	00080008 00080008 00080008 00080008     ................
 802dce8:	00080008 00080008 00080008 00080008     ................
 802dcf8:	00080008 00080008 00080008 00080008     ................
 802dd08:	00080008 00080008 00080008 00080008     ................
 802dd18:	00080008 00080008 00080008 00080008     ................
 802dd28:	00080008 00080008 00080008 00080008     ................
 802dd38:	00080008 00080008 00080008 00080008     ................
 802dd48:	00080008 00080008 00080008 00070008     ................
 802dd58:	00070007 00070007 00070007 00070007     ................
 802dd68:	00070007 00070007 00070007 00070007     ................
 802dd78:	00070007 00070007 00070007 00070007     ................
 802dd88:	00070007 00070007 00070007 00070007     ................
 802dd98:	00070007 00070007 00070007 00070007     ................
 802dda8:	00070007 00070007 00070007 00070007     ................
 802ddb8:	00070007 00070007 00070007 00070007     ................
 802ddc8:	00070007 00070007 00070007 00070007     ................
 802ddd8:	00070007 00070007 00070007 00070007     ................
 802dde8:	00070007 00070007 00070007 00070007     ................
 802ddf8:	00070007 00070007 00070007 00070007     ................
 802de08:	00070007 00070007 00070007 00070007     ................
 802de18:	00070007 00070007 00070007 00070007     ................
 802de28:	00070007 00070007 00070007 00070007     ................
 802de38:	00070007 00070007 00070007 00070007     ................
 802de48:	00070007 00070007 00070007 00070007     ................
 802de58:	00070007 00070007 00070007 00070007     ................
 802de68:	00070007 00070007 00070007 00070007     ................
 802de78:	00070007 00070007 00070007 00070007     ................
 802de88:	00070007 00070007 00070007 00070007     ................
 802de98:	00070007 00070007 00070007 00070007     ................
 802dea8:	00070007 00070007 00070007 00070007     ................
 802deb8:	00070007 00070007 00070007 00070007     ................
 802dec8:	00070007 00070007 00070007 00070007     ................
 802ded8:	00070007 00070007 00070007 00070007     ................
 802dee8:	00070007 00070007 00070007 00070007     ................
 802def8:	00070007 00070007 00070007 00070007     ................
 802df08:	00070007 00070007 00070007 00070007     ................
 802df18:	00070007 00070007 00070007 00070007     ................
 802df28:	00070007 00070007 00070007 00070007     ................
 802df38:	00070007 00070007 00070007 00060007     ................
 802df48:	00060006 00060006 00060006 00060006     ................
 802df58:	00060006 00060006 00060006 00060006     ................
 802df68:	00060006 00060006 00060006 00060006     ................
 802df78:	00060006 00060006 00060006 00060006     ................
 802df88:	00060006 00060006 00060006 00060006     ................
 802df98:	00060006 00060006 00060006 00060006     ................
 802dfa8:	00060006 00060006 00060006 00060006     ................
 802dfb8:	00060006 00060006 00060006 00060006     ................
 802dfc8:	00060006 00060006 00060006 00060006     ................
 802dfd8:	00060006 00060006 00060006 00060006     ................
 802dfe8:	00060006 00060006 00060006 00060006     ................
 802dff8:	00060006 00060006 00060006 00060006     ................
 802e008:	00060006 00060006 00060006 00060006     ................
 802e018:	00060006 00060006 00060006 00060006     ................
 802e028:	00060006 00060006 00060006 00060006     ................
 802e038:	00060006 00060006 00060006 00060006     ................
 802e048:	00060006 00060006 00060006 00060006     ................
 802e058:	00060006 00060006 00060006 00060006     ................
 802e068:	00060006 00060006 00060006 00060006     ................
 802e078:	00060006 00060006 00060006 00060006     ................
 802e088:	00060006 00060006 00060006 00060006     ................
 802e098:	00060006 00060006 00060006 00060006     ................
 802e0a8:	00060006 00060006 00060006 00060006     ................
 802e0b8:	00060006 00060006 00060006 00060006     ................
 802e0c8:	00060006 00060006 00060006 00060006     ................
 802e0d8:	00060006 00060006 00060006 00060006     ................
 802e0e8:	00060006 00060006 00060006 00060006     ................
 802e0f8:	00060006 00060006 00060006 00060006     ................
 802e108:	00060006 00060006 00060006 00060006     ................
 802e118:	00060006 00060006 00060006 00060006     ................
 802e128:	00060006 00060006 00060006 00060006     ................
 802e138:	00060006 00060006 00060006 00060006     ................
 802e148:	00060006 00060006 00060006 00060006     ................
 802e158:	00060006 00050005 00050005 00050005     ................
 802e168:	00050005 00050005 00050005 00050005     ................
 802e178:	00050005 00050005 00050005 00050005     ................
 802e188:	00050005 00050005 00050005 00050005     ................
 802e198:	00050005 00050005 00050005 00050005     ................
 802e1a8:	00050005 00050005 00050005 00050005     ................
 802e1b8:	00050005 00050005 00050005 00050005     ................
 802e1c8:	00050005 00050005 00050005 00050005     ................
 802e1d8:	00050005 00050005 00050005 00050005     ................
 802e1e8:	00050005 00050005 00050005 00050005     ................
 802e1f8:	00050005 00050005 00050005 00050005     ................
 802e208:	00050005 00050005 00050005 00050005     ................
 802e218:	00050005 00050005 00050005 00050005     ................
 802e228:	00050005 00050005 00050005 00050005     ................
 802e238:	00050005 00050005 00050005 00050005     ................
 802e248:	00050005 00050005 00050005 00050005     ................
 802e258:	00050005 00050005 00050005 00050005     ................
 802e268:	00050005 00050005 00050005 00050005     ................
 802e278:	00050005 00050005 00050005 00050005     ................
 802e288:	00050005 00050005 00050005 00050005     ................
 802e298:	00050005 00050005 00050005 00050005     ................
 802e2a8:	00050005 00050005 00050005 00050005     ................
 802e2b8:	00050005 00050005 00050005 00050005     ................
 802e2c8:	00050005 00050005 00050005 00050005     ................
 802e2d8:	00050005 00050005 00050005 00050005     ................
 802e2e8:	00050005 00050005 00050005 00050005     ................
 802e2f8:	00050005 00050005 00050005 00050005     ................
 802e308:	00050005 00050005 00050005 00050005     ................
 802e318:	00050005 00050005 00050005 00050005     ................
 802e328:	00050005 00050005 00050005 00050005     ................
 802e338:	00050005 00050005 00050005 00050005     ................
 802e348:	00050005 00050005 00050005 00050005     ................
 802e358:	00050005 00050005 00050005 00050005     ................
 802e368:	00050005 00050005 00050005 00050005     ................
 802e378:	00050005 00050005 00050005 00050005     ................
 802e388:	00050005 00050005 00050005 00050005     ................
 802e398:	00050005 00050005 00050005 00040004     ................
 802e3a8:	00040004 00040004 00040004 00040004     ................
 802e3b8:	00040004 00040004 00040004 00040004     ................
 802e3c8:	00040004 00040004 00040004 00040004     ................
 802e3d8:	00040004 00040004 00040004 00040004     ................
 802e3e8:	00040004 00040004 00040004 00040004     ................
 802e3f8:	00040004 00040004 00040004 00040004     ................
 802e408:	00040004 00040004 00040004 00040004     ................
 802e418:	00040004 00040004 00040004 00040004     ................
 802e428:	00040004 00040004 00040004 00040004     ................
 802e438:	00040004 00040004 00040004 00040004     ................
 802e448:	00040004 00040004 00040004 00040004     ................
 802e458:	00040004 00040004 00040004 00040004     ................
 802e468:	00040004 00040004 00040004 00040004     ................
 802e478:	00040004 00040004 00040004 00040004     ................
 802e488:	00040004 00040004 00040004 00040004     ................
 802e498:	00040004 00040004 00040004 00040004     ................
 802e4a8:	00040004 00040004 00040004 00040004     ................
 802e4b8:	00040004 00040004 00040004 00040004     ................
 802e4c8:	00040004 00040004 00040004 00040004     ................
 802e4d8:	00040004 00040004 00040004 00040004     ................
 802e4e8:	00040004 00040004 00040004 00040004     ................
 802e4f8:	00040004 00040004 00040004 00040004     ................
 802e508:	00040004 00040004 00040004 00040004     ................
 802e518:	00040004 00040004 00040004 00040004     ................
 802e528:	00040004 00040004 00040004 00040004     ................
 802e538:	00040004 00040004 00040004 00040004     ................
 802e548:	00040004 00040004 00040004 00040004     ................
 802e558:	00040004 00040004 00040004 00040004     ................
 802e568:	00040004 00040004 00040004 00040004     ................
 802e578:	00040004 00040004 00040004 00040004     ................
 802e588:	00040004 00040004 00040004 00040004     ................
 802e598:	00040004 00040004 00040004 00040004     ................
 802e5a8:	00040004 00040004 00040004 00040004     ................
 802e5b8:	00040004 00040004 00040004 00040004     ................
 802e5c8:	00040004 00040004 00040004 00040004     ................
 802e5d8:	00040004 00040004 00040004 00040004     ................
 802e5e8:	00040004 00040004 00040004 00040004     ................
 802e5f8:	00040004 00040004 00040004 00040004     ................
 802e608:	00040004 00040004 00040004 00040004     ................
 802e618:	00040004 00040004 00040004 00040004     ................
 802e628:	00040004 00040004 00030004 00030003     ................
 802e638:	00030003 00030003 00030003 00030003     ................
 802e648:	00030003 00030003 00030003 00030003     ................
 802e658:	00030003 00030003 00030003 00030003     ................
 802e668:	00030003 00030003 00030003 00030003     ................
 802e678:	00030003 00030003 00030003 00030003     ................
 802e688:	00030003 00030003 00030003 00030003     ................
 802e698:	00030003 00030003 00030003 00030003     ................
 802e6a8:	00030003 00030003 00030003 00030003     ................
 802e6b8:	00030003 00030003 00030003 00030003     ................
 802e6c8:	00030003 00030003 00030003 00030003     ................
 802e6d8:	00030003 00030003 00030003 00030003     ................
 802e6e8:	00030003 00030003 00030003 00030003     ................
 802e6f8:	00030003 00030003 00030003 00030003     ................
 802e708:	00030003 00030003 00030003 00030003     ................
 802e718:	00030003 00030003 00030003 00030003     ................
 802e728:	00030003 00030003 00030003 00030003     ................
 802e738:	00030003 00030003 00030003 00030003     ................
 802e748:	00030003 00030003 00030003 00030003     ................
 802e758:	00030003 00030003 00030003 00030003     ................
 802e768:	00030003 00030003 00030003 00030003     ................
 802e778:	00030003 00030003 00030003 00030003     ................
 802e788:	00030003 00030003 00030003 00030003     ................
 802e798:	00030003 00030003 00030003 00030003     ................
 802e7a8:	00030003 00030003 00030003 00030003     ................
 802e7b8:	00030003 00030003 00030003 00030003     ................
 802e7c8:	00030003 00030003 00030003 00030003     ................
 802e7d8:	00030003 00030003 00030003 00030003     ................
 802e7e8:	00030003 00030003 00030003 00030003     ................
 802e7f8:	00030003 00030003 00030003 00030003     ................
 802e808:	00030003 00030003 00030003 00030003     ................
 802e818:	00030003 00030003 00030003 00030003     ................
 802e828:	00030003 00030003 00030003 00030003     ................
 802e838:	00030003 00030003 00030003 00030003     ................
 802e848:	00030003 00030003 00030003 00030003     ................
 802e858:	00030003 00030003 00030003 00030003     ................
 802e868:	00030003 00030003 00030003 00030003     ................
 802e878:	00030003 00030003 00030003 00030003     ................
 802e888:	00030003 00030003 00030003 00030003     ................
 802e898:	00030003 00030003 00030003 00030003     ................
 802e8a8:	00030003 00030003 00030003 00030003     ................
 802e8b8:	00030003 00030003 00030003 00030003     ................
 802e8c8:	00030003 00030003 00030003 00030003     ................
 802e8d8:	00030003 00030003 00030003 00030003     ................
 802e8e8:	00030003 00030003 00030003 00030003     ................
 802e8f8:	00030003 00030003 00030003 00030003     ................
 802e908:	00030003 00030003 00030003 00030003     ................
 802e918:	00030003 00030003 00030003 00020003     ................
 802e928:	00020002 00020002 00020002 00020002     ................
 802e938:	00020002 00020002 00020002 00020002     ................
 802e948:	00020002 00020002 00020002 00020002     ................
 802e958:	00020002 00020002 00020002 00020002     ................
 802e968:	00020002 00020002 00020002 00020002     ................
 802e978:	00020002 00020002 00020002 00020002     ................
 802e988:	00020002 00020002 00020002 00020002     ................
 802e998:	00020002 00020002 00020002 00020002     ................
 802e9a8:	00020002 00020002 00020002 00020002     ................
 802e9b8:	00020002 00020002 00020002 00020002     ................
 802e9c8:	00020002 00020002 00020002 00020002     ................
 802e9d8:	00020002 00020002 00020002 00020002     ................
 802e9e8:	00020002 00020002 00020002 00020002     ................
 802e9f8:	00020002 00020002 00020002 00020002     ................
 802ea08:	00020002 00020002 00020002 00020002     ................
 802ea18:	00020002 00020002 00020002 00020002     ................
 802ea28:	00020002 00020002 00020002 00020002     ................
 802ea38:	00020002 00020002 00020002 00020002     ................
 802ea48:	00020002 00020002 00020002 00020002     ................
 802ea58:	00020002 00020002 00020002 00020002     ................
 802ea68:	00020002 00020002 00020002 00020002     ................
 802ea78:	00020002 00020002 00020002 00020002     ................
 802ea88:	00020002 00020002 00020002 00020002     ................
 802ea98:	00020002 00020002 00020002 00020002     ................
 802eaa8:	00020002 00020002 00020002 00020002     ................
 802eab8:	00020002 00020002 00020002 00020002     ................
 802eac8:	00020002 00020002 00020002 00020002     ................
 802ead8:	00020002 00020002 00020002 00020002     ................
 802eae8:	00020002 00020002 00020002 00020002     ................
 802eaf8:	00020002 00020002 00020002 00020002     ................
 802eb08:	00020002 00020002 00020002 00020002     ................
 802eb18:	00020002 00020002 00020002 00020002     ................
 802eb28:	00020002 00020002 00020002 00020002     ................
 802eb38:	00020002 00020002 00020002 00020002     ................
 802eb48:	00020002 00020002 00020002 00020002     ................
 802eb58:	00020002 00020002 00020002 00020002     ................
 802eb68:	00020002 00020002 00020002 00020002     ................
 802eb78:	00020002 00020002 00020002 00020002     ................
 802eb88:	00020002 00020002 00020002 00020002     ................
 802eb98:	00020002 00020002 00020002 00020002     ................
 802eba8:	00020002 00020002 00020002 00020002     ................
 802ebb8:	00020002 00020002 00020002 00020002     ................
 802ebc8:	00020002 00020002 00020002 00020002     ................
 802ebd8:	00020002 00020002 00020002 00020002     ................
 802ebe8:	00020002 00020002 00020002 00020002     ................
 802ebf8:	00020002 00020002 00020002 00020002     ................
 802ec08:	00020002 00020002 00020002 00020002     ................
 802ec18:	00020002 00020002 00020002 00020002     ................
 802ec28:	00020002 00020002 00020002 00020002     ................
 802ec38:	00020002 00020002 00020002 00020002     ................
 802ec48:	00020002 00020002 00020002 00020002     ................
 802ec58:	00020002 00020002 00020002 00020002     ................
 802ec68:	00020002 00020002 00020002 00020002     ................
 802ec78:	00020002 00020002 00020002 00020002     ................
 802ec88:	00020002 00020002 00020002 00020002     ................
 802ec98:	00020002 00020002 00020002 00020002     ................
 802eca8:	00020002 00020002 00020002 00020002     ................
 802ecb8:	00020002 00020002 00020002 00010002     ................
 802ecc8:	00010001 00010001 00010001 00010001     ................
 802ecd8:	00010001 00010001 00010001 00010001     ................
 802ece8:	00010001 00010001 00010001 00010001     ................
 802ecf8:	00010001 00010001 00010001 00010001     ................
 802ed08:	00010001 00010001 00010001 00010001     ................
 802ed18:	00010001 00010001 00010001 00010001     ................
 802ed28:	00010001 00010001 00010001 00010001     ................
 802ed38:	00010001 00010001 00010001 00010001     ................
 802ed48:	00010001 00010001 00010001 00010001     ................
 802ed58:	00010001 00010001 00010001 00010001     ................
 802ed68:	00010001 00010001 00010001 00010001     ................
 802ed78:	00010001 00010001 00010001 00010001     ................
 802ed88:	00010001 00010001 00010001 00010001     ................
 802ed98:	00010001 00010001 00010001 00010001     ................
 802eda8:	00010001 00010001 00010001 00010001     ................
 802edb8:	00010001 00010001 00010001 00010001     ................
 802edc8:	00010001 00010001 00010001 00010001     ................
 802edd8:	00010001 00010001 00010001 00010001     ................
 802ede8:	00010001 00010001 00010001 00010001     ................
 802edf8:	00010001 00010001 00010001 00010001     ................
 802ee08:	00010001 00010001 00010001 00010001     ................
 802ee18:	00010001 00010001 00010001 00010001     ................
 802ee28:	00010001 00010001 00010001 00010001     ................
 802ee38:	00010001 00010001 00010001 00010001     ................
 802ee48:	00010001 00010001 00010001 00010001     ................
 802ee58:	00010001 00010001 00010001 00010001     ................
 802ee68:	00010001 00010001 00010001 00010001     ................
 802ee78:	00010001 00010001 00010001 00010001     ................
 802ee88:	00010001 00010001 00010001 00010001     ................
 802ee98:	00010001 00010001 00010001 00010001     ................
 802eea8:	00010001 00010001 00010001 00010001     ................
 802eeb8:	00010001 00010001 00010001 00010001     ................
 802eec8:	00010001 00010001 00010001 00010001     ................
 802eed8:	00010001 00010001 00010001 00010001     ................
 802eee8:	00010001 00010001 00010001 00010001     ................
 802eef8:	00010001 00010001 00010001 00010001     ................
 802ef08:	00010001 00010001 00010001 00010001     ................
 802ef18:	00010001 00010001 00010001 00010001     ................
 802ef28:	00010001 00010001 00010001 00010001     ................
 802ef38:	00010001 00010001 00010001 00010001     ................
 802ef48:	00010001 00010001 00010001 00010001     ................
 802ef58:	00010001 00010001 00010001 00010001     ................
 802ef68:	00010001 00010001 00010001 00010001     ................
 802ef78:	00010001 00010001 00010001 00010001     ................
 802ef88:	00010001 00010001 00010001 00010001     ................
 802ef98:	00010001 00010001 00010001 00010001     ................
 802efa8:	00010001 00010001 00010001 00010001     ................
 802efb8:	00010001 00010001 00010001 00010001     ................
 802efc8:	00010001 00010001 00010001 00010001     ................
 802efd8:	00010001 00010001 00010001 00010001     ................
 802efe8:	00010001 00010001 00010001 00010001     ................
 802eff8:	00010001 00010001 00010001 00010001     ................
 802f008:	00010001 00010001 00010001 00010001     ................
 802f018:	00010001 00010001 00010001 00010001     ................
 802f028:	00010001 00010001 00010001 00010001     ................
 802f038:	00010001 00010001 00010001 00010001     ................
 802f048:	00010001 00010001 00010001 00010001     ................
 802f058:	00010001 00010001 00010001 00010001     ................
 802f068:	00010001 00010001 00010001 00010001     ................
 802f078:	00010001 00010001 00010001 00010001     ................
 802f088:	00010001 00010001 00010001 00010001     ................
 802f098:	00010001 00010001 00010001 00010001     ................
 802f0a8:	00010001 00010001 00010001 00010001     ................
 802f0b8:	00010001 00010001 00010001 00010001     ................
 802f0c8:	00010001 00010001 00010001 00010001     ................
 802f0d8:	00010001 00010001 00010001 00010001     ................
 802f0e8:	00010001 00010001 00010001 00010001     ................
 802f0f8:	00010001 00010001 00010001 00010001     ................
 802f108:	00010001 00010001 00010001 00010001     ................
 802f118:	00010001 00010001 00010001 00010001     ................
 802f128:	00010001 00010001 00010001 00010001     ................
 802f138:	00010001 00010001 00010001 00010001     ................
 802f148:	00010001 00010001 00010001 00010001     ................
 802f158:	00010001 00010001 00010001 00010001     ................
 802f168:	00010001 00010001 00010001 00010001     ................
 802f178:	00010001 00010001 00010001 00010001     ................
 802f188:	00010001 00010001 00010001 00010001     ................
 802f198:	00010001 00010001 00010001 00010001     ................
 802f1a8:	00010001 00010001 00010001 00010001     ................
 802f1b8:	00010001 00010001 00010001 00010001     ................
 802f1c8:	00010001 00010001 00010001 00010001     ................
 802f1d8:	00010001 00010001 00010001 00010001     ................
 802f1e8:	00010001 00010001 00010001 00010001     ................
 802f1f8:	00010001 00010001 00010001 00010001     ................
 802f208:	00000001 00000000 00000000 00000000     ................
	...
 8030068:	00010001 00010001 00010001 00010001     ................
 8030078:	00010001 00010001 00010001 00010001     ................
 8030088:	00010001 00010001 00010001 00010001     ................
 8030098:	00010001 00010001 00010001 00010001     ................
 80300a8:	00010001 00010001 00010001 00010001     ................
 80300b8:	00010001 00010001 00010001 00010001     ................
 80300c8:	00010001 00010001 00010001 00010001     ................
 80300d8:	00010001 00010001 00010001 00010001     ................
 80300e8:	00010001 00010001 00010001 00010001     ................
 80300f8:	00010001 00010001 00010001 00010001     ................
 8030108:	00010001 00010001 00010001 00010001     ................
 8030118:	00010001 00010001 00010001 00010001     ................
 8030128:	00010001 00010001 00010001 00010001     ................
 8030138:	00010001 00010001 00010001 00010001     ................
 8030148:	00010001 00010001 00010001 00010001     ................
 8030158:	00010001 00010001 00010001 00010001     ................
 8030168:	00010001 00010001 00010001 00010001     ................
 8030178:	00010001 00010001 00010001 00010001     ................
 8030188:	00010001 00010001 00010001 00010001     ................
 8030198:	00010001 00010001 00010001 00010001     ................
 80301a8:	00010001 00010001 00010001 00010001     ................
 80301b8:	00010001 00010001 00010001 00010001     ................
 80301c8:	00010001 00010001 00010001 00010001     ................
 80301d8:	00010001 00010001 00010001 00010001     ................
 80301e8:	00010001 00010001 00010001 00010001     ................
 80301f8:	00010001 00010001 00010001 00010001     ................
 8030208:	00010001 00010001 00010001 00010001     ................
 8030218:	00010001 00010001 00010001 00010001     ................
 8030228:	00010001 00010001 00010001 00010001     ................
 8030238:	00010001 00010001 00010001 00010001     ................
 8030248:	00010001 00010001 00010001 00010001     ................
 8030258:	00010001 00010001 00010001 00010001     ................
 8030268:	00010001 00010001 00010001 00010001     ................
 8030278:	00010001 00010001 00010001 00010001     ................
 8030288:	00010001 00010001 00010001 00010001     ................
 8030298:	00010001 00010001 00010001 00010001     ................
 80302a8:	00010001 00010001 00010001 00010001     ................
 80302b8:	00010001 00010001 00010001 00010001     ................
 80302c8:	00010001 00010001 00010001 00010001     ................
 80302d8:	00010001 00010001 00010001 00010001     ................
 80302e8:	00010001 00010001 00010001 00010001     ................
 80302f8:	00010001 00010001 00010001 00010001     ................
 8030308:	00010001 00010001 00010001 00010001     ................
 8030318:	00010001 00010001 00010001 00010001     ................
 8030328:	00010001 00010001 00010001 00010001     ................
 8030338:	00010001 00010001 00010001 00010001     ................
 8030348:	00010001 00010001 00010001 00010001     ................
 8030358:	00010001 00010001 00010001 00010001     ................
 8030368:	00010001 00010001 00010001 00010001     ................
 8030378:	00010001 00010001 00010001 00010001     ................
 8030388:	00010001 00010001 00010001 00010001     ................
 8030398:	00010001 00010001 00010001 00010001     ................
 80303a8:	00010001 00010001 00010001 00010001     ................
 80303b8:	00010001 00010001 00010001 00010001     ................
 80303c8:	00010001 00010001 00010001 00010001     ................
 80303d8:	00010001 00010001 00010001 00010001     ................
 80303e8:	00010001 00010001 00010001 00010001     ................
 80303f8:	00010001 00010001 00010001 00010001     ................
 8030408:	00010001 00010001 00010001 00010001     ................
 8030418:	00010001 00010001 00010001 00010001     ................
 8030428:	00010001 00010001 00010001 00010001     ................
 8030438:	00010001 00010001 00010001 00010001     ................
 8030448:	00010001 00010001 00010001 00010001     ................
 8030458:	00010001 00010001 00010001 00010001     ................
 8030468:	00010001 00010001 00010001 00010001     ................
 8030478:	00010001 00010001 00010001 00010001     ................
 8030488:	00010001 00010001 00010001 00010001     ................
 8030498:	00010001 00010001 00010001 00010001     ................
 80304a8:	00010001 00010001 00010001 00010001     ................
 80304b8:	00010001 00010001 00010001 00010001     ................
 80304c8:	00010001 00010001 00010001 00010001     ................
 80304d8:	00010001 00010001 00010001 00010001     ................
 80304e8:	00010001 00010001 00010001 00010001     ................
 80304f8:	00010001 00010001 00010001 00010001     ................
 8030508:	00010001 00010001 00010001 00010001     ................
 8030518:	00010001 00010001 00010001 00010001     ................
 8030528:	00010001 00010001 00010001 00010001     ................
 8030538:	00010001 00010001 00010001 00010001     ................
 8030548:	00010001 00010001 00010001 00010001     ................
 8030558:	00010001 00010001 00010001 00010001     ................
 8030568:	00010001 00010001 00010001 00010001     ................
 8030578:	00010001 00010001 00010001 00010001     ................
 8030588:	00010001 00010001 00010001 00010001     ................
 8030598:	00010001 00010001 00010001 00010001     ................
 80305a8:	00010001 00020002 00020002 00020002     ................
 80305b8:	00020002 00020002 00020002 00020002     ................
 80305c8:	00020002 00020002 00020002 00020002     ................
 80305d8:	00020002 00020002 00020002 00020002     ................
 80305e8:	00020002 00020002 00020002 00020002     ................
 80305f8:	00020002 00020002 00020002 00020002     ................
 8030608:	00020002 00020002 00020002 00020002     ................
 8030618:	00020002 00020002 00020002 00020002     ................
 8030628:	00020002 00020002 00020002 00020002     ................
 8030638:	00020002 00020002 00020002 00020002     ................
 8030648:	00020002 00020002 00020002 00020002     ................
 8030658:	00020002 00020002 00020002 00020002     ................
 8030668:	00020002 00020002 00020002 00020002     ................
 8030678:	00020002 00020002 00020002 00020002     ................
 8030688:	00020002 00020002 00020002 00020002     ................
 8030698:	00020002 00020002 00020002 00020002     ................
 80306a8:	00020002 00020002 00020002 00020002     ................
 80306b8:	00020002 00020002 00020002 00020002     ................
 80306c8:	00020002 00020002 00020002 00020002     ................
 80306d8:	00020002 00020002 00020002 00020002     ................
 80306e8:	00020002 00020002 00020002 00020002     ................
 80306f8:	00020002 00020002 00020002 00020002     ................
 8030708:	00020002 00020002 00020002 00020002     ................
 8030718:	00020002 00020002 00020002 00020002     ................
 8030728:	00020002 00020002 00020002 00020002     ................
 8030738:	00020002 00020002 00020002 00020002     ................
 8030748:	00020002 00020002 00020002 00020002     ................
 8030758:	00020002 00020002 00020002 00020002     ................
 8030768:	00020002 00020002 00020002 00020002     ................
 8030778:	00020002 00020002 00020002 00020002     ................
 8030788:	00020002 00020002 00020002 00020002     ................
 8030798:	00020002 00020002 00020002 00020002     ................
 80307a8:	00020002 00020002 00020002 00020002     ................
 80307b8:	00020002 00020002 00020002 00020002     ................
 80307c8:	00020002 00020002 00020002 00020002     ................
 80307d8:	00020002 00020002 00020002 00020002     ................
 80307e8:	00020002 00020002 00020002 00020002     ................
 80307f8:	00020002 00020002 00020002 00020002     ................
 8030808:	00020002 00020002 00020002 00020002     ................
 8030818:	00020002 00020002 00020002 00020002     ................
 8030828:	00020002 00020002 00020002 00020002     ................
 8030838:	00020002 00020002 00020002 00020002     ................
 8030848:	00020002 00020002 00020002 00020002     ................
 8030858:	00020002 00020002 00020002 00020002     ................
 8030868:	00020002 00020002 00020002 00020002     ................
 8030878:	00020002 00020002 00020002 00020002     ................
 8030888:	00020002 00020002 00020002 00020002     ................
 8030898:	00020002 00020002 00020002 00020002     ................
 80308a8:	00020002 00020002 00020002 00020002     ................
 80308b8:	00020002 00020002 00020002 00020002     ................
 80308c8:	00020002 00020002 00020002 00020002     ................
 80308d8:	00020002 00020002 00020002 00020002     ................
 80308e8:	00020002 00020002 00020002 00020002     ................
 80308f8:	00020002 00020002 00020002 00020002     ................
 8030908:	00020002 00020002 00020002 00020002     ................
 8030918:	00020002 00020002 00020002 00020002     ................
 8030928:	00020002 00020002 00020002 00020002     ................
 8030938:	00020002 00020002 00020002 00020002     ................
 8030948:	00020002 00030003 00030003 00030003     ................
 8030958:	00030003 00030003 00030003 00030003     ................
 8030968:	00030003 00030003 00030003 00030003     ................
 8030978:	00030003 00030003 00030003 00030003     ................
 8030988:	00030003 00030003 00030003 00030003     ................
 8030998:	00030003 00030003 00030003 00030003     ................
 80309a8:	00030003 00030003 00030003 00030003     ................
 80309b8:	00030003 00030003 00030003 00030003     ................
 80309c8:	00030003 00030003 00030003 00030003     ................
 80309d8:	00030003 00030003 00030003 00030003     ................
 80309e8:	00030003 00030003 00030003 00030003     ................
 80309f8:	00030003 00030003 00030003 00030003     ................
 8030a08:	00030003 00030003 00030003 00030003     ................
 8030a18:	00030003 00030003 00030003 00030003     ................
 8030a28:	00030003 00030003 00030003 00030003     ................
 8030a38:	00030003 00030003 00030003 00030003     ................
 8030a48:	00030003 00030003 00030003 00030003     ................
 8030a58:	00030003 00030003 00030003 00030003     ................
 8030a68:	00030003 00030003 00030003 00030003     ................
 8030a78:	00030003 00030003 00030003 00030003     ................
 8030a88:	00030003 00030003 00030003 00030003     ................
 8030a98:	00030003 00030003 00030003 00030003     ................
 8030aa8:	00030003 00030003 00030003 00030003     ................
 8030ab8:	00030003 00030003 00030003 00030003     ................
 8030ac8:	00030003 00030003 00030003 00030003     ................
 8030ad8:	00030003 00030003 00030003 00030003     ................
 8030ae8:	00030003 00030003 00030003 00030003     ................
 8030af8:	00030003 00030003 00030003 00030003     ................
 8030b08:	00030003 00030003 00030003 00030003     ................
 8030b18:	00030003 00030003 00030003 00030003     ................
 8030b28:	00030003 00030003 00030003 00030003     ................
 8030b38:	00030003 00030003 00030003 00030003     ................
 8030b48:	00030003 00030003 00030003 00030003     ................
 8030b58:	00030003 00030003 00030003 00030003     ................
 8030b68:	00030003 00030003 00030003 00030003     ................
 8030b78:	00030003 00030003 00030003 00030003     ................
 8030b88:	00030003 00030003 00030003 00030003     ................
 8030b98:	00030003 00030003 00030003 00030003     ................
 8030ba8:	00030003 00030003 00030003 00030003     ................
 8030bb8:	00030003 00030003 00030003 00030003     ................
 8030bc8:	00030003 00030003 00030003 00030003     ................
 8030bd8:	00030003 00030003 00030003 00030003     ................
 8030be8:	00030003 00030003 00030003 00030003     ................
 8030bf8:	00030003 00030003 00030003 00030003     ................
 8030c08:	00030003 00030003 00030003 00030003     ................
 8030c18:	00030003 00030003 00030003 00030003     ................
 8030c28:	00030003 00030003 00030003 00030003     ................
 8030c38:	00030003 00030003 00040004 00040004     ................
 8030c48:	00040004 00040004 00040004 00040004     ................
 8030c58:	00040004 00040004 00040004 00040004     ................
 8030c68:	00040004 00040004 00040004 00040004     ................
 8030c78:	00040004 00040004 00040004 00040004     ................
 8030c88:	00040004 00040004 00040004 00040004     ................
 8030c98:	00040004 00040004 00040004 00040004     ................
 8030ca8:	00040004 00040004 00040004 00040004     ................
 8030cb8:	00040004 00040004 00040004 00040004     ................
 8030cc8:	00040004 00040004 00040004 00040004     ................
 8030cd8:	00040004 00040004 00040004 00040004     ................
 8030ce8:	00040004 00040004 00040004 00040004     ................
 8030cf8:	00040004 00040004 00040004 00040004     ................
 8030d08:	00040004 00040004 00040004 00040004     ................
 8030d18:	00040004 00040004 00040004 00040004     ................
 8030d28:	00040004 00040004 00040004 00040004     ................
 8030d38:	00040004 00040004 00040004 00040004     ................
 8030d48:	00040004 00040004 00040004 00040004     ................
 8030d58:	00040004 00040004 00040004 00040004     ................
 8030d68:	00040004 00040004 00040004 00040004     ................
 8030d78:	00040004 00040004 00040004 00040004     ................
 8030d88:	00040004 00040004 00040004 00040004     ................
 8030d98:	00040004 00040004 00040004 00040004     ................
 8030da8:	00040004 00040004 00040004 00040004     ................
 8030db8:	00040004 00040004 00040004 00040004     ................
 8030dc8:	00040004 00040004 00040004 00040004     ................
 8030dd8:	00040004 00040004 00040004 00040004     ................
 8030de8:	00040004 00040004 00040004 00040004     ................
 8030df8:	00040004 00040004 00040004 00040004     ................
 8030e08:	00040004 00040004 00040004 00040004     ................
 8030e18:	00040004 00040004 00040004 00040004     ................
 8030e28:	00040004 00040004 00040004 00040004     ................
 8030e38:	00040004 00040004 00040004 00040004     ................
 8030e48:	00040004 00040004 00040004 00040004     ................
 8030e58:	00040004 00040004 00040004 00040004     ................
 8030e68:	00040004 00040004 00040004 00040004     ................
 8030e78:	00040004 00040004 00040004 00040004     ................
 8030e88:	00040004 00040004 00040004 00040004     ................
 8030e98:	00040004 00040004 00040004 00040004     ................
 8030ea8:	00040004 00040004 00040004 00040004     ................
 8030eb8:	00040004 00040004 00040004 00040004     ................
 8030ec8:	00040004 00050004 00050005 00050005     ................
 8030ed8:	00050005 00050005 00050005 00050005     ................
 8030ee8:	00050005 00050005 00050005 00050005     ................
 8030ef8:	00050005 00050005 00050005 00050005     ................
 8030f08:	00050005 00050005 00050005 00050005     ................
 8030f18:	00050005 00050005 00050005 00050005     ................
 8030f28:	00050005 00050005 00050005 00050005     ................
 8030f38:	00050005 00050005 00050005 00050005     ................
 8030f48:	00050005 00050005 00050005 00050005     ................
 8030f58:	00050005 00050005 00050005 00050005     ................
 8030f68:	00050005 00050005 00050005 00050005     ................
 8030f78:	00050005 00050005 00050005 00050005     ................
 8030f88:	00050005 00050005 00050005 00050005     ................
 8030f98:	00050005 00050005 00050005 00050005     ................
 8030fa8:	00050005 00050005 00050005 00050005     ................
 8030fb8:	00050005 00050005 00050005 00050005     ................
 8030fc8:	00050005 00050005 00050005 00050005     ................
 8030fd8:	00050005 00050005 00050005 00050005     ................
 8030fe8:	00050005 00050005 00050005 00050005     ................
 8030ff8:	00050005 00050005 00050005 00050005     ................
 8031008:	00050005 00050005 00050005 00050005     ................
 8031018:	00050005 00050005 00050005 00050005     ................
 8031028:	00050005 00050005 00050005 00050005     ................
 8031038:	00050005 00050005 00050005 00050005     ................
 8031048:	00050005 00050005 00050005 00050005     ................
 8031058:	00050005 00050005 00050005 00050005     ................
 8031068:	00050005 00050005 00050005 00050005     ................
 8031078:	00050005 00050005 00050005 00050005     ................
 8031088:	00050005 00050005 00050005 00050005     ................
 8031098:	00050005 00050005 00050005 00050005     ................
 80310a8:	00050005 00050005 00050005 00050005     ................
 80310b8:	00050005 00050005 00050005 00050005     ................
 80310c8:	00050005 00050005 00050005 00050005     ................
 80310d8:	00050005 00050005 00050005 00050005     ................
 80310e8:	00050005 00050005 00050005 00050005     ................
 80310f8:	00050005 00050005 00050005 00050005     ................
 8031108:	00050005 00050005 00050005 00060005     ................
 8031118:	00060006 00060006 00060006 00060006     ................
 8031128:	00060006 00060006 00060006 00060006     ................
 8031138:	00060006 00060006 00060006 00060006     ................
 8031148:	00060006 00060006 00060006 00060006     ................
 8031158:	00060006 00060006 00060006 00060006     ................
 8031168:	00060006 00060006 00060006 00060006     ................
 8031178:	00060006 00060006 00060006 00060006     ................
 8031188:	00060006 00060006 00060006 00060006     ................
 8031198:	00060006 00060006 00060006 00060006     ................
 80311a8:	00060006 00060006 00060006 00060006     ................
 80311b8:	00060006 00060006 00060006 00060006     ................
 80311c8:	00060006 00060006 00060006 00060006     ................
 80311d8:	00060006 00060006 00060006 00060006     ................
 80311e8:	00060006 00060006 00060006 00060006     ................
 80311f8:	00060006 00060006 00060006 00060006     ................
 8031208:	00060006 00060006 00060006 00060006     ................
 8031218:	00060006 00060006 00060006 00060006     ................
 8031228:	00060006 00060006 00060006 00060006     ................
 8031238:	00060006 00060006 00060006 00060006     ................
 8031248:	00060006 00060006 00060006 00060006     ................
 8031258:	00060006 00060006 00060006 00060006     ................
 8031268:	00060006 00060006 00060006 00060006     ................
 8031278:	00060006 00060006 00060006 00060006     ................
 8031288:	00060006 00060006 00060006 00060006     ................
 8031298:	00060006 00060006 00060006 00060006     ................
 80312a8:	00060006 00060006 00060006 00060006     ................
 80312b8:	00060006 00060006 00060006 00060006     ................
 80312c8:	00060006 00060006 00060006 00060006     ................
 80312d8:	00060006 00060006 00060006 00060006     ................
 80312e8:	00060006 00060006 00060006 00060006     ................
 80312f8:	00060006 00060006 00060006 00060006     ................
 8031308:	00060006 00060006 00060006 00060006     ................
 8031318:	00060006 00060006 00060006 00060006     ................
 8031328:	00060006 00070007 00070007 00070007     ................
 8031338:	00070007 00070007 00070007 00070007     ................
 8031348:	00070007 00070007 00070007 00070007     ................
 8031358:	00070007 00070007 00070007 00070007     ................
 8031368:	00070007 00070007 00070007 00070007     ................
 8031378:	00070007 00070007 00070007 00070007     ................
 8031388:	00070007 00070007 00070007 00070007     ................
 8031398:	00070007 00070007 00070007 00070007     ................
 80313a8:	00070007 00070007 00070007 00070007     ................
 80313b8:	00070007 00070007 00070007 00070007     ................
 80313c8:	00070007 00070007 00070007 00070007     ................
 80313d8:	00070007 00070007 00070007 00070007     ................
 80313e8:	00070007 00070007 00070007 00070007     ................
 80313f8:	00070007 00070007 00070007 00070007     ................
 8031408:	00070007 00070007 00070007 00070007     ................
 8031418:	00070007 00070007 00070007 00070007     ................
 8031428:	00070007 00070007 00070007 00070007     ................
 8031438:	00070007 00070007 00070007 00070007     ................
 8031448:	00070007 00070007 00070007 00070007     ................
 8031458:	00070007 00070007 00070007 00070007     ................
 8031468:	00070007 00070007 00070007 00070007     ................
 8031478:	00070007 00070007 00070007 00070007     ................
 8031488:	00070007 00070007 00070007 00070007     ................
 8031498:	00070007 00070007 00070007 00070007     ................
 80314a8:	00070007 00070007 00070007 00070007     ................
 80314b8:	00070007 00070007 00070007 00070007     ................
 80314c8:	00070007 00070007 00070007 00070007     ................
 80314d8:	00070007 00070007 00070007 00070007     ................
 80314e8:	00070007 00070007 00070007 00070007     ................
 80314f8:	00070007 00070007 00070007 00070007     ................
 8031508:	00070007 00070007 00070007 00070007     ................
 8031518:	00070007 00080008 00080008 00080008     ................
 8031528:	00080008 00080008 00080008 00080008     ................
 8031538:	00080008 00080008 00080008 00080008     ................
 8031548:	00080008 00080008 00080008 00080008     ................
 8031558:	00080008 00080008 00080008 00080008     ................
 8031568:	00080008 00080008 00080008 00080008     ................
 8031578:	00080008 00080008 00080008 00080008     ................
 8031588:	00080008 00080008 00080008 00080008     ................
 8031598:	00080008 00080008 00080008 00080008     ................
 80315a8:	00080008 00080008 00080008 00080008     ................
 80315b8:	00080008 00080008 00080008 00080008     ................
 80315c8:	00080008 00080008 00080008 00080008     ................
 80315d8:	00080008 00080008 00080008 00080008     ................
 80315e8:	00080008 00080008 00080008 00080008     ................
 80315f8:	00080008 00080008 00080008 00080008     ................
 8031608:	00080008 00080008 00080008 00080008     ................
 8031618:	00080008 00080008 00080008 00080008     ................
 8031628:	00080008 00080008 00080008 00080008     ................
 8031638:	00080008 00080008 00080008 00080008     ................
 8031648:	00080008 00080008 00080008 00080008     ................
 8031658:	00080008 00080008 00080008 00080008     ................
 8031668:	00080008 00080008 00080008 00080008     ................
 8031678:	00080008 00080008 00080008 00080008     ................
 8031688:	00080008 00080008 00080008 00080008     ................
 8031698:	00080008 00080008 00080008 00080008     ................
 80316a8:	00080008 00080008 00080008 00080008     ................
 80316b8:	00080008 00080008 00080008 00080008     ................
 80316c8:	00080008 00080008 00080008 00080008     ................
 80316d8:	00080008 00080008 00080008 00080008     ................
 80316e8:	00090008 00090009 00090009 00090009     ................
 80316f8:	00090009 00090009 00090009 00090009     ................
 8031708:	00090009 00090009 00090009 00090009     ................
 8031718:	00090009 00090009 00090009 00090009     ................
 8031728:	00090009 00090009 00090009 00090009     ................
 8031738:	00090009 00090009 00090009 00090009     ................
 8031748:	00090009 00090009 00090009 00090009     ................
 8031758:	00090009 00090009 00090009 00090009     ................
 8031768:	00090009 00090009 00090009 00090009     ................
 8031778:	00090009 00090009 00090009 00090009     ................
 8031788:	00090009 00090009 00090009 00090009     ................
 8031798:	00090009 00090009 00090009 00090009     ................
 80317a8:	00090009 00090009 00090009 00090009     ................
 80317b8:	00090009 00090009 00090009 00090009     ................
 80317c8:	00090009 00090009 00090009 00090009     ................
 80317d8:	00090009 00090009 00090009 00090009     ................
 80317e8:	00090009 00090009 00090009 00090009     ................
 80317f8:	00090009 00090009 00090009 00090009     ................
 8031808:	00090009 00090009 00090009 00090009     ................
 8031818:	00090009 00090009 00090009 00090009     ................
 8031828:	00090009 00090009 00090009 00090009     ................
 8031838:	00090009 00090009 00090009 00090009     ................
 8031848:	00090009 00090009 00090009 00090009     ................
 8031858:	00090009 00090009 00090009 00090009     ................
 8031868:	00090009 00090009 00090009 00090009     ................
 8031878:	00090009 00090009 00090009 00090009     ................
 8031888:	00090009 00090009 00090009 00090009     ................
 8031898:	00090009 00090009 000a000a 000a000a     ................
 80318a8:	000a000a 000a000a 000a000a 000a000a     ................
 80318b8:	000a000a 000a000a 000a000a 000a000a     ................
 80318c8:	000a000a 000a000a 000a000a 000a000a     ................
 80318d8:	000a000a 000a000a 000a000a 000a000a     ................
 80318e8:	000a000a 000a000a 000a000a 000a000a     ................
 80318f8:	000a000a 000a000a 000a000a 000a000a     ................
 8031908:	000a000a 000a000a 000a000a 000a000a     ................
 8031918:	000a000a 000a000a 000a000a 000a000a     ................
 8031928:	000a000a 000a000a 000a000a 000a000a     ................
 8031938:	000a000a 000a000a 000a000a 000a000a     ................
 8031948:	000a000a 000a000a 000a000a 000a000a     ................
 8031958:	000a000a 000a000a 000a000a 000a000a     ................
 8031968:	000a000a 000a000a 000a000a 000a000a     ................
 8031978:	000a000a 000a000a 000a000a 000a000a     ................
 8031988:	000a000a 000a000a 000a000a 000a000a     ................
 8031998:	000a000a 000a000a 000a000a 000a000a     ................
 80319a8:	000a000a 000a000a 000a000a 000a000a     ................
 80319b8:	000a000a 000a000a 000a000a 000a000a     ................
 80319c8:	000a000a 000a000a 000a000a 000a000a     ................
 80319d8:	000a000a 000a000a 000a000a 000a000a     ................
 80319e8:	000a000a 000a000a 000a000a 000a000a     ................
 80319f8:	000a000a 000a000a 000a000a 000a000a     ................
 8031a08:	000a000a 000a000a 000a000a 000a000a     ................
 8031a18:	000a000a 000a000a 000a000a 000a000a     ................
 8031a28:	000a000a 000a000a 000a000a 000a000a     ................
 8031a38:	000a000a 000b000a 000b000b 000b000b     ................
 8031a48:	000b000b 000b000b 000b000b 000b000b     ................
 8031a58:	000b000b 000b000b 000b000b 000b000b     ................
 8031a68:	000b000b 000b000b 000b000b 000b000b     ................
 8031a78:	000b000b 000b000b 000b000b 000b000b     ................
 8031a88:	000b000b 000b000b 000b000b 000b000b     ................
 8031a98:	000b000b 000b000b 000b000b 000b000b     ................
 8031aa8:	000b000b 000b000b 000b000b 000b000b     ................
 8031ab8:	000b000b 000b000b 000b000b 000b000b     ................
 8031ac8:	000b000b 000b000b 000b000b 000b000b     ................
 8031ad8:	000b000b 000b000b 000b000b 000b000b     ................
 8031ae8:	000b000b 000b000b 000b000b 000b000b     ................
 8031af8:	000b000b 000b000b 000b000b 000b000b     ................
 8031b08:	000b000b 000b000b 000b000b 000b000b     ................
 8031b18:	000b000b 000b000b 000b000b 000b000b     ................
 8031b28:	000b000b 000b000b 000b000b 000b000b     ................
 8031b38:	000b000b 000b000b 000b000b 000b000b     ................
 8031b48:	000b000b 000b000b 000b000b 000b000b     ................
 8031b58:	000b000b 000b000b 000b000b 000b000b     ................
 8031b68:	000b000b 000b000b 000b000b 000b000b     ................
 8031b78:	000b000b 000b000b 000b000b 000b000b     ................
 8031b88:	000b000b 000b000b 000b000b 000b000b     ................
 8031b98:	000b000b 000b000b 000b000b 000b000b     ................
 8031ba8:	000b000b 000b000b 000b000b 000b000b     ................
 8031bb8:	000b000b 000b000b 000b000b 000b000b     ................
 8031bc8:	000c000b 000c000c 000c000c 000c000c     ................
 8031bd8:	000c000c 000c000c 000c000c 000c000c     ................
 8031be8:	000c000c 000c000c 000c000c 000c000c     ................
 8031bf8:	000c000c 000c000c 000c000c 000c000c     ................
 8031c08:	000c000c 000c000c 000c000c 000c000c     ................
 8031c18:	000c000c 000c000c 000c000c 000c000c     ................
 8031c28:	000c000c 000c000c 000c000c 000c000c     ................
 8031c38:	000c000c 000c000c 000c000c 000c000c     ................
 8031c48:	000c000c 000c000c 000c000c 000c000c     ................
 8031c58:	000c000c 000c000c 000c000c 000c000c     ................
 8031c68:	000c000c 000c000c 000c000c 000c000c     ................
 8031c78:	000c000c 000c000c 000c000c 000c000c     ................
 8031c88:	000c000c 000c000c 000c000c 000c000c     ................
 8031c98:	000c000c 000c000c 000c000c 000c000c     ................
 8031ca8:	000c000c 000c000c 000c000c 000c000c     ................
 8031cb8:	000c000c 000c000c 000c000c 000c000c     ................
 8031cc8:	000c000c 000c000c 000c000c 000c000c     ................
 8031cd8:	000c000c 000c000c 000c000c 000c000c     ................
 8031ce8:	000c000c 000c000c 000c000c 000c000c     ................
 8031cf8:	000c000c 000c000c 000c000c 000c000c     ................
 8031d08:	000c000c 000c000c 000c000c 000c000c     ................
 8031d18:	000c000c 000c000c 000c000c 000c000c     ................
 8031d28:	000c000c 000c000c 000c000c 000c000c     ................
 8031d38:	000c000c 000c000c 000c000c 000d000c     ................
 8031d48:	000d000d 000d000d 000d000d 000d000d     ................
 8031d58:	000d000d 000d000d 000d000d 000d000d     ................
 8031d68:	000d000d 000d000d 000d000d 000d000d     ................
 8031d78:	000d000d 000d000d 000d000d 000d000d     ................
 8031d88:	000d000d 000d000d 000d000d 000d000d     ................
 8031d98:	000d000d 000d000d 000d000d 000d000d     ................
 8031da8:	000d000d 000d000d 000d000d 000d000d     ................
 8031db8:	000d000d 000d000d 000d000d 000d000d     ................
 8031dc8:	000d000d 000d000d 000d000d 000d000d     ................
 8031dd8:	000d000d 000d000d 000d000d 000d000d     ................
 8031de8:	000d000d 000d000d 000d000d 000d000d     ................
 8031df8:	000d000d 000d000d 000d000d 000d000d     ................
 8031e08:	000d000d 000d000d 000d000d 000d000d     ................
 8031e18:	000d000d 000d000d 000d000d 000d000d     ................
 8031e28:	000d000d 000d000d 000d000d 000d000d     ................
 8031e38:	000d000d 000d000d 000d000d 000d000d     ................
 8031e48:	000d000d 000d000d 000d000d 000d000d     ................
 8031e58:	000d000d 000d000d 000d000d 000d000d     ................
 8031e68:	000d000d 000d000d 000d000d 000d000d     ................
 8031e78:	000d000d 000d000d 000d000d 000d000d     ................
 8031e88:	000d000d 000d000d 000d000d 000d000d     ................
 8031e98:	000d000d 000d000d 000d000d 000d000d     ................
 8031ea8:	000d000d 000d000d 000e000d 000e000e     ................
 8031eb8:	000e000e 000e000e 000e000e 000e000e     ................
 8031ec8:	000e000e 000e000e 000e000e 000e000e     ................
 8031ed8:	000e000e 000e000e 000e000e 000e000e     ................
 8031ee8:	000e000e 000e000e 000e000e 000e000e     ................
 8031ef8:	000e000e 000e000e 000e000e 000e000e     ................
 8031f08:	000e000e 000e000e 000e000e 000e000e     ................
 8031f18:	000e000e 000e000e 000e000e 000e000e     ................
 8031f28:	000e000e 000e000e 000e000e 000e000e     ................
 8031f38:	000e000e 000e000e 000e000e 000e000e     ................
 8031f48:	000e000e 000e000e 000e000e 000e000e     ................
 8031f58:	000e000e 000e000e 000e000e 000e000e     ................
 8031f68:	000e000e 000e000e 000e000e 000e000e     ................
 8031f78:	000e000e 000e000e 000e000e 000e000e     ................
 8031f88:	000e000e 000e000e 000e000e 000e000e     ................
 8031f98:	000e000e 000e000e 000e000e 000e000e     ................
 8031fa8:	000e000e 000e000e 000e000e 000e000e     ................
 8031fb8:	000e000e 000e000e 000e000e 000e000e     ................
 8031fc8:	000e000e 000e000e 000e000e 000e000e     ................
 8031fd8:	000e000e 000e000e 000e000e 000e000e     ................
 8031fe8:	000e000e 000e000e 000e000e 000e000e     ................
 8031ff8:	000e000e 000e000e 000e000e 000e000e     ................
 8032008:	000e000e 000e000e 000f000e 000f000f     ................
 8032018:	000f000f 000f000f 000f000f 000f000f     ................
 8032028:	000f000f 000f000f 000f000f 000f000f     ................
 8032038:	000f000f 000f000f 000f000f 000f000f     ................
 8032048:	000f000f 000f000f 000f000f 000f000f     ................
 8032058:	000f000f 000f000f 000f000f 000f000f     ................
 8032068:	000f000f 000f000f 000f000f 000f000f     ................
 8032078:	000f000f 000f000f 000f000f 000f000f     ................
 8032088:	000f000f 000f000f 000f000f 000f000f     ................
 8032098:	000f000f 000f000f 000f000f 000f000f     ................
 80320a8:	000f000f 000f000f 000f000f 000f000f     ................
 80320b8:	000f000f 000f000f 000f000f 000f000f     ................
 80320c8:	000f000f 000f000f 000f000f 000f000f     ................
 80320d8:	000f000f 000f000f 000f000f 000f000f     ................
 80320e8:	000f000f 000f000f 000f000f 000f000f     ................
 80320f8:	000f000f 000f000f 000f000f 000f000f     ................
 8032108:	000f000f 000f000f 000f000f 000f000f     ................
 8032118:	000f000f 000f000f 000f000f 000f000f     ................
 8032128:	000f000f 000f000f 000f000f 000f000f     ................
 8032138:	000f000f 000f000f 000f000f 000f000f     ................
 8032148:	000f000f 000f000f 000f000f 000f000f     ................
 8032158:	000f000f 000f000f 000f000f 0010000f     ................
 8032168:	00100010 00100010 00100010 00100010     ................
 8032178:	00100010 00100010 00100010 00100010     ................
 8032188:	00100010 00100010 00100010 00100010     ................
 8032198:	00100010 00100010 00100010 00100010     ................
 80321a8:	00100010 00100010 00100010 00100010     ................
 80321b8:	00100010 00100010 00100010 00100010     ................
 80321c8:	00100010 00100010 00100010 00100010     ................
 80321d8:	00100010 00100010 00100010 00100010     ................
 80321e8:	00100010 00100010 00100010 00100010     ................
 80321f8:	00100010 00100010 00100010 00100010     ................
 8032208:	00100010 00100010 00100010 00100010     ................
 8032218:	00100010 00100010 00100010 00100010     ................
 8032228:	00100010 00100010 00100010 00100010     ................
 8032238:	00100010 00100010 00100010 00100010     ................
 8032248:	00100010 00100010 00100010 00100010     ................
 8032258:	00100010 00100010 00100010 00100010     ................
 8032268:	00100010 00100010 00100010 00100010     ................
 8032278:	00100010 00100010 00100010 00100010     ................
 8032288:	00100010 00100010 00100010 00100010     ................
 8032298:	00100010 00100010 00100010 00100010     ................
 80322a8:	00100010 00100010 00110011 00110011     ................
 80322b8:	00110011 00110011 00110011 00110011     ................
 80322c8:	00110011 00110011 00110011 00110011     ................
 80322d8:	00110011 00110011 00110011 00110011     ................
 80322e8:	00110011 00110011 00110011 00110011     ................
 80322f8:	00110011 00110011 00110011 00110011     ................
 8032308:	00110011 00110011 00110011 00110011     ................
 8032318:	00110011 00110011 00110011 00110011     ................
 8032328:	00110011 00110011 00110011 00110011     ................
 8032338:	00110011 00110011 00110011 00110011     ................
 8032348:	00110011 00110011 00110011 00110011     ................
 8032358:	00110011 00110011 00110011 00110011     ................
 8032368:	00110011 00110011 00110011 00110011     ................
 8032378:	00110011 00110011 00110011 00110011     ................
 8032388:	00110011 00110011 00110011 00110011     ................
 8032398:	00110011 00110011 00110011 00110011     ................
 80323a8:	00110011 00110011 00110011 00110011     ................
 80323b8:	00110011 00110011 00110011 00110011     ................
 80323c8:	00110011 00110011 00110011 00110011     ................
 80323d8:	00110011 00110011 00110011 00110011     ................
 80323e8:	00110011 00110011 00120012 00120012     ................
 80323f8:	00120012 00120012 00120012 00120012     ................
 8032408:	00120012 00120012 00120012 00120012     ................
 8032418:	00120012 00120012 00120012 00120012     ................
 8032428:	00120012 00120012 00120012 00120012     ................
 8032438:	00120012 00120012 00120012 00120012     ................
 8032448:	00120012 00120012 00120012 00120012     ................
 8032458:	00120012 00120012 00120012 00120012     ................
 8032468:	00120012 00120012 00120012 00120012     ................
 8032478:	00120012 00120012 00120012 00120012     ................
 8032488:	00120012 00120012 00120012 00120012     ................
 8032498:	00120012 00120012 00120012 00120012     ................
 80324a8:	00120012 00120012 00120012 00120012     ................
 80324b8:	00120012 00120012 00120012 00120012     ................
 80324c8:	00120012 00120012 00120012 00120012     ................
 80324d8:	00120012 00120012 00120012 00120012     ................
 80324e8:	00120012 00120012 00120012 00120012     ................
 80324f8:	00120012 00120012 00120012 00120012     ................
 8032508:	00120012 00120012 00120012 00120012     ................
 8032518:	00120012 00120012 00120012 00120012     ................
 8032528:	00130013 00130013 00130013 00130013     ................
 8032538:	00130013 00130013 00130013 00130013     ................
 8032548:	00130013 00130013 00130013 00130013     ................
 8032558:	00130013 00130013 00130013 00130013     ................
 8032568:	00130013 00130013 00130013 00130013     ................
 8032578:	00130013 00130013 00130013 00130013     ................
 8032588:	00130013 00130013 00130013 00130013     ................
 8032598:	00130013 00130013 00130013 00130013     ................
 80325a8:	00130013 00130013 00130013 00130013     ................
 80325b8:	00130013 00130013 00130013 00130013     ................
 80325c8:	00130013 00130013 00130013 00130013     ................
 80325d8:	00130013 00130013 00130013 00130013     ................
 80325e8:	00130013 00130013 00130013 00130013     ................
 80325f8:	00130013 00130013 00130013 00130013     ................
 8032608:	00130013 00130013 00130013 00130013     ................
 8032618:	00130013 00130013 00130013 00130013     ................
 8032628:	00130013 00130013 00130013 00130013     ................
 8032638:	00130013 00130013 00130013 00130013     ................
 8032648:	00130013 00130013 00130013 00140013     ................
 8032658:	00140014 00140014 00140014 00140014     ................
 8032668:	00140014 00140014 00140014 00140014     ................
 8032678:	00140014 00140014 00140014 00140014     ................
 8032688:	00140014 00140014 00140014 00140014     ................
 8032698:	00140014 00140014 00140014 00140014     ................
 80326a8:	00140014 00140014 00140014 00140014     ................
 80326b8:	00140014 00140014 00140014 00140014     ................
 80326c8:	00140014 00140014 00140014 00140014     ................
 80326d8:	00140014 00140014 00140014 00140014     ................
 80326e8:	00140014 00140014 00140014 00140014     ................
 80326f8:	00140014 00140014 00140014 00140014     ................
 8032708:	00140014 00140014 00140014 00140014     ................
 8032718:	00140014 00140014 00140014 00140014     ................
 8032728:	00140014 00140014 00140014 00140014     ................
 8032738:	00140014 00140014 00140014 00140014     ................
 8032748:	00140014 00140014 00140014 00140014     ................
 8032758:	00140014 00140014 00140014 00140014     ................
 8032768:	00140014 00140014 00140014 00140014     ................
 8032778:	00140014 00150014 00150015 00150015     ................
 8032788:	00150015 00150015 00150015 00150015     ................
 8032798:	00150015 00150015 00150015 00150015     ................
 80327a8:	00150015 00150015 00150015 00150015     ................
 80327b8:	00150015 00150015 00150015 00150015     ................
 80327c8:	00150015 00150015 00150015 00150015     ................
 80327d8:	00150015 00150015 00150015 00150015     ................
 80327e8:	00150015 00150015 00150015 00150015     ................
 80327f8:	00150015 00150015 00150015 00150015     ................
 8032808:	00150015 00150015 00150015 00150015     ................
 8032818:	00150015 00150015 00150015 00150015     ................
 8032828:	00150015 00150015 00150015 00150015     ................
 8032838:	00150015 00150015 00150015 00150015     ................
 8032848:	00150015 00150015 00150015 00150015     ................
 8032858:	00150015 00150015 00150015 00150015     ................
 8032868:	00150015 00150015 00150015 00150015     ................
 8032878:	00150015 00150015 00150015 00150015     ................
 8032888:	00150015 00150015 00150015 00150015     ................
 8032898:	00150015 00150015 00160016 00160016     ................
 80328a8:	00160016 00160016 00160016 00160016     ................
 80328b8:	00160016 00160016 00160016 00160016     ................
 80328c8:	00160016 00160016 00160016 00160016     ................
 80328d8:	00160016 00160016 00160016 00160016     ................
 80328e8:	00160016 00160016 00160016 00160016     ................
 80328f8:	00160016 00160016 00160016 00160016     ................
 8032908:	00160016 00160016 00160016 00160016     ................
 8032918:	00160016 00160016 00160016 00160016     ................
 8032928:	00160016 00160016 00160016 00160016     ................
 8032938:	00160016 00160016 00160016 00160016     ................
 8032948:	00160016 00160016 00160016 00160016     ................
 8032958:	00160016 00160016 00160016 00160016     ................
 8032968:	00160016 00160016 00160016 00160016     ................
 8032978:	00160016 00160016 00160016 00160016     ................
 8032988:	00160016 00160016 00160016 00160016     ................
 8032998:	00160016 00160016 00160016 00160016     ................
 80329a8:	00160016 00160016 00160016 00160016     ................
 80329b8:	00170016 00170017 00170017 00170017     ................
 80329c8:	00170017 00170017 00170017 00170017     ................
 80329d8:	00170017 00170017 00170017 00170017     ................
 80329e8:	00170017 00170017 00170017 00170017     ................
 80329f8:	00170017 00170017 00170017 00170017     ................
 8032a08:	00170017 00170017 00170017 00170017     ................
 8032a18:	00170017 00170017 00170017 00170017     ................
 8032a28:	00170017 00170017 00170017 00170017     ................
 8032a38:	00170017 00170017 00170017 00170017     ................
 8032a48:	00170017 00170017 00170017 00170017     ................
 8032a58:	00170017 00170017 00170017 00170017     ................
 8032a68:	00170017 00170017 00170017 00170017     ................
 8032a78:	00170017 00170017 00170017 00170017     ................
 8032a88:	00170017 00170017 00170017 00170017     ................
 8032a98:	00170017 00170017 00170017 00170017     ................
 8032aa8:	00170017 00170017 00170017 00170017     ................
 8032ab8:	00170017 00170017 00170017 00170017     ................
 8032ac8:	00170017 00180017 00180018 00180018     ................
 8032ad8:	00180018 00180018 00180018 00180018     ................
 8032ae8:	00180018 00180018 00180018 00180018     ................
 8032af8:	00180018 00180018 00180018 00180018     ................
 8032b08:	00180018 00180018 00180018 00180018     ................
 8032b18:	00180018 00180018 00180018 00180018     ................
 8032b28:	00180018 00180018 00180018 00180018     ................
 8032b38:	00180018 00180018 00180018 00180018     ................
 8032b48:	00180018 00180018 00180018 00180018     ................
 8032b58:	00180018 00180018 00180018 00180018     ................
 8032b68:	00180018 00180018 00180018 00180018     ................
 8032b78:	00180018 00180018 00180018 00180018     ................
 8032b88:	00180018 00180018 00180018 00180018     ................
 8032b98:	00180018 00180018 00180018 00180018     ................
 8032ba8:	00180018 00180018 00180018 00180018     ................
 8032bb8:	00180018 00180018 00180018 00180018     ................
 8032bc8:	00180018 00180018 00180018 00180018     ................
 8032bd8:	00180018 00190018 00190019 00190019     ................
 8032be8:	00190019 00190019 00190019 00190019     ................
 8032bf8:	00190019 00190019 00190019 00190019     ................
 8032c08:	00190019 00190019 00190019 00190019     ................
 8032c18:	00190019 00190019 00190019 00190019     ................
 8032c28:	00190019 00190019 00190019 00190019     ................
 8032c38:	00190019 00190019 00190019 00190019     ................
 8032c48:	00190019 00190019 00190019 00190019     ................
 8032c58:	00190019 00190019 00190019 00190019     ................
 8032c68:	00190019 00190019 00190019 00190019     ................
 8032c78:	00190019 00190019 00190019 00190019     ................
 8032c88:	00190019 00190019 00190019 00190019     ................
 8032c98:	00190019 00190019 00190019 00190019     ................
 8032ca8:	00190019 00190019 00190019 00190019     ................
 8032cb8:	00190019 00190019 00190019 00190019     ................
 8032cc8:	00190019 00190019 00190019 00190019     ................
 8032cd8:	00190019 00190019 00190019 00190019     ................
 8032ce8:	001a001a 001a001a 001a001a 001a001a     ................
 8032cf8:	001a001a 001a001a 001a001a 001a001a     ................
 8032d08:	001a001a 001a001a 001a001a 001a001a     ................
 8032d18:	001a001a 001a001a 001a001a 001a001a     ................
 8032d28:	001a001a 001a001a 001a001a 001a001a     ................
 8032d38:	001a001a 001a001a 001a001a 001a001a     ................
 8032d48:	001a001a 001a001a 001a001a 001a001a     ................
 8032d58:	001a001a 001a001a 001a001a 001a001a     ................
 8032d68:	001a001a 001a001a 001a001a 001a001a     ................
 8032d78:	001a001a 001a001a 001a001a 001a001a     ................
 8032d88:	001a001a 001a001a 001a001a 001a001a     ................
 8032d98:	001a001a 001a001a 001a001a 001a001a     ................
 8032da8:	001a001a 001a001a 001a001a 001a001a     ................
 8032db8:	001a001a 001a001a 001a001a 001a001a     ................
 8032dc8:	001a001a 001a001a 001a001a 001a001a     ................
 8032dd8:	001a001a 001a001a 001a001a 001a001a     ................
 8032de8:	001a001a 001b001b 001b001b 001b001b     ................
 8032df8:	001b001b 001b001b 001b001b 001b001b     ................
 8032e08:	001b001b 001b001b 001b001b 001b001b     ................
 8032e18:	001b001b 001b001b 001b001b 001b001b     ................
 8032e28:	001b001b 001b001b 001b001b 001b001b     ................
 8032e38:	001b001b 001b001b 001b001b 001b001b     ................
 8032e48:	001b001b 001b001b 001b001b 001b001b     ................
 8032e58:	001b001b 001b001b 001b001b 001b001b     ................
 8032e68:	001b001b 001b001b 001b001b 001b001b     ................
 8032e78:	001b001b 001b001b 001b001b 001b001b     ................
 8032e88:	001b001b 001b001b 001b001b 001b001b     ................
 8032e98:	001b001b 001b001b 001b001b 001b001b     ................
 8032ea8:	001b001b 001b001b 001b001b 001b001b     ................
 8032eb8:	001b001b 001b001b 001b001b 001b001b     ................
 8032ec8:	001b001b 001b001b 001b001b 001b001b     ................
 8032ed8:	001b001b 001b001b 001b001b 001b001b     ................
 8032ee8:	001b001b 001c001c 001c001c 001c001c     ................
 8032ef8:	001c001c 001c001c 001c001c 001c001c     ................
 8032f08:	001c001c 001c001c 001c001c 001c001c     ................
 8032f18:	001c001c 001c001c 001c001c 001c001c     ................
 8032f28:	001c001c 001c001c 001c001c 001c001c     ................
 8032f38:	001c001c 001c001c 001c001c 001c001c     ................
 8032f48:	001c001c 001c001c 001c001c 001c001c     ................
 8032f58:	001c001c 001c001c 001c001c 001c001c     ................
 8032f68:	001c001c 001c001c 001c001c 001c001c     ................
 8032f78:	001c001c 001c001c 001c001c 001c001c     ................
 8032f88:	001c001c 001c001c 001c001c 001c001c     ................
 8032f98:	001c001c 001c001c 001c001c 001c001c     ................
 8032fa8:	001c001c 001c001c 001c001c 001c001c     ................
 8032fb8:	001c001c 001c001c 001c001c 001c001c     ................
 8032fc8:	001c001c 001c001c 001c001c 001c001c     ................
 8032fd8:	001c001c 001c001c 001c001c 001c001c     ................
 8032fe8:	001d001d 001d001d 001d001d 001d001d     ................
 8032ff8:	001d001d 001d001d 001d001d 001d001d     ................
 8033008:	001d001d 001d001d 001d001d 001d001d     ................
 8033018:	001d001d 001d001d 001d001d 001d001d     ................
 8033028:	001d001d 001d001d 001d001d 001d001d     ................
 8033038:	001d001d 001d001d 001d001d 001d001d     ................
 8033048:	001d001d 001d001d 001d001d 001d001d     ................
 8033058:	001d001d 001d001d 001d001d 001d001d     ................
 8033068:	001d001d 001d001d 001d001d 001d001d     ................
 8033078:	001d001d 001d001d 001d001d 001d001d     ................
 8033088:	001d001d 001d001d 001d001d 001d001d     ................
 8033098:	001d001d 001d001d 001d001d 001d001d     ................
 80330a8:	001d001d 001d001d 001d001d 001d001d     ................
 80330b8:	001d001d 001d001d 001d001d 001d001d     ................
 80330c8:	001d001d 001d001d 001d001d 001d001d     ................
 80330d8:	001d001d 001d001d 001e001e 001e001e     ................
 80330e8:	001e001e 001e001e 001e001e 001e001e     ................
 80330f8:	001e001e 001e001e 001e001e 001e001e     ................
 8033108:	001e001e 001e001e 001e001e 001e001e     ................
 8033118:	001e001e 001e001e 001e001e 001e001e     ................
 8033128:	001e001e 001e001e 001e001e 001e001e     ................
 8033138:	001e001e 001e001e 001e001e 001e001e     ................
 8033148:	001e001e 001e001e 001e001e 001e001e     ................
 8033158:	001e001e 001e001e 001e001e 001e001e     ................
 8033168:	001e001e 001e001e 001e001e 001e001e     ................
 8033178:	001e001e 001e001e 001e001e 001e001e     ................
 8033188:	001e001e 001e001e 001e001e 001e001e     ................
 8033198:	001e001e 001e001e 001e001e 001e001e     ................
 80331a8:	001e001e 001e001e 001e001e 001e001e     ................
 80331b8:	001e001e 001e001e 001e001e 001e001e     ................
 80331c8:	001e001e 001e001e 001e001e 001f001f     ................
 80331d8:	001f001f 001f001f 001f001f 001f001f     ................
 80331e8:	001f001f 001f001f 001f001f 001f001f     ................
 80331f8:	001f001f 001f001f 001f001f 001f001f     ................
 8033208:	001f001f 001f001f 001f001f 001f001f     ................
 8033218:	001f001f 001f001f 001f001f 001f001f     ................
 8033228:	001f001f 001f001f 001f001f 001f001f     ................
 8033238:	001f001f 001f001f 001f001f 001f001f     ................
 8033248:	001f001f 001f001f 001f001f 001f001f     ................
 8033258:	001f001f 001f001f 001f001f 001f001f     ................
 8033268:	001f001f 001f001f 001f001f 001f001f     ................
 8033278:	001f001f 001f001f 001f001f 001f001f     ................
 8033288:	001f001f 001f001f 001f001f 001f001f     ................
 8033298:	001f001f 001f001f 001f001f 001f001f     ................
 80332a8:	001f001f 001f001f 001f001f 001f001f     ................
 80332b8:	001f001f 001f001f 001f001f 00200020     ............ . .
 80332c8:	00200020 00200020 00200020 00200020      . . . . . . . .
 80332d8:	00200020 00200020 00200020 00200020      . . . . . . . .
 80332e8:	00200020 00200020 00200020 00200020      . . . . . . . .
 80332f8:	00200020 00200020 00200020 00200020      . . . . . . . .
 8033308:	00200020 00200020 00200020 00200020      . . . . . . . .
 8033318:	00200020 00200020 00200020 00200020      . . . . . . . .
 8033328:	00200020 00200020 00200020 00200020      . . . . . . . .
 8033338:	00200020 00200020 00200020 00200020      . . . . . . . .
 8033348:	00200020 00200020 00200020 00200020      . . . . . . . .
 8033358:	00200020 00200020 00200020 00200020      . . . . . . . .
 8033368:	00200020 00200020 00200020 00200020      . . . . . . . .
 8033378:	00200020 00200020 00200020 00200020      . . . . . . . .
 8033388:	00200020 00200020 00200020 00200020      . . . . . . . .
 8033398:	00200020 00200020 00200020 00200020      . . . . . . . .
 80333a8:	00200020 00200020 00210021 00210021      . . . .!.!.!.!.
 80333b8:	00210021 00210021 00210021 00210021     !.!.!.!.!.!.!.!.
 80333c8:	00210021 00210021 00210021 00210021     !.!.!.!.!.!.!.!.
 80333d8:	00210021 00210021 00210021 00210021     !.!.!.!.!.!.!.!.
 80333e8:	00210021 00210021 00210021 00210021     !.!.!.!.!.!.!.!.
 80333f8:	00210021 00210021 00210021 00210021     !.!.!.!.!.!.!.!.
 8033408:	00210021 00210021 00210021 00210021     !.!.!.!.!.!.!.!.
 8033418:	00210021 00210021 00210021 00210021     !.!.!.!.!.!.!.!.
 8033428:	00210021 00210021 00210021 00210021     !.!.!.!.!.!.!.!.
 8033438:	00210021 00210021 00210021 00210021     !.!.!.!.!.!.!.!.
 8033448:	00210021 00210021 00210021 00210021     !.!.!.!.!.!.!.!.
 8033458:	00210021 00210021 00210021 00210021     !.!.!.!.!.!.!.!.
 8033468:	00210021 00210021 00210021 00210021     !.!.!.!.!.!.!.!.
 8033478:	00210021 00210021 00210021 00210021     !.!.!.!.!.!.!.!.
 8033488:	00210021 00210021 00210021 00210021     !.!.!.!.!.!.!.!.
 8033498:	00220022 00220022 00220022 00220022     ".".".".".".".".
 80334a8:	00220022 00220022 00220022 00220022     ".".".".".".".".
 80334b8:	00220022 00220022 00220022 00220022     ".".".".".".".".
 80334c8:	00220022 00220022 00220022 00220022     ".".".".".".".".
 80334d8:	00220022 00220022 00220022 00220022     ".".".".".".".".
 80334e8:	00220022 00220022 00220022 00220022     ".".".".".".".".
 80334f8:	00220022 00220022 00220022 00220022     ".".".".".".".".
 8033508:	00220022 00220022 00220022 00220022     ".".".".".".".".
 8033518:	00220022 00220022 00220022 00220022     ".".".".".".".".
 8033528:	00220022 00220022 00220022 00220022     ".".".".".".".".
 8033538:	00220022 00220022 00220022 00220022     ".".".".".".".".
 8033548:	00220022 00220022 00220022 00220022     ".".".".".".".".
 8033558:	00220022 00220022 00220022 00220022     ".".".".".".".".
 8033568:	00220022 00220022 00220022 00220022     ".".".".".".".".
 8033578:	00220022 00230022 00230023 00230023     ".".".#.#.#.#.#.
 8033588:	00230023 00230023 00230023 00230023     #.#.#.#.#.#.#.#.
 8033598:	00230023 00230023 00230023 00230023     #.#.#.#.#.#.#.#.
 80335a8:	00230023 00230023 00230023 00230023     #.#.#.#.#.#.#.#.
 80335b8:	00230023 00230023 00230023 00230023     #.#.#.#.#.#.#.#.
 80335c8:	00230023 00230023 00230023 00230023     #.#.#.#.#.#.#.#.
 80335d8:	00230023 00230023 00230023 00230023     #.#.#.#.#.#.#.#.
 80335e8:	00230023 00230023 00230023 00230023     #.#.#.#.#.#.#.#.
 80335f8:	00230023 00230023 00230023 00230023     #.#.#.#.#.#.#.#.
 8033608:	00230023 00230023 00230023 00230023     #.#.#.#.#.#.#.#.
 8033618:	00230023 00230023 00230023 00230023     #.#.#.#.#.#.#.#.
 8033628:	00230023 00230023 00230023 00230023     #.#.#.#.#.#.#.#.
 8033638:	00230023 00230023 00230023 00230023     #.#.#.#.#.#.#.#.
 8033648:	00230023 00230023 00230023 00230023     #.#.#.#.#.#.#.#.
 8033658:	00230023 00230023 00240024 00240024     #.#.#.#.$.$.$.$.
 8033668:	00240024 00240024 00240024 00240024     $.$.$.$.$.$.$.$.
 8033678:	00240024 00240024 00240024 00240024     $.$.$.$.$.$.$.$.
 8033688:	00240024 00240024 00240024 00240024     $.$.$.$.$.$.$.$.
 8033698:	00240024 00240024 00240024 00240024     $.$.$.$.$.$.$.$.
 80336a8:	00240024 00240024 00240024 00240024     $.$.$.$.$.$.$.$.
 80336b8:	00240024 00240024 00240024 00240024     $.$.$.$.$.$.$.$.
 80336c8:	00240024 00240024 00240024 00240024     $.$.$.$.$.$.$.$.
 80336d8:	00240024 00240024 00240024 00240024     $.$.$.$.$.$.$.$.
 80336e8:	00240024 00240024 00240024 00240024     $.$.$.$.$.$.$.$.
 80336f8:	00240024 00240024 00240024 00240024     $.$.$.$.$.$.$.$.
 8033708:	00240024 00240024 00240024 00240024     $.$.$.$.$.$.$.$.
 8033718:	00240024 00240024 00240024 00240024     $.$.$.$.$.$.$.$.
 8033728:	00240024 00240024 00240024 00240024     $.$.$.$.$.$.$.$.
 8033738:	00240024 00240024 00250025 00250025     $.$.$.$.%.%.%.%.
 8033748:	00250025 00250025 00250025 00250025     %.%.%.%.%.%.%.%.
 8033758:	00250025 00250025 00250025 00250025     %.%.%.%.%.%.%.%.
 8033768:	00250025 00250025 00250025 00250025     %.%.%.%.%.%.%.%.
 8033778:	00250025 00250025 00250025 00250025     %.%.%.%.%.%.%.%.
 8033788:	00250025 00250025 00250025 00250025     %.%.%.%.%.%.%.%.
 8033798:	00250025 00250025 00250025 00250025     %.%.%.%.%.%.%.%.
 80337a8:	00250025 00250025 00250025 00250025     %.%.%.%.%.%.%.%.
 80337b8:	00250025 00250025 00250025 00250025     %.%.%.%.%.%.%.%.
 80337c8:	00250025 00250025 00250025 00250025     %.%.%.%.%.%.%.%.
 80337d8:	00250025 00250025 00250025 00250025     %.%.%.%.%.%.%.%.
 80337e8:	00250025 00250025 00250025 00250025     %.%.%.%.%.%.%.%.
 80337f8:	00250025 00250025 00250025 00250025     %.%.%.%.%.%.%.%.
 8033808:	00250025 00250025 00250025 00250025     %.%.%.%.%.%.%.%.
 8033818:	00250025 00260026 00260026 00260026     %.%.&.&.&.&.&.&.
 8033828:	00260026 00260026 00260026 00260026     &.&.&.&.&.&.&.&.
 8033838:	00260026 00260026 00260026 00260026     &.&.&.&.&.&.&.&.
 8033848:	00260026 00260026 00260026 00260026     &.&.&.&.&.&.&.&.
 8033858:	00260026 00260026 00260026 00260026     &.&.&.&.&.&.&.&.
 8033868:	00260026 00260026 00260026 00260026     &.&.&.&.&.&.&.&.
 8033878:	00260026 00260026 00260026 00260026     &.&.&.&.&.&.&.&.
 8033888:	00260026 00260026 00260026 00260026     &.&.&.&.&.&.&.&.
 8033898:	00260026 00260026 00260026 00260026     &.&.&.&.&.&.&.&.
 80338a8:	00260026 00260026 00260026 00260026     &.&.&.&.&.&.&.&.
 80338b8:	00260026 00260026 00260026 00260026     &.&.&.&.&.&.&.&.
 80338c8:	00260026 00260026 00260026 00260026     &.&.&.&.&.&.&.&.
 80338d8:	00260026 00260026 00260026 00260026     &.&.&.&.&.&.&.&.
 80338e8:	00260026 00260026 00260026 00270026     &.&.&.&.&.&.&.'.
 80338f8:	00270027 00270027 00270027 00270027     '.'.'.'.'.'.'.'.
 8033908:	00270027 00270027 00270027 00270027     '.'.'.'.'.'.'.'.
 8033918:	00270027 00270027 00270027 00270027     '.'.'.'.'.'.'.'.
 8033928:	00270027 00270027 00270027 00270027     '.'.'.'.'.'.'.'.
 8033938:	00270027 00270027 00270027 00270027     '.'.'.'.'.'.'.'.
 8033948:	00270027 00270027 00270027 00270027     '.'.'.'.'.'.'.'.
 8033958:	00270027 00270027 00270027 00270027     '.'.'.'.'.'.'.'.
 8033968:	00270027 00270027 00270027 00270027     '.'.'.'.'.'.'.'.
 8033978:	00270027 00270027 00270027 00270027     '.'.'.'.'.'.'.'.
 8033988:	00270027 00270027 00270027 00270027     '.'.'.'.'.'.'.'.
 8033998:	00270027 00270027 00270027 00270027     '.'.'.'.'.'.'.'.
 80339a8:	00270027 00270027 00270027 00270027     '.'.'.'.'.'.'.'.
 80339b8:	00270027 00270027 00270027 00270027     '.'.'.'.'.'.'.'.
 80339c8:	00270027 00280027 00280028 00280028     '.'.'.(.(.(.(.(.
 80339d8:	00280028 00280028 00280028 00280028     (.(.(.(.(.(.(.(.
 80339e8:	00280028 00280028 00280028 00280028     (.(.(.(.(.(.(.(.
 80339f8:	00280028 00280028 00280028 00280028     (.(.(.(.(.(.(.(.
 8033a08:	00280028 00280028 00280028 00280028     (.(.(.(.(.(.(.(.
 8033a18:	00280028 00280028 00280028 00280028     (.(.(.(.(.(.(.(.
 8033a28:	00280028 00280028 00280028 00280028     (.(.(.(.(.(.(.(.
 8033a38:	00280028 00280028 00280028 00280028     (.(.(.(.(.(.(.(.
 8033a48:	00280028 00280028 00280028 00280028     (.(.(.(.(.(.(.(.
 8033a58:	00280028 00280028 00280028 00280028     (.(.(.(.(.(.(.(.
 8033a68:	00280028 00280028 00280028 00280028     (.(.(.(.(.(.(.(.
 8033a78:	00280028 00280028 00280028 00280028     (.(.(.(.(.(.(.(.
 8033a88:	00280028 00280028 00280028 00280028     (.(.(.(.(.(.(.(.
 8033a98:	00280028 00280028 00280028 00290029     (.(.(.(.(.(.).).
 8033aa8:	00290029 00290029 00290029 00290029     ).).).).).).).).
 8033ab8:	00290029 00290029 00290029 00290029     ).).).).).).).).
 8033ac8:	00290029 00290029 00290029 00290029     ).).).).).).).).
 8033ad8:	00290029 00290029 00290029 00290029     ).).).).).).).).
 8033ae8:	00290029 00290029 00290029 00290029     ).).).).).).).).
 8033af8:	00290029 00290029 00290029 00290029     ).).).).).).).).
 8033b08:	00290029 00290029 00290029 00290029     ).).).).).).).).
 8033b18:	00290029 00290029 00290029 00290029     ).).).).).).).).
 8033b28:	00290029 00290029 00290029 00290029     ).).).).).).).).
 8033b38:	00290029 00290029 00290029 00290029     ).).).).).).).).
 8033b48:	00290029 00290029 00290029 00290029     ).).).).).).).).
 8033b58:	00290029 00290029 00290029 00290029     ).).).).).).).).
 8033b68:	00290029 00290029 00290029 002a0029     ).).).).).).).*.
 8033b78:	002a002a 002a002a 002a002a 002a002a     *.*.*.*.*.*.*.*.
 8033b88:	002a002a 002a002a 002a002a 002a002a     *.*.*.*.*.*.*.*.
 8033b98:	002a002a 002a002a 002a002a 002a002a     *.*.*.*.*.*.*.*.
 8033ba8:	002a002a 002a002a 002a002a 002a002a     *.*.*.*.*.*.*.*.
 8033bb8:	002a002a 002a002a 002a002a 002a002a     *.*.*.*.*.*.*.*.
 8033bc8:	002a002a 002a002a 002a002a 002a002a     *.*.*.*.*.*.*.*.
 8033bd8:	002a002a 002a002a 002a002a 002a002a     *.*.*.*.*.*.*.*.
 8033be8:	002a002a 002a002a 002a002a 002a002a     *.*.*.*.*.*.*.*.
 8033bf8:	002a002a 002a002a 002a002a 002a002a     *.*.*.*.*.*.*.*.
 8033c08:	002a002a 002a002a 002a002a 002a002a     *.*.*.*.*.*.*.*.
 8033c18:	002a002a 002a002a 002a002a 002a002a     *.*.*.*.*.*.*.*.
 8033c28:	002a002a 002a002a 002a002a 002a002a     *.*.*.*.*.*.*.*.
 8033c38:	002a002a 002a002a 002a002a 002b002a     *.*.*.*.*.*.*.+.
 8033c48:	002b002b 002b002b 002b002b 002b002b     +.+.+.+.+.+.+.+.
 8033c58:	002b002b 002b002b 002b002b 002b002b     +.+.+.+.+.+.+.+.
 8033c68:	002b002b 002b002b 002b002b 002b002b     +.+.+.+.+.+.+.+.
 8033c78:	002b002b 002b002b 002b002b 002b002b     +.+.+.+.+.+.+.+.
 8033c88:	002b002b 002b002b 002b002b 002b002b     +.+.+.+.+.+.+.+.
 8033c98:	002b002b 002b002b 002b002b 002b002b     +.+.+.+.+.+.+.+.
 8033ca8:	002b002b 002b002b 002b002b 002b002b     +.+.+.+.+.+.+.+.
 8033cb8:	002b002b 002b002b 002b002b 002b002b     +.+.+.+.+.+.+.+.
 8033cc8:	002b002b 002b002b 002b002b 002b002b     +.+.+.+.+.+.+.+.
 8033cd8:	002b002b 002b002b 002b002b 002b002b     +.+.+.+.+.+.+.+.
 8033ce8:	002b002b 002b002b 002b002b 002b002b     +.+.+.+.+.+.+.+.
 8033cf8:	002b002b 002b002b 002b002b 002b002b     +.+.+.+.+.+.+.+.
 8033d08:	002b002b 002b002b 002b002b 002c002c     +.+.+.+.+.+.,.,.
 8033d18:	002c002c 002c002c 002c002c 002c002c     ,.,.,.,.,.,.,.,.
 8033d28:	002c002c 002c002c 002c002c 002c002c     ,.,.,.,.,.,.,.,.
 8033d38:	002c002c 002c002c 002c002c 002c002c     ,.,.,.,.,.,.,.,.
 8033d48:	002c002c 002c002c 002c002c 002c002c     ,.,.,.,.,.,.,.,.
 8033d58:	002c002c 002c002c 002c002c 002c002c     ,.,.,.,.,.,.,.,.
 8033d68:	002c002c 002c002c 002c002c 002c002c     ,.,.,.,.,.,.,.,.
 8033d78:	002c002c 002c002c 002c002c 002c002c     ,.,.,.,.,.,.,.,.
 8033d88:	002c002c 002c002c 002c002c 002c002c     ,.,.,.,.,.,.,.,.
 8033d98:	002c002c 002c002c 002c002c 002c002c     ,.,.,.,.,.,.,.,.
 8033da8:	002c002c 002c002c 002c002c 002c002c     ,.,.,.,.,.,.,.,.
 8033db8:	002c002c 002c002c 002c002c 002c002c     ,.,.,.,.,.,.,.,.
 8033dc8:	002c002c 002c002c 002c002c 002c002c     ,.,.,.,.,.,.,.,.
 8033dd8:	002c002c 002c002c 002d002d 002d002d     ,.,.,.,.-.-.-.-.
 8033de8:	002d002d 002d002d 002d002d 002d002d     -.-.-.-.-.-.-.-.
 8033df8:	002d002d 002d002d 002d002d 002d002d     -.-.-.-.-.-.-.-.
 8033e08:	002d002d 002d002d 002d002d 002d002d     -.-.-.-.-.-.-.-.
 8033e18:	002d002d 002d002d 002d002d 002d002d     -.-.-.-.-.-.-.-.
 8033e28:	002d002d 002d002d 002d002d 002d002d     -.-.-.-.-.-.-.-.
 8033e38:	002d002d 002d002d 002d002d 002d002d     -.-.-.-.-.-.-.-.
 8033e48:	002d002d 002d002d 002d002d 002d002d     -.-.-.-.-.-.-.-.
 8033e58:	002d002d 002d002d 002d002d 002d002d     -.-.-.-.-.-.-.-.
 8033e68:	002d002d 002d002d 002d002d 002d002d     -.-.-.-.-.-.-.-.
 8033e78:	002d002d 002d002d 002d002d 002d002d     -.-.-.-.-.-.-.-.
 8033e88:	002d002d 002d002d 002d002d 002d002d     -.-.-.-.-.-.-.-.
 8033e98:	002d002d 002d002d 002d002d 002d002d     -.-.-.-.-.-.-.-.
 8033ea8:	002e002e 002e002e 002e002e 002e002e     ................
 8033eb8:	002e002e 002e002e 002e002e 002e002e     ................
 8033ec8:	002e002e 002e002e 002e002e 002e002e     ................
 8033ed8:	002e002e 002e002e 002e002e 002e002e     ................
 8033ee8:	002e002e 002e002e 002e002e 002e002e     ................
 8033ef8:	002e002e 002e002e 002e002e 002e002e     ................
 8033f08:	002e002e 002e002e 002e002e 002e002e     ................
 8033f18:	002e002e 002e002e 002e002e 002e002e     ................
 8033f28:	002e002e 002e002e 002e002e 002e002e     ................
 8033f38:	002e002e 002e002e 002e002e 002e002e     ................
 8033f48:	002e002e 002e002e 002e002e 002e002e     ................
 8033f58:	002e002e 002e002e 002e002e 002e002e     ................
 8033f68:	002e002e 002e002e 002f002f 002f002f     .......././././.
 8033f78:	002f002f 002f002f 002f002f 002f002f     /./././././././.
 8033f88:	002f002f 002f002f 002f002f 002f002f     /./././././././.
 8033f98:	002f002f 002f002f 002f002f 002f002f     /./././././././.
 8033fa8:	002f002f 002f002f 002f002f 002f002f     /./././././././.
 8033fb8:	002f002f 002f002f 002f002f 002f002f     /./././././././.
 8033fc8:	002f002f 002f002f 002f002f 002f002f     /./././././././.
 8033fd8:	002f002f 002f002f 002f002f 002f002f     /./././././././.
 8033fe8:	002f002f 002f002f 002f002f 002f002f     /./././././././.
 8033ff8:	002f002f 002f002f 002f002f 002f002f     /./././././././.
 8034008:	002f002f 002f002f 002f002f 002f002f     /./././././././.
 8034018:	002f002f 002f002f 002f002f 002f002f     /./././././././.
 8034028:	002f002f 002f002f 002f002f 0030002f     /././././././.0.
 8034038:	00300030 00300030 00300030 00300030     0.0.0.0.0.0.0.0.
 8034048:	00300030 00300030 00300030 00300030     0.0.0.0.0.0.0.0.
 8034058:	00300030 00300030 00300030 00300030     0.0.0.0.0.0.0.0.
 8034068:	00300030 00300030 00300030 00300030     0.0.0.0.0.0.0.0.
 8034078:	00300030 00300030 00300030 00300030     0.0.0.0.0.0.0.0.
 8034088:	00300030 00300030 00300030 00300030     0.0.0.0.0.0.0.0.
 8034098:	00300030 00300030 00300030 00300030     0.0.0.0.0.0.0.0.
 80340a8:	00300030 00300030 00300030 00300030     0.0.0.0.0.0.0.0.
 80340b8:	00300030 00300030 00300030 00300030     0.0.0.0.0.0.0.0.
 80340c8:	00300030 00300030 00300030 00300030     0.0.0.0.0.0.0.0.
 80340d8:	00300030 00300030 00300030 00300030     0.0.0.0.0.0.0.0.
 80340e8:	00300030 00300030 00300030 00300030     0.0.0.0.0.0.0.0.
 80340f8:	00310030 00310031 00310031 00310031     0.1.1.1.1.1.1.1.
 8034108:	00310031 00310031 00310031 00310031     1.1.1.1.1.1.1.1.
 8034118:	00310031 00310031 00310031 00310031     1.1.1.1.1.1.1.1.
 8034128:	00310031 00310031 00310031 00310031     1.1.1.1.1.1.1.1.
 8034138:	00310031 00310031 00310031 00310031     1.1.1.1.1.1.1.1.
 8034148:	00310031 00310031 00310031 00310031     1.1.1.1.1.1.1.1.
 8034158:	00310031 00310031 00310031 00310031     1.1.1.1.1.1.1.1.
 8034168:	00310031 00310031 00310031 00310031     1.1.1.1.1.1.1.1.
 8034178:	00310031 00310031 00310031 00310031     1.1.1.1.1.1.1.1.
 8034188:	00310031 00310031 00310031 00310031     1.1.1.1.1.1.1.1.
 8034198:	00310031 00310031 00310031 00310031     1.1.1.1.1.1.1.1.
 80341a8:	00310031 00310031 00310031 00310031     1.1.1.1.1.1.1.1.
 80341b8:	00310031 00320032 00320032 00320032     1.1.2.2.2.2.2.2.
 80341c8:	00320032 00320032 00320032 00320032     2.2.2.2.2.2.2.2.
 80341d8:	00320032 00320032 00320032 00320032     2.2.2.2.2.2.2.2.
 80341e8:	00320032 00320032 00320032 00320032     2.2.2.2.2.2.2.2.
 80341f8:	00320032 00320032 00320032 00320032     2.2.2.2.2.2.2.2.
 8034208:	00320032 00320032 00320032 00320032     2.2.2.2.2.2.2.2.
 8034218:	00320032 00320032 00320032 00320032     2.2.2.2.2.2.2.2.
 8034228:	00320032 00320032 00320032 00320032     2.2.2.2.2.2.2.2.
 8034238:	00320032 00320032 00320032 00320032     2.2.2.2.2.2.2.2.
 8034248:	00320032 00320032 00320032 00320032     2.2.2.2.2.2.2.2.
 8034258:	00320032 00320032 00320032 00320032     2.2.2.2.2.2.2.2.
 8034268:	00320032 00320032 00320032 00320032     2.2.2.2.2.2.2.2.
 8034278:	00320032 00330033 00330033 00330033     2.2.3.3.3.3.3.3.
 8034288:	00330033 00330033 00330033 00330033     3.3.3.3.3.3.3.3.
 8034298:	00330033 00330033 00330033 00330033     3.3.3.3.3.3.3.3.
 80342a8:	00330033 00330033 00330033 00330033     3.3.3.3.3.3.3.3.
 80342b8:	00330033 00330033 00330033 00330033     3.3.3.3.3.3.3.3.
 80342c8:	00330033 00330033 00330033 00330033     3.3.3.3.3.3.3.3.
 80342d8:	00330033 00330033 00330033 00330033     3.3.3.3.3.3.3.3.
 80342e8:	00330033 00330033 00330033 00330033     3.3.3.3.3.3.3.3.
 80342f8:	00330033 00330033 00330033 00330033     3.3.3.3.3.3.3.3.
 8034308:	00330033 00330033 00330033 00330033     3.3.3.3.3.3.3.3.
 8034318:	00330033 00330033 00330033 00330033     3.3.3.3.3.3.3.3.
 8034328:	00330033 00330033 00330033 00330033     3.3.3.3.3.3.3.3.
 8034338:	00340033 00340034 00340034 00340034     3.4.4.4.4.4.4.4.
 8034348:	00340034 00340034 00340034 00340034     4.4.4.4.4.4.4.4.
 8034358:	00340034 00340034 00340034 00340034     4.4.4.4.4.4.4.4.
 8034368:	00340034 00340034 00340034 00340034     4.4.4.4.4.4.4.4.
 8034378:	00340034 00340034 00340034 00340034     4.4.4.4.4.4.4.4.
 8034388:	00340034 00340034 00340034 00340034     4.4.4.4.4.4.4.4.
 8034398:	00340034 00340034 00340034 00340034     4.4.4.4.4.4.4.4.
 80343a8:	00340034 00340034 00340034 00340034     4.4.4.4.4.4.4.4.
 80343b8:	00340034 00340034 00340034 00340034     4.4.4.4.4.4.4.4.
 80343c8:	00340034 00340034 00340034 00340034     4.4.4.4.4.4.4.4.
 80343d8:	00340034 00340034 00340034 00340034     4.4.4.4.4.4.4.4.
 80343e8:	00340034 00340034 00340034 00350034     4.4.4.4.4.4.4.5.
 80343f8:	00350035 00350035 00350035 00350035     5.5.5.5.5.5.5.5.
 8034408:	00350035 00350035 00350035 00350035     5.5.5.5.5.5.5.5.
 8034418:	00350035 00350035 00350035 00350035     5.5.5.5.5.5.5.5.
 8034428:	00350035 00350035 00350035 00350035     5.5.5.5.5.5.5.5.
 8034438:	00350035 00350035 00350035 00350035     5.5.5.5.5.5.5.5.
 8034448:	00350035 00350035 00350035 00350035     5.5.5.5.5.5.5.5.
 8034458:	00350035 00350035 00350035 00350035     5.5.5.5.5.5.5.5.
 8034468:	00350035 00350035 00350035 00350035     5.5.5.5.5.5.5.5.
 8034478:	00350035 00350035 00350035 00350035     5.5.5.5.5.5.5.5.
 8034488:	00350035 00350035 00350035 00350035     5.5.5.5.5.5.5.5.
 8034498:	00350035 00350035 00350035 00350035     5.5.5.5.5.5.5.5.
 80344a8:	00350035 00350035 00360035 00360036     5.5.5.5.5.6.6.6.
 80344b8:	00360036 00360036 00360036 00360036     6.6.6.6.6.6.6.6.
 80344c8:	00360036 00360036 00360036 00360036     6.6.6.6.6.6.6.6.
 80344d8:	00360036 00360036 00360036 00360036     6.6.6.6.6.6.6.6.
 80344e8:	00360036 00360036 00360036 00360036     6.6.6.6.6.6.6.6.
 80344f8:	00360036 00360036 00360036 00360036     6.6.6.6.6.6.6.6.
 8034508:	00360036 00360036 00360036 00360036     6.6.6.6.6.6.6.6.
 8034518:	00360036 00360036 00360036 00360036     6.6.6.6.6.6.6.6.
 8034528:	00360036 00360036 00360036 00360036     6.6.6.6.6.6.6.6.
 8034538:	00360036 00360036 00360036 00360036     6.6.6.6.6.6.6.6.
 8034548:	00360036 00360036 00360036 00360036     6.6.6.6.6.6.6.6.
 8034558:	00360036 00360036 00360036 00360036     6.6.6.6.6.6.6.6.
 8034568:	00360036 00370037 00370037 00370037     6.6.7.7.7.7.7.7.
 8034578:	00370037 00370037 00370037 00370037     7.7.7.7.7.7.7.7.
 8034588:	00370037 00370037 00370037 00370037     7.7.7.7.7.7.7.7.
 8034598:	00370037 00370037 00370037 00370037     7.7.7.7.7.7.7.7.
 80345a8:	00370037 00370037 00370037 00370037     7.7.7.7.7.7.7.7.
 80345b8:	00370037 00370037 00370037 00370037     7.7.7.7.7.7.7.7.
 80345c8:	00370037 00370037 00370037 00370037     7.7.7.7.7.7.7.7.
 80345d8:	00370037 00370037 00370037 00370037     7.7.7.7.7.7.7.7.
 80345e8:	00370037 00370037 00370037 00370037     7.7.7.7.7.7.7.7.
 80345f8:	00370037 00370037 00370037 00370037     7.7.7.7.7.7.7.7.
 8034608:	00370037 00370037 00370037 00370037     7.7.7.7.7.7.7.7.
 8034618:	00370037 00370037 00370037 00380038     7.7.7.7.7.7.8.8.
 8034628:	00380038 00380038 00380038 00380038     8.8.8.8.8.8.8.8.
 8034638:	00380038 00380038 00380038 00380038     8.8.8.8.8.8.8.8.
 8034648:	00380038 00380038 00380038 00380038     8.8.8.8.8.8.8.8.
 8034658:	00380038 00380038 00380038 00380038     8.8.8.8.8.8.8.8.
 8034668:	00380038 00380038 00380038 00380038     8.8.8.8.8.8.8.8.
 8034678:	00380038 00380038 00380038 00380038     8.8.8.8.8.8.8.8.
 8034688:	00380038 00380038 00380038 00380038     8.8.8.8.8.8.8.8.
 8034698:	00380038 00380038 00380038 00380038     8.8.8.8.8.8.8.8.
 80346a8:	00380038 00380038 00380038 00380038     8.8.8.8.8.8.8.8.
 80346b8:	00380038 00380038 00380038 00380038     8.8.8.8.8.8.8.8.
 80346c8:	00380038 00380038 00380038 00380038     8.8.8.8.8.8.8.8.
 80346d8:	00390038 00390039 00390039 00390039     8.9.9.9.9.9.9.9.
 80346e8:	00390039 00390039 00390039 00390039     9.9.9.9.9.9.9.9.
 80346f8:	00390039 00390039 00390039 00390039     9.9.9.9.9.9.9.9.
 8034708:	00390039 00390039 00390039 00390039     9.9.9.9.9.9.9.9.
 8034718:	00390039 00390039 00390039 00390039     9.9.9.9.9.9.9.9.
 8034728:	00390039 00390039 00390039 00390039     9.9.9.9.9.9.9.9.
 8034738:	00390039 00390039 00390039 00390039     9.9.9.9.9.9.9.9.
 8034748:	00390039 00390039 00390039 00390039     9.9.9.9.9.9.9.9.
 8034758:	00390039 00390039 00390039 00390039     9.9.9.9.9.9.9.9.
 8034768:	00390039 00390039 00390039 00390039     9.9.9.9.9.9.9.9.
 8034778:	00390039 00390039 00390039 00390039     9.9.9.9.9.9.9.9.
 8034788:	00390039 00390039 003a003a 003a003a     9.9.9.9.:.:.:.:.
 8034798:	003a003a 003a003a 003a003a 003a003a     :.:.:.:.:.:.:.:.
 80347a8:	003a003a 003a003a 003a003a 003a003a     :.:.:.:.:.:.:.:.
 80347b8:	003a003a 003a003a 003a003a 003a003a     :.:.:.:.:.:.:.:.
 80347c8:	003a003a 003a003a 003a003a 003a003a     :.:.:.:.:.:.:.:.
 80347d8:	003a003a 003a003a 003a003a 003a003a     :.:.:.:.:.:.:.:.
 80347e8:	003a003a 003a003a 003a003a 003a003a     :.:.:.:.:.:.:.:.
 80347f8:	003a003a 003a003a 003a003a 003a003a     :.:.:.:.:.:.:.:.
 8034808:	003a003a 003a003a 003a003a 003a003a     :.:.:.:.:.:.:.:.
 8034818:	003a003a 003a003a 003a003a 003a003a     :.:.:.:.:.:.:.:.
 8034828:	003a003a 003a003a 003a003a 003a003a     :.:.:.:.:.:.:.:.
 8034838:	003a003a 003a003a 003b003a 003b003b     :.:.:.:.:.;.;.;.
 8034848:	003b003b 003b003b 003b003b 003b003b     ;.;.;.;.;.;.;.;.
 8034858:	003b003b 003b003b 003b003b 003b003b     ;.;.;.;.;.;.;.;.
 8034868:	003b003b 003b003b 003b003b 003b003b     ;.;.;.;.;.;.;.;.
 8034878:	003b003b 003b003b 003b003b 003b003b     ;.;.;.;.;.;.;.;.
 8034888:	003b003b 003b003b 003b003b 003b003b     ;.;.;.;.;.;.;.;.
 8034898:	003b003b 003b003b 003b003b 003b003b     ;.;.;.;.;.;.;.;.
 80348a8:	003b003b 003b003b 003b003b 003b003b     ;.;.;.;.;.;.;.;.
 80348b8:	003b003b 003b003b 003b003b 003b003b     ;.;.;.;.;.;.;.;.
 80348c8:	003b003b 003b003b 003b003b 003b003b     ;.;.;.;.;.;.;.;.
 80348d8:	003b003b 003b003b 003b003b 003b003b     ;.;.;.;.;.;.;.;.
 80348e8:	003b003b 003b003b 003b003b 003c003b     ;.;.;.;.;.;.;.<.
 80348f8:	003c003c 003c003c 003c003c 003c003c     <.<.<.<.<.<.<.<.
 8034908:	003c003c 003c003c 003c003c 003c003c     <.<.<.<.<.<.<.<.
 8034918:	003c003c 003c003c 003c003c 003c003c     <.<.<.<.<.<.<.<.
 8034928:	003c003c 003c003c 003c003c 003c003c     <.<.<.<.<.<.<.<.
 8034938:	003c003c 003c003c 003c003c 003c003c     <.<.<.<.<.<.<.<.
 8034948:	003c003c 003c003c 003c003c 003c003c     <.<.<.<.<.<.<.<.
 8034958:	003c003c 003c003c 003c003c 003c003c     <.<.<.<.<.<.<.<.
 8034968:	003c003c 003c003c 003c003c 003c003c     <.<.<.<.<.<.<.<.
 8034978:	003c003c 003c003c 003c003c 003c003c     <.<.<.<.<.<.<.<.
 8034988:	003c003c 003c003c 003c003c 003c003c     <.<.<.<.<.<.<.<.
 8034998:	003c003c 003c003c 003c003c 003d003c     <.<.<.<.<.<.<.=.
 80349a8:	003d003d 003d003d 003d003d 003d003d     =.=.=.=.=.=.=.=.
 80349b8:	003d003d 003d003d 003d003d 003d003d     =.=.=.=.=.=.=.=.
 80349c8:	003d003d 003d003d 003d003d 003d003d     =.=.=.=.=.=.=.=.
 80349d8:	003d003d 003d003d 003d003d 003d003d     =.=.=.=.=.=.=.=.
 80349e8:	003d003d 003d003d 003d003d 003d003d     =.=.=.=.=.=.=.=.
 80349f8:	003d003d 003d003d 003d003d 003d003d     =.=.=.=.=.=.=.=.
 8034a08:	003d003d 003d003d 003d003d 003d003d     =.=.=.=.=.=.=.=.
 8034a18:	003d003d 003d003d 003d003d 003d003d     =.=.=.=.=.=.=.=.
 8034a28:	003d003d 003d003d 003d003d 003d003d     =.=.=.=.=.=.=.=.
 8034a38:	003d003d 003d003d 003d003d 003d003d     =.=.=.=.=.=.=.=.
 8034a48:	003d003d 003d003d 003d003d 003e003d     =.=.=.=.=.=.=.>.
 8034a58:	003e003e 003e003e 003e003e 003e003e     >.>.>.>.>.>.>.>.
 8034a68:	003e003e 003e003e 003e003e 003e003e     >.>.>.>.>.>.>.>.
 8034a78:	003e003e 003e003e 003e003e 003e003e     >.>.>.>.>.>.>.>.
 8034a88:	003e003e 003e003e 003e003e 003e003e     >.>.>.>.>.>.>.>.
 8034a98:	003e003e 003e003e 003e003e 003e003e     >.>.>.>.>.>.>.>.
 8034aa8:	003e003e 003e003e 003e003e 003e003e     >.>.>.>.>.>.>.>.
 8034ab8:	003e003e 003e003e 003e003e 003e003e     >.>.>.>.>.>.>.>.
 8034ac8:	003e003e 003e003e 003e003e 003e003e     >.>.>.>.>.>.>.>.
 8034ad8:	003e003e 003e003e 003e003e 003e003e     >.>.>.>.>.>.>.>.
 8034ae8:	003e003e 003e003e 003e003e 003e003e     >.>.>.>.>.>.>.>.
 8034af8:	003e003e 003e003e 003e003e 003f003f     >.>.>.>.>.>.?.?.
 8034b08:	003f003f 003f003f 003f003f 003f003f     ?.?.?.?.?.?.?.?.
 8034b18:	003f003f 003f003f 003f003f 003f003f     ?.?.?.?.?.?.?.?.
 8034b28:	003f003f 003f003f 003f003f 003f003f     ?.?.?.?.?.?.?.?.
 8034b38:	003f003f 003f003f 003f003f 003f003f     ?.?.?.?.?.?.?.?.
 8034b48:	003f003f 003f003f 003f003f 003f003f     ?.?.?.?.?.?.?.?.
 8034b58:	003f003f 003f003f 003f003f 003f003f     ?.?.?.?.?.?.?.?.
 8034b68:	003f003f 003f003f 003f003f 003f003f     ?.?.?.?.?.?.?.?.
 8034b78:	003f003f 003f003f 003f003f 003f003f     ?.?.?.?.?.?.?.?.
 8034b88:	003f003f 003f003f 003f003f 003f003f     ?.?.?.?.?.?.?.?.
 8034b98:	003f003f 003f003f 003f003f 003f003f     ?.?.?.?.?.?.?.?.
 8034ba8:	003f003f 003f003f 0040003f 00400040     ?.?.?.?.?.@.@.@.
 8034bb8:	00400040 00400040 00400040 00400040     @.@.@.@.@.@.@.@.
 8034bc8:	00400040 00400040 00400040 00400040     @.@.@.@.@.@.@.@.
 8034bd8:	00400040 00400040 00400040 00400040     @.@.@.@.@.@.@.@.
 8034be8:	00400040 00400040 00400040 00400040     @.@.@.@.@.@.@.@.
 8034bf8:	00400040 00400040 00400040 00400040     @.@.@.@.@.@.@.@.
 8034c08:	00400040 00400040 00400040 00400040     @.@.@.@.@.@.@.@.
 8034c18:	00400040 00400040 00400040 00400040     @.@.@.@.@.@.@.@.
 8034c28:	00400040 00400040 00400040 00400040     @.@.@.@.@.@.@.@.
 8034c38:	00400040 00400040 00400040 00400040     @.@.@.@.@.@.@.@.
 8034c48:	00400040 00400040 00400040 00400040     @.@.@.@.@.@.@.@.
 8034c58:	00400040 00410040 00410041 00410041     @.@.@.A.A.A.A.A.
 8034c68:	00410041 00410041 00410041 00410041     A.A.A.A.A.A.A.A.
 8034c78:	00410041 00410041 00410041 00410041     A.A.A.A.A.A.A.A.
 8034c88:	00410041 00410041 00410041 00410041     A.A.A.A.A.A.A.A.
 8034c98:	00410041 00410041 00410041 00410041     A.A.A.A.A.A.A.A.
 8034ca8:	00410041 00410041 00410041 00410041     A.A.A.A.A.A.A.A.
 8034cb8:	00410041 00410041 00410041 00410041     A.A.A.A.A.A.A.A.
 8034cc8:	00410041 00410041 00410041 00410041     A.A.A.A.A.A.A.A.
 8034cd8:	00410041 00410041 00410041 00410041     A.A.A.A.A.A.A.A.
 8034ce8:	00410041 00410041 00410041 00410041     A.A.A.A.A.A.A.A.
 8034cf8:	00410041 00410041 00410041 00410041     A.A.A.A.A.A.A.A.
 8034d08:	00420042 00420042 00420042 00420042     B.B.B.B.B.B.B.B.
 8034d18:	00420042 00420042 00420042 00420042     B.B.B.B.B.B.B.B.
 8034d28:	00420042 00420042 00420042 00420042     B.B.B.B.B.B.B.B.
 8034d38:	00420042 00420042 00420042 00420042     B.B.B.B.B.B.B.B.
 8034d48:	00420042 00420042 00420042 00420042     B.B.B.B.B.B.B.B.
 8034d58:	00420042 00420042 00420042 00420042     B.B.B.B.B.B.B.B.
 8034d68:	00420042 00420042 00420042 00420042     B.B.B.B.B.B.B.B.
 8034d78:	00420042 00420042 00420042 00420042     B.B.B.B.B.B.B.B.
 8034d88:	00420042 00420042 00420042 00420042     B.B.B.B.B.B.B.B.
 8034d98:	00420042 00420042 00420042 00420042     B.B.B.B.B.B.B.B.
 8034da8:	00420042 00420042 00430042 00430043     B.B.B.B.B.C.C.C.
 8034db8:	00430043 00430043 00430043 00430043     C.C.C.C.C.C.C.C.
 8034dc8:	00430043 00430043 00430043 00430043     C.C.C.C.C.C.C.C.
 8034dd8:	00430043 00430043 00430043 00430043     C.C.C.C.C.C.C.C.
 8034de8:	00430043 00430043 00430043 00430043     C.C.C.C.C.C.C.C.
 8034df8:	00430043 00430043 00430043 00430043     C.C.C.C.C.C.C.C.
 8034e08:	00430043 00430043 00430043 00430043     C.C.C.C.C.C.C.C.
 8034e18:	00430043 00430043 00430043 00430043     C.C.C.C.C.C.C.C.
 8034e28:	00430043 00430043 00430043 00430043     C.C.C.C.C.C.C.C.
 8034e38:	00430043 00430043 00430043 00430043     C.C.C.C.C.C.C.C.
 8034e48:	00430043 00430043 00430043 00430043     C.C.C.C.C.C.C.C.
 8034e58:	00440043 00440044 00440044 00440044     C.D.D.D.D.D.D.D.
 8034e68:	00440044 00440044 00440044 00440044     D.D.D.D.D.D.D.D.
 8034e78:	00440044 00440044 00440044 00440044     D.D.D.D.D.D.D.D.
 8034e88:	00440044 00440044 00440044 00440044     D.D.D.D.D.D.D.D.
 8034e98:	00440044 00440044 00440044 00440044     D.D.D.D.D.D.D.D.
 8034ea8:	00440044 00440044 00440044 00440044     D.D.D.D.D.D.D.D.
 8034eb8:	00440044 00440044 00440044 00440044     D.D.D.D.D.D.D.D.
 8034ec8:	00440044 00440044 00440044 00440044     D.D.D.D.D.D.D.D.
 8034ed8:	00440044 00440044 00440044 00440044     D.D.D.D.D.D.D.D.
 8034ee8:	00440044 00440044 00440044 00440044     D.D.D.D.D.D.D.D.
 8034ef8:	00440044 00440044 00450044 00450045     D.D.D.D.D.E.E.E.
 8034f08:	00450045 00450045 00450045 00450045     E.E.E.E.E.E.E.E.
 8034f18:	00450045 00450045 00450045 00450045     E.E.E.E.E.E.E.E.
 8034f28:	00450045 00450045 00450045 00450045     E.E.E.E.E.E.E.E.
 8034f38:	00450045 00450045 00450045 00450045     E.E.E.E.E.E.E.E.
 8034f48:	00450045 00450045 00450045 00450045     E.E.E.E.E.E.E.E.
 8034f58:	00450045 00450045 00450045 00450045     E.E.E.E.E.E.E.E.
 8034f68:	00450045 00450045 00450045 00450045     E.E.E.E.E.E.E.E.
 8034f78:	00450045 00450045 00450045 00450045     E.E.E.E.E.E.E.E.
 8034f88:	00450045 00450045 00450045 00450045     E.E.E.E.E.E.E.E.
 8034f98:	00450045 00450045 00450045 00450045     E.E.E.E.E.E.E.E.
 8034fa8:	00460046 00460046 00460046 00460046     F.F.F.F.F.F.F.F.
 8034fb8:	00460046 00460046 00460046 00460046     F.F.F.F.F.F.F.F.
 8034fc8:	00460046 00460046 00460046 00460046     F.F.F.F.F.F.F.F.
 8034fd8:	00460046 00460046 00460046 00460046     F.F.F.F.F.F.F.F.
 8034fe8:	00460046 00460046 00460046 00460046     F.F.F.F.F.F.F.F.
 8034ff8:	00460046 00460046 00460046 00460046     F.F.F.F.F.F.F.F.
 8035008:	00460046 00460046 00460046 00460046     F.F.F.F.F.F.F.F.
 8035018:	00460046 00460046 00460046 00460046     F.F.F.F.F.F.F.F.
 8035028:	00460046 00460046 00460046 00460046     F.F.F.F.F.F.F.F.
 8035038:	00460046 00460046 00460046 00460046     F.F.F.F.F.F.F.F.
 8035048:	00460046 00470046 00470047 00470047     F.F.F.G.G.G.G.G.
 8035058:	00470047 00470047 00470047 00470047     G.G.G.G.G.G.G.G.
 8035068:	00470047 00470047 00470047 00470047     G.G.G.G.G.G.G.G.
 8035078:	00470047 00470047 00470047 00470047     G.G.G.G.G.G.G.G.
 8035088:	00470047 00470047 00470047 00470047     G.G.G.G.G.G.G.G.
 8035098:	00470047 00470047 00470047 00470047     G.G.G.G.G.G.G.G.
 80350a8:	00470047 00470047 00470047 00470047     G.G.G.G.G.G.G.G.
 80350b8:	00470047 00470047 00470047 00470047     G.G.G.G.G.G.G.G.
 80350c8:	00470047 00470047 00470047 00470047     G.G.G.G.G.G.G.G.
 80350d8:	00470047 00470047 00470047 00470047     G.G.G.G.G.G.G.G.
 80350e8:	00470047 00470047 00480047 00480048     G.G.G.G.G.H.H.H.
 80350f8:	00480048 00480048 00480048 00480048     H.H.H.H.H.H.H.H.
 8035108:	00480048 00480048 00480048 00480048     H.H.H.H.H.H.H.H.
 8035118:	00480048 00480048 00480048 00480048     H.H.H.H.H.H.H.H.
 8035128:	00480048 00480048 00480048 00480048     H.H.H.H.H.H.H.H.
 8035138:	00480048 00480048 00480048 00480048     H.H.H.H.H.H.H.H.
 8035148:	00480048 00480048 00480048 00480048     H.H.H.H.H.H.H.H.
 8035158:	00480048 00480048 00480048 00480048     H.H.H.H.H.H.H.H.
 8035168:	00480048 00480048 00480048 00480048     H.H.H.H.H.H.H.H.
 8035178:	00480048 00480048 00480048 00480048     H.H.H.H.H.H.H.H.
 8035188:	00480048 00480048 00480048 00490048     H.H.H.H.H.H.H.I.
 8035198:	00490049 00490049 00490049 00490049     I.I.I.I.I.I.I.I.
 80351a8:	00490049 00490049 00490049 00490049     I.I.I.I.I.I.I.I.
 80351b8:	00490049 00490049 00490049 00490049     I.I.I.I.I.I.I.I.
 80351c8:	00490049 00490049 00490049 00490049     I.I.I.I.I.I.I.I.
 80351d8:	00490049 00490049 00490049 00490049     I.I.I.I.I.I.I.I.
 80351e8:	00490049 00490049 00490049 00490049     I.I.I.I.I.I.I.I.
 80351f8:	00490049 00490049 00490049 00490049     I.I.I.I.I.I.I.I.
 8035208:	00490049 00490049 00490049 00490049     I.I.I.I.I.I.I.I.
 8035218:	00490049 00490049 00490049 00490049     I.I.I.I.I.I.I.I.
 8035228:	00490049 00490049 00490049 00490049     I.I.I.I.I.I.I.I.
 8035238:	004a004a 004a004a 004a004a 004a004a     J.J.J.J.J.J.J.J.
 8035248:	004a004a 004a004a 004a004a 004a004a     J.J.J.J.J.J.J.J.
 8035258:	004a004a 004a004a 004a004a 004a004a     J.J.J.J.J.J.J.J.
 8035268:	004a004a 004a004a 004a004a 004a004a     J.J.J.J.J.J.J.J.
 8035278:	004a004a 004a004a 004a004a 004a004a     J.J.J.J.J.J.J.J.
 8035288:	004a004a 004a004a 004a004a 004a004a     J.J.J.J.J.J.J.J.
 8035298:	004a004a 004a004a 004a004a 004a004a     J.J.J.J.J.J.J.J.
 80352a8:	004a004a 004a004a 004a004a 004a004a     J.J.J.J.J.J.J.J.
 80352b8:	004a004a 004a004a 004a004a 004a004a     J.J.J.J.J.J.J.J.
 80352c8:	004a004a 004a004a 004a004a 004a004a     J.J.J.J.J.J.J.J.
 80352d8:	004b004a 004b004b 004b004b 004b004b     J.K.K.K.K.K.K.K.
 80352e8:	004b004b 004b004b 004b004b 004b004b     K.K.K.K.K.K.K.K.
 80352f8:	004b004b 004b004b 004b004b 004b004b     K.K.K.K.K.K.K.K.
 8035308:	004b004b 004b004b 004b004b 004b004b     K.K.K.K.K.K.K.K.
 8035318:	004b004b 004b004b 004b004b 004b004b     K.K.K.K.K.K.K.K.
 8035328:	004b004b 004b004b 004b004b 004b004b     K.K.K.K.K.K.K.K.
 8035338:	004b004b 004b004b 004b004b 004b004b     K.K.K.K.K.K.K.K.
 8035348:	004b004b 004b004b 004b004b 004b004b     K.K.K.K.K.K.K.K.
 8035358:	004b004b 004b004b 004b004b 004b004b     K.K.K.K.K.K.K.K.
 8035368:	004b004b 004b004b 004b004b 004b004b     K.K.K.K.K.K.K.K.
 8035378:	004c004b 004c004c 004c004c 004c004c     K.L.L.L.L.L.L.L.
 8035388:	004c004c 004c004c 004c004c 004c004c     L.L.L.L.L.L.L.L.
 8035398:	004c004c 004c004c 004c004c 004c004c     L.L.L.L.L.L.L.L.
 80353a8:	004c004c 004c004c 004c004c 004c004c     L.L.L.L.L.L.L.L.
 80353b8:	004c004c 004c004c 004c004c 004c004c     L.L.L.L.L.L.L.L.
 80353c8:	004c004c 004c004c 004c004c 004c004c     L.L.L.L.L.L.L.L.
 80353d8:	004c004c 004c004c 004c004c 004c004c     L.L.L.L.L.L.L.L.
 80353e8:	004c004c 004c004c 004c004c 004c004c     L.L.L.L.L.L.L.L.
 80353f8:	004c004c 004c004c 004c004c 004c004c     L.L.L.L.L.L.L.L.
 8035408:	004c004c 004c004c 004c004c 004c004c     L.L.L.L.L.L.L.L.
 8035418:	004d004c 004d004d 004d004d 004d004d     L.M.M.M.M.M.M.M.
 8035428:	004d004d 004d004d 004d004d 004d004d     M.M.M.M.M.M.M.M.
 8035438:	004d004d 004d004d 004d004d 004d004d     M.M.M.M.M.M.M.M.
 8035448:	004d004d 004d004d 004d004d 004d004d     M.M.M.M.M.M.M.M.
 8035458:	004d004d 004d004d 004d004d 004d004d     M.M.M.M.M.M.M.M.
 8035468:	004d004d 004d004d 004d004d 004d004d     M.M.M.M.M.M.M.M.
 8035478:	004d004d 004d004d 004d004d 004d004d     M.M.M.M.M.M.M.M.
 8035488:	004d004d 004d004d 004d004d 004d004d     M.M.M.M.M.M.M.M.
 8035498:	004d004d 004d004d 004d004d 004d004d     M.M.M.M.M.M.M.M.
 80354a8:	004d004d 004d004d 004d004d 004d004d     M.M.M.M.M.M.M.M.
 80354b8:	004e004d 004e004e 004e004e 004e004e     M.N.N.N.N.N.N.N.
 80354c8:	004e004e 004e004e 004e004e 004e004e     N.N.N.N.N.N.N.N.
 80354d8:	004e004e 004e004e 004e004e 004e004e     N.N.N.N.N.N.N.N.
 80354e8:	004e004e 004e004e 004e004e 004e004e     N.N.N.N.N.N.N.N.
 80354f8:	004e004e 004e004e 004e004e 004e004e     N.N.N.N.N.N.N.N.
 8035508:	004e004e 004e004e 004e004e 004e004e     N.N.N.N.N.N.N.N.
 8035518:	004e004e 004e004e 004e004e 004e004e     N.N.N.N.N.N.N.N.
 8035528:	004e004e 004e004e 004e004e 004e004e     N.N.N.N.N.N.N.N.
 8035538:	004e004e 004e004e 004e004e 004e004e     N.N.N.N.N.N.N.N.
 8035548:	004e004e 004e004e 004e004e 004f004e     N.N.N.N.N.N.N.O.
 8035558:	004f004f 004f004f 004f004f 004f004f     O.O.O.O.O.O.O.O.
 8035568:	004f004f 004f004f 004f004f 004f004f     O.O.O.O.O.O.O.O.
 8035578:	004f004f 004f004f 004f004f 004f004f     O.O.O.O.O.O.O.O.
 8035588:	004f004f 004f004f 004f004f 004f004f     O.O.O.O.O.O.O.O.
 8035598:	004f004f 004f004f 004f004f 004f004f     O.O.O.O.O.O.O.O.
 80355a8:	004f004f 004f004f 004f004f 004f004f     O.O.O.O.O.O.O.O.
 80355b8:	004f004f 004f004f 004f004f 004f004f     O.O.O.O.O.O.O.O.
 80355c8:	004f004f 004f004f 004f004f 004f004f     O.O.O.O.O.O.O.O.
 80355d8:	004f004f 004f004f 004f004f 004f004f     O.O.O.O.O.O.O.O.
 80355e8:	004f004f 004f004f 004f004f 00500050     O.O.O.O.O.O.P.P.
 80355f8:	00500050 00500050 00500050 00500050     P.P.P.P.P.P.P.P.
 8035608:	00500050 00500050 00500050 00500050     P.P.P.P.P.P.P.P.
 8035618:	00500050 00500050 00500050 00500050     P.P.P.P.P.P.P.P.
 8035628:	00500050 00500050 00500050 00500050     P.P.P.P.P.P.P.P.
 8035638:	00500050 00500050 00500050 00500050     P.P.P.P.P.P.P.P.
 8035648:	00500050 00500050 00500050 00500050     P.P.P.P.P.P.P.P.
 8035658:	00500050 00500050 00500050 00500050     P.P.P.P.P.P.P.P.
 8035668:	00500050 00500050 00500050 00500050     P.P.P.P.P.P.P.P.
 8035678:	00500050 00500050 00500050 00500050     P.P.P.P.P.P.P.P.
 8035688:	00500050 00500050 00510051 00510051     P.P.P.P.Q.Q.Q.Q.
 8035698:	00510051 00510051 00510051 00510051     Q.Q.Q.Q.Q.Q.Q.Q.
 80356a8:	00510051 00510051 00510051 00510051     Q.Q.Q.Q.Q.Q.Q.Q.
 80356b8:	00510051 00510051 00510051 00510051     Q.Q.Q.Q.Q.Q.Q.Q.
 80356c8:	00510051 00510051 00510051 00510051     Q.Q.Q.Q.Q.Q.Q.Q.
 80356d8:	00510051 00510051 00510051 00510051     Q.Q.Q.Q.Q.Q.Q.Q.
 80356e8:	00510051 00510051 00510051 00510051     Q.Q.Q.Q.Q.Q.Q.Q.
 80356f8:	00510051 00510051 00510051 00510051     Q.Q.Q.Q.Q.Q.Q.Q.
 8035708:	00510051 00510051 00510051 00510051     Q.Q.Q.Q.Q.Q.Q.Q.
 8035718:	00510051 00510051 00510051 00510051     Q.Q.Q.Q.Q.Q.Q.Q.
 8035728:	00510051 00520052 00520052 00520052     Q.Q.R.R.R.R.R.R.
 8035738:	00520052 00520052 00520052 00520052     R.R.R.R.R.R.R.R.
 8035748:	00520052 00520052 00520052 00520052     R.R.R.R.R.R.R.R.
 8035758:	00520052 00520052 00520052 00520052     R.R.R.R.R.R.R.R.
 8035768:	00520052 00520052 00520052 00520052     R.R.R.R.R.R.R.R.
 8035778:	00520052 00520052 00520052 00520052     R.R.R.R.R.R.R.R.
 8035788:	00520052 00520052 00520052 00520052     R.R.R.R.R.R.R.R.
 8035798:	00520052 00520052 00520052 00520052     R.R.R.R.R.R.R.R.
 80357a8:	00520052 00520052 00520052 00520052     R.R.R.R.R.R.R.R.
 80357b8:	00520052 00520052 00520052 00530052     R.R.R.R.R.R.R.S.
 80357c8:	00530053 00530053 00530053 00530053     S.S.S.S.S.S.S.S.
 80357d8:	00530053 00530053 00530053 00530053     S.S.S.S.S.S.S.S.
 80357e8:	00530053 00530053 00530053 00530053     S.S.S.S.S.S.S.S.
 80357f8:	00530053 00530053 00530053 00530053     S.S.S.S.S.S.S.S.
 8035808:	00530053 00530053 00530053 00530053     S.S.S.S.S.S.S.S.
 8035818:	00530053 00530053 00530053 00530053     S.S.S.S.S.S.S.S.
 8035828:	00530053 00530053 00530053 00530053     S.S.S.S.S.S.S.S.
 8035838:	00530053 00530053 00530053 00530053     S.S.S.S.S.S.S.S.
 8035848:	00530053 00530053 00530053 00530053     S.S.S.S.S.S.S.S.
 8035858:	00530053 00530053 00540054 00540054     S.S.S.S.T.T.T.T.
 8035868:	00540054 00540054 00540054 00540054     T.T.T.T.T.T.T.T.
 8035878:	00540054 00540054 00540054 00540054     T.T.T.T.T.T.T.T.
 8035888:	00540054 00540054 00540054 00540054     T.T.T.T.T.T.T.T.
 8035898:	00540054 00540054 00540054 00540054     T.T.T.T.T.T.T.T.
 80358a8:	00540054 00540054 00540054 00540054     T.T.T.T.T.T.T.T.
 80358b8:	00540054 00540054 00540054 00540054     T.T.T.T.T.T.T.T.
 80358c8:	00540054 00540054 00540054 00540054     T.T.T.T.T.T.T.T.
 80358d8:	00540054 00540054 00540054 00540054     T.T.T.T.T.T.T.T.
 80358e8:	00540054 00540054 00540054 00540054     T.T.T.T.T.T.T.T.
 80358f8:	00550054 00550055 00550055 00550055     T.U.U.U.U.U.U.U.
 8035908:	00550055 00550055 00550055 00550055     U.U.U.U.U.U.U.U.
 8035918:	00550055 00550055 00550055 00550055     U.U.U.U.U.U.U.U.
 8035928:	00550055 00550055 00550055 00550055     U.U.U.U.U.U.U.U.
 8035938:	00550055 00550055 00550055 00550055     U.U.U.U.U.U.U.U.
 8035948:	00550055 00550055 00550055 00550055     U.U.U.U.U.U.U.U.
 8035958:	00550055 00550055 00550055 00550055     U.U.U.U.U.U.U.U.
 8035968:	00550055 00550055 00550055 00550055     U.U.U.U.U.U.U.U.
 8035978:	00550055 00550055 00550055 00550055     U.U.U.U.U.U.U.U.
 8035988:	00550055 00550055 00560055 00560056     U.U.U.U.U.V.V.V.
 8035998:	00560056 00560056 00560056 00560056     V.V.V.V.V.V.V.V.
 80359a8:	00560056 00560056 00560056 00560056     V.V.V.V.V.V.V.V.
 80359b8:	00560056 00560056 00560056 00560056     V.V.V.V.V.V.V.V.
 80359c8:	00560056 00560056 00560056 00560056     V.V.V.V.V.V.V.V.
 80359d8:	00560056 00560056 00560056 00560056     V.V.V.V.V.V.V.V.
 80359e8:	00560056 00560056 00560056 00560056     V.V.V.V.V.V.V.V.
 80359f8:	00560056 00560056 00560056 00560056     V.V.V.V.V.V.V.V.
 8035a08:	00560056 00560056 00560056 00560056     V.V.V.V.V.V.V.V.
 8035a18:	00560056 00560056 00560056 00560056     V.V.V.V.V.V.V.V.
 8035a28:	00570057 00570057 00570057 00570057     W.W.W.W.W.W.W.W.
 8035a38:	00570057 00570057 00570057 00570057     W.W.W.W.W.W.W.W.
 8035a48:	00570057 00570057 00570057 00570057     W.W.W.W.W.W.W.W.
 8035a58:	00570057 00570057 00570057 00570057     W.W.W.W.W.W.W.W.
 8035a68:	00570057 00570057 00570057 00570057     W.W.W.W.W.W.W.W.
 8035a78:	00570057 00570057 00570057 00570057     W.W.W.W.W.W.W.W.
 8035a88:	00570057 00570057 00570057 00570057     W.W.W.W.W.W.W.W.
 8035a98:	00570057 00570057 00570057 00570057     W.W.W.W.W.W.W.W.
 8035aa8:	00570057 00570057 00570057 00570057     W.W.W.W.W.W.W.W.
 8035ab8:	00570057 00570057 00580058 00580058     W.W.W.W.X.X.X.X.
 8035ac8:	00580058 00580058 00580058 00580058     X.X.X.X.X.X.X.X.
 8035ad8:	00580058 00580058 00580058 00580058     X.X.X.X.X.X.X.X.
 8035ae8:	00580058 00580058 00580058 00580058     X.X.X.X.X.X.X.X.
 8035af8:	00580058 00580058 00580058 00580058     X.X.X.X.X.X.X.X.
 8035b08:	00580058 00580058 00580058 00580058     X.X.X.X.X.X.X.X.
 8035b18:	00580058 00580058 00580058 00580058     X.X.X.X.X.X.X.X.
 8035b28:	00580058 00580058 00580058 00580058     X.X.X.X.X.X.X.X.
 8035b38:	00580058 00580058 00580058 00580058     X.X.X.X.X.X.X.X.
 8035b48:	00580058 00580058 00580058 00590058     X.X.X.X.X.X.X.Y.
 8035b58:	00590059 00590059 00590059 00590059     Y.Y.Y.Y.Y.Y.Y.Y.
 8035b68:	00590059 00590059 00590059 00590059     Y.Y.Y.Y.Y.Y.Y.Y.
 8035b78:	00590059 00590059 00590059 00590059     Y.Y.Y.Y.Y.Y.Y.Y.
 8035b88:	00590059 00590059 00590059 00590059     Y.Y.Y.Y.Y.Y.Y.Y.
 8035b98:	00590059 00590059 00590059 00590059     Y.Y.Y.Y.Y.Y.Y.Y.
 8035ba8:	00590059 00590059 00590059 00590059     Y.Y.Y.Y.Y.Y.Y.Y.
 8035bb8:	00590059 00590059 00590059 00590059     Y.Y.Y.Y.Y.Y.Y.Y.
 8035bc8:	00590059 00590059 00590059 00590059     Y.Y.Y.Y.Y.Y.Y.Y.
 8035bd8:	00590059 00590059 00590059 00590059     Y.Y.Y.Y.Y.Y.Y.Y.
 8035be8:	00590059 005a005a 005a005a 005a005a     Y.Y.Z.Z.Z.Z.Z.Z.
 8035bf8:	005a005a 005a005a 005a005a 005a005a     Z.Z.Z.Z.Z.Z.Z.Z.
 8035c08:	005a005a 005a005a 005a005a 005a005a     Z.Z.Z.Z.Z.Z.Z.Z.
 8035c18:	005a005a 005a005a 005a005a 005a005a     Z.Z.Z.Z.Z.Z.Z.Z.
 8035c28:	005a005a 005a005a 005a005a 005a005a     Z.Z.Z.Z.Z.Z.Z.Z.
 8035c38:	005a005a 005a005a 005a005a 005a005a     Z.Z.Z.Z.Z.Z.Z.Z.
 8035c48:	005a005a 005a005a 005a005a 005a005a     Z.Z.Z.Z.Z.Z.Z.Z.
 8035c58:	005a005a 005a005a 005a005a 005a005a     Z.Z.Z.Z.Z.Z.Z.Z.
 8035c68:	005a005a 005a005a 005a005a 005a005a     Z.Z.Z.Z.Z.Z.Z.Z.
 8035c78:	005a005a 005a005a 005b005b 005b005b     Z.Z.Z.Z.[.[.[.[.
 8035c88:	005b005b 005b005b 005b005b 005b005b     [.[.[.[.[.[.[.[.
 8035c98:	005b005b 005b005b 005b005b 005b005b     [.[.[.[.[.[.[.[.
 8035ca8:	005b005b 005b005b 005b005b 005b005b     [.[.[.[.[.[.[.[.
 8035cb8:	005b005b 005b005b 005b005b 005b005b     [.[.[.[.[.[.[.[.
 8035cc8:	005b005b 005b005b 005b005b 005b005b     [.[.[.[.[.[.[.[.
 8035cd8:	005b005b 005b005b 005b005b 005b005b     [.[.[.[.[.[.[.[.
 8035ce8:	005b005b 005b005b 005b005b 005b005b     [.[.[.[.[.[.[.[.
 8035cf8:	005b005b 005b005b 005b005b 005b005b     [.[.[.[.[.[.[.[.
 8035d08:	005b005b 005b005b 005b005b 005c005c     [.[.[.[.[.[.\.\.
 8035d18:	005c005c 005c005c 005c005c 005c005c     \.\.\.\.\.\.\.\.
 8035d28:	005c005c 005c005c 005c005c 005c005c     \.\.\.\.\.\.\.\.
 8035d38:	005c005c 005c005c 005c005c 005c005c     \.\.\.\.\.\.\.\.
 8035d48:	005c005c 005c005c 005c005c 005c005c     \.\.\.\.\.\.\.\.
 8035d58:	005c005c 005c005c 005c005c 005c005c     \.\.\.\.\.\.\.\.
 8035d68:	005c005c 005c005c 005c005c 005c005c     \.\.\.\.\.\.\.\.
 8035d78:	005c005c 005c005c 005c005c 005c005c     \.\.\.\.\.\.\.\.
 8035d88:	005c005c 005c005c 005c005c 005c005c     \.\.\.\.\.\.\.\.
 8035d98:	005c005c 005c005c 005c005c 005c005c     \.\.\.\.\.\.\.\.
 8035da8:	005d005d 005d005d 005d005d 005d005d     ].].].].].].].].
 8035db8:	005d005d 005d005d 005d005d 005d005d     ].].].].].].].].
 8035dc8:	005d005d 005d005d 005d005d 005d005d     ].].].].].].].].
 8035dd8:	005d005d 005d005d 005d005d 005d005d     ].].].].].].].].
 8035de8:	005d005d 005d005d 005d005d 005d005d     ].].].].].].].].
 8035df8:	005d005d 005d005d 005d005d 005d005d     ].].].].].].].].
 8035e08:	005d005d 005d005d 005d005d 005d005d     ].].].].].].].].
 8035e18:	005d005d 005d005d 005d005d 005d005d     ].].].].].].].].
 8035e28:	005d005d 005d005d 005d005d 005d005d     ].].].].].].].].
 8035e38:	005e005d 005e005e 005e005e 005e005e     ].^.^.^.^.^.^.^.
 8035e48:	005e005e 005e005e 005e005e 005e005e     ^.^.^.^.^.^.^.^.
 8035e58:	005e005e 005e005e 005e005e 005e005e     ^.^.^.^.^.^.^.^.
 8035e68:	005e005e 005e005e 005e005e 005e005e     ^.^.^.^.^.^.^.^.
 8035e78:	005e005e 005e005e 005e005e 005e005e     ^.^.^.^.^.^.^.^.
 8035e88:	005e005e 005e005e 005e005e 005e005e     ^.^.^.^.^.^.^.^.
 8035e98:	005e005e 005e005e 005e005e 005e005e     ^.^.^.^.^.^.^.^.
 8035ea8:	005e005e 005e005e 005e005e 005e005e     ^.^.^.^.^.^.^.^.
 8035eb8:	005e005e 005e005e 005e005e 005e005e     ^.^.^.^.^.^.^.^.
 8035ec8:	005e005e 005f005f 005f005f 005f005f     ^.^._._._._._._.
 8035ed8:	005f005f 005f005f 005f005f 005f005f     _._._._._._._._.
 8035ee8:	005f005f 005f005f 005f005f 005f005f     _._._._._._._._.
 8035ef8:	005f005f 005f005f 005f005f 005f005f     _._._._._._._._.
 8035f08:	005f005f 005f005f 005f005f 005f005f     _._._._._._._._.
 8035f18:	005f005f 005f005f 005f005f 005f005f     _._._._._._._._.
 8035f28:	005f005f 005f005f 005f005f 005f005f     _._._._._._._._.
 8035f38:	005f005f 005f005f 005f005f 005f005f     _._._._._._._._.
 8035f48:	005f005f 005f005f 005f005f 005f005f     _._._._._._._._.
 8035f58:	005f005f 0060005f 00600060 00600060     _._._.`.`.`.`.`.
 8035f68:	00600060 00600060 00600060 00600060     `.`.`.`.`.`.`.`.
 8035f78:	00600060 00600060 00600060 00600060     `.`.`.`.`.`.`.`.
 8035f88:	00600060 00600060 00600060 00600060     `.`.`.`.`.`.`.`.
 8035f98:	00600060 00600060 00600060 00600060     `.`.`.`.`.`.`.`.
 8035fa8:	00600060 00600060 00600060 00600060     `.`.`.`.`.`.`.`.
 8035fb8:	00600060 00600060 00600060 00600060     `.`.`.`.`.`.`.`.
 8035fc8:	00600060 00600060 00600060 00600060     `.`.`.`.`.`.`.`.
 8035fd8:	00600060 00600060 00600060 00600060     `.`.`.`.`.`.`.`.
 8035fe8:	00600060 00610060 00610061 00610061     `.`.`.a.a.a.a.a.
 8035ff8:	00610061 00610061 00610061 00610061     a.a.a.a.a.a.a.a.
 8036008:	00610061 00610061 00610061 00610061     a.a.a.a.a.a.a.a.
 8036018:	00610061 00610061 00610061 00610061     a.a.a.a.a.a.a.a.
 8036028:	00610061 00610061 00610061 00610061     a.a.a.a.a.a.a.a.
 8036038:	00610061 00610061 00610061 00610061     a.a.a.a.a.a.a.a.
 8036048:	00610061 00610061 00610061 00610061     a.a.a.a.a.a.a.a.
 8036058:	00610061 00610061 00610061 00610061     a.a.a.a.a.a.a.a.
 8036068:	00610061 00610061 00610061 00610061     a.a.a.a.a.a.a.a.
 8036078:	00610061 00620061 00620062 00620062     a.a.a.b.b.b.b.b.
 8036088:	00620062 00620062 00620062 00620062     b.b.b.b.b.b.b.b.
 8036098:	00620062 00620062 00620062 00620062     b.b.b.b.b.b.b.b.
 80360a8:	00620062 00620062 00620062 00620062     b.b.b.b.b.b.b.b.
 80360b8:	00620062 00620062 00620062 00620062     b.b.b.b.b.b.b.b.
 80360c8:	00620062 00620062 00620062 00620062     b.b.b.b.b.b.b.b.
 80360d8:	00620062 00620062 00620062 00620062     b.b.b.b.b.b.b.b.
 80360e8:	00620062 00620062 00620062 00620062     b.b.b.b.b.b.b.b.
 80360f8:	00620062 00620062 00620062 00620062     b.b.b.b.b.b.b.b.
 8036108:	00620062 00630062 00630063 00630063     b.b.b.c.c.c.c.c.
 8036118:	00630063 00630063 00630063 00630063     c.c.c.c.c.c.c.c.
 8036128:	00630063 00630063 00630063 00630063     c.c.c.c.c.c.c.c.
 8036138:	00630063 00630063 00630063 00630063     c.c.c.c.c.c.c.c.
 8036148:	00630063 00630063 00630063 00630063     c.c.c.c.c.c.c.c.
 8036158:	00630063 00630063 00630063 00630063     c.c.c.c.c.c.c.c.
 8036168:	00630063 00630063 00630063 00630063     c.c.c.c.c.c.c.c.
 8036178:	00630063 00630063 00630063 00630063     c.c.c.c.c.c.c.c.
 8036188:	00630063 00630063 00630063 00630063     c.c.c.c.c.c.c.c.
 8036198:	00630063 00640063 00640064 00640064     c.c.c.d.d.d.d.d.
 80361a8:	00640064 00640064 00640064 00640064     d.d.d.d.d.d.d.d.
 80361b8:	00640064 00640064 00640064 00640064     d.d.d.d.d.d.d.d.
 80361c8:	00640064 00640064 00640064 00640064     d.d.d.d.d.d.d.d.
 80361d8:	00640064 00640064 00640064 00640064     d.d.d.d.d.d.d.d.
 80361e8:	00640064 00640064 00640064 00640064     d.d.d.d.d.d.d.d.
 80361f8:	00640064 00640064 00640064 00640064     d.d.d.d.d.d.d.d.
 8036208:	00640064 00640064 00640064 00640064     d.d.d.d.d.d.d.d.
 8036218:	00640064 00640064 00640064 00640064     d.d.d.d.d.d.d.d.
 8036228:	00640064 00650065 00650065 00650065     d.d.e.e.e.e.e.e.
 8036238:	00650065 00650065 00650065 00650065     e.e.e.e.e.e.e.e.
 8036248:	00650065 00650065 00650065 00650065     e.e.e.e.e.e.e.e.
 8036258:	00650065 00650065 00650065 00650065     e.e.e.e.e.e.e.e.
 8036268:	00650065 00650065 00650065 00650065     e.e.e.e.e.e.e.e.
 8036278:	00650065 00650065 00650065 00650065     e.e.e.e.e.e.e.e.
 8036288:	00650065 00650065 00650065 00650065     e.e.e.e.e.e.e.e.
 8036298:	00650065 00650065 00650065 00650065     e.e.e.e.e.e.e.e.
 80362a8:	00650065 00650065 00650065 00650065     e.e.e.e.e.e.e.e.
 80362b8:	00660065 00660066 00660066 00660066     e.f.f.f.f.f.f.f.
 80362c8:	00660066 00660066 00660066 00660066     f.f.f.f.f.f.f.f.
 80362d8:	00660066 00660066 00660066 00660066     f.f.f.f.f.f.f.f.
 80362e8:	00660066 00660066 00660066 00660066     f.f.f.f.f.f.f.f.
 80362f8:	00660066 00660066 00660066 00660066     f.f.f.f.f.f.f.f.
 8036308:	00660066 00660066 00660066 00660066     f.f.f.f.f.f.f.f.
 8036318:	00660066 00660066 00660066 00660066     f.f.f.f.f.f.f.f.
 8036328:	00660066 00660066 00660066 00660066     f.f.f.f.f.f.f.f.
 8036338:	00660066 00660066 00660066 00660066     f.f.f.f.f.f.f.f.
 8036348:	00670067 00670067 00670067 00670067     g.g.g.g.g.g.g.g.
 8036358:	00670067 00670067 00670067 00670067     g.g.g.g.g.g.g.g.
 8036368:	00670067 00670067 00670067 00670067     g.g.g.g.g.g.g.g.
 8036378:	00670067 00670067 00670067 00670067     g.g.g.g.g.g.g.g.
 8036388:	00670067 00670067 00670067 00670067     g.g.g.g.g.g.g.g.
 8036398:	00670067 00670067 00670067 00670067     g.g.g.g.g.g.g.g.
 80363a8:	00670067 00670067 00670067 00670067     g.g.g.g.g.g.g.g.
 80363b8:	00670067 00670067 00670067 00670067     g.g.g.g.g.g.g.g.
 80363c8:	00670067 00670067 00670067 00680068     g.g.g.g.g.g.h.h.
 80363d8:	00680068 00680068 00680068 00680068     h.h.h.h.h.h.h.h.
 80363e8:	00680068 00680068 00680068 00680068     h.h.h.h.h.h.h.h.
 80363f8:	00680068 00680068 00680068 00680068     h.h.h.h.h.h.h.h.
 8036408:	00680068 00680068 00680068 00680068     h.h.h.h.h.h.h.h.
 8036418:	00680068 00680068 00680068 00680068     h.h.h.h.h.h.h.h.
 8036428:	00680068 00680068 00680068 00680068     h.h.h.h.h.h.h.h.
 8036438:	00680068 00680068 00680068 00680068     h.h.h.h.h.h.h.h.
 8036448:	00680068 00680068 00680068 00680068     h.h.h.h.h.h.h.h.
 8036458:	00680068 00680068 00690069 00690069     h.h.h.h.i.i.i.i.
 8036468:	00690069 00690069 00690069 00690069     i.i.i.i.i.i.i.i.
 8036478:	00690069 00690069 00690069 00690069     i.i.i.i.i.i.i.i.
 8036488:	00690069 00690069 00690069 00690069     i.i.i.i.i.i.i.i.
 8036498:	00690069 00690069 00690069 00690069     i.i.i.i.i.i.i.i.
 80364a8:	00690069 00690069 00690069 00690069     i.i.i.i.i.i.i.i.
 80364b8:	00690069 00690069 00690069 00690069     i.i.i.i.i.i.i.i.
 80364c8:	00690069 00690069 00690069 00690069     i.i.i.i.i.i.i.i.
 80364d8:	00690069 00690069 00690069 00690069     i.i.i.i.i.i.i.i.
 80364e8:	00690069 006a006a 006a006a 006a006a     i.i.j.j.j.j.j.j.
 80364f8:	006a006a 006a006a 006a006a 006a006a     j.j.j.j.j.j.j.j.
 8036508:	006a006a 006a006a 006a006a 006a006a     j.j.j.j.j.j.j.j.
 8036518:	006a006a 006a006a 006a006a 006a006a     j.j.j.j.j.j.j.j.
 8036528:	006a006a 006a006a 006a006a 006a006a     j.j.j.j.j.j.j.j.
 8036538:	006a006a 006a006a 006a006a 006a006a     j.j.j.j.j.j.j.j.
 8036548:	006a006a 006a006a 006a006a 006a006a     j.j.j.j.j.j.j.j.
 8036558:	006a006a 006a006a 006a006a 006a006a     j.j.j.j.j.j.j.j.
 8036568:	006a006a 006a006a 006a006a 006a006a     j.j.j.j.j.j.j.j.
 8036578:	006b006b 006b006b 006b006b 006b006b     k.k.k.k.k.k.k.k.
 8036588:	006b006b 006b006b 006b006b 006b006b     k.k.k.k.k.k.k.k.
 8036598:	006b006b 006b006b 006b006b 006b006b     k.k.k.k.k.k.k.k.
 80365a8:	006b006b 006b006b 006b006b 006b006b     k.k.k.k.k.k.k.k.
 80365b8:	006b006b 006b006b 006b006b 006b006b     k.k.k.k.k.k.k.k.
 80365c8:	006b006b 006b006b 006b006b 006b006b     k.k.k.k.k.k.k.k.
 80365d8:	006b006b 006b006b 006b006b 006b006b     k.k.k.k.k.k.k.k.
 80365e8:	006b006b 006b006b 006b006b 006b006b     k.k.k.k.k.k.k.k.
 80365f8:	006b006b 006b006b 006c006b 006c006c     k.k.k.k.k.l.l.l.
 8036608:	006c006c 006c006c 006c006c 006c006c     l.l.l.l.l.l.l.l.
 8036618:	006c006c 006c006c 006c006c 006c006c     l.l.l.l.l.l.l.l.
 8036628:	006c006c 006c006c 006c006c 006c006c     l.l.l.l.l.l.l.l.
 8036638:	006c006c 006c006c 006c006c 006c006c     l.l.l.l.l.l.l.l.
 8036648:	006c006c 006c006c 006c006c 006c006c     l.l.l.l.l.l.l.l.
 8036658:	006c006c 006c006c 006c006c 006c006c     l.l.l.l.l.l.l.l.
 8036668:	006c006c 006c006c 006c006c 006c006c     l.l.l.l.l.l.l.l.
 8036678:	006c006c 006c006c 006c006c 006c006c     l.l.l.l.l.l.l.l.
 8036688:	006c006c 006d006d 006d006d 006d006d     l.l.m.m.m.m.m.m.
 8036698:	006d006d 006d006d 006d006d 006d006d     m.m.m.m.m.m.m.m.
 80366a8:	006d006d 006d006d 006d006d 006d006d     m.m.m.m.m.m.m.m.
 80366b8:	006d006d 006d006d 006d006d 006d006d     m.m.m.m.m.m.m.m.
 80366c8:	006d006d 006d006d 006d006d 006d006d     m.m.m.m.m.m.m.m.
 80366d8:	006d006d 006d006d 006d006d 006d006d     m.m.m.m.m.m.m.m.
 80366e8:	006d006d 006d006d 006d006d 006d006d     m.m.m.m.m.m.m.m.
 80366f8:	006d006d 006d006d 006d006d 006d006d     m.m.m.m.m.m.m.m.
 8036708:	006d006d 006d006d 006d006d 006e006d     m.m.m.m.m.m.m.n.
 8036718:	006e006e 006e006e 006e006e 006e006e     n.n.n.n.n.n.n.n.
 8036728:	006e006e 006e006e 006e006e 006e006e     n.n.n.n.n.n.n.n.
 8036738:	006e006e 006e006e 006e006e 006e006e     n.n.n.n.n.n.n.n.
 8036748:	006e006e 006e006e 006e006e 006e006e     n.n.n.n.n.n.n.n.
 8036758:	006e006e 006e006e 006e006e 006e006e     n.n.n.n.n.n.n.n.
 8036768:	006e006e 006e006e 006e006e 006e006e     n.n.n.n.n.n.n.n.
 8036778:	006e006e 006e006e 006e006e 006e006e     n.n.n.n.n.n.n.n.
 8036788:	006e006e 006e006e 006e006e 006e006e     n.n.n.n.n.n.n.n.
 8036798:	006e006e 006e006e 006f006f 006f006f     n.n.n.n.o.o.o.o.
 80367a8:	006f006f 006f006f 006f006f 006f006f     o.o.o.o.o.o.o.o.
 80367b8:	006f006f 006f006f 006f006f 006f006f     o.o.o.o.o.o.o.o.
 80367c8:	006f006f 006f006f 006f006f 006f006f     o.o.o.o.o.o.o.o.
 80367d8:	006f006f 006f006f 006f006f 006f006f     o.o.o.o.o.o.o.o.
 80367e8:	006f006f 006f006f 006f006f 006f006f     o.o.o.o.o.o.o.o.
 80367f8:	006f006f 006f006f 006f006f 006f006f     o.o.o.o.o.o.o.o.
 8036808:	006f006f 006f006f 006f006f 006f006f     o.o.o.o.o.o.o.o.
 8036818:	006f006f 006f006f 006f006f 006f006f     o.o.o.o.o.o.o.o.
 8036828:	00700070 00700070 00700070 00700070     p.p.p.p.p.p.p.p.
 8036838:	00700070 00700070 00700070 00700070     p.p.p.p.p.p.p.p.
 8036848:	00700070 00700070 00700070 00700070     p.p.p.p.p.p.p.p.
 8036858:	00700070 00700070 00700070 00700070     p.p.p.p.p.p.p.p.
 8036868:	00700070 00700070 00700070 00700070     p.p.p.p.p.p.p.p.
 8036878:	00700070 00700070 00700070 00700070     p.p.p.p.p.p.p.p.
 8036888:	00700070 00700070 00700070 00700070     p.p.p.p.p.p.p.p.
 8036898:	00700070 00700070 00700070 00700070     p.p.p.p.p.p.p.p.
 80368a8:	00700070 00700070 00710071 00710071     p.p.p.p.q.q.q.q.
 80368b8:	00710071 00710071 00710071 00710071     q.q.q.q.q.q.q.q.
 80368c8:	00710071 00710071 00710071 00710071     q.q.q.q.q.q.q.q.
 80368d8:	00710071 00710071 00710071 00710071     q.q.q.q.q.q.q.q.
 80368e8:	00710071 00710071 00710071 00710071     q.q.q.q.q.q.q.q.
 80368f8:	00710071 00710071 00710071 00710071     q.q.q.q.q.q.q.q.
 8036908:	00710071 00710071 00710071 00710071     q.q.q.q.q.q.q.q.
 8036918:	00710071 00710071 00710071 00710071     q.q.q.q.q.q.q.q.
 8036928:	00710071 00710071 00710071 00710071     q.q.q.q.q.q.q.q.
 8036938:	00720072 00720072 00720072 00720072     r.r.r.r.r.r.r.r.
 8036948:	00720072 00720072 00720072 00720072     r.r.r.r.r.r.r.r.
 8036958:	00720072 00720072 00720072 00720072     r.r.r.r.r.r.r.r.
 8036968:	00720072 00720072 00720072 00720072     r.r.r.r.r.r.r.r.
 8036978:	00720072 00720072 00720072 00720072     r.r.r.r.r.r.r.r.
 8036988:	00720072 00720072 00720072 00720072     r.r.r.r.r.r.r.r.
 8036998:	00720072 00720072 00720072 00720072     r.r.r.r.r.r.r.r.
 80369a8:	00720072 00720072 00720072 00720072     r.r.r.r.r.r.r.r.
 80369b8:	00720072 00720072 00730073 00730073     r.r.r.r.s.s.s.s.
 80369c8:	00730073 00730073 00730073 00730073     s.s.s.s.s.s.s.s.
 80369d8:	00730073 00730073 00730073 00730073     s.s.s.s.s.s.s.s.
 80369e8:	00730073 00730073 00730073 00730073     s.s.s.s.s.s.s.s.
 80369f8:	00730073 00730073 00730073 00730073     s.s.s.s.s.s.s.s.
 8036a08:	00730073 00730073 00730073 00730073     s.s.s.s.s.s.s.s.
 8036a18:	00730073 00730073 00730073 00730073     s.s.s.s.s.s.s.s.
 8036a28:	00730073 00730073 00730073 00730073     s.s.s.s.s.s.s.s.
 8036a38:	00730073 00730073 00730073 00740073     s.s.s.s.s.s.s.t.
 8036a48:	00740074 00740074 00740074 00740074     t.t.t.t.t.t.t.t.
 8036a58:	00740074 00740074 00740074 00740074     t.t.t.t.t.t.t.t.
 8036a68:	00740074 00740074 00740074 00740074     t.t.t.t.t.t.t.t.
 8036a78:	00740074 00740074 00740074 00740074     t.t.t.t.t.t.t.t.
 8036a88:	00740074 00740074 00740074 00740074     t.t.t.t.t.t.t.t.
 8036a98:	00740074 00740074 00740074 00740074     t.t.t.t.t.t.t.t.
 8036aa8:	00740074 00740074 00740074 00740074     t.t.t.t.t.t.t.t.
 8036ab8:	00740074 00740074 00740074 00740074     t.t.t.t.t.t.t.t.
 8036ac8:	00740074 00750074 00750075 00750075     t.t.t.u.u.u.u.u.
 8036ad8:	00750075 00750075 00750075 00750075     u.u.u.u.u.u.u.u.
 8036ae8:	00750075 00750075 00750075 00750075     u.u.u.u.u.u.u.u.
 8036af8:	00750075 00750075 00750075 00750075     u.u.u.u.u.u.u.u.
 8036b08:	00750075 00750075 00750075 00750075     u.u.u.u.u.u.u.u.
 8036b18:	00750075 00750075 00750075 00750075     u.u.u.u.u.u.u.u.
 8036b28:	00750075 00750075 00750075 00750075     u.u.u.u.u.u.u.u.
 8036b38:	00750075 00750075 00750075 00750075     u.u.u.u.u.u.u.u.
 8036b48:	00750075 00750075 00750075 00760076     u.u.u.u.u.u.v.v.
 8036b58:	00760076 00760076 00760076 00760076     v.v.v.v.v.v.v.v.
 8036b68:	00760076 00760076 00760076 00760076     v.v.v.v.v.v.v.v.
 8036b78:	00760076 00760076 00760076 00760076     v.v.v.v.v.v.v.v.
 8036b88:	00760076 00760076 00760076 00760076     v.v.v.v.v.v.v.v.
 8036b98:	00760076 00760076 00760076 00760076     v.v.v.v.v.v.v.v.
 8036ba8:	00760076 00760076 00760076 00760076     v.v.v.v.v.v.v.v.
 8036bb8:	00760076 00760076 00760076 00760076     v.v.v.v.v.v.v.v.
 8036bc8:	00760076 00760076 00760076 00760076     v.v.v.v.v.v.v.v.
 8036bd8:	00770077 00770077 00770077 00770077     w.w.w.w.w.w.w.w.
 8036be8:	00770077 00770077 00770077 00770077     w.w.w.w.w.w.w.w.
 8036bf8:	00770077 00770077 00770077 00770077     w.w.w.w.w.w.w.w.
 8036c08:	00770077 00770077 00770077 00770077     w.w.w.w.w.w.w.w.
 8036c18:	00770077 00770077 00770077 00770077     w.w.w.w.w.w.w.w.
 8036c28:	00770077 00770077 00770077 00770077     w.w.w.w.w.w.w.w.
 8036c38:	00770077 00770077 00770077 00770077     w.w.w.w.w.w.w.w.
 8036c48:	00770077 00770077 00770077 00770077     w.w.w.w.w.w.w.w.
 8036c58:	00770077 00780077 00780078 00780078     w.w.w.x.x.x.x.x.
 8036c68:	00780078 00780078 00780078 00780078     x.x.x.x.x.x.x.x.
 8036c78:	00780078 00780078 00780078 00780078     x.x.x.x.x.x.x.x.
 8036c88:	00780078 00780078 00780078 00780078     x.x.x.x.x.x.x.x.
 8036c98:	00780078 00780078 00780078 00780078     x.x.x.x.x.x.x.x.
 8036ca8:	00780078 00780078 00780078 00780078     x.x.x.x.x.x.x.x.
 8036cb8:	00780078 00780078 00780078 00780078     x.x.x.x.x.x.x.x.
 8036cc8:	00780078 00780078 00780078 00780078     x.x.x.x.x.x.x.x.
 8036cd8:	00780078 00780078 00790078 00790079     x.x.x.x.x.y.y.y.
 8036ce8:	00790079 00790079 00790079 00790079     y.y.y.y.y.y.y.y.
 8036cf8:	00790079 00790079 00790079 00790079     y.y.y.y.y.y.y.y.
 8036d08:	00790079 00790079 00790079 00790079     y.y.y.y.y.y.y.y.
 8036d18:	00790079 00790079 00790079 00790079     y.y.y.y.y.y.y.y.
 8036d28:	00790079 00790079 00790079 00790079     y.y.y.y.y.y.y.y.
 8036d38:	00790079 00790079 00790079 00790079     y.y.y.y.y.y.y.y.
 8036d48:	00790079 00790079 00790079 00790079     y.y.y.y.y.y.y.y.
 8036d58:	00790079 00790079 00790079 007a0079     y.y.y.y.y.y.y.z.
 8036d68:	007a007a 007a007a 007a007a 007a007a     z.z.z.z.z.z.z.z.
 8036d78:	007a007a 007a007a 007a007a 007a007a     z.z.z.z.z.z.z.z.
 8036d88:	007a007a 007a007a 007a007a 007a007a     z.z.z.z.z.z.z.z.
 8036d98:	007a007a 007a007a 007a007a 007a007a     z.z.z.z.z.z.z.z.
 8036da8:	007a007a 007a007a 007a007a 007a007a     z.z.z.z.z.z.z.z.
 8036db8:	007a007a 007a007a 007a007a 007a007a     z.z.z.z.z.z.z.z.
 8036dc8:	007a007a 007a007a 007a007a 007a007a     z.z.z.z.z.z.z.z.
 8036dd8:	007a007a 007a007a 007a007a 007a007a     z.z.z.z.z.z.z.z.
 8036de8:	007b007a 007b007b 007b007b 007b007b     z.{.{.{.{.{.{.{.
 8036df8:	007b007b 007b007b 007b007b 007b007b     {.{.{.{.{.{.{.{.
 8036e08:	007b007b 007b007b 007b007b 007b007b     {.{.{.{.{.{.{.{.
 8036e18:	007b007b 007b007b 007b007b 007b007b     {.{.{.{.{.{.{.{.
 8036e28:	007b007b 007b007b 007b007b 007b007b     {.{.{.{.{.{.{.{.
 8036e38:	007b007b 007b007b 007b007b 007b007b     {.{.{.{.{.{.{.{.
 8036e48:	007b007b 007b007b 007b007b 007b007b     {.{.{.{.{.{.{.{.
 8036e58:	007b007b 007b007b 007b007b 007b007b     {.{.{.{.{.{.{.{.
 8036e68:	007b007b 007c007b 007c007c 007c007c     {.{.{.|.|.|.|.|.
 8036e78:	007c007c 007c007c 007c007c 007c007c     |.|.|.|.|.|.|.|.
 8036e88:	007c007c 007c007c 007c007c 007c007c     |.|.|.|.|.|.|.|.
 8036e98:	007c007c 007c007c 007c007c 007c007c     |.|.|.|.|.|.|.|.
 8036ea8:	007c007c 007c007c 007c007c 007c007c     |.|.|.|.|.|.|.|.
 8036eb8:	007c007c 007c007c 007c007c 007c007c     |.|.|.|.|.|.|.|.
 8036ec8:	007c007c 007c007c 007c007c 007c007c     |.|.|.|.|.|.|.|.
 8036ed8:	007c007c 007c007c 007c007c 007c007c     |.|.|.|.|.|.|.|.
 8036ee8:	007c007c 007c007c 007d007c 007d007d     |.|.|.|.|.}.}.}.
 8036ef8:	007d007d 007d007d 007d007d 007d007d     }.}.}.}.}.}.}.}.
 8036f08:	007d007d 007d007d 007d007d 007d007d     }.}.}.}.}.}.}.}.
 8036f18:	007d007d 007d007d 007d007d 007d007d     }.}.}.}.}.}.}.}.
 8036f28:	007d007d 007d007d 007d007d 007d007d     }.}.}.}.}.}.}.}.
 8036f38:	007d007d 007d007d 007d007d 007d007d     }.}.}.}.}.}.}.}.
 8036f48:	007d007d 007d007d 007d007d 007d007d     }.}.}.}.}.}.}.}.
 8036f58:	007d007d 007d007d 007d007d 007d007d     }.}.}.}.}.}.}.}.
 8036f68:	007d007d 007d007d 007d007d 007e007e     }.}.}.}.}.}.~.~.
 8036f78:	007e007e 007e007e 007e007e 007e007e     ~.~.~.~.~.~.~.~.
 8036f88:	007e007e 007e007e 007e007e 007e007e     ~.~.~.~.~.~.~.~.
 8036f98:	007e007e 007e007e 007e007e 007e007e     ~.~.~.~.~.~.~.~.
 8036fa8:	007e007e 007e007e 007e007e 007e007e     ~.~.~.~.~.~.~.~.
 8036fb8:	007e007e 007e007e 007e007e 007e007e     ~.~.~.~.~.~.~.~.
 8036fc8:	007e007e 007e007e 007e007e 007e007e     ~.~.~.~.~.~.~.~.
 8036fd8:	007e007e 007e007e 007e007e 007e007e     ~.~.~.~.~.~.~.~.
 8036fe8:	007e007e 007e007e 007e007e 007f007e     ~.~.~.~.~.~.~...
 8036ff8:	007f007f 007f007f 007f007f 007f007f     ................
 8037008:	007f007f 007f007f 007f007f 007f007f     ................
 8037018:	007f007f 007f007f 007f007f 007f007f     ................
 8037028:	007f007f 007f007f 007f007f 007f007f     ................
 8037038:	007f007f 007f007f 007f007f 007f007f     ................
 8037048:	007f007f 007f007f 007f007f 007f007f     ................
 8037058:	007f007f 007f007f 007f007f 007f007f     ................
 8037068:	007f007f 007f007f 007f007f 007f007f     ................
 8037078:	00800080 00800080 00800080 00800080     ................
 8037088:	00800080 00800080 00800080 00800080     ................
 8037098:	00800080 00800080 00800080 00800080     ................
 80370a8:	00800080 00800080 00800080 00800080     ................
 80370b8:	00800080 00800080 00800080 00800080     ................
 80370c8:	00800080 00800080 00800080 00800080     ................
 80370d8:	00800080 00800080 00800080 00800080     ................
 80370e8:	00800080 00800080 00800080 00800080     ................
 80370f8:	00810080 00810081 00810081 00810081     ................
 8037108:	00810081 00810081 00810081 00810081     ................
 8037118:	00810081 00810081 00810081 00810081     ................
 8037128:	00810081 00810081 00810081 00810081     ................
 8037138:	00810081 00810081 00810081 00810081     ................
 8037148:	00810081 00810081 00810081 00810081     ................
 8037158:	00810081 00810081 00810081 00810081     ................
 8037168:	00810081 00810081 00810081 00810081     ................
 8037178:	00810081 00820082 00820082 00820082     ................
 8037188:	00820082 00820082 00820082 00820082     ................
 8037198:	00820082 00820082 00820082 00820082     ................
 80371a8:	00820082 00820082 00820082 00820082     ................
 80371b8:	00820082 00820082 00820082 00820082     ................
 80371c8:	00820082 00820082 00820082 00820082     ................
 80371d8:	00820082 00820082 00820082 00820082     ................
 80371e8:	00820082 00820082 00820082 00820082     ................
 80371f8:	00820082 00830083 00830083 00830083     ................
 8037208:	00830083 00830083 00830083 00830083     ................
 8037218:	00830083 00830083 00830083 00830083     ................
 8037228:	00830083 00830083 00830083 00830083     ................
 8037238:	00830083 00830083 00830083 00830083     ................
 8037248:	00830083 00830083 00830083 00830083     ................
 8037258:	00830083 00830083 00830083 00830083     ................
 8037268:	00830083 00830083 00830083 00830083     ................
 8037278:	00830083 00840083 00840084 00840084     ................
 8037288:	00840084 00840084 00840084 00840084     ................
 8037298:	00840084 00840084 00840084 00840084     ................
 80372a8:	00840084 00840084 00840084 00840084     ................
 80372b8:	00840084 00840084 00840084 00840084     ................
 80372c8:	00840084 00840084 00840084 00840084     ................
 80372d8:	00840084 00840084 00840084 00840084     ................
 80372e8:	00840084 00840084 00840084 00840084     ................
 80372f8:	00840084 00850084 00850085 00850085     ................
 8037308:	00850085 00850085 00850085 00850085     ................
 8037318:	00850085 00850085 00850085 00850085     ................
 8037328:	00850085 00850085 00850085 00850085     ................
 8037338:	00850085 00850085 00850085 00850085     ................
 8037348:	00850085 00850085 00850085 00850085     ................
 8037358:	00850085 00850085 00850085 00850085     ................
 8037368:	00850085 00850085 00850085 00850085     ................
 8037378:	00850085 00860085 00860086 00860086     ................
 8037388:	00860086 00860086 00860086 00860086     ................
 8037398:	00860086 00860086 00860086 00860086     ................
 80373a8:	00860086 00860086 00860086 00860086     ................
 80373b8:	00860086 00860086 00860086 00860086     ................
 80373c8:	00860086 00860086 00860086 00860086     ................
 80373d8:	00860086 00860086 00860086 00860086     ................
 80373e8:	00860086 00860086 00860086 00860086     ................
 80373f8:	00860086 00870087 00870087 00870087     ................
 8037408:	00870087 00870087 00870087 00870087     ................
 8037418:	00870087 00870087 00870087 00870087     ................
 8037428:	00870087 00870087 00870087 00870087     ................
 8037438:	00870087 00870087 00870087 00870087     ................
 8037448:	00870087 00870087 00870087 00870087     ................
 8037458:	00870087 00870087 00870087 00870087     ................
 8037468:	00870087 00870087 00870087 00870087     ................
 8037478:	00870087 00880088 00880088 00880088     ................
 8037488:	00880088 00880088 00880088 00880088     ................
 8037498:	00880088 00880088 00880088 00880088     ................
 80374a8:	00880088 00880088 00880088 00880088     ................
 80374b8:	00880088 00880088 00880088 00880088     ................
 80374c8:	00880088 00880088 00880088 00880088     ................
 80374d8:	00880088 00880088 00880088 00880088     ................
 80374e8:	00880088 00880088 00880088 00880088     ................
 80374f8:	00890088 00890089 00890089 00890089     ................
 8037508:	00890089 00890089 00890089 00890089     ................
 8037518:	00890089 00890089 00890089 00890089     ................
 8037528:	00890089 00890089 00890089 00890089     ................
 8037538:	00890089 00890089 00890089 00890089     ................
 8037548:	00890089 00890089 00890089 00890089     ................
 8037558:	00890089 00890089 00890089 00890089     ................
 8037568:	00890089 00890089 00890089 00890089     ................
 8037578:	008a0089 008a008a 008a008a 008a008a     ................
 8037588:	008a008a 008a008a 008a008a 008a008a     ................
 8037598:	008a008a 008a008a 008a008a 008a008a     ................
 80375a8:	008a008a 008a008a 008a008a 008a008a     ................
 80375b8:	008a008a 008a008a 008a008a 008a008a     ................
 80375c8:	008a008a 008a008a 008a008a 008a008a     ................
 80375d8:	008a008a 008a008a 008a008a 008a008a     ................
 80375e8:	008a008a 008a008a 008a008a 008a008a     ................
 80375f8:	008b008b 008b008b 008b008b 008b008b     ................
 8037608:	008b008b 008b008b 008b008b 008b008b     ................
 8037618:	008b008b 008b008b 008b008b 008b008b     ................
 8037628:	008b008b 008b008b 008b008b 008b008b     ................
 8037638:	008b008b 008b008b 008b008b 008b008b     ................
 8037648:	008b008b 008b008b 008b008b 008b008b     ................
 8037658:	008b008b 008b008b 008b008b 008b008b     ................
 8037668:	008b008b 008b008b 008b008b 008c008b     ................
 8037678:	008c008c 008c008c 008c008c 008c008c     ................
 8037688:	008c008c 008c008c 008c008c 008c008c     ................
 8037698:	008c008c 008c008c 008c008c 008c008c     ................
 80376a8:	008c008c 008c008c 008c008c 008c008c     ................
 80376b8:	008c008c 008c008c 008c008c 008c008c     ................
 80376c8:	008c008c 008c008c 008c008c 008c008c     ................
 80376d8:	008c008c 008c008c 008c008c 008c008c     ................
 80376e8:	008c008c 008c008c 008d008c 008d008d     ................
 80376f8:	008d008d 008d008d 008d008d 008d008d     ................
 8037708:	008d008d 008d008d 008d008d 008d008d     ................
 8037718:	008d008d 008d008d 008d008d 008d008d     ................
 8037728:	008d008d 008d008d 008d008d 008d008d     ................
 8037738:	008d008d 008d008d 008d008d 008d008d     ................
 8037748:	008d008d 008d008d 008d008d 008d008d     ................
 8037758:	008d008d 008d008d 008d008d 008d008d     ................
 8037768:	008d008d 008d008d 008e008e 008e008e     ................
 8037778:	008e008e 008e008e 008e008e 008e008e     ................
 8037788:	008e008e 008e008e 008e008e 008e008e     ................
 8037798:	008e008e 008e008e 008e008e 008e008e     ................
 80377a8:	008e008e 008e008e 008e008e 008e008e     ................
 80377b8:	008e008e 008e008e 008e008e 008e008e     ................
 80377c8:	008e008e 008e008e 008e008e 008e008e     ................
 80377d8:	008e008e 008e008e 008e008e 008e008e     ................
 80377e8:	008e008e 008f008e 008f008f 008f008f     ................
 80377f8:	008f008f 008f008f 008f008f 008f008f     ................
 8037808:	008f008f 008f008f 008f008f 008f008f     ................
 8037818:	008f008f 008f008f 008f008f 008f008f     ................
 8037828:	008f008f 008f008f 008f008f 008f008f     ................
 8037838:	008f008f 008f008f 008f008f 008f008f     ................
 8037848:	008f008f 008f008f 008f008f 008f008f     ................
 8037858:	008f008f 008f008f 008f008f 008f008f     ................
 8037868:	0090008f 00900090 00900090 00900090     ................
 8037878:	00900090 00900090 00900090 00900090     ................
 8037888:	00900090 00900090 00900090 00900090     ................
 8037898:	00900090 00900090 00900090 00900090     ................
 80378a8:	00900090 00900090 00900090 00900090     ................
 80378b8:	00900090 00900090 00900090 00900090     ................
 80378c8:	00900090 00900090 00900090 00900090     ................
 80378d8:	00900090 00900090 00900090 00910090     ................
 80378e8:	00910091 00910091 00910091 00910091     ................
 80378f8:	00910091 00910091 00910091 00910091     ................
 8037908:	00910091 00910091 00910091 00910091     ................
 8037918:	00910091 00910091 00910091 00910091     ................
 8037928:	00910091 00910091 00910091 00910091     ................
 8037938:	00910091 00910091 00910091 00910091     ................
 8037948:	00910091 00910091 00910091 00910091     ................
 8037958:	00910091 00910091 00920091 00920092     ................
 8037968:	00920092 00920092 00920092 00920092     ................
 8037978:	00920092 00920092 00920092 00920092     ................
 8037988:	00920092 00920092 00920092 00920092     ................
 8037998:	00920092 00920092 00920092 00920092     ................
 80379a8:	00920092 00920092 00920092 00920092     ................
 80379b8:	00920092 00920092 00920092 00920092     ................
 80379c8:	00920092 00920092 00920092 00920092     ................
 80379d8:	00920092 00930092 00930093 00930093     ................
 80379e8:	00930093 00930093 00930093 00930093     ................
 80379f8:	00930093 00930093 00930093 00930093     ................
 8037a08:	00930093 00930093 00930093 00930093     ................
 8037a18:	00930093 00930093 00930093 00930093     ................
 8037a28:	00930093 00930093 00930093 00930093     ................
 8037a38:	00930093 00930093 00930093 00930093     ................
 8037a48:	00930093 00930093 00930093 00930093     ................
 8037a58:	00940093 00940094 00940094 00940094     ................
 8037a68:	00940094 00940094 00940094 00940094     ................
 8037a78:	00940094 00940094 00940094 00940094     ................
 8037a88:	00940094 00940094 00940094 00940094     ................
 8037a98:	00940094 00940094 00940094 00940094     ................
 8037aa8:	00940094 00940094 00940094 00940094     ................
 8037ab8:	00940094 00940094 00940094 00940094     ................
 8037ac8:	00940094 00940094 00940094 00950095     ................
 8037ad8:	00950095 00950095 00950095 00950095     ................
 8037ae8:	00950095 00950095 00950095 00950095     ................
 8037af8:	00950095 00950095 00950095 00950095     ................
 8037b08:	00950095 00950095 00950095 00950095     ................
 8037b18:	00950095 00950095 00950095 00950095     ................
 8037b28:	00950095 00950095 00950095 00950095     ................
 8037b38:	00950095 00950095 00950095 00950095     ................
 8037b48:	00950095 00950095 00960096 00960096     ................
 8037b58:	00960096 00960096 00960096 00960096     ................
 8037b68:	00960096 00960096 00960096 00960096     ................
 8037b78:	00960096 00960096 00960096 00960096     ................
 8037b88:	00960096 00960096 00960096 00960096     ................
 8037b98:	00960096 00960096 00960096 00960096     ................
 8037ba8:	00960096 00960096 00960096 00960096     ................
 8037bb8:	00960096 00960096 00960096 00960096     ................
 8037bc8:	00970096 00970097 00970097 00970097     ................
 8037bd8:	00970097 00970097 00970097 00970097     ................
 8037be8:	00970097 00970097 00970097 00970097     ................
 8037bf8:	00970097 00970097 00970097 00970097     ................
 8037c08:	00970097 00970097 00970097 00970097     ................
 8037c18:	00970097 00970097 00970097 00970097     ................
 8037c28:	00970097 00970097 00970097 00970097     ................
 8037c38:	00970097 00970097 00970097 00980098     ................
 8037c48:	00980098 00980098 00980098 00980098     ................
 8037c58:	00980098 00980098 00980098 00980098     ................
 8037c68:	00980098 00980098 00980098 00980098     ................
 8037c78:	00980098 00980098 00980098 00980098     ................
 8037c88:	00980098 00980098 00980098 00980098     ................
 8037c98:	00980098 00980098 00980098 00980098     ................
 8037ca8:	00980098 00980098 00980098 00980098     ................
 8037cb8:	00980098 00990098 00990099 00990099     ................
 8037cc8:	00990099 00990099 00990099 00990099     ................
 8037cd8:	00990099 00990099 00990099 00990099     ................
 8037ce8:	00990099 00990099 00990099 00990099     ................
 8037cf8:	00990099 00990099 00990099 00990099     ................
 8037d08:	00990099 00990099 00990099 00990099     ................
 8037d18:	00990099 00990099 00990099 00990099     ................
 8037d28:	00990099 00990099 00990099 00990099     ................
 8037d38:	009a009a 009a009a 009a009a 009a009a     ................
 8037d48:	009a009a 009a009a 009a009a 009a009a     ................
 8037d58:	009a009a 009a009a 009a009a 009a009a     ................
 8037d68:	009a009a 009a009a 009a009a 009a009a     ................
 8037d78:	009a009a 009a009a 009a009a 009a009a     ................
 8037d88:	009a009a 009a009a 009a009a 009a009a     ................
 8037d98:	009a009a 009a009a 009a009a 009a009a     ................
 8037da8:	009a009a 009a009a 009b009a 009b009b     ................
 8037db8:	009b009b 009b009b 009b009b 009b009b     ................
 8037dc8:	009b009b 009b009b 009b009b 009b009b     ................
 8037dd8:	009b009b 009b009b 009b009b 009b009b     ................
 8037de8:	009b009b 009b009b 009b009b 009b009b     ................
 8037df8:	009b009b 009b009b 009b009b 009b009b     ................
 8037e08:	009b009b 009b009b 009b009b 009b009b     ................
 8037e18:	009b009b 009b009b 009b009b 009b009b     ................
 8037e28:	009b009b 009c009c 009c009c 009c009c     ................
 8037e38:	009c009c 009c009c 009c009c 009c009c     ................
 8037e48:	009c009c 009c009c 009c009c 009c009c     ................
 8037e58:	009c009c 009c009c 009c009c 009c009c     ................
 8037e68:	009c009c 009c009c 009c009c 009c009c     ................
 8037e78:	009c009c 009c009c 009c009c 009c009c     ................
 8037e88:	009c009c 009c009c 009c009c 009c009c     ................
 8037e98:	009c009c 009c009c 009c009c 009d009d     ................
 8037ea8:	009d009d 009d009d 009d009d 009d009d     ................
 8037eb8:	009d009d 009d009d 009d009d 009d009d     ................
 8037ec8:	009d009d 009d009d 009d009d 009d009d     ................
 8037ed8:	009d009d 009d009d 009d009d 009d009d     ................
 8037ee8:	009d009d 009d009d 009d009d 009d009d     ................
 8037ef8:	009d009d 009d009d 009d009d 009d009d     ................
 8037f08:	009d009d 009d009d 009d009d 009d009d     ................
 8037f18:	009d009d 009e009d 009e009e 009e009e     ................
 8037f28:	009e009e 009e009e 009e009e 009e009e     ................
 8037f38:	009e009e 009e009e 009e009e 009e009e     ................
 8037f48:	009e009e 009e009e 009e009e 009e009e     ................
 8037f58:	009e009e 009e009e 009e009e 009e009e     ................
 8037f68:	009e009e 009e009e 009e009e 009e009e     ................
 8037f78:	009e009e 009e009e 009e009e 009e009e     ................
 8037f88:	009e009e 009e009e 009e009e 009f009e     ................
 8037f98:	009f009f 009f009f 009f009f 009f009f     ................
 8037fa8:	009f009f 009f009f 009f009f 009f009f     ................
 8037fb8:	009f009f 009f009f 009f009f 009f009f     ................
 8037fc8:	009f009f 009f009f 009f009f 009f009f     ................
 8037fd8:	009f009f 009f009f 009f009f 009f009f     ................
 8037fe8:	009f009f 009f009f 009f009f 009f009f     ................
 8037ff8:	009f009f 009f009f 009f009f 009f009f     ................
 8038008:	009f009f 00a0009f 00a000a0 00a000a0     ................
 8038018:	00a000a0 00a000a0 00a000a0 00a000a0     ................
 8038028:	00a000a0 00a000a0 00a000a0 00a000a0     ................
 8038038:	00a000a0 00a000a0 00a000a0 00a000a0     ................
 8038048:	00a000a0 00a000a0 00a000a0 00a000a0     ................
 8038058:	00a000a0 00a000a0 00a000a0 00a000a0     ................
 8038068:	00a000a0 00a000a0 00a000a0 00a000a0     ................
 8038078:	00a000a0 00a000a0 00a000a0 00a100a0     ................
 8038088:	00a100a1 00a100a1 00a100a1 00a100a1     ................
 8038098:	00a100a1 00a100a1 00a100a1 00a100a1     ................
 80380a8:	00a100a1 00a100a1 00a100a1 00a100a1     ................
 80380b8:	00a100a1 00a100a1 00a100a1 00a100a1     ................
 80380c8:	00a100a1 00a100a1 00a100a1 00a100a1     ................
 80380d8:	00a100a1 00a100a1 00a100a1 00a100a1     ................
 80380e8:	00a100a1 00a100a1 00a100a1 00a100a1     ................
 80380f8:	00a100a1 00a200a1 00a200a2 00a200a2     ................
 8038108:	00a200a2 00a200a2 00a200a2 00a200a2     ................
 8038118:	00a200a2 00a200a2 00a200a2 00a200a2     ................
 8038128:	00a200a2 00a200a2 00a200a2 00a200a2     ................
 8038138:	00a200a2 00a200a2 00a200a2 00a200a2     ................
 8038148:	00a200a2 00a200a2 00a200a2 00a200a2     ................
 8038158:	00a200a2 00a200a2 00a200a2 00a200a2     ................
 8038168:	00a200a2 00a200a2 00a200a2 00a300a2     ................
 8038178:	00a300a3 00a300a3 00a300a3 00a300a3     ................
 8038188:	00a300a3 00a300a3 00a300a3 00a300a3     ................
 8038198:	00a300a3 00a300a3 00a300a3 00a300a3     ................
 80381a8:	00a300a3 00a300a3 00a300a3 00a300a3     ................
 80381b8:	00a300a3 00a300a3 00a300a3 00a300a3     ................
 80381c8:	00a300a3 00a300a3 00a300a3 00a300a3     ................
 80381d8:	00a300a3 00a300a3 00a300a3 00a300a3     ................
 80381e8:	00a300a3 00a400a3 00a400a4 00a400a4     ................
 80381f8:	00a400a4 00a400a4 00a400a4 00a400a4     ................
 8038208:	00a400a4 00a400a4 00a400a4 00a400a4     ................
 8038218:	00a400a4 00a400a4 00a400a4 00a400a4     ................
 8038228:	00a400a4 00a400a4 00a400a4 00a400a4     ................
 8038238:	00a400a4 00a400a4 00a400a4 00a400a4     ................
 8038248:	00a400a4 00a400a4 00a400a4 00a400a4     ................
 8038258:	00a400a4 00a400a4 00a400a4 00a500a5     ................
 8038268:	00a500a5 00a500a5 00a500a5 00a500a5     ................
 8038278:	00a500a5 00a500a5 00a500a5 00a500a5     ................
 8038288:	00a500a5 00a500a5 00a500a5 00a500a5     ................
 8038298:	00a500a5 00a500a5 00a500a5 00a500a5     ................
 80382a8:	00a500a5 00a500a5 00a500a5 00a500a5     ................
 80382b8:	00a500a5 00a500a5 00a500a5 00a500a5     ................
 80382c8:	00a500a5 00a500a5 00a500a5 00a500a5     ................
 80382d8:	00a500a5 00a600a6 00a600a6 00a600a6     ................
 80382e8:	00a600a6 00a600a6 00a600a6 00a600a6     ................
 80382f8:	00a600a6 00a600a6 00a600a6 00a600a6     ................
 8038308:	00a600a6 00a600a6 00a600a6 00a600a6     ................
 8038318:	00a600a6 00a600a6 00a600a6 00a600a6     ................
 8038328:	00a600a6 00a600a6 00a600a6 00a600a6     ................
 8038338:	00a600a6 00a600a6 00a600a6 00a600a6     ................
 8038348:	00a600a6 00a600a6 00a700a6 00a700a7     ................
 8038358:	00a700a7 00a700a7 00a700a7 00a700a7     ................
 8038368:	00a700a7 00a700a7 00a700a7 00a700a7     ................
 8038378:	00a700a7 00a700a7 00a700a7 00a700a7     ................
 8038388:	00a700a7 00a700a7 00a700a7 00a700a7     ................
 8038398:	00a700a7 00a700a7 00a700a7 00a700a7     ................
 80383a8:	00a700a7 00a700a7 00a700a7 00a700a7     ................
 80383b8:	00a700a7 00a700a7 00a700a7 00a700a7     ................
 80383c8:	00a800a8 00a800a8 00a800a8 00a800a8     ................
 80383d8:	00a800a8 00a800a8 00a800a8 00a800a8     ................
 80383e8:	00a800a8 00a800a8 00a800a8 00a800a8     ................
 80383f8:	00a800a8 00a800a8 00a800a8 00a800a8     ................
 8038408:	00a800a8 00a800a8 00a800a8 00a800a8     ................
 8038418:	00a800a8 00a800a8 00a800a8 00a800a8     ................
 8038428:	00a800a8 00a800a8 00a800a8 00a800a8     ................
 8038438:	00a800a8 00a800a8 00a900a9 00a900a9     ................
 8038448:	00a900a9 00a900a9 00a900a9 00a900a9     ................
 8038458:	00a900a9 00a900a9 00a900a9 00a900a9     ................
 8038468:	00a900a9 00a900a9 00a900a9 00a900a9     ................
 8038478:	00a900a9 00a900a9 00a900a9 00a900a9     ................
 8038488:	00a900a9 00a900a9 00a900a9 00a900a9     ................
 8038498:	00a900a9 00a900a9 00a900a9 00a900a9     ................
 80384a8:	00a900a9 00a900a9 00a900a9 00aa00a9     ................
 80384b8:	00aa00aa 00aa00aa 00aa00aa 00aa00aa     ................
 80384c8:	00aa00aa 00aa00aa 00aa00aa 00aa00aa     ................
 80384d8:	00aa00aa 00aa00aa 00aa00aa 00aa00aa     ................
 80384e8:	00aa00aa 00aa00aa 00aa00aa 00aa00aa     ................
 80384f8:	00aa00aa 00aa00aa 00aa00aa 00aa00aa     ................
 8038508:	00aa00aa 00aa00aa 00aa00aa 00aa00aa     ................
 8038518:	00aa00aa 00aa00aa 00aa00aa 00aa00aa     ................
 8038528:	00aa00aa 00ab00ab 00ab00ab 00ab00ab     ................
 8038538:	00ab00ab 00ab00ab 00ab00ab 00ab00ab     ................
 8038548:	00ab00ab 00ab00ab 00ab00ab 00ab00ab     ................
 8038558:	00ab00ab 00ab00ab 00ab00ab 00ab00ab     ................
 8038568:	00ab00ab 00ab00ab 00ab00ab 00ab00ab     ................
 8038578:	00ab00ab 00ab00ab 00ab00ab 00ab00ab     ................
 8038588:	00ab00ab 00ab00ab 00ab00ab 00ab00ab     ................
 8038598:	00ab00ab 00ab00ab 00ac00ac 00ac00ac     ................
 80385a8:	00ac00ac 00ac00ac 00ac00ac 00ac00ac     ................
 80385b8:	00ac00ac 00ac00ac 00ac00ac 00ac00ac     ................
 80385c8:	00ac00ac 00ac00ac 00ac00ac 00ac00ac     ................
 80385d8:	00ac00ac 00ac00ac 00ac00ac 00ac00ac     ................
 80385e8:	00ac00ac 00ac00ac 00ac00ac 00ac00ac     ................
 80385f8:	00ac00ac 00ac00ac 00ac00ac 00ac00ac     ................
 8038608:	00ac00ac 00ac00ac 00ac00ac 00ad00ac     ................
 8038618:	00ad00ad 00ad00ad 00ad00ad 00ad00ad     ................
 8038628:	00ad00ad 00ad00ad 00ad00ad 00ad00ad     ................
 8038638:	00ad00ad 00ad00ad 00ad00ad 00ad00ad     ................
 8038648:	00ad00ad 00ad00ad 00ad00ad 00ad00ad     ................
 8038658:	00ad00ad 00ad00ad 00ad00ad 00ad00ad     ................
 8038668:	00ad00ad 00ad00ad 00ad00ad 00ad00ad     ................
 8038678:	00ad00ad 00ad00ad 00ad00ad 00ad00ad     ................
 8038688:	00ad00ad 00ae00ae 00ae00ae 00ae00ae     ................
 8038698:	00ae00ae 00ae00ae 00ae00ae 00ae00ae     ................
 80386a8:	00ae00ae 00ae00ae 00ae00ae 00ae00ae     ................
 80386b8:	00ae00ae 00ae00ae 00ae00ae 00ae00ae     ................
 80386c8:	00ae00ae 00ae00ae 00ae00ae 00ae00ae     ................
 80386d8:	00ae00ae 00ae00ae 00ae00ae 00ae00ae     ................
 80386e8:	00ae00ae 00ae00ae 00ae00ae 00ae00ae     ................
 80386f8:	00ae00ae 00ae00ae 00af00af 00af00af     ................
 8038708:	00af00af 00af00af 00af00af 00af00af     ................
 8038718:	00af00af 00af00af 00af00af 00af00af     ................
 8038728:	00af00af 00af00af 00af00af 00af00af     ................
 8038738:	00af00af 00af00af 00af00af 00af00af     ................
 8038748:	00af00af 00af00af 00af00af 00af00af     ................
 8038758:	00af00af 00af00af 00af00af 00af00af     ................
 8038768:	00af00af 00af00af 00af00af 00b000af     ................
 8038778:	00b000b0 00b000b0 00b000b0 00b000b0     ................
 8038788:	00b000b0 00b000b0 00b000b0 00b000b0     ................
 8038798:	00b000b0 00b000b0 00b000b0 00b000b0     ................
 80387a8:	00b000b0 00b000b0 00b000b0 00b000b0     ................
 80387b8:	00b000b0 00b000b0 00b000b0 00b000b0     ................
 80387c8:	00b000b0 00b000b0 00b000b0 00b000b0     ................
 80387d8:	00b000b0 00b000b0 00b000b0 00b000b0     ................
 80387e8:	00b100b0 00b100b1 00b100b1 00b100b1     ................
 80387f8:	00b100b1 00b100b1 00b100b1 00b100b1     ................
 8038808:	00b100b1 00b100b1 00b100b1 00b100b1     ................
 8038818:	00b100b1 00b100b1 00b100b1 00b100b1     ................
 8038828:	00b100b1 00b100b1 00b100b1 00b100b1     ................
 8038838:	00b100b1 00b100b1 00b100b1 00b100b1     ................
 8038848:	00b100b1 00b100b1 00b100b1 00b100b1     ................
 8038858:	00b100b1 00b200b1 00b200b2 00b200b2     ................
 8038868:	00b200b2 00b200b2 00b200b2 00b200b2     ................
 8038878:	00b200b2 00b200b2 00b200b2 00b200b2     ................
 8038888:	00b200b2 00b200b2 00b200b2 00b200b2     ................
 8038898:	00b200b2 00b200b2 00b200b2 00b200b2     ................
 80388a8:	00b200b2 00b200b2 00b200b2 00b200b2     ................
 80388b8:	00b200b2 00b200b2 00b200b2 00b200b2     ................
 80388c8:	00b200b2 00b200b2 00b300b2 00b300b3     ................
 80388d8:	00b300b3 00b300b3 00b300b3 00b300b3     ................
 80388e8:	00b300b3 00b300b3 00b300b3 00b300b3     ................
 80388f8:	00b300b3 00b300b3 00b300b3 00b300b3     ................
 8038908:	00b300b3 00b300b3 00b300b3 00b300b3     ................
 8038918:	00b300b3 00b300b3 00b300b3 00b300b3     ................
 8038928:	00b300b3 00b300b3 00b300b3 00b300b3     ................
 8038938:	00b300b3 00b300b3 00b300b3 00b400b3     ................
 8038948:	00b400b4 00b400b4 00b400b4 00b400b4     ................
 8038958:	00b400b4 00b400b4 00b400b4 00b400b4     ................
 8038968:	00b400b4 00b400b4 00b400b4 00b400b4     ................
 8038978:	00b400b4 00b400b4 00b400b4 00b400b4     ................
 8038988:	00b400b4 00b400b4 00b400b4 00b400b4     ................
 8038998:	00b400b4 00b400b4 00b400b4 00b400b4     ................
 80389a8:	00b400b4 00b400b4 00b400b4 00b400b4     ................
 80389b8:	00b500b4 00b500b5 00b500b5 00b500b5     ................
 80389c8:	00b500b5 00b500b5 00b500b5 00b500b5     ................
 80389d8:	00b500b5 00b500b5 00b500b5 00b500b5     ................
 80389e8:	00b500b5 00b500b5 00b500b5 00b500b5     ................
 80389f8:	00b500b5 00b500b5 00b500b5 00b500b5     ................
 8038a08:	00b500b5 00b500b5 00b500b5 00b500b5     ................
 8038a18:	00b500b5 00b500b5 00b500b5 00b500b5     ................
 8038a28:	00b500b5 00b600b5 00b600b6 00b600b6     ................
 8038a38:	00b600b6 00b600b6 00b600b6 00b600b6     ................
 8038a48:	00b600b6 00b600b6 00b600b6 00b600b6     ................
 8038a58:	00b600b6 00b600b6 00b600b6 00b600b6     ................
 8038a68:	00b600b6 00b600b6 00b600b6 00b600b6     ................
 8038a78:	00b600b6 00b600b6 00b600b6 00b600b6     ................
 8038a88:	00b600b6 00b600b6 00b600b6 00b600b6     ................
 8038a98:	00b600b6 00b600b6 00b700b6 00b700b7     ................
 8038aa8:	00b700b7 00b700b7 00b700b7 00b700b7     ................
 8038ab8:	00b700b7 00b700b7 00b700b7 00b700b7     ................
 8038ac8:	00b700b7 00b700b7 00b700b7 00b700b7     ................
 8038ad8:	00b700b7 00b700b7 00b700b7 00b700b7     ................
 8038ae8:	00b700b7 00b700b7 00b700b7 00b700b7     ................
 8038af8:	00b700b7 00b700b7 00b700b7 00b700b7     ................
 8038b08:	00b700b7 00b700b7 00b700b7 00b800b7     ................
 8038b18:	00b800b8 00b800b8 00b800b8 00b800b8     ................
 8038b28:	00b800b8 00b800b8 00b800b8 00b800b8     ................
 8038b38:	00b800b8 00b800b8 00b800b8 00b800b8     ................
 8038b48:	00b800b8 00b800b8 00b800b8 00b800b8     ................
 8038b58:	00b800b8 00b800b8 00b800b8 00b800b8     ................
 8038b68:	00b800b8 00b800b8 00b800b8 00b800b8     ................
 8038b78:	00b800b8 00b800b8 00b800b8 00b800b8     ................
 8038b88:	00b900b9 00b900b9 00b900b9 00b900b9     ................
 8038b98:	00b900b9 00b900b9 00b900b9 00b900b9     ................
 8038ba8:	00b900b9 00b900b9 00b900b9 00b900b9     ................
 8038bb8:	00b900b9 00b900b9 00b900b9 00b900b9     ................
 8038bc8:	00b900b9 00b900b9 00b900b9 00b900b9     ................
 8038bd8:	00b900b9 00b900b9 00b900b9 00b900b9     ................
 8038be8:	00b900b9 00b900b9 00b900b9 00b900b9     ................
 8038bf8:	00b900b9 00ba00ba 00ba00ba 00ba00ba     ................
 8038c08:	00ba00ba 00ba00ba 00ba00ba 00ba00ba     ................
 8038c18:	00ba00ba 00ba00ba 00ba00ba 00ba00ba     ................
 8038c28:	00ba00ba 00ba00ba 00ba00ba 00ba00ba     ................
 8038c38:	00ba00ba 00ba00ba 00ba00ba 00ba00ba     ................
 8038c48:	00ba00ba 00ba00ba 00ba00ba 00ba00ba     ................
 8038c58:	00ba00ba 00ba00ba 00ba00ba 00ba00ba     ................
 8038c68:	00ba00ba 00bb00ba 00bb00bb 00bb00bb     ................
 8038c78:	00bb00bb 00bb00bb 00bb00bb 00bb00bb     ................
 8038c88:	00bb00bb 00bb00bb 00bb00bb 00bb00bb     ................
 8038c98:	00bb00bb 00bb00bb 00bb00bb 00bb00bb     ................
 8038ca8:	00bb00bb 00bb00bb 00bb00bb 00bb00bb     ................
 8038cb8:	00bb00bb 00bb00bb 00bb00bb 00bb00bb     ................
 8038cc8:	00bb00bb 00bb00bb 00bb00bb 00bb00bb     ................
 8038cd8:	00bb00bb 00bb00bb 00bc00bb 00bc00bc     ................
 8038ce8:	00bc00bc 00bc00bc 00bc00bc 00bc00bc     ................
 8038cf8:	00bc00bc 00bc00bc 00bc00bc 00bc00bc     ................
 8038d08:	00bc00bc 00bc00bc 00bc00bc 00bc00bc     ................
 8038d18:	00bc00bc 00bc00bc 00bc00bc 00bc00bc     ................
 8038d28:	00bc00bc 00bc00bc 00bc00bc 00bc00bc     ................
 8038d38:	00bc00bc 00bc00bc 00bc00bc 00bc00bc     ................
 8038d48:	00bc00bc 00bc00bc 00bc00bc 00bd00bd     ................
 8038d58:	00bd00bd 00bd00bd 00bd00bd 00bd00bd     ................
 8038d68:	00bd00bd 00bd00bd 00bd00bd 00bd00bd     ................
 8038d78:	00bd00bd 00bd00bd 00bd00bd 00bd00bd     ................
 8038d88:	00bd00bd 00bd00bd 00bd00bd 00bd00bd     ................
 8038d98:	00bd00bd 00bd00bd 00bd00bd 00bd00bd     ................
 8038da8:	00bd00bd 00bd00bd 00bd00bd 00bd00bd     ................
 8038db8:	00bd00bd 00bd00bd 00bd00bd 00be00bd     ................
 8038dc8:	00be00be 00be00be 00be00be 00be00be     ................
 8038dd8:	00be00be 00be00be 00be00be 00be00be     ................
 8038de8:	00be00be 00be00be 00be00be 00be00be     ................
 8038df8:	00be00be 00be00be 00be00be 00be00be     ................
 8038e08:	00be00be 00be00be 00be00be 00be00be     ................
 8038e18:	00be00be 00be00be 00be00be 00be00be     ................
 8038e28:	00be00be 00be00be 00be00be 00be00be     ................
 8038e38:	00bf00bf 00bf00bf 00bf00bf 00bf00bf     ................
 8038e48:	00bf00bf 00bf00bf 00bf00bf 00bf00bf     ................
 8038e58:	00bf00bf 00bf00bf 00bf00bf 00bf00bf     ................
 8038e68:	00bf00bf 00bf00bf 00bf00bf 00bf00bf     ................
 8038e78:	00bf00bf 00bf00bf 00bf00bf 00bf00bf     ................
 8038e88:	00bf00bf 00bf00bf 00bf00bf 00bf00bf     ................
 8038e98:	00bf00bf 00bf00bf 00bf00bf 00bf00bf     ................
 8038ea8:	00c000bf 00c000c0 00c000c0 00c000c0     ................
 8038eb8:	00c000c0 00c000c0 00c000c0 00c000c0     ................
 8038ec8:	00c000c0 00c000c0 00c000c0 00c000c0     ................
 8038ed8:	00c000c0 00c000c0 00c000c0 00c000c0     ................
 8038ee8:	00c000c0 00c000c0 00c000c0 00c000c0     ................
 8038ef8:	00c000c0 00c000c0 00c000c0 00c000c0     ................
 8038f08:	00c000c0 00c000c0 00c000c0 00c000c0     ................
 8038f18:	00c000c0 00c100c1 00c100c1 00c100c1     ................
 8038f28:	00c100c1 00c100c1 00c100c1 00c100c1     ................
 8038f38:	00c100c1 00c100c1 00c100c1 00c100c1     ................
 8038f48:	00c100c1 00c100c1 00c100c1 00c100c1     ................
 8038f58:	00c100c1 00c100c1 00c100c1 00c100c1     ................
 8038f68:	00c100c1 00c100c1 00c100c1 00c100c1     ................
 8038f78:	00c100c1 00c100c1 00c100c1 00c100c1     ................
 8038f88:	00c100c1 00c200c1 00c200c2 00c200c2     ................
 8038f98:	00c200c2 00c200c2 00c200c2 00c200c2     ................
 8038fa8:	00c200c2 00c200c2 00c200c2 00c200c2     ................
 8038fb8:	00c200c2 00c200c2 00c200c2 00c200c2     ................
 8038fc8:	00c200c2 00c200c2 00c200c2 00c200c2     ................
 8038fd8:	00c200c2 00c200c2 00c200c2 00c200c2     ................
 8038fe8:	00c200c2 00c200c2 00c200c2 00c200c2     ................
 8038ff8:	00c200c2 00c200c2 00c300c3 00c300c3     ................
 8039008:	00c300c3 00c300c3 00c300c3 00c300c3     ................
 8039018:	00c300c3 00c300c3 00c300c3 00c300c3     ................
 8039028:	00c300c3 00c300c3 00c300c3 00c300c3     ................
 8039038:	00c300c3 00c300c3 00c300c3 00c300c3     ................
 8039048:	00c300c3 00c300c3 00c300c3 00c300c3     ................
 8039058:	00c300c3 00c300c3 00c300c3 00c300c3     ................
 8039068:	00c300c3 00c300c3 00c400c4 00c400c4     ................
 8039078:	00c400c4 00c400c4 00c400c4 00c400c4     ................
 8039088:	00c400c4 00c400c4 00c400c4 00c400c4     ................
 8039098:	00c400c4 00c400c4 00c400c4 00c400c4     ................
 80390a8:	00c400c4 00c400c4 00c400c4 00c400c4     ................
 80390b8:	00c400c4 00c400c4 00c400c4 00c400c4     ................
 80390c8:	00c400c4 00c400c4 00c400c4 00c400c4     ................
 80390d8:	00c400c4 00c400c4 00c500c4 00c500c5     ................
 80390e8:	00c500c5 00c500c5 00c500c5 00c500c5     ................
 80390f8:	00c500c5 00c500c5 00c500c5 00c500c5     ................
 8039108:	00c500c5 00c500c5 00c500c5 00c500c5     ................
 8039118:	00c500c5 00c500c5 00c500c5 00c500c5     ................
 8039128:	00c500c5 00c500c5 00c500c5 00c500c5     ................
 8039138:	00c500c5 00c500c5 00c500c5 00c500c5     ................
 8039148:	00c500c5 00c500c5 00c500c5 00c600c6     ................
 8039158:	00c600c6 00c600c6 00c600c6 00c600c6     ................
 8039168:	00c600c6 00c600c6 00c600c6 00c600c6     ................
 8039178:	00c600c6 00c600c6 00c600c6 00c600c6     ................
 8039188:	00c600c6 00c600c6 00c600c6 00c600c6     ................
 8039198:	00c600c6 00c600c6 00c600c6 00c600c6     ................
 80391a8:	00c600c6 00c600c6 00c600c6 00c600c6     ................
 80391b8:	00c600c6 00c600c6 00c600c6 00c700c7     ................
 80391c8:	00c700c7 00c700c7 00c700c7 00c700c7     ................
 80391d8:	00c700c7 00c700c7 00c700c7 00c700c7     ................
 80391e8:	00c700c7 00c700c7 00c700c7 00c700c7     ................
 80391f8:	00c700c7 00c700c7 00c700c7 00c700c7     ................
 8039208:	00c700c7 00c700c7 00c700c7 00c700c7     ................
 8039218:	00c700c7 00c700c7 00c700c7 00c700c7     ................
 8039228:	00c700c7 00c700c7 00c700c7 00c800c8     ................
 8039238:	00c800c8 00c800c8 00c800c8 00c800c8     ................
 8039248:	00c800c8 00c800c8 00c800c8 00c800c8     ................
 8039258:	00c800c8 00c800c8 00c800c8 00c800c8     ................
 8039268:	00c800c8 00c800c8 00c800c8 00c800c8     ................
 8039278:	00c800c8 00c800c8 00c800c8 00c800c8     ................
 8039288:	00c800c8 00c800c8 00c800c8 00c800c8     ................
 8039298:	00c800c8 00c800c8 00c800c8 00c900c8     ................
 80392a8:	00c900c9 00c900c9 00c900c9 00c900c9     ................
 80392b8:	00c900c9 00c900c9 00c900c9 00c900c9     ................
 80392c8:	00c900c9 00c900c9 00c900c9 00c900c9     ................
 80392d8:	00c900c9 00c900c9 00c900c9 00c900c9     ................
 80392e8:	00c900c9 00c900c9 00c900c9 00c900c9     ................
 80392f8:	00c900c9 00c900c9 00c900c9 00c900c9     ................
 8039308:	00c900c9 00c900c9 00c900c9 00ca00c9     ................
 8039318:	00ca00ca 00ca00ca 00ca00ca 00ca00ca     ................
 8039328:	00ca00ca 00ca00ca 00ca00ca 00ca00ca     ................
 8039338:	00ca00ca 00ca00ca 00ca00ca 00ca00ca     ................
 8039348:	00ca00ca 00ca00ca 00ca00ca 00ca00ca     ................
 8039358:	00ca00ca 00ca00ca 00ca00ca 00ca00ca     ................
 8039368:	00ca00ca 00ca00ca 00ca00ca 00ca00ca     ................
 8039378:	00ca00ca 00ca00ca 00ca00ca 00cb00ca     ................
 8039388:	00cb00cb 00cb00cb 00cb00cb 00cb00cb     ................
 8039398:	00cb00cb 00cb00cb 00cb00cb 00cb00cb     ................
 80393a8:	00cb00cb 00cb00cb 00cb00cb 00cb00cb     ................
 80393b8:	00cb00cb 00cb00cb 00cb00cb 00cb00cb     ................
 80393c8:	00cb00cb 00cb00cb 00cb00cb 00cb00cb     ................
 80393d8:	00cb00cb 00cb00cb 00cb00cb 00cb00cb     ................
 80393e8:	00cb00cb 00cb00cb 00cb00cb 00cc00cb     ................
 80393f8:	00cc00cc 00cc00cc 00cc00cc 00cc00cc     ................
 8039408:	00cc00cc 00cc00cc 00cc00cc 00cc00cc     ................
 8039418:	00cc00cc 00cc00cc 00cc00cc 00cc00cc     ................
 8039428:	00cc00cc 00cc00cc 00cc00cc 00cc00cc     ................
 8039438:	00cc00cc 00cc00cc 00cc00cc 00cc00cc     ................
 8039448:	00cc00cc 00cc00cc 00cc00cc 00cc00cc     ................
 8039458:	00cc00cc 00cc00cc 00cc00cc 00cd00cc     ................
 8039468:	00cd00cd 00cd00cd 00cd00cd 00cd00cd     ................
 8039478:	00cd00cd 00cd00cd 00cd00cd 00cd00cd     ................
 8039488:	00cd00cd 00cd00cd 00cd00cd 00cd00cd     ................
 8039498:	00cd00cd 00cd00cd 00cd00cd 00cd00cd     ................
 80394a8:	00cd00cd 00cd00cd 00cd00cd 00cd00cd     ................
 80394b8:	00cd00cd 00cd00cd 00cd00cd 00cd00cd     ................
 80394c8:	00cd00cd 00cd00cd 00cd00cd 00ce00cd     ................
 80394d8:	00ce00ce 00ce00ce 00ce00ce 00ce00ce     ................
 80394e8:	00ce00ce 00ce00ce 00ce00ce 00ce00ce     ................
 80394f8:	00ce00ce 00ce00ce 00ce00ce 00ce00ce     ................
 8039508:	00ce00ce 00ce00ce 00ce00ce 00ce00ce     ................
 8039518:	00ce00ce 00ce00ce 00ce00ce 00ce00ce     ................
 8039528:	00ce00ce 00ce00ce 00ce00ce 00ce00ce     ................
 8039538:	00ce00ce 00ce00ce 00ce00ce 00cf00ce     ................
 8039548:	00cf00cf 00cf00cf 00cf00cf 00cf00cf     ................
 8039558:	00cf00cf 00cf00cf 00cf00cf 00cf00cf     ................
 8039568:	00cf00cf 00cf00cf 00cf00cf 00cf00cf     ................
 8039578:	00cf00cf 00cf00cf 00cf00cf 00cf00cf     ................
 8039588:	00cf00cf 00cf00cf 00cf00cf 00cf00cf     ................
 8039598:	00cf00cf 00cf00cf 00cf00cf 00cf00cf     ................
 80395a8:	00cf00cf 00cf00cf 00cf00cf 00d000cf     ................
 80395b8:	00d000d0 00d000d0 00d000d0 00d000d0     ................
 80395c8:	00d000d0 00d000d0 00d000d0 00d000d0     ................
 80395d8:	00d000d0 00d000d0 00d000d0 00d000d0     ................
 80395e8:	00d000d0 00d000d0 00d000d0 00d000d0     ................
 80395f8:	00d000d0 00d000d0 00d000d0 00d000d0     ................
 8039608:	00d000d0 00d000d0 00d000d0 00d000d0     ................
 8039618:	00d000d0 00d000d0 00d000d0 00d100d0     ................
 8039628:	00d100d1 00d100d1 00d100d1 00d100d1     ................
 8039638:	00d100d1 00d100d1 00d100d1 00d100d1     ................
 8039648:	00d100d1 00d100d1 00d100d1 00d100d1     ................
 8039658:	00d100d1 00d100d1 00d100d1 00d100d1     ................
 8039668:	00d100d1 00d100d1 00d100d1 00d100d1     ................
 8039678:	00d100d1 00d100d1 00d100d1 00d100d1     ................
 8039688:	00d100d1 00d100d1 00d100d1 00d200d1     ................
 8039698:	00d200d2 00d200d2 00d200d2 00d200d2     ................
 80396a8:	00d200d2 00d200d2 00d200d2 00d200d2     ................
 80396b8:	00d200d2 00d200d2 00d200d2 00d200d2     ................
 80396c8:	00d200d2 00d200d2 00d200d2 00d200d2     ................
 80396d8:	00d200d2 00d200d2 00d200d2 00d200d2     ................
 80396e8:	00d200d2 00d200d2 00d200d2 00d200d2     ................
 80396f8:	00d200d2 00d200d2 00d200d2 00d300d3     ................
 8039708:	00d300d3 00d300d3 00d300d3 00d300d3     ................
 8039718:	00d300d3 00d300d3 00d300d3 00d300d3     ................
 8039728:	00d300d3 00d300d3 00d300d3 00d300d3     ................
 8039738:	00d300d3 00d300d3 00d300d3 00d300d3     ................
 8039748:	00d300d3 00d300d3 00d300d3 00d300d3     ................
 8039758:	00d300d3 00d300d3 00d300d3 00d300d3     ................
 8039768:	00d300d3 00d300d3 00d300d3 00d400d4     ................
 8039778:	00d400d4 00d400d4 00d400d4 00d400d4     ................
 8039788:	00d400d4 00d400d4 00d400d4 00d400d4     ................
 8039798:	00d400d4 00d400d4 00d400d4 00d400d4     ................
 80397a8:	00d400d4 00d400d4 00d400d4 00d400d4     ................
 80397b8:	00d400d4 00d400d4 00d400d4 00d400d4     ................
 80397c8:	00d400d4 00d400d4 00d400d4 00d400d4     ................
 80397d8:	00d400d4 00d400d4 00d400d4 00d500d5     ................
 80397e8:	00d500d5 00d500d5 00d500d5 00d500d5     ................
 80397f8:	00d500d5 00d500d5 00d500d5 00d500d5     ................
 8039808:	00d500d5 00d500d5 00d500d5 00d500d5     ................
 8039818:	00d500d5 00d500d5 00d500d5 00d500d5     ................
 8039828:	00d500d5 00d500d5 00d500d5 00d500d5     ................
 8039838:	00d500d5 00d500d5 00d500d5 00d500d5     ................
 8039848:	00d500d5 00d500d5 00d600d5 00d600d6     ................
 8039858:	00d600d6 00d600d6 00d600d6 00d600d6     ................
 8039868:	00d600d6 00d600d6 00d600d6 00d600d6     ................
 8039878:	00d600d6 00d600d6 00d600d6 00d600d6     ................
 8039888:	00d600d6 00d600d6 00d600d6 00d600d6     ................
 8039898:	00d600d6 00d600d6 00d600d6 00d600d6     ................
 80398a8:	00d600d6 00d600d6 00d600d6 00d600d6     ................
 80398b8:	00d600d6 00d600d6 00d700d6 00d700d7     ................
 80398c8:	00d700d7 00d700d7 00d700d7 00d700d7     ................
 80398d8:	00d700d7 00d700d7 00d700d7 00d700d7     ................
 80398e8:	00d700d7 00d700d7 00d700d7 00d700d7     ................
 80398f8:	00d700d7 00d700d7 00d700d7 00d700d7     ................
 8039908:	00d700d7 00d700d7 00d700d7 00d700d7     ................
 8039918:	00d700d7 00d700d7 00d700d7 00d700d7     ................
 8039928:	00d700d7 00d700d7 00d800d8 00d800d8     ................
 8039938:	00d800d8 00d800d8 00d800d8 00d800d8     ................
 8039948:	00d800d8 00d800d8 00d800d8 00d800d8     ................
 8039958:	00d800d8 00d800d8 00d800d8 00d800d8     ................
 8039968:	00d800d8 00d800d8 00d800d8 00d800d8     ................
 8039978:	00d800d8 00d800d8 00d800d8 00d800d8     ................
 8039988:	00d800d8 00d800d8 00d800d8 00d800d8     ................
 8039998:	00d800d8 00d900d8 00d900d9 00d900d9     ................
 80399a8:	00d900d9 00d900d9 00d900d9 00d900d9     ................
 80399b8:	00d900d9 00d900d9 00d900d9 00d900d9     ................
 80399c8:	00d900d9 00d900d9 00d900d9 00d900d9     ................
 80399d8:	00d900d9 00d900d9 00d900d9 00d900d9     ................
 80399e8:	00d900d9 00d900d9 00d900d9 00d900d9     ................
 80399f8:	00d900d9 00d900d9 00d900d9 00d900d9     ................
 8039a08:	00d900d9 00da00d9 00da00da 00da00da     ................
 8039a18:	00da00da 00da00da 00da00da 00da00da     ................
 8039a28:	00da00da 00da00da 00da00da 00da00da     ................
 8039a38:	00da00da 00da00da 00da00da 00da00da     ................
 8039a48:	00da00da 00da00da 00da00da 00da00da     ................
 8039a58:	00da00da 00da00da 00da00da 00da00da     ................
 8039a68:	00da00da 00da00da 00da00da 00da00da     ................
 8039a78:	00da00da 00db00db 00db00db 00db00db     ................
 8039a88:	00db00db 00db00db 00db00db 00db00db     ................
 8039a98:	00db00db 00db00db 00db00db 00db00db     ................
 8039aa8:	00db00db 00db00db 00db00db 00db00db     ................
 8039ab8:	00db00db 00db00db 00db00db 00db00db     ................
 8039ac8:	00db00db 00db00db 00db00db 00db00db     ................
 8039ad8:	00db00db 00db00db 00db00db 00db00db     ................
 8039ae8:	00dc00db 00dc00dc 00dc00dc 00dc00dc     ................
 8039af8:	00dc00dc 00dc00dc 00dc00dc 00dc00dc     ................
 8039b08:	00dc00dc 00dc00dc 00dc00dc 00dc00dc     ................
 8039b18:	00dc00dc 00dc00dc 00dc00dc 00dc00dc     ................
 8039b28:	00dc00dc 00dc00dc 00dc00dc 00dc00dc     ................
 8039b38:	00dc00dc 00dc00dc 00dc00dc 00dc00dc     ................
 8039b48:	00dc00dc 00dc00dc 00dc00dc 00dc00dc     ................
 8039b58:	00dd00dd 00dd00dd 00dd00dd 00dd00dd     ................
 8039b68:	00dd00dd 00dd00dd 00dd00dd 00dd00dd     ................
 8039b78:	00dd00dd 00dd00dd 00dd00dd 00dd00dd     ................
 8039b88:	00dd00dd 00dd00dd 00dd00dd 00dd00dd     ................
 8039b98:	00dd00dd 00dd00dd 00dd00dd 00dd00dd     ................
 8039ba8:	00dd00dd 00dd00dd 00dd00dd 00dd00dd     ................
 8039bb8:	00dd00dd 00dd00dd 00dd00dd 00de00dd     ................
 8039bc8:	00de00de 00de00de 00de00de 00de00de     ................
 8039bd8:	00de00de 00de00de 00de00de 00de00de     ................
 8039be8:	00de00de 00de00de 00de00de 00de00de     ................
 8039bf8:	00de00de 00de00de 00de00de 00de00de     ................
 8039c08:	00de00de 00de00de 00de00de 00de00de     ................
 8039c18:	00de00de 00de00de 00de00de 00de00de     ................
 8039c28:	00de00de 00de00de 00de00de 00df00df     ................
 8039c38:	00df00df 00df00df 00df00df 00df00df     ................
 8039c48:	00df00df 00df00df 00df00df 00df00df     ................
 8039c58:	00df00df 00df00df 00df00df 00df00df     ................
 8039c68:	00df00df 00df00df 00df00df 00df00df     ................
 8039c78:	00df00df 00df00df 00df00df 00df00df     ................
 8039c88:	00df00df 00df00df 00df00df 00df00df     ................
 8039c98:	00df00df 00df00df 00e000df 00e000e0     ................
 8039ca8:	00e000e0 00e000e0 00e000e0 00e000e0     ................
 8039cb8:	00e000e0 00e000e0 00e000e0 00e000e0     ................
 8039cc8:	00e000e0 00e000e0 00e000e0 00e000e0     ................
 8039cd8:	00e000e0 00e000e0 00e000e0 00e000e0     ................
 8039ce8:	00e000e0 00e000e0 00e000e0 00e000e0     ................
 8039cf8:	00e000e0 00e000e0 00e000e0 00e000e0     ................
 8039d08:	00e000e0 00e000e0 00e100e1 00e100e1     ................
 8039d18:	00e100e1 00e100e1 00e100e1 00e100e1     ................
 8039d28:	00e100e1 00e100e1 00e100e1 00e100e1     ................
 8039d38:	00e100e1 00e100e1 00e100e1 00e100e1     ................
 8039d48:	00e100e1 00e100e1 00e100e1 00e100e1     ................
 8039d58:	00e100e1 00e100e1 00e100e1 00e100e1     ................
 8039d68:	00e100e1 00e100e1 00e100e1 00e100e1     ................
 8039d78:	00e100e1 00e200e1 00e200e2 00e200e2     ................
 8039d88:	00e200e2 00e200e2 00e200e2 00e200e2     ................
 8039d98:	00e200e2 00e200e2 00e200e2 00e200e2     ................
 8039da8:	00e200e2 00e200e2 00e200e2 00e200e2     ................
 8039db8:	00e200e2 00e200e2 00e200e2 00e200e2     ................
 8039dc8:	00e200e2 00e200e2 00e200e2 00e200e2     ................
 8039dd8:	00e200e2 00e200e2 00e200e2 00e200e2     ................
 8039de8:	00e200e2 00e300e3 00e300e3 00e300e3     ................
 8039df8:	00e300e3 00e300e3 00e300e3 00e300e3     ................
 8039e08:	00e300e3 00e300e3 00e300e3 00e300e3     ................
 8039e18:	00e300e3 00e300e3 00e300e3 00e300e3     ................
 8039e28:	00e300e3 00e300e3 00e300e3 00e300e3     ................
 8039e38:	00e300e3 00e300e3 00e300e3 00e300e3     ................
 8039e48:	00e300e3 00e300e3 00e300e3 00e300e3     ................
 8039e58:	00e400e3 00e400e4 00e400e4 00e400e4     ................
 8039e68:	00e400e4 00e400e4 00e400e4 00e400e4     ................
 8039e78:	00e400e4 00e400e4 00e400e4 00e400e4     ................
 8039e88:	00e400e4 00e400e4 00e400e4 00e400e4     ................
 8039e98:	00e400e4 00e400e4 00e400e4 00e400e4     ................
 8039ea8:	00e400e4 00e400e4 00e400e4 00e400e4     ................
 8039eb8:	00e400e4 00e400e4 00e400e4 00e500e4     ................
 8039ec8:	00e500e5 00e500e5 00e500e5 00e500e5     ................
 8039ed8:	00e500e5 00e500e5 00e500e5 00e500e5     ................
 8039ee8:	00e500e5 00e500e5 00e500e5 00e500e5     ................
 8039ef8:	00e500e5 00e500e5 00e500e5 00e500e5     ................
 8039f08:	00e500e5 00e500e5 00e500e5 00e500e5     ................
 8039f18:	00e500e5 00e500e5 00e500e5 00e500e5     ................
 8039f28:	00e500e5 00e500e5 00e500e5 00e600e6     ................
 8039f38:	00e600e6 00e600e6 00e600e6 00e600e6     ................
 8039f48:	00e600e6 00e600e6 00e600e6 00e600e6     ................
 8039f58:	00e600e6 00e600e6 00e600e6 00e600e6     ................
 8039f68:	00e600e6 00e600e6 00e600e6 00e600e6     ................
 8039f78:	00e600e6 00e600e6 00e600e6 00e600e6     ................
 8039f88:	00e600e6 00e600e6 00e600e6 00e600e6     ................
 8039f98:	00e600e6 00e600e6 00e700e6 00e700e7     ................
 8039fa8:	00e700e7 00e700e7 00e700e7 00e700e7     ................
 8039fb8:	00e700e7 00e700e7 00e700e7 00e700e7     ................
 8039fc8:	00e700e7 00e700e7 00e700e7 00e700e7     ................
 8039fd8:	00e700e7 00e700e7 00e700e7 00e700e7     ................
 8039fe8:	00e700e7 00e700e7 00e700e7 00e700e7     ................
 8039ff8:	00e700e7 00e700e7 00e700e7 00e700e7     ................
 803a008:	00e700e7 00e800e7 00e800e8 00e800e8     ................
 803a018:	00e800e8 00e800e8 00e800e8 00e800e8     ................
 803a028:	00e800e8 00e800e8 00e800e8 00e800e8     ................
 803a038:	00e800e8 00e800e8 00e800e8 00e800e8     ................
 803a048:	00e800e8 00e800e8 00e800e8 00e800e8     ................
 803a058:	00e800e8 00e800e8 00e800e8 00e800e8     ................
 803a068:	00e800e8 00e800e8 00e800e8 00e800e8     ................
 803a078:	00e800e8 00e900e9 00e900e9 00e900e9     ................
 803a088:	00e900e9 00e900e9 00e900e9 00e900e9     ................
 803a098:	00e900e9 00e900e9 00e900e9 00e900e9     ................
 803a0a8:	00e900e9 00e900e9 00e900e9 00e900e9     ................
 803a0b8:	00e900e9 00e900e9 00e900e9 00e900e9     ................
 803a0c8:	00e900e9 00e900e9 00e900e9 00e900e9     ................
 803a0d8:	00e900e9 00e900e9 00e900e9 00e900e9     ................
 803a0e8:	00ea00ea 00ea00ea 00ea00ea 00ea00ea     ................
 803a0f8:	00ea00ea 00ea00ea 00ea00ea 00ea00ea     ................
 803a108:	00ea00ea 00ea00ea 00ea00ea 00ea00ea     ................
 803a118:	00ea00ea 00ea00ea 00ea00ea 00ea00ea     ................
 803a128:	00ea00ea 00ea00ea 00ea00ea 00ea00ea     ................
 803a138:	00ea00ea 00ea00ea 00ea00ea 00ea00ea     ................
 803a148:	00ea00ea 00ea00ea 00ea00ea 00eb00ea     ................
 803a158:	00eb00eb 00eb00eb 00eb00eb 00eb00eb     ................
 803a168:	00eb00eb 00eb00eb 00eb00eb 00eb00eb     ................
 803a178:	00eb00eb 00eb00eb 00eb00eb 00eb00eb     ................
 803a188:	00eb00eb 00eb00eb 00eb00eb 00eb00eb     ................
 803a198:	00eb00eb 00eb00eb 00eb00eb 00eb00eb     ................
 803a1a8:	00eb00eb 00eb00eb 00eb00eb 00eb00eb     ................
 803a1b8:	00eb00eb 00eb00eb 00ec00eb 00ec00ec     ................
 803a1c8:	00ec00ec 00ec00ec 00ec00ec 00ec00ec     ................
 803a1d8:	00ec00ec 00ec00ec 00ec00ec 00ec00ec     ................
 803a1e8:	00ec00ec 00ec00ec 00ec00ec 00ec00ec     ................
 803a1f8:	00ec00ec 00ec00ec 00ec00ec 00ec00ec     ................
 803a208:	00ec00ec 00ec00ec 00ec00ec 00ec00ec     ................
 803a218:	00ec00ec 00ec00ec 00ec00ec 00ec00ec     ................
 803a228:	00ec00ec 00ed00ec 00ed00ed 00ed00ed     ................
 803a238:	00ed00ed 00ed00ed 00ed00ed 00ed00ed     ................
 803a248:	00ed00ed 00ed00ed 00ed00ed 00ed00ed     ................
 803a258:	00ed00ed 00ed00ed 00ed00ed 00ed00ed     ................
 803a268:	00ed00ed 00ed00ed 00ed00ed 00ed00ed     ................
 803a278:	00ed00ed 00ed00ed 00ed00ed 00ed00ed     ................
 803a288:	00ed00ed 00ed00ed 00ed00ed 00ed00ed     ................
 803a298:	00ed00ed 00ee00ee 00ee00ee 00ee00ee     ................
 803a2a8:	00ee00ee 00ee00ee 00ee00ee 00ee00ee     ................
 803a2b8:	00ee00ee 00ee00ee 00ee00ee 00ee00ee     ................
 803a2c8:	00ee00ee 00ee00ee 00ee00ee 00ee00ee     ................
 803a2d8:	00ee00ee 00ee00ee 00ee00ee 00ee00ee     ................
 803a2e8:	00ee00ee 00ee00ee 00ee00ee 00ee00ee     ................
 803a2f8:	00ee00ee 00ee00ee 00ee00ee 00ee00ee     ................
 803a308:	00ef00ef 00ef00ef 00ef00ef 00ef00ef     ................
 803a318:	00ef00ef 00ef00ef 00ef00ef 00ef00ef     ................
 803a328:	00ef00ef 00ef00ef 00ef00ef 00ef00ef     ................
 803a338:	00ef00ef 00ef00ef 00ef00ef 00ef00ef     ................
 803a348:	00ef00ef 00ef00ef 00ef00ef 00ef00ef     ................
 803a358:	00ef00ef 00ef00ef 00ef00ef 00ef00ef     ................
 803a368:	00ef00ef 00ef00ef 00ef00ef 00f000f0     ................
 803a378:	00f000f0 00f000f0 00f000f0 00f000f0     ................
 803a388:	00f000f0 00f000f0 00f000f0 00f000f0     ................
 803a398:	00f000f0 00f000f0 00f000f0 00f000f0     ................
 803a3a8:	00f000f0 00f000f0 00f000f0 00f000f0     ................
 803a3b8:	00f000f0 00f000f0 00f000f0 00f000f0     ................
 803a3c8:	00f000f0 00f000f0 00f000f0 00f000f0     ................
 803a3d8:	00f000f0 00f000f0 00f100f0 00f100f1     ................
 803a3e8:	00f100f1 00f100f1 00f100f1 00f100f1     ................
 803a3f8:	00f100f1 00f100f1 00f100f1 00f100f1     ................
 803a408:	00f100f1 00f100f1 00f100f1 00f100f1     ................
 803a418:	00f100f1 00f100f1 00f100f1 00f100f1     ................
 803a428:	00f100f1 00f100f1 00f100f1 00f100f1     ................
 803a438:	00f100f1 00f100f1 00f100f1 00f100f1     ................
 803a448:	00f100f1 00f200f1 00f200f2 00f200f2     ................
 803a458:	00f200f2 00f200f2 00f200f2 00f200f2     ................
 803a468:	00f200f2 00f200f2 00f200f2 00f200f2     ................
 803a478:	00f200f2 00f200f2 00f200f2 00f200f2     ................
 803a488:	00f200f2 00f200f2 00f200f2 00f200f2     ................
 803a498:	00f200f2 00f200f2 00f200f2 00f200f2     ................
 803a4a8:	00f200f2 00f200f2 00f200f2 00f200f2     ................
 803a4b8:	00f300f2 00f300f3 00f300f3 00f300f3     ................
 803a4c8:	00f300f3 00f300f3 00f300f3 00f300f3     ................
 803a4d8:	00f300f3 00f300f3 00f300f3 00f300f3     ................
 803a4e8:	00f300f3 00f300f3 00f300f3 00f300f3     ................
 803a4f8:	00f300f3 00f300f3 00f300f3 00f300f3     ................
 803a508:	00f300f3 00f300f3 00f300f3 00f300f3     ................
 803a518:	00f300f3 00f300f3 00f300f3 00f400f3     ................
 803a528:	00f400f4 00f400f4 00f400f4 00f400f4     ................
 803a538:	00f400f4 00f400f4 00f400f4 00f400f4     ................
 803a548:	00f400f4 00f400f4 00f400f4 00f400f4     ................
 803a558:	00f400f4 00f400f4 00f400f4 00f400f4     ................
 803a568:	00f400f4 00f400f4 00f400f4 00f400f4     ................
 803a578:	00f400f4 00f400f4 00f400f4 00f400f4     ................
 803a588:	00f400f4 00f400f4 00f500f4 00f500f5     ................
 803a598:	00f500f5 00f500f5 00f500f5 00f500f5     ................
 803a5a8:	00f500f5 00f500f5 00f500f5 00f500f5     ................
 803a5b8:	00f500f5 00f500f5 00f500f5 00f500f5     ................
 803a5c8:	00f500f5 00f500f5 00f500f5 00f500f5     ................
 803a5d8:	00f500f5 00f500f5 00f500f5 00f500f5     ................
 803a5e8:	00f500f5 00f500f5 00f500f5 00f500f5     ................
 803a5f8:	00f500f5 00f600f5 00f600f6 00f600f6     ................
 803a608:	00f600f6 00f600f6 00f600f6 00f600f6     ................
 803a618:	00f600f6 00f600f6 00f600f6 00f600f6     ................
 803a628:	00f600f6 00f600f6 00f600f6 00f600f6     ................
 803a638:	00f600f6 00f600f6 00f600f6 00f600f6     ................
 803a648:	00f600f6 00f600f6 00f600f6 00f600f6     ................
 803a658:	00f600f6 00f600f6 00f600f6 00f600f6     ................
 803a668:	00f700f6 00f700f7 00f700f7 00f700f7     ................
 803a678:	00f700f7 00f700f7 00f700f7 00f700f7     ................
 803a688:	00f700f7 00f700f7 00f700f7 00f700f7     ................
 803a698:	00f700f7 00f700f7 00f700f7 00f700f7     ................
 803a6a8:	00f700f7 00f700f7 00f700f7 00f700f7     ................
 803a6b8:	00f700f7 00f700f7 00f700f7 00f700f7     ................
 803a6c8:	00f700f7 00f700f7 00f700f7 00f800f7     ................
 803a6d8:	00f800f8 00f800f8 00f800f8 00f800f8     ................
 803a6e8:	00f800f8 00f800f8 00f800f8 00f800f8     ................
 803a6f8:	00f800f8 00f800f8 00f800f8 00f800f8     ................
 803a708:	00f800f8 00f800f8 00f800f8 00f800f8     ................
 803a718:	00f800f8 00f800f8 00f800f8 00f800f8     ................
 803a728:	00f800f8 00f800f8 00f800f8 00f800f8     ................
 803a738:	00f800f8 00f800f8 00f900f8 00f900f9     ................
 803a748:	00f900f9 00f900f9 00f900f9 00f900f9     ................
 803a758:	00f900f9 00f900f9 00f900f9 00f900f9     ................
 803a768:	00f900f9 00f900f9 00f900f9 00f900f9     ................
 803a778:	00f900f9 00f900f9 00f900f9 00f900f9     ................
 803a788:	00f900f9 00f900f9 00f900f9 00f900f9     ................
 803a798:	00f900f9 00f900f9 00f900f9 00f900f9     ................
 803a7a8:	00f900f9 00fa00f9 00fa00fa 00fa00fa     ................
 803a7b8:	00fa00fa 00fa00fa 00fa00fa 00fa00fa     ................
 803a7c8:	00fa00fa 00fa00fa 00fa00fa 00fa00fa     ................
 803a7d8:	00fa00fa 00fa00fa 00fa00fa 00fa00fa     ................
 803a7e8:	00fa00fa 00fa00fa 00fa00fa 00fa00fa     ................
 803a7f8:	00fa00fa 00fa00fa 00fa00fa 00fa00fa     ................
 803a808:	00fa00fa 00fa00fa 00fa00fa 00fa00fa     ................
 803a818:	00fb00fa 00fb00fb 00fb00fb 00fb00fb     ................
 803a828:	00fb00fb 00fb00fb 00fb00fb 00fb00fb     ................
 803a838:	00fb00fb 00fb00fb 00fb00fb 00fb00fb     ................
 803a848:	00fb00fb 00fb00fb 00fb00fb 00fb00fb     ................
 803a858:	00fb00fb 00fb00fb 00fb00fb 00fb00fb     ................
 803a868:	00fb00fb 00fb00fb 00fb00fb 00fb00fb     ................
 803a878:	00fb00fb 00fb00fb 00fb00fb 00fc00fb     ................
 803a888:	00fc00fc 00fc00fc 00fc00fc 00fc00fc     ................
 803a898:	00fc00fc 00fc00fc 00fc00fc 00fc00fc     ................
 803a8a8:	00fc00fc 00fc00fc 00fc00fc 00fc00fc     ................
 803a8b8:	00fc00fc 00fc00fc 00fc00fc 00fc00fc     ................
 803a8c8:	00fc00fc 00fc00fc 00fc00fc 00fc00fc     ................
 803a8d8:	00fc00fc 00fc00fc 00fc00fc 00fc00fc     ................
 803a8e8:	00fc00fc 00fc00fc 00fd00fc 00fd00fd     ................
 803a8f8:	00fd00fd 00fd00fd 00fd00fd 00fd00fd     ................
 803a908:	00fd00fd 00fd00fd 00fd00fd 00fd00fd     ................
 803a918:	00fd00fd 00fd00fd 00fd00fd 00fd00fd     ................
 803a928:	00fd00fd 00fd00fd 00fd00fd 00fd00fd     ................
 803a938:	00fd00fd 00fd00fd 00fd00fd 00fd00fd     ................
 803a948:	00fd00fd 00fd00fd 00fd00fd 00fd00fd     ................
 803a958:	00fd00fd 00fe00fe 00fe00fe 00fe00fe     ................
 803a968:	00fe00fe 00fe00fe 00fe00fe 00fe00fe     ................
 803a978:	00fe00fe 00fe00fe 00fe00fe 00fe00fe     ................
 803a988:	00fe00fe 00fe00fe 00fe00fe 00fe00fe     ................
 803a998:	00fe00fe 00fe00fe 00fe00fe 00fe00fe     ................
 803a9a8:	00fe00fe 00fe00fe 00fe00fe 00fe00fe     ................
 803a9b8:	00fe00fe 00fe00fe 00fe00fe 00fe00fe     ................
 803a9c8:	00ff00ff 00ff00ff 00ff00ff 00ff00ff     ................
 803a9d8:	00ff00ff 00ff00ff 00ff00ff 00ff00ff     ................
 803a9e8:	00ff00ff 00ff00ff 00ff00ff 00ff00ff     ................
 803a9f8:	00ff00ff 00ff00ff 00ff00ff 00ff00ff     ................
 803aa08:	00ff00ff 00ff00ff 00ff00ff 00ff00ff     ................
 803aa18:	00ff00ff 00ff00ff 00ff00ff 00ff00ff     ................
 803aa28:	00ff00ff 00ff00ff 00ff00ff 01000100     ................
 803aa38:	01000100 01000100 01000100 01000100     ................
 803aa48:	01000100 01000100 01000100 01000100     ................
 803aa58:	01000100 01000100 01000100 01000100     ................
 803aa68:	01000100 01000100 01000100 01000100     ................
 803aa78:	01000100 01000100 01000100 01000100     ................
 803aa88:	01000100 01000100 01000100 01000100     ................
 803aa98:	01000100 01000100 01010101 01010101     ................
 803aaa8:	01010101 01010101 01010101 01010101     ................
 803aab8:	01010101 01010101 01010101 01010101     ................
 803aac8:	01010101 01010101 01010101 01010101     ................
 803aad8:	01010101 01010101 01010101 01010101     ................
 803aae8:	01010101 01010101 01010101 01010101     ................
 803aaf8:	01010101 01010101 01010101 01010101     ................
 803ab08:	01020101 01020102 01020102 01020102     ................
 803ab18:	01020102 01020102 01020102 01020102     ................
 803ab28:	01020102 01020102 01020102 01020102     ................
 803ab38:	01020102 01020102 01020102 01020102     ................
 803ab48:	01020102 01020102 01020102 01020102     ................
 803ab58:	01020102 01020102 01020102 01020102     ................
 803ab68:	01020102 01020102 01020102 01030102     ................
 803ab78:	01030103 01030103 01030103 01030103     ................
 803ab88:	01030103 01030103 01030103 01030103     ................
 803ab98:	01030103 01030103 01030103 01030103     ................
 803aba8:	01030103 01030103 01030103 01030103     ................
 803abb8:	01030103 01030103 01030103 01030103     ................
 803abc8:	01030103 01030103 01030103 01030103     ................
 803abd8:	01030103 01030103 01040103 01040104     ................
 803abe8:	01040104 01040104 01040104 01040104     ................
 803abf8:	01040104 01040104 01040104 01040104     ................
 803ac08:	01040104 01040104 01040104 01040104     ................
 803ac18:	01040104 01040104 01040104 01040104     ................
 803ac28:	01040104 01040104 01040104 01040104     ................
 803ac38:	01040104 01040104 01040104 01040104     ................
 803ac48:	01040104 01050105 01050105 01050105     ................
 803ac58:	01050105 01050105 01050105 01050105     ................
 803ac68:	01050105 01050105 01050105 01050105     ................
 803ac78:	01050105 01050105 01050105 01050105     ................
 803ac88:	01050105 01050105 01050105 01050105     ................
 803ac98:	01050105 01050105 01050105 01050105     ................
 803aca8:	01050105 01050105 01050105 01050105     ................
 803acb8:	01060106 01060106 01060106 01060106     ................
 803acc8:	01060106 01060106 01060106 01060106     ................
 803acd8:	01060106 01060106 01060106 01060106     ................
 803ace8:	01060106 01060106 01060106 01060106     ................
 803acf8:	01060106 01060106 01060106 01060106     ................
 803ad08:	01060106 01060106 01060106 01060106     ................
 803ad18:	01060106 01060106 01070106 01070107     ................
 803ad28:	01070107 01070107 01070107 01070107     ................
 803ad38:	01070107 01070107 01070107 01070107     ................
 803ad48:	01070107 01070107 01070107 01070107     ................
 803ad58:	01070107 01070107 01070107 01070107     ................
 803ad68:	01070107 01070107 01070107 01070107     ................
 803ad78:	01070107 01070107 01070107 01070107     ................
 803ad88:	01070107 01080107 01080108 01080108     ................
 803ad98:	01080108 01080108 01080108 01080108     ................
 803ada8:	01080108 01080108 01080108 01080108     ................
 803adb8:	01080108 01080108 01080108 01080108     ................
 803adc8:	01080108 01080108 01080108 01080108     ................
 803add8:	01080108 01080108 01080108 01080108     ................
 803ade8:	01080108 01080108 01080108 01080108     ................
 803adf8:	01090109 01090109 01090109 01090109     ................
 803ae08:	01090109 01090109 01090109 01090109     ................
 803ae18:	01090109 01090109 01090109 01090109     ................
 803ae28:	01090109 01090109 01090109 01090109     ................
 803ae38:	01090109 01090109 01090109 01090109     ................
 803ae48:	01090109 01090109 01090109 01090109     ................
 803ae58:	01090109 01090109 01090109 010a010a     ................
 803ae68:	010a010a 010a010a 010a010a 010a010a     ................
 803ae78:	010a010a 010a010a 010a010a 010a010a     ................
 803ae88:	010a010a 010a010a 010a010a 010a010a     ................
 803ae98:	010a010a 010a010a 010a010a 010a010a     ................
 803aea8:	010a010a 010a010a 010a010a 010a010a     ................
 803aeb8:	010a010a 010a010a 010a010a 010a010a     ................
 803aec8:	010a010a 010b010a 010b010b 010b010b     ................
 803aed8:	010b010b 010b010b 010b010b 010b010b     ................
 803aee8:	010b010b 010b010b 010b010b 010b010b     ................
 803aef8:	010b010b 010b010b 010b010b 010b010b     ................
 803af08:	010b010b 010b010b 010b010b 010b010b     ................
 803af18:	010b010b 010b010b 010b010b 010b010b     ................
 803af28:	010b010b 010b010b 010b010b 010b010b     ................
 803af38:	010c010b 010c010c 010c010c 010c010c     ................
 803af48:	010c010c 010c010c 010c010c 010c010c     ................
 803af58:	010c010c 010c010c 010c010c 010c010c     ................
 803af68:	010c010c 010c010c 010c010c 010c010c     ................
 803af78:	010c010c 010c010c 010c010c 010c010c     ................
 803af88:	010c010c 010c010c 010c010c 010c010c     ................
 803af98:	010c010c 010c010c 010c010c 010d010d     ................
 803afa8:	010d010d 010d010d 010d010d 010d010d     ................
 803afb8:	010d010d 010d010d 010d010d 010d010d     ................
 803afc8:	010d010d 010d010d 010d010d 010d010d     ................
 803afd8:	010d010d 010d010d 010d010d 010d010d     ................
 803afe8:	010d010d 010d010d 010d010d 010d010d     ................
 803aff8:	010d010d 010d010d 010d010d 010d010d     ................
 803b008:	010d010d 010d010d 010e010e 010e010e     ................
 803b018:	010e010e 010e010e 010e010e 010e010e     ................
 803b028:	010e010e 010e010e 010e010e 010e010e     ................
 803b038:	010e010e 010e010e 010e010e 010e010e     ................
 803b048:	010e010e 010e010e 010e010e 010e010e     ................
 803b058:	010e010e 010e010e 010e010e 010e010e     ................
 803b068:	010e010e 010e010e 010e010e 010e010e     ................
 803b078:	010f010e 010f010f 010f010f 010f010f     ................
 803b088:	010f010f 010f010f 010f010f 010f010f     ................
 803b098:	010f010f 010f010f 010f010f 010f010f     ................
 803b0a8:	010f010f 010f010f 010f010f 010f010f     ................
 803b0b8:	010f010f 010f010f 010f010f 010f010f     ................
 803b0c8:	010f010f 010f010f 010f010f 010f010f     ................
 803b0d8:	010f010f 010f010f 010f010f 01100110     ................
 803b0e8:	01100110 01100110 01100110 01100110     ................
 803b0f8:	01100110 01100110 01100110 01100110     ................
 803b108:	01100110 01100110 01100110 01100110     ................
 803b118:	01100110 01100110 01100110 01100110     ................
 803b128:	01100110 01100110 01100110 01100110     ................
 803b138:	01100110 01100110 01100110 01100110     ................
 803b148:	01100110 01100110 01110111 01110111     ................
 803b158:	01110111 01110111 01110111 01110111     ................
 803b168:	01110111 01110111 01110111 01110111     ................
 803b178:	01110111 01110111 01110111 01110111     ................
 803b188:	01110111 01110111 01110111 01110111     ................
 803b198:	01110111 01110111 01110111 01110111     ................
 803b1a8:	01110111 01110111 01110111 01110111     ................
 803b1b8:	01120111 01120112 01120112 01120112     ................
 803b1c8:	01120112 01120112 01120112 01120112     ................
 803b1d8:	01120112 01120112 01120112 01120112     ................
 803b1e8:	01120112 01120112 01120112 01120112     ................
 803b1f8:	01120112 01120112 01120112 01120112     ................
 803b208:	01120112 01120112 01120112 01120112     ................
 803b218:	01120112 01120112 01120112 01130113     ................
 803b228:	01130113 01130113 01130113 01130113     ................
 803b238:	01130113 01130113 01130113 01130113     ................
 803b248:	01130113 01130113 01130113 01130113     ................
 803b258:	01130113 01130113 01130113 01130113     ................
 803b268:	01130113 01130113 01130113 01130113     ................
 803b278:	01130113 01130113 01130113 01130113     ................
 803b288:	01130113 01130113 01140114 01140114     ................
 803b298:	01140114 01140114 01140114 01140114     ................
 803b2a8:	01140114 01140114 01140114 01140114     ................
 803b2b8:	01140114 01140114 01140114 01140114     ................
 803b2c8:	01140114 01140114 01140114 01140114     ................
 803b2d8:	01140114 01140114 01140114 01140114     ................
 803b2e8:	01140114 01140114 01140114 01140114     ................
 803b2f8:	01150114 01150115 01150115 01150115     ................
 803b308:	01150115 01150115 01150115 01150115     ................
 803b318:	01150115 01150115 01150115 01150115     ................
 803b328:	01150115 01150115 01150115 01150115     ................
 803b338:	01150115 01150115 01150115 01150115     ................
 803b348:	01150115 01150115 01150115 01150115     ................
 803b358:	01150115 01150115 01150115 01160116     ................
 803b368:	01160116 01160116 01160116 01160116     ................
 803b378:	01160116 01160116 01160116 01160116     ................
 803b388:	01160116 01160116 01160116 01160116     ................
 803b398:	01160116 01160116 01160116 01160116     ................
 803b3a8:	01160116 01160116 01160116 01160116     ................
 803b3b8:	01160116 01160116 01160116 01160116     ................
 803b3c8:	01160116 01160116 01170117 01170117     ................
 803b3d8:	01170117 01170117 01170117 01170117     ................
 803b3e8:	01170117 01170117 01170117 01170117     ................
 803b3f8:	01170117 01170117 01170117 01170117     ................
 803b408:	01170117 01170117 01170117 01170117     ................
 803b418:	01170117 01170117 01170117 01170117     ................
 803b428:	01170117 01170117 01170117 01170117     ................
 803b438:	01180117 01180118 01180118 01180118     ................
 803b448:	01180118 01180118 01180118 01180118     ................
 803b458:	01180118 01180118 01180118 01180118     ................
 803b468:	01180118 01180118 01180118 01180118     ................
 803b478:	01180118 01180118 01180118 01180118     ................
 803b488:	01180118 01180118 01180118 01180118     ................
 803b498:	01180118 01180118 01180118 01190119     ................
 803b4a8:	01190119 01190119 01190119 01190119     ................
 803b4b8:	01190119 01190119 01190119 01190119     ................
 803b4c8:	01190119 01190119 01190119 01190119     ................
 803b4d8:	01190119 01190119 01190119 01190119     ................
 803b4e8:	01190119 01190119 01190119 01190119     ................
 803b4f8:	01190119 01190119 01190119 01190119     ................
 803b508:	01190119 011a0119 011a011a 011a011a     ................
 803b518:	011a011a 011a011a 011a011a 011a011a     ................
 803b528:	011a011a 011a011a 011a011a 011a011a     ................
 803b538:	011a011a 011a011a 011a011a 011a011a     ................
 803b548:	011a011a 011a011a 011a011a 011a011a     ................
 803b558:	011a011a 011a011a 011a011a 011a011a     ................
 803b568:	011a011a 011a011a 011a011a 011a011a     ................
 803b578:	011b011a 011b011b 011b011b 011b011b     ................
 803b588:	011b011b 011b011b 011b011b 011b011b     ................
 803b598:	011b011b 011b011b 011b011b 011b011b     ................
 803b5a8:	011b011b 011b011b 011b011b 011b011b     ................
 803b5b8:	011b011b 011b011b 011b011b 011b011b     ................
 803b5c8:	011b011b 011b011b 011b011b 011b011b     ................
 803b5d8:	011b011b 011b011b 011b011b 011c011c     ................
 803b5e8:	011c011c 011c011c 011c011c 011c011c     ................
 803b5f8:	011c011c 011c011c 011c011c 011c011c     ................
 803b608:	011c011c 011c011c 011c011c 011c011c     ................
 803b618:	011c011c 011c011c 011c011c 011c011c     ................
 803b628:	011c011c 011c011c 011c011c 011c011c     ................
 803b638:	011c011c 011c011c 011c011c 011c011c     ................
 803b648:	011c011c 011d011c 011d011d 011d011d     ................
 803b658:	011d011d 011d011d 011d011d 011d011d     ................
 803b668:	011d011d 011d011d 011d011d 011d011d     ................
 803b678:	011d011d 011d011d 011d011d 011d011d     ................
 803b688:	011d011d 011d011d 011d011d 011d011d     ................
 803b698:	011d011d 011d011d 011d011d 011d011d     ................
 803b6a8:	011d011d 011d011d 011d011d 011d011d     ................
 803b6b8:	011e011e 011e011e 011e011e 011e011e     ................
 803b6c8:	011e011e 011e011e 011e011e 011e011e     ................
 803b6d8:	011e011e 011e011e 011e011e 011e011e     ................
 803b6e8:	011e011e 011e011e 011e011e 011e011e     ................
 803b6f8:	011e011e 011e011e 011e011e 011e011e     ................
 803b708:	011e011e 011e011e 011e011e 011e011e     ................
 803b718:	011e011e 011e011e 011f011e 011f011f     ................
 803b728:	011f011f 011f011f 011f011f 011f011f     ................
 803b738:	011f011f 011f011f 011f011f 011f011f     ................
 803b748:	011f011f 011f011f 011f011f 011f011f     ................
 803b758:	011f011f 011f011f 011f011f 011f011f     ................
 803b768:	011f011f 011f011f 011f011f 011f011f     ................
 803b778:	011f011f 011f011f 011f011f 011f011f     ................
 803b788:	011f011f 0120011f 01200120 01200120     ...... . . . . .
 803b798:	01200120 01200120 01200120 01200120      . . . . . . . .
 803b7a8:	01200120 01200120 01200120 01200120      . . . . . . . .
 803b7b8:	01200120 01200120 01200120 01200120      . . . . . . . .
 803b7c8:	01200120 01200120 01200120 01200120      . . . . . . . .
 803b7d8:	01200120 01200120 01200120 01200120      . . . . . . . .
 803b7e8:	01200120 01200120 01200120 01200120      . . . . . . . .
 803b7f8:	01210121 01210121 01210121 01210121     !.!.!.!.!.!.!.!.
 803b808:	01210121 01210121 01210121 01210121     !.!.!.!.!.!.!.!.
 803b818:	01210121 01210121 01210121 01210121     !.!.!.!.!.!.!.!.
 803b828:	01210121 01210121 01210121 01210121     !.!.!.!.!.!.!.!.
 803b838:	01210121 01210121 01210121 01210121     !.!.!.!.!.!.!.!.
 803b848:	01210121 01210121 01210121 01210121     !.!.!.!.!.!.!.!.
 803b858:	01210121 01210121 01220121 01220122     !.!.!.!.!.".".".
 803b868:	01220122 01220122 01220122 01220122     ".".".".".".".".
 803b878:	01220122 01220122 01220122 01220122     ".".".".".".".".
 803b888:	01220122 01220122 01220122 01220122     ".".".".".".".".
 803b898:	01220122 01220122 01220122 01220122     ".".".".".".".".
 803b8a8:	01220122 01220122 01220122 01220122     ".".".".".".".".
 803b8b8:	01220122 01220122 01220122 01220122     ".".".".".".".".
 803b8c8:	01220122 01230123 01230123 01230123     ".".#.#.#.#.#.#.
 803b8d8:	01230123 01230123 01230123 01230123     #.#.#.#.#.#.#.#.
 803b8e8:	01230123 01230123 01230123 01230123     #.#.#.#.#.#.#.#.
 803b8f8:	01230123 01230123 01230123 01230123     #.#.#.#.#.#.#.#.
 803b908:	01230123 01230123 01230123 01230123     #.#.#.#.#.#.#.#.
 803b918:	01230123 01230123 01230123 01230123     #.#.#.#.#.#.#.#.
 803b928:	01230123 01230123 01230123 01240123     #.#.#.#.#.#.#.$.
 803b938:	01240124 01240124 01240124 01240124     $.$.$.$.$.$.$.$.
 803b948:	01240124 01240124 01240124 01240124     $.$.$.$.$.$.$.$.
 803b958:	01240124 01240124 01240124 01240124     $.$.$.$.$.$.$.$.
 803b968:	01240124 01240124 01240124 01240124     $.$.$.$.$.$.$.$.
 803b978:	01240124 01240124 01240124 01240124     $.$.$.$.$.$.$.$.
 803b988:	01240124 01240124 01240124 01240124     $.$.$.$.$.$.$.$.
 803b998:	01240124 01240124 01250125 01250125     $.$.$.$.%.%.%.%.
 803b9a8:	01250125 01250125 01250125 01250125     %.%.%.%.%.%.%.%.
 803b9b8:	01250125 01250125 01250125 01250125     %.%.%.%.%.%.%.%.
 803b9c8:	01250125 01250125 01250125 01250125     %.%.%.%.%.%.%.%.
 803b9d8:	01250125 01250125 01250125 01250125     %.%.%.%.%.%.%.%.
 803b9e8:	01250125 01250125 01250125 01250125     %.%.%.%.%.%.%.%.
 803b9f8:	01250125 01250125 01250125 01250125     %.%.%.%.%.%.%.%.
 803ba08:	01250125 01260126 01260126 01260126     %.%.&.&.&.&.&.&.
 803ba18:	01260126 01260126 01260126 01260126     &.&.&.&.&.&.&.&.
 803ba28:	01260126 01260126 01260126 01260126     &.&.&.&.&.&.&.&.
 803ba38:	01260126 01260126 01260126 01260126     &.&.&.&.&.&.&.&.
 803ba48:	01260126 01260126 01260126 01260126     &.&.&.&.&.&.&.&.
 803ba58:	01260126 01260126 01260126 01260126     &.&.&.&.&.&.&.&.
 803ba68:	01260126 01260126 01260126 01270126     &.&.&.&.&.&.&.'.
 803ba78:	01270127 01270127 01270127 01270127     '.'.'.'.'.'.'.'.
 803ba88:	01270127 01270127 01270127 01270127     '.'.'.'.'.'.'.'.
 803ba98:	01270127 01270127 01270127 01270127     '.'.'.'.'.'.'.'.
 803baa8:	01270127 01270127 01270127 01270127     '.'.'.'.'.'.'.'.
 803bab8:	01270127 01270127 01270127 01270127     '.'.'.'.'.'.'.'.
 803bac8:	01270127 01270127 01270127 01270127     '.'.'.'.'.'.'.'.
 803bad8:	01270127 01270127 01280128 01280128     '.'.'.'.(.(.(.(.
 803bae8:	01280128 01280128 01280128 01280128     (.(.(.(.(.(.(.(.
 803baf8:	01280128 01280128 01280128 01280128     (.(.(.(.(.(.(.(.
 803bb08:	01280128 01280128 01280128 01280128     (.(.(.(.(.(.(.(.
 803bb18:	01280128 01280128 01280128 01280128     (.(.(.(.(.(.(.(.
 803bb28:	01280128 01280128 01280128 01280128     (.(.(.(.(.(.(.(.
 803bb38:	01280128 01280128 01280128 01280128     (.(.(.(.(.(.(.(.
 803bb48:	01290128 01290129 01290129 01290129     (.).).).).).).).
 803bb58:	01290129 01290129 01290129 01290129     ).).).).).).).).
 803bb68:	01290129 01290129 01290129 01290129     ).).).).).).).).
 803bb78:	01290129 01290129 01290129 01290129     ).).).).).).).).
 803bb88:	01290129 01290129 01290129 01290129     ).).).).).).).).
 803bb98:	01290129 01290129 01290129 01290129     ).).).).).).).).
 803bba8:	01290129 01290129 01290129 012a012a     ).).).).).).*.*.
 803bbb8:	012a012a 012a012a 012a012a 012a012a     *.*.*.*.*.*.*.*.
 803bbc8:	012a012a 012a012a 012a012a 012a012a     *.*.*.*.*.*.*.*.
 803bbd8:	012a012a 012a012a 012a012a 012a012a     *.*.*.*.*.*.*.*.
 803bbe8:	012a012a 012a012a 012a012a 012a012a     *.*.*.*.*.*.*.*.
 803bbf8:	012a012a 012a012a 012a012a 012a012a     *.*.*.*.*.*.*.*.
 803bc08:	012a012a 012a012a 012a012a 012a012a     *.*.*.*.*.*.*.*.
 803bc18:	012a012a 012b012a 012b012b 012b012b     *.*.*.+.+.+.+.+.
 803bc28:	012b012b 012b012b 012b012b 012b012b     +.+.+.+.+.+.+.+.
 803bc38:	012b012b 012b012b 012b012b 012b012b     +.+.+.+.+.+.+.+.
 803bc48:	012b012b 012b012b 012b012b 012b012b     +.+.+.+.+.+.+.+.
 803bc58:	012b012b 012b012b 012b012b 012b012b     +.+.+.+.+.+.+.+.
 803bc68:	012b012b 012b012b 012b012b 012b012b     +.+.+.+.+.+.+.+.
 803bc78:	012b012b 012b012b 012b012b 012b012b     +.+.+.+.+.+.+.+.
 803bc88:	00676f6c 00000000 00000043              log.....C...

Disassembly of section .ram_code:

1fffc800 <PWM_SVM_lSymCompValUpdate>:
        (XMC_CCU8_SLICE_COMPARE_CHANNEL_t) XMC_CCU8_SLICE_COMPARE_CHANNEL_2,
        (uint16_t)(HandlePtr->v_tb + (uint16_t)((uint16_t) HandlePtr->tb >> (uint16_t) 1) + (uint16_t) HandlePtr->ta));

}
static void PWM_SVM_lSymCompValUpdate(PWM_SVM_t* const HandlePtr)
{
1fffc800:	b480      	push	{r7}
1fffc802:	b083      	sub	sp, #12
1fffc804:	af00      	add	r7, sp, #0
1fffc806:	6078      	str	r0, [r7, #4]
  /*Update the compare register with appropriate value  based on sector*/
  switch ((HandlePtr->sector & 7U))
1fffc808:	687b      	ldr	r3, [r7, #4]
1fffc80a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
1fffc80e:	f003 0307 	and.w	r3, r3, #7
1fffc812:	2b04      	cmp	r3, #4
1fffc814:	f200 8086 	bhi.w	1fffc924 <__initial_sp+0x124>
1fffc818:	a201      	add	r2, pc, #4	; (adr r2, 1fffc820 <__initial_sp+0x20>)
1fffc81a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1fffc81e:	bf00      	nop
1fffc820:	1fffc835 	.word	0x1fffc835
1fffc824:	1fffc865 	.word	0x1fffc865
1fffc828:	1fffc895 	.word	0x1fffc895
1fffc82c:	1fffc8c5 	.word	0x1fffc8c5
1fffc830:	1fffc8f5 	.word	0x1fffc8f5
    {
    case 0:/*sector 0*/
      *HandlePtr->phaseu_crs = (uint32_t) HandlePtr->v_tb;
1fffc834:	687b      	ldr	r3, [r7, #4]
1fffc836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
1fffc838:	687a      	ldr	r2, [r7, #4]
1fffc83a:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
1fffc83e:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasev_crs = (uint32_t) (HandlePtr->v_tb + HandlePtr->tb);
1fffc840:	687b      	ldr	r3, [r7, #4]
1fffc842:	6f5b      	ldr	r3, [r3, #116]	; 0x74
1fffc844:	687a      	ldr	r2, [r7, #4]
1fffc846:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
1fffc84a:	4611      	mov	r1, r2
1fffc84c:	687a      	ldr	r2, [r7, #4]
1fffc84e:	f8b2 20b0 	ldrh.w	r2, [r2, #176]	; 0xb0
1fffc852:	440a      	add	r2, r1
1fffc854:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasew_crs = (uint32_t) HandlePtr->v_ta;
1fffc856:	687b      	ldr	r3, [r7, #4]
1fffc858:	6f9b      	ldr	r3, [r3, #120]	; 0x78
1fffc85a:	687a      	ldr	r2, [r7, #4]
1fffc85c:	f8b2 20b6 	ldrh.w	r2, [r2, #182]	; 0xb6
1fffc860:	601a      	str	r2, [r3, #0]
       break;
1fffc862:	e077      	b.n	1fffc954 <__initial_sp+0x154>
    case 1:/*sector 1*/
      *HandlePtr->phaseu_crs = (uint32_t) (HandlePtr->v_tb + HandlePtr->ta);
1fffc864:	687b      	ldr	r3, [r7, #4]
1fffc866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
1fffc868:	687a      	ldr	r2, [r7, #4]
1fffc86a:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
1fffc86e:	4611      	mov	r1, r2
1fffc870:	687a      	ldr	r2, [r7, #4]
1fffc872:	f8b2 20ae 	ldrh.w	r2, [r2, #174]	; 0xae
1fffc876:	440a      	add	r2, r1
1fffc878:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasev_crs = (uint32_t) (HandlePtr->v_tb);
1fffc87a:	687b      	ldr	r3, [r7, #4]
1fffc87c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
1fffc87e:	687a      	ldr	r2, [r7, #4]
1fffc880:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
1fffc884:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasew_crs = (uint32_t) HandlePtr->v_ta;
1fffc886:	687b      	ldr	r3, [r7, #4]
1fffc888:	6f9b      	ldr	r3, [r3, #120]	; 0x78
1fffc88a:	687a      	ldr	r2, [r7, #4]
1fffc88c:	f8b2 20b6 	ldrh.w	r2, [r2, #182]	; 0xb6
1fffc890:	601a      	str	r2, [r3, #0]
       break;
1fffc892:	e05f      	b.n	1fffc954 <__initial_sp+0x154>
    case 2:/*sector 2*/
      *HandlePtr->phaseu_crs = (uint32_t) HandlePtr->v_ta;
1fffc894:	687b      	ldr	r3, [r7, #4]
1fffc896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
1fffc898:	687a      	ldr	r2, [r7, #4]
1fffc89a:	f8b2 20b6 	ldrh.w	r2, [r2, #182]	; 0xb6
1fffc89e:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasev_crs = (uint32_t) HandlePtr->v_tb;
1fffc8a0:	687b      	ldr	r3, [r7, #4]
1fffc8a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
1fffc8a4:	687a      	ldr	r2, [r7, #4]
1fffc8a6:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
1fffc8aa:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasew_crs = (uint32_t) (HandlePtr->v_tb + HandlePtr->tb);
1fffc8ac:	687b      	ldr	r3, [r7, #4]
1fffc8ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
1fffc8b0:	687a      	ldr	r2, [r7, #4]
1fffc8b2:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
1fffc8b6:	4611      	mov	r1, r2
1fffc8b8:	687a      	ldr	r2, [r7, #4]
1fffc8ba:	f8b2 20b0 	ldrh.w	r2, [r2, #176]	; 0xb0
1fffc8be:	440a      	add	r2, r1
1fffc8c0:	601a      	str	r2, [r3, #0]
       break;
1fffc8c2:	e047      	b.n	1fffc954 <__initial_sp+0x154>
    case 3:/*sector 3*/
      *HandlePtr->phaseu_crs = (uint32_t) HandlePtr->v_ta;
1fffc8c4:	687b      	ldr	r3, [r7, #4]
1fffc8c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
1fffc8c8:	687a      	ldr	r2, [r7, #4]
1fffc8ca:	f8b2 20b6 	ldrh.w	r2, [r2, #182]	; 0xb6
1fffc8ce:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasev_crs = (uint32_t)( HandlePtr->v_tb+ HandlePtr->ta);
1fffc8d0:	687b      	ldr	r3, [r7, #4]
1fffc8d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
1fffc8d4:	687a      	ldr	r2, [r7, #4]
1fffc8d6:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
1fffc8da:	4611      	mov	r1, r2
1fffc8dc:	687a      	ldr	r2, [r7, #4]
1fffc8de:	f8b2 20ae 	ldrh.w	r2, [r2, #174]	; 0xae
1fffc8e2:	440a      	add	r2, r1
1fffc8e4:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasew_crs = (uint32_t) HandlePtr->v_tb;
1fffc8e6:	687b      	ldr	r3, [r7, #4]
1fffc8e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
1fffc8ea:	687a      	ldr	r2, [r7, #4]
1fffc8ec:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
1fffc8f0:	601a      	str	r2, [r3, #0]
       break;
1fffc8f2:	e02f      	b.n	1fffc954 <__initial_sp+0x154>
    case 4:/*sector 4*/
      *HandlePtr->phaseu_crs = (uint32_t) HandlePtr->v_tb+ HandlePtr->tb;
1fffc8f4:	687b      	ldr	r3, [r7, #4]
1fffc8f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
1fffc8f8:	687a      	ldr	r2, [r7, #4]
1fffc8fa:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
1fffc8fe:	4611      	mov	r1, r2
1fffc900:	687a      	ldr	r2, [r7, #4]
1fffc902:	f8b2 20b0 	ldrh.w	r2, [r2, #176]	; 0xb0
1fffc906:	440a      	add	r2, r1
1fffc908:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasev_crs = (uint32_t) HandlePtr->v_ta;
1fffc90a:	687b      	ldr	r3, [r7, #4]
1fffc90c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
1fffc90e:	687a      	ldr	r2, [r7, #4]
1fffc910:	f8b2 20b6 	ldrh.w	r2, [r2, #182]	; 0xb6
1fffc914:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasew_crs = (uint32_t) HandlePtr->v_tb;
1fffc916:	687b      	ldr	r3, [r7, #4]
1fffc918:	6f9b      	ldr	r3, [r3, #120]	; 0x78
1fffc91a:	687a      	ldr	r2, [r7, #4]
1fffc91c:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
1fffc920:	601a      	str	r2, [r3, #0]
       break;
1fffc922:	e017      	b.n	1fffc954 <__initial_sp+0x154>
    default:/*sector 5*/
      *HandlePtr->phaseu_crs = (uint32_t) HandlePtr->v_tb;
1fffc924:	687b      	ldr	r3, [r7, #4]
1fffc926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
1fffc928:	687a      	ldr	r2, [r7, #4]
1fffc92a:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
1fffc92e:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasev_crs = (uint32_t) HandlePtr->v_ta;
1fffc930:	687b      	ldr	r3, [r7, #4]
1fffc932:	6f5b      	ldr	r3, [r3, #116]	; 0x74
1fffc934:	687a      	ldr	r2, [r7, #4]
1fffc936:	f8b2 20b6 	ldrh.w	r2, [r2, #182]	; 0xb6
1fffc93a:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasew_crs = (uint32_t) HandlePtr->v_tb+ HandlePtr->ta;
1fffc93c:	687b      	ldr	r3, [r7, #4]
1fffc93e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
1fffc940:	687a      	ldr	r2, [r7, #4]
1fffc942:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
1fffc946:	4611      	mov	r1, r2
1fffc948:	687a      	ldr	r2, [r7, #4]
1fffc94a:	f8b2 20ae 	ldrh.w	r2, [r2, #174]	; 0xae
1fffc94e:	440a      	add	r2, r1
1fffc950:	601a      	str	r2, [r3, #0]
      break;
1fffc952:	bf00      	nop
    }
}
1fffc954:	370c      	adds	r7, #12
1fffc956:	46bd      	mov	sp, r7
1fffc958:	f85d 7b04 	ldr.w	r7, [sp], #4
1fffc95c:	4770      	bx	lr
1fffc95e:	bf00      	nop

1fffc960 <PWM_SVM_CalCmpValueSym7>:

/**
 * This function calculates the CCU8 slice compare valuefor Symmetric 7-segment SVM.
 */
__INLINE void PWM_SVM_CalCmpValueSym7(PWM_SVM_t* const HandlePtr)
{
1fffc960:	b580      	push	{r7, lr}
1fffc962:	b082      	sub	sp, #8
1fffc964:	af00      	add	r7, sp, #0
1fffc966:	6078      	str	r0, [r7, #4]
  /*If segment time ta less than tmin set to tmin*/
  if (HandlePtr->ta < (uint16_t) HandlePtr->tmin)
1fffc968:	687b      	ldr	r3, [r7, #4]
1fffc96a:	f8b3 20ae 	ldrh.w	r2, [r3, #174]	; 0xae
1fffc96e:	687b      	ldr	r3, [r7, #4]
1fffc970:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
1fffc974:	429a      	cmp	r2, r3
1fffc976:	d205      	bcs.n	1fffc984 <PWM_SVM_CalCmpValueSym7+0x24>
  {
    HandlePtr->ta = (uint16_t) HandlePtr->tmin;
1fffc978:	687b      	ldr	r3, [r7, #4]
1fffc97a:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	; 0xc2
1fffc97e:	687b      	ldr	r3, [r7, #4]
1fffc980:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
  }
  /*If segment time tb less than tmin set to tmin*/
  if (HandlePtr->tb < (uint16_t) HandlePtr->tmin)
1fffc984:	687b      	ldr	r3, [r7, #4]
1fffc986:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	; 0xb0
1fffc98a:	687b      	ldr	r3, [r7, #4]
1fffc98c:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
1fffc990:	429a      	cmp	r2, r3
1fffc992:	d205      	bcs.n	1fffc9a0 <PWM_SVM_CalCmpValueSym7+0x40>
  {
    HandlePtr->tb = (uint16_t) HandlePtr->tmin;
1fffc994:	687b      	ldr	r3, [r7, #4]
1fffc996:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	; 0xc2
1fffc99a:	687b      	ldr	r3, [r7, #4]
1fffc99c:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
  }

  HandlePtr->v_ta = (uint16_t)(((uint32_t) HandlePtr->period + (uint16_t) HandlePtr->ta) + (uint16_t) HandlePtr->tb)
1fffc9a0:	687b      	ldr	r3, [r7, #4]
1fffc9a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
1fffc9a6:	b29a      	uxth	r2, r3
1fffc9a8:	687b      	ldr	r3, [r7, #4]
1fffc9aa:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
1fffc9ae:	4413      	add	r3, r2
1fffc9b0:	b29a      	uxth	r2, r3
1fffc9b2:	687b      	ldr	r3, [r7, #4]
1fffc9b4:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
1fffc9b8:	4413      	add	r3, r2
1fffc9ba:	b29b      	uxth	r3, r3
1fffc9bc:	085b      	lsrs	r3, r3, #1
1fffc9be:	b29a      	uxth	r2, r3
1fffc9c0:	687b      	ldr	r3, [r7, #4]
1fffc9c2:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
                     >> (uint16_t) 1;
  HandlePtr->v_tb = (uint16_t)((uint16_t) HandlePtr->period - ((uint16_t) HandlePtr->ta + (uint16_t) HandlePtr->tb))
1fffc9c6:	687b      	ldr	r3, [r7, #4]
1fffc9c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
1fffc9cc:	b29a      	uxth	r2, r3
1fffc9ce:	687b      	ldr	r3, [r7, #4]
1fffc9d0:	f8b3 10ae 	ldrh.w	r1, [r3, #174]	; 0xae
1fffc9d4:	687b      	ldr	r3, [r7, #4]
1fffc9d6:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
1fffc9da:	440b      	add	r3, r1
1fffc9dc:	b29b      	uxth	r3, r3
1fffc9de:	1ad3      	subs	r3, r2, r3
1fffc9e0:	b29b      	uxth	r3, r3
1fffc9e2:	085b      	lsrs	r3, r3, #1
1fffc9e4:	b29a      	uxth	r2, r3
1fffc9e6:	687b      	ldr	r3, [r7, #4]
1fffc9e8:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
    /* Update the compare register values based on the sector number */
    PWM_SVM_lUpdateDcLinkComRes(HandlePtr);
  }
#endif
  /* Update the compare register values based on the sector number */
  PWM_SVM_lSymCompValUpdate(HandlePtr);
1fffc9ec:	6878      	ldr	r0, [r7, #4]
1fffc9ee:	f7ff ff07 	bl	1fffc800 <PWM_SVM_lSymCompValUpdate>

}
1fffc9f2:	3708      	adds	r7, #8
1fffc9f4:	46bd      	mov	sp, r7
1fffc9f6:	bd80      	pop	{r7, pc}

1fffc9f8 <PWM_SVM_CalCmpValueSym5>:

/**
 * This function calculates the CCU8 slice compare value for Symmetric 5-segment SVM.
 */
__INLINE void PWM_SVM_CalCmpValueSym5(PWM_SVM_t* const HandlePtr)
{
1fffc9f8:	b580      	push	{r7, lr}
1fffc9fa:	b082      	sub	sp, #8
1fffc9fc:	af00      	add	r7, sp, #0
1fffc9fe:	6078      	str	r0, [r7, #4]
  /*If segment time ta less than tmin set to tmin*/
  if (HandlePtr->ta < HandlePtr->tmin)
1fffca00:	687b      	ldr	r3, [r7, #4]
1fffca02:	f8b3 20ae 	ldrh.w	r2, [r3, #174]	; 0xae
1fffca06:	687b      	ldr	r3, [r7, #4]
1fffca08:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
1fffca0c:	429a      	cmp	r2, r3
1fffca0e:	d205      	bcs.n	1fffca1c <PWM_SVM_CalCmpValueSym5+0x24>
  {
    HandlePtr->ta = HandlePtr->tmin;
1fffca10:	687b      	ldr	r3, [r7, #4]
1fffca12:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	; 0xc2
1fffca16:	687b      	ldr	r3, [r7, #4]
1fffca18:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
  }
  /*If segment time tb less than tmin set to tmin*/
  if (HandlePtr->tb < HandlePtr->tmin)
1fffca1c:	687b      	ldr	r3, [r7, #4]
1fffca1e:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	; 0xb0
1fffca22:	687b      	ldr	r3, [r7, #4]
1fffca24:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
1fffca28:	429a      	cmp	r2, r3
1fffca2a:	d205      	bcs.n	1fffca38 <PWM_SVM_CalCmpValueSym5+0x40>
  {
    HandlePtr->tb = HandlePtr->tmin;
1fffca2c:	687b      	ldr	r3, [r7, #4]
1fffca2e:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	; 0xc2
1fffca32:	687b      	ldr	r3, [r7, #4]
1fffca34:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
  }
  HandlePtr->v_ta = (uint16_t) HandlePtr->period + 1U;
1fffca38:	687b      	ldr	r3, [r7, #4]
1fffca3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
1fffca3e:	b29b      	uxth	r3, r3
1fffca40:	3301      	adds	r3, #1
1fffca42:	b29a      	uxth	r2, r3
1fffca44:	687b      	ldr	r3, [r7, #4]
1fffca46:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
  HandlePtr->v_tb = ((uint16_t) HandlePtr->period - HandlePtr->ta) - HandlePtr->tb;
1fffca4a:	687b      	ldr	r3, [r7, #4]
1fffca4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
1fffca50:	b29a      	uxth	r2, r3
1fffca52:	687b      	ldr	r3, [r7, #4]
1fffca54:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
1fffca58:	1ad3      	subs	r3, r2, r3
1fffca5a:	b29a      	uxth	r2, r3
1fffca5c:	687b      	ldr	r3, [r7, #4]
1fffca5e:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
1fffca62:	1ad3      	subs	r3, r2, r3
1fffca64:	b29a      	uxth	r2, r3
1fffca66:	687b      	ldr	r3, [r7, #4]
1fffca68:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
    /* Update the compare register values based on the sector number */
    PWM_SVM_lUpdateDcLinkComRes(HandlePtr);
  }
#endif
  /* Update the compare register values based on the sector number */
  PWM_SVM_lSymCompValUpdate(HandlePtr);
1fffca6c:	6878      	ldr	r0, [r7, #4]
1fffca6e:	f7ff fec7 	bl	1fffc800 <PWM_SVM_lSymCompValUpdate>
}
1fffca72:	3708      	adds	r7, #8
1fffca74:	46bd      	mov	sp, r7
1fffca76:	bd80      	pop	{r7, pc}

1fffca78 <PWM_SVM_TimecalcUsingLUT>:
#if(1U == PWM_SVM_IS_LUT_ENABLE)
/*
 * SVM Segment Time calculation using Look up table
 */
void PWM_SVM_TimecalcUsingLUT(PWM_SVM_t* const HandlePtr, uint16_t Amplitude, uint32_t Angle)
{
1fffca78:	b480      	push	{r7}
1fffca7a:	b08b      	sub	sp, #44	; 0x2c
1fffca7c:	af00      	add	r7, sp, #0
1fffca7e:	60f8      	str	r0, [r7, #12]
1fffca80:	460b      	mov	r3, r1
1fffca82:	607a      	str	r2, [r7, #4]
1fffca84:	817b      	strh	r3, [r7, #10]
  uint16_t ta_tb,ta;
  uint32_t Dividend_Sine, Divisor_Sine;        /*Ts x sin(θrel), sin(θrel)+sin(60°-θrel)*/
  XMC_ASSERT("PWM_SVM_lTimecalcUsingLUT:NULL Handle Pointer",
      (HandlePtr != (PWM_SVM_t *)NULL));

  angletemp = (uint32_t)((Angle & (uint32_t)0xFFFFFF) >> 14U) * 6U;
1fffca86:	687b      	ldr	r3, [r7, #4]
1fffca88:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
1fffca8c:	0b9a      	lsrs	r2, r3, #14
1fffca8e:	4613      	mov	r3, r2
1fffca90:	005b      	lsls	r3, r3, #1
1fffca92:	4413      	add	r3, r2
1fffca94:	005b      	lsls	r3, r3, #1
1fffca96:	627b      	str	r3, [r7, #36]	; 0x24
  HandlePtr->sector_angle = (uint32_t)(angletemp & (uint32_t) 0x003FF);
1fffca98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1fffca9a:	f3c3 0209 	ubfx	r2, r3, #0, #10
1fffca9e:	68fb      	ldr	r3, [r7, #12]
1fffcaa0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  HandlePtr->sector = (uint32_t)((angletemp >> 10U) & 7U);
1fffcaa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1fffcaa6:	0a9b      	lsrs	r3, r3, #10
1fffcaa8:	f003 0207 	and.w	r2, r3, #7
1fffcaac:	68fb      	ldr	r3, [r7, #12]
1fffcaae:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  if ((uint16_t)Amplitude > (HandlePtr->max_amplitude))
1fffcab2:	68fb      	ldr	r3, [r7, #12]
1fffcab4:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
1fffcab8:	897a      	ldrh	r2, [r7, #10]
1fffcaba:	429a      	cmp	r2, r3
1fffcabc:	d903      	bls.n	1fffcac6 <PWM_SVM_TimecalcUsingLUT+0x4e>
  {
    Amplitude = HandlePtr->max_amplitude;
1fffcabe:	68fb      	ldr	r3, [r7, #12]
1fffcac0:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
1fffcac4:	817b      	strh	r3, [r7, #10]
  }
  HandlePtr->tb = (uint16_t)((Amplitude* Sinus60_tab[1023U - HandlePtr->sector_angle])>> 15U);
1fffcac6:	897a      	ldrh	r2, [r7, #10]
1fffcac8:	68fb      	ldr	r3, [r7, #12]
1fffcaca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
1fffcace:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
1fffcad2:	3303      	adds	r3, #3
1fffcad4:	4949      	ldr	r1, [pc, #292]	; (1fffcbfc <PWM_SVM_TimecalcUsingLUT+0x184>)
1fffcad6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
1fffcada:	fb03 f302 	mul.w	r3, r3, r2
1fffcade:	13db      	asrs	r3, r3, #15
1fffcae0:	b29a      	uxth	r2, r3
1fffcae2:	68fb      	ldr	r3, [r7, #12]
1fffcae4:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
  HandlePtr->tb = (uint16_t)((HandlePtr->tb * HandlePtr->confighandle_ptr->amplitude_scale) >> 10U);
1fffcae8:	68fb      	ldr	r3, [r7, #12]
1fffcaea:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
1fffcaee:	461a      	mov	r2, r3
1fffcaf0:	68fb      	ldr	r3, [r7, #12]
1fffcaf2:	681b      	ldr	r3, [r3, #0]
1fffcaf4:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
1fffcaf8:	fb03 f302 	mul.w	r3, r3, r2
1fffcafc:	129b      	asrs	r3, r3, #10
1fffcafe:	b29a      	uxth	r2, r3
1fffcb00:	68fb      	ldr	r3, [r7, #12]
1fffcb02:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0

  HandlePtr->ta = (uint16_t)((Amplitude* Sinus60_tab[HandlePtr->sector_angle])>> 15U);
1fffcb06:	897b      	ldrh	r3, [r7, #10]
1fffcb08:	68fa      	ldr	r2, [r7, #12]
1fffcb0a:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
1fffcb0e:	493b      	ldr	r1, [pc, #236]	; (1fffcbfc <PWM_SVM_TimecalcUsingLUT+0x184>)
1fffcb10:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
1fffcb14:	fb02 f303 	mul.w	r3, r2, r3
1fffcb18:	13db      	asrs	r3, r3, #15
1fffcb1a:	b29a      	uxth	r2, r3
1fffcb1c:	68fb      	ldr	r3, [r7, #12]
1fffcb1e:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
  HandlePtr->ta = (uint16_t)((HandlePtr->ta * HandlePtr->confighandle_ptr->amplitude_scale) >> 10U);
1fffcb22:	68fb      	ldr	r3, [r7, #12]
1fffcb24:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
1fffcb28:	461a      	mov	r2, r3
1fffcb2a:	68fb      	ldr	r3, [r7, #12]
1fffcb2c:	681b      	ldr	r3, [r3, #0]
1fffcb2e:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
1fffcb32:	fb03 f302 	mul.w	r3, r3, r2
1fffcb36:	129b      	asrs	r3, r3, #10
1fffcb38:	b29a      	uxth	r2, r3
1fffcb3a:	68fb      	ldr	r3, [r7, #12]
1fffcb3c:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
  ta_tb = HandlePtr->ta + HandlePtr->tb;
1fffcb40:	68fb      	ldr	r3, [r7, #12]
1fffcb42:	f8b3 20ae 	ldrh.w	r2, [r3, #174]	; 0xae
1fffcb46:	68fb      	ldr	r3, [r7, #12]
1fffcb48:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
1fffcb4c:	4413      	add	r3, r2
1fffcb4e:	847b      	strh	r3, [r7, #34]	; 0x22
  HandlePtr->t0 = (uint16_t)(HandlePtr->period - ta_tb);
1fffcb50:	68fb      	ldr	r3, [r7, #12]
1fffcb52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
1fffcb56:	b29a      	uxth	r2, r3
1fffcb58:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
1fffcb5a:	1ad3      	subs	r3, r2, r3
1fffcb5c:	b29a      	uxth	r2, r3
1fffcb5e:	68fb      	ldr	r3, [r7, #12]
1fffcb60:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac

  if (ta_tb > (HandlePtr->period))
1fffcb64:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
1fffcb66:	68fb      	ldr	r3, [r7, #12]
1fffcb68:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
1fffcb6c:	429a      	cmp	r2, r3
1fffcb6e:	d93f      	bls.n	1fffcbf0 <PWM_SVM_TimecalcUsingLUT+0x178>
  {
    if (HandlePtr->over_modulation_enable == 1U)
1fffcb70:	68fb      	ldr	r3, [r7, #12]
1fffcb72:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
1fffcb76:	2b01      	cmp	r3, #1
1fffcb78:	d13a      	bne.n	1fffcbf0 <PWM_SVM_TimecalcUsingLUT+0x178>
      /* Above Ta and Tb are not used for SVM PWM.*/

      /* Calculate new T1 and T2 of maximum Vref on SVM Hexagon edges,
       * where T0 = 0 (i.e.: T1+T2 = PERIOD_REG). Relative angle θrel kept the same.
       */
      Dividend_Sine = HandlePtr->period * Sinus60_tab[HandlePtr->sector_angle];
1fffcb7a:	68fb      	ldr	r3, [r7, #12]
1fffcb7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
1fffcb80:	68fa      	ldr	r2, [r7, #12]
1fffcb82:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
1fffcb86:	491d      	ldr	r1, [pc, #116]	; (1fffcbfc <PWM_SVM_TimecalcUsingLUT+0x184>)
1fffcb88:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
1fffcb8c:	fb02 f303 	mul.w	r3, r2, r3
1fffcb90:	61fb      	str	r3, [r7, #28]
      Divisor_Sine  = Sinus60_tab[HandlePtr->sector_angle] + Sinus60_tab[1023U - HandlePtr->sector_angle];
1fffcb92:	68fb      	ldr	r3, [r7, #12]
1fffcb94:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
1fffcb98:	4a18      	ldr	r2, [pc, #96]	; (1fffcbfc <PWM_SVM_TimecalcUsingLUT+0x184>)
1fffcb9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
1fffcb9e:	4619      	mov	r1, r3
1fffcba0:	68fb      	ldr	r3, [r7, #12]
1fffcba2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
1fffcba6:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
1fffcbaa:	3303      	adds	r3, #3
1fffcbac:	4a13      	ldr	r2, [pc, #76]	; (1fffcbfc <PWM_SVM_TimecalcUsingLUT+0x184>)
1fffcbae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
1fffcbb2:	440b      	add	r3, r1
1fffcbb4:	61bb      	str	r3, [r7, #24]
      /* Unsigned Div. Dividend << SHIFT_OVERMODULATION, Quotient >> SHIFT_OVERMODULATION, Divisor no shift.*/
      MATH->DIVCON = (0x00008004 | (PWM_SVM_SHIFT_OVERMODULATION << 16U) | (PWM_SVM_SHIFT_OVERMODULATION << 8U));
      MATH->DVD = Dividend_Sine;
      MATH->DVS = Divisor_Sine;
      #else
      ta = (uint16_t)(Dividend_Sine/Divisor_Sine);
1fffcbb6:	69fa      	ldr	r2, [r7, #28]
1fffcbb8:	69bb      	ldr	r3, [r7, #24]
1fffcbba:	fbb2 f3f3 	udiv	r3, r2, r3
1fffcbbe:	82fb      	strh	r3, [r7, #22]
      #endif
      /*###* CPU computes the following simultaneously when DIV #2 is computing ###*/
      HandlePtr->t0 = 0U;
1fffcbc0:	68fb      	ldr	r3, [r7, #12]
1fffcbc2:	2200      	movs	r2, #0
1fffcbc4:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
      ta_tb = (uint16_t)HandlePtr->period;                /* Make sure below T0/2 >= 0.*/
1fffcbc8:	68fb      	ldr	r3, [r7, #12]
1fffcbca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
1fffcbce:	847b      	strh	r3, [r7, #34]	; 0x22
      #if defined (MATH)
      /*###* Results of DIV #2 for T2 of Over-Modulation ###*/
      while (MATH->DIVST) continue;          /* Wait if DIV is still running calculation.*/
      ta = MATH->QUOT;     /* Read DIV Quotient result. T2 = Ts x sin(theta) / (sin(theta)+sin(60-theta)).*/
      #endif
      HandlePtr->ta = ta;
1fffcbd0:	68fb      	ldr	r3, [r7, #12]
1fffcbd2:	8afa      	ldrh	r2, [r7, #22]
1fffcbd4:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
      /* Ta + Tb = PERIOD_REG for Vref on SVM Hexagon edges.*/
      HandlePtr->tb = (uint16_t)(HandlePtr->period - HandlePtr->ta);
1fffcbd8:	68fb      	ldr	r3, [r7, #12]
1fffcbda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
1fffcbde:	b29a      	uxth	r2, r3
1fffcbe0:	68fb      	ldr	r3, [r7, #12]
1fffcbe2:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
1fffcbe6:	1ad3      	subs	r3, r2, r3
1fffcbe8:	b29a      	uxth	r2, r3
1fffcbea:	68fb      	ldr	r3, [r7, #12]
1fffcbec:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0

    }
  }
}
1fffcbf0:	372c      	adds	r7, #44	; 0x2c
1fffcbf2:	46bd      	mov	sp, r7
1fffcbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
1fffcbf8:	4770      	bx	lr
1fffcbfa:	bf00      	nop
1fffcbfc:	08009f58 	.word	0x08009f58

1fffcc00 <PWM_SVM_SVMUpdate>:
 * This is the SVM algorithm for sinusoidal commutation.
 * It updates the compare registers of the CCU8 slices as per calculated
 * duty cycle.
 */
void PWM_SVM_SVMUpdate(PWM_SVM_t* const HandlePtr, uint16_t Amplitude, uint32_t Angle)
{
1fffcc00:	b580      	push	{r7, lr}
1fffcc02:	b086      	sub	sp, #24
1fffcc04:	af00      	add	r7, sp, #0
1fffcc06:	60f8      	str	r0, [r7, #12]
1fffcc08:	460b      	mov	r3, r1
1fffcc0a:	607a      	str	r2, [r7, #4]
1fffcc0c:	817b      	strh	r3, [r7, #10]
  const PWM_SVM_Config_t* const svmptr = HandlePtr->confighandle_ptr;
1fffcc0e:	68fb      	ldr	r3, [r7, #12]
1fffcc10:	681b      	ldr	r3, [r3, #0]
1fffcc12:	617b      	str	r3, [r7, #20]
  XMC_ASSERT("PWM_SVM_SVMUpdate:NULL Handle Pointer", (HandlePtr != (PWM_SVM_t *) NULL));

  /*This function calculates segment time ta, tb using CORDIC or LUT as per UI configuration */
  HandlePtr->seg_time_calc_ptr(HandlePtr, (uint16_t) Amplitude, (uint32_t) Angle);
1fffcc14:	68fb      	ldr	r3, [r7, #12]
1fffcc16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
1fffcc1a:	897a      	ldrh	r2, [r7, #10]
1fffcc1c:	68f8      	ldr	r0, [r7, #12]
1fffcc1e:	4611      	mov	r1, r2
1fffcc20:	687a      	ldr	r2, [r7, #4]
1fffcc22:	4798      	blx	r3
  /*This function calculates and updates compare values in compare register*/
  HandlePtr->svm_schemesel_ptr(HandlePtr);
1fffcc24:	68fb      	ldr	r3, [r7, #12]
1fffcc26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
1fffcc2a:	68f8      	ldr	r0, [r7, #12]
1fffcc2c:	4798      	blx	r3

  /*Enable the shadow transfer for all three slice*/
  HandlePtr->global_ptr->GCSS |= svmptr->shadow_transfer_mask;
1fffcc2e:	68fb      	ldr	r3, [r7, #12]
1fffcc30:	685b      	ldr	r3, [r3, #4]
1fffcc32:	68fa      	ldr	r2, [r7, #12]
1fffcc34:	6852      	ldr	r2, [r2, #4]
1fffcc36:	6911      	ldr	r1, [r2, #16]
1fffcc38:	697a      	ldr	r2, [r7, #20]
1fffcc3a:	6a52      	ldr	r2, [r2, #36]	; 0x24
1fffcc3c:	430a      	orrs	r2, r1
1fffcc3e:	611a      	str	r2, [r3, #16]
}
1fffcc40:	3718      	adds	r7, #24
1fffcc42:	46bd      	mov	sp, r7
1fffcc44:	bd80      	pop	{r7, pc}
1fffcc46:	bf00      	nop
